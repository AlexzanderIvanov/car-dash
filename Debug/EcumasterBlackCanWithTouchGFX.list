
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028d8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ab8  08028f5c  08028f5c  00038f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003f1a  0802da14  0802da14  0003da14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000334f8  08031930  08031930  00041930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000240  08064e28  08064e28  00074e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08065068  08065068  0008013c  2**0
                  CONTENTS
  7 .ARM          00000008  08065068  08065068  00075068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08065070  08065070  0008013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08065070  08065070  00075070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08065084  08065084  00075084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000013c  20000000  0806508c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cc50  2000013c  080651c8  0008013c  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cd8c  080651c8  0008cd8c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0008013c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006a571  00000000  00000000  0008016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00010c29  00000000  00000000  000ea6dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004eb8  00000000  00000000  000fb308  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004828  00000000  00000000  001001c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003d935  00000000  00000000  001049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004b960  00000000  00000000  0014231d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001365a8  00000000  00000000  0018dc7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002c4225  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001548c  00000000  00000000  002c4320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08028f44 	.word	0x08028f44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000140 	.word	0x20000140
 800020c:	08028f44 	.word	0x08028f44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000158 	.word	0x20000158
 8000b3c:	200001b0 	.word	0x200001b0

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	; 0x68
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <SecondTask+0x218>)
 8000b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	; (8000d5c <SecondTask+0x21c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c f9c4 	bl	800cef8 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00b fed3 	bl	800c91c <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <SecondTask+0x220>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8127 	beq.w	8000dce <SecondTask+0x28e>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b78      	ldr	r3, [pc, #480]	; (8000d64 <SecondTask+0x224>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <SecondTask+0x224>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a73      	ldr	r2, [pc, #460]	; (8000d64 <SecondTask+0x224>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <SecondTask+0x228>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <SecondTask+0x228>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <SecondTask+0x228>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b6e      	ldr	r3, [pc, #440]	; (8000d6c <SecondTask+0x22c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <SecondTask+0x22c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a69      	ldr	r2, [pc, #420]	; (8000d6c <SecondTask+0x22c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <SecondTask+0x230>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a359      	add	r3, pc, #356	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <SecondTask+0x234>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <SecondTask+0x230>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a353      	add	r3, pc, #332	; (adr r3, 8000d40 <SecondTask+0x200>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a59      	ldr	r2, [pc, #356]	; (8000d70 <SecondTask+0x230>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <SecondTask+0x238>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a348      	add	r3, pc, #288	; (adr r3, 8000d38 <SecondTask+0x1f8>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <SecondTask+0x23c>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <SecondTask+0x238>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a344      	add	r3, pc, #272	; (adr r3, 8000d48 <SecondTask+0x208>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <SecondTask+0x238>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <SecondTask+0x240>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <SecondTask+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a47      	ldr	r2, [pc, #284]	; (8000d80 <SecondTask+0x240>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <SecondTask+0x244>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <SecondTask+0x248>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <SecondTask+0x244>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a331      	add	r3, pc, #196	; (adr r3, 8000d50 <SecondTask+0x210>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a38      	ldr	r2, [pc, #224]	; (8000d84 <SecondTask+0x244>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <SecondTask+0x24c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <SecondTask+0x250>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <SecondTask+0x24c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <SecondTask+0x250>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SecondTask+0x250>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a30      	ldr	r2, [pc, #192]	; (8000d90 <SecondTask+0x250>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <SecondTask+0x254>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SecondTask+0x254>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <SecondTask+0x254>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SecondTask+0x254>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SecondTask+0x258>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <SecondTask+0x258>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <SecondTask+0x25c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <SecondTask+0x25c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SecondTask+0x25c>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SecondTask+0x260>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db3c      	blt.n	8000da8 <SecondTask+0x268>
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SecondTask+0x264>)
 8000d30:	e04b      	b.n	8000dca <SecondTask+0x28a>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	3ff66666 	.word	0x3ff66666
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fa99999 	.word	0x3fa99999
 8000d48:	eb851eb8 	.word	0xeb851eb8
 8000d4c:	3faeb851 	.word	0x3faeb851
 8000d50:	9999999a 	.word	0x9999999a
 8000d54:	3fb99999 	.word	0x3fb99999
 8000d58:	08028f5c 	.word	0x08028f5c
 8000d5c:	200087a4 	.word	0x200087a4
 8000d60:	080296dc 	.word	0x080296dc
 8000d64:	20000004 	.word	0x20000004
 8000d68:	2000000c 	.word	0x2000000c
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000010 	.word	0x20000010
 8000d74:	3f19999a 	.word	0x3f19999a
 8000d78:	20000014 	.word	0x20000014
 8000d7c:	3f266666 	.word	0x3f266666
 8000d80:	200003c0 	.word	0x200003c0
 8000d84:	200003c4 	.word	0x200003c4
 8000d88:	3dcccccd 	.word	0x3dcccccd
 8000d8c:	200003c8 	.word	0x200003c8
 8000d90:	200003cc 	.word	0x200003cc
 8000d94:	200003d0 	.word	0x200003d0
 8000d98:	200003d4 	.word	0x200003d4
 8000d9c:	200003d8 	.word	0x200003d8
 8000da0:	200003dc 	.word	0x200003dc
 8000da4:	41200000 	.word	0x41200000
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <SecondTask+0x300>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbe3 	bl	8000578 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <SecondTask+0x2f8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa80 	bl	80002bc <__adddf3>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4621      	mov	r1, r4
 8000dc4:	f7ff fcb8 	bl	8000738 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <SecondTask+0x300>)
 8000dcc:	6013      	str	r3, [r2, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v};
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <SecondTask+0x304>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <SecondTask+0x308>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SecondTask+0x30c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <SecondTask+0x310>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <SecondTask+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <SecondTask+0x318>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	623b      	str	r3, [r7, #32]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <SecondTask+0x31c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <SecondTask+0x320>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SecondTask+0x324>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <SecondTask+0x328>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <SecondTask+0x32c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SecondTask+0x330>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <SecondTask+0x300>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    xQueueSend(messageQ, &dispVals,0);
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SecondTask+0x334>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 010c 	add.w	r1, r7, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	f00c f866 	bl	800cef8 <xQueueGenericSend>
		osDelay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f00b fd75 	bl	800c91c <osDelay>
	{
 8000e32:	e6a0      	b.n	8000b76 <SecondTask+0x36>
 8000e34:	f3af 8000 	nop.w
 8000e38:	33333333 	.word	0x33333333
 8000e3c:	3fe33333 	.word	0x3fe33333
 8000e40:	200003dc 	.word	0x200003dc
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000014 	.word	0x20000014
 8000e58:	200003c0 	.word	0x200003c0
 8000e5c:	200003c4 	.word	0x200003c4
 8000e60:	200003c8 	.word	0x200003c8
 8000e64:	200003cc 	.word	0x200003cc
 8000e68:	200003d0 	.word	0x200003d0
 8000e6c:	200003d4 	.word	0x200003d4
 8000e70:	200003d8 	.word	0x200003d8
 8000e74:	200087a0 	.word	0x200087a0

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f002 fbc4 	bl	800360a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f85f 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f001 f897 	bl	8001fb8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000e8a:	f000 f917 	bl	80010bc <MX_ADC3_Init>
  MX_CRC_Init();
 8000e8e:	f000 f9cf 	bl	8001230 <MX_CRC_Init>
  MX_DCMI_Init();
 8000e92:	f000 f9ef 	bl	8001274 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000e96:	f000 fa21 	bl	80012dc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e9a:	f000 ffe1 	bl	8001e60 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e9e:	f000 fa4f 	bl	8001340 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ea2:	f000 facf 	bl	8001444 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000ea6:	f000 faf9 	bl	800149c <MX_RTC_Init>
  MX_SAI2_Init();
 8000eaa:	f000 fb9f 	bl	80015ec <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000eae:	f000 fc45 	bl	800173c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000eb2:	f000 fc63 	bl	800177c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000eb6:	f000 fc91 	bl	80017dc <MX_SPI2_Init>
  MX_TIM1_Init();
 8000eba:	f000 fccd 	bl	8001858 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ebe:	f000 fd77 	bl	80019b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ec2:	f000 fdeb 	bl	8001a9c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ec6:	f000 fe5f 	bl	8001b88 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000eca:	f000 fed3 	bl	8001c74 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000ece:	f000 ff23 	bl	8001d18 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 ff65 	bl	8001da0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ed6:	f000 ff93 	bl	8001e00 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000eda:	f00b f9db 	bl	800c294 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000ede:	f000 f93f 	bl	8001160 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000ee2:	f00e fe53 	bl	800fb8c <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <main+0xbc>)
 8000ee8:	f107 041c 	add.w	r4, r7, #28
 8000eec:	461d      	mov	r5, r3
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b fcbf 	bl	800c884 <osThreadCreate>
 8000f06:	4602      	mov	r2, r0
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <main+0xc0>)
 8000f0a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <main+0xc4>)
 8000f0e:	463c      	mov	r4, r7
 8000f10:	461d      	mov	r5, r3
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00b fcae 	bl	800c884 <osThreadCreate>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <main+0xc8>)
 8000f2c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f2e:	f00b fc86 	bl	800c83e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <main+0xba>
 8000f34:	08028f90 	.word	0x08028f90
 8000f38:	2000c230 	.word	0x2000c230
 8000f3c:	08028fb4 	.word	0x08028fb4
 8000f40:	2000c22c 	.word	0x2000c22c

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b4      	sub	sp, #208	; 0xd0
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f4e:	2230      	movs	r2, #48	; 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f027 f879 	bl	802804a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2284      	movs	r2, #132	; 0x84
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f027 f86a 	bl	802804a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000f76:	f005 fc41 	bl	80067fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <SystemClock_Config+0x16c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <SystemClock_Config+0x170>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <SystemClock_Config+0x170>)
 8000f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <SystemClock_Config+0x170>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000faa:	2309      	movs	r3, #9
 8000fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fcc:	2319      	movs	r3, #25
 8000fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 fd28 	bl	8006a40 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ff6:	f001 fa13 	bl	8002420 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ffa:	f005 fc0f 	bl	800681c <HAL_PWREx_EnableOverDrive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f001 fa0c 	bl	8002420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800102a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800102e:	2106      	movs	r1, #6
 8001030:	4618      	mov	r0, r3
 8001032:	f005 ffa9 	bl	8006f88 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800103c:	f001 f9f0 	bl	8002420 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <SystemClock_Config+0x174>)
 8001042:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001054:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001058:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001082:	2300      	movs	r3, #0
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800108a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f006 f979 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x164>
  {
    Error_Handler();
 80010a4:	f001 f9bc 	bl	8002420 <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	37d0      	adds	r7, #208	; 0xd0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000
 80010b8:	01b00868 	.word	0x01b00868

080010bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_ADC3_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_ADC3_Init+0x98>)
 80010d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_ADC3_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_ADC3_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_ADC3_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_ADC3_Init+0x98>)
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_ADC3_Init+0xa0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_ADC3_Init+0x98>)
 800110a:	2201      	movs	r2, #1
 800110c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_ADC3_Init+0x98>)
 8001118:	2201      	movs	r2, #1
 800111a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x98>)
 800111e:	f002 fac3 	bl	80036a8 <HAL_ADC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001128:	f001 f97a 	bl	8002420 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800112c:	2304      	movs	r3, #4
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_ADC3_Init+0x98>)
 800113e:	f002 faf7 	bl	8003730 <HAL_ADC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001148:	f001 f96a 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000c578 	.word	0x2000c578
 8001158:	40012200 	.word	0x40012200
 800115c:	0f000001 	.word	0x0f000001

08001160 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001168:	4a30      	ldr	r2, [pc, #192]	; (800122c <MX_CAN1_Init+0xcc>)
 800116a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_CAN1_Init+0xc8>)
 800116e:	2214      	movs	r2, #20
 8001170:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_CAN1_Init+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001180:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001184:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_CAN1_Init+0xc8>)
 800118e:	2200      	movs	r2, #0
 8001190:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_CAN1_Init+0xc8>)
 800119a:	2200      	movs	r2, #0
 800119c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011b0:	481d      	ldr	r0, [pc, #116]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011b2:	f002 fd01 	bl	8003bb8 <HAL_CAN_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80011bc:	f001 f930 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011e4:	230e      	movs	r3, #14
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011ee:	f002 fddf 	bl	8003db0 <HAL_CAN_ConfigFilter>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 80011f8:	f001 f912 	bl	8002420 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <MX_CAN1_Init+0xc8>)
 80011fe:	f002 feb7 	bl	8003f70 <HAL_CAN_Start>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001208:	f001 f90a 	bl	8002420 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800120c:	2102      	movs	r1, #2
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_CAN1_Init+0xc8>)
 8001210:	f002 fef2 	bl	8003ff8 <HAL_CAN_ActivateNotification>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800121a:	f001 f901 	bl	8002420 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000c7f0 	.word	0x2000c7f0
 800122c:	40006400 	.word	0x40006400

08001230 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_CRC_Init+0x3c>)
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <MX_CRC_Init+0x40>)
 8001238:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_CRC_Init+0x3c>)
 800123c:	2200      	movs	r2, #0
 800123e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_CRC_Init+0x3c>)
 8001242:	2200      	movs	r2, #0
 8001244:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_CRC_Init+0x3c>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_CRC_Init+0x3c>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_CRC_Init+0x3c>)
 8001254:	2201      	movs	r2, #1
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_CRC_Init+0x3c>)
 800125a:	f003 fa39 	bl	80046d0 <HAL_CRC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001264:	f001 f8dc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000c3a8 	.word	0x2000c3a8
 8001270:	40023000 	.word	0x40023000

08001274 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_DCMI_Init+0x60>)
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <MX_DCMI_Init+0x64>)
 800127c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_DCMI_Init+0x60>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_DCMI_Init+0x60>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_DCMI_Init+0x60>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_DCMI_Init+0x60>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_DCMI_Init+0x60>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_DCMI_Init+0x60>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_DCMI_Init+0x60>)
 80012c2:	f003 faef 	bl	80048a4 <HAL_DCMI_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f001 f8a8 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000c5c0 	.word	0x2000c5c0
 80012d8:	50050000 	.word	0x50050000

080012dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_DMA2D_Init+0x5c>)
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <MX_DMA2D_Init+0x60>)
 80012e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_DMA2D_Init+0x5c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_DMA2D_Init+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_DMA2D_Init+0x5c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_DMA2D_Init+0x5c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_DMA2D_Init+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_DMA2D_Init+0x5c>)
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_DMA2D_Init+0x5c>)
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <MX_DMA2D_Init+0x5c>)
 8001312:	f003 fbdb 	bl	8004acc <HAL_DMA2D_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800131c:	f001 f880 	bl	8002420 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001320:	2101      	movs	r1, #1
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_DMA2D_Init+0x5c>)
 8001324:	f003 fe9c 	bl	8005060 <HAL_DMA2D_ConfigLayer>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800132e:	f001 f877 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000c770 	.word	0x2000c770
 800133c:	4002b000 	.word	0x4002b000

08001340 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2234      	movs	r2, #52	; 0x34
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f026 fe7c 	bl	802804a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <MX_LTDC_Init+0xfc>)
 8001354:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <MX_LTDC_Init+0x100>)
 8001356:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001358:	4b38      	ldr	r3, [pc, #224]	; (800143c <MX_LTDC_Init+0xfc>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <MX_LTDC_Init+0xfc>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <MX_LTDC_Init+0xfc>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <MX_LTDC_Init+0xfc>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <MX_LTDC_Init+0xfc>)
 8001372:	2228      	movs	r2, #40	; 0x28
 8001374:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <MX_LTDC_Init+0xfc>)
 8001378:	2209      	movs	r2, #9
 800137a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <MX_LTDC_Init+0xfc>)
 800137e:	2235      	movs	r2, #53	; 0x35
 8001380:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001382:	4b2e      	ldr	r3, [pc, #184]	; (800143c <MX_LTDC_Init+0xfc>)
 8001384:	220b      	movs	r2, #11
 8001386:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <MX_LTDC_Init+0xfc>)
 800138a:	f240 2215 	movw	r2, #533	; 0x215
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <MX_LTDC_Init+0xfc>)
 8001392:	f240 121b 	movw	r2, #283	; 0x11b
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_LTDC_Init+0xfc>)
 800139a:	f240 2235 	movw	r2, #565	; 0x235
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_LTDC_Init+0xfc>)
 80013a2:	f240 121d 	movw	r2, #285	; 0x11d
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_LTDC_Init+0xfc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_LTDC_Init+0xfc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_LTDC_Init+0xfc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <MX_LTDC_Init+0xfc>)
 80013c2:	f004 fe83 	bl	80060cc <HAL_LTDC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013cc:	f001 f828 	bl	8002420 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013e2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013e8:	23ff      	movs	r3, #255	; 0xff
 80013ea:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013f6:	2305      	movs	r3, #5
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001400:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001406:	f44f 7388 	mov.w	r3, #272	; 0x110
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_LTDC_Init+0xfc>)
 8001426:	f004 ffd9 	bl	80063dc <HAL_LTDC_ConfigLayer>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001430:	f000 fff6 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000c4d0 	.word	0x2000c4d0
 8001440:	40016800 	.word	0x40016800

08001444 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_QUADSPI_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MX_QUADSPI_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001456:	2201      	movs	r2, #1
 8001458:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_QUADSPI_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001462:	2201      	movs	r2, #1
 8001464:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_QUADSPI_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_QUADSPI_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_QUADSPI_Init+0x50>)
 8001480:	f005 fa1c 	bl	80068bc <HAL_QSPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800148a:	f000 ffc9 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000c88c 	.word	0x2000c88c
 8001498:	a0001000 	.word	0xa0001000

0800149c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	; 0x48
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	222c      	movs	r2, #44	; 0x2c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f026 fdc3 	bl	802804a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <MX_RTC_Init+0x148>)
 80014c6:	4a48      	ldr	r2, [pc, #288]	; (80015e8 <MX_RTC_Init+0x14c>)
 80014c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014ca:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <MX_RTC_Init+0x148>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <MX_RTC_Init+0x148>)
 80014d2:	227f      	movs	r2, #127	; 0x7f
 80014d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <MX_RTC_Init+0x148>)
 80014d8:	22ff      	movs	r2, #255	; 0xff
 80014da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <MX_RTC_Init+0x148>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <MX_RTC_Init+0x148>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <MX_RTC_Init+0x148>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ee:	483d      	ldr	r0, [pc, #244]	; (80015e4 <MX_RTC_Init+0x148>)
 80014f0:	f006 fc70 	bl	8007dd4 <HAL_RTC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80014fa:	f000 ff91 	bl	8002420 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	4830      	ldr	r0, [pc, #192]	; (80015e4 <MX_RTC_Init+0x148>)
 8001522:	f006 fcd3 	bl	8007ecc <HAL_RTC_SetTime>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800152c:	f000 ff78 	bl	8002420 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001530:	2301      	movs	r3, #1
 8001532:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	4824      	ldr	r0, [pc, #144]	; (80015e4 <MX_RTC_Init+0x148>)
 8001552:	f006 fd79 	bl	8008048 <HAL_RTC_SetDate>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800155c:	f000 ff60 	bl	8002420 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001560:	2300      	movs	r3, #0
 8001562:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001564:	2300      	movs	r3, #0
 8001566:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001568:	2300      	movs	r3, #0
 800156a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001584:	2301      	movs	r3, #1
 8001586:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	2201      	movs	r2, #1
 8001594:	4619      	mov	r1, r3
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_RTC_Init+0x148>)
 8001598:	f006 fdfe 	bl	8008198 <HAL_RTC_SetAlarm>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80015a2:	f000 ff3d 	bl	8002420 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80015ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <MX_RTC_Init+0x148>)
 80015ba:	f006 fded 	bl	8008198 <HAL_RTC_SetAlarm>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80015c4:	f000 ff2c 	bl	8002420 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80015c8:	2202      	movs	r2, #2
 80015ca:	2100      	movs	r1, #0
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_RTC_Init+0x148>)
 80015ce:	f006 ff6d 	bl	80084ac <HAL_RTCEx_SetTimeStamp>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80015d8:	f000 ff22 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3748      	adds	r7, #72	; 0x48
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000c690 	.word	0x2000c690
 80015e8:	40002800 	.word	0x40002800

080015ec <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <MX_SAI2_Init+0x13c>)
 80015f2:	4a4e      	ldr	r2, [pc, #312]	; (800172c <MX_SAI2_Init+0x140>)
 80015f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <MX_SAI2_Init+0x13c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <MX_SAI2_Init+0x13c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001602:	4b49      	ldr	r3, [pc, #292]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <MX_SAI2_Init+0x13c>)
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <MX_SAI2_Init+0x13c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001620:	4b41      	ldr	r3, [pc, #260]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001626:	4b40      	ldr	r3, [pc, #256]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800162c:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <MX_SAI2_Init+0x13c>)
 800162e:	4a40      	ldr	r2, [pc, #256]	; (8001730 <MX_SAI2_Init+0x144>)
 8001630:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001638:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <MX_SAI2_Init+0x13c>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <MX_SAI2_Init+0x13c>)
 800164c:	2208      	movs	r2, #8
 800164e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001650:	4b35      	ldr	r3, [pc, #212]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001652:	2201      	movs	r2, #1
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001658:	2200      	movs	r2, #0
 800165a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <MX_SAI2_Init+0x13c>)
 800165e:	2200      	movs	r2, #0
 8001660:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001664:	2200      	movs	r2, #0
 8001666:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MX_SAI2_Init+0x13c>)
 800166a:	2200      	movs	r2, #0
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001676:	2201      	movs	r2, #1
 8001678:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_SAI2_Init+0x13c>)
 800167c:	2200      	movs	r2, #0
 800167e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_SAI2_Init+0x13c>)
 8001682:	f006 ff69 	bl	8008558 <HAL_SAI_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800168c:	f000 fec8 	bl	8002420 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <MX_SAI2_Init+0x148>)
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <MX_SAI2_Init+0x14c>)
 8001694:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_SAI2_Init+0x148>)
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <MX_SAI2_Init+0x148>)
 800169e:	2203      	movs	r2, #3
 80016a0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_SAI2_Init+0x148>)
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_SAI2_Init+0x148>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_SAI2_Init+0x148>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_SAI2_Init+0x148>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_SAI2_Init+0x148>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_SAI2_Init+0x148>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_SAI2_Init+0x148>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_SAI2_Init+0x148>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_SAI2_Init+0x148>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_SAI2_Init+0x148>)
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_SAI2_Init+0x148>)
 80016e0:	2208      	movs	r2, #8
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_SAI2_Init+0x148>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_SAI2_Init+0x148>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_SAI2_Init+0x148>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_SAI2_Init+0x148>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_SAI2_Init+0x148>)
 80016fe:	2200      	movs	r2, #0
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_SAI2_Init+0x148>)
 8001704:	2200      	movs	r2, #0
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_SAI2_Init+0x148>)
 800170a:	2201      	movs	r2, #1
 800170c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_SAI2_Init+0x148>)
 8001710:	2200      	movs	r2, #0
 8001712:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001714:	4807      	ldr	r0, [pc, #28]	; (8001734 <MX_SAI2_Init+0x148>)
 8001716:	f006 ff1f 	bl	8008558 <HAL_SAI_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001720:	f000 fe7e 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	2000c324 	.word	0x2000c324
 800172c:	40015c04 	.word	0x40015c04
 8001730:	0002ee00 	.word	0x0002ee00
 8001734:	2000c1a8 	.word	0x2000c1a8
 8001738:	40015c24 	.word	0x40015c24

0800173c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 8001742:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <MX_SDMMC1_SD_Init+0x3c>)
 8001744:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <MX_SDMMC1_SD_Init+0x38>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	2000c3cc 	.word	0x2000c3cc
 8001778:	40012c00 	.word	0x40012c00

0800177c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 8001782:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001786:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_SPDIFRX_Init+0x5c>)
 80017c6:	f008 f95b 	bl	8009a80 <HAL_SPDIFRX_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80017d0:	f000 fe26 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000c2d8 	.word	0x2000c2d8

080017dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_SPI2_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_SPI2_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_SPI2_Init+0x74>)
 80017e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_SPI2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <MX_SPI2_Init+0x74>)
 80017f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_SPI2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_SPI2_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_SPI2_Init+0x74>)
 800180a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_SPI2_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_SPI2_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_SPI2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_SPI2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_SPI2_Init+0x74>)
 800182a:	2207      	movs	r2, #7
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_SPI2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_SPI2_Init+0x74>)
 8001836:	2208      	movs	r2, #8
 8001838:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_SPI2_Init+0x74>)
 800183c:	f008 f97c 	bl	8009b38 <HAL_SPI_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 fdeb 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000c234 	.word	0x2000c234
 8001854:	40003800 	.word	0x40003800

08001858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09a      	sub	sp, #104	; 0x68
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	222c      	movs	r2, #44	; 0x2c
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f026 fbd9 	bl	802804a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <MX_TIM1_Init+0x150>)
 800189a:	4a44      	ldr	r2, [pc, #272]	; (80019ac <MX_TIM1_Init+0x154>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b6:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c2:	4839      	ldr	r0, [pc, #228]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018c4:	f008 f9ca 	bl	8009c5c <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018ce:	f000 fda7 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018dc:	4619      	mov	r1, r3
 80018de:	4832      	ldr	r0, [pc, #200]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018e0:	f008 fc74 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018ea:	f000 fd99 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <MX_TIM1_Init+0x150>)
 80018f0:	f008 fa0a 	bl	8009d08 <HAL_TIM_PWM_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018fa:	f000 fd91 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190e:	4619      	mov	r1, r3
 8001910:	4825      	ldr	r0, [pc, #148]	; (80019a8 <MX_TIM1_Init+0x150>)
 8001912:	f009 f8d5 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800191c:	f000 fd80 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	; 0x60
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800192c:	2300      	movs	r3, #0
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <MX_TIM1_Init+0x150>)
 8001946:	f008 fb29 	bl	8009f9c <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001950:	f000 fd66 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM1_Init+0x150>)
 800198a:	f009 f927 	bl	800abdc <HAL_TIMEx_ConfigBreakDeadTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001994:	f000 fd44 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM1_Init+0x150>)
 800199a:	f001 fa3b 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3768      	adds	r7, #104	; 0x68
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000c6b0 	.word	0x2000c6b0
 80019ac:	40010000 	.word	0x40010000

080019b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08e      	sub	sp, #56	; 0x38
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e2:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a08:	4823      	ldr	r0, [pc, #140]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a0a:	f008 f927 	bl	8009c5c <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a14:	f000 fd04 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a22:	4619      	mov	r1, r3
 8001a24:	481c      	ldr	r0, [pc, #112]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a26:	f008 fbd1 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a30:	f000 fcf6 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a34:	4818      	ldr	r0, [pc, #96]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a36:	f008 f967 	bl	8009d08 <HAL_TIM_PWM_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a40:	f000 fcee 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a54:	f009 f834 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a5e:	f000 fcdf 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a62:	2360      	movs	r3, #96	; 0x60
 8001a64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a7a:	f008 fa8f 	bl	8009f9c <HAL_TIM_PWM_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a84:	f000 fccc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <MX_TIM2_Init+0xe8>)
 8001a8a:	f001 f9c3 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 8001a8e:	bf00      	nop
 8001a90:	3738      	adds	r7, #56	; 0x38
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000c7b0 	.word	0x2000c7b0

08001a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	463b      	mov	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <MX_TIM3_Init+0xe8>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001af2:	4823      	ldr	r0, [pc, #140]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001af4:	f008 f8b2 	bl	8009c5c <HAL_TIM_Base_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001afe:	f000 fc8f 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481c      	ldr	r0, [pc, #112]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001b10:	f008 fb5c 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b1a:	f000 fc81 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b1e:	4818      	ldr	r0, [pc, #96]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001b20:	f008 f8f2 	bl	8009d08 <HAL_TIM_PWM_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b2a:	f000 fc79 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4810      	ldr	r0, [pc, #64]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001b3e:	f008 ffbf 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b48:	f000 fc6a 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4c:	2360      	movs	r3, #96	; 0x60
 8001b4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001b64:	f008 fa1a 	bl	8009f9c <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b6e:	f000 fc57 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM3_Init+0xe4>)
 8001b74:	f001 f94e 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 8001b78:	bf00      	nop
 8001b7a:	3738      	adds	r7, #56	; 0x38
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000c490 	.word	0x2000c490
 8001b84:	40000400 	.word	0x40000400

08001b88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
 8001bb6:	615a      	str	r2, [r3, #20]
 8001bb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bbc:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <MX_TIM5_Init+0xe8>)
 8001bbe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bde:	4823      	ldr	r0, [pc, #140]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001be0:	f008 f83c 	bl	8009c5c <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001bea:	f000 fc19 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	481c      	ldr	r0, [pc, #112]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001bfc:	f008 fae6 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001c06:	f000 fc0b 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001c0c:	f008 f87c 	bl	8009d08 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001c16:	f000 fc03 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4810      	ldr	r0, [pc, #64]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001c2a:	f008 ff49 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001c34:	f000 fbf4 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001c50:	f008 f9a4 	bl	8009f9c <HAL_TIM_PWM_ConfigChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001c5a:	f000 fbe1 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <MX_TIM5_Init+0xe4>)
 8001c60:	f001 f8d8 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 8001c64:	bf00      	nop
 8001c66:	3738      	adds	r7, #56	; 0x38
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000c450 	.word	0x2000c450
 8001c70:	40000c00 	.word	0x40000c00

08001c74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <MX_TIM8_Init+0xa0>)
 8001c96:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cbe:	f007 ffcd 	bl	8009c5c <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001cc8:	f000 fbaa 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cda:	f008 fa77 	bl	800a1cc <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ce4:	f000 fb9c 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM8_Init+0x9c>)
 8001cfa:	f008 fee1 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001d04:	f000 fb8c 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000c298 	.word	0x2000c298
 8001d14:	40010400 	.word	0x40010400

08001d18 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
 8001d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d32:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <MX_TIM12_Init+0x84>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d56:	f007 ffd7 	bl	8009d08 <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001d60:	f000 fb5e 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d7c:	f008 f90e 	bl	8009f9c <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001d86:	f000 fb4b 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <MX_TIM12_Init+0x80>)
 8001d8c:	f001 f842 	bl	8002e14 <HAL_TIM_MspPostInit>

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000c818 	.word	0x2000c818
 8001d9c:	40001800 	.word	0x40001800

08001da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <MX_USART1_UART_Init+0x5c>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART1_UART_Init+0x58>)
 8001de4:	f008 ff96 	bl	800ad14 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dee:	f000 fb17 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000c610 	.word	0x2000c610
 8001dfc:	40011000 	.word	0x40011000

08001e00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <MX_USART6_UART_Init+0x5c>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USART6_UART_Init+0x58>)
 8001e44:	f008 ff66 	bl	800ad14 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001e4e:	f000 fae7 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000c6f0 	.word	0x2000c6f0
 8001e5c:	40011400 	.word	0x40011400

08001e60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
 8001e76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e78:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <MX_FMC_Init+0x150>)
 8001e7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e8a:	4b48      	ldr	r3, [pc, #288]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e92:	2210      	movs	r2, #16
 8001e94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e96:	4b45      	ldr	r3, [pc, #276]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <MX_FMC_Init+0x14c>)
 8001e9e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001ea2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ea4:	4b41      	ldr	r3, [pc, #260]	; (8001fac <MX_FMC_Init+0x14c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <MX_FMC_Init+0x14c>)
 8001eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <MX_FMC_Init+0x14c>)
 8001eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <MX_FMC_Init+0x14c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4832      	ldr	r0, [pc, #200]	; (8001fac <MX_FMC_Init+0x14c>)
 8001ee2:	f007 fd4d 	bl	8009980 <HAL_SDRAM_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001eec:	f000 fa98 	bl	8002420 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001f00:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f10:	4928      	ldr	r1, [pc, #160]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f12:	4826      	ldr	r0, [pc, #152]	; (8001fac <MX_FMC_Init+0x14c>)
 8001f14:	f007 fd68 	bl	80099e8 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f001 fba3 	bl	8003664 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f20:	2202      	movs	r2, #2
 8001f22:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f26:	2210      	movs	r2, #16
 8001f28:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3a:	491e      	ldr	r1, [pc, #120]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f3c:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_FMC_Init+0x14c>)
 8001f3e:	f007 fd53 	bl	80099e8 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f44:	2203      	movs	r2, #3
 8001f46:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f50:	2208      	movs	r2, #8
 8001f52:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5e:	4915      	ldr	r1, [pc, #84]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f60:	4812      	ldr	r0, [pc, #72]	; (8001fac <MX_FMC_Init+0x14c>)
 8001f62:	f007 fd41 	bl	80099e8 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001f66:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001f6a:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f6e:	2204      	movs	r2, #4
 8001f70:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f74:	2210      	movs	r2, #16
 8001f76:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f82:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f88:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <MX_FMC_Init+0x154>)
 8001f8a:	4808      	ldr	r0, [pc, #32]	; (8001fac <MX_FMC_Init+0x14c>)
 8001f8c:	f007 fd2c 	bl	80099e8 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001f90:	f240 712b 	movw	r1, #1835	; 0x72b
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_FMC_Init+0x14c>)
 8001f96:	f007 fd52 	bl	8009a3e <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001f9a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001f9e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fa2:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000c858 	.word	0x2000c858
 8001fb0:	a0000140 	.word	0xa0000140
 8001fb4:	200003b0 	.word	0x200003b0

08001fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b090      	sub	sp, #64	; 0x40
 8001fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fce:	4baf      	ldr	r3, [pc, #700]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4aae      	ldr	r2, [pc, #696]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4bac      	ldr	r3, [pc, #688]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fe6:	4ba9      	ldr	r3, [pc, #676]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4aa8      	ldr	r2, [pc, #672]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4ba6      	ldr	r3, [pc, #664]	; (800228c <MX_GPIO_Init+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4ba3      	ldr	r3, [pc, #652]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4aa2      	ldr	r2, [pc, #648]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4ba0      	ldr	r3, [pc, #640]	; (800228c <MX_GPIO_Init+0x2d4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	4b9d      	ldr	r3, [pc, #628]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a9c      	ldr	r2, [pc, #624]	; (800228c <MX_GPIO_Init+0x2d4>)
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b9a      	ldr	r3, [pc, #616]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	4b97      	ldr	r3, [pc, #604]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a96      	ldr	r2, [pc, #600]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b94      	ldr	r3, [pc, #592]	; (800228c <MX_GPIO_Init+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <MX_GPIO_Init+0x2d4>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b8e      	ldr	r3, [pc, #568]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800205e:	4b8b      	ldr	r3, [pc, #556]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a8a      	ldr	r2, [pc, #552]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <MX_GPIO_Init+0x2d4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a84      	ldr	r2, [pc, #528]	; (800228c <MX_GPIO_Init+0x2d4>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b82      	ldr	r3, [pc, #520]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800208e:	4b7f      	ldr	r3, [pc, #508]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a7e      	ldr	r2, [pc, #504]	; (800228c <MX_GPIO_Init+0x2d4>)
 8002094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <MX_GPIO_Init+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a6:	4b79      	ldr	r3, [pc, #484]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a78      	ldr	r2, [pc, #480]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	4b73      	ldr	r3, [pc, #460]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a72      	ldr	r2, [pc, #456]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <MX_GPIO_Init+0x2d4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	2120      	movs	r1, #32
 80020da:	486d      	ldr	r0, [pc, #436]	; (8002290 <MX_GPIO_Init+0x2d8>)
 80020dc:	f003 fab0 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	210c      	movs	r1, #12
 80020e4:	486b      	ldr	r0, [pc, #428]	; (8002294 <MX_GPIO_Init+0x2dc>)
 80020e6:	f003 faab 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2108      	movs	r1, #8
 80020ee:	486a      	ldr	r0, [pc, #424]	; (8002298 <MX_GPIO_Init+0x2e0>)
 80020f0:	f003 faa6 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020fa:	4866      	ldr	r0, [pc, #408]	; (8002294 <MX_GPIO_Init+0x2dc>)
 80020fc:	f003 faa0 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002106:	4865      	ldr	r0, [pc, #404]	; (800229c <MX_GPIO_Init+0x2e4>)
 8002108:	f003 fa9a 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	21c8      	movs	r1, #200	; 0xc8
 8002110:	4863      	ldr	r0, [pc, #396]	; (80022a0 <MX_GPIO_Init+0x2e8>)
 8002112:	f003 fa95 	bl	8005640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002116:	2308      	movs	r3, #8
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002126:	4619      	mov	r1, r3
 8002128:	485e      	ldr	r0, [pc, #376]	; (80022a4 <MX_GPIO_Init+0x2ec>)
 800212a:	f003 f8c7 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800212e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002140:	230b      	movs	r3, #11
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002148:	4619      	mov	r1, r3
 800214a:	4855      	ldr	r0, [pc, #340]	; (80022a0 <MX_GPIO_Init+0x2e8>)
 800214c:	f003 f8b6 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002150:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002162:	230a      	movs	r3, #10
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216a:	4619      	mov	r1, r3
 800216c:	484e      	ldr	r0, [pc, #312]	; (80022a8 <MX_GPIO_Init+0x2f0>)
 800216e:	f003 f8a5 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002184:	4619      	mov	r1, r3
 8002186:	4849      	ldr	r0, [pc, #292]	; (80022ac <MX_GPIO_Init+0x2f4>)
 8002188:	f003 f898 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800218c:	2340      	movs	r3, #64	; 0x40
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002190:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <MX_GPIO_Init+0x2f8>)
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	483c      	ldr	r0, [pc, #240]	; (8002290 <MX_GPIO_Init+0x2d8>)
 80021a0:	f003 f88c 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80021a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b6:	230a      	movs	r3, #10
 80021b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021be:	4619      	mov	r1, r3
 80021c0:	483c      	ldr	r0, [pc, #240]	; (80022b4 <MX_GPIO_Init+0x2fc>)
 80021c2:	f003 f87b 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021c6:	2320      	movs	r3, #32
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	482c      	ldr	r0, [pc, #176]	; (8002290 <MX_GPIO_Init+0x2d8>)
 80021de:	f003 f86d 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80021e2:	f241 030c 	movw	r3, #4108	; 0x100c
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f8:	4619      	mov	r1, r3
 80021fa:	4826      	ldr	r0, [pc, #152]	; (8002294 <MX_GPIO_Init+0x2dc>)
 80021fc:	f003 f85e 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	4828      	ldr	r0, [pc, #160]	; (80022b8 <MX_GPIO_Init+0x300>)
 8002216:	f003 f851 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800221a:	2308      	movs	r3, #8
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222e:	4619      	mov	r1, r3
 8002230:	4819      	ldr	r0, [pc, #100]	; (8002298 <MX_GPIO_Init+0x2e0>)
 8002232:	f003 f843 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002236:	2310      	movs	r3, #16
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002246:	4619      	mov	r1, r3
 8002248:	4811      	ldr	r0, [pc, #68]	; (8002290 <MX_GPIO_Init+0x2d8>)
 800224a:	f003 f837 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800224e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800225c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002260:	4619      	mov	r1, r3
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_GPIO_Init+0x2e4>)
 8002264:	f003 f82a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227e:	4619      	mov	r1, r3
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <MX_GPIO_Init+0x2e4>)
 8002282:	f003 f81b 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228a:	e017      	b.n	80022bc <MX_GPIO_Init+0x304>
 800228c:	40023800 	.word	0x40023800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40022000 	.word	0x40022000
 8002298:	40022800 	.word	0x40022800
 800229c:	40021c00 	.word	0x40021c00
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40022400 	.word	0x40022400
 80022b0:	10120000 	.word	0x10120000
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020800 	.word	0x40020800
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <MX_GPIO_Init+0x418>)
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	4841      	ldr	r0, [pc, #260]	; (80023d4 <MX_GPIO_Init+0x41c>)
 80022ce:	f002 fff5 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80022d2:	2310      	movs	r3, #16
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022e2:	230a      	movs	r3, #10
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ea:	4619      	mov	r1, r3
 80022ec:	483a      	ldr	r0, [pc, #232]	; (80023d8 <MX_GPIO_Init+0x420>)
 80022ee:	f002 ffe5 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80022f2:	23c8      	movs	r3, #200	; 0xc8
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002306:	4619      	mov	r1, r3
 8002308:	4834      	ldr	r0, [pc, #208]	; (80023dc <MX_GPIO_Init+0x424>)
 800230a:	f002 ffd7 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800230e:	2305      	movs	r3, #5
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800231e:	230a      	movs	r3, #10
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002326:	4619      	mov	r1, r3
 8002328:	482d      	ldr	r0, [pc, #180]	; (80023e0 <MX_GPIO_Init+0x428>)
 800232a:	f002 ffc7 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800232e:	2332      	movs	r3, #50	; 0x32
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800233e:	230b      	movs	r3, #11
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002346:	4619      	mov	r1, r3
 8002348:	4825      	ldr	r0, [pc, #148]	; (80023e0 <MX_GPIO_Init+0x428>)
 800234a:	f002 ffb7 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800234e:	2304      	movs	r3, #4
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235e:	4619      	mov	r1, r3
 8002360:	481e      	ldr	r0, [pc, #120]	; (80023dc <MX_GPIO_Init+0x424>)
 8002362:	f002 ffab 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002366:	2386      	movs	r3, #134	; 0x86
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002376:	230b      	movs	r3, #11
 8002378:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237e:	4619      	mov	r1, r3
 8002380:	4818      	ldr	r0, [pc, #96]	; (80023e4 <MX_GPIO_Init+0x42c>)
 8002382:	f002 ff9b 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002386:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800238c:	2312      	movs	r3, #18
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002390:	2301      	movs	r3, #1
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002398:	2304      	movs	r3, #4
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	480d      	ldr	r0, [pc, #52]	; (80023d8 <MX_GPIO_Init+0x420>)
 80023a4:	f002 ff8a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023a8:	2328      	movs	r3, #40	; 0x28
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023b8:	230a      	movs	r3, #10
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <MX_GPIO_Init+0x42c>)
 80023c4:	f002 ff7a 	bl	80052bc <HAL_GPIO_Init>

}
 80023c8:	bf00      	nop
 80023ca:	3740      	adds	r7, #64	; 0x40
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	10120000 	.word	0x10120000
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021c00 	.word	0x40021c00
 80023dc:	40021800 	.word	0x40021800
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020000 	.word	0x40020000

080023e8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 80023f0:	f00d fbd2 	bl	800fb98 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f00a fa91 	bl	800c91c <osDelay>
 80023fa:	e7fb      	b.n	80023f4 <StartDefaultTask+0xc>

080023fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800240e:	f001 f909 	bl	8003624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_MspInit+0x4c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_MspInit+0x4c>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_MspInit+0x4c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_MspInit+0x4c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	210f      	movs	r1, #15
 800246a:	f06f 0001 	mvn.w	r0, #1
 800246e:	f002 f8f7 	bl	8004660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_ADC_MspInit+0xa4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d13c      	bne.n	800251c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_ADC_MspInit+0xa8>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80024ea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80024ee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f0:	2303      	movs	r3, #3
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	480b      	ldr	r0, [pc, #44]	; (800252c <HAL_ADC_MspInit+0xac>)
 8002500:	f002 fedc 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002508:	2303      	movs	r3, #3
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <HAL_ADC_MspInit+0xb0>)
 8002518:	f002 fed0 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012200 	.word	0x40012200
 8002528:	40023800 	.word	0x40023800
 800252c:	40021400 	.word	0x40021400
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_CAN_MspInit+0x8c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d130      	bne.n	80025b8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_CAN_MspInit+0x90>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002598:	2309      	movs	r3, #9
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_CAN_MspInit+0x94>)
 80025a4:	f002 fe8a 	bl	80052bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2105      	movs	r1, #5
 80025ac:	2014      	movs	r0, #20
 80025ae:	f002 f857 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80025b2:	2014      	movs	r0, #20
 80025b4:	f002 f870 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40006400 	.word	0x40006400
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020400 	.word	0x40020400

080025cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_CRC_MspInit+0x38>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10b      	bne.n	80025f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_CRC_MspInit+0x3c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_CRC_MspInit+0x3c>)
 80025e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_CRC_MspInit+0x3c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023000 	.word	0x40023000
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	; 0x38
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <HAL_DCMI_MspInit+0x160>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f040 809a 	bne.w	8002764 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	4a4e      	ldr	r2, [pc, #312]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6353      	str	r3, [r2, #52]	; 0x34
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002648:	4b49      	ldr	r3, [pc, #292]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800264e:	f043 0310 	orr.w	r3, r3, #16
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a42      	ldr	r2, [pc, #264]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002678:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800267e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a36      	ldr	r2, [pc, #216]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 8002696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6313      	str	r3, [r2, #48]	; 0x30
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_DCMI_MspInit+0x164>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80026c0:	2360      	movs	r3, #96	; 0x60
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026d0:	230d      	movs	r3, #13
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	4619      	mov	r1, r3
 80026da:	4826      	ldr	r0, [pc, #152]	; (8002774 <HAL_DCMI_MspInit+0x168>)
 80026dc:	f002 fdee 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80026e0:	2308      	movs	r3, #8
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80026f0:	230d      	movs	r3, #13
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	481f      	ldr	r0, [pc, #124]	; (8002778 <HAL_DCMI_MspInit+0x16c>)
 80026fc:	f002 fdde 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002712:	230d      	movs	r3, #13
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271a:	4619      	mov	r1, r3
 800271c:	4817      	ldr	r0, [pc, #92]	; (800277c <HAL_DCMI_MspInit+0x170>)
 800271e:	f002 fdcd 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002722:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002734:	230d      	movs	r3, #13
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	4810      	ldr	r0, [pc, #64]	; (8002780 <HAL_DCMI_MspInit+0x174>)
 8002740:	f002 fdbc 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002744:	2350      	movs	r3, #80	; 0x50
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002754:	230d      	movs	r3, #13
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	4809      	ldr	r0, [pc, #36]	; (8002784 <HAL_DCMI_MspInit+0x178>)
 8002760:	f002 fdac 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	3738      	adds	r7, #56	; 0x38
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	50050000 	.word	0x50050000
 8002770:	40023800 	.word	0x40023800
 8002774:	40021000 	.word	0x40021000
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021800 	.word	0x40021800
 8002780:	40021c00 	.word	0x40021c00
 8002784:	40020000 	.word	0x40020000

08002788 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_DMA2D_MspInit+0x44>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_DMA2D_MspInit+0x48>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_DMA2D_MspInit+0x48>)
 80027a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_DMA2D_MspInit+0x48>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2105      	movs	r1, #5
 80027b6:	205a      	movs	r0, #90	; 0x5a
 80027b8:	f001 ff52 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80027bc:	205a      	movs	r0, #90	; 0x5a
 80027be:	f001 ff6b 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	4002b000 	.word	0x4002b000
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_DMA2D_MspDeInit+0x2c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_DMA2D_MspDeInit+0x30>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_DMA2D_MspDeInit+0x30>)
 80027ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80027f2:	205a      	movs	r0, #90	; 0x5a
 80027f4:	f001 ff5e 	bl	80046b4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	4002b000 	.word	0x4002b000
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a55      	ldr	r2, [pc, #340]	; (800297c <HAL_LTDC_MspInit+0x174>)
 8002826:	4293      	cmp	r3, r2
 8002828:	f040 80a3 	bne.w	8002972 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002844:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	6313      	str	r3, [r2, #48]	; 0x30
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6313      	str	r3, [r2, #48]	; 0x30
 8002868:	4b45      	ldr	r3, [pc, #276]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a41      	ldr	r2, [pc, #260]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800287a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 8002892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b39      	ldr	r3, [pc, #228]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	4a35      	ldr	r2, [pc, #212]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6313      	str	r3, [r2, #48]	; 0x30
 80028b0:	4b33      	ldr	r3, [pc, #204]	; (8002980 <HAL_LTDC_MspInit+0x178>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80028bc:	2310      	movs	r3, #16
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028cc:	230e      	movs	r3, #14
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	482b      	ldr	r0, [pc, #172]	; (8002984 <HAL_LTDC_MspInit+0x17c>)
 80028d8:	f002 fcf0 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80028dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ee:	230e      	movs	r3, #14
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	4619      	mov	r1, r3
 80028f8:	4823      	ldr	r0, [pc, #140]	; (8002988 <HAL_LTDC_MspInit+0x180>)
 80028fa:	f002 fcdf 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80028fe:	23f7      	movs	r3, #247	; 0xf7
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800290e:	230e      	movs	r3, #14
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	481c      	ldr	r0, [pc, #112]	; (800298c <HAL_LTDC_MspInit+0x184>)
 800291a:	f002 fccf 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002930:	2309      	movs	r3, #9
 8002932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002938:	4619      	mov	r1, r3
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <HAL_LTDC_MspInit+0x188>)
 800293c:	f002 fcbe 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002940:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294e:	2300      	movs	r3, #0
 8002950:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002952:	230e      	movs	r3, #14
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295a:	4619      	mov	r1, r3
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <HAL_LTDC_MspInit+0x18c>)
 800295e:	f002 fcad 	bl	80052bc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2105      	movs	r1, #5
 8002966:	2058      	movs	r0, #88	; 0x58
 8002968:	f001 fe7a 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800296c:	2058      	movs	r0, #88	; 0x58
 800296e:	f001 fe93 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3738      	adds	r7, #56	; 0x38
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40016800 	.word	0x40016800
 8002980:	40023800 	.word	0x40023800
 8002984:	40021000 	.word	0x40021000
 8002988:	40022400 	.word	0x40022400
 800298c:	40022800 	.word	0x40022800
 8002990:	40021800 	.word	0x40021800
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <HAL_QSPI_MspInit+0x10c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d170      	bne.n	8002a9c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6393      	str	r3, [r2, #56]	; 0x38
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029d8:	f043 0310 	orr.w	r3, r3, #16
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_QSPI_MspInit+0x110>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a2a:	2309      	movs	r3, #9
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	4619      	mov	r1, r3
 8002a34:	481d      	ldr	r0, [pc, #116]	; (8002aac <HAL_QSPI_MspInit+0x114>)
 8002a36:	f002 fc41 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002a3a:	2340      	movs	r3, #64	; 0x40
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	4816      	ldr	r0, [pc, #88]	; (8002ab0 <HAL_QSPI_MspInit+0x118>)
 8002a56:	f002 fc31 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a6a:	2309      	movs	r3, #9
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	4619      	mov	r1, r3
 8002a74:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <HAL_QSPI_MspInit+0x118>)
 8002a76:	f002 fc21 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002a7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a8c:	2309      	movs	r3, #9
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <HAL_QSPI_MspInit+0x11c>)
 8002a98:	f002 fc10 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	a0001000 	.word	0xa0001000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020c00 	.word	0x40020c00

08002ab8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_RTC_MspInit+0x2c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RTC_MspInit+0x30>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_RTC_MspInit+0x30>)
 8002ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40002800 	.word	0x40002800
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <HAL_SD_MspInit+0xb4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d144      	bne.n	8002b98 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_SD_MspInit+0xb8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002b56:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b5a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <HAL_SD_MspInit+0xbc>)
 8002b74:	f002 fba2 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4806      	ldr	r0, [pc, #24]	; (8002bac <HAL_SD_MspInit+0xc0>)
 8002b94:	f002 fb92 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00

08002bb0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002bd0:	d127      	bne.n	8002c22 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_SPDIFRX_MspInit+0x7c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002c12:	2308      	movs	r3, #8
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <HAL_SPDIFRX_MspInit+0x80>)
 8002c1e:	f002 fb4d 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020c00 	.word	0x40020c00

08002c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_SPI_MspInit+0xb4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d144      	bne.n	8002ce0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_SPI_MspInit+0xb8>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cae:	2305      	movs	r3, #5
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <HAL_SPI_MspInit+0xbc>)
 8002cba:	f002 faff 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002cbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <HAL_SPI_MspInit+0xc0>)
 8002cdc:	f002 faee 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40003800 	.word	0x40003800
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40020400 	.word	0x40020400

08002cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_TIM_Base_MspInit+0xc8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10c      	bne.n	8002d24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d22:	e046      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]
}
 8002d46:	e034      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
}
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_TIM_Base_MspInit+0xd4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10c      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
}
 8002d8e:	e010      	b.n	8002db2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_TIM_Base_MspInit+0xd8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10b      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6453      	str	r3, [r2, #68]	; 0x44
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000c00 	.word	0x40000c00
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_TIM_PWM_MspInit+0x38>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10b      	bne.n	8002dfe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40001800 	.word	0x40001800
 8002e10:	40023800 	.word	0x40023800

08002e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 031c 	add.w	r3, r7, #28
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_TIM_MspPostInit+0x178>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d11d      	bne.n	8002e72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a55      	ldr	r2, [pc, #340]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	484a      	ldr	r0, [pc, #296]	; (8002f94 <HAL_TIM_MspPostInit+0x180>)
 8002e6c:	f002 fa26 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e70:	e087      	b.n	8002f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d11d      	bne.n	8002eb8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a43      	ldr	r2, [pc, #268]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002eaa:	f107 031c 	add.w	r3, r7, #28
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4838      	ldr	r0, [pc, #224]	; (8002f94 <HAL_TIM_MspPostInit+0x180>)
 8002eb2:	f002 fa03 	bl	80052bc <HAL_GPIO_Init>
}
 8002eb6:	e064      	b.n	8002f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <HAL_TIM_MspPostInit+0x184>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d11c      	bne.n	8002efc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec2:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a32      	ldr	r2, [pc, #200]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002eda:	2310      	movs	r3, #16
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002eea:	2302      	movs	r3, #2
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4829      	ldr	r0, [pc, #164]	; (8002f9c <HAL_TIM_MspPostInit+0x188>)
 8002ef6:	f002 f9e1 	bl	80052bc <HAL_GPIO_Init>
}
 8002efa:	e042      	b.n	8002f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <HAL_TIM_MspPostInit+0x18c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d11c      	bne.n	8002f40 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 031c 	add.w	r3, r7, #28
 8002f36:	4619      	mov	r1, r3
 8002f38:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <HAL_TIM_MspPostInit+0x190>)
 8002f3a:	f002 f9bf 	bl	80052bc <HAL_GPIO_Init>
}
 8002f3e:	e020      	b.n	8002f82 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_TIM_MspPostInit+0x194>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d11b      	bne.n	8002f82 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_TIM_MspPostInit+0x17c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f72:	2309      	movs	r3, #9
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002f76:	f107 031c 	add.w	r3, r7, #28
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480b      	ldr	r0, [pc, #44]	; (8002fac <HAL_TIM_MspPostInit+0x198>)
 8002f7e:	f002 f99d 	bl	80052bc <HAL_GPIO_Init>
}
 8002f82:	bf00      	nop
 8002f84:	3730      	adds	r7, #48	; 0x30
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40001800 	.word	0x40001800
 8002fac:	40021c00 	.word	0x40021c00

08002fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 031c 	add.w	r3, r7, #28
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <HAL_UART_MspInit+0x110>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d145      	bne.n	800305e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a35      	ldr	r2, [pc, #212]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800302a:	2307      	movs	r3, #7
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	4619      	mov	r1, r3
 8003034:	4824      	ldr	r0, [pc, #144]	; (80030c8 <HAL_UART_MspInit+0x118>)
 8003036:	f002 f941 	bl	80052bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800303a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	2300      	movs	r3, #0
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800304c:	2307      	movs	r3, #7
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	4619      	mov	r1, r3
 8003056:	481d      	ldr	r0, [pc, #116]	; (80030cc <HAL_UART_MspInit+0x11c>)
 8003058:	f002 f930 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800305c:	e02c      	b.n	80030b8 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <HAL_UART_MspInit+0x120>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d127      	bne.n	80030b8 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003068:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_UART_MspInit+0x114>)
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_UART_MspInit+0x114>)
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	6453      	str	r3, [r2, #68]	; 0x44
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_UART_MspInit+0x114>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_UART_MspInit+0x114>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003098:	23c0      	movs	r3, #192	; 0xc0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030a8:	2308      	movs	r3, #8
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	4808      	ldr	r0, [pc, #32]	; (80030d4 <HAL_UART_MspInit+0x124>)
 80030b4:	f002 f902 	bl	80052bc <HAL_GPIO_Init>
}
 80030b8:	bf00      	nop
 80030ba:	3730      	adds	r7, #48	; 0x30
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40011000 	.word	0x40011000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	40020800 	.word	0x40020800

080030d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <HAL_FMC_MspInit+0x100>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d16d      	bne.n	80031d0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80030f4:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_FMC_MspInit+0x100>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80030fa:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_FMC_MspInit+0x104>)
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <HAL_FMC_MspInit+0x104>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6393      	str	r3, [r2, #56]	; 0x38
 8003106:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_FMC_MspInit+0x104>)
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003112:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003116:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003124:	230c      	movs	r3, #12
 8003126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	4619      	mov	r1, r3
 800312c:	482c      	ldr	r0, [pc, #176]	; (80031e0 <HAL_FMC_MspInit+0x108>)
 800312e:	f002 f8c5 	bl	80052bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003132:	f248 1333 	movw	r3, #33075	; 0x8133
 8003136:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003144:	230c      	movs	r3, #12
 8003146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4825      	ldr	r0, [pc, #148]	; (80031e4 <HAL_FMC_MspInit+0x10c>)
 800314e:	f002 f8b5 	bl	80052bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003152:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003156:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003164:	230c      	movs	r3, #12
 8003166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	4619      	mov	r1, r3
 800316c:	481e      	ldr	r0, [pc, #120]	; (80031e8 <HAL_FMC_MspInit+0x110>)
 800316e:	f002 f8a5 	bl	80052bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003172:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003176:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003184:	230c      	movs	r3, #12
 8003186:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4817      	ldr	r0, [pc, #92]	; (80031ec <HAL_FMC_MspInit+0x114>)
 800318e:	f002 f895 	bl	80052bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003192:	2328      	movs	r3, #40	; 0x28
 8003194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031a2:	230c      	movs	r3, #12
 80031a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4811      	ldr	r0, [pc, #68]	; (80031f0 <HAL_FMC_MspInit+0x118>)
 80031ac:	f002 f886 	bl	80052bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80031b0:	2308      	movs	r3, #8
 80031b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031c0:	230c      	movs	r3, #12
 80031c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	480a      	ldr	r0, [pc, #40]	; (80031f4 <HAL_FMC_MspInit+0x11c>)
 80031ca:	f002 f877 	bl	80052bc <HAL_GPIO_Init>
 80031ce:	e000      	b.n	80031d2 <HAL_FMC_MspInit+0xfa>
    return;
 80031d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200003e0 	.word	0x200003e0
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40021800 	.word	0x40021800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021c00 	.word	0x40021c00
 80031f4:	40020800 	.word	0x40020800

080031f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003200:	f7ff ff6a 	bl	80030d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_SAI_MspInit+0xbc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d124      	bne.n	8003268 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 800322c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 8003246:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003248:	23f0      	movs	r3, #240	; 0xf0
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003258:	230a      	movs	r3, #10
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	481c      	ldr	r0, [pc, #112]	; (80032d4 <HAL_SAI_MspInit+0xc8>)
 8003264:	f002 f82a 	bl	80052bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <HAL_SAI_MspInit+0xcc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d125      	bne.n	80032be <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 8003280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_SAI_MspInit+0xc4>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <HAL_SAI_MspInit+0xc0>)
 800329a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800329c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80032ae:	230a      	movs	r3, #10
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	4808      	ldr	r0, [pc, #32]	; (80032dc <HAL_SAI_MspInit+0xd0>)
 80032ba:	f001 ffff 	bl	80052bc <HAL_GPIO_Init>

    }
}
 80032be:	bf00      	nop
 80032c0:	3728      	adds	r7, #40	; 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40015c04 	.word	0x40015c04
 80032cc:	200003e4 	.word	0x200003e4
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40015c24 	.word	0x40015c24
 80032dc:	40021800 	.word	0x40021800

080032e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80032f0:	2200      	movs	r2, #0
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	2036      	movs	r0, #54	; 0x36
 80032f6:	f001 f9b3 	bl	8004660 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80032fa:	2036      	movs	r0, #54	; 0x36
 80032fc:	f001 f9cc 	bl	8004698 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_InitTick+0xa0>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <HAL_InitTick+0xa0>)
 8003306:	f043 0310 	orr.w	r3, r3, #16
 800330a:	6413      	str	r3, [r2, #64]	; 0x40
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_InitTick+0xa0>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003318:	f107 0210 	add.w	r2, r7, #16
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f004 f802 	bl	800732c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003328:	f003 ffd8 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800332c:	4603      	mov	r3, r0
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <HAL_InitTick+0xa4>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	3b01      	subs	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_InitTick+0xa8>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <HAL_InitTick+0xac>)
 8003344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_InitTick+0xa8>)
 8003348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800334c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_InitTick+0xa8>)
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_InitTick+0xa8>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_InitTick+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003360:	4809      	ldr	r0, [pc, #36]	; (8003388 <HAL_InitTick+0xa8>)
 8003362:	f006 fc7b 	bl	8009c5c <HAL_TIM_Base_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800336c:	4806      	ldr	r0, [pc, #24]	; (8003388 <HAL_InitTick+0xa8>)
 800336e:	f006 fca1 	bl	8009cb4 <HAL_TIM_Base_Start_IT>
 8003372:	4603      	mov	r3, r0
 8003374:	e000      	b.n	8003378 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	3730      	adds	r7, #48	; 0x30
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	431bde83 	.word	0x431bde83
 8003388:	2000c8d8 	.word	0x2000c8d8
 800338c:	40001000 	.word	0x40001000

08003390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <HardFault_Handler+0x4>

080033a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <MemManage_Handler+0x4>

080033aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <BusFault_Handler+0x4>

080033b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <UsageFault_Handler+0x4>

080033b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <CAN1_RX0_IRQHandler+0x10>)
 80033ca:	f000 fe3b 	bl	8004044 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000c7f0 	.word	0x2000c7f0

080033d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <TIM6_DAC_IRQHandler+0x10>)
 80033de:	f006 fcbe 	bl	8009d5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000c8d8 	.word	0x2000c8d8

080033ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <LTDC_IRQHandler+0x10>)
 80033f2:	f002 ff3b 	bl	800626c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000c4d0 	.word	0x2000c4d0

08003400 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <DMA2D_IRQHandler+0x10>)
 8003406:	f001 fd1a 	bl	8004e3e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000c770 	.word	0x2000c770

08003414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
	return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_kill>:

int _kill(int pid, int sig)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800342e:	f024 fdb5 	bl	8027f9c <__errno>
 8003432:	4602      	mov	r2, r0
 8003434:	2316      	movs	r3, #22
 8003436:	6013      	str	r3, [r2, #0]
	return -1;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_exit>:

void _exit (int status)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800344c:	f04f 31ff 	mov.w	r1, #4294967295
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ffe7 	bl	8003424 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003456:	e7fe      	b.n	8003456 <_exit+0x12>

08003458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e00a      	b.n	8003480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800346a:	f3af 8000 	nop.w
 800346e:	4601      	mov	r1, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	60ba      	str	r2, [r7, #8]
 8003476:	b2ca      	uxtb	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	dbf0      	blt.n	800346a <_read+0x12>
	}

return len;
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e009      	b.n	80034b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	60ba      	str	r2, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf1      	blt.n	80034a4 <_write+0x12>
	}
	return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_close>:

int _close(int file)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
	return -1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034f2:	605a      	str	r2, [r3, #4]
	return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_isatty>:

int _isatty(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
	return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <_sbrk+0x50>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x16>
		heap_end = &end;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <_sbrk+0x50>)
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <_sbrk+0x54>)
 8003548:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <_sbrk+0x50>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <_sbrk+0x50>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	466a      	mov	r2, sp
 800355a:	4293      	cmp	r3, r2
 800355c:	d907      	bls.n	800356e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800355e:	f024 fd1d 	bl	8027f9c <__errno>
 8003562:	4602      	mov	r2, r0
 8003564:	230c      	movs	r3, #12
 8003566:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003568:	f04f 33ff 	mov.w	r3, #4294967295
 800356c:	e006      	b.n	800357c <_sbrk+0x48>
	}

	heap_end += incr;
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <_sbrk+0x50>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <_sbrk+0x50>)
 8003578:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200003e8 	.word	0x200003e8
 8003588:	2000cd90 	.word	0x2000cd90

0800358c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <SystemInit+0x28>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <SystemInit+0x28>)
 8003598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800359c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SystemInit+0x28>)
 80035a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a6:	609a      	str	r2, [r3, #8]
#endif
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035be:	e003      	b.n	80035c8 <LoopCopyDataInit>

080035c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035c6:	3104      	adds	r1, #4

080035c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035c8:	480b      	ldr	r0, [pc, #44]	; (80035f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035d0:	d3f6      	bcc.n	80035c0 <CopyDataInit>
  ldr  r2, =_sbss
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035d4:	e002      	b.n	80035dc <LoopFillZerobss>

080035d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035d8:	f842 3b04 	str.w	r3, [r2], #4

080035dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035e0:	d3f9      	bcc.n	80035d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035e2:	f7ff ffd3 	bl	800358c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035e6:	f024 fcf1 	bl	8027fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ea:	f7fd fc45 	bl	8000e78 <main>
  bx  lr    
 80035ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80035f4:	0806508c 	.word	0x0806508c
  ldr  r0, =_sdata
 80035f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035fc:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 8003600:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 8003604:	2000cd8c 	.word	0x2000cd8c

08003608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC_IRQHandler>

0800360a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360e:	2003      	movs	r0, #3
 8003610:	f001 f81b 	bl	800464a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff fe63 	bl	80032e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800361a:	f7fe ff09 	bl	8002430 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_IncTick+0x20>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_IncTick+0x24>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4413      	add	r3, r2
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_IncTick+0x24>)
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000020 	.word	0x20000020
 8003648:	2000c918 	.word	0x2000c918

0800364c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return uwTick;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_GetTick+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000c918 	.word	0x2000c918

08003664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800366c:	f7ff ffee 	bl	800364c <HAL_GetTick>
 8003670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d005      	beq.n	800368a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_Delay+0x40>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800368a:	bf00      	nop
 800368c:	f7ff ffde 	bl	800364c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d8f7      	bhi.n	800368c <HAL_Delay+0x28>
  {
  }
}
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000020 	.word	0x20000020

080036a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e031      	b.n	8003722 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe feda 	bl	8002480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_ADC_Init+0x84>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f964 	bl	80039c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
 8003712:	e001      	b.n	8003718 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	ffffeefd 	.word	0xffffeefd

08003730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e12a      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x272>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d93a      	bls.n	80037d2 <HAL_ADC_ConfigChannel+0xa2>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003764:	d035      	beq.n	80037d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68d9      	ldr	r1, [r3, #12]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	3b1e      	subs	r3, #30
 800377c:	2207      	movs	r2, #7
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	400a      	ands	r2, r1
 800378a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a87      	ldr	r2, [pc, #540]	; (80039b0 <HAL_ADC_ConfigChannel+0x280>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10a      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	061a      	lsls	r2, r3, #24
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037aa:	e035      	b.n	8003818 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4403      	add	r3, r0
 80037c4:	3b1e      	subs	r3, #30
 80037c6:	409a      	lsls	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037d0:	e022      	b.n	8003818 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6919      	ldr	r1, [r3, #16]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	2207      	movs	r2, #7
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43da      	mvns	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	400a      	ands	r2, r1
 80037f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6919      	ldr	r1, [r3, #16]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	4618      	mov	r0, r3
 8003808:	4603      	mov	r3, r0
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	4403      	add	r3, r0
 800380e:	409a      	lsls	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b06      	cmp	r3, #6
 800381e:	d824      	bhi.n	800386a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	3b05      	subs	r3, #5
 8003832:	221f      	movs	r2, #31
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43da      	mvns	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	400a      	ands	r2, r1
 8003840:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4618      	mov	r0, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	3b05      	subs	r3, #5
 800385c:	fa00 f203 	lsl.w	r2, r0, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	635a      	str	r2, [r3, #52]	; 0x34
 8003868:	e04c      	b.n	8003904 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d824      	bhi.n	80038bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	3b23      	subs	r3, #35	; 0x23
 8003884:	221f      	movs	r2, #31
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	400a      	ands	r2, r1
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	3b23      	subs	r3, #35	; 0x23
 80038ae:	fa00 f203 	lsl.w	r2, r0, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
 80038ba:	e023      	b.n	8003904 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	3b41      	subs	r3, #65	; 0x41
 80038ce:	221f      	movs	r2, #31
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43da      	mvns	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	400a      	ands	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	3b41      	subs	r3, #65	; 0x41
 80038f8:	fa00 f203 	lsl.w	r2, r0, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2a      	ldr	r2, [pc, #168]	; (80039b4 <HAL_ADC_ConfigChannel+0x284>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10a      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1f4>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003916:	d105      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 800391e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003922:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_ADC_ConfigChannel+0x284>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d109      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x212>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b12      	cmp	r3, #18
 8003934:	d105      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003936:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 800393c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003940:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_ADC_ConfigChannel+0x284>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d125      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x268>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_ADC_ConfigChannel+0x280>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <HAL_ADC_ConfigChannel+0x22e>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b11      	cmp	r3, #17
 800395c:	d11c      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <HAL_ADC_ConfigChannel+0x288>)
 8003964:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003968:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <HAL_ADC_ConfigChannel+0x280>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d111      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_ADC_ConfigChannel+0x28c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_ADC_ConfigChannel+0x290>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0c9a      	lsrs	r2, r3, #18
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800398a:	e002      	b.n	8003992 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	10000012 	.word	0x10000012
 80039b4:	40012000 	.word	0x40012000
 80039b8:	40012300 	.word	0x40012300
 80039bc:	20000018 	.word	0x20000018
 80039c0:	431bde83 	.word	0x431bde83

080039c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039cc:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <ADC_Init+0x1ec>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a77      	ldr	r2, [pc, #476]	; (8003bb0 <ADC_Init+0x1ec>)
 80039d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039d8:	4b75      	ldr	r3, [pc, #468]	; (8003bb0 <ADC_Init+0x1ec>)
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4973      	ldr	r1, [pc, #460]	; (8003bb0 <ADC_Init+0x1ec>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	021a      	lsls	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <ADC_Init+0x1f0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6899      	ldr	r1, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	e00f      	b.n	8003abe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0202 	bic.w	r2, r2, #2
 8003acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	005a      	lsls	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01b      	beq.n	8003b24 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	3b01      	subs	r3, #1
 8003b18:	035a      	lsls	r2, r3, #13
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e007      	b.n	8003b34 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	051a      	lsls	r2, r3, #20
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b76:	025a      	lsls	r2, r3, #9
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	029a      	lsls	r2, r3, #10
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40012300 	.word	0x40012300
 8003bb4:	0f000001 	.word	0x0f000001

08003bb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0ed      	b.n	8003da6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fe fcac 	bl	8002534 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0202 	bic.w	r2, r2, #2
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bec:	f7ff fd2e 	bl	800364c <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bf2:	e012      	b.n	8003c1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bf4:	f7ff fd2a 	bl	800364c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b0a      	cmp	r3, #10
 8003c00:	d90b      	bls.n	8003c1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2205      	movs	r2, #5
 8003c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0c5      	b.n	8003da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7ff fd08 	bl	800364c <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c3e:	e012      	b.n	8003c66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c40:	f7ff fd04 	bl	800364c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b0a      	cmp	r3, #10
 8003c4c:	d90b      	bls.n	8003c66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e09f      	b.n	8003da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0e5      	beq.n	8003c40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7e1b      	ldrb	r3, [r3, #24]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d108      	bne.n	8003c8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e007      	b.n	8003c9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7e5b      	ldrb	r3, [r3, #25]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d108      	bne.n	8003cb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e007      	b.n	8003cc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7e9b      	ldrb	r3, [r3, #26]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d108      	bne.n	8003ce2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0220 	orr.w	r2, r2, #32
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e007      	b.n	8003cf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0220 	bic.w	r2, r2, #32
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7edb      	ldrb	r3, [r3, #27]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d108      	bne.n	8003d0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0210 	bic.w	r2, r2, #16
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0210 	orr.w	r2, r2, #16
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7f1b      	ldrb	r3, [r3, #28]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d108      	bne.n	8003d36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0208 	orr.w	r2, r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e007      	b.n	8003d46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0208 	bic.w	r2, r2, #8
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	7f5b      	ldrb	r3, [r3, #29]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0204 	orr.w	r2, r2, #4
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e007      	b.n	8003d70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d003      	beq.n	8003dd6 <HAL_CAN_ConfigFilter+0x26>
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f040 80be 	bne.w	8003f52 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_CAN_ConfigFilter+0x1bc>)
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003df0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	431a      	orrs	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d123      	bne.n	8003e80 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3248      	adds	r2, #72	; 0x48
 8003e60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	3348      	adds	r3, #72	; 0x48
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d122      	bne.n	8003ece <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3248      	adds	r2, #72	; 0x48
 8003eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ee8:	e007      	b.n	8003efa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f14:	e007      	b.n	8003f26 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f44:	f023 0201 	bic.w	r2, r3, #1
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e006      	b.n	8003f60 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40006400 	.word	0x40006400

08003f70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d12e      	bne.n	8003fe2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9c:	f7ff fb56 	bl	800364c <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fa2:	e012      	b.n	8003fca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fa4:	f7ff fb52 	bl	800364c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b0a      	cmp	r3, #10
 8003fb0:	d90b      	bls.n	8003fca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e012      	b.n	8003ff0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e006      	b.n	8003ff0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004008:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d002      	beq.n	8004016 <HAL_CAN_ActivateNotification+0x1e>
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d109      	bne.n	800402a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6959      	ldr	r1, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e006      	b.n	8004038 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07c      	beq.n	8004184 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d023      	beq.n	80040dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2201      	movs	r2, #1
 800409a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f97d 	bl	80043a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80040ac:	e016      	b.n	80040dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	e00c      	b.n	80040dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	e002      	b.n	80040dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f983 	bl	80043e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d024      	beq.n	8004130 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f95d 	bl	80043ba <HAL_CAN_TxMailbox1CompleteCallback>
 8004100:	e016      	b.n	8004130 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	e00c      	b.n	8004130 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	e002      	b.n	8004130 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f963 	bl	80043f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d024      	beq.n	8004184 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004142:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f93d 	bl	80043ce <HAL_CAN_TxMailbox2CompleteCallback>
 8004154:	e016      	b.n	8004184 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	e00c      	b.n	8004184 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
 800417c:	e002      	b.n	8004184 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f943 	bl	800440a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2210      	movs	r2, #16
 80041a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f934 	bl	8004432 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f91b 	bl	800441e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004202:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2210      	movs	r2, #16
 800420a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d006      	beq.n	800422e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2208      	movs	r2, #8
 8004226:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f916 	bl	800445a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8fd 	bl	8004446 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b00      	cmp	r3, #0
 800425e:	d006      	beq.n	800426e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2210      	movs	r2, #16
 8004266:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f900 	bl	800446e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2208      	movs	r2, #8
 8004288:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8f9 	bl	8004482 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d06c      	beq.n	800437e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f043 0302 	orr.w	r3, r3, #2
 80042da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03d      	beq.n	800437e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	d038      	beq.n	800437e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d017      	beq.n	8004346 <HAL_CAN_IRQHandler+0x302>
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d804      	bhi.n	8004324 <HAL_CAN_IRQHandler+0x2e0>
 800431a:	2b10      	cmp	r3, #16
 800431c:	d009      	beq.n	8004332 <HAL_CAN_IRQHandler+0x2ee>
 800431e:	2b20      	cmp	r3, #32
 8004320:	d00c      	beq.n	800433c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004322:	e024      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004324:	2b50      	cmp	r3, #80	; 0x50
 8004326:	d018      	beq.n	800435a <HAL_CAN_IRQHandler+0x316>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d01b      	beq.n	8004364 <HAL_CAN_IRQHandler+0x320>
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d00f      	beq.n	8004350 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004330:	e01d      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800433a:	e018      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f043 0310 	orr.w	r3, r3, #16
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004344:	e013      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800434e:	e00e      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004358:	e009      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004362:	e004      	b.n	800436e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800436c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800437c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2204      	movs	r2, #4
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f87c 	bl	8004496 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800439e:	bf00      	nop
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c8:	4013      	ands	r3, r2
 80044ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <__NVIC_SetPriorityGrouping+0x40>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00
 80044f0:	05fa0000 	.word	0x05fa0000

080044f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <__NVIC_GetPriorityGrouping+0x18>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	f003 0307 	and.w	r3, r3, #7
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db0b      	blt.n	800453a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4907      	ldr	r1, [pc, #28]	; (8004548 <__NVIC_EnableIRQ+0x38>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e100 	.word	0xe000e100

0800454c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	2b00      	cmp	r3, #0
 800455c:	db10      	blt.n	8004580 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	f003 021f 	and.w	r2, r3, #31
 8004564:	4909      	ldr	r1, [pc, #36]	; (800458c <__NVIC_DisableIRQ+0x40>)
 8004566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2001      	movs	r0, #1
 800456e:	fa00 f202 	lsl.w	r2, r0, r2
 8004572:	3320      	adds	r3, #32
 8004574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004578:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800457c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	; (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff2a 	bl	80044ac <__NVIC_SetPriorityGrouping>
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004672:	f7ff ff3f 	bl	80044f4 <__NVIC_GetPriorityGrouping>
 8004676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6978      	ldr	r0, [r7, #20]
 800467e:	f7ff ffb1 	bl	80045e4 <NVIC_EncodePriority>
 8004682:	4602      	mov	r2, r0
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ff80 	bl	8004590 <__NVIC_SetPriority>
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff32 	bl	8004510 <__NVIC_EnableIRQ>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ff42 	bl	800454c <__NVIC_DisableIRQ>
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e054      	b.n	800478c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7f5b      	ldrb	r3, [r3, #29]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd ff6a 	bl	80025cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	791b      	ldrb	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <HAL_CRC_Init+0xc4>)
 800470c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0218 	bic.w	r2, r2, #24
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	e00c      	b.n	800473a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6899      	ldr	r1, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	461a      	mov	r2, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f834 	bl	8004798 <HAL_CRCEx_Polynomial_Set>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e028      	b.n	800478c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	795b      	ldrb	r3, [r3, #5]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d105      	bne.n	800474e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	611a      	str	r2, [r3, #16]
 800474c:	e004      	b.n	8004758 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6912      	ldr	r2, [r2, #16]
 8004756:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	04c11db7 	.word	0x04c11db7

08004798 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80047a8:	231f      	movs	r3, #31
 80047aa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047ac:	bf00      	nop
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1e5a      	subs	r2, r3, #1
 80047b2:	613a      	str	r2, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_CRCEx_Polynomial_Set+0x34>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0f0      	beq.n	80047ae <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b18      	cmp	r3, #24
 80047d0:	d846      	bhi.n	8004860 <HAL_CRCEx_Polynomial_Set+0xc8>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	08004867 	.word	0x08004867
 80047dc:	08004861 	.word	0x08004861
 80047e0:	08004861 	.word	0x08004861
 80047e4:	08004861 	.word	0x08004861
 80047e8:	08004861 	.word	0x08004861
 80047ec:	08004861 	.word	0x08004861
 80047f0:	08004861 	.word	0x08004861
 80047f4:	08004861 	.word	0x08004861
 80047f8:	08004855 	.word	0x08004855
 80047fc:	08004861 	.word	0x08004861
 8004800:	08004861 	.word	0x08004861
 8004804:	08004861 	.word	0x08004861
 8004808:	08004861 	.word	0x08004861
 800480c:	08004861 	.word	0x08004861
 8004810:	08004861 	.word	0x08004861
 8004814:	08004861 	.word	0x08004861
 8004818:	08004849 	.word	0x08004849
 800481c:	08004861 	.word	0x08004861
 8004820:	08004861 	.word	0x08004861
 8004824:	08004861 	.word	0x08004861
 8004828:	08004861 	.word	0x08004861
 800482c:	08004861 	.word	0x08004861
 8004830:	08004861 	.word	0x08004861
 8004834:	08004861 	.word	0x08004861
 8004838:	0800483d 	.word	0x0800483d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d913      	bls.n	800486a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004846:	e010      	b.n	800486a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d90f      	bls.n	800486e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004852:	e00c      	b.n	800486e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d90b      	bls.n	8004872 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800485e:	e008      	b.n	8004872 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	75fb      	strb	r3, [r7, #23]
      break;
 8004864:	e006      	b.n	8004874 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004872:	bf00      	nop
  }
  if (status == HAL_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10d      	bne.n	8004896 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 0118 	bic.w	r1, r3, #24
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e069      	b.n	800498a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd fea2 	bl	800260c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_DCMI_Init+0xf0>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004902:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800490e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800491a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004926:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004932:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b10      	cmp	r3, #16
 8004942:	d112      	bne.n	800496a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7f1b      	ldrb	r3, [r3, #28]
 8004948:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7f5b      	ldrb	r3, [r3, #29]
 800494e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004950:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7f9b      	ldrb	r3, [r3, #30]
 8004956:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004958:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7fdb      	ldrb	r3, [r3, #31]
 8004960:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004966:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004968:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 021e 	orr.w	r2, r2, #30
 8004978:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	ffe0f007 	.word	0xffe0f007

08004998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_DMA_Start_IT+0x26>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e048      	b.n	8004a50 <HAL_DMA_Start_IT+0xb8>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d137      	bne.n	8004a42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f842 	bl	8004a70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f0:	223f      	movs	r2, #63	; 0x3f
 80049f2:	409a      	lsls	r2, r3
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0216 	orr.w	r2, r2, #22
 8004a06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a16:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e005      	b.n	8004a4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d108      	bne.n	8004ab0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aae:	e007      	b.n	8004ac0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e039      	b.n	8004b52 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd fe48 	bl	8002788 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1c:	f023 0107 	bic.w	r1, r3, #7
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <HAL_DMA2D_Init+0x90>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68d1      	ldr	r1, [r2, #12]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	ffffc000 	.word	0xffffc000

08004b60 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e05f      	b.n	8004c32 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8004b72:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_DMA2D_DeInit+0xdc>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02e      	beq.n	8004bdc <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8c1 	bl	8004d14 <HAL_DMA2D_Abort>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d021      	beq.n	8004bdc <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e04a      	b.n	8004c32 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d108      	bne.n	8004bbc <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8004baa:	2100      	movs	r1, #0
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8f7 	bl	8004da0 <HAL_DMA2D_CLUTLoading_Abort>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e03a      	b.n	8004c32 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d108      	bne.n	8004bdc <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8e7 	bl	8004da0 <HAL_DMA2D_CLUTLoading_Abort>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e02a      	b.n	8004c32 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	223f      	movs	r2, #63	; 0x3f
 8004bea:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fd fddd 	bl	80027d4 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA2D_Start_IT+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e020      	b.n	8004c9e <HAL_DMA2D_Start_IT+0x5e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fa84 	bl	8005184 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e024      	b.n	8004d0c <HAL_DMA2D_BlendingStart_IT+0x66>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa4d 	bl	8005184 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0205 	bic.w	r2, r3, #5
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0204 	orr.w	r2, r2, #4
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7fe fc8c 	bl	800364c <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d36:	e017      	b.n	8004d68 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004d38:	f7fe fc88 	bl	800364c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d46:	d90f      	bls.n	8004d68 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2203      	movs	r2, #3
 8004d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e017      	b.n	8004d98 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e0      	bne.n	8004d38 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004d84:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3324      	adds	r3, #36	; 0x24
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0204 	orr.w	r2, r2, #4
 8004dc0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d103      	bne.n	8004dd0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	331c      	adds	r3, #28
 8004dce:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd0:	f7fe fc3c 	bl	800364c <HAL_GetTick>
 8004dd4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004dd6:	e017      	b.n	8004e08 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004dd8:	f7fe fc38 	bl	800364c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de6:	d90f      	bls.n	8004e08 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2203      	movs	r2, #3
 8004df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e016      	b.n	8004e36 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e1      	bne.n	8004dd8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004e22:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d026      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d021      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	f043 0201 	orr.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2204      	movs	r2, #4
 8004e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d026      	beq.n	8004f06 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d021      	beq.n	8004f06 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d026      	beq.n	8004f5e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d021      	beq.n	8004f5e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2208      	movs	r2, #8
 8004f30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f80:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2204      	movs	r2, #4
 8004f88:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f853 	bl	8005036 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d024      	beq.n	8004fe4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d01f      	beq.n	800502e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005006:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2210      	movs	r2, #16
 800500e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f80e 	bl	800504a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_DMA2D_ConfigLayer+0x20>
 800507c:	2302      	movs	r3, #2
 800507e:	e079      	b.n	8005174 <HAL_DMA2D_ConfigLayer+0x114>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	3318      	adds	r3, #24
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80050aa:	4b35      	ldr	r3, [pc, #212]	; (8005180 <HAL_DMA2D_ConfigLayer+0x120>)
 80050ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b0a      	cmp	r3, #10
 80050b4:	d003      	beq.n	80050be <HAL_DMA2D_ConfigLayer+0x5e>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d107      	bne.n	80050ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e005      	b.n	80050da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d120      	bne.n	8005122 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	ea02 0103 	and.w	r1, r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d003      	beq.n	8005112 <HAL_DMA2D_ConfigLayer+0xb2>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b09      	cmp	r3, #9
 8005110:	d127      	bne.n	8005162 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
 8005120:	e01f      	b.n	8005162 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	ea02 0103 	and.w	r1, r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	430a      	orrs	r2, r1
 8005138:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b0a      	cmp	r3, #10
 800514a:	d003      	beq.n	8005154 <HAL_DMA2D_ConfigLayer+0xf4>
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b09      	cmp	r3, #9
 8005152:	d106      	bne.n	8005162 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005160:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	ff03000f 	.word	0xff03000f

08005184 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005184:	b480      	push	{r7}
 8005186:	b08b      	sub	sp, #44	; 0x2c
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	041a      	lsls	r2, r3, #16
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051bc:	d174      	bne.n	80052a8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051c4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051cc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051d4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	e053      	b.n	800529e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d106      	bne.n	800520c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4313      	orrs	r3, r2
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	e048      	b.n	800529e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d111      	bne.n	8005238 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	0cdb      	lsrs	r3, r3, #19
 8005218:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	0a9b      	lsrs	r3, r3, #10
 800521e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	08db      	lsrs	r3, r3, #3
 8005224:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	02db      	lsls	r3, r3, #11
 800522e:	4313      	orrs	r3, r2
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
 8005236:	e032      	b.n	800529e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d117      	bne.n	8005270 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	0fdb      	lsrs	r3, r3, #31
 8005244:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	0cdb      	lsrs	r3, r3, #19
 800524a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	0adb      	lsrs	r3, r3, #11
 8005250:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	08db      	lsrs	r3, r3, #3
 8005256:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	431a      	orrs	r2, r3
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	03db      	lsls	r3, r3, #15
 8005266:	4313      	orrs	r3, r2
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e016      	b.n	800529e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	0f1b      	lsrs	r3, r3, #28
 8005274:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	0d1b      	lsrs	r3, r3, #20
 800527a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	0b1b      	lsrs	r3, r3, #12
 8005280:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	011a      	lsls	r2, r3, #4
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	431a      	orrs	r2, r3
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	031b      	lsls	r3, r3, #12
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80052a6:	e003      	b.n	80052b0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	60da      	str	r2, [r3, #12]
}
 80052b0:	bf00      	nop
 80052b2:	372c      	adds	r7, #44	; 0x2c
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e175      	b.n	80055c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052dc:	2201      	movs	r2, #1
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	f040 8164 	bne.w	80055c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d00b      	beq.n	800531a <HAL_GPIO_Init+0x5e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d007      	beq.n	800531a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800530e:	2b11      	cmp	r3, #17
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b12      	cmp	r3, #18
 8005318:	d130      	bne.n	800537c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	2203      	movs	r2, #3
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005350:	2201      	movs	r2, #1
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 0201 	and.w	r2, r3, #1
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x100>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b12      	cmp	r3, #18
 80053ba:	d123      	bne.n	8005404 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	08da      	lsrs	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3208      	adds	r2, #8
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	220f      	movs	r2, #15
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	08da      	lsrs	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	2203      	movs	r2, #3
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	43db      	mvns	r3, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	4013      	ands	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0203 	and.w	r2, r3, #3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80be 	beq.w	80055c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_GPIO_Init+0x320>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	4a64      	ldr	r2, [pc, #400]	; (80055dc <HAL_GPIO_Init+0x320>)
 800544c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b62      	ldr	r3, [pc, #392]	; (80055dc <HAL_GPIO_Init+0x320>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800545e:	4a60      	ldr	r2, [pc, #384]	; (80055e0 <HAL_GPIO_Init+0x324>)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	3302      	adds	r3, #2
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a57      	ldr	r2, [pc, #348]	; (80055e4 <HAL_GPIO_Init+0x328>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d037      	beq.n	80054fa <HAL_GPIO_Init+0x23e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a56      	ldr	r2, [pc, #344]	; (80055e8 <HAL_GPIO_Init+0x32c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d031      	beq.n	80054f6 <HAL_GPIO_Init+0x23a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a55      	ldr	r2, [pc, #340]	; (80055ec <HAL_GPIO_Init+0x330>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d02b      	beq.n	80054f2 <HAL_GPIO_Init+0x236>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a54      	ldr	r2, [pc, #336]	; (80055f0 <HAL_GPIO_Init+0x334>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d025      	beq.n	80054ee <HAL_GPIO_Init+0x232>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a53      	ldr	r2, [pc, #332]	; (80055f4 <HAL_GPIO_Init+0x338>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <HAL_GPIO_Init+0x22e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a52      	ldr	r2, [pc, #328]	; (80055f8 <HAL_GPIO_Init+0x33c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d019      	beq.n	80054e6 <HAL_GPIO_Init+0x22a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a51      	ldr	r2, [pc, #324]	; (80055fc <HAL_GPIO_Init+0x340>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_GPIO_Init+0x226>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_GPIO_Init+0x344>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00d      	beq.n	80054de <HAL_GPIO_Init+0x222>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a4f      	ldr	r2, [pc, #316]	; (8005604 <HAL_GPIO_Init+0x348>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <HAL_GPIO_Init+0x21e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a4e      	ldr	r2, [pc, #312]	; (8005608 <HAL_GPIO_Init+0x34c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d101      	bne.n	80054d6 <HAL_GPIO_Init+0x21a>
 80054d2:	2309      	movs	r3, #9
 80054d4:	e012      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054d6:	230a      	movs	r3, #10
 80054d8:	e010      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054da:	2308      	movs	r3, #8
 80054dc:	e00e      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054de:	2307      	movs	r3, #7
 80054e0:	e00c      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e2:	2306      	movs	r3, #6
 80054e4:	e00a      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054e6:	2305      	movs	r3, #5
 80054e8:	e008      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ea:	2304      	movs	r3, #4
 80054ec:	e006      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054ee:	2303      	movs	r3, #3
 80054f0:	e004      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e002      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <HAL_GPIO_Init+0x240>
 80054fa:	2300      	movs	r3, #0
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	f002 0203 	and.w	r2, r2, #3
 8005502:	0092      	lsls	r2, r2, #2
 8005504:	4093      	lsls	r3, r2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800550c:	4934      	ldr	r1, [pc, #208]	; (80055e0 <HAL_GPIO_Init+0x324>)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	3302      	adds	r3, #2
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800551a:	4b3c      	ldr	r3, [pc, #240]	; (800560c <HAL_GPIO_Init+0x350>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	43db      	mvns	r3, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800553e:	4a33      	ldr	r2, [pc, #204]	; (800560c <HAL_GPIO_Init+0x350>)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005544:	4b31      	ldr	r3, [pc, #196]	; (800560c <HAL_GPIO_Init+0x350>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_GPIO_Init+0x350>)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_GPIO_Init+0x350>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_GPIO_Init+0x350>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005598:	4b1c      	ldr	r3, [pc, #112]	; (800560c <HAL_GPIO_Init+0x350>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <HAL_GPIO_Init+0x350>)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	f67f ae86 	bls.w	80052dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055d0:	bf00      	nop
 80055d2:	3724      	adds	r7, #36	; 0x24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40013800 	.word	0x40013800
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40020800 	.word	0x40020800
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021400 	.word	0x40021400
 80055fc:	40021800 	.word	0x40021800
 8005600:	40021c00 	.word	0x40021c00
 8005604:	40022000 	.word	0x40022000
 8005608:	40022400 	.word	0x40022400
 800560c:	40013c00 	.word	0x40013c00

08005610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	887b      	ldrh	r3, [r7, #2]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005628:	2301      	movs	r3, #1
 800562a:	73fb      	strb	r3, [r7, #15]
 800562c:	e001      	b.n	8005632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
 800564c:	4613      	mov	r3, r2
 800564e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005650:	787b      	ldrb	r3, [r7, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005656:	887a      	ldrh	r2, [r7, #2]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800565c:	e003      	b.n	8005666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	619a      	str	r2, [r3, #24]
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8a9 	bl	80057f2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d107      	bne.n	80056ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	e006      	b.n	80056fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d104      	bne.n	800570e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800570c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6859      	ldr	r1, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <HAL_I2C_Init+0x11c>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	ea42 0103 	orr.w	r1, r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	02008000 	.word	0x02008000

08005794 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e021      	b.n	80057ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2224      	movs	r2, #36	; 0x24
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f821 	bl	8005806 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	4608      	mov	r0, r1
 8005826:	4611      	mov	r1, r2
 8005828:	461a      	mov	r2, r3
 800582a:	4603      	mov	r3, r0
 800582c:	817b      	strh	r3, [r7, #10]
 800582e:	460b      	mov	r3, r1
 8005830:	813b      	strh	r3, [r7, #8]
 8005832:	4613      	mov	r3, r2
 8005834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b20      	cmp	r3, #32
 8005840:	f040 80f9 	bne.w	8005a36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_I2C_Mem_Write+0x34>
 800584a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005856:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0ed      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_I2C_Mem_Write+0x4e>
 8005866:	2302      	movs	r3, #2
 8005868:	e0e6      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005872:	f7fd feeb 	bl	800364c <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2319      	movs	r3, #25
 800587e:	2201      	movs	r2, #1
 8005880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fad1 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0d1      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2221      	movs	r2, #33	; 0x21
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058bc:	88f8      	ldrh	r0, [r7, #6]
 80058be:	893a      	ldrh	r2, [r7, #8]
 80058c0:	8979      	ldrh	r1, [r7, #10]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	4603      	mov	r3, r0
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f9e1 	bl	8005c94 <I2C_RequestMemoryWrite>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a9      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2bff      	cmp	r3, #255	; 0xff
 80058ec:	d90e      	bls.n	800590c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	22ff      	movs	r2, #255	; 0xff
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	8979      	ldrh	r1, [r7, #10]
 80058fc:	2300      	movs	r3, #0
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fbb3 	bl	8006070 <I2C_TransferConfig>
 800590a:	e00f      	b.n	800592c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	b2da      	uxtb	r2, r3
 800591c:	8979      	ldrh	r1, [r7, #10]
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fba2 	bl	8006070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fabb 	bl	8005eac <I2C_WaitOnTXISFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e07b      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d034      	beq.n	80059e4 <HAL_I2C_Mem_Write+0x1c8>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d130      	bne.n	80059e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fa4d 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e04d      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2bff      	cmp	r3, #255	; 0xff
 80059a4:	d90e      	bls.n	80059c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	8979      	ldrh	r1, [r7, #10]
 80059b4:	2300      	movs	r3, #0
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fb57 	bl	8006070 <I2C_TransferConfig>
 80059c2:	e00f      	b.n	80059e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	8979      	ldrh	r1, [r7, #10]
 80059d6:	2300      	movs	r3, #0
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fb46 	bl	8006070 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d19e      	bne.n	800592c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fa9a 	bl	8005f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e01a      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2220      	movs	r2, #32
 8005a08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <HAL_I2C_Mem_Write+0x224>)
 8005a16:	400b      	ands	r3, r1
 8005a18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e000      	b.n	8005a38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	fe00e800 	.word	0xfe00e800

08005a44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	817b      	strh	r3, [r7, #10]
 8005a56:	460b      	mov	r3, r1
 8005a58:	813b      	strh	r3, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	f040 80fd 	bne.w	8005c66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x34>
 8005a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0f1      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2C_Mem_Read+0x4e>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0ea      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a9a:	f7fd fdd7 	bl	800364c <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	2319      	movs	r3, #25
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f9bd 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0d5      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ae4:	88f8      	ldrh	r0, [r7, #6]
 8005ae6:	893a      	ldrh	r2, [r7, #8]
 8005ae8:	8979      	ldrh	r1, [r7, #10]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4603      	mov	r3, r0
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f921 	bl	8005d3c <I2C_RequestMemoryRead>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0ad      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	d90e      	bls.n	8005b34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	8979      	ldrh	r1, [r7, #10]
 8005b24:	4b52      	ldr	r3, [pc, #328]	; (8005c70 <HAL_I2C_Mem_Read+0x22c>)
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fa9f 	bl	8006070 <I2C_TransferConfig>
 8005b32:	e00f      	b.n	8005b54 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	8979      	ldrh	r1, [r7, #10]
 8005b46:	4b4a      	ldr	r3, [pc, #296]	; (8005c70 <HAL_I2C_Mem_Read+0x22c>)
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fa8e 	bl	8006070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f964 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07c      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d034      	beq.n	8005c14 <HAL_I2C_Mem_Read+0x1d0>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d130      	bne.n	8005c14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f935 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e04d      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2bff      	cmp	r3, #255	; 0xff
 8005bd4:	d90e      	bls.n	8005bf4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	22ff      	movs	r2, #255	; 0xff
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	8979      	ldrh	r1, [r7, #10]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fa3f 	bl	8006070 <I2C_TransferConfig>
 8005bf2:	e00f      	b.n	8005c14 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	8979      	ldrh	r1, [r7, #10]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fa2e 	bl	8006070 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d19a      	bne.n	8005b54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f982 	bl	8005f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e01a      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2220      	movs	r2, #32
 8005c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_I2C_Mem_Read+0x230>)
 8005c46:	400b      	ands	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e000      	b.n	8005c68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c66:	2302      	movs	r3, #2
  }
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	80002400 	.word	0x80002400
 8005c74:	fe00e800 	.word	0xfe00e800

08005c78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c86:	b2db      	uxtb	r3, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	8979      	ldrh	r1, [r7, #10]
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <I2C_RequestMemoryWrite+0xa4>)
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f9d7 	bl	8006070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	69b9      	ldr	r1, [r7, #24]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f8f0 	bl	8005eac <I2C_WaitOnTXISFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e02c      	b.n	8005d30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cdc:	893b      	ldrh	r3, [r7, #8]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ce6:	e015      	b.n	8005d14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ce8:	893b      	ldrh	r3, [r7, #8]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f8d6 	bl	8005eac <I2C_WaitOnTXISFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e012      	b.n	8005d30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0a:	893b      	ldrh	r3, [r7, #8]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f884 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	80002000 	.word	0x80002000

08005d3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	817b      	strh	r3, [r7, #10]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	813b      	strh	r3, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	8979      	ldrh	r1, [r7, #10]
 8005d5c:	4b20      	ldr	r3, [pc, #128]	; (8005de0 <I2C_RequestMemoryRead+0xa4>)
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f984 	bl	8006070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	69b9      	ldr	r1, [r7, #24]
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f89d 	bl	8005eac <I2C_WaitOnTXISFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e02c      	b.n	8005dd6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d105      	bne.n	8005d8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d82:	893b      	ldrh	r3, [r7, #8]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d8c:	e015      	b.n	8005dba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d8e:	893b      	ldrh	r3, [r7, #8]
 8005d90:	0a1b      	lsrs	r3, r3, #8
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	69b9      	ldr	r1, [r7, #24]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f883 	bl	8005eac <I2C_WaitOnTXISFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e012      	b.n	8005dd6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2140      	movs	r1, #64	; 0x40
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f831 	bl	8005e2c <I2C_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	80002000 	.word	0x80002000

08005de4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d103      	bne.n	8005e02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d007      	beq.n	8005e20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	619a      	str	r2, [r3, #24]
  }
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3c:	e022      	b.n	8005e84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d01e      	beq.n	8005e84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fd fc01 	bl	800364c <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d113      	bne.n	8005e84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e00f      	b.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d0cd      	beq.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eb8:	e02c      	b.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f870 	bl	8005fa4 <I2C_IsAcknowledgeFailed>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e02a      	b.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d01e      	beq.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed6:	f7fd fbb9 	bl	800364c <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d302      	bcc.n	8005eec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	f043 0220 	orr.w	r2, r3, #32
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e007      	b.n	8005f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d1cb      	bne.n	8005eba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f38:	e028      	b.n	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f830 	bl	8005fa4 <I2C_IsAcknowledgeFailed>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e026      	b.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fd fb7d 	bl	800364c <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d1cf      	bne.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d151      	bne.n	8006062 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fbe:	e022      	b.n	8006006 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d01e      	beq.n	8006006 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc8:	f7fd fb40 	bl	800364c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d302      	bcc.n	8005fde <I2C_IsAcknowledgeFailed+0x3a>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d113      	bne.n	8006006 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e02e      	b.n	8006064 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b20      	cmp	r3, #32
 8006012:	d1d5      	bne.n	8005fc0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2210      	movs	r2, #16
 800601a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2220      	movs	r2, #32
 8006022:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff fedd 	bl	8005de4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6859      	ldr	r1, [r3, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b0d      	ldr	r3, [pc, #52]	; (800606c <I2C_IsAcknowledgeFailed+0xc8>)
 8006036:	400b      	ands	r3, r1
 8006038:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	fe00e800 	.word	0xfe00e800

08006070 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	607b      	str	r3, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	4613      	mov	r3, r2
 8006080:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	0d5b      	lsrs	r3, r3, #21
 800608c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006090:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <I2C_TransferConfig+0x58>)
 8006092:	430b      	orrs	r3, r1
 8006094:	43db      	mvns	r3, r3
 8006096:	ea02 0103 	and.w	r1, r2, r3
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060a0:	7a7b      	ldrb	r3, [r7, #9]
 80060a2:	041b      	lsls	r3, r3, #16
 80060a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	03ff63ff 	.word	0x03ff63ff

080060cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0bf      	b.n	800625e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fc fb88 	bl	8002808 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800610e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006124:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <HAL_LTDC_Init+0x19c>)
 8006140:	400b      	ands	r3, r1
 8006142:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68d9      	ldr	r1, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b3e      	ldr	r3, [pc, #248]	; (8006268 <HAL_LTDC_Init+0x19c>)
 800616e:	400b      	ands	r3, r1
 8006170:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68d9      	ldr	r1, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6919      	ldr	r1, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	4b33      	ldr	r3, [pc, #204]	; (8006268 <HAL_LTDC_Init+0x19c>)
 800619c:	400b      	ands	r3, r1
 800619e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6919      	ldr	r1, [r3, #16]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6959      	ldr	r1, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <HAL_LTDC_Init+0x19c>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6959      	ldr	r1, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0206 	orr.w	r2, r2, #6
 800623a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	f000f800 	.word	0xf000f800

0800626c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d023      	beq.n	80062d6 <HAL_LTDC_IRQHandler+0x6a>
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01e      	beq.n	80062d6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2204      	movs	r2, #4
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2204      	movs	r2, #4
 80062c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f86f 	bl	80063b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d023      	beq.n	8006328 <HAL_LTDC_IRQHandler+0xbc>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01e      	beq.n	8006328 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 0202 	bic.w	r2, r2, #2
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2202      	movs	r2, #2
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006308:	f043 0202 	orr.w	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2204      	movs	r2, #4
 8006316:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f846 	bl	80063b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01b      	beq.n	800636a <HAL_LTDC_IRQHandler+0xfe>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d016      	beq.n	800636a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0201 	bic.w	r2, r2, #1
 800634a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f011 fb77 	bl	8017a58 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <HAL_LTDC_IRQHandler+0x140>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d016      	beq.n	80063ac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0208 	bic.w	r2, r2, #8
 800638c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2208      	movs	r2, #8
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f80e 	bl	80063c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_LTDC_ConfigLayer+0x1a>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e02c      	b.n	8006450 <HAL_LTDC_ConfigLayer+0x74>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2134      	movs	r1, #52	; 0x34
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	4413      	add	r3, r2
 8006412:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	4614      	mov	r4, r2
 800641a:	461d      	mov	r5, r3
 800641c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f849 	bl	80064c8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2201      	movs	r2, #1
 800643c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bdb0      	pop	{r4, r5, r7, pc}

08006458 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_LTDC_ProgramLineEvent+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e023      	b.n	80064b8 <HAL_LTDC_ProgramLineEvent+0x60>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40016800 	.word	0x40016800

080064c8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	0c1b      	lsrs	r3, r3, #16
 80064e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e4:	4413      	add	r3, r2
 80064e6:	041b      	lsls	r3, r3, #16
 80064e8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4413      	add	r3, r2
 80064f6:	3384      	adds	r3, #132	; 0x84
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	4611      	mov	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	01d2      	lsls	r2, r2, #7
 8006504:	440a      	add	r2, r1
 8006506:	3284      	adds	r2, #132	; 0x84
 8006508:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800650c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	0c1b      	lsrs	r3, r3, #16
 800651a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651e:	4413      	add	r3, r2
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	440b      	add	r3, r1
 800652e:	3384      	adds	r3, #132	; 0x84
 8006530:	4619      	mov	r1, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4313      	orrs	r3, r2
 8006536:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006546:	4413      	add	r3, r2
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	01db      	lsls	r3, r3, #7
 8006556:	4413      	add	r3, r2
 8006558:	3384      	adds	r3, #132	; 0x84
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	4611      	mov	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	01d2      	lsls	r2, r2, #7
 8006566:	440a      	add	r2, r1
 8006568:	3284      	adds	r2, #132	; 0x84
 800656a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800656e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800657e:	4413      	add	r3, r2
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	440b      	add	r3, r1
 800658e:	3384      	adds	r3, #132	; 0x84
 8006590:	4619      	mov	r1, r3
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4313      	orrs	r3, r2
 8006596:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	01db      	lsls	r3, r3, #7
 80065a2:	4413      	add	r3, r2
 80065a4:	3384      	adds	r3, #132	; 0x84
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	4611      	mov	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	01d2      	lsls	r2, r2, #7
 80065b2:	440a      	add	r2, r1
 80065b4:	3284      	adds	r2, #132	; 0x84
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	4413      	add	r3, r2
 80065c8:	3384      	adds	r3, #132	; 0x84
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	061b      	lsls	r3, r3, #24
 80065ec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	01db      	lsls	r3, r3, #7
 80065f8:	4413      	add	r3, r2
 80065fa:	3384      	adds	r3, #132	; 0x84
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	01db      	lsls	r3, r3, #7
 8006608:	4413      	add	r3, r2
 800660a:	3384      	adds	r3, #132	; 0x84
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006618:	461a      	mov	r2, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	431a      	orrs	r2, r3
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	01db      	lsls	r3, r3, #7
 800662c:	440b      	add	r3, r1
 800662e:	3384      	adds	r3, #132	; 0x84
 8006630:	4619      	mov	r1, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	01db      	lsls	r3, r3, #7
 8006642:	4413      	add	r3, r2
 8006644:	3384      	adds	r3, #132	; 0x84
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	4611      	mov	r1, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	01d2      	lsls	r2, r2, #7
 8006652:	440a      	add	r2, r1
 8006654:	3284      	adds	r2, #132	; 0x84
 8006656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800665a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	01db      	lsls	r3, r3, #7
 8006666:	4413      	add	r3, r2
 8006668:	3384      	adds	r3, #132	; 0x84
 800666a:	461a      	mov	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	01db      	lsls	r3, r3, #7
 800667c:	4413      	add	r3, r2
 800667e:	3384      	adds	r3, #132	; 0x84
 8006680:	69da      	ldr	r2, [r3, #28]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	440b      	add	r3, r1
 800668e:	3384      	adds	r3, #132	; 0x84
 8006690:	4619      	mov	r1, r3
 8006692:	4b58      	ldr	r3, [pc, #352]	; (80067f4 <LTDC_SetConfig+0x32c>)
 8006694:	4013      	ands	r3, r2
 8006696:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	6809      	ldr	r1, [r1, #0]
 80066a4:	4608      	mov	r0, r1
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	01c9      	lsls	r1, r1, #7
 80066aa:	4401      	add	r1, r0
 80066ac:	3184      	adds	r1, #132	; 0x84
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	01db      	lsls	r3, r3, #7
 80066bc:	4413      	add	r3, r2
 80066be:	3384      	adds	r3, #132	; 0x84
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	4413      	add	r3, r2
 80066ce:	3384      	adds	r3, #132	; 0x84
 80066d0:	461a      	mov	r2, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	01db      	lsls	r3, r3, #7
 80066e0:	4413      	add	r3, r2
 80066e2:	3384      	adds	r3, #132	; 0x84
 80066e4:	461a      	mov	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80066f4:	2304      	movs	r3, #4
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e01b      	b.n	8006732 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d102      	bne.n	8006708 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006702:	2303      	movs	r3, #3
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e014      	b.n	8006732 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b04      	cmp	r3, #4
 800670e:	d00b      	beq.n	8006728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006714:	2b02      	cmp	r3, #2
 8006716:	d007      	beq.n	8006728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800671c:	2b03      	cmp	r3, #3
 800671e:	d003      	beq.n	8006728 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006724:	2b07      	cmp	r3, #7
 8006726:	d102      	bne.n	800672e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006728:	2302      	movs	r3, #2
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e001      	b.n	8006732 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800672e:	2301      	movs	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	01db      	lsls	r3, r3, #7
 800673c:	4413      	add	r3, r2
 800673e:	3384      	adds	r3, #132	; 0x84
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	4611      	mov	r1, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	01d2      	lsls	r2, r2, #7
 800674c:	440a      	add	r2, r1
 800674e:	3284      	adds	r2, #132	; 0x84
 8006750:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	041a      	lsls	r2, r3, #16
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	1acb      	subs	r3, r1, r3
 800676c:	69f9      	ldr	r1, [r7, #28]
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	3303      	adds	r3, #3
 8006774:	68f9      	ldr	r1, [r7, #12]
 8006776:	6809      	ldr	r1, [r1, #0]
 8006778:	4608      	mov	r0, r1
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	01c9      	lsls	r1, r1, #7
 800677e:	4401      	add	r1, r0
 8006780:	3184      	adds	r1, #132	; 0x84
 8006782:	4313      	orrs	r3, r2
 8006784:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	01db      	lsls	r3, r3, #7
 8006790:	4413      	add	r3, r2
 8006792:	3384      	adds	r3, #132	; 0x84
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	440b      	add	r3, r1
 80067a2:	3384      	adds	r3, #132	; 0x84
 80067a4:	4619      	mov	r1, r3
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <LTDC_SetConfig+0x330>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	01db      	lsls	r3, r3, #7
 80067b6:	4413      	add	r3, r2
 80067b8:	3384      	adds	r3, #132	; 0x84
 80067ba:	461a      	mov	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	01db      	lsls	r3, r3, #7
 80067cc:	4413      	add	r3, r2
 80067ce:	3384      	adds	r3, #132	; 0x84
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	4611      	mov	r1, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	01d2      	lsls	r2, r2, #7
 80067dc:	440a      	add	r2, r1
 80067de:	3284      	adds	r2, #132	; 0x84
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6013      	str	r3, [r2, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3724      	adds	r7, #36	; 0x24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	fffff8f8 	.word	0xfffff8f8
 80067f8:	fffff800 	.word	0xfffff800

080067fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680a:	6013      	str	r3, [r2, #0]
}
 800680c:	bf00      	nop
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40007000 	.word	0x40007000

0800681c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	4a22      	ldr	r2, [pc, #136]	; (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006830:	6413      	str	r3, [r2, #64]	; 0x40
 8006832:	4b20      	ldr	r3, [pc, #128]	; (80068b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800683e:	4b1e      	ldr	r3, [pc, #120]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800684a:	f7fc feff 	bl	800364c <HAL_GetTick>
 800684e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006850:	e009      	b.n	8006866 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006852:	f7fc fefb 	bl	800364c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006860:	d901      	bls.n	8006866 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e022      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800686e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006872:	d1ee      	bne.n	8006852 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006874:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a0f      	ldr	r2, [pc, #60]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800687a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7fc fee4 	bl	800364c <HAL_GetTick>
 8006884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006886:	e009      	b.n	800689c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006888:	f7fc fee0 	bl	800364c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006896:	d901      	bls.n	800689c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e007      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800689c:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a8:	d1ee      	bne.n	8006888 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40007000 	.word	0x40007000

080068bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068c4:	f7fc fec2 	bl	800364c <HAL_GetTick>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e067      	b.n	80069a4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10b      	bne.n	80068f8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fc f855 	bl	8002998 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f85e 	bl	80069b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	3b01      	subs	r3, #1
 8006908:	021a      	lsls	r2, r3, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	2120      	movs	r1, #32
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f856 	bl	80069d0 <QSPI_WaitFlagStateUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d135      	bne.n	800699a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_QSPI_Init+0xf0>)
 8006936:	4013      	ands	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6852      	ldr	r2, [r2, #4]
 800693c:	0611      	lsls	r1, r2, #24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d2      	ldr	r2, [r2, #12]
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	69d2      	ldr	r2, [r2, #28]
 8006948:	4311      	orrs	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6a12      	ldr	r2, [r2, #32]
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	430b      	orrs	r3, r1
 8006956:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <HAL_QSPI_Init+0xf4>)
 8006960:	4013      	ands	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6912      	ldr	r2, [r2, #16]
 8006966:	0411      	lsls	r1, r2, #16
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6952      	ldr	r2, [r2, #20]
 800696c:	4311      	orrs	r1, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6992      	ldr	r2, [r2, #24]
 8006972:	4311      	orrs	r1, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	430b      	orrs	r3, r1
 800697a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80069a2:	7afb      	ldrb	r3, [r7, #11]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	00ffff2f 	.word	0x00ffff2f
 80069b0:	ffe0f8fe 	.word	0xffe0f8fe

080069b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069e0:	e01a      	b.n	8006a18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d016      	beq.n	8006a18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ea:	f7fc fe2f 	bl	800364c <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2204      	movs	r2, #4
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e00e      	b.n	8006a36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d1d6      	bne.n	80069e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e291      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8087 	beq.w	8006b72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a64:	4b96      	ldr	r3, [pc, #600]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d00c      	beq.n	8006a8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a70:	4b93      	ldr	r3, [pc, #588]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d112      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62>
 8006a7c:	4b90      	ldr	r3, [pc, #576]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a88:	d10b      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8a:	4b8d      	ldr	r3, [pc, #564]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d06c      	beq.n	8006b70 <HAL_RCC_OscConfig+0x130>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d168      	bne.n	8006b70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e26b      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aaa:	d106      	bne.n	8006aba <HAL_RCC_OscConfig+0x7a>
 8006aac:	4b84      	ldr	r3, [pc, #528]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a83      	ldr	r2, [pc, #524]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	e02e      	b.n	8006b18 <HAL_RCC_OscConfig+0xd8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0x9c>
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7e      	ldr	r2, [pc, #504]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b7c      	ldr	r3, [pc, #496]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7b      	ldr	r2, [pc, #492]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e01d      	b.n	8006b18 <HAL_RCC_OscConfig+0xd8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0xc0>
 8006ae6:	4b76      	ldr	r3, [pc, #472]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a75      	ldr	r2, [pc, #468]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b73      	ldr	r3, [pc, #460]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a72      	ldr	r2, [pc, #456]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e00b      	b.n	8006b18 <HAL_RCC_OscConfig+0xd8>
 8006b00:	4b6f      	ldr	r3, [pc, #444]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a6e      	ldr	r2, [pc, #440]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4b6c      	ldr	r3, [pc, #432]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a6b      	ldr	r2, [pc, #428]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d013      	beq.n	8006b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fc fd94 	bl	800364c <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b28:	f7fc fd90 	bl	800364c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b64      	cmp	r3, #100	; 0x64
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e21f      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b61      	ldr	r3, [pc, #388]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0xe8>
 8006b46:	e014      	b.n	8006b72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b48:	f7fc fd80 	bl	800364c <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fc fd7c 	bl	800364c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	; 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e20b      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	4b57      	ldr	r3, [pc, #348]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0x110>
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d069      	beq.n	8006c52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b7e:	4b50      	ldr	r3, [pc, #320]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d11c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x190>
 8006b96:	4b4a      	ldr	r3, [pc, #296]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d116      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_RCC_OscConfig+0x17a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e1df      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bba:	4b41      	ldr	r3, [pc, #260]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	493d      	ldr	r1, [pc, #244]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bce:	e040      	b.n	8006c52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d023      	beq.n	8006c20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd8:	4b39      	ldr	r3, [pc, #228]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a38      	ldr	r2, [pc, #224]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fc fd32 	bl	800364c <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bec:	f7fc fd2e 	bl	800364c <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e1bd      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfe:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0a:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4929      	ldr	r1, [pc, #164]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
 8006c1e:	e018      	b.n	8006c52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c20:	4b27      	ldr	r3, [pc, #156]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2c:	f7fc fd0e 	bl	800364c <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c34:	f7fc fd0a 	bl	800364c <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e199      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d038      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d019      	beq.n	8006c9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c72:	f7fc fceb 	bl	800364c <HAL_GetTick>
 8006c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c7a:	f7fc fce7 	bl	800364c <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e176      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8c:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0f0      	beq.n	8006c7a <HAL_RCC_OscConfig+0x23a>
 8006c98:	e01a      	b.n	8006cd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9e:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <HAL_RCC_OscConfig+0x280>)
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca6:	f7fc fcd1 	bl	800364c <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fc fccd 	bl	800364c <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d903      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e15c      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
 8006cc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc4:	4b91      	ldr	r3, [pc, #580]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1ee      	bne.n	8006cae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80a4 	beq.w	8006e26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cde:	4b8b      	ldr	r3, [pc, #556]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10d      	bne.n	8006d06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	4b88      	ldr	r3, [pc, #544]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	4a87      	ldr	r2, [pc, #540]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf6:	4b85      	ldr	r3, [pc, #532]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	60bb      	str	r3, [r7, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d06:	4b82      	ldr	r3, [pc, #520]	; (8006f10 <HAL_RCC_OscConfig+0x4d0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d118      	bne.n	8006d44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d12:	4b7f      	ldr	r3, [pc, #508]	; (8006f10 <HAL_RCC_OscConfig+0x4d0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a7e      	ldr	r2, [pc, #504]	; (8006f10 <HAL_RCC_OscConfig+0x4d0>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d1e:	f7fc fc95 	bl	800364c <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d26:	f7fc fc91 	bl	800364c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b64      	cmp	r3, #100	; 0x64
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e120      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d38:	4b75      	ldr	r3, [pc, #468]	; (8006f10 <HAL_RCC_OscConfig+0x4d0>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f0      	beq.n	8006d26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCC_OscConfig+0x31a>
 8006d4c:	4b6f      	ldr	r3, [pc, #444]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	4a6e      	ldr	r2, [pc, #440]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d52:	f043 0301 	orr.w	r3, r3, #1
 8006d56:	6713      	str	r3, [r2, #112]	; 0x70
 8006d58:	e02d      	b.n	8006db6 <HAL_RCC_OscConfig+0x376>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <HAL_RCC_OscConfig+0x33c>
 8006d62:	4b6a      	ldr	r3, [pc, #424]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a69      	ldr	r2, [pc, #420]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6e:	4b67      	ldr	r3, [pc, #412]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	4a66      	ldr	r2, [pc, #408]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	f023 0304 	bic.w	r3, r3, #4
 8006d78:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7a:	e01c      	b.n	8006db6 <HAL_RCC_OscConfig+0x376>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b05      	cmp	r3, #5
 8006d82:	d10c      	bne.n	8006d9e <HAL_RCC_OscConfig+0x35e>
 8006d84:	4b61      	ldr	r3, [pc, #388]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	4a60      	ldr	r2, [pc, #384]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	f043 0304 	orr.w	r3, r3, #4
 8006d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d90:	4b5e      	ldr	r3, [pc, #376]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	4a5d      	ldr	r2, [pc, #372]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006d96:	f043 0301 	orr.w	r3, r3, #1
 8006d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9c:	e00b      	b.n	8006db6 <HAL_RCC_OscConfig+0x376>
 8006d9e:	4b5b      	ldr	r3, [pc, #364]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a5a      	ldr	r2, [pc, #360]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
 8006daa:	4b58      	ldr	r3, [pc, #352]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	4a57      	ldr	r2, [pc, #348]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006db0:	f023 0304 	bic.w	r3, r3, #4
 8006db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d015      	beq.n	8006dea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbe:	f7fc fc45 	bl	800364c <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc6:	f7fc fc41 	bl	800364c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e0ce      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ddc:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0ee      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x386>
 8006de8:	e014      	b.n	8006e14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dea:	f7fc fc2f 	bl	800364c <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df0:	e00a      	b.n	8006e08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df2:	f7fc fc2b 	bl	800364c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e0b8      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e08:	4b40      	ldr	r3, [pc, #256]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1ee      	bne.n	8006df2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d105      	bne.n	8006e26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e1a:	4b3c      	ldr	r3, [pc, #240]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 80a4 	beq.w	8006f78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e30:	4b36      	ldr	r3, [pc, #216]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 030c 	and.w	r3, r3, #12
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d06b      	beq.n	8006f14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d149      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e44:	4b31      	ldr	r3, [pc, #196]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e50:	f7fc fbfc 	bl	800364c <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e58:	f7fc fbf8 	bl	800364c <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e087      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	4b28      	ldr	r3, [pc, #160]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	019b      	lsls	r3, r3, #6
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	061b      	lsls	r3, r3, #24
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ea2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fc fbcc 	bl	800364c <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb8:	f7fc fbc8 	bl	800364c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e057      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x478>
 8006ed6:	e04f      	b.n	8006f78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a0b      	ldr	r2, [pc, #44]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc fbb2 	bl	800364c <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fc fbae 	bl	800364c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e03d      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <HAL_RCC_OscConfig+0x4cc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x4ac>
 8006f0a:	e035      	b.n	8006f78 <HAL_RCC_OscConfig+0x538>
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <HAL_RCC_OscConfig+0x544>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d028      	beq.n	8006f74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d121      	bne.n	8006f74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d11a      	bne.n	8006f74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f44:	4013      	ands	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d111      	bne.n	8006f74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d107      	bne.n	8006f74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800

08006f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0d0      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa0:	4b6a      	ldr	r3, [pc, #424]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d910      	bls.n	8006fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fae:	4b67      	ldr	r3, [pc, #412]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f023 020f 	bic.w	r2, r3, #15
 8006fb6:	4965      	ldr	r1, [pc, #404]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fbe:	4b63      	ldr	r3, [pc, #396]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0b8      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d020      	beq.n	800701e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fe8:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	4a58      	ldr	r2, [pc, #352]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8006fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ff2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007000:	4b53      	ldr	r3, [pc, #332]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4a52      	ldr	r2, [pc, #328]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800700a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800700c:	4b50      	ldr	r3, [pc, #320]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	494d      	ldr	r1, [pc, #308]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d040      	beq.n	80070ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007032:	4b47      	ldr	r3, [pc, #284]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d115      	bne.n	800706a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e07f      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e073      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800705a:	4b3d      	ldr	r3, [pc, #244]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e06b      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800706a:	4b39      	ldr	r3, [pc, #228]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f023 0203 	bic.w	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4936      	ldr	r1, [pc, #216]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007078:	4313      	orrs	r3, r2
 800707a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707c:	f7fc fae6 	bl	800364c <HAL_GetTick>
 8007080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007082:	e00a      	b.n	800709a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007084:	f7fc fae2 	bl	800364c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e053      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709a:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 020c 	and.w	r2, r3, #12
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d1eb      	bne.n	8007084 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070ac:	4b27      	ldr	r3, [pc, #156]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d210      	bcs.n	80070dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f023 020f 	bic.w	r2, r3, #15
 80070c2:	4922      	ldr	r1, [pc, #136]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d001      	beq.n	80070dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e032      	b.n	8007142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e8:	4b19      	ldr	r3, [pc, #100]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4916      	ldr	r1, [pc, #88]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	490e      	ldr	r1, [pc, #56]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800711a:	f000 f821 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 800711e:	4601      	mov	r1, r0
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 030f 	and.w	r3, r3, #15
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <HAL_RCC_ClockConfig+0x1cc>)
 800712c:	5cd3      	ldrb	r3, [r2, r3]
 800712e:	fa21 f303 	lsr.w	r3, r1, r3
 8007132:	4a09      	ldr	r2, [pc, #36]	; (8007158 <HAL_RCC_ClockConfig+0x1d0>)
 8007134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <HAL_RCC_ClockConfig+0x1d4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f7fc f8d0 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40023c00 	.word	0x40023c00
 8007150:	40023800 	.word	0x40023800
 8007154:	080296e0 	.word	0x080296e0
 8007158:	20000018 	.word	0x20000018
 800715c:	2000001c 	.word	0x2000001c

08007160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	2300      	movs	r3, #0
 8007170:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007176:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b04      	cmp	r3, #4
 8007180:	d007      	beq.n	8007192 <HAL_RCC_GetSysClockFreq+0x32>
 8007182:	2b08      	cmp	r3, #8
 8007184:	d008      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0x38>
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 808d 	bne.w	80072a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800718c:	4b4b      	ldr	r3, [pc, #300]	; (80072bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800718e:	60bb      	str	r3, [r7, #8]
      break;
 8007190:	e08c      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007192:	4b4b      	ldr	r3, [pc, #300]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007194:	60bb      	str	r3, [r7, #8]
      break;
 8007196:	e089      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007198:	4b47      	ldr	r3, [pc, #284]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071a2:	4b45      	ldr	r3, [pc, #276]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d023      	beq.n	80071f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ae:	4b42      	ldr	r3, [pc, #264]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	099b      	lsrs	r3, r3, #6
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	ea03 0501 	and.w	r5, r3, r1
 80071c4:	ea04 0602 	and.w	r6, r4, r2
 80071c8:	4a3d      	ldr	r2, [pc, #244]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80071ca:	fb02 f106 	mul.w	r1, r2, r6
 80071ce:	2200      	movs	r2, #0
 80071d0:	fb02 f205 	mul.w	r2, r2, r5
 80071d4:	440a      	add	r2, r1
 80071d6:	493a      	ldr	r1, [pc, #232]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80071d8:	fba5 0101 	umull	r0, r1, r5, r1
 80071dc:	1853      	adds	r3, r2, r1
 80071de:	4619      	mov	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 0400 	mov.w	r4, #0
 80071e6:	461a      	mov	r2, r3
 80071e8:	4623      	mov	r3, r4
 80071ea:	f7f9 faf5 	bl	80007d8 <__aeabi_uldivmod>
 80071ee:	4603      	mov	r3, r0
 80071f0:	460c      	mov	r4, r1
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e049      	b.n	800728a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f6:	4b30      	ldr	r3, [pc, #192]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	099b      	lsrs	r3, r3, #6
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	ea03 0501 	and.w	r5, r3, r1
 800720c:	ea04 0602 	and.w	r6, r4, r2
 8007210:	4629      	mov	r1, r5
 8007212:	4632      	mov	r2, r6
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	0154      	lsls	r4, r2, #5
 800721e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007222:	014b      	lsls	r3, r1, #5
 8007224:	4619      	mov	r1, r3
 8007226:	4622      	mov	r2, r4
 8007228:	1b49      	subs	r1, r1, r5
 800722a:	eb62 0206 	sbc.w	r2, r2, r6
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f04f 0400 	mov.w	r4, #0
 8007236:	0194      	lsls	r4, r2, #6
 8007238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800723c:	018b      	lsls	r3, r1, #6
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	eb64 0402 	sbc.w	r4, r4, r2
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	00e2      	lsls	r2, r4, #3
 800724e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007252:	00d9      	lsls	r1, r3, #3
 8007254:	460b      	mov	r3, r1
 8007256:	4614      	mov	r4, r2
 8007258:	195b      	adds	r3, r3, r5
 800725a:	eb44 0406 	adc.w	r4, r4, r6
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	02a2      	lsls	r2, r4, #10
 8007268:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800726c:	0299      	lsls	r1, r3, #10
 800726e:	460b      	mov	r3, r1
 8007270:	4614      	mov	r4, r2
 8007272:	4618      	mov	r0, r3
 8007274:	4621      	mov	r1, r4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f04f 0400 	mov.w	r4, #0
 800727c:	461a      	mov	r2, r3
 800727e:	4623      	mov	r3, r4
 8007280:	f7f9 faaa 	bl	80007d8 <__aeabi_uldivmod>
 8007284:	4603      	mov	r3, r0
 8007286:	460c      	mov	r4, r1
 8007288:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	3301      	adds	r3, #1
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	60bb      	str	r3, [r7, #8]
      break;
 80072a4:	e002      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80072a8:	60bb      	str	r3, [r7, #8]
      break;
 80072aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ac:	68bb      	ldr	r3, [r7, #8]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800
 80072bc:	00f42400 	.word	0x00f42400
 80072c0:	017d7840 	.word	0x017d7840

080072c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000018 	.word	0x20000018

080072dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072e0:	f7ff fff0 	bl	80072c4 <HAL_RCC_GetHCLKFreq>
 80072e4:	4601      	mov	r1, r0
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	0a9b      	lsrs	r3, r3, #10
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4a03      	ldr	r2, [pc, #12]	; (8007300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f2:	5cd3      	ldrb	r3, [r2, r3]
 80072f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40023800 	.word	0x40023800
 8007300:	080296f0 	.word	0x080296f0

08007304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007308:	f7ff ffdc 	bl	80072c4 <HAL_RCC_GetHCLKFreq>
 800730c:	4601      	mov	r1, r0
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	0b5b      	lsrs	r3, r3, #13
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4a03      	ldr	r2, [pc, #12]	; (8007328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800731a:	5cd3      	ldrb	r3, [r2, r3]
 800731c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40023800 	.word	0x40023800
 8007328:	080296f0 	.word	0x080296f0

0800732c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	220f      	movs	r2, #15
 800733a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800733c:	4b12      	ldr	r3, [pc, #72]	; (8007388 <HAL_RCC_GetClockConfig+0x5c>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0203 	and.w	r2, r3, #3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <HAL_RCC_GetClockConfig+0x5c>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <HAL_RCC_GetClockConfig+0x5c>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007360:	4b09      	ldr	r3, [pc, #36]	; (8007388 <HAL_RCC_GetClockConfig+0x5c>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	08db      	lsrs	r3, r3, #3
 8007366:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RCC_GetClockConfig+0x60>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800
 800738c:	40023c00 	.word	0x40023c00

08007390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073b8:	4b69      	ldr	r3, [pc, #420]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4a68      	ldr	r2, [pc, #416]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073c2:	6093      	str	r3, [r2, #8]
 80073c4:	4b66      	ldr	r3, [pc, #408]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	4964      	ldr	r1, [pc, #400]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073ea:	4b5d      	ldr	r3, [pc, #372]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	4959      	ldr	r1, [pc, #356]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007426:	4b4e      	ldr	r3, [pc, #312]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800742c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	494a      	ldr	r1, [pc, #296]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007444:	d101      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007446:	2301      	movs	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007462:	2301      	movs	r3, #1
 8007464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 808b 	beq.w	800758a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007474:	4b3a      	ldr	r3, [pc, #232]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	4a39      	ldr	r2, [pc, #228]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747e:	6413      	str	r3, [r2, #64]	; 0x40
 8007480:	4b37      	ldr	r3, [pc, #220]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800748c:	4b35      	ldr	r3, [pc, #212]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a34      	ldr	r2, [pc, #208]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007498:	f7fc f8d8 	bl	800364c <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a0:	f7fc f8d4 	bl	800364c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e355      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074be:	4b28      	ldr	r3, [pc, #160]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d035      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d02e      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074dc:	4b20      	ldr	r3, [pc, #128]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e6:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074f2:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074fe:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d114      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fc f89c 	bl	800364c <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007516:	e00a      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fc f898 	bl	800364c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e317      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ee      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007546:	d111      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007556:	400b      	ands	r3, r1
 8007558:	4901      	ldr	r1, [pc, #4]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
 800755e:	e00b      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007560:	40023800 	.word	0x40023800
 8007564:	40007000 	.word	0x40007000
 8007568:	0ffffcff 	.word	0x0ffffcff
 800756c:	4bb0      	ldr	r3, [pc, #704]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4aaf      	ldr	r2, [pc, #700]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007576:	6093      	str	r3, [r2, #8]
 8007578:	4bad      	ldr	r3, [pc, #692]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800757a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007584:	49aa      	ldr	r1, [pc, #680]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007586:	4313      	orrs	r3, r2
 8007588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007596:	4ba6      	ldr	r3, [pc, #664]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759c:	4aa4      	ldr	r2, [pc, #656]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800759e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075a6:	4ba2      	ldr	r3, [pc, #648]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	499f      	ldr	r1, [pc, #636]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c4:	4b9a      	ldr	r3, [pc, #616]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d2:	4997      	ldr	r1, [pc, #604]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075e6:	4b92      	ldr	r3, [pc, #584]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f4:	498e      	ldr	r1, [pc, #568]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007608:	4b89      	ldr	r3, [pc, #548]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007616:	4986      	ldr	r1, [pc, #536]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800762a:	4b81      	ldr	r3, [pc, #516]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	497d      	ldr	r1, [pc, #500]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800764c:	4b78      	ldr	r3, [pc, #480]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f023 0203 	bic.w	r2, r3, #3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	4975      	ldr	r1, [pc, #468]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800766e:	4b70      	ldr	r3, [pc, #448]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	f023 020c 	bic.w	r2, r3, #12
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767c:	496c      	ldr	r1, [pc, #432]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007690:	4b67      	ldr	r3, [pc, #412]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769e:	4964      	ldr	r1, [pc, #400]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076b2:	4b5f      	ldr	r3, [pc, #380]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c0:	495b      	ldr	r1, [pc, #364]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076d4:	4b56      	ldr	r3, [pc, #344]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	4953      	ldr	r1, [pc, #332]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076f6:	4b4e      	ldr	r3, [pc, #312]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	494a      	ldr	r1, [pc, #296]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007718:	4b45      	ldr	r3, [pc, #276]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	4942      	ldr	r1, [pc, #264]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800773a:	4b3d      	ldr	r3, [pc, #244]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007748:	4939      	ldr	r1, [pc, #228]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800775c:	4b34      	ldr	r3, [pc, #208]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776a:	4931      	ldr	r1, [pc, #196]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d011      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800777e:	4b2c      	ldr	r3, [pc, #176]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778c:	4928      	ldr	r1, [pc, #160]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800779c:	d101      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077ae:	2301      	movs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077be:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077cc:	4918      	ldr	r1, [pc, #96]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077e0:	4b13      	ldr	r3, [pc, #76]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f0:	490f      	ldr	r1, [pc, #60]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d005      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007806:	f040 80d8 	bne.w	80079ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a08      	ldr	r2, [pc, #32]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007816:	f7fb ff19 	bl	800364c <HAL_GetTick>
 800781a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800781c:	e00a      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800781e:	f7fb ff15 	bl	800364c <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b64      	cmp	r3, #100	; 0x64
 800782a:	d903      	bls.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e196      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007830:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007834:	4b6c      	ldr	r3, [pc, #432]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1ee      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d021      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11d      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007854:	4b64      	ldr	r3, [pc, #400]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007862:	4b61      	ldr	r3, [pc, #388]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	019a      	lsls	r2, r3, #6
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	071b      	lsls	r3, r3, #28
 8007888:	4957      	ldr	r1, [pc, #348]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a4:	d00a      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d02e      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ba:	d129      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078bc:	4b4a      	ldr	r3, [pc, #296]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078ca:	4b47      	ldr	r3, [pc, #284]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d0:	0f1b      	lsrs	r3, r3, #28
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	019a      	lsls	r2, r3, #6
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	071b      	lsls	r3, r3, #28
 80078f0:	493d      	ldr	r1, [pc, #244]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078f8:	4b3b      	ldr	r3, [pc, #236]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80078fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fe:	f023 021f 	bic.w	r2, r3, #31
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	3b01      	subs	r3, #1
 8007908:	4937      	ldr	r1, [pc, #220]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01d      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800791c:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	0e1b      	lsrs	r3, r3, #24
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800792a:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800792c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007930:	0f1b      	lsrs	r3, r3, #28
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	019a      	lsls	r2, r3, #6
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	431a      	orrs	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	061b      	lsls	r3, r3, #24
 800794a:	431a      	orrs	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	071b      	lsls	r3, r3, #28
 8007950:	4925      	ldr	r1, [pc, #148]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d011      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	019a      	lsls	r2, r3, #6
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	061b      	lsls	r3, r3, #24
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	071b      	lsls	r3, r3, #28
 8007980:	4919      	ldr	r1, [pc, #100]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007982:	4313      	orrs	r3, r2
 8007984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007988:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800798e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007994:	f7fb fe5a 	bl	800364c <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800799a:	e008      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800799c:	f7fb fe56 	bl	800364c <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	; 0x64
 80079a8:	d901      	bls.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0d7      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	f040 80cd 	bne.w	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80079c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fb fe3d 	bl	800364c <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d4:	e00a      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079d6:	f7fb fe39 	bl	800364c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b64      	cmp	r3, #100	; 0x64
 80079e2:	d903      	bls.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e0ba      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80079e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079ec:	4b5e      	ldr	r3, [pc, #376]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d0ed      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02e      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d12a      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a22:	4b51      	ldr	r3, [pc, #324]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a30:	4b4d      	ldr	r3, [pc, #308]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a36:	0f1b      	lsrs	r3, r3, #28
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	019a      	lsls	r2, r3, #6
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	4944      	ldr	r1, [pc, #272]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a5e:	4b42      	ldr	r3, [pc, #264]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	493d      	ldr	r1, [pc, #244]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d022      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a8c:	d11d      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a8e:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a9c:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa2:	0f1b      	lsrs	r3, r3, #28
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	019a      	lsls	r2, r3, #6
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	071b      	lsls	r3, r3, #28
 8007ac2:	4929      	ldr	r1, [pc, #164]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d028      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	0e1b      	lsrs	r3, r3, #24
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	019a      	lsls	r2, r3, #6
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	061b      	lsls	r3, r3, #24
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	4917      	ldr	r1, [pc, #92]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4911      	ldr	r1, [pc, #68]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b34:	f7fb fd8a 	bl	800364c <HAL_GetTick>
 8007b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b3c:	f7fb fd86 	bl	800364c <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b64      	cmp	r3, #100	; 0x64
 8007b48:	d901      	bls.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e007      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5a:	d1ef      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800

08007b6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b8a:	f040 8086 	bne.w	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007b8e:	4b8d      	ldr	r3, [pc, #564]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba4:	d03e      	beq.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007baa:	d073      	beq.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d000      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007bb0:	e074      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bb2:	4b84      	ldr	r3, [pc, #528]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d108      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bbe:	4b81      	ldr	r3, [pc, #516]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc6:	4a80      	ldr	r2, [pc, #512]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e007      	b.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007bd0:	4b7c      	ldr	r3, [pc, #496]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd8:	4a7c      	ldr	r2, [pc, #496]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bde:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007be0:	4b78      	ldr	r3, [pc, #480]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007bee:	4b75      	ldr	r3, [pc, #468]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	099b      	lsrs	r3, r3, #6
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	fb02 f203 	mul.w	r2, r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007c08:	4b6e      	ldr	r3, [pc, #440]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	f003 031f 	and.w	r3, r3, #31
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]
        break;
 8007c22:	e03b      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c24:	4b67      	ldr	r3, [pc, #412]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d108      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c30:	4b64      	ldr	r3, [pc, #400]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c38:	4a63      	ldr	r2, [pc, #396]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	e007      	b.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c42:	4b60      	ldr	r3, [pc, #384]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c4a:	4a60      	ldr	r2, [pc, #384]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007c52:	4b5c      	ldr	r3, [pc, #368]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007c60:	4b58      	ldr	r3, [pc, #352]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	fb02 f203 	mul.w	r2, r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007c7a:	4b52      	ldr	r3, [pc, #328]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]
        break;
 8007c92:	e003      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c94:	4b4e      	ldr	r3, [pc, #312]	; (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007c96:	617b      	str	r3, [r7, #20]
        break;
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007c9a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca2:	f040 8086 	bne.w	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007cb4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cbc:	d03e      	beq.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007cbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc2:	d073      	beq.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d000      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007cc8:	e074      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007cca:	4b3e      	ldr	r3, [pc, #248]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d108      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007cd6:	4b3b      	ldr	r3, [pc, #236]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cde:	4a3a      	ldr	r2, [pc, #232]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	e007      	b.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ce8:	4b36      	ldr	r3, [pc, #216]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cf0:	4a36      	ldr	r2, [pc, #216]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007cf8:	4b32      	ldr	r3, [pc, #200]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfe:	0e1b      	lsrs	r3, r3, #24
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007d06:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	099b      	lsrs	r3, r3, #6
 8007d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	fb02 f203 	mul.w	r2, r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007d20:	4b28      	ldr	r3, [pc, #160]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]
        break;
 8007d3a:	e03b      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d3c:	4b21      	ldr	r3, [pc, #132]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d108      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	e007      	b.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d62:	4a1a      	ldr	r2, [pc, #104]	; (8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007d6a:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d70:	0e1b      	lsrs	r3, r3, #24
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007d78:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	fb02 f203 	mul.w	r2, r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
        break;
 8007daa:	e003      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dac:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007dae:	617b      	str	r3, [r7, #20]
        break;
 8007db0:	e000      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007db2:	bf00      	nop

  return frequency;
 8007db4:	697b      	ldr	r3, [r7, #20]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	00f42400 	.word	0x00f42400
 8007dcc:	017d7840 	.word	0x017d7840
 8007dd0:	00bb8000 	.word	0x00bb8000

08007dd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e06b      	b.n	8007ebe <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7f5b      	ldrb	r3, [r3, #29]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fa fe5e 	bl	8002ab8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	22ca      	movs	r2, #202	; 0xca
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2253      	movs	r2, #83	; 0x53
 8007e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb00 	bl	8008418 <RTC_EnterInitMode>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	22ff      	movs	r2, #255	; 0xff
 8007e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2204      	movs	r2, #4
 8007e2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e046      	b.n	8007ebe <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6899      	ldr	r1, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b23      	ldr	r3, [pc, #140]	; (8007ec8 <HAL_RTC_Init+0xf4>)
 8007e3c:	400b      	ands	r3, r1
 8007e3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6899      	ldr	r1, [r3, #8]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	68d2      	ldr	r2, [r2, #12]
 8007e66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6919      	ldr	r1, [r3, #16]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	041a      	lsls	r2, r3, #16
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e8a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0208 	bic.w	r2, r2, #8
 8007e9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699a      	ldr	r2, [r3, #24]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	22ff      	movs	r2, #255	; 0xff
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	ff8fffbf 	.word	0xff8fffbf

08007ecc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	7f1b      	ldrb	r3, [r3, #28]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RTC_SetTime+0x1c>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e0a8      	b.n	800803a <HAL_RTC_SetTime+0x16e>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d126      	bne.n	8007f48 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 faac 	bl	8008470 <RTC_ByteToBcd2>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 faa5 	bl	8008470 <RTC_ByteToBcd2>
 8007f26:	4603      	mov	r3, r0
 8007f28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	789b      	ldrb	r3, [r3, #2]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fa9d 	bl	8008470 <RTC_ByteToBcd2>
 8007f36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	7b1b      	ldrb	r3, [r3, #12]
 8007f40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e018      	b.n	8007f7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	7b1b      	ldrb	r3, [r3, #12]
 8007f74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	22ca      	movs	r2, #202	; 0xca
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2253      	movs	r2, #83	; 0x53
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f000 fa44 	bl	8008418 <RTC_EnterInitMode>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	22ff      	movs	r2, #255	; 0xff
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e045      	b.n	800803a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	4b23      	ldr	r3, [pc, #140]	; (8008044 <HAL_RTC_SetTime+0x178>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fc8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6899      	ldr	r1, [r3, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68da      	ldr	r2, [r3, #12]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d111      	bne.n	8008024 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 f9e1 	bl	80083c8 <HAL_RTC_WaitForSynchro>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	22ff      	movs	r2, #255	; 0xff
 8008012:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2204      	movs	r2, #4
 8008018:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e00a      	b.n	800803a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008038:	2300      	movs	r3, #0
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}
 8008042:	bf00      	nop
 8008044:	007f7f7f 	.word	0x007f7f7f

08008048 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	7f1b      	ldrb	r3, [r3, #28]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_RTC_SetDate+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e092      	b.n	800818a <HAL_RTC_SetDate+0x142>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2202      	movs	r2, #2
 800806e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10e      	bne.n	8008094 <HAL_RTC_SetDate+0x4c>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	f023 0310 	bic.w	r3, r3, #16
 800808a:	b2db      	uxtb	r3, r3
 800808c:	330a      	adds	r3, #10
 800808e:	b2da      	uxtb	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d11c      	bne.n	80080d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f9e6 	bl	8008470 <RTC_ByteToBcd2>
 80080a4:	4603      	mov	r3, r0
 80080a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f9df 	bl	8008470 <RTC_ByteToBcd2>
 80080b2:	4603      	mov	r3, r0
 80080b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f9d7 	bl	8008470 <RTC_ByteToBcd2>
 80080c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80080c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	e00e      	b.n	80080f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	78db      	ldrb	r3, [r3, #3]
 80080d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80080e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	22ca      	movs	r2, #202	; 0xca
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2253      	movs	r2, #83	; 0x53
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f988 	bl	8008418 <RTC_EnterInitMode>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	22ff      	movs	r2, #255	; 0xff
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2204      	movs	r2, #4
 800811a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e031      	b.n	800818a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	6979      	ldr	r1, [r7, #20]
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <HAL_RTC_SetDate+0x14c>)
 800812e:	400b      	ands	r3, r1
 8008130:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008140:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b00      	cmp	r3, #0
 800814e:	d111      	bne.n	8008174 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 f939 	bl	80083c8 <HAL_RTC_WaitForSynchro>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	22ff      	movs	r2, #255	; 0xff
 8008162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2204      	movs	r2, #4
 8008168:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e00a      	b.n	800818a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	22ff      	movs	r2, #255	; 0xff
 800817a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008188:	2300      	movs	r3, #0
  }
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}
 8008192:	bf00      	nop
 8008194:	00ffff3f 	.word	0x00ffff3f

08008198 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008198:	b590      	push	{r4, r7, lr}
 800819a:	b089      	sub	sp, #36	; 0x24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	7f1b      	ldrb	r3, [r3, #28]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_RTC_SetAlarm+0x24>
 80081b8:	2302      	movs	r3, #2
 80081ba:	e101      	b.n	80083c0 <HAL_RTC_SetAlarm+0x228>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2202      	movs	r2, #2
 80081c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d137      	bne.n	800823e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d102      	bne.n	80081e2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2200      	movs	r2, #0
 80081e0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f942 	bl	8008470 <RTC_ByteToBcd2>
 80081ec:	4603      	mov	r3, r0
 80081ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f93b 	bl	8008470 <RTC_ByteToBcd2>
 80081fa:	4603      	mov	r3, r0
 80081fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80081fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 f933 	bl	8008470 <RTC_ByteToBcd2>
 800820a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800820c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	7b1b      	ldrb	r3, [r3, #12]
 8008214:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008216:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008220:	4618      	mov	r0, r3
 8008222:	f000 f925 	bl	8008470 <RTC_ByteToBcd2>
 8008226:	4603      	mov	r3, r0
 8008228:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800822a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008232:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008238:	4313      	orrs	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e023      	b.n	8008286 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800825e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008264:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7b1b      	ldrb	r3, [r3, #12]
 800826a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800826c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008274:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008276:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800827c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008282:	4313      	orrs	r3, r2
 8008284:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	22ca      	movs	r2, #202	; 0xca
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2253      	movs	r2, #83	; 0x53
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082aa:	d13f      	bne.n	800832c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082cc:	f7fb f9be 	bl	800364c <HAL_GetTick>
 80082d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082d2:	e013      	b.n	80082fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80082d4:	f7fb f9ba 	bl	800364c <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e2:	d90b      	bls.n	80082fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	22ff      	movs	r2, #255	; 0xff
 80082ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2203      	movs	r2, #3
 80082f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e061      	b.n	80083c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0e4      	beq.n	80082d4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008328:	609a      	str	r2, [r3, #8]
 800832a:	e03e      	b.n	80083aa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800833a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800834c:	f7fb f97e 	bl	800364c <HAL_GetTick>
 8008350:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008352:	e013      	b.n	800837c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008354:	f7fb f97a 	bl	800364c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008362:	d90b      	bls.n	800837c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	22ff      	movs	r2, #255	; 0xff
 800836a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2203      	movs	r2, #3
 8008370:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e021      	b.n	80083c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0e4      	beq.n	8008354 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3724      	adds	r7, #36	; 0x24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd90      	pop	{r4, r7, pc}

080083c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083e4:	f7fb f932 	bl	800364c <HAL_GetTick>
 80083e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083ea:	e009      	b.n	8008400 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083ec:	f7fb f92e 	bl	800364c <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083fa:	d901      	bls.n	8008400 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e007      	b.n	8008410 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ee      	beq.n	80083ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d119      	bne.n	8008466 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800843c:	f7fb f906 	bl	800364c <HAL_GetTick>
 8008440:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008442:	e009      	b.n	8008458 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008444:	f7fb f902 	bl	800364c <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008452:	d901      	bls.n	8008458 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e007      	b.n	8008468 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0ee      	beq.n	8008444 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800847e:	e005      	b.n	800848c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3301      	adds	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	3b0a      	subs	r3, #10
 800848a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	2b09      	cmp	r3, #9
 8008490:	d8f6      	bhi.n	8008480 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	b2da      	uxtb	r2, r3
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	4313      	orrs	r3, r2
 800849e:	b2db      	uxtb	r3, r3
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	7f1b      	ldrb	r3, [r3, #28]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e03e      	b.n	8008546 <HAL_RTCEx_SetTimeStamp+0x9a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2202      	movs	r2, #2
 80084d2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80084dc:	4013      	ands	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	22ca      	movs	r2, #202	; 0xca
 80084ee:	625a      	str	r2, [r3, #36]	; 0x24
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2253      	movs	r2, #83	; 0x53
 80084f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0206 	bic.w	r2, r2, #6
 8008506:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	430a      	orrs	r2, r1
 8008516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800852e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	22ff      	movs	r2, #255	; 0xff
 8008536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	fffff7f7 	.word	0xfffff7f7

08008558 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e149      	b.n	800880a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fa fe3e 	bl	800320c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f94f 	bl	800883c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d007      	beq.n	80085b6 <HAL_SAI_Init+0x5e>
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d302      	bcc.n	80085b0 <HAL_SAI_Init+0x58>
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d006      	beq.n	80085bc <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80085ae:	e008      	b.n	80085c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]
      break;
 80085b4:	e005      	b.n	80085c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80085b6:	2310      	movs	r3, #16
 80085b8:	61fb      	str	r3, [r7, #28]
      break;
 80085ba:	e002      	b.n	80085c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80085bc:	2320      	movs	r3, #32
 80085be:	61fb      	str	r3, [r7, #28]
      break;
 80085c0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d81d      	bhi.n	8008606 <HAL_SAI_Init+0xae>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <HAL_SAI_Init+0x78>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e1 	.word	0x080085e1
 80085d4:	080085e7 	.word	0x080085e7
 80085d8:	080085ef 	.word	0x080085ef
 80085dc:	080085f7 	.word	0x080085f7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
      }
      break;
 80085e4:	e010      	b.n	8008608 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80085e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80085ec:	e00c      	b.n	8008608 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80085ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085f2:	617b      	str	r3, [r7, #20]
      }
      break;
 80085f4:	e008      	b.n	8008608 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80085f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085fa:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f043 0301 	orr.w	r3, r3, #1
 8008602:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008604:	e000      	b.n	8008608 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008606:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a81      	ldr	r2, [pc, #516]	; (8008814 <HAL_SAI_Init+0x2bc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d004      	beq.n	800861c <HAL_SAI_Init+0xc4>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a80      	ldr	r2, [pc, #512]	; (8008818 <HAL_SAI_Init+0x2c0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d103      	bne.n	8008624 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800861c:	4a7f      	ldr	r2, [pc, #508]	; (800881c <HAL_SAI_Init+0x2c4>)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	e002      	b.n	800862a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008624:	4a7e      	ldr	r2, [pc, #504]	; (8008820 <HAL_SAI_Init+0x2c8>)
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d043      	beq.n	80086ba <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a76      	ldr	r2, [pc, #472]	; (8008814 <HAL_SAI_Init+0x2bc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d004      	beq.n	800864a <HAL_SAI_Init+0xf2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a74      	ldr	r2, [pc, #464]	; (8008818 <HAL_SAI_Init+0x2c0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d104      	bne.n	8008654 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800864a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800864e:	f7ff fa8d 	bl	8007b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8008652:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a72      	ldr	r2, [pc, #456]	; (8008824 <HAL_SAI_Init+0x2cc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <HAL_SAI_Init+0x110>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a71      	ldr	r2, [pc, #452]	; (8008828 <HAL_SAI_Init+0x2d0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d104      	bne.n	8008672 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008668:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800866c:	f7ff fa7e 	bl	8007b6c <HAL_RCCEx_GetPeriphCLKFreq>
 8008670:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	461a      	mov	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	025b      	lsls	r3, r3, #9
 8008684:	fbb2 f3f3 	udiv	r3, r2, r3
 8008688:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a67      	ldr	r2, [pc, #412]	; (800882c <HAL_SAI_Init+0x2d4>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	08da      	lsrs	r2, r3, #3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	4b64      	ldr	r3, [pc, #400]	; (800882c <HAL_SAI_Init+0x2d4>)
 800869c:	fba3 2301 	umull	r2, r3, r3, r1
 80086a0:	08da      	lsrs	r2, r3, #3
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	1aca      	subs	r2, r1, r3
 80086ac:	2a08      	cmp	r2, #8
 80086ae:	d904      	bls.n	80086ba <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_SAI_Init+0x172>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d109      	bne.n	80086de <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_SAI_Init+0x17e>
 80086d2:	2300      	movs	r3, #0
 80086d4:	e001      	b.n	80086da <HAL_SAI_Init+0x182>
 80086d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	e008      	b.n	80086f0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d102      	bne.n	80086ec <HAL_SAI_Init+0x194>
 80086e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ea:	e000      	b.n	80086ee <HAL_SAI_Init+0x196>
 80086ec:	2300      	movs	r3, #0
 80086ee:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b4d      	ldr	r3, [pc, #308]	; (8008830 <HAL_SAI_Init+0x2d8>)
 80086fc:	400b      	ands	r3, r1
 80086fe:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6819      	ldr	r1, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008714:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	431a      	orrs	r2, r3
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008728:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008734:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	051b      	lsls	r3, r3, #20
 800873c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6859      	ldr	r1, [r3, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b38      	ldr	r3, [pc, #224]	; (8008834 <HAL_SAI_Init+0x2dc>)
 8008752:	400b      	ands	r3, r1
 8008754:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6859      	ldr	r1, [r3, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6899      	ldr	r1, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <HAL_SAI_Init+0x2e0>)
 8008780:	400b      	ands	r3, r1
 8008782:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6899      	ldr	r1, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008794:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800879a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80087a0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	3b01      	subs	r3, #1
 80087a8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80087aa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68d9      	ldr	r1, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f24f 0320 	movw	r3, #61472	; 0xf020
 80087c2:	400b      	ands	r3, r1
 80087c4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68d9      	ldr	r1, [r3, #12]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087da:	041b      	lsls	r3, r3, #16
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e2:	3b01      	subs	r3, #1
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40015804 	.word	0x40015804
 8008818:	40015824 	.word	0x40015824
 800881c:	40015800 	.word	0x40015800
 8008820:	40015c00 	.word	0x40015c00
 8008824:	40015c04 	.word	0x40015c04
 8008828:	40015c24 	.word	0x40015c24
 800882c:	cccccccd 	.word	0xcccccccd
 8008830:	ff05c010 	.word	0xff05c010
 8008834:	ffff1ff0 	.word	0xffff1ff0
 8008838:	fff88000 	.word	0xfff88000

0800883c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800883c:	b490      	push	{r4, r7}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <SAI_Disable+0x64>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <SAI_Disable+0x68>)
 800884a:	fba2 2303 	umull	r2, r3, r2, r3
 800884e:	0b1b      	lsrs	r3, r3, #12
 8008850:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008864:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008866:	4623      	mov	r3, r4
 8008868:	1e5c      	subs	r4, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008874:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	73fb      	strb	r3, [r7, #15]
      break;
 8008882:	e006      	b.n	8008892 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e9      	bne.n	8008866 <SAI_Disable+0x2a>

  return status;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bc90      	pop	{r4, r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20000018 	.word	0x20000018
 80088a4:	95cbec1b 	.word	0x95cbec1b

080088a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e022      	b.n	8008900 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fa f90d 	bl	8002aec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2203      	movs	r2, #3
 80088d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f814 	bl	8008908 <HAL_SD_InitCard>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e00a      	b.n	8008900 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008908:	b5b0      	push	{r4, r5, r7, lr}
 800890a:	b08e      	sub	sp, #56	; 0x38
 800890c:	af04      	add	r7, sp, #16
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008910:	2300      	movs	r3, #0
 8008912:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008920:	2300      	movs	r3, #0
 8008922:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008924:	2376      	movs	r3, #118	; 0x76
 8008926:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681d      	ldr	r5, [r3, #0]
 800892c:	466c      	mov	r4, sp
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008940:	4628      	mov	r0, r5
 8008942:	f002 ff51 	bl	800b7e8 <SDMMC_Init>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800894c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e03b      	b.n	80089d0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008966:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f002 ff74 	bl	800b85a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008980:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fde6 	bl	8009554 <SD_PowerON>
 8008988:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e013      	b.n	80089d0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fd05 	bl	80093b8 <SD_InitCard>
 80089ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bdb0      	pop	{r4, r5, r7, pc}

080089d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08c      	sub	sp, #48	; 0x30
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e0cc      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f040 80c5 	bne.w	8008b98 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	441a      	add	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d907      	bls.n	8008a32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0b3      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2203      	movs	r2, #3
 8008a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	4a53      	ldr	r2, [pc, #332]	; (8008ba4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	4a52      	ldr	r2, [pc, #328]	; (8008ba8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008a60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	2200      	movs	r2, #0
 8008a68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3380      	adds	r3, #128	; 0x80
 8008a74:	4619      	mov	r1, r3
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	025b      	lsls	r3, r3, #9
 8008a7c:	089b      	lsrs	r3, r3, #2
 8008a7e:	f7fb ff8b 	bl	8004998 <HAL_DMA_Start_IT>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d017      	beq.n	8008ab8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008a96:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a43      	ldr	r2, [pc, #268]	; (8008bac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e070      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d002      	beq.n	8008ad6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	025b      	lsls	r3, r3, #9
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f002 ff4e 	bl	800b980 <SDMMC_CmdBlockLength>
 8008ae4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00f      	beq.n	8008b0c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a2e      	ldr	r2, [pc, #184]	; (8008bac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	431a      	orrs	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e046      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b10:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	025b      	lsls	r3, r3, #9
 8008b16:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b18:	2390      	movs	r3, #144	; 0x90
 8008b1a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f107 0210 	add.w	r2, r7, #16
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f002 fef8 	bl	800b928 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d90a      	bls.n	8008b54 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2282      	movs	r2, #130	; 0x82
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f002 ff5c 	bl	800ba08 <SDMMC_CmdReadMultiBlock>
 8008b50:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b52:	e009      	b.n	8008b68 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2281      	movs	r2, #129	; 0x81
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b60:	4618      	mov	r0, r3
 8008b62:	f002 ff2f 	bl	800b9c4 <SDMMC_CmdReadSingleBlock>
 8008b66:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d012      	beq.n	8008b94 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a0e      	ldr	r2, [pc, #56]	; (8008bac <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e002      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e000      	b.n	8008b9a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b98:	2302      	movs	r3, #2
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3730      	adds	r7, #48	; 0x30
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	080092a3 	.word	0x080092a3
 8008ba8:	08009315 	.word	0x08009315
 8008bac:	004005ff 	.word	0x004005ff

08008bb0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08c      	sub	sp, #48	; 0x30
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d107      	bne.n	8008bd8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0cf      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 80c8 	bne.w	8008d76 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d907      	bls.n	8008c0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0b6      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 021a 	orr.w	r2, r2, #26
 8008c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2e:	4a54      	ldr	r2, [pc, #336]	; (8008d80 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	4a53      	ldr	r2, [pc, #332]	; (8008d84 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008c38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3e:	2200      	movs	r2, #0
 8008c40:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d002      	beq.n	8008c50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	025b      	lsls	r3, r3, #9
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f002 fe91 	bl	800b980 <SDMMC_CmdBlockLength>
 8008c5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00f      	beq.n	8008c86 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a47      	ldr	r2, [pc, #284]	; (8008d88 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	431a      	orrs	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e078      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d90a      	bls.n	8008ca2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	22a0      	movs	r2, #160	; 0xa0
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 fef9 	bl	800ba90 <SDMMC_CmdWriteMultiBlock>
 8008c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ca0:	e009      	b.n	8008cb6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2290      	movs	r2, #144	; 0x90
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f002 fecc 	bl	800ba4c <SDMMC_CmdWriteSingleBlock>
 8008cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d012      	beq.n	8008ce2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a31      	ldr	r2, [pc, #196]	; (8008d88 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e04a      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0208 	orr.w	r2, r2, #8
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3380      	adds	r3, #128	; 0x80
 8008cfe:	461a      	mov	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	089b      	lsrs	r3, r3, #2
 8008d06:	f7fb fe47 	bl	8004998 <HAL_DMA_Start_IT>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01a      	beq.n	8008d46 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 021a 	bic.w	r2, r2, #26
 8008d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e018      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d46:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	025b      	lsls	r3, r3, #9
 8008d50:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d52:	2390      	movs	r3, #144	; 0x90
 8008d54:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f107 0210 	add.w	r2, r7, #16
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f002 fddb 	bl	800b928 <SDMMC_ConfigData>

      return HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e000      	b.n	8008d78 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d76:	2302      	movs	r3, #2
  }
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3730      	adds	r7, #48	; 0x30
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	08009279 	.word	0x08009279
 8008d84:	08009315 	.word	0x08009315
 8008d88:	004005ff 	.word	0x004005ff

08008d8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dae:	0f9b      	lsrs	r3, r3, #30
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dba:	0e9b      	lsrs	r3, r3, #26
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 030f 	and.w	r3, r3, #15
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dcc:	0e1b      	lsrs	r3, r3, #24
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0303 	and.w	r3, r3, #3
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dde:	0c1b      	lsrs	r3, r3, #16
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e00:	0d1b      	lsrs	r3, r3, #20
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e1e:	0bdb      	lsrs	r3, r3, #15
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e30:	0b9b      	lsrs	r3, r3, #14
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e42:	0b5b      	lsrs	r3, r3, #13
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e54:	0b1b      	lsrs	r3, r3, #12
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2200      	movs	r2, #0
 8008e66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d163      	bne.n	8008f38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e74:	009a      	lsls	r2, r3, #2
 8008e76:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e80:	0f92      	lsrs	r2, r2, #30
 8008e82:	431a      	orrs	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e8c:	0edb      	lsrs	r3, r3, #27
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	0e1b      	lsrs	r3, r3, #24
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb0:	0d5b      	lsrs	r3, r3, #21
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0307 	and.w	r3, r3, #7
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ec2:	0c9b      	lsrs	r3, r3, #18
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed4:	0bdb      	lsrs	r3, r3, #15
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	7e1b      	ldrb	r3, [r3, #24]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	2201      	movs	r2, #1
 8008efa:	fa02 f303 	lsl.w	r3, r2, r3
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008f02:	fb02 f203 	mul.w	r2, r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	7a1b      	ldrb	r3, [r3, #8]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	2201      	movs	r2, #1
 8008f16:	409a      	lsls	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f24:	0a52      	lsrs	r2, r2, #9
 8008f26:	fb02 f203 	mul.w	r2, r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f34:	661a      	str	r2, [r3, #96]	; 0x60
 8008f36:	e031      	b.n	8008f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d11d      	bne.n	8008f7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4e:	0c1b      	lsrs	r3, r3, #16
 8008f50:	431a      	orrs	r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	029a      	lsls	r2, r3, #10
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	661a      	str	r2, [r3, #96]	; 0x60
 8008f7a:	e00f      	b.n	8008f9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a58      	ldr	r2, [pc, #352]	; (80090e4 <HAL_SD_GetCardCSD+0x344>)
 8008f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e09d      	b.n	80090d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa0:	0b9b      	lsrs	r3, r3, #14
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb2:	09db      	lsrs	r3, r3, #7
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd4:	0fdb      	lsrs	r3, r3, #31
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	0f5b      	lsrs	r3, r3, #29
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff2:	0e9b      	lsrs	r3, r3, #26
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009004:	0d9b      	lsrs	r3, r3, #22
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 030f 	and.w	r3, r3, #15
 800900c:	b2da      	uxtb	r2, r3
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009016:	0d5b      	lsrs	r3, r3, #21
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009032:	0c1b      	lsrs	r3, r3, #16
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b2da      	uxtb	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009046:	0bdb      	lsrs	r3, r3, #15
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	0b9b      	lsrs	r3, r3, #14
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	0b5b      	lsrs	r3, r3, #13
 8009070:	b2db      	uxtb	r3, r3
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	0b1b      	lsrs	r3, r3, #12
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	b2da      	uxtb	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009096:	0a9b      	lsrs	r3, r3, #10
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090aa:	0a1b      	lsrs	r3, r3, #8
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	004005ff 	.word	0x004005ff

080090e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009140:	b5b0      	push	{r4, r5, r7, lr}
 8009142:	b08e      	sub	sp, #56	; 0x38
 8009144:	af04      	add	r7, sp, #16
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2203      	movs	r2, #3
 800914e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	2b03      	cmp	r3, #3
 8009158:	d02e      	beq.n	80091b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009160:	d106      	bne.n	8009170 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
 800916e:	e029      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009176:	d10a      	bne.n	800918e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 faa1 	bl	80096c0 <SD_WideBus_Enable>
 800917e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
 800918c:	e01a      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10a      	bne.n	80091aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fade 	bl	8009756 <SD_WideBus_Disable>
 800919a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
 80091a8:	e00c      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
 80091b6:	e005      	b.n	80091c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a18      	ldr	r2, [pc, #96]	; (8009234 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e024      	b.n	800922a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681d      	ldr	r5, [r3, #0]
 8009206:	466c      	mov	r4, sp
 8009208:	f107 0318 	add.w	r3, r7, #24
 800920c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009214:	f107 030c 	add.w	r3, r7, #12
 8009218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800921a:	4628      	mov	r0, r5
 800921c:	f002 fae4 	bl	800b7e8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3728      	adds	r7, #40	; 0x28
 800922e:	46bd      	mov	sp, r7
 8009230:	bdb0      	pop	{r4, r5, r7, pc}
 8009232:	bf00      	nop
 8009234:	004005ff 	.word	0x004005ff

08009238 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009244:	f107 030c 	add.w	r3, r7, #12
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa10 	bl	8009670 <SD_SendStatus>
 8009250:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	0a5b      	lsrs	r3, r3, #9
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800926e:	693b      	ldr	r3, [r7, #16]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3718      	adds	r7, #24
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009294:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	2b82      	cmp	r3, #130	; 0x82
 80092b6:	d111      	bne.n	80092dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 fc09 	bl	800bad4 <SDMMC_CmdStopTransfer>
 80092c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d008      	beq.n	80092dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff fd58 	bl	8008d8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f022 0208 	bic.w	r2, r2, #8
 80092ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f003 f84f 	bl	800c3a8 <HAL_SD_RxCpltCallback>
#endif
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fb fb98 	bl	8004a58 <HAL_DMA_GetError>
 8009328:	4603      	mov	r3, r0
 800932a:	2b02      	cmp	r3, #2
 800932c:	d03e      	beq.n	80093ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009334:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d002      	beq.n	800934a <SD_DMAError+0x36>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d12d      	bne.n	80093a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a19      	ldr	r2, [pc, #100]	; (80093b4 <SD_DMAError+0xa0>)
 8009350:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009360:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800936e:	6978      	ldr	r0, [r7, #20]
 8009370:	f7ff ff62 	bl	8009238 <HAL_SD_GetCardState>
 8009374:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b06      	cmp	r3, #6
 800937a:	d002      	beq.n	8009382 <SD_DMAError+0x6e>
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b05      	cmp	r3, #5
 8009380:	d10a      	bne.n	8009398 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4618      	mov	r0, r3
 8009388:	f002 fba4 	bl	800bad4 <SDMMC_CmdStopTransfer>
 800938c:	4602      	mov	r2, r0
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	431a      	orrs	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80093a6:	6978      	ldr	r0, [r7, #20]
 80093a8:	f7ff fcf0 	bl	8008d8c <HAL_SD_ErrorCallback>
#endif
  }
}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	004005ff 	.word	0x004005ff

080093b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b094      	sub	sp, #80	; 0x50
 80093bc:	af04      	add	r7, sp, #16
 80093be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80093c0:	2301      	movs	r3, #1
 80093c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 fa55 	bl	800b878 <SDMMC_GetPowerState>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093d8:	e0b7      	b.n	800954a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d02f      	beq.n	8009442 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f002 fc7f 	bl	800bcea <SDMMC_CmdSendCID>
 80093ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	e0a8      	b.n	800954a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f002 fa7f 	bl	800b902 <SDMMC_GetResponse>
 8009404:	4602      	mov	r2, r0
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2104      	movs	r1, #4
 8009410:	4618      	mov	r0, r3
 8009412:	f002 fa76 	bl	800b902 <SDMMC_GetResponse>
 8009416:	4602      	mov	r2, r0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2108      	movs	r1, #8
 8009422:	4618      	mov	r0, r3
 8009424:	f002 fa6d 	bl	800b902 <SDMMC_GetResponse>
 8009428:	4602      	mov	r2, r0
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	210c      	movs	r1, #12
 8009434:	4618      	mov	r0, r3
 8009436:	f002 fa64 	bl	800b902 <SDMMC_GetResponse>
 800943a:	4602      	mov	r2, r0
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	2b03      	cmp	r3, #3
 8009448:	d00d      	beq.n	8009466 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f107 020e 	add.w	r2, r7, #14
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f002 fc85 	bl	800bd64 <SDMMC_CmdSetRelAdd>
 800945a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800945c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <SD_InitCard+0xae>
    {
      return errorstate;
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	e071      	b.n	800954a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	2b03      	cmp	r3, #3
 800946c:	d036      	beq.n	80094dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800946e:	89fb      	ldrh	r3, [r7, #14]
 8009470:	461a      	mov	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947e:	041b      	lsls	r3, r3, #16
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f002 fc4f 	bl	800bd26 <SDMMC_CmdSendCSD>
 8009488:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800948a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009492:	e05a      	b.n	800954a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f002 fa31 	bl	800b902 <SDMMC_GetResponse>
 80094a0:	4602      	mov	r2, r0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2104      	movs	r1, #4
 80094ac:	4618      	mov	r0, r3
 80094ae:	f002 fa28 	bl	800b902 <SDMMC_GetResponse>
 80094b2:	4602      	mov	r2, r0
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2108      	movs	r1, #8
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 fa1f 	bl	800b902 <SDMMC_GetResponse>
 80094c4:	4602      	mov	r2, r0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	210c      	movs	r1, #12
 80094d0:	4618      	mov	r0, r3
 80094d2:	f002 fa16 	bl	800b902 <SDMMC_GetResponse>
 80094d6:	4602      	mov	r2, r0
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2104      	movs	r1, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 fa0d 	bl	800b902 <SDMMC_GetResponse>
 80094e8:	4603      	mov	r3, r0
 80094ea:	0d1a      	lsrs	r2, r3, #20
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094f0:	f107 0310 	add.w	r3, r7, #16
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff fc52 	bl	8008da0 <HAL_SD_GetCardCSD>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009506:	e020      	b.n	800954a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	f04f 0400 	mov.w	r4, #0
 8009516:	461a      	mov	r2, r3
 8009518:	4623      	mov	r3, r4
 800951a:	4608      	mov	r0, r1
 800951c:	f002 fafc 	bl	800bb18 <SDMMC_CmdSelDesel>
 8009520:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <SD_InitCard+0x174>
  {
    return errorstate;
 8009528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952a:	e00e      	b.n	800954a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681d      	ldr	r5, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	466c      	mov	r4, sp
 8009534:	f103 0210 	add.w	r2, r3, #16
 8009538:	ca07      	ldmia	r2, {r0, r1, r2}
 800953a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800953e:	3304      	adds	r3, #4
 8009540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009542:	4628      	mov	r0, r5
 8009544:	f002 f950 	bl	800b7e8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3740      	adds	r7, #64	; 0x40
 800954e:	46bd      	mov	sp, r7
 8009550:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009554 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f002 faf6 	bl	800bb5e <SDMMC_CmdGoIdleState>
 8009572:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <SD_PowerON+0x2a>
  {
    return errorstate;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	e072      	b.n	8009664 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f002 fb09 	bl	800bb9a <SDMMC_CmdOperCond>
 8009588:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00d      	beq.n	80095ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f002 fadf 	bl	800bb5e <SDMMC_CmdGoIdleState>
 80095a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	e05b      	b.n	8009664 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d137      	bne.n	800962a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f002 fb09 	bl	800bbd8 <SDMMC_CmdAppCommand>
 80095c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d02d      	beq.n	800962a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095d2:	e047      	b.n	8009664 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2100      	movs	r1, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f002 fafc 	bl	800bbd8 <SDMMC_CmdAppCommand>
 80095e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <SD_PowerON+0x98>
    {
      return errorstate;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	e03b      	b.n	8009664 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	491e      	ldr	r1, [pc, #120]	; (800966c <SD_PowerON+0x118>)
 80095f2:	4618      	mov	r0, r3
 80095f4:	f002 fb12 	bl	800bc1c <SDMMC_CmdAppOperCommand>
 80095f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009604:	e02e      	b.n	8009664 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2100      	movs	r1, #0
 800960c:	4618      	mov	r0, r3
 800960e:	f002 f978 	bl	800b902 <SDMMC_GetResponse>
 8009612:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	0fdb      	lsrs	r3, r3, #31
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <SD_PowerON+0xcc>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <SD_PowerON+0xce>
 8009620:	2300      	movs	r3, #0
 8009622:	613b      	str	r3, [r7, #16]

    count++;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3301      	adds	r3, #1
 8009628:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009630:	4293      	cmp	r3, r2
 8009632:	d802      	bhi.n	800963a <SD_PowerON+0xe6>
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0cc      	beq.n	80095d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009640:	4293      	cmp	r3, r2
 8009642:	d902      	bls.n	800964a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009648:	e00c      	b.n	8009664 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	645a      	str	r2, [r3, #68]	; 0x44
 800965a:	e002      	b.n	8009662 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	c1100000 	.word	0xc1100000

08009670 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009680:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009684:	e018      	b.n	80096b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f002 fb87 	bl	800bda6 <SDMMC_CmdSendStatus>
 8009698:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	e009      	b.n	80096b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f002 f929 	bl	800b902 <SDMMC_GetResponse>
 80096b0:	4602      	mov	r2, r0
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	2300      	movs	r3, #0
 80096ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 f913 	bl	800b902 <SDMMC_GetResponse>
 80096dc:	4603      	mov	r3, r0
 80096de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e6:	d102      	bne.n	80096ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80096e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096ec:	e02f      	b.n	800974e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80096ee:	f107 030c 	add.w	r3, r7, #12
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f879 	bl	80097ec <SD_FindSCR>
 80096fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	e023      	b.n	800974e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01c      	beq.n	800974a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f002 fa5b 	bl	800bbd8 <SDMMC_CmdAppCommand>
 8009722:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	e00f      	b.n	800974e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f002 fa95 	bl	800bc64 <SDMMC_CmdBusWidth>
 800973a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	e003      	b.n	800974e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009746:	2300      	movs	r3, #0
 8009748:	e001      	b.n	800974e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800974a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b086      	sub	sp, #24
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	2300      	movs	r3, #0
 8009764:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f002 f8c8 	bl	800b902 <SDMMC_GetResponse>
 8009772:	4603      	mov	r3, r0
 8009774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800977c:	d102      	bne.n	8009784 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800977e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009782:	e02f      	b.n	80097e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009784:	f107 030c 	add.w	r3, r7, #12
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f82e 	bl	80097ec <SD_FindSCR>
 8009790:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d001      	beq.n	800979c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	e023      	b.n	80097e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d01c      	beq.n	80097e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	041b      	lsls	r3, r3, #16
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f002 fa10 	bl	800bbd8 <SDMMC_CmdAppCommand>
 80097b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	e00f      	b.n	80097e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f002 fa4a 	bl	800bc64 <SDMMC_CmdBusWidth>
 80097d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	e003      	b.n	80097e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80097dc:	2300      	movs	r3, #0
 80097de:	e001      	b.n	80097e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80097ec:	b590      	push	{r4, r7, lr}
 80097ee:	b08f      	sub	sp, #60	; 0x3c
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097f6:	f7f9 ff29 	bl	800364c <HAL_GetTick>
 80097fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009800:	2300      	movs	r3, #0
 8009802:	60bb      	str	r3, [r7, #8]
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2108      	movs	r1, #8
 8009812:	4618      	mov	r0, r3
 8009814:	f002 f8b4 	bl	800b980 <SDMMC_CmdBlockLength>
 8009818:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	e0a9      	b.n	8009978 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f002 f9d1 	bl	800bbd8 <SDMMC_CmdAppCommand>
 8009836:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <SD_FindSCR+0x56>
  {
    return errorstate;
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	e09a      	b.n	8009978 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009848:	2308      	movs	r3, #8
 800984a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800984c:	2330      	movs	r3, #48	; 0x30
 800984e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009850:	2302      	movs	r3, #2
 8009852:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009854:	2300      	movs	r3, #0
 8009856:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009858:	2301      	movs	r3, #1
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f107 0210 	add.w	r2, r7, #16
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f002 f85e 	bl	800b928 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f002 fa19 	bl	800bca8 <SDMMC_CmdSendSCR>
 8009876:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d022      	beq.n	80098c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009880:	e07a      	b.n	8009978 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	f107 0208 	add.w	r2, r7, #8
 800989c:	18d4      	adds	r4, r2, r3
 800989e:	4608      	mov	r0, r1
 80098a0:	f001 ffce 	bl	800b840 <SDMMC_ReadFIFO>
 80098a4:	4603      	mov	r3, r0
 80098a6:	6023      	str	r3, [r4, #0]
      index++;
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	3301      	adds	r3, #1
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098ae:	f7f9 fecd 	bl	800364c <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098bc:	d102      	bne.n	80098c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098c2:	e059      	b.n	8009978 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ca:	f240 432a 	movw	r3, #1066	; 0x42a
 80098ce:	4013      	ands	r3, r2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0d6      	beq.n	8009882 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2208      	movs	r2, #8
 80098e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80098ea:	2308      	movs	r3, #8
 80098ec:	e044      	b.n	8009978 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2202      	movs	r2, #2
 8009902:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009904:	2302      	movs	r3, #2
 8009906:	e037      	b.n	8009978 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2220      	movs	r2, #32
 800991c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800991e:	2320      	movs	r3, #32
 8009920:	e02a      	b.n	8009978 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f240 523a 	movw	r2, #1338	; 0x53a
 800992a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	061a      	lsls	r2, r3, #24
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	021b      	lsls	r3, r3, #8
 8009934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009938:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0a1b      	lsrs	r3, r3, #8
 800993e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009942:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	0e1b      	lsrs	r3, r3, #24
 8009948:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	601a      	str	r2, [r3, #0]
    scr++;
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	3304      	adds	r3, #4
 8009952:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	061a      	lsls	r2, r3, #24
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009960:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	0a1b      	lsrs	r3, r3, #8
 8009966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800996a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	0e1b      	lsrs	r3, r3, #24
 8009970:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	373c      	adds	r7, #60	; 0x3c
 800997c:	46bd      	mov	sp, r7
 800997e:	bd90      	pop	{r4, r7, pc}

08009980 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e025      	b.n	80099e0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7f9 fc25 	bl	80031f8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3304      	adds	r3, #4
 80099be:	4619      	mov	r1, r3
 80099c0:	4610      	mov	r0, r2
 80099c2:	f001 fdeb 	bl	800b59c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	f001 fe55 	bl	800b680 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d101      	bne.n	8009a04 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
 8009a02:	e018      	b.n	8009a36 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 feb3 	bl	800b780 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d104      	bne.n	8009a2c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2205      	movs	r2, #5
 8009a26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009a2a:	e003      	b.n	8009a34 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d101      	bne.n	8009a58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
 8009a56:	e00e      	b.n	8009a76 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 feab 	bl	800b7c2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e04c      	b.n	8009b2c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7f9 f882 	bl	8002bb0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0203 	bic.w	r2, r2, #3
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <HAL_SPDIFRX_Init+0xb4>)
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009adc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009ae2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009ae8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009aee:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009af4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009afa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009b00:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009b06:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009b0c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	fff88407 	.word	0xfff88407

08009b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e084      	b.n	8009c54 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7f9 f865 	bl	8002c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b8a:	d902      	bls.n	8009b92 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e002      	b.n	8009b98 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ba0:	d007      	beq.n	8009bb2 <HAL_SPI_Init+0x7a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009baa:	d002      	beq.n	8009bb2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009bc2:	d903      	bls.n	8009bcc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8009bca:	e002      	b.n	8009bd2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	ea42 0103 	orr.w	r1, r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	0c1b      	lsrs	r3, r3, #16
 8009c12:	f003 0204 	and.w	r2, r3, #4
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	ea42 0103 	orr.w	r1, r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	69da      	ldr	r2, [r3, #28]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e01d      	b.n	8009caa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7f9 f838 	bl	8002cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f000 fb78 	bl	800a390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <HAL_TIM_Base_Start_IT+0x50>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b06      	cmp	r3, #6
 8009cdc:	d00b      	beq.n	8009cf6 <HAL_TIM_Base_Start_IT+0x42>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ce4:	d007      	beq.n	8009cf6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0201 	orr.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	00010007 	.word	0x00010007

08009d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e01d      	b.n	8009d56 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7f9 f850 	bl	8002dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f000 fb22 	bl	800a390 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	d122      	bne.n	8009dba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d11b      	bne.n	8009dba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f06f 0202 	mvn.w	r2, #2
 8009d8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	f003 0303 	and.w	r3, r3, #3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fad7 	bl	800a354 <HAL_TIM_IC_CaptureCallback>
 8009da6:	e005      	b.n	8009db4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fac9 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fada 	bl	800a368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	d122      	bne.n	8009e0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f003 0304 	and.w	r3, r3, #4
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d11b      	bne.n	8009e0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f06f 0204 	mvn.w	r2, #4
 8009dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 faad 	bl	800a354 <HAL_TIM_IC_CaptureCallback>
 8009dfa:	e005      	b.n	8009e08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fa9f 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fab0 	bl	800a368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d122      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d11b      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f06f 0208 	mvn.w	r2, #8
 8009e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2204      	movs	r2, #4
 8009e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa83 	bl	800a354 <HAL_TIM_IC_CaptureCallback>
 8009e4e:	e005      	b.n	8009e5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa75 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa86 	bl	800a368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0310 	and.w	r3, r3, #16
 8009e6c:	2b10      	cmp	r3, #16
 8009e6e:	d122      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0310 	and.w	r3, r3, #16
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d11b      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f06f 0210 	mvn.w	r2, #16
 8009e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fa59 	bl	800a354 <HAL_TIM_IC_CaptureCallback>
 8009ea2:	e005      	b.n	8009eb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fa4b 	bl	800a340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa5c 	bl	800a368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d10e      	bne.n	8009ee2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d107      	bne.n	8009ee2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f06f 0201 	mvn.w	r2, #1
 8009eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7f8 fa8d 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eec:	2b80      	cmp	r3, #128	; 0x80
 8009eee:	d10e      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	2b80      	cmp	r3, #128	; 0x80
 8009efc:	d107      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 feef 	bl	800acec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1c:	d10e      	bne.n	8009f3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d107      	bne.n	8009f3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fee2 	bl	800ad00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b40      	cmp	r3, #64	; 0x40
 8009f48:	d10e      	bne.n	8009f68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f54:	2b40      	cmp	r3, #64	; 0x40
 8009f56:	d107      	bne.n	8009f68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa0a 	bl	800a37c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d10e      	bne.n	8009f94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b20      	cmp	r3, #32
 8009f82:	d107      	bne.n	8009f94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f06f 0220 	mvn.w	r2, #32
 8009f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fea2 	bl	800acd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e105      	b.n	800a1c2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b14      	cmp	r3, #20
 8009fca:	f200 80f0 	bhi.w	800a1ae <HAL_TIM_PWM_ConfigChannel+0x212>
 8009fce:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	0800a1af 	.word	0x0800a1af
 8009fdc:	0800a1af 	.word	0x0800a1af
 8009fe0:	0800a1af 	.word	0x0800a1af
 8009fe4:	0800a069 	.word	0x0800a069
 8009fe8:	0800a1af 	.word	0x0800a1af
 8009fec:	0800a1af 	.word	0x0800a1af
 8009ff0:	0800a1af 	.word	0x0800a1af
 8009ff4:	0800a0ab 	.word	0x0800a0ab
 8009ff8:	0800a1af 	.word	0x0800a1af
 8009ffc:	0800a1af 	.word	0x0800a1af
 800a000:	0800a1af 	.word	0x0800a1af
 800a004:	0800a0eb 	.word	0x0800a0eb
 800a008:	0800a1af 	.word	0x0800a1af
 800a00c:	0800a1af 	.word	0x0800a1af
 800a010:	0800a1af 	.word	0x0800a1af
 800a014:	0800a12d 	.word	0x0800a12d
 800a018:	0800a1af 	.word	0x0800a1af
 800a01c:	0800a1af 	.word	0x0800a1af
 800a020:	0800a1af 	.word	0x0800a1af
 800a024:	0800a16d 	.word	0x0800a16d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fa4e 	bl	800a4d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0208 	orr.w	r2, r2, #8
 800a042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0204 	bic.w	r2, r2, #4
 800a052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6999      	ldr	r1, [r3, #24]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	691a      	ldr	r2, [r3, #16]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	619a      	str	r2, [r3, #24]
      break;
 800a066:	e0a3      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 faa0 	bl	800a5b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6999      	ldr	r1, [r3, #24]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	021a      	lsls	r2, r3, #8
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	619a      	str	r2, [r3, #24]
      break;
 800a0a8:	e082      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 faf7 	bl	800a6a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0208 	orr.w	r2, r2, #8
 800a0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0204 	bic.w	r2, r2, #4
 800a0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69d9      	ldr	r1, [r3, #28]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691a      	ldr	r2, [r3, #16]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	61da      	str	r2, [r3, #28]
      break;
 800a0e8:	e062      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fb4d 	bl	800a790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69da      	ldr	r2, [r3, #28]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69da      	ldr	r2, [r3, #28]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69d9      	ldr	r1, [r3, #28]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	021a      	lsls	r2, r3, #8
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	61da      	str	r2, [r3, #28]
      break;
 800a12a:	e041      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fb84 	bl	800a840 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f042 0208 	orr.w	r2, r2, #8
 800a146:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0204 	bic.w	r2, r2, #4
 800a156:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a16a:	e021      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 fbb6 	bl	800a8e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a186:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a196:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	021a      	lsls	r2, r3, #8
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a1ac:	e000      	b.n	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a1ae:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop

0800a1cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d101      	bne.n	800a1e4 <HAL_TIM_ConfigClockSource+0x18>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e0a6      	b.n	800a332 <HAL_TIM_ConfigClockSource+0x166>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4b4f      	ldr	r3, [pc, #316]	; (800a33c <HAL_TIM_ConfigClockSource+0x170>)
 800a200:	4013      	ands	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a20a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b40      	cmp	r3, #64	; 0x40
 800a21a:	d067      	beq.n	800a2ec <HAL_TIM_ConfigClockSource+0x120>
 800a21c:	2b40      	cmp	r3, #64	; 0x40
 800a21e:	d80b      	bhi.n	800a238 <HAL_TIM_ConfigClockSource+0x6c>
 800a220:	2b10      	cmp	r3, #16
 800a222:	d073      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0x140>
 800a224:	2b10      	cmp	r3, #16
 800a226:	d802      	bhi.n	800a22e <HAL_TIM_ConfigClockSource+0x62>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d06f      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a22c:	e078      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a22e:	2b20      	cmp	r3, #32
 800a230:	d06c      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0x140>
 800a232:	2b30      	cmp	r3, #48	; 0x30
 800a234:	d06a      	beq.n	800a30c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a236:	e073      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a238:	2b70      	cmp	r3, #112	; 0x70
 800a23a:	d00d      	beq.n	800a258 <HAL_TIM_ConfigClockSource+0x8c>
 800a23c:	2b70      	cmp	r3, #112	; 0x70
 800a23e:	d804      	bhi.n	800a24a <HAL_TIM_ConfigClockSource+0x7e>
 800a240:	2b50      	cmp	r3, #80	; 0x50
 800a242:	d033      	beq.n	800a2ac <HAL_TIM_ConfigClockSource+0xe0>
 800a244:	2b60      	cmp	r3, #96	; 0x60
 800a246:	d041      	beq.n	800a2cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a248:	e06a      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24e:	d066      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x152>
 800a250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a254:	d017      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a256:	e063      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	6899      	ldr	r1, [r3, #8]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f000 fc0a 	bl	800aa80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a27a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	609a      	str	r2, [r3, #8]
      break;
 800a284:	e04c      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6899      	ldr	r1, [r3, #8]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f000 fbf3 	bl	800aa80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2a8:	609a      	str	r2, [r3, #8]
      break;
 800a2aa:	e039      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6818      	ldr	r0, [r3, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	6859      	ldr	r1, [r3, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f000 fb67 	bl	800a98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2150      	movs	r1, #80	; 0x50
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fbc0 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a2ca:	e029      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	6859      	ldr	r1, [r3, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f000 fb86 	bl	800a9ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2160      	movs	r1, #96	; 0x60
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 fbb0 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a2ea:	e019      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6859      	ldr	r1, [r3, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f000 fb47 	bl	800a98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2140      	movs	r1, #64	; 0x40
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fba0 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a30a:	e009      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f000 fb97 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a31c:	e000      	b.n	800a320 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a31e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	fffeff88 	.word	0xfffeff88

0800a340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a40      	ldr	r2, [pc, #256]	; (800a4a4 <TIM_Base_SetConfig+0x114>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d013      	beq.n	800a3d0 <TIM_Base_SetConfig+0x40>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ae:	d00f      	beq.n	800a3d0 <TIM_Base_SetConfig+0x40>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a3d      	ldr	r2, [pc, #244]	; (800a4a8 <TIM_Base_SetConfig+0x118>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00b      	beq.n	800a3d0 <TIM_Base_SetConfig+0x40>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a3c      	ldr	r2, [pc, #240]	; (800a4ac <TIM_Base_SetConfig+0x11c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d007      	beq.n	800a3d0 <TIM_Base_SetConfig+0x40>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a3b      	ldr	r2, [pc, #236]	; (800a4b0 <TIM_Base_SetConfig+0x120>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d003      	beq.n	800a3d0 <TIM_Base_SetConfig+0x40>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a3a      	ldr	r2, [pc, #232]	; (800a4b4 <TIM_Base_SetConfig+0x124>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d108      	bne.n	800a3e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a2f      	ldr	r2, [pc, #188]	; (800a4a4 <TIM_Base_SetConfig+0x114>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d02b      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f0:	d027      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a2c      	ldr	r2, [pc, #176]	; (800a4a8 <TIM_Base_SetConfig+0x118>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d023      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a2b      	ldr	r2, [pc, #172]	; (800a4ac <TIM_Base_SetConfig+0x11c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d01f      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a2a      	ldr	r2, [pc, #168]	; (800a4b0 <TIM_Base_SetConfig+0x120>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d01b      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <TIM_Base_SetConfig+0x124>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d017      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a28      	ldr	r2, [pc, #160]	; (800a4b8 <TIM_Base_SetConfig+0x128>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d013      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a27      	ldr	r2, [pc, #156]	; (800a4bc <TIM_Base_SetConfig+0x12c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00f      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a26      	ldr	r2, [pc, #152]	; (800a4c0 <TIM_Base_SetConfig+0x130>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00b      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a25      	ldr	r2, [pc, #148]	; (800a4c4 <TIM_Base_SetConfig+0x134>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d007      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a24      	ldr	r2, [pc, #144]	; (800a4c8 <TIM_Base_SetConfig+0x138>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d003      	beq.n	800a442 <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a23      	ldr	r2, [pc, #140]	; (800a4cc <TIM_Base_SetConfig+0x13c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d108      	bne.n	800a454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4313      	orrs	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	689a      	ldr	r2, [r3, #8]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a0a      	ldr	r2, [pc, #40]	; (800a4a4 <TIM_Base_SetConfig+0x114>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d003      	beq.n	800a488 <TIM_Base_SetConfig+0xf8>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a0c      	ldr	r2, [pc, #48]	; (800a4b4 <TIM_Base_SetConfig+0x124>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d103      	bne.n	800a490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	615a      	str	r2, [r3, #20]
}
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	40010000 	.word	0x40010000
 800a4a8:	40000400 	.word	0x40000400
 800a4ac:	40000800 	.word	0x40000800
 800a4b0:	40000c00 	.word	0x40000c00
 800a4b4:	40010400 	.word	0x40010400
 800a4b8:	40014000 	.word	0x40014000
 800a4bc:	40014400 	.word	0x40014400
 800a4c0:	40014800 	.word	0x40014800
 800a4c4:	40001800 	.word	0x40001800
 800a4c8:	40001c00 	.word	0x40001c00
 800a4cc:	40002000 	.word	0x40002000

0800a4d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	f023 0201 	bic.w	r2, r3, #1
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4b2b      	ldr	r3, [pc, #172]	; (800a5a8 <TIM_OC1_SetConfig+0xd8>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4313      	orrs	r3, r2
 800a510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f023 0302 	bic.w	r3, r3, #2
 800a518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	4313      	orrs	r3, r2
 800a522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a21      	ldr	r2, [pc, #132]	; (800a5ac <TIM_OC1_SetConfig+0xdc>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_OC1_SetConfig+0x64>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a20      	ldr	r2, [pc, #128]	; (800a5b0 <TIM_OC1_SetConfig+0xe0>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d10c      	bne.n	800a54e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f023 0308 	bic.w	r3, r3, #8
 800a53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	4313      	orrs	r3, r2
 800a544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f023 0304 	bic.w	r3, r3, #4
 800a54c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a16      	ldr	r2, [pc, #88]	; (800a5ac <TIM_OC1_SetConfig+0xdc>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d003      	beq.n	800a55e <TIM_OC1_SetConfig+0x8e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <TIM_OC1_SetConfig+0xe0>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d111      	bne.n	800a582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a56c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	4313      	orrs	r3, r2
 800a576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	621a      	str	r2, [r3, #32]
}
 800a59c:	bf00      	nop
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	fffeff8f 	.word	0xfffeff8f
 800a5ac:	40010000 	.word	0x40010000
 800a5b0:	40010400 	.word	0x40010400

0800a5b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	f023 0210 	bic.w	r2, r3, #16
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4b2e      	ldr	r3, [pc, #184]	; (800a698 <TIM_OC2_SetConfig+0xe4>)
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	021b      	lsls	r3, r3, #8
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f023 0320 	bic.w	r3, r3, #32
 800a5fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	4313      	orrs	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a23      	ldr	r2, [pc, #140]	; (800a69c <TIM_OC2_SetConfig+0xe8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d003      	beq.n	800a61c <TIM_OC2_SetConfig+0x68>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a22      	ldr	r2, [pc, #136]	; (800a6a0 <TIM_OC2_SetConfig+0xec>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d10d      	bne.n	800a638 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a18      	ldr	r2, [pc, #96]	; (800a69c <TIM_OC2_SetConfig+0xe8>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC2_SetConfig+0x94>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a17      	ldr	r2, [pc, #92]	; (800a6a0 <TIM_OC2_SetConfig+0xec>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d113      	bne.n	800a670 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a64e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	621a      	str	r2, [r3, #32]
}
 800a68a:	bf00      	nop
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	feff8fff 	.word	0xfeff8fff
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40010400 	.word	0x40010400

0800a6a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	69db      	ldr	r3, [r3, #28]
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4b2d      	ldr	r3, [pc, #180]	; (800a784 <TIM_OC3_SetConfig+0xe0>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0303 	bic.w	r3, r3, #3
 800a6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a22      	ldr	r2, [pc, #136]	; (800a788 <TIM_OC3_SetConfig+0xe4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d003      	beq.n	800a70a <TIM_OC3_SetConfig+0x66>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a21      	ldr	r2, [pc, #132]	; (800a78c <TIM_OC3_SetConfig+0xe8>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d10d      	bne.n	800a726 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a17      	ldr	r2, [pc, #92]	; (800a788 <TIM_OC3_SetConfig+0xe4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d003      	beq.n	800a736 <TIM_OC3_SetConfig+0x92>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a16      	ldr	r2, [pc, #88]	; (800a78c <TIM_OC3_SetConfig+0xe8>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d113      	bne.n	800a75e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a73c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	621a      	str	r2, [r3, #32]
}
 800a778:	bf00      	nop
 800a77a:	371c      	adds	r7, #28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	fffeff8f 	.word	0xfffeff8f
 800a788:	40010000 	.word	0x40010000
 800a78c:	40010400 	.word	0x40010400

0800a790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <TIM_OC4_SetConfig+0xa4>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	031b      	lsls	r3, r3, #12
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a13      	ldr	r2, [pc, #76]	; (800a838 <TIM_OC4_SetConfig+0xa8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_OC4_SetConfig+0x68>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a12      	ldr	r2, [pc, #72]	; (800a83c <TIM_OC4_SetConfig+0xac>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d109      	bne.n	800a80c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	019b      	lsls	r3, r3, #6
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	621a      	str	r2, [r3, #32]
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	feff8fff 	.word	0xfeff8fff
 800a838:	40010000 	.word	0x40010000
 800a83c:	40010400 	.word	0x40010400

0800a840 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a1b      	ldr	r3, [r3, #32]
 800a85a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4b1b      	ldr	r3, [pc, #108]	; (800a8d8 <TIM_OC5_SetConfig+0x98>)
 800a86c:	4013      	ands	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	041b      	lsls	r3, r3, #16
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <TIM_OC5_SetConfig+0x9c>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d003      	beq.n	800a89e <TIM_OC5_SetConfig+0x5e>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a11      	ldr	r2, [pc, #68]	; (800a8e0 <TIM_OC5_SetConfig+0xa0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d109      	bne.n	800a8b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	621a      	str	r2, [r3, #32]
}
 800a8cc:	bf00      	nop
 800a8ce:	371c      	adds	r7, #28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	fffeff8f 	.word	0xfffeff8f
 800a8dc:	40010000 	.word	0x40010000
 800a8e0:	40010400 	.word	0x40010400

0800a8e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4b1c      	ldr	r3, [pc, #112]	; (800a980 <TIM_OC6_SetConfig+0x9c>)
 800a910:	4013      	ands	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	051b      	lsls	r3, r3, #20
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a13      	ldr	r2, [pc, #76]	; (800a984 <TIM_OC6_SetConfig+0xa0>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_OC6_SetConfig+0x60>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a12      	ldr	r2, [pc, #72]	; (800a988 <TIM_OC6_SetConfig+0xa4>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d109      	bne.n	800a958 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a94a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	029b      	lsls	r3, r3, #10
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	4313      	orrs	r3, r2
 800a956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	621a      	str	r2, [r3, #32]
}
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	feff8fff 	.word	0xfeff8fff
 800a984:	40010000 	.word	0x40010000
 800a988:	40010400 	.word	0x40010400

0800a98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0201 	bic.w	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f023 030a 	bic.w	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0210 	bic.w	r2, r3, #16
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	031b      	lsls	r3, r3, #12
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	621a      	str	r2, [r3, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f043 0307 	orr.w	r3, r3, #7
 800aa6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	609a      	str	r2, [r3, #8]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	021a      	lsls	r2, r3, #8
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	609a      	str	r2, [r3, #8]
}
 800aab4:	bf00      	nop
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e06d      	b.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a30      	ldr	r2, [pc, #192]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d004      	beq.n	800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a2f      	ldr	r2, [pc, #188]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d108      	bne.n	800ab1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a20      	ldr	r2, [pc, #128]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d022      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4a:	d01d      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1d      	ldr	r2, [pc, #116]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d018      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a1c      	ldr	r2, [pc, #112]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d013      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a1a      	ldr	r2, [pc, #104]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00e      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a15      	ldr	r2, [pc, #84]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d009      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a16      	ldr	r2, [pc, #88]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d004      	beq.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d10c      	bne.n	800aba2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	40010000 	.word	0x40010000
 800abc4:	40010400 	.word	0x40010400
 800abc8:	40000400 	.word	0x40000400
 800abcc:	40000800 	.word	0x40000800
 800abd0:	40000c00 	.word	0x40000c00
 800abd4:	40014000 	.word	0x40014000
 800abd8:	40001800 	.word	0x40001800

0800abdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d101      	bne.n	800abf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e065      	b.n	800acc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a16      	ldr	r2, [pc, #88]	; (800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d004      	beq.n	800ac86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a14      	ldr	r2, [pc, #80]	; (800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d115      	bne.n	800acb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	051b      	lsls	r3, r3, #20
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40010400 	.word	0x40010400

0800acd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e040      	b.n	800ada8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7f8 f93a 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2224      	movs	r2, #36	; 0x24
 800ad40:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f82c 	bl	800adb0 <UART_SetConfig>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e022      	b.n	800ada8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 faca 	bl	800b304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0201 	orr.w	r2, r2, #1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fb51 	bl	800b448 <UART_CheckIdleState>
 800ada6:	4603      	mov	r3, r0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800adb8:	2300      	movs	r3, #0
 800adba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	431a      	orrs	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	431a      	orrs	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	69db      	ldr	r3, [r3, #28]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4bb1      	ldr	r3, [pc, #708]	; (800b0a4 <UART_SetConfig+0x2f4>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	6939      	ldr	r1, [r7, #16]
 800ade8:	430b      	orrs	r3, r1
 800adea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a9f      	ldr	r2, [pc, #636]	; (800b0a8 <UART_SetConfig+0x2f8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d121      	bne.n	800ae74 <UART_SetConfig+0xc4>
 800ae30:	4b9e      	ldr	r3, [pc, #632]	; (800b0ac <UART_SetConfig+0x2fc>)
 800ae32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d816      	bhi.n	800ae6c <UART_SetConfig+0xbc>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x94>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800ae55 	.word	0x0800ae55
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae5b 	.word	0x0800ae5b
 800ae50:	0800ae67 	.word	0x0800ae67
 800ae54:	2301      	movs	r3, #1
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	e151      	b.n	800b0fe <UART_SetConfig+0x34e>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	77fb      	strb	r3, [r7, #31]
 800ae5e:	e14e      	b.n	800b0fe <UART_SetConfig+0x34e>
 800ae60:	2304      	movs	r3, #4
 800ae62:	77fb      	strb	r3, [r7, #31]
 800ae64:	e14b      	b.n	800b0fe <UART_SetConfig+0x34e>
 800ae66:	2308      	movs	r3, #8
 800ae68:	77fb      	strb	r3, [r7, #31]
 800ae6a:	e148      	b.n	800b0fe <UART_SetConfig+0x34e>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	77fb      	strb	r3, [r7, #31]
 800ae70:	bf00      	nop
 800ae72:	e144      	b.n	800b0fe <UART_SetConfig+0x34e>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a8d      	ldr	r2, [pc, #564]	; (800b0b0 <UART_SetConfig+0x300>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d134      	bne.n	800aee8 <UART_SetConfig+0x138>
 800ae7e:	4b8b      	ldr	r3, [pc, #556]	; (800b0ac <UART_SetConfig+0x2fc>)
 800ae80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae84:	f003 030c 	and.w	r3, r3, #12
 800ae88:	2b0c      	cmp	r3, #12
 800ae8a:	d829      	bhi.n	800aee0 <UART_SetConfig+0x130>
 800ae8c:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <UART_SetConfig+0xe4>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aec9 	.word	0x0800aec9
 800ae98:	0800aee1 	.word	0x0800aee1
 800ae9c:	0800aee1 	.word	0x0800aee1
 800aea0:	0800aee1 	.word	0x0800aee1
 800aea4:	0800aed5 	.word	0x0800aed5
 800aea8:	0800aee1 	.word	0x0800aee1
 800aeac:	0800aee1 	.word	0x0800aee1
 800aeb0:	0800aee1 	.word	0x0800aee1
 800aeb4:	0800aecf 	.word	0x0800aecf
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee1 	.word	0x0800aee1
 800aec0:	0800aee1 	.word	0x0800aee1
 800aec4:	0800aedb 	.word	0x0800aedb
 800aec8:	2300      	movs	r3, #0
 800aeca:	77fb      	strb	r3, [r7, #31]
 800aecc:	e117      	b.n	800b0fe <UART_SetConfig+0x34e>
 800aece:	2302      	movs	r3, #2
 800aed0:	77fb      	strb	r3, [r7, #31]
 800aed2:	e114      	b.n	800b0fe <UART_SetConfig+0x34e>
 800aed4:	2304      	movs	r3, #4
 800aed6:	77fb      	strb	r3, [r7, #31]
 800aed8:	e111      	b.n	800b0fe <UART_SetConfig+0x34e>
 800aeda:	2308      	movs	r3, #8
 800aedc:	77fb      	strb	r3, [r7, #31]
 800aede:	e10e      	b.n	800b0fe <UART_SetConfig+0x34e>
 800aee0:	2310      	movs	r3, #16
 800aee2:	77fb      	strb	r3, [r7, #31]
 800aee4:	bf00      	nop
 800aee6:	e10a      	b.n	800b0fe <UART_SetConfig+0x34e>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a71      	ldr	r2, [pc, #452]	; (800b0b4 <UART_SetConfig+0x304>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d120      	bne.n	800af34 <UART_SetConfig+0x184>
 800aef2:	4b6e      	ldr	r3, [pc, #440]	; (800b0ac <UART_SetConfig+0x2fc>)
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d00f      	beq.n	800af20 <UART_SetConfig+0x170>
 800af00:	2b10      	cmp	r3, #16
 800af02:	d802      	bhi.n	800af0a <UART_SetConfig+0x15a>
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <UART_SetConfig+0x164>
 800af08:	e010      	b.n	800af2c <UART_SetConfig+0x17c>
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	d005      	beq.n	800af1a <UART_SetConfig+0x16a>
 800af0e:	2b30      	cmp	r3, #48	; 0x30
 800af10:	d009      	beq.n	800af26 <UART_SetConfig+0x176>
 800af12:	e00b      	b.n	800af2c <UART_SetConfig+0x17c>
 800af14:	2300      	movs	r3, #0
 800af16:	77fb      	strb	r3, [r7, #31]
 800af18:	e0f1      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af1a:	2302      	movs	r3, #2
 800af1c:	77fb      	strb	r3, [r7, #31]
 800af1e:	e0ee      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af20:	2304      	movs	r3, #4
 800af22:	77fb      	strb	r3, [r7, #31]
 800af24:	e0eb      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af26:	2308      	movs	r3, #8
 800af28:	77fb      	strb	r3, [r7, #31]
 800af2a:	e0e8      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af2c:	2310      	movs	r3, #16
 800af2e:	77fb      	strb	r3, [r7, #31]
 800af30:	bf00      	nop
 800af32:	e0e4      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a5f      	ldr	r2, [pc, #380]	; (800b0b8 <UART_SetConfig+0x308>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d120      	bne.n	800af80 <UART_SetConfig+0x1d0>
 800af3e:	4b5b      	ldr	r3, [pc, #364]	; (800b0ac <UART_SetConfig+0x2fc>)
 800af40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af48:	2b40      	cmp	r3, #64	; 0x40
 800af4a:	d00f      	beq.n	800af6c <UART_SetConfig+0x1bc>
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	d802      	bhi.n	800af56 <UART_SetConfig+0x1a6>
 800af50:	2b00      	cmp	r3, #0
 800af52:	d005      	beq.n	800af60 <UART_SetConfig+0x1b0>
 800af54:	e010      	b.n	800af78 <UART_SetConfig+0x1c8>
 800af56:	2b80      	cmp	r3, #128	; 0x80
 800af58:	d005      	beq.n	800af66 <UART_SetConfig+0x1b6>
 800af5a:	2bc0      	cmp	r3, #192	; 0xc0
 800af5c:	d009      	beq.n	800af72 <UART_SetConfig+0x1c2>
 800af5e:	e00b      	b.n	800af78 <UART_SetConfig+0x1c8>
 800af60:	2300      	movs	r3, #0
 800af62:	77fb      	strb	r3, [r7, #31]
 800af64:	e0cb      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af66:	2302      	movs	r3, #2
 800af68:	77fb      	strb	r3, [r7, #31]
 800af6a:	e0c8      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af6c:	2304      	movs	r3, #4
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e0c5      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af72:	2308      	movs	r3, #8
 800af74:	77fb      	strb	r3, [r7, #31]
 800af76:	e0c2      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af78:	2310      	movs	r3, #16
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	bf00      	nop
 800af7e:	e0be      	b.n	800b0fe <UART_SetConfig+0x34e>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a4d      	ldr	r2, [pc, #308]	; (800b0bc <UART_SetConfig+0x30c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d124      	bne.n	800afd4 <UART_SetConfig+0x224>
 800af8a:	4b48      	ldr	r3, [pc, #288]	; (800b0ac <UART_SetConfig+0x2fc>)
 800af8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af98:	d012      	beq.n	800afc0 <UART_SetConfig+0x210>
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9e:	d802      	bhi.n	800afa6 <UART_SetConfig+0x1f6>
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d007      	beq.n	800afb4 <UART_SetConfig+0x204>
 800afa4:	e012      	b.n	800afcc <UART_SetConfig+0x21c>
 800afa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afaa:	d006      	beq.n	800afba <UART_SetConfig+0x20a>
 800afac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afb0:	d009      	beq.n	800afc6 <UART_SetConfig+0x216>
 800afb2:	e00b      	b.n	800afcc <UART_SetConfig+0x21c>
 800afb4:	2300      	movs	r3, #0
 800afb6:	77fb      	strb	r3, [r7, #31]
 800afb8:	e0a1      	b.n	800b0fe <UART_SetConfig+0x34e>
 800afba:	2302      	movs	r3, #2
 800afbc:	77fb      	strb	r3, [r7, #31]
 800afbe:	e09e      	b.n	800b0fe <UART_SetConfig+0x34e>
 800afc0:	2304      	movs	r3, #4
 800afc2:	77fb      	strb	r3, [r7, #31]
 800afc4:	e09b      	b.n	800b0fe <UART_SetConfig+0x34e>
 800afc6:	2308      	movs	r3, #8
 800afc8:	77fb      	strb	r3, [r7, #31]
 800afca:	e098      	b.n	800b0fe <UART_SetConfig+0x34e>
 800afcc:	2310      	movs	r3, #16
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	bf00      	nop
 800afd2:	e094      	b.n	800b0fe <UART_SetConfig+0x34e>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a39      	ldr	r2, [pc, #228]	; (800b0c0 <UART_SetConfig+0x310>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d124      	bne.n	800b028 <UART_SetConfig+0x278>
 800afde:	4b33      	ldr	r3, [pc, #204]	; (800b0ac <UART_SetConfig+0x2fc>)
 800afe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afec:	d012      	beq.n	800b014 <UART_SetConfig+0x264>
 800afee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff2:	d802      	bhi.n	800affa <UART_SetConfig+0x24a>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d007      	beq.n	800b008 <UART_SetConfig+0x258>
 800aff8:	e012      	b.n	800b020 <UART_SetConfig+0x270>
 800affa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800affe:	d006      	beq.n	800b00e <UART_SetConfig+0x25e>
 800b000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b004:	d009      	beq.n	800b01a <UART_SetConfig+0x26a>
 800b006:	e00b      	b.n	800b020 <UART_SetConfig+0x270>
 800b008:	2301      	movs	r3, #1
 800b00a:	77fb      	strb	r3, [r7, #31]
 800b00c:	e077      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b00e:	2302      	movs	r3, #2
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e074      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b014:	2304      	movs	r3, #4
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e071      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b01a:	2308      	movs	r3, #8
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e06e      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b020:	2310      	movs	r3, #16
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	bf00      	nop
 800b026:	e06a      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a25      	ldr	r2, [pc, #148]	; (800b0c4 <UART_SetConfig+0x314>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d124      	bne.n	800b07c <UART_SetConfig+0x2cc>
 800b032:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <UART_SetConfig+0x2fc>)
 800b034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b038:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b040:	d012      	beq.n	800b068 <UART_SetConfig+0x2b8>
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b046:	d802      	bhi.n	800b04e <UART_SetConfig+0x29e>
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d007      	beq.n	800b05c <UART_SetConfig+0x2ac>
 800b04c:	e012      	b.n	800b074 <UART_SetConfig+0x2c4>
 800b04e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b052:	d006      	beq.n	800b062 <UART_SetConfig+0x2b2>
 800b054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b058:	d009      	beq.n	800b06e <UART_SetConfig+0x2be>
 800b05a:	e00b      	b.n	800b074 <UART_SetConfig+0x2c4>
 800b05c:	2300      	movs	r3, #0
 800b05e:	77fb      	strb	r3, [r7, #31]
 800b060:	e04d      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b062:	2302      	movs	r3, #2
 800b064:	77fb      	strb	r3, [r7, #31]
 800b066:	e04a      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b068:	2304      	movs	r3, #4
 800b06a:	77fb      	strb	r3, [r7, #31]
 800b06c:	e047      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b06e:	2308      	movs	r3, #8
 800b070:	77fb      	strb	r3, [r7, #31]
 800b072:	e044      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b074:	2310      	movs	r3, #16
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	bf00      	nop
 800b07a:	e040      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a11      	ldr	r2, [pc, #68]	; (800b0c8 <UART_SetConfig+0x318>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d139      	bne.n	800b0fa <UART_SetConfig+0x34a>
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <UART_SetConfig+0x2fc>)
 800b088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b08c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b094:	d027      	beq.n	800b0e6 <UART_SetConfig+0x336>
 800b096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b09a:	d817      	bhi.n	800b0cc <UART_SetConfig+0x31c>
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d01c      	beq.n	800b0da <UART_SetConfig+0x32a>
 800b0a0:	e027      	b.n	800b0f2 <UART_SetConfig+0x342>
 800b0a2:	bf00      	nop
 800b0a4:	efff69f3 	.word	0xefff69f3
 800b0a8:	40011000 	.word	0x40011000
 800b0ac:	40023800 	.word	0x40023800
 800b0b0:	40004400 	.word	0x40004400
 800b0b4:	40004800 	.word	0x40004800
 800b0b8:	40004c00 	.word	0x40004c00
 800b0bc:	40005000 	.word	0x40005000
 800b0c0:	40011400 	.word	0x40011400
 800b0c4:	40007800 	.word	0x40007800
 800b0c8:	40007c00 	.word	0x40007c00
 800b0cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d0:	d006      	beq.n	800b0e0 <UART_SetConfig+0x330>
 800b0d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b0d6:	d009      	beq.n	800b0ec <UART_SetConfig+0x33c>
 800b0d8:	e00b      	b.n	800b0f2 <UART_SetConfig+0x342>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	77fb      	strb	r3, [r7, #31]
 800b0de:	e00e      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	77fb      	strb	r3, [r7, #31]
 800b0e4:	e00b      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b0e6:	2304      	movs	r3, #4
 800b0e8:	77fb      	strb	r3, [r7, #31]
 800b0ea:	e008      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	77fb      	strb	r3, [r7, #31]
 800b0f0:	e005      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b0f2:	2310      	movs	r3, #16
 800b0f4:	77fb      	strb	r3, [r7, #31]
 800b0f6:	bf00      	nop
 800b0f8:	e001      	b.n	800b0fe <UART_SetConfig+0x34e>
 800b0fa:	2310      	movs	r3, #16
 800b0fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b106:	d17f      	bne.n	800b208 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b108:	7ffb      	ldrb	r3, [r7, #31]
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	d85c      	bhi.n	800b1c8 <UART_SetConfig+0x418>
 800b10e:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <UART_SetConfig+0x364>)
 800b110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b114:	0800b139 	.word	0x0800b139
 800b118:	0800b159 	.word	0x0800b159
 800b11c:	0800b179 	.word	0x0800b179
 800b120:	0800b1c9 	.word	0x0800b1c9
 800b124:	0800b191 	.word	0x0800b191
 800b128:	0800b1c9 	.word	0x0800b1c9
 800b12c:	0800b1c9 	.word	0x0800b1c9
 800b130:	0800b1c9 	.word	0x0800b1c9
 800b134:	0800b1b1 	.word	0x0800b1b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b138:	f7fc f8d0 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800b13c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	005a      	lsls	r2, r3, #1
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	441a      	add	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b152:	b29b      	uxth	r3, r3
 800b154:	61bb      	str	r3, [r7, #24]
        break;
 800b156:	e03a      	b.n	800b1ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b158:	f7fc f8d4 	bl	8007304 <HAL_RCC_GetPCLK2Freq>
 800b15c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	005a      	lsls	r2, r3, #1
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	085b      	lsrs	r3, r3, #1
 800b168:	441a      	add	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b172:	b29b      	uxth	r3, r3
 800b174:	61bb      	str	r3, [r7, #24]
        break;
 800b176:	e02a      	b.n	800b1ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	085a      	lsrs	r2, r3, #1
 800b17e:	4b5f      	ldr	r3, [pc, #380]	; (800b2fc <UART_SetConfig+0x54c>)
 800b180:	4413      	add	r3, r2
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	6852      	ldr	r2, [r2, #4]
 800b186:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	61bb      	str	r3, [r7, #24]
        break;
 800b18e:	e01e      	b.n	800b1ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b190:	f7fb ffe6 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 800b194:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	005a      	lsls	r2, r3, #1
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	441a      	add	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	61bb      	str	r3, [r7, #24]
        break;
 800b1ae:	e00e      	b.n	800b1ce <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	61bb      	str	r3, [r7, #24]
        break;
 800b1c6:	e002      	b.n	800b1ce <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	75fb      	strb	r3, [r7, #23]
        break;
 800b1cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b0f      	cmp	r3, #15
 800b1d2:	d916      	bls.n	800b202 <UART_SetConfig+0x452>
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1da:	d212      	bcs.n	800b202 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	f023 030f 	bic.w	r3, r3, #15
 800b1e4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	085b      	lsrs	r3, r3, #1
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	897b      	ldrh	r3, [r7, #10]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	897a      	ldrh	r2, [r7, #10]
 800b1fe:	60da      	str	r2, [r3, #12]
 800b200:	e070      	b.n	800b2e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
 800b206:	e06d      	b.n	800b2e4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b208:	7ffb      	ldrb	r3, [r7, #31]
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d859      	bhi.n	800b2c2 <UART_SetConfig+0x512>
 800b20e:	a201      	add	r2, pc, #4	; (adr r2, 800b214 <UART_SetConfig+0x464>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b239 	.word	0x0800b239
 800b218:	0800b257 	.word	0x0800b257
 800b21c:	0800b275 	.word	0x0800b275
 800b220:	0800b2c3 	.word	0x0800b2c3
 800b224:	0800b28d 	.word	0x0800b28d
 800b228:	0800b2c3 	.word	0x0800b2c3
 800b22c:	0800b2c3 	.word	0x0800b2c3
 800b230:	0800b2c3 	.word	0x0800b2c3
 800b234:	0800b2ab 	.word	0x0800b2ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b238:	f7fc f850 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800b23c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	085a      	lsrs	r2, r3, #1
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	441a      	add	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b250:	b29b      	uxth	r3, r3
 800b252:	61bb      	str	r3, [r7, #24]
        break;
 800b254:	e038      	b.n	800b2c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b256:	f7fc f855 	bl	8007304 <HAL_RCC_GetPCLK2Freq>
 800b25a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	085a      	lsrs	r2, r3, #1
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	441a      	add	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26e:	b29b      	uxth	r3, r3
 800b270:	61bb      	str	r3, [r7, #24]
        break;
 800b272:	e029      	b.n	800b2c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	085a      	lsrs	r2, r3, #1
 800b27a:	4b21      	ldr	r3, [pc, #132]	; (800b300 <UART_SetConfig+0x550>)
 800b27c:	4413      	add	r3, r2
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	6852      	ldr	r2, [r2, #4]
 800b282:	fbb3 f3f2 	udiv	r3, r3, r2
 800b286:	b29b      	uxth	r3, r3
 800b288:	61bb      	str	r3, [r7, #24]
        break;
 800b28a:	e01d      	b.n	800b2c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b28c:	f7fb ff68 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 800b290:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	085a      	lsrs	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	441a      	add	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	61bb      	str	r3, [r7, #24]
        break;
 800b2a8:	e00e      	b.n	800b2c8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	085b      	lsrs	r3, r3, #1
 800b2b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	61bb      	str	r3, [r7, #24]
        break;
 800b2c0:	e002      	b.n	800b2c8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
        break;
 800b2c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	2b0f      	cmp	r3, #15
 800b2cc:	d908      	bls.n	800b2e0 <UART_SetConfig+0x530>
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d4:	d204      	bcs.n	800b2e0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	e001      	b.n	800b2e4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	01e84800 	.word	0x01e84800
 800b300:	00f42400 	.word	0x00f42400

0800b304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	f003 0308 	and.w	r3, r3, #8
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	f003 0310 	and.w	r3, r3, #16
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00a      	beq.n	800b3b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	f003 0320 	and.w	r3, r3, #32
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d01a      	beq.n	800b41a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b402:	d10a      	bne.n	800b41a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	605a      	str	r2, [r3, #4]
  }
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b456:	f7f8 f8f9 	bl	800364c <HAL_GetTick>
 800b45a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0308 	and.w	r3, r3, #8
 800b466:	2b08      	cmp	r3, #8
 800b468:	d10e      	bne.n	800b488 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b46a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f814 	bl	800b4a6 <UART_WaitOnFlagUntilTimeout>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e00a      	b.n	800b49e <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2220      	movs	r2, #32
 800b48c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	603b      	str	r3, [r7, #0]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4b6:	e05d      	b.n	800b574 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4be:	d059      	beq.n	800b574 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4c0:	f7f8 f8c4 	bl	800364c <HAL_GetTick>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d302      	bcc.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d11b      	bne.n	800b50e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f022 0201 	bic.w	r2, r2, #1
 800b4f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2220      	movs	r2, #32
 800b500:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e042      	b.n	800b594 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 0304 	and.w	r3, r3, #4
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d02b      	beq.n	800b574 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	69db      	ldr	r3, [r3, #28]
 800b522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b52a:	d123      	bne.n	800b574 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b534:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b544:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0201 	bic.w	r2, r2, #1
 800b554:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2220      	movs	r2, #32
 800b55a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2220      	movs	r2, #32
 800b560:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2220      	movs	r2, #32
 800b566:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e00f      	b.n	800b594 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69da      	ldr	r2, [r3, #28]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	4013      	ands	r3, r2
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	429a      	cmp	r2, r3
 800b582:	bf0c      	ite	eq
 800b584:	2301      	moveq	r3, #1
 800b586:	2300      	movne	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	461a      	mov	r2, r3
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d092      	beq.n	800b4b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d027      	beq.n	800b606 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <FMC_SDRAM_Init+0xe0>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5cc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b5d2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b5d8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b5de:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b5e4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b5ea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b5f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b5f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	e032      	b.n	800b66c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b612:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b61c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b622:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	4b12      	ldr	r3, [pc, #72]	; (800b67c <FMC_SDRAM_Init+0xe0>)
 800b634:	4013      	ands	r3, r2
 800b636:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b640:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b646:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b64c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b652:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b658:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	ffff8000 	.word	0xffff8000

0800b680 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b680:	b480      	push	{r7}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d02e      	beq.n	800b6f8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6a6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b6c0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b6ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b6d4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b6de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	609a      	str	r2, [r3, #8]
 800b6f6:	e039      	b.n	800b76c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4b1e      	ldr	r3, [pc, #120]	; (800b77c <FMC_SDRAM_Timing_Init+0xfc>)
 800b702:	4013      	ands	r3, r2
 800b704:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	3b01      	subs	r3, #1
 800b714:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b716:	4313      	orrs	r3, r2
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b72a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	3b01      	subs	r3, #1
 800b738:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b73a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	3b01      	subs	r3, #1
 800b742:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b744:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b74e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	3b01      	subs	r3, #1
 800b756:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b758:	4313      	orrs	r3, r2
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	ff0f0fff 	.word	0xff0f0fff

0800b780 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b798:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b7a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	371c      	adds	r7, #28
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	695a      	ldr	r2, [r3, #20]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	431a      	orrs	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	b480      	push	{r7}
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	f107 001c 	add.w	r0, r7, #28
 800b7f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b7fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b800:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b802:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b806:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b80a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b80e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b812:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <SDMMC_Init+0x54>)
 800b820:	4013      	ands	r3, r2
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	b004      	add	sp, #16
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	ffff8100 	.word	0xffff8100

0800b840 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2203      	movs	r2, #3
 800b866:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b868:	2002      	movs	r0, #2
 800b86a:	f7f7 fefb 	bl	8003664 <HAL_Delay>
  
  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 0303 	and.w	r3, r3, #3
}
 800b888:	4618      	mov	r0, r3
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b8b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b8be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	4b06      	ldr	r3, [pc, #24]	; (800b8e4 <SDMMC_SendCommand+0x50>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	fffff000 	.word	0xfffff000

0800b8e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	b2db      	uxtb	r3, r3
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b902:	b480      	push	{r7}
 800b904:	b085      	sub	sp, #20
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3314      	adds	r3, #20
 800b910:	461a      	mov	r2, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	4413      	add	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
}  
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b94e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b954:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b95a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	431a      	orrs	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b972:	2300      	movs	r3, #0

}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b088      	sub	sp, #32
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b98e:	2310      	movs	r3, #16
 800b990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b99a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b99e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a0:	f107 0308 	add.w	r3, r7, #8
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ff74 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b0:	2110      	movs	r1, #16
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fa42 	bl	800be3c <SDMMC_GetCmdResp1>
 800b9b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b9d2:	2311      	movs	r3, #17
 800b9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d6:	2340      	movs	r3, #64	; 0x40
 800b9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff ff52 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f4:	2111      	movs	r1, #17
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fa20 	bl	800be3c <SDMMC_GetCmdResp1>
 800b9fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fe:	69fb      	ldr	r3, [r7, #28]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3720      	adds	r7, #32
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ba16:	2312      	movs	r3, #18
 800ba18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba28:	f107 0308 	add.w	r3, r7, #8
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff ff30 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ba34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba38:	2112      	movs	r1, #18
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f9fe 	bl	800be3c <SDMMC_GetCmdResp1>
 800ba40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba42:	69fb      	ldr	r3, [r7, #28]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3720      	adds	r7, #32
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b088      	sub	sp, #32
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ba5a:	2318      	movs	r3, #24
 800ba5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5e:	2340      	movs	r3, #64	; 0x40
 800ba60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba6c:	f107 0308 	add.w	r3, r7, #8
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff ff0e 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ba78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7c:	2118      	movs	r1, #24
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f9dc 	bl	800be3c <SDMMC_GetCmdResp1>
 800ba84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba86:	69fb      	ldr	r3, [r7, #28]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ba9e:	2319      	movs	r3, #25
 800baa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baa2:	2340      	movs	r3, #64	; 0x40
 800baa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff feec 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	2119      	movs	r1, #25
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9ba 	bl	800be3c <SDMMC_GetCmdResp1>
 800bac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baca:	69fb      	ldr	r3, [r7, #28]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bae0:	230c      	movs	r3, #12
 800bae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bae8:	2300      	movs	r3, #0
 800baea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baf2:	f107 0308 	add.w	r3, r7, #8
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff fecb 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bafe:	4a05      	ldr	r2, [pc, #20]	; (800bb14 <SDMMC_CmdStopTransfer+0x40>)
 800bb00:	210c      	movs	r1, #12
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f99a 	bl	800be3c <SDMMC_GetCmdResp1>
 800bb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	05f5e100 	.word	0x05f5e100

0800bb18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	; 0x28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bb28:	2307      	movs	r3, #7
 800bb2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb2c:	2340      	movs	r3, #64	; 0x40
 800bb2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb30:	2300      	movs	r3, #0
 800bb32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb38:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb3a:	f107 0310 	add.w	r3, r7, #16
 800bb3e:	4619      	mov	r1, r3
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fea7 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb4a:	2107      	movs	r1, #7
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 f975 	bl	800be3c <SDMMC_GetCmdResp1>
 800bb52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3728      	adds	r7, #40	; 0x28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b088      	sub	sp, #32
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb7c:	f107 0308 	add.w	r3, r7, #8
 800bb80:	4619      	mov	r1, r3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff fe86 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f92f 	bl	800bdec <SDMMC_GetCmdError>
 800bb8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb90:	69fb      	ldr	r3, [r7, #28]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3720      	adds	r7, #32
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b088      	sub	sp, #32
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bba2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bba8:	2308      	movs	r3, #8
 800bbaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbac:	2340      	movs	r3, #64	; 0x40
 800bbae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbba:	f107 0308 	add.w	r3, r7, #8
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff fe67 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fb18 	bl	800c1fc <SDMMC_GetCmdResp7>
 800bbcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbce:	69fb      	ldr	r3, [r7, #28]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3720      	adds	r7, #32
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bbe6:	2337      	movs	r3, #55	; 0x37
 800bbe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbf8:	f107 0308 	add.w	r3, r7, #8
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff fe48 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bc04:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc08:	2137      	movs	r1, #55	; 0x37
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f916 	bl	800be3c <SDMMC_GetCmdResp1>
 800bc10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc12:	69fb      	ldr	r3, [r7, #28]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <SDMMC_CmdAppOperCommand+0x44>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bc2e:	2329      	movs	r3, #41	; 0x29
 800bc30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc32:	2340      	movs	r3, #64	; 0x40
 800bc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc36:	2300      	movs	r3, #0
 800bc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc40:	f107 0308 	add.w	r3, r7, #8
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff fe24 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 fa27 	bl	800c0a0 <SDMMC_GetCmdResp3>
 800bc52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc54:	69fb      	ldr	r3, [r7, #28]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	80100000 	.word	0x80100000

0800bc64 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bc72:	2306      	movs	r3, #6
 800bc74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc84:	f107 0308 	add.w	r3, r7, #8
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7ff fe02 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bc90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc94:	2106      	movs	r1, #6
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f8d0 	bl	800be3c <SDMMC_GetCmdResp1>
 800bc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3720      	adds	r7, #32
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bcb4:	2333      	movs	r3, #51	; 0x33
 800bcb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcb8:	2340      	movs	r3, #64	; 0x40
 800bcba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fde1 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bcd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd6:	2133      	movs	r1, #51	; 0x33
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f8af 	bl	800be3c <SDMMC_GetCmdResp1>
 800bcde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bce0:	69fb      	ldr	r3, [r7, #28]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3720      	adds	r7, #32
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b088      	sub	sp, #32
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bcfa:	23c0      	movs	r3, #192	; 0xc0
 800bcfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd08:	f107 0308 	add.w	r3, r7, #8
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f7ff fdc0 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f97d 	bl	800c014 <SDMMC_GetCmdResp2>
 800bd1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3720      	adds	r7, #32
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b088      	sub	sp, #32
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bd34:	2309      	movs	r3, #9
 800bd36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bd38:	23c0      	movs	r3, #192	; 0xc0
 800bd3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd46:	f107 0308 	add.w	r3, r7, #8
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7ff fda1 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f95e 	bl	800c014 <SDMMC_GetCmdResp2>
 800bd58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bd72:	2303      	movs	r3, #3
 800bd74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd76:	2340      	movs	r3, #64	; 0x40
 800bd78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd84:	f107 0308 	add.w	r3, r7, #8
 800bd88:	4619      	mov	r1, r3
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff fd82 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	2103      	movs	r1, #3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f9bd 	bl	800c114 <SDMMC_GetCmdResp6>
 800bd9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3720      	adds	r7, #32
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b088      	sub	sp, #32
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bdb4:	230d      	movs	r3, #13
 800bdb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdc6:	f107 0308 	add.w	r3, r7, #8
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fd61 	bl	800b894 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bdd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd6:	210d      	movs	r1, #13
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f82f 	bl	800be3c <SDMMC_GetCmdResp1>
 800bdde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bde0:	69fb      	ldr	r3, [r7, #28]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3720      	adds	r7, #32
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bdec:	b490      	push	{r4, r7}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <SDMMC_GetCmdError+0x48>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a0f      	ldr	r2, [pc, #60]	; (800be38 <SDMMC_GetCmdError+0x4c>)
 800bdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfe:	0a5b      	lsrs	r3, r3, #9
 800be00:	f241 3288 	movw	r2, #5000	; 0x1388
 800be04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be08:	4623      	mov	r3, r4
 800be0a:	1e5c      	subs	r4, r3, #1
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be14:	e009      	b.n	800be2a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0f2      	beq.n	800be08 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	22c5      	movs	r2, #197	; 0xc5
 800be26:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bc90      	pop	{r4, r7}
 800be32:	4770      	bx	lr
 800be34:	20000018 	.word	0x20000018
 800be38:	10624dd3 	.word	0x10624dd3

0800be3c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800be3c:	b590      	push	{r4, r7, lr}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	460b      	mov	r3, r1
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be4a:	4b6f      	ldr	r3, [pc, #444]	; (800c008 <SDMMC_GetCmdResp1+0x1cc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a6f      	ldr	r2, [pc, #444]	; (800c00c <SDMMC_GetCmdResp1+0x1d0>)
 800be50:	fba2 2303 	umull	r2, r3, r2, r3
 800be54:	0a5b      	lsrs	r3, r3, #9
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800be5c:	4623      	mov	r3, r4
 800be5e:	1e5c      	subs	r4, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d102      	bne.n	800be6a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be68:	e0c9      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be6e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be76:	2b00      	cmp	r3, #0
 800be78:	d0f0      	beq.n	800be5c <SDMMC_GetCmdResp1+0x20>
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1eb      	bne.n	800be5c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be88:	f003 0304 	and.w	r3, r3, #4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d004      	beq.n	800be9a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2204      	movs	r2, #4
 800be94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be96:	2304      	movs	r3, #4
 800be98:	e0b1      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d004      	beq.n	800beb0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beac:	2301      	movs	r3, #1
 800beae:	e0a6      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	22c5      	movs	r2, #197	; 0xc5
 800beb4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fd16 	bl	800b8e8 <SDMMC_GetCommandResponse>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	7afb      	ldrb	r3, [r7, #11]
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d001      	beq.n	800beca <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e099      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800beca:	2100      	movs	r1, #0
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f7ff fd18 	bl	800b902 <SDMMC_GetResponse>
 800bed2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4b4e      	ldr	r3, [pc, #312]	; (800c010 <SDMMC_GetCmdResp1+0x1d4>)
 800bed8:	4013      	ands	r3, r2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bede:	2300      	movs	r3, #0
 800bee0:	e08d      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	da02      	bge.n	800beee <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800beec:	e087      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bef8:	2340      	movs	r3, #64	; 0x40
 800befa:	e080      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf06:	2380      	movs	r3, #128	; 0x80
 800bf08:	e079      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf18:	e071      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf28:	e069      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf38:	e061      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf48:	e059      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf58:	e051      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf68:	e049      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf78:	e041      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d002      	beq.n	800bf8a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800bf84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf88:	e039      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf98:	e031      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bfa8:	e029      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bfb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bfb8:	e021      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bfc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bfc8:	e019      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d002      	beq.n	800bfda <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bfd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bfd8:	e011      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bfe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bfe8:	e009      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f003 0308 	and.w	r3, r3, #8
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bff4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bff8:	e001      	b.n	800bffe <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bffe:	4618      	mov	r0, r3
 800c000:	371c      	adds	r7, #28
 800c002:	46bd      	mov	sp, r7
 800c004:	bd90      	pop	{r4, r7, pc}
 800c006:	bf00      	nop
 800c008:	20000018 	.word	0x20000018
 800c00c:	10624dd3 	.word	0x10624dd3
 800c010:	fdffe008 	.word	0xfdffe008

0800c014 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c014:	b490      	push	{r4, r7}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c01c:	4b1e      	ldr	r3, [pc, #120]	; (800c098 <SDMMC_GetCmdResp2+0x84>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a1e      	ldr	r2, [pc, #120]	; (800c09c <SDMMC_GetCmdResp2+0x88>)
 800c022:	fba2 2303 	umull	r2, r3, r2, r3
 800c026:	0a5b      	lsrs	r3, r3, #9
 800c028:	f241 3288 	movw	r2, #5000	; 0x1388
 800c02c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c030:	4623      	mov	r3, r4
 800c032:	1e5c      	subs	r4, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c03c:	e026      	b.n	800c08c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c042:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0f0      	beq.n	800c030 <SDMMC_GetCmdResp2+0x1c>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1eb      	bne.n	800c030 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2204      	movs	r2, #4
 800c068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c06a:	2304      	movs	r3, #4
 800c06c:	e00e      	b.n	800c08c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c080:	2301      	movs	r3, #1
 800c082:	e003      	b.n	800c08c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	22c5      	movs	r2, #197	; 0xc5
 800c088:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bc90      	pop	{r4, r7}
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20000018 	.word	0x20000018
 800c09c:	10624dd3 	.word	0x10624dd3

0800c0a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c0a0:	b490      	push	{r4, r7}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0a8:	4b18      	ldr	r3, [pc, #96]	; (800c10c <SDMMC_GetCmdResp3+0x6c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a18      	ldr	r2, [pc, #96]	; (800c110 <SDMMC_GetCmdResp3+0x70>)
 800c0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b2:	0a5b      	lsrs	r3, r3, #9
 800c0b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c0bc:	4623      	mov	r3, r4
 800c0be:	1e5c      	subs	r4, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0c8:	e01b      	b.n	800c102 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0f0      	beq.n	800c0bc <SDMMC_GetCmdResp3+0x1c>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1eb      	bne.n	800c0bc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2204      	movs	r2, #4
 800c0f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0f6:	2304      	movs	r3, #4
 800c0f8:	e003      	b.n	800c102 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	22c5      	movs	r2, #197	; 0xc5
 800c0fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bc90      	pop	{r4, r7}
 800c10a:	4770      	bx	lr
 800c10c:	20000018 	.word	0x20000018
 800c110:	10624dd3 	.word	0x10624dd3

0800c114 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	460b      	mov	r3, r1
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c122:	4b34      	ldr	r3, [pc, #208]	; (800c1f4 <SDMMC_GetCmdResp6+0xe0>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a34      	ldr	r2, [pc, #208]	; (800c1f8 <SDMMC_GetCmdResp6+0xe4>)
 800c128:	fba2 2303 	umull	r2, r3, r2, r3
 800c12c:	0a5b      	lsrs	r3, r3, #9
 800c12e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c132:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c136:	4623      	mov	r3, r4
 800c138:	1e5c      	subs	r4, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c13e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c142:	e052      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <SDMMC_GetCmdResp6+0x22>
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1eb      	bne.n	800c136 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2204      	movs	r2, #4
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c170:	2304      	movs	r3, #4
 800c172:	e03a      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d004      	beq.n	800c18a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c186:	2301      	movs	r3, #1
 800c188:	e02f      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f7ff fbac 	bl	800b8e8 <SDMMC_GetCommandResponse>
 800c190:	4603      	mov	r3, r0
 800c192:	461a      	mov	r2, r3
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	4293      	cmp	r3, r2
 800c198:	d001      	beq.n	800c19e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e025      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	22c5      	movs	r2, #197	; 0xc5
 800c1a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff fbab 	bl	800b902 <SDMMC_GetResponse>
 800c1ac:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	0c1b      	lsrs	r3, r3, #16
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e011      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1d4:	e009      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c1e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c1e4:	e001      	b.n	800c1ea <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd90      	pop	{r4, r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000018 	.word	0x20000018
 800c1f8:	10624dd3 	.word	0x10624dd3

0800c1fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c1fc:	b490      	push	{r4, r7}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c204:	4b21      	ldr	r3, [pc, #132]	; (800c28c <SDMMC_GetCmdResp7+0x90>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a21      	ldr	r2, [pc, #132]	; (800c290 <SDMMC_GetCmdResp7+0x94>)
 800c20a:	fba2 2303 	umull	r2, r3, r2, r3
 800c20e:	0a5b      	lsrs	r3, r3, #9
 800c210:	f241 3288 	movw	r2, #5000	; 0x1388
 800c214:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c218:	4623      	mov	r3, r4
 800c21a:	1e5c      	subs	r4, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c224:	e02c      	b.n	800c280 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0f0      	beq.n	800c218 <SDMMC_GetCmdResp7+0x1c>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1eb      	bne.n	800c218 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d004      	beq.n	800c256 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2204      	movs	r2, #4
 800c250:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c252:	2304      	movs	r3, #4
 800c254:	e014      	b.n	800c280 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c268:	2301      	movs	r3, #1
 800c26a:	e009      	b.n	800c280 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2240      	movs	r2, #64	; 0x40
 800c27c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c27e:	2300      	movs	r3, #0
  
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bc90      	pop	{r4, r7}
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20000018 	.word	0x20000018
 800c290:	10624dd3 	.word	0x10624dd3

0800c294 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <MX_FATFS_Init+0x18>)
 800c29a:	4805      	ldr	r0, [pc, #20]	; (800c2b0 <MX_FATFS_Init+0x1c>)
 800c29c:	f000 fa96 	bl	800c7cc <FATFS_LinkDriver>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <MX_FATFS_Init+0x20>)
 800c2a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c2a8:	bf00      	nop
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	2000c920 	.word	0x2000c920
 800c2b0:	080296f8 	.word	0x080296f8
 800c2b4:	2000c91c 	.word	0x2000c91c

0800c2b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c2c2:	f000 f87b 	bl	800c3bc <BSP_SD_IsDetected>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d001      	beq.n	800c2d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c2cc:	2302      	movs	r3, #2
 800c2ce:	e012      	b.n	800c2f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c2d0:	480b      	ldr	r0, [pc, #44]	; (800c300 <BSP_SD_Init+0x48>)
 800c2d2:	f7fc fae9 	bl	80088a8 <HAL_SD_Init>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c2da:	79fb      	ldrb	r3, [r7, #7]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d109      	bne.n	800c2f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c2e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2e4:	4806      	ldr	r0, [pc, #24]	; (800c300 <BSP_SD_Init+0x48>)
 800c2e6:	f7fc ff2b 	bl	8009140 <HAL_SD_ConfigWideBusOperation>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	2000c3cc 	.word	0x2000c3cc

0800c304 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	68f9      	ldr	r1, [r7, #12]
 800c31a:	4806      	ldr	r0, [pc, #24]	; (800c334 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c31c:	f7fc fb5c 	bl	80089d8 <HAL_SD_ReadBlocks_DMA>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	2000c3cc 	.word	0x2000c3cc

0800c338 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	68f9      	ldr	r1, [r7, #12]
 800c34e:	4806      	ldr	r0, [pc, #24]	; (800c368 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c350:	f7fc fc2e 	bl	8008bb0 <HAL_SD_WriteBlocks_DMA>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	2000c3cc 	.word	0x2000c3cc

0800c36c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c370:	4805      	ldr	r0, [pc, #20]	; (800c388 <BSP_SD_GetCardState+0x1c>)
 800c372:	f7fc ff61 	bl	8009238 <HAL_SD_GetCardState>
 800c376:	4603      	mov	r3, r0
 800c378:	2b04      	cmp	r3, #4
 800c37a:	bf14      	ite	ne
 800c37c:	2301      	movne	r3, #1
 800c37e:	2300      	moveq	r3, #0
 800c380:	b2db      	uxtb	r3, r3
}
 800c382:	4618      	mov	r0, r3
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000c3cc 	.word	0x2000c3cc

0800c38c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c394:	6879      	ldr	r1, [r7, #4]
 800c396:	4803      	ldr	r0, [pc, #12]	; (800c3a4 <BSP_SD_GetCardInfo+0x18>)
 800c398:	f7fc fea6 	bl	80090e8 <HAL_SD_GetCardInfo>
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	2000c3cc 	.word	0x2000c3cc

0800c3a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c3b0:	f000 f9b2 	bl	800c718 <BSP_SD_ReadCpltCallback>
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c3c6:	f000 f80b 	bl	800c3e0 <BSP_PlatformIsDetected>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c3d4:	79fb      	ldrb	r3, [r7, #7]
 800c3d6:	b2db      	uxtb	r3, r3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c3ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3ee:	4806      	ldr	r0, [pc, #24]	; (800c408 <BSP_PlatformIsDetected+0x28>)
 800c3f0:	f7f9 f90e 	bl	8005610 <HAL_GPIO_ReadPin>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
}  
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	40020800 	.word	0x40020800

0800c40c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c414:	f000 fa26 	bl	800c864 <osKernelSysTick>
 800c418:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c41a:	e006      	b.n	800c42a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c41c:	f7ff ffa6 	bl	800c36c <BSP_SD_GetCardState>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c426:	2300      	movs	r3, #0
 800c428:	e009      	b.n	800c43e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c42a:	f000 fa1b 	bl	800c864 <osKernelSysTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d8f0      	bhi.n	800c41c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c43a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <SD_CheckStatus+0x38>)
 800c454:	2201      	movs	r2, #1
 800c456:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c458:	f7ff ff88 	bl	800c36c <BSP_SD_GetCardState>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d107      	bne.n	800c472 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c462:	4b07      	ldr	r3, [pc, #28]	; (800c480 <SD_CheckStatus+0x38>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	4b04      	ldr	r3, [pc, #16]	; (800c480 <SD_CheckStatus+0x38>)
 800c470:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c472:	4b03      	ldr	r3, [pc, #12]	; (800c480 <SD_CheckStatus+0x38>)
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	b2db      	uxtb	r3, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20000021 	.word	0x20000021

0800c484 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c484:	b590      	push	{r4, r7, lr}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c48e:	4b20      	ldr	r3, [pc, #128]	; (800c510 <SD_initialize+0x8c>)
 800c490:	2201      	movs	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c494:	f000 f9da 	bl	800c84c <osKernelRunning>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d030      	beq.n	800c500 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c49e:	f7ff ff0b 	bl	800c2b8 <BSP_SD_Init>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d107      	bne.n	800c4b8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff ffcc 	bl	800c448 <SD_CheckStatus>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4b16      	ldr	r3, [pc, #88]	; (800c510 <SD_initialize+0x8c>)
 800c4b6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c4b8:	4b15      	ldr	r3, [pc, #84]	; (800c510 <SD_initialize+0x8c>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d01e      	beq.n	800c500 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c4c2:	4b14      	ldr	r3, [pc, #80]	; (800c514 <SD_initialize+0x90>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10e      	bne.n	800c4e8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c4ca:	4b13      	ldr	r3, [pc, #76]	; (800c518 <SD_initialize+0x94>)
 800c4cc:	f107 0408 	add.w	r4, r7, #8
 800c4d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800c4d6:	f107 0308 	add.w	r3, r7, #8
 800c4da:	2100      	movs	r1, #0
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fa31 	bl	800c944 <osMessageCreate>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b0b      	ldr	r3, [pc, #44]	; (800c514 <SD_initialize+0x90>)
 800c4e6:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <SD_initialize+0x90>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d107      	bne.n	800c500 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800c4f0:	4b07      	ldr	r3, [pc, #28]	; (800c510 <SD_initialize+0x8c>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	f043 0301 	orr.w	r3, r3, #1
 800c4fa:	b2da      	uxtb	r2, r3
 800c4fc:	4b04      	ldr	r3, [pc, #16]	; (800c510 <SD_initialize+0x8c>)
 800c4fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c500:	4b03      	ldr	r3, [pc, #12]	; (800c510 <SD_initialize+0x8c>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b2db      	uxtb	r3, r3
}
 800c506:	4618      	mov	r0, r3
 800c508:	371c      	adds	r7, #28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd90      	pop	{r4, r7, pc}
 800c50e:	bf00      	nop
 800c510:	20000021 	.word	0x20000021
 800c514:	200003ec 	.word	0x200003ec
 800c518:	08028fd0 	.word	0x08028fd0

0800c51c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7ff ff8d 	bl	800c448 <SD_CheckStatus>
 800c52e:	4603      	mov	r3, r0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08a      	sub	sp, #40	; 0x28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	607a      	str	r2, [r7, #4]
 800c542:	603b      	str	r3, [r7, #0]
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c54e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c552:	f7ff ff5b 	bl	800c40c <SD_CheckStatusWithTimeout>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	da02      	bge.n	800c562 <SD_read+0x2a>
  {
    return res;
 800c55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c560:	e032      	b.n	800c5c8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c562:	683a      	ldr	r2, [r7, #0]
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	68b8      	ldr	r0, [r7, #8]
 800c568:	f7ff fecc 	bl	800c304 <BSP_SD_ReadBlocks_DMA>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800c572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c576:	2b00      	cmp	r3, #0
 800c578:	d124      	bne.n	800c5c4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c57a:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <SD_read+0x98>)
 800c57c:	6819      	ldr	r1, [r3, #0]
 800c57e:	f107 0314 	add.w	r3, r7, #20
 800c582:	f247 5230 	movw	r2, #30000	; 0x7530
 800c586:	4618      	mov	r0, r3
 800c588:	f000 fa46 	bl	800ca18 <osMessageGet>

    if (event.status == osEventMessage)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b10      	cmp	r3, #16
 800c590:	d118      	bne.n	800c5c4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d115      	bne.n	800c5c4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800c598:	f000 f964 	bl	800c864 <osKernelSysTick>
 800c59c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c59e:	e008      	b.n	800c5b2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c5a0:	f7ff fee4 	bl	800c36c <BSP_SD_GetCardState>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <SD_read+0x7a>
              {
                res = RES_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c5b0:	e008      	b.n	800c5c4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800c5b2:	f000 f957 	bl	800c864 <osKernelSysTick>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d9ed      	bls.n	800c5a0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3728      	adds	r7, #40	; 0x28
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	200003ec 	.word	0x200003ec

0800c5d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08a      	sub	sp, #40	; 0x28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c5ea:	f247 5030 	movw	r0, #30000	; 0x7530
 800c5ee:	f7ff ff0d 	bl	800c40c <SD_CheckStatusWithTimeout>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	da02      	bge.n	800c5fe <SD_write+0x2a>
  {
    return res;
 800c5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5fc:	e02e      	b.n	800c65c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	68b8      	ldr	r0, [r7, #8]
 800c604:	f7ff fe98 	bl	800c338 <BSP_SD_WriteBlocks_DMA>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d124      	bne.n	800c658 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800c60e:	4b15      	ldr	r3, [pc, #84]	; (800c664 <SD_write+0x90>)
 800c610:	6819      	ldr	r1, [r3, #0]
 800c612:	f107 0314 	add.w	r3, r7, #20
 800c616:	f247 5230 	movw	r2, #30000	; 0x7530
 800c61a:	4618      	mov	r0, r3
 800c61c:	f000 f9fc 	bl	800ca18 <osMessageGet>

    if (event.status == osEventMessage)
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b10      	cmp	r3, #16
 800c624:	d118      	bne.n	800c658 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d115      	bne.n	800c658 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800c62c:	f000 f91a 	bl	800c864 <osKernelSysTick>
 800c630:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c632:	e008      	b.n	800c646 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c634:	f7ff fe9a 	bl	800c36c <BSP_SD_GetCardState>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d103      	bne.n	800c646 <SD_write+0x72>
          {
            res = RES_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c644:	e008      	b.n	800c658 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800c646:	f000 f90d 	bl	800c864 <osKernelSysTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	f247 522f 	movw	r2, #29999	; 0x752f
 800c654:	4293      	cmp	r3, r2
 800c656:	d9ed      	bls.n	800c634 <SD_write+0x60>
    }

  }
#endif

  return res;
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3728      	adds	r7, #40	; 0x28
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200003ec 	.word	0x200003ec

0800c668 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08c      	sub	sp, #48	; 0x30
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	603a      	str	r2, [r7, #0]
 800c672:	71fb      	strb	r3, [r7, #7]
 800c674:	460b      	mov	r3, r1
 800c676:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c67e:	4b25      	ldr	r3, [pc, #148]	; (800c714 <SD_ioctl+0xac>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <SD_ioctl+0x28>
 800c68c:	2303      	movs	r3, #3
 800c68e:	e03c      	b.n	800c70a <SD_ioctl+0xa2>

  switch (cmd)
 800c690:	79bb      	ldrb	r3, [r7, #6]
 800c692:	2b03      	cmp	r3, #3
 800c694:	d834      	bhi.n	800c700 <SD_ioctl+0x98>
 800c696:	a201      	add	r2, pc, #4	; (adr r2, 800c69c <SD_ioctl+0x34>)
 800c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69c:	0800c6ad 	.word	0x0800c6ad
 800c6a0:	0800c6b5 	.word	0x0800c6b5
 800c6a4:	0800c6cd 	.word	0x0800c6cd
 800c6a8:	0800c6e7 	.word	0x0800c6e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6b2:	e028      	b.n	800c706 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6b4:	f107 030c 	add.w	r3, r7, #12
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fe67 	bl	800c38c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6ca:	e01c      	b.n	800c706 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6cc:	f107 030c 	add.w	r3, r7, #12
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff fe5b 	bl	800c38c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6e4:	e00f      	b.n	800c706 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff fe4e 	bl	800c38c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	0a5a      	lsrs	r2, r3, #9
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6fe:	e002      	b.n	800c706 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c700:	2304      	movs	r3, #4
 800c702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3730      	adds	r7, #48	; 0x30
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20000021 	.word	0x20000021

0800c718 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <BSP_SD_ReadCpltCallback+0x18>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2200      	movs	r2, #0
 800c722:	2101      	movs	r1, #1
 800c724:	4618      	mov	r0, r3
 800c726:	f000 f937 	bl	800c998 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800c72a:	bf00      	nop
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	200003ec 	.word	0x200003ec

0800c734 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	4613      	mov	r3, r2
 800c740:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c742:	2301      	movs	r3, #1
 800c744:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c74a:	4b1f      	ldr	r3, [pc, #124]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c74c:	7a5b      	ldrb	r3, [r3, #9]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d131      	bne.n	800c7b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c754:	4b1c      	ldr	r3, [pc, #112]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c756:	7a5b      	ldrb	r3, [r3, #9]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	461a      	mov	r2, r3
 800c75c:	4b1a      	ldr	r3, [pc, #104]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c75e:	2100      	movs	r1, #0
 800c760:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c762:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c764:	7a5b      	ldrb	r3, [r3, #9]
 800c766:	b2db      	uxtb	r3, r3
 800c768:	4a17      	ldr	r2, [pc, #92]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c774:	7a5b      	ldrb	r3, [r3, #9]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	461a      	mov	r2, r3
 800c77a:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c77c:	4413      	add	r3, r2
 800c77e:	79fa      	ldrb	r2, [r7, #7]
 800c780:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c784:	7a5b      	ldrb	r3, [r3, #9]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	b2d1      	uxtb	r1, r2
 800c78c:	4a0e      	ldr	r2, [pc, #56]	; (800c7c8 <FATFS_LinkDriverEx+0x94>)
 800c78e:	7251      	strb	r1, [r2, #9]
 800c790:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c792:	7dbb      	ldrb	r3, [r7, #22]
 800c794:	3330      	adds	r3, #48	; 0x30
 800c796:	b2da      	uxtb	r2, r3
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	223a      	movs	r2, #58	; 0x3a
 800c7a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	222f      	movs	r2, #47	; 0x2f
 800c7aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3303      	adds	r3, #3
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	200003f0 	.word	0x200003f0

0800c7cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ffaa 	bl	800c734 <FATFS_LinkDriverEx>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7fc:	2b84      	cmp	r3, #132	; 0x84
 800c7fe:	d005      	beq.n	800c80c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c800:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	4413      	add	r3, r2
 800c808:	3303      	adds	r3, #3
 800c80a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c80c:	68fb      	ldr	r3, [r7, #12]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b083      	sub	sp, #12
 800c81e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c820:	f3ef 8305 	mrs	r3, IPSR
 800c824:	607b      	str	r3, [r7, #4]
  return(result);
 800c826:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bf14      	ite	ne
 800c82c:	2301      	movne	r3, #1
 800c82e:	2300      	moveq	r3, #0
 800c830:	b2db      	uxtb	r3, r3
}
 800c832:	4618      	mov	r0, r3
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c842:	f001 faff 	bl	800de44 <vTaskStartScheduler>
  
  return osOK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c850:	f001 ff4a 	bl	800e6e8 <xTaskGetSchedulerState>
 800c854:	4603      	mov	r3, r0
 800c856:	2b01      	cmp	r3, #1
 800c858:	d101      	bne.n	800c85e <osKernelRunning+0x12>
    return 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	e000      	b.n	800c860 <osKernelRunning+0x14>
  else
    return 1;
 800c85e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c860:	4618      	mov	r0, r3
 800c862:	bd80      	pop	{r7, pc}

0800c864 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c868:	f7ff ffd7 	bl	800c81a <inHandlerMode>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c872:	f001 fc05 	bl	800e080 <xTaskGetTickCountFromISR>
 800c876:	4603      	mov	r3, r0
 800c878:	e002      	b.n	800c880 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c87a:	f001 fbf1 	bl	800e060 <xTaskGetTickCount>
 800c87e:	4603      	mov	r3, r0
  }
}
 800c880:	4618      	mov	r0, r3
 800c882:	bd80      	pop	{r7, pc}

0800c884 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c886:	b089      	sub	sp, #36	; 0x24
 800c888:	af04      	add	r7, sp, #16
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	695b      	ldr	r3, [r3, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d020      	beq.n	800c8d8 <osThreadCreate+0x54>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01c      	beq.n	800c8d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685c      	ldr	r4, [r3, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681d      	ldr	r5, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691e      	ldr	r6, [r3, #16]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff ff9a 	bl	800c7ea <makeFreeRtosPriority>
 800c8b6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8c0:	9202      	str	r2, [sp, #8]
 800c8c2:	9301      	str	r3, [sp, #4]
 800c8c4:	9100      	str	r1, [sp, #0]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	4632      	mov	r2, r6
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f001 f8e0 	bl	800da92 <xTaskCreateStatic>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	e01c      	b.n	800c912 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685c      	ldr	r4, [r3, #4]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8e4:	b29e      	uxth	r6, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7ff ff7c 	bl	800c7ea <makeFreeRtosPriority>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	f107 030c 	add.w	r3, r7, #12
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	9200      	str	r2, [sp, #0]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	4632      	mov	r2, r6
 800c900:	4629      	mov	r1, r5
 800c902:	4620      	mov	r0, r4
 800c904:	f001 f925 	bl	800db52 <xTaskCreate>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d001      	beq.n	800c912 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	e000      	b.n	800c914 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c912:	68fb      	ldr	r3, [r7, #12]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c91c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d001      	beq.n	800c932 <osDelay+0x16>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	e000      	b.n	800c934 <osDelay+0x18>
 800c932:	2301      	movs	r3, #1
 800c934:	4618      	mov	r0, r3
 800c936:	f001 fa4f 	bl	800ddd8 <vTaskDelay>
  
  return osOK;
 800c93a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c944:	b590      	push	{r4, r7, lr}
 800c946:	b085      	sub	sp, #20
 800c948:	af02      	add	r7, sp, #8
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d012      	beq.n	800c97c <osMessageCreate+0x38>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00e      	beq.n	800c97c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6859      	ldr	r1, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689a      	ldr	r2, [r3, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68dc      	ldr	r4, [r3, #12]
 800c96e:	2300      	movs	r3, #0
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	4623      	mov	r3, r4
 800c974:	f000 f9e2 	bl	800cd3c <xQueueGenericCreateStatic>
 800c978:	4603      	mov	r3, r0
 800c97a:	e008      	b.n	800c98e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6818      	ldr	r0, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	4619      	mov	r1, r3
 800c988:	f000 fa55 	bl	800ce36 <xQueueGenericCreate>
 800c98c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c98e:	4618      	mov	r0, r3
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	bd90      	pop	{r4, r7, pc}
	...

0800c998 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <osMessagePut+0x1e>
    ticks = 1;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c9b6:	f7ff ff30 	bl	800c81a <inHandlerMode>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d018      	beq.n	800c9f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c9c0:	f107 0210 	add.w	r2, r7, #16
 800c9c4:	f107 0108 	add.w	r1, r7, #8
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 fb96 	bl	800d0fc <xQueueGenericSendFromISR>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d001      	beq.n	800c9da <osMessagePut+0x42>
      return osErrorOS;
 800c9d6:	23ff      	movs	r3, #255	; 0xff
 800c9d8:	e018      	b.n	800ca0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d014      	beq.n	800ca0a <osMessagePut+0x72>
 800c9e0:	4b0c      	ldr	r3, [pc, #48]	; (800ca14 <osMessagePut+0x7c>)
 800c9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e6:	601a      	str	r2, [r3, #0]
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	e00b      	b.n	800ca0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c9f2:	f107 0108 	add.w	r1, r7, #8
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 fa7c 	bl	800cef8 <xQueueGenericSend>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d001      	beq.n	800ca0a <osMessagePut+0x72>
      return osErrorOS;
 800ca06:	23ff      	movs	r3, #255	; 0xff
 800ca08:	e000      	b.n	800ca0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	e000ed04 	.word	0xe000ed04

0800ca18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ca18:	b590      	push	{r4, r7, lr}
 800ca1a:	b08b      	sub	sp, #44	; 0x2c
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ca32:	2380      	movs	r3, #128	; 0x80
 800ca34:	617b      	str	r3, [r7, #20]
    return event;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	461c      	mov	r4, r3
 800ca3a:	f107 0314 	add.w	r3, r7, #20
 800ca3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca46:	e054      	b.n	800caf2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca56:	d103      	bne.n	800ca60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ca58:	f04f 33ff 	mov.w	r3, #4294967295
 800ca5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5e:	e009      	b.n	800ca74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d006      	beq.n	800ca74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <osMessageGet+0x5c>
      ticks = 1;
 800ca70:	2301      	movs	r3, #1
 800ca72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ca74:	f7ff fed1 	bl	800c81a <inHandlerMode>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01c      	beq.n	800cab8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ca7e:	f107 0220 	add.w	r2, r7, #32
 800ca82:	f107 0314 	add.w	r3, r7, #20
 800ca86:	3304      	adds	r3, #4
 800ca88:	4619      	mov	r1, r3
 800ca8a:	68b8      	ldr	r0, [r7, #8]
 800ca8c:	f000 fe56 	bl	800d73c <xQueueReceiveFromISR>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d102      	bne.n	800ca9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ca96:	2310      	movs	r3, #16
 800ca98:	617b      	str	r3, [r7, #20]
 800ca9a:	e001      	b.n	800caa0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d01d      	beq.n	800cae2 <osMessageGet+0xca>
 800caa6:	4b15      	ldr	r3, [pc, #84]	; (800cafc <osMessageGet+0xe4>)
 800caa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	e014      	b.n	800cae2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cab8:	f107 0314 	add.w	r3, r7, #20
 800cabc:	3304      	adds	r3, #4
 800cabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac0:	4619      	mov	r1, r3
 800cac2:	68b8      	ldr	r0, [r7, #8]
 800cac4:	f000 fc48 	bl	800d358 <xQueueReceive>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d102      	bne.n	800cad4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cace:	2310      	movs	r3, #16
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	e006      	b.n	800cae2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <osMessageGet+0xc6>
 800cada:	2300      	movs	r3, #0
 800cadc:	e000      	b.n	800cae0 <osMessageGet+0xc8>
 800cade:	2340      	movs	r3, #64	; 0x40
 800cae0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	461c      	mov	r4, r3
 800cae6:	f107 0314 	add.w	r3, r7, #20
 800caea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800caee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	372c      	adds	r7, #44	; 0x2c
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd90      	pop	{r4, r7, pc}
 800cafa:	bf00      	nop
 800cafc:	e000ed04 	.word	0xe000ed04

0800cb00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f103 0208 	add.w	r2, r3, #8
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f04f 32ff 	mov.w	r2, #4294967295
 800cb18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f103 0208 	add.w	r2, r3, #8
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f103 0208 	add.w	r2, r3, #8
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb4e:	bf00      	nop
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	1c5a      	adds	r2, r3, #1
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cba2:	b480      	push	{r7}
 800cba4:	b085      	sub	sp, #20
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb8:	d103      	bne.n	800cbc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e00c      	b.n	800cbdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3308      	adds	r3, #8
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	e002      	b.n	800cbd0 <vListInsert+0x2e>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d2f6      	bcs.n	800cbca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	1c5a      	adds	r2, r3, #1
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	601a      	str	r2, [r3, #0]
}
 800cc08:	bf00      	nop
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	6892      	ldr	r2, [r2, #8]
 800cc2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	6852      	ldr	r2, [r2, #4]
 800cc34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d103      	bne.n	800cc48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	1e5a      	subs	r2, r3, #1
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10b      	bne.n	800cc94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	b672      	cpsid	i
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	b662      	cpsie	i
 800cc90:	60bb      	str	r3, [r7, #8]
 800cc92:	e7fe      	b.n	800cc92 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cc94:	f002 f870 	bl	800ed78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca0:	68f9      	ldr	r1, [r7, #12]
 800cca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cca4:	fb01 f303 	mul.w	r3, r1, r3
 800cca8:	441a      	add	r2, r3
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	68f9      	ldr	r1, [r7, #12]
 800ccc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccca:	fb01 f303 	mul.w	r3, r1, r3
 800ccce:	441a      	add	r2, r3
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	22ff      	movs	r2, #255	; 0xff
 800ccd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	22ff      	movs	r2, #255	; 0xff
 800cce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d114      	bne.n	800cd14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d01a      	beq.n	800cd28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3310      	adds	r3, #16
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f001 fb36 	bl	800e368 <xTaskRemoveFromEventList>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d012      	beq.n	800cd28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd02:	4b0d      	ldr	r3, [pc, #52]	; (800cd38 <xQueueGenericReset+0xd0>)
 800cd04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	e009      	b.n	800cd28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	3310      	adds	r3, #16
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fef1 	bl	800cb00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3324      	adds	r3, #36	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff feec 	bl	800cb00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd28:	f002 f858 	bl	800eddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd2c:	2301      	movs	r3, #1
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08e      	sub	sp, #56	; 0x38
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10b      	bne.n	800cd68 <xQueueGenericCreateStatic+0x2c>
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	b672      	cpsid	i
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	b662      	cpsie	i
 800cd64:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd66:	e7fe      	b.n	800cd66 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d10b      	bne.n	800cd86 <xQueueGenericCreateStatic+0x4a>
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	b672      	cpsid	i
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	b662      	cpsie	i
 800cd82:	627b      	str	r3, [r7, #36]	; 0x24
 800cd84:	e7fe      	b.n	800cd84 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <xQueueGenericCreateStatic+0x56>
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <xQueueGenericCreateStatic+0x5a>
 800cd92:	2301      	movs	r3, #1
 800cd94:	e000      	b.n	800cd98 <xQueueGenericCreateStatic+0x5c>
 800cd96:	2300      	movs	r3, #0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10b      	bne.n	800cdb4 <xQueueGenericCreateStatic+0x78>
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	b672      	cpsid	i
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	b662      	cpsie	i
 800cdb0:	623b      	str	r3, [r7, #32]
 800cdb2:	e7fe      	b.n	800cdb2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d102      	bne.n	800cdc0 <xQueueGenericCreateStatic+0x84>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <xQueueGenericCreateStatic+0x88>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e000      	b.n	800cdc6 <xQueueGenericCreateStatic+0x8a>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10b      	bne.n	800cde2 <xQueueGenericCreateStatic+0xa6>
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	b672      	cpsid	i
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	b662      	cpsie	i
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e7fe      	b.n	800cde0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cde2:	2348      	movs	r3, #72	; 0x48
 800cde4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b48      	cmp	r3, #72	; 0x48
 800cdea:	d00b      	beq.n	800ce04 <xQueueGenericCreateStatic+0xc8>
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	e7fe      	b.n	800ce02 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00d      	beq.n	800ce2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce18:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	4613      	mov	r3, r2
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 f846 	bl	800ceb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	; 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b08a      	sub	sp, #40	; 0x28
 800ce3a:	af02      	add	r7, sp, #8
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	4613      	mov	r3, r2
 800ce42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10b      	bne.n	800ce62 <xQueueGenericCreate+0x2c>
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	b672      	cpsid	i
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	b662      	cpsie	i
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	e7fe      	b.n	800ce60 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	61fb      	str	r3, [r7, #28]
 800ce6c:	e004      	b.n	800ce78 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	fb02 f303 	mul.w	r3, r2, r3
 800ce76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	3348      	adds	r3, #72	; 0x48
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f002 f89d 	bl	800efbc <pvPortMalloc>
 800ce82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d011      	beq.n	800ceae <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	3348      	adds	r3, #72	; 0x48
 800ce92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce9c:	79fa      	ldrb	r2, [r7, #7]
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4613      	mov	r3, r2
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 f805 	bl	800ceb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ceae:	69bb      	ldr	r3, [r7, #24]
	}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3720      	adds	r7, #32
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d103      	bne.n	800ced4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	e002      	b.n	800ceda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cee6:	2101      	movs	r1, #1
 800cee8:	69b8      	ldr	r0, [r7, #24]
 800ceea:	f7ff febd 	bl	800cc68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
	...

0800cef8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08e      	sub	sp, #56	; 0x38
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf06:	2300      	movs	r3, #0
 800cf08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10b      	bne.n	800cf2c <xQueueGenericSend+0x34>
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	b672      	cpsid	i
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	b662      	cpsie	i
 800cf28:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf2a:	e7fe      	b.n	800cf2a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <xQueueGenericSend+0x42>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <xQueueGenericSend+0x46>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e000      	b.n	800cf40 <xQueueGenericSend+0x48>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10b      	bne.n	800cf5c <xQueueGenericSend+0x64>
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	b672      	cpsid	i
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	b662      	cpsie	i
 800cf58:	627b      	str	r3, [r7, #36]	; 0x24
 800cf5a:	e7fe      	b.n	800cf5a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d103      	bne.n	800cf6a <xQueueGenericSend+0x72>
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d101      	bne.n	800cf6e <xQueueGenericSend+0x76>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e000      	b.n	800cf70 <xQueueGenericSend+0x78>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10b      	bne.n	800cf8c <xQueueGenericSend+0x94>
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	b672      	cpsid	i
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	b662      	cpsie	i
 800cf88:	623b      	str	r3, [r7, #32]
 800cf8a:	e7fe      	b.n	800cf8a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf8c:	f001 fbac 	bl	800e6e8 <xTaskGetSchedulerState>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <xQueueGenericSend+0xa4>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <xQueueGenericSend+0xa8>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e000      	b.n	800cfa2 <xQueueGenericSend+0xaa>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10b      	bne.n	800cfbe <xQueueGenericSend+0xc6>
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	b672      	cpsid	i
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	b662      	cpsie	i
 800cfba:	61fb      	str	r3, [r7, #28]
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfbe:	f001 fedb 	bl	800ed78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d302      	bcc.n	800cfd4 <xQueueGenericSend+0xdc>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d129      	bne.n	800d028 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfda:	f000 fc4a 	bl	800d872 <prvCopyDataToQueue>
 800cfde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d010      	beq.n	800d00a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	3324      	adds	r3, #36	; 0x24
 800cfec:	4618      	mov	r0, r3
 800cfee:	f001 f9bb 	bl	800e368 <xTaskRemoveFromEventList>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d013      	beq.n	800d020 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cff8:	4b3f      	ldr	r3, [pc, #252]	; (800d0f8 <xQueueGenericSend+0x200>)
 800cffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cffe:	601a      	str	r2, [r3, #0]
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	e00a      	b.n	800d020 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d007      	beq.n	800d020 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d010:	4b39      	ldr	r3, [pc, #228]	; (800d0f8 <xQueueGenericSend+0x200>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d020:	f001 fedc 	bl	800eddc <vPortExitCritical>
				return pdPASS;
 800d024:	2301      	movs	r3, #1
 800d026:	e063      	b.n	800d0f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d103      	bne.n	800d036 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d02e:	f001 fed5 	bl	800eddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d032:	2300      	movs	r3, #0
 800d034:	e05c      	b.n	800d0f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d106      	bne.n	800d04a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d03c:	f107 0314 	add.w	r3, r7, #20
 800d040:	4618      	mov	r0, r3
 800d042:	f001 f9f5 	bl	800e430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d046:	2301      	movs	r3, #1
 800d048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d04a:	f001 fec7 	bl	800eddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d04e:	f000 ff5b 	bl	800df08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d052:	f001 fe91 	bl	800ed78 <vPortEnterCritical>
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d05c:	b25b      	sxtb	r3, r3
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d103      	bne.n	800d06c <xQueueGenericSend+0x174>
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d072:	b25b      	sxtb	r3, r3
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d078:	d103      	bne.n	800d082 <xQueueGenericSend+0x18a>
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d082:	f001 feab 	bl	800eddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d086:	1d3a      	adds	r2, r7, #4
 800d088:	f107 0314 	add.w	r3, r7, #20
 800d08c:	4611      	mov	r1, r2
 800d08e:	4618      	mov	r0, r3
 800d090:	f001 f9e4 	bl	800e45c <xTaskCheckForTimeOut>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d124      	bne.n	800d0e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d09a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d09c:	f000 fce1 	bl	800da62 <prvIsQueueFull>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d018      	beq.n	800d0d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	3310      	adds	r3, #16
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f001 f934 	bl	800e31c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b6:	f000 fc6c 	bl	800d992 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0ba:	f000 ff33 	bl	800df24 <xTaskResumeAll>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f47f af7c 	bne.w	800cfbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <xQueueGenericSend+0x200>)
 800d0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0cc:	601a      	str	r2, [r3, #0]
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	e772      	b.n	800cfbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0da:	f000 fc5a 	bl	800d992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0de:	f000 ff21 	bl	800df24 <xTaskResumeAll>
 800d0e2:	e76c      	b.n	800cfbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e6:	f000 fc54 	bl	800d992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0ea:	f000 ff1b 	bl	800df24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3738      	adds	r7, #56	; 0x38
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08e      	sub	sp, #56	; 0x38
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10b      	bne.n	800d12c <xQueueGenericSendFromISR+0x30>
 800d114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d118:	b672      	cpsid	i
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	b662      	cpsie	i
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
 800d12a:	e7fe      	b.n	800d12a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d103      	bne.n	800d13a <xQueueGenericSendFromISR+0x3e>
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <xQueueGenericSendFromISR+0x42>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueGenericSendFromISR+0x44>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10b      	bne.n	800d15c <xQueueGenericSendFromISR+0x60>
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	b672      	cpsid	i
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	b662      	cpsie	i
 800d158:	623b      	str	r3, [r7, #32]
 800d15a:	e7fe      	b.n	800d15a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d103      	bne.n	800d16a <xQueueGenericSendFromISR+0x6e>
 800d162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	2b01      	cmp	r3, #1
 800d168:	d101      	bne.n	800d16e <xQueueGenericSendFromISR+0x72>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e000      	b.n	800d170 <xQueueGenericSendFromISR+0x74>
 800d16e:	2300      	movs	r3, #0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10b      	bne.n	800d18c <xQueueGenericSendFromISR+0x90>
 800d174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d178:	b672      	cpsid	i
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	b662      	cpsie	i
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	e7fe      	b.n	800d18a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d18c:	f001 fed4 	bl	800ef38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d190:	f3ef 8211 	mrs	r2, BASEPRI
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	b672      	cpsid	i
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	b662      	cpsie	i
 800d1a8:	61ba      	str	r2, [r7, #24]
 800d1aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d302      	bcc.n	800d1c2 <xQueueGenericSendFromISR+0xc6>
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d12c      	bne.n	800d21c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	68b9      	ldr	r1, [r7, #8]
 800d1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1d2:	f000 fb4e 	bl	800d872 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1de:	d112      	bne.n	800d206 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d016      	beq.n	800d216 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	3324      	adds	r3, #36	; 0x24
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 f8bb 	bl	800e368 <xTaskRemoveFromEventList>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00e      	beq.n	800d216 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00b      	beq.n	800d216 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	e007      	b.n	800d216 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d20a:	3301      	adds	r3, #1
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	b25a      	sxtb	r2, r3
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d216:	2301      	movs	r3, #1
 800d218:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d21a:	e001      	b.n	800d220 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	637b      	str	r3, [r7, #52]	; 0x34
 800d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d222:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3738      	adds	r7, #56	; 0x38
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08e      	sub	sp, #56	; 0x38
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10b      	bne.n	800d260 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	b672      	cpsid	i
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	b662      	cpsie	i
 800d25c:	623b      	str	r3, [r7, #32]
 800d25e:	e7fe      	b.n	800d25e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00b      	beq.n	800d280 <xQueueGiveFromISR+0x4c>
 800d268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26c:	b672      	cpsid	i
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	b662      	cpsie	i
 800d27c:	61fb      	str	r3, [r7, #28]
 800d27e:	e7fe      	b.n	800d27e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d103      	bne.n	800d290 <xQueueGiveFromISR+0x5c>
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d101      	bne.n	800d294 <xQueueGiveFromISR+0x60>
 800d290:	2301      	movs	r3, #1
 800d292:	e000      	b.n	800d296 <xQueueGiveFromISR+0x62>
 800d294:	2300      	movs	r3, #0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10b      	bne.n	800d2b2 <xQueueGiveFromISR+0x7e>
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	b672      	cpsid	i
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	b662      	cpsie	i
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	e7fe      	b.n	800d2b0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2b2:	f001 fe41 	bl	800ef38 <vPortValidateInterruptPriority>
	__asm volatile
 800d2b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	b672      	cpsid	i
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	b662      	cpsie	i
 800d2ce:	617a      	str	r2, [r7, #20]
 800d2d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d2d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d22b      	bcs.n	800d33e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d300:	d112      	bne.n	800d328 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	2b00      	cmp	r3, #0
 800d308:	d016      	beq.n	800d338 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	3324      	adds	r3, #36	; 0x24
 800d30e:	4618      	mov	r0, r3
 800d310:	f001 f82a 	bl	800e368 <xTaskRemoveFromEventList>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00e      	beq.n	800d338 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00b      	beq.n	800d338 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2201      	movs	r2, #1
 800d324:	601a      	str	r2, [r3, #0]
 800d326:	e007      	b.n	800d338 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32c:	3301      	adds	r3, #1
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	b25a      	sxtb	r2, r3
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d338:	2301      	movs	r3, #1
 800d33a:	637b      	str	r3, [r7, #52]	; 0x34
 800d33c:	e001      	b.n	800d342 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	637b      	str	r3, [r7, #52]	; 0x34
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3738      	adds	r7, #56	; 0x38
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
	...

0800d358 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08c      	sub	sp, #48	; 0x30
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d364:	2300      	movs	r3, #0
 800d366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10b      	bne.n	800d38a <xQueueReceive+0x32>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	b672      	cpsid	i
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	b662      	cpsie	i
 800d386:	623b      	str	r3, [r7, #32]
 800d388:	e7fe      	b.n	800d388 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <xQueueReceive+0x40>
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <xQueueReceive+0x44>
 800d398:	2301      	movs	r3, #1
 800d39a:	e000      	b.n	800d39e <xQueueReceive+0x46>
 800d39c:	2300      	movs	r3, #0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10b      	bne.n	800d3ba <xQueueReceive+0x62>
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	b672      	cpsid	i
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	b662      	cpsie	i
 800d3b6:	61fb      	str	r3, [r7, #28]
 800d3b8:	e7fe      	b.n	800d3b8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3ba:	f001 f995 	bl	800e6e8 <xTaskGetSchedulerState>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d102      	bne.n	800d3ca <xQueueReceive+0x72>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <xQueueReceive+0x76>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e000      	b.n	800d3d0 <xQueueReceive+0x78>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10b      	bne.n	800d3ec <xQueueReceive+0x94>
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	b672      	cpsid	i
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	b662      	cpsie	i
 800d3e8:	61bb      	str	r3, [r7, #24]
 800d3ea:	e7fe      	b.n	800d3ea <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d3ec:	f001 fcc4 	bl	800ed78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d01f      	beq.n	800d43c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3fc:	68b9      	ldr	r1, [r7, #8]
 800d3fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d400:	f000 faa1 	bl	800d946 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	1e5a      	subs	r2, r3, #1
 800d408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00f      	beq.n	800d434 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	3310      	adds	r3, #16
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 ffa5 	bl	800e368 <xTaskRemoveFromEventList>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d007      	beq.n	800d434 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d424:	4b3c      	ldr	r3, [pc, #240]	; (800d518 <xQueueReceive+0x1c0>)
 800d426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d434:	f001 fcd2 	bl	800eddc <vPortExitCritical>
				return pdPASS;
 800d438:	2301      	movs	r3, #1
 800d43a:	e069      	b.n	800d510 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d103      	bne.n	800d44a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d442:	f001 fccb 	bl	800eddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d446:	2300      	movs	r3, #0
 800d448:	e062      	b.n	800d510 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d450:	f107 0310 	add.w	r3, r7, #16
 800d454:	4618      	mov	r0, r3
 800d456:	f000 ffeb 	bl	800e430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d45a:	2301      	movs	r3, #1
 800d45c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d45e:	f001 fcbd 	bl	800eddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d462:	f000 fd51 	bl	800df08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d466:	f001 fc87 	bl	800ed78 <vPortEnterCritical>
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d470:	b25b      	sxtb	r3, r3
 800d472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d476:	d103      	bne.n	800d480 <xQueueReceive+0x128>
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d486:	b25b      	sxtb	r3, r3
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48c:	d103      	bne.n	800d496 <xQueueReceive+0x13e>
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	2200      	movs	r2, #0
 800d492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d496:	f001 fca1 	bl	800eddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d49a:	1d3a      	adds	r2, r7, #4
 800d49c:	f107 0310 	add.w	r3, r7, #16
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 ffda 	bl	800e45c <xTaskCheckForTimeOut>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d123      	bne.n	800d4f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4b0:	f000 fac1 	bl	800da36 <prvIsQueueEmpty>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d017      	beq.n	800d4ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	3324      	adds	r3, #36	; 0x24
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 ff2a 	bl	800e31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ca:	f000 fa62 	bl	800d992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4ce:	f000 fd29 	bl	800df24 <xTaskResumeAll>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d189      	bne.n	800d3ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d4d8:	4b0f      	ldr	r3, [pc, #60]	; (800d518 <xQueueReceive+0x1c0>)
 800d4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	e780      	b.n	800d3ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d4ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4ec:	f000 fa51 	bl	800d992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4f0:	f000 fd18 	bl	800df24 <xTaskResumeAll>
 800d4f4:	e77a      	b.n	800d3ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4f8:	f000 fa4b 	bl	800d992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4fc:	f000 fd12 	bl	800df24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d502:	f000 fa98 	bl	800da36 <prvIsQueueEmpty>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f43f af6f 	beq.w	800d3ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d50e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d510:	4618      	mov	r0, r3
 800d512:	3730      	adds	r7, #48	; 0x30
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	e000ed04 	.word	0xe000ed04

0800d51c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08e      	sub	sp, #56	; 0x38
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d526:	2300      	movs	r3, #0
 800d528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d52e:	2300      	movs	r3, #0
 800d530:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10b      	bne.n	800d550 <xQueueSemaphoreTake+0x34>
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	b672      	cpsid	i
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	b662      	cpsie	i
 800d54c:	623b      	str	r3, [r7, #32]
 800d54e:	e7fe      	b.n	800d54e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00b      	beq.n	800d570 <xQueueSemaphoreTake+0x54>
 800d558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55c:	b672      	cpsid	i
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	b662      	cpsie	i
 800d56c:	61fb      	str	r3, [r7, #28]
 800d56e:	e7fe      	b.n	800d56e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d570:	f001 f8ba 	bl	800e6e8 <xTaskGetSchedulerState>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <xQueueSemaphoreTake+0x64>
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d101      	bne.n	800d584 <xQueueSemaphoreTake+0x68>
 800d580:	2301      	movs	r3, #1
 800d582:	e000      	b.n	800d586 <xQueueSemaphoreTake+0x6a>
 800d584:	2300      	movs	r3, #0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10b      	bne.n	800d5a2 <xQueueSemaphoreTake+0x86>
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	b672      	cpsid	i
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	b662      	cpsie	i
 800d59e:	61bb      	str	r3, [r7, #24]
 800d5a0:	e7fe      	b.n	800d5a0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5a2:	f001 fbe9 	bl	800ed78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d024      	beq.n	800d5fc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b4:	1e5a      	subs	r2, r3, #1
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d104      	bne.n	800d5cc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d5c2:	f001 fa53 	bl	800ea6c <pvTaskIncrementMutexHeldCount>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00f      	beq.n	800d5f4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	3310      	adds	r3, #16
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 fec5 	bl	800e368 <xTaskRemoveFromEventList>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d007      	beq.n	800d5f4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d5e4:	4b54      	ldr	r3, [pc, #336]	; (800d738 <xQueueSemaphoreTake+0x21c>)
 800d5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d5f4:	f001 fbf2 	bl	800eddc <vPortExitCritical>
				return pdPASS;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e098      	b.n	800d72e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d112      	bne.n	800d628 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00b      	beq.n	800d620 <xQueueSemaphoreTake+0x104>
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	b672      	cpsid	i
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	b662      	cpsie	i
 800d61c:	617b      	str	r3, [r7, #20]
 800d61e:	e7fe      	b.n	800d61e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d620:	f001 fbdc 	bl	800eddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d624:	2300      	movs	r3, #0
 800d626:	e082      	b.n	800d72e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d62e:	f107 030c 	add.w	r3, r7, #12
 800d632:	4618      	mov	r0, r3
 800d634:	f000 fefc 	bl	800e430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d638:	2301      	movs	r3, #1
 800d63a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d63c:	f001 fbce 	bl	800eddc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d640:	f000 fc62 	bl	800df08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d644:	f001 fb98 	bl	800ed78 <vPortEnterCritical>
 800d648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d64e:	b25b      	sxtb	r3, r3
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d103      	bne.n	800d65e <xQueueSemaphoreTake+0x142>
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d664:	b25b      	sxtb	r3, r3
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d103      	bne.n	800d674 <xQueueSemaphoreTake+0x158>
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d674:	f001 fbb2 	bl	800eddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d678:	463a      	mov	r2, r7
 800d67a:	f107 030c 	add.w	r3, r7, #12
 800d67e:	4611      	mov	r1, r2
 800d680:	4618      	mov	r0, r3
 800d682:	f000 feeb 	bl	800e45c <xTaskCheckForTimeOut>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d132      	bne.n	800d6f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d68c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d68e:	f000 f9d2 	bl	800da36 <prvIsQueueEmpty>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d026      	beq.n	800d6e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d109      	bne.n	800d6b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d6a0:	f001 fb6a 	bl	800ed78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f001 f83b 	bl	800e724 <xTaskPriorityInherit>
 800d6ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d6b0:	f001 fb94 	bl	800eddc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	3324      	adds	r3, #36	; 0x24
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fe2d 	bl	800e31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6c4:	f000 f965 	bl	800d992 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6c8:	f000 fc2c 	bl	800df24 <xTaskResumeAll>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f47f af67 	bne.w	800d5a2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d6d4:	4b18      	ldr	r3, [pc, #96]	; (800d738 <xQueueSemaphoreTake+0x21c>)
 800d6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	f3bf 8f6f 	isb	sy
 800d6e4:	e75d      	b.n	800d5a2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d6e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6e8:	f000 f953 	bl	800d992 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ec:	f000 fc1a 	bl	800df24 <xTaskResumeAll>
 800d6f0:	e757      	b.n	800d5a2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f4:	f000 f94d 	bl	800d992 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6f8:	f000 fc14 	bl	800df24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6fe:	f000 f99a 	bl	800da36 <prvIsQueueEmpty>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	f43f af4c 	beq.w	800d5a2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00d      	beq.n	800d72c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d710:	f001 fb32 	bl	800ed78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d716:	f000 f894 	bl	800d842 <prvGetDisinheritPriorityAfterTimeout>
 800d71a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d722:	4618      	mov	r0, r3
 800d724:	f001 f906 	bl	800e934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d728:	f001 fb58 	bl	800eddc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d72c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3738      	adds	r7, #56	; 0x38
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	e000ed04 	.word	0xe000ed04

0800d73c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08e      	sub	sp, #56	; 0x38
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10b      	bne.n	800d76a <xQueueReceiveFromISR+0x2e>
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	b672      	cpsid	i
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	b662      	cpsie	i
 800d766:	623b      	str	r3, [r7, #32]
 800d768:	e7fe      	b.n	800d768 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d103      	bne.n	800d778 <xQueueReceiveFromISR+0x3c>
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <xQueueReceiveFromISR+0x40>
 800d778:	2301      	movs	r3, #1
 800d77a:	e000      	b.n	800d77e <xQueueReceiveFromISR+0x42>
 800d77c:	2300      	movs	r3, #0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10b      	bne.n	800d79a <xQueueReceiveFromISR+0x5e>
 800d782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d786:	b672      	cpsid	i
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	b662      	cpsie	i
 800d796:	61fb      	str	r3, [r7, #28]
 800d798:	e7fe      	b.n	800d798 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d79a:	f001 fbcd 	bl	800ef38 <vPortValidateInterruptPriority>
	__asm volatile
 800d79e:	f3ef 8211 	mrs	r2, BASEPRI
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	b672      	cpsid	i
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	b662      	cpsie	i
 800d7b6:	61ba      	str	r2, [r7, #24]
 800d7b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d7ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d02f      	beq.n	800d82a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7d4:	68b9      	ldr	r1, [r7, #8]
 800d7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7d8:	f000 f8b5 	bl	800d946 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	1e5a      	subs	r2, r3, #1
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d7e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ec:	d112      	bne.n	800d814 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d016      	beq.n	800d824 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	3310      	adds	r3, #16
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 fdb4 	bl	800e368 <xTaskRemoveFromEventList>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00e      	beq.n	800d824 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	e007      	b.n	800d824 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d818:	3301      	adds	r3, #1
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	b25a      	sxtb	r2, r3
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d824:	2301      	movs	r3, #1
 800d826:	637b      	str	r3, [r7, #52]	; 0x34
 800d828:	e001      	b.n	800d82e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	637b      	str	r3, [r7, #52]	; 0x34
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3738      	adds	r7, #56	; 0x38
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d842:	b480      	push	{r7}
 800d844:	b085      	sub	sp, #20
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d006      	beq.n	800d860 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f1c3 0307 	rsb	r3, r3, #7
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	e001      	b.n	800d864 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d860:	2300      	movs	r3, #0
 800d862:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d864:	68fb      	ldr	r3, [r7, #12]
	}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b086      	sub	sp, #24
 800d876:	af00      	add	r7, sp, #0
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d886:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10d      	bne.n	800d8ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d14d      	bne.n	800d934 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 ffc1 	bl	800e824 <xTaskPriorityDisinherit>
 800d8a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	609a      	str	r2, [r3, #8]
 800d8aa:	e043      	b.n	800d934 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d119      	bne.n	800d8e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6858      	ldr	r0, [r3, #4]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	68b9      	ldr	r1, [r7, #8]
 800d8be:	f01a fbb9 	bl	8028034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ca:	441a      	add	r2, r3
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	685a      	ldr	r2, [r3, #4]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d32b      	bcc.n	800d934 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	605a      	str	r2, [r3, #4]
 800d8e4:	e026      	b.n	800d934 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	68d8      	ldr	r0, [r3, #12]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	68b9      	ldr	r1, [r7, #8]
 800d8f2:	f01a fb9f 	bl	8028034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	425b      	negs	r3, r3
 800d900:	441a      	add	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	68da      	ldr	r2, [r3, #12]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d207      	bcs.n	800d922 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	689a      	ldr	r2, [r3, #8]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d91a:	425b      	negs	r3, r3
 800d91c:	441a      	add	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d105      	bne.n	800d934 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d002      	beq.n	800d934 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	3b01      	subs	r3, #1
 800d932:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d93c:	697b      	ldr	r3, [r7, #20]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d954:	2b00      	cmp	r3, #0
 800d956:	d018      	beq.n	800d98a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d960:	441a      	add	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68da      	ldr	r2, [r3, #12]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d303      	bcc.n	800d97a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	68d9      	ldr	r1, [r3, #12]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d982:	461a      	mov	r2, r3
 800d984:	6838      	ldr	r0, [r7, #0]
 800d986:	f01a fb55 	bl	8028034 <memcpy>
	}
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d99a:	f001 f9ed 	bl	800ed78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9a6:	e011      	b.n	800d9cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d012      	beq.n	800d9d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	3324      	adds	r3, #36	; 0x24
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 fcd7 	bl	800e368 <xTaskRemoveFromEventList>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d9c0:	f000 fdb0 	bl	800e524 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dce9      	bgt.n	800d9a8 <prvUnlockQueue+0x16>
 800d9d4:	e000      	b.n	800d9d8 <prvUnlockQueue+0x46>
					break;
 800d9d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	22ff      	movs	r2, #255	; 0xff
 800d9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d9e0:	f001 f9fc 	bl	800eddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d9e4:	f001 f9c8 	bl	800ed78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d9f0:	e011      	b.n	800da16 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d012      	beq.n	800da20 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	3310      	adds	r3, #16
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 fcb2 	bl	800e368 <xTaskRemoveFromEventList>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800da0a:	f000 fd8b 	bl	800e524 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800da0e:	7bbb      	ldrb	r3, [r7, #14]
 800da10:	3b01      	subs	r3, #1
 800da12:	b2db      	uxtb	r3, r3
 800da14:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800da16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	dce9      	bgt.n	800d9f2 <prvUnlockQueue+0x60>
 800da1e:	e000      	b.n	800da22 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800da20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	22ff      	movs	r2, #255	; 0xff
 800da26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800da2a:	f001 f9d7 	bl	800eddc <vPortExitCritical>
}
 800da2e:	bf00      	nop
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da3e:	f001 f99b 	bl	800ed78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800da4a:	2301      	movs	r3, #1
 800da4c:	60fb      	str	r3, [r7, #12]
 800da4e:	e001      	b.n	800da54 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da54:	f001 f9c2 	bl	800eddc <vPortExitCritical>

	return xReturn;
 800da58:	68fb      	ldr	r3, [r7, #12]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b084      	sub	sp, #16
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800da6a:	f001 f985 	bl	800ed78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da76:	429a      	cmp	r2, r3
 800da78:	d102      	bne.n	800da80 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800da7a:	2301      	movs	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	e001      	b.n	800da84 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800da84:	f001 f9aa 	bl	800eddc <vPortExitCritical>

	return xReturn;
 800da88:	68fb      	ldr	r3, [r7, #12]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da92:	b580      	push	{r7, lr}
 800da94:	b08e      	sub	sp, #56	; 0x38
 800da96:	af04      	add	r7, sp, #16
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
 800da9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800daa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10b      	bne.n	800dabe <xTaskCreateStatic+0x2c>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	b672      	cpsid	i
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	b662      	cpsie	i
 800daba:	623b      	str	r3, [r7, #32]
 800dabc:	e7fe      	b.n	800dabc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10b      	bne.n	800dadc <xTaskCreateStatic+0x4a>
 800dac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac8:	b672      	cpsid	i
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	b662      	cpsie	i
 800dad8:	61fb      	str	r3, [r7, #28]
 800dada:	e7fe      	b.n	800dada <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dadc:	2358      	movs	r3, #88	; 0x58
 800dade:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	2b58      	cmp	r3, #88	; 0x58
 800dae4:	d00b      	beq.n	800dafe <xTaskCreateStatic+0x6c>
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	b672      	cpsid	i
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	b662      	cpsie	i
 800dafa:	61bb      	str	r3, [r7, #24]
 800dafc:	e7fe      	b.n	800dafc <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dafe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db02:	2b00      	cmp	r3, #0
 800db04:	d01e      	beq.n	800db44 <xTaskCreateStatic+0xb2>
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d01b      	beq.n	800db44 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	2202      	movs	r2, #2
 800db1a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db1e:	2300      	movs	r3, #0
 800db20:	9303      	str	r3, [sp, #12]
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	9302      	str	r3, [sp, #8]
 800db26:	f107 0314 	add.w	r3, r7, #20
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	68b9      	ldr	r1, [r7, #8]
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f000 f850 	bl	800dbdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db3e:	f000 f8e1 	bl	800dd04 <prvAddNewTaskToReadyList>
 800db42:	e001      	b.n	800db48 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800db44:	2300      	movs	r3, #0
 800db46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db48:	697b      	ldr	r3, [r7, #20]
	}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3728      	adds	r7, #40	; 0x28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db52:	b580      	push	{r7, lr}
 800db54:	b08c      	sub	sp, #48	; 0x30
 800db56:	af04      	add	r7, sp, #16
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	60b9      	str	r1, [r7, #8]
 800db5c:	603b      	str	r3, [r7, #0]
 800db5e:	4613      	mov	r3, r2
 800db60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db62:	88fb      	ldrh	r3, [r7, #6]
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4618      	mov	r0, r3
 800db68:	f001 fa28 	bl	800efbc <pvPortMalloc>
 800db6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00e      	beq.n	800db92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db74:	2058      	movs	r0, #88	; 0x58
 800db76:	f001 fa21 	bl	800efbc <pvPortMalloc>
 800db7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d003      	beq.n	800db8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	631a      	str	r2, [r3, #48]	; 0x30
 800db88:	e005      	b.n	800db96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db8a:	6978      	ldr	r0, [r7, #20]
 800db8c:	f001 fae2 	bl	800f154 <vPortFree>
 800db90:	e001      	b.n	800db96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d017      	beq.n	800dbcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dba4:	88fa      	ldrh	r2, [r7, #6]
 800dba6:	2300      	movs	r3, #0
 800dba8:	9303      	str	r3, [sp, #12]
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	9302      	str	r3, [sp, #8]
 800dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	68b9      	ldr	r1, [r7, #8]
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f000 f80e 	bl	800dbdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbc0:	69f8      	ldr	r0, [r7, #28]
 800dbc2:	f000 f89f 	bl	800dd04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	61bb      	str	r3, [r7, #24]
 800dbca:	e002      	b.n	800dbd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbd2:	69bb      	ldr	r3, [r7, #24]
	}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	21a5      	movs	r1, #165	; 0xa5
 800dbf6:	f01a fa28 	bl	802804a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800dc04:	440b      	add	r3, r1
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	f023 0307 	bic.w	r3, r3, #7
 800dc12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00b      	beq.n	800dc36 <prvInitialiseNewTask+0x5a>
 800dc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc22:	b672      	cpsid	i
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	b662      	cpsie	i
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	e7fe      	b.n	800dc34 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01f      	beq.n	800dc7c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61fb      	str	r3, [r7, #28]
 800dc40:	e012      	b.n	800dc68 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	4413      	add	r3, r2
 800dc48:	7819      	ldrb	r1, [r3, #0]
 800dc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	4413      	add	r3, r2
 800dc50:	3334      	adds	r3, #52	; 0x34
 800dc52:	460a      	mov	r2, r1
 800dc54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	3301      	adds	r3, #1
 800dc66:	61fb      	str	r3, [r7, #28]
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b0f      	cmp	r3, #15
 800dc6c:	d9e9      	bls.n	800dc42 <prvInitialiseNewTask+0x66>
 800dc6e:	e000      	b.n	800dc72 <prvInitialiseNewTask+0x96>
			{
				break;
 800dc70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc7a:	e003      	b.n	800dc84 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc86:	2b06      	cmp	r3, #6
 800dc88:	d901      	bls.n	800dc8e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc8a:	2306      	movs	r3, #6
 800dc8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc98:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	3304      	adds	r3, #4
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe ff4b 	bl	800cb40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	3318      	adds	r3, #24
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fe ff46 	bl	800cb40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	f1c3 0207 	rsb	r2, r3, #7
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	2200      	movs	r2, #0
 800dcce:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	68f9      	ldr	r1, [r7, #12]
 800dce2:	69b8      	ldr	r0, [r7, #24]
 800dce4:	f000 ff3c 	bl	800eb60 <pxPortInitialiseStack>
 800dce8:	4602      	mov	r2, r0
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d002      	beq.n	800dcfa <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcfa:	bf00      	nop
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd0c:	f001 f834 	bl	800ed78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd10:	4b2a      	ldr	r3, [pc, #168]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3301      	adds	r3, #1
 800dd16:	4a29      	ldr	r2, [pc, #164]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd1a:	4b29      	ldr	r3, [pc, #164]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d109      	bne.n	800dd36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd22:	4a27      	ldr	r2, [pc, #156]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd28:	4b24      	ldr	r3, [pc, #144]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d110      	bne.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd30:	f000 fc1e 	bl	800e570 <prvInitialiseTaskLists>
 800dd34:	e00d      	b.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd36:	4b23      	ldr	r3, [pc, #140]	; (800ddc4 <prvAddNewTaskToReadyList+0xc0>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d109      	bne.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd3e:	4b20      	ldr	r3, [pc, #128]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d802      	bhi.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd4c:	4a1c      	ldr	r2, [pc, #112]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd52:	4b1d      	ldr	r3, [pc, #116]	; (800ddc8 <prvAddNewTaskToReadyList+0xc4>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3301      	adds	r3, #1
 800dd58:	4a1b      	ldr	r2, [pc, #108]	; (800ddc8 <prvAddNewTaskToReadyList+0xc4>)
 800dd5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	2201      	movs	r2, #1
 800dd62:	409a      	lsls	r2, r3
 800dd64:	4b19      	ldr	r3, [pc, #100]	; (800ddcc <prvAddNewTaskToReadyList+0xc8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	4a18      	ldr	r2, [pc, #96]	; (800ddcc <prvAddNewTaskToReadyList+0xc8>)
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd72:	4613      	mov	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <prvAddNewTaskToReadyList+0xcc>)
 800dd7c:	441a      	add	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7fe fee8 	bl	800cb5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd8a:	f001 f827 	bl	800eddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	; (800ddc4 <prvAddNewTaskToReadyList+0xc0>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00e      	beq.n	800ddb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd96:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d207      	bcs.n	800ddb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dda4:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <prvAddNewTaskToReadyList+0xd0>)
 800dda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	200004fc 	.word	0x200004fc
 800ddc0:	200003fc 	.word	0x200003fc
 800ddc4:	20000508 	.word	0x20000508
 800ddc8:	20000518 	.word	0x20000518
 800ddcc:	20000504 	.word	0x20000504
 800ddd0:	20000400 	.word	0x20000400
 800ddd4:	e000ed04 	.word	0xe000ed04

0800ddd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d018      	beq.n	800de1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddea:	4b14      	ldr	r3, [pc, #80]	; (800de3c <vTaskDelay+0x64>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00b      	beq.n	800de0a <vTaskDelay+0x32>
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	b672      	cpsid	i
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	b662      	cpsie	i
 800de06:	60bb      	str	r3, [r7, #8]
 800de08:	e7fe      	b.n	800de08 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800de0a:	f000 f87d 	bl	800df08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de0e:	2100      	movs	r1, #0
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fe3f 	bl	800ea94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de16:	f000 f885 	bl	800df24 <xTaskResumeAll>
 800de1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d107      	bne.n	800de32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800de22:	4b07      	ldr	r3, [pc, #28]	; (800de40 <vTaskDelay+0x68>)
 800de24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de28:	601a      	str	r2, [r3, #0]
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de32:	bf00      	nop
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	20000524 	.word	0x20000524
 800de40:	e000ed04 	.word	0xe000ed04

0800de44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08a      	sub	sp, #40	; 0x28
 800de48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de52:	463a      	mov	r2, r7
 800de54:	1d39      	adds	r1, r7, #4
 800de56:	f107 0308 	add.w	r3, r7, #8
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f2 fe56 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	9202      	str	r2, [sp, #8]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	2300      	movs	r3, #0
 800de70:	460a      	mov	r2, r1
 800de72:	491f      	ldr	r1, [pc, #124]	; (800def0 <vTaskStartScheduler+0xac>)
 800de74:	481f      	ldr	r0, [pc, #124]	; (800def4 <vTaskStartScheduler+0xb0>)
 800de76:	f7ff fe0c 	bl	800da92 <xTaskCreateStatic>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4b1e      	ldr	r3, [pc, #120]	; (800def8 <vTaskStartScheduler+0xb4>)
 800de7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de80:	4b1d      	ldr	r3, [pc, #116]	; (800def8 <vTaskStartScheduler+0xb4>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de88:	2301      	movs	r3, #1
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	e001      	b.n	800de92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d117      	bne.n	800dec8 <vTaskStartScheduler+0x84>
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	b672      	cpsid	i
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	b662      	cpsie	i
 800deac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800deae:	4b13      	ldr	r3, [pc, #76]	; (800defc <vTaskStartScheduler+0xb8>)
 800deb0:	f04f 32ff 	mov.w	r2, #4294967295
 800deb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800deb6:	4b12      	ldr	r3, [pc, #72]	; (800df00 <vTaskStartScheduler+0xbc>)
 800deb8:	2201      	movs	r2, #1
 800deba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800debc:	4b11      	ldr	r3, [pc, #68]	; (800df04 <vTaskStartScheduler+0xc0>)
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dec2:	f000 fedd 	bl	800ec80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dec6:	e00f      	b.n	800dee8 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dece:	d10b      	bne.n	800dee8 <vTaskStartScheduler+0xa4>
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	b672      	cpsid	i
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	b662      	cpsie	i
 800dee4:	60fb      	str	r3, [r7, #12]
 800dee6:	e7fe      	b.n	800dee6 <vTaskStartScheduler+0xa2>
}
 800dee8:	bf00      	nop
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	08028fe0 	.word	0x08028fe0
 800def4:	0800e53d 	.word	0x0800e53d
 800def8:	20000520 	.word	0x20000520
 800defc:	2000051c 	.word	0x2000051c
 800df00:	20000508 	.word	0x20000508
 800df04:	20000500 	.word	0x20000500

0800df08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df08:	b480      	push	{r7}
 800df0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df0c:	4b04      	ldr	r3, [pc, #16]	; (800df20 <vTaskSuspendAll+0x18>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3301      	adds	r3, #1
 800df12:	4a03      	ldr	r2, [pc, #12]	; (800df20 <vTaskSuspendAll+0x18>)
 800df14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df16:	bf00      	nop
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	20000524 	.word	0x20000524

0800df24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df2e:	2300      	movs	r3, #0
 800df30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df32:	4b42      	ldr	r3, [pc, #264]	; (800e03c <xTaskResumeAll+0x118>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10b      	bne.n	800df52 <xTaskResumeAll+0x2e>
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	b672      	cpsid	i
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	b662      	cpsie	i
 800df4e:	603b      	str	r3, [r7, #0]
 800df50:	e7fe      	b.n	800df50 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df52:	f000 ff11 	bl	800ed78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df56:	4b39      	ldr	r3, [pc, #228]	; (800e03c <xTaskResumeAll+0x118>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	4a37      	ldr	r2, [pc, #220]	; (800e03c <xTaskResumeAll+0x118>)
 800df5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df60:	4b36      	ldr	r3, [pc, #216]	; (800e03c <xTaskResumeAll+0x118>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d161      	bne.n	800e02c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df68:	4b35      	ldr	r3, [pc, #212]	; (800e040 <xTaskResumeAll+0x11c>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d05d      	beq.n	800e02c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df70:	e02e      	b.n	800dfd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df72:	4b34      	ldr	r3, [pc, #208]	; (800e044 <xTaskResumeAll+0x120>)
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	3318      	adds	r3, #24
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe fe48 	bl	800cc14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe fe43 	bl	800cc14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df92:	2201      	movs	r2, #1
 800df94:	409a      	lsls	r2, r3
 800df96:	4b2c      	ldr	r3, [pc, #176]	; (800e048 <xTaskResumeAll+0x124>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	4a2a      	ldr	r2, [pc, #168]	; (800e048 <xTaskResumeAll+0x124>)
 800df9e:	6013      	str	r3, [r2, #0]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4a27      	ldr	r2, [pc, #156]	; (800e04c <xTaskResumeAll+0x128>)
 800dfae:	441a      	add	r2, r3
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	f7fe fdcf 	bl	800cb5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc0:	4b23      	ldr	r3, [pc, #140]	; (800e050 <xTaskResumeAll+0x12c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d302      	bcc.n	800dfd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dfca:	4b22      	ldr	r3, [pc, #136]	; (800e054 <xTaskResumeAll+0x130>)
 800dfcc:	2201      	movs	r2, #1
 800dfce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfd0:	4b1c      	ldr	r3, [pc, #112]	; (800e044 <xTaskResumeAll+0x120>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1cc      	bne.n	800df72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d001      	beq.n	800dfe2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfde:	f000 fb63 	bl	800e6a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dfe2:	4b1d      	ldr	r3, [pc, #116]	; (800e058 <xTaskResumeAll+0x134>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d010      	beq.n	800e010 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfee:	f000 f859 	bl	800e0a4 <xTaskIncrementTick>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dff8:	4b16      	ldr	r3, [pc, #88]	; (800e054 <xTaskResumeAll+0x130>)
 800dffa:	2201      	movs	r2, #1
 800dffc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	3b01      	subs	r3, #1
 800e002:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1f1      	bne.n	800dfee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e00a:	4b13      	ldr	r3, [pc, #76]	; (800e058 <xTaskResumeAll+0x134>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e010:	4b10      	ldr	r3, [pc, #64]	; (800e054 <xTaskResumeAll+0x130>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d009      	beq.n	800e02c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e018:	2301      	movs	r3, #1
 800e01a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <xTaskResumeAll+0x138>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e02c:	f000 fed6 	bl	800eddc <vPortExitCritical>

	return xAlreadyYielded;
 800e030:	68bb      	ldr	r3, [r7, #8]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	20000524 	.word	0x20000524
 800e040:	200004fc 	.word	0x200004fc
 800e044:	200004bc 	.word	0x200004bc
 800e048:	20000504 	.word	0x20000504
 800e04c:	20000400 	.word	0x20000400
 800e050:	200003fc 	.word	0x200003fc
 800e054:	20000510 	.word	0x20000510
 800e058:	2000050c 	.word	0x2000050c
 800e05c:	e000ed04 	.word	0xe000ed04

0800e060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e066:	4b05      	ldr	r3, [pc, #20]	; (800e07c <xTaskGetTickCount+0x1c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e06c:	687b      	ldr	r3, [r7, #4]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop
 800e07c:	20000500 	.word	0x20000500

0800e080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e086:	f000 ff57 	bl	800ef38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e08a:	2300      	movs	r3, #0
 800e08c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e08e:	4b04      	ldr	r3, [pc, #16]	; (800e0a0 <xTaskGetTickCountFromISR+0x20>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e094:	683b      	ldr	r3, [r7, #0]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20000500 	.word	0x20000500

0800e0a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ae:	4b4f      	ldr	r3, [pc, #316]	; (800e1ec <xTaskIncrementTick+0x148>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f040 8089 	bne.w	800e1ca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0b8:	4b4d      	ldr	r3, [pc, #308]	; (800e1f0 <xTaskIncrementTick+0x14c>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0c0:	4a4b      	ldr	r2, [pc, #300]	; (800e1f0 <xTaskIncrementTick+0x14c>)
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d121      	bne.n	800e110 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e0cc:	4b49      	ldr	r3, [pc, #292]	; (800e1f4 <xTaskIncrementTick+0x150>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00b      	beq.n	800e0ee <xTaskIncrementTick+0x4a>
 800e0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0da:	b672      	cpsid	i
 800e0dc:	f383 8811 	msr	BASEPRI, r3
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	b662      	cpsie	i
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	e7fe      	b.n	800e0ec <xTaskIncrementTick+0x48>
 800e0ee:	4b41      	ldr	r3, [pc, #260]	; (800e1f4 <xTaskIncrementTick+0x150>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	4b40      	ldr	r3, [pc, #256]	; (800e1f8 <xTaskIncrementTick+0x154>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a3e      	ldr	r2, [pc, #248]	; (800e1f4 <xTaskIncrementTick+0x150>)
 800e0fa:	6013      	str	r3, [r2, #0]
 800e0fc:	4a3e      	ldr	r2, [pc, #248]	; (800e1f8 <xTaskIncrementTick+0x154>)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	4b3e      	ldr	r3, [pc, #248]	; (800e1fc <xTaskIncrementTick+0x158>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	3301      	adds	r3, #1
 800e108:	4a3c      	ldr	r2, [pc, #240]	; (800e1fc <xTaskIncrementTick+0x158>)
 800e10a:	6013      	str	r3, [r2, #0]
 800e10c:	f000 facc 	bl	800e6a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e110:	4b3b      	ldr	r3, [pc, #236]	; (800e200 <xTaskIncrementTick+0x15c>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	693a      	ldr	r2, [r7, #16]
 800e116:	429a      	cmp	r2, r3
 800e118:	d348      	bcc.n	800e1ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e11a:	4b36      	ldr	r3, [pc, #216]	; (800e1f4 <xTaskIncrementTick+0x150>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d104      	bne.n	800e12e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e124:	4b36      	ldr	r3, [pc, #216]	; (800e200 <xTaskIncrementTick+0x15c>)
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	601a      	str	r2, [r3, #0]
					break;
 800e12c:	e03e      	b.n	800e1ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e12e:	4b31      	ldr	r3, [pc, #196]	; (800e1f4 <xTaskIncrementTick+0x150>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	429a      	cmp	r2, r3
 800e144:	d203      	bcs.n	800e14e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e146:	4a2e      	ldr	r2, [pc, #184]	; (800e200 <xTaskIncrementTick+0x15c>)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e14c:	e02e      	b.n	800e1ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	3304      	adds	r3, #4
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe fd5e 	bl	800cc14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d004      	beq.n	800e16a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	3318      	adds	r3, #24
 800e164:	4618      	mov	r0, r3
 800e166:	f7fe fd55 	bl	800cc14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16e:	2201      	movs	r2, #1
 800e170:	409a      	lsls	r2, r3
 800e172:	4b24      	ldr	r3, [pc, #144]	; (800e204 <xTaskIncrementTick+0x160>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4313      	orrs	r3, r2
 800e178:	4a22      	ldr	r2, [pc, #136]	; (800e204 <xTaskIncrementTick+0x160>)
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e180:	4613      	mov	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4a1f      	ldr	r2, [pc, #124]	; (800e208 <xTaskIncrementTick+0x164>)
 800e18a:	441a      	add	r2, r3
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	3304      	adds	r3, #4
 800e190:	4619      	mov	r1, r3
 800e192:	4610      	mov	r0, r2
 800e194:	f7fe fce1 	bl	800cb5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e19c:	4b1b      	ldr	r3, [pc, #108]	; (800e20c <xTaskIncrementTick+0x168>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d3b9      	bcc.n	800e11a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1aa:	e7b6      	b.n	800e11a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1ac:	4b17      	ldr	r3, [pc, #92]	; (800e20c <xTaskIncrementTick+0x168>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b2:	4915      	ldr	r1, [pc, #84]	; (800e208 <xTaskIncrementTick+0x164>)
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	440b      	add	r3, r1
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d907      	bls.n	800e1d4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	e004      	b.n	800e1d4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e1ca:	4b11      	ldr	r3, [pc, #68]	; (800e210 <xTaskIncrementTick+0x16c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	4a0f      	ldr	r2, [pc, #60]	; (800e210 <xTaskIncrementTick+0x16c>)
 800e1d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e1d4:	4b0f      	ldr	r3, [pc, #60]	; (800e214 <xTaskIncrementTick+0x170>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e1e0:	697b      	ldr	r3, [r7, #20]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000524 	.word	0x20000524
 800e1f0:	20000500 	.word	0x20000500
 800e1f4:	200004b4 	.word	0x200004b4
 800e1f8:	200004b8 	.word	0x200004b8
 800e1fc:	20000514 	.word	0x20000514
 800e200:	2000051c 	.word	0x2000051c
 800e204:	20000504 	.word	0x20000504
 800e208:	20000400 	.word	0x20000400
 800e20c:	200003fc 	.word	0x200003fc
 800e210:	2000050c 	.word	0x2000050c
 800e214:	20000510 	.word	0x20000510

0800e218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e21e:	4b3a      	ldr	r3, [pc, #232]	; (800e308 <vTaskSwitchContext+0xf0>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e226:	4b39      	ldr	r3, [pc, #228]	; (800e30c <vTaskSwitchContext+0xf4>)
 800e228:	2201      	movs	r2, #1
 800e22a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e22c:	e067      	b.n	800e2fe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e22e:	4b37      	ldr	r3, [pc, #220]	; (800e30c <vTaskSwitchContext+0xf4>)
 800e230:	2200      	movs	r2, #0
 800e232:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e234:	4b36      	ldr	r3, [pc, #216]	; (800e310 <vTaskSwitchContext+0xf8>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e240:	61bb      	str	r3, [r7, #24]
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	69ba      	ldr	r2, [r7, #24]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d111      	bne.n	800e270 <vTaskSwitchContext+0x58>
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	3304      	adds	r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	429a      	cmp	r2, r3
 800e256:	d10b      	bne.n	800e270 <vTaskSwitchContext+0x58>
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	3308      	adds	r3, #8
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	69ba      	ldr	r2, [r7, #24]
 800e260:	429a      	cmp	r2, r3
 800e262:	d105      	bne.n	800e270 <vTaskSwitchContext+0x58>
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	330c      	adds	r3, #12
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	69ba      	ldr	r2, [r7, #24]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d008      	beq.n	800e282 <vTaskSwitchContext+0x6a>
 800e270:	4b27      	ldr	r3, [pc, #156]	; (800e310 <vTaskSwitchContext+0xf8>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	4b26      	ldr	r3, [pc, #152]	; (800e310 <vTaskSwitchContext+0xf8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	3334      	adds	r3, #52	; 0x34
 800e27a:	4619      	mov	r1, r3
 800e27c:	4610      	mov	r0, r2
 800e27e:	f7f2 fc32 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e282:	4b24      	ldr	r3, [pc, #144]	; (800e314 <vTaskSwitchContext+0xfc>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	fab3 f383 	clz	r3, r3
 800e28e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e290:	7afb      	ldrb	r3, [r7, #11]
 800e292:	f1c3 031f 	rsb	r3, r3, #31
 800e296:	617b      	str	r3, [r7, #20]
 800e298:	491f      	ldr	r1, [pc, #124]	; (800e318 <vTaskSwitchContext+0x100>)
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	440b      	add	r3, r1
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10b      	bne.n	800e2c4 <vTaskSwitchContext+0xac>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	b672      	cpsid	i
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	b662      	cpsie	i
 800e2c0:	607b      	str	r3, [r7, #4]
 800e2c2:	e7fe      	b.n	800e2c2 <vTaskSwitchContext+0xaa>
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4a12      	ldr	r2, [pc, #72]	; (800e318 <vTaskSwitchContext+0x100>)
 800e2d0:	4413      	add	r3, r2
 800e2d2:	613b      	str	r3, [r7, #16]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	605a      	str	r2, [r3, #4]
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d104      	bne.n	800e2f4 <vTaskSwitchContext+0xdc>
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	685a      	ldr	r2, [r3, #4]
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	605a      	str	r2, [r3, #4]
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	4a05      	ldr	r2, [pc, #20]	; (800e310 <vTaskSwitchContext+0xf8>)
 800e2fc:	6013      	str	r3, [r2, #0]
}
 800e2fe:	bf00      	nop
 800e300:	3720      	adds	r7, #32
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	20000524 	.word	0x20000524
 800e30c:	20000510 	.word	0x20000510
 800e310:	200003fc 	.word	0x200003fc
 800e314:	20000504 	.word	0x20000504
 800e318:	20000400 	.word	0x20000400

0800e31c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10b      	bne.n	800e344 <vTaskPlaceOnEventList+0x28>
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	b672      	cpsid	i
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	b662      	cpsie	i
 800e340:	60fb      	str	r3, [r7, #12]
 800e342:	e7fe      	b.n	800e342 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e344:	4b07      	ldr	r3, [pc, #28]	; (800e364 <vTaskPlaceOnEventList+0x48>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3318      	adds	r3, #24
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fe fc28 	bl	800cba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e352:	2101      	movs	r1, #1
 800e354:	6838      	ldr	r0, [r7, #0]
 800e356:	f000 fb9d 	bl	800ea94 <prvAddCurrentTaskToDelayedList>
}
 800e35a:	bf00      	nop
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	200003fc 	.word	0x200003fc

0800e368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10b      	bne.n	800e396 <xTaskRemoveFromEventList+0x2e>
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	b672      	cpsid	i
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	b662      	cpsie	i
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	e7fe      	b.n	800e394 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	3318      	adds	r3, #24
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fc3a 	bl	800cc14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3a0:	4b1d      	ldr	r3, [pc, #116]	; (800e418 <xTaskRemoveFromEventList+0xb0>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d11c      	bne.n	800e3e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fc31 	bl	800cc14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	409a      	lsls	r2, r3
 800e3ba:	4b18      	ldr	r3, [pc, #96]	; (800e41c <xTaskRemoveFromEventList+0xb4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	4a16      	ldr	r2, [pc, #88]	; (800e41c <xTaskRemoveFromEventList+0xb4>)
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4a13      	ldr	r2, [pc, #76]	; (800e420 <xTaskRemoveFromEventList+0xb8>)
 800e3d2:	441a      	add	r2, r3
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	3304      	adds	r3, #4
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7fe fbbd 	bl	800cb5a <vListInsertEnd>
 800e3e0:	e005      	b.n	800e3ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	3318      	adds	r3, #24
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	480e      	ldr	r0, [pc, #56]	; (800e424 <xTaskRemoveFromEventList+0xbc>)
 800e3ea:	f7fe fbb6 	bl	800cb5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f2:	4b0d      	ldr	r3, [pc, #52]	; (800e428 <xTaskRemoveFromEventList+0xc0>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d905      	bls.n	800e408 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <xTaskRemoveFromEventList+0xc4>)
 800e402:	2201      	movs	r2, #1
 800e404:	601a      	str	r2, [r3, #0]
 800e406:	e001      	b.n	800e40c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e408:	2300      	movs	r3, #0
 800e40a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e40c:	697b      	ldr	r3, [r7, #20]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20000524 	.word	0x20000524
 800e41c:	20000504 	.word	0x20000504
 800e420:	20000400 	.word	0x20000400
 800e424:	200004bc 	.word	0x200004bc
 800e428:	200003fc 	.word	0x200003fc
 800e42c:	20000510 	.word	0x20000510

0800e430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e438:	4b06      	ldr	r3, [pc, #24]	; (800e454 <vTaskInternalSetTimeOutState+0x24>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <vTaskInternalSetTimeOutState+0x28>)
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	605a      	str	r2, [r3, #4]
}
 800e448:	bf00      	nop
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	20000514 	.word	0x20000514
 800e458:	20000500 	.word	0x20000500

0800e45c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10b      	bne.n	800e484 <xTaskCheckForTimeOut+0x28>
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	b672      	cpsid	i
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	b662      	cpsie	i
 800e480:	613b      	str	r3, [r7, #16]
 800e482:	e7fe      	b.n	800e482 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d10b      	bne.n	800e4a2 <xTaskCheckForTimeOut+0x46>
 800e48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48e:	b672      	cpsid	i
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	b662      	cpsie	i
 800e49e:	60fb      	str	r3, [r7, #12]
 800e4a0:	e7fe      	b.n	800e4a0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e4a2:	f000 fc69 	bl	800ed78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4a6:	4b1d      	ldr	r3, [pc, #116]	; (800e51c <xTaskCheckForTimeOut+0xc0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	69ba      	ldr	r2, [r7, #24]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4be:	d102      	bne.n	800e4c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61fb      	str	r3, [r7, #28]
 800e4c4:	e023      	b.n	800e50e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	4b15      	ldr	r3, [pc, #84]	; (800e520 <xTaskCheckForTimeOut+0xc4>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d007      	beq.n	800e4e2 <xTaskCheckForTimeOut+0x86>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	69ba      	ldr	r2, [r7, #24]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d302      	bcc.n	800e4e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	61fb      	str	r3, [r7, #28]
 800e4e0:	e015      	b.n	800e50e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d20b      	bcs.n	800e504 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	1ad2      	subs	r2, r2, r3
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ff99 	bl	800e430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4fe:	2300      	movs	r3, #0
 800e500:	61fb      	str	r3, [r7, #28]
 800e502:	e004      	b.n	800e50e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	2200      	movs	r2, #0
 800e508:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e50a:	2301      	movs	r3, #1
 800e50c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e50e:	f000 fc65 	bl	800eddc <vPortExitCritical>

	return xReturn;
 800e512:	69fb      	ldr	r3, [r7, #28]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20000500 	.word	0x20000500
 800e520:	20000514 	.word	0x20000514

0800e524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e524:	b480      	push	{r7}
 800e526:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e528:	4b03      	ldr	r3, [pc, #12]	; (800e538 <vTaskMissedYield+0x14>)
 800e52a:	2201      	movs	r2, #1
 800e52c:	601a      	str	r2, [r3, #0]
}
 800e52e:	bf00      	nop
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	20000510 	.word	0x20000510

0800e53c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e544:	f000 f854 	bl	800e5f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e548:	4b07      	ldr	r3, [pc, #28]	; (800e568 <prvIdleTask+0x2c>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d907      	bls.n	800e560 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e550:	4b06      	ldr	r3, [pc, #24]	; (800e56c <prvIdleTask+0x30>)
 800e552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e556:	601a      	str	r2, [r3, #0]
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e560:	f7f2 faba 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e564:	e7ee      	b.n	800e544 <prvIdleTask+0x8>
 800e566:	bf00      	nop
 800e568:	20000400 	.word	0x20000400
 800e56c:	e000ed04 	.word	0xe000ed04

0800e570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e576:	2300      	movs	r3, #0
 800e578:	607b      	str	r3, [r7, #4]
 800e57a:	e00c      	b.n	800e596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	4613      	mov	r3, r2
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	4413      	add	r3, r2
 800e584:	009b      	lsls	r3, r3, #2
 800e586:	4a12      	ldr	r2, [pc, #72]	; (800e5d0 <prvInitialiseTaskLists+0x60>)
 800e588:	4413      	add	r3, r2
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fab8 	bl	800cb00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3301      	adds	r3, #1
 800e594:	607b      	str	r3, [r7, #4]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b06      	cmp	r3, #6
 800e59a:	d9ef      	bls.n	800e57c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e59c:	480d      	ldr	r0, [pc, #52]	; (800e5d4 <prvInitialiseTaskLists+0x64>)
 800e59e:	f7fe faaf 	bl	800cb00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5a2:	480d      	ldr	r0, [pc, #52]	; (800e5d8 <prvInitialiseTaskLists+0x68>)
 800e5a4:	f7fe faac 	bl	800cb00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5a8:	480c      	ldr	r0, [pc, #48]	; (800e5dc <prvInitialiseTaskLists+0x6c>)
 800e5aa:	f7fe faa9 	bl	800cb00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5ae:	480c      	ldr	r0, [pc, #48]	; (800e5e0 <prvInitialiseTaskLists+0x70>)
 800e5b0:	f7fe faa6 	bl	800cb00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5b4:	480b      	ldr	r0, [pc, #44]	; (800e5e4 <prvInitialiseTaskLists+0x74>)
 800e5b6:	f7fe faa3 	bl	800cb00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5ba:	4b0b      	ldr	r3, [pc, #44]	; (800e5e8 <prvInitialiseTaskLists+0x78>)
 800e5bc:	4a05      	ldr	r2, [pc, #20]	; (800e5d4 <prvInitialiseTaskLists+0x64>)
 800e5be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5c0:	4b0a      	ldr	r3, [pc, #40]	; (800e5ec <prvInitialiseTaskLists+0x7c>)
 800e5c2:	4a05      	ldr	r2, [pc, #20]	; (800e5d8 <prvInitialiseTaskLists+0x68>)
 800e5c4:	601a      	str	r2, [r3, #0]
}
 800e5c6:	bf00      	nop
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20000400 	.word	0x20000400
 800e5d4:	2000048c 	.word	0x2000048c
 800e5d8:	200004a0 	.word	0x200004a0
 800e5dc:	200004bc 	.word	0x200004bc
 800e5e0:	200004d0 	.word	0x200004d0
 800e5e4:	200004e8 	.word	0x200004e8
 800e5e8:	200004b4 	.word	0x200004b4
 800e5ec:	200004b8 	.word	0x200004b8

0800e5f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5f6:	e019      	b.n	800e62c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5f8:	f000 fbbe 	bl	800ed78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fc:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <prvCheckTasksWaitingTermination+0x4c>)
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3304      	adds	r3, #4
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fe fb03 	bl	800cc14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e60e:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <prvCheckTasksWaitingTermination+0x50>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	3b01      	subs	r3, #1
 800e614:	4a0a      	ldr	r2, [pc, #40]	; (800e640 <prvCheckTasksWaitingTermination+0x50>)
 800e616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e618:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <prvCheckTasksWaitingTermination+0x54>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3b01      	subs	r3, #1
 800e61e:	4a09      	ldr	r2, [pc, #36]	; (800e644 <prvCheckTasksWaitingTermination+0x54>)
 800e620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e622:	f000 fbdb 	bl	800eddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f80e 	bl	800e648 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e62c:	4b05      	ldr	r3, [pc, #20]	; (800e644 <prvCheckTasksWaitingTermination+0x54>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1e1      	bne.n	800e5f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e634:	bf00      	nop
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	200004d0 	.word	0x200004d0
 800e640:	200004fc 	.word	0x200004fc
 800e644:	200004e4 	.word	0x200004e4

0800e648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e656:	2b00      	cmp	r3, #0
 800e658:	d108      	bne.n	800e66c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 fd78 	bl	800f154 <vPortFree>
				vPortFree( pxTCB );
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 fd75 	bl	800f154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e66a:	e019      	b.n	800e6a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e672:	2b01      	cmp	r3, #1
 800e674:	d103      	bne.n	800e67e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fd6c 	bl	800f154 <vPortFree>
	}
 800e67c:	e010      	b.n	800e6a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e684:	2b02      	cmp	r3, #2
 800e686:	d00b      	beq.n	800e6a0 <prvDeleteTCB+0x58>
 800e688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68c:	b672      	cpsid	i
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	b662      	cpsie	i
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	e7fe      	b.n	800e69e <prvDeleteTCB+0x56>
	}
 800e6a0:	bf00      	nop
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ae:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <prvResetNextTaskUnblockTime+0x38>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d104      	bne.n	800e6c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6b8:	4b0a      	ldr	r3, [pc, #40]	; (800e6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e6be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6c0:	e008      	b.n	800e6d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c2:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <prvResetNextTaskUnblockTime+0x38>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	4a04      	ldr	r2, [pc, #16]	; (800e6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800e6d2:	6013      	str	r3, [r2, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	200004b4 	.word	0x200004b4
 800e6e4:	2000051c 	.word	0x2000051c

0800e6e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6ee:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <xTaskGetSchedulerState+0x34>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	607b      	str	r3, [r7, #4]
 800e6fa:	e008      	b.n	800e70e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6fc:	4b08      	ldr	r3, [pc, #32]	; (800e720 <xTaskGetSchedulerState+0x38>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e704:	2302      	movs	r3, #2
 800e706:	607b      	str	r3, [r7, #4]
 800e708:	e001      	b.n	800e70e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e70a:	2300      	movs	r3, #0
 800e70c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e70e:	687b      	ldr	r3, [r7, #4]
	}
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	20000508 	.word	0x20000508
 800e720:	20000524 	.word	0x20000524

0800e724 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e730:	2300      	movs	r3, #0
 800e732:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d069      	beq.n	800e80e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73e:	4b36      	ldr	r3, [pc, #216]	; (800e818 <xTaskPriorityInherit+0xf4>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	429a      	cmp	r2, r3
 800e746:	d259      	bcs.n	800e7fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	db06      	blt.n	800e75e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e750:	4b31      	ldr	r3, [pc, #196]	; (800e818 <xTaskPriorityInherit+0xf4>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	f1c3 0207 	rsb	r2, r3, #7
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6959      	ldr	r1, [r3, #20]
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e766:	4613      	mov	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	4413      	add	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4a2b      	ldr	r2, [pc, #172]	; (800e81c <xTaskPriorityInherit+0xf8>)
 800e770:	4413      	add	r3, r2
 800e772:	4299      	cmp	r1, r3
 800e774:	d13a      	bne.n	800e7ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	3304      	adds	r3, #4
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe fa4a 	bl	800cc14 <uxListRemove>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d115      	bne.n	800e7b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78a:	4924      	ldr	r1, [pc, #144]	; (800e81c <xTaskPriorityInherit+0xf8>)
 800e78c:	4613      	mov	r3, r2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	4413      	add	r3, r2
 800e792:	009b      	lsls	r3, r3, #2
 800e794:	440b      	add	r3, r1
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <xTaskPriorityInherit+0x8e>
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a6:	43da      	mvns	r2, r3
 800e7a8:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <xTaskPriorityInherit+0xfc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4013      	ands	r3, r2
 800e7ae:	4a1c      	ldr	r2, [pc, #112]	; (800e820 <xTaskPriorityInherit+0xfc>)
 800e7b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7b2:	4b19      	ldr	r3, [pc, #100]	; (800e818 <xTaskPriorityInherit+0xf4>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	409a      	lsls	r2, r3
 800e7c4:	4b16      	ldr	r3, [pc, #88]	; (800e820 <xTaskPriorityInherit+0xfc>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	4a15      	ldr	r2, [pc, #84]	; (800e820 <xTaskPriorityInherit+0xfc>)
 800e7cc:	6013      	str	r3, [r2, #0]
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4a10      	ldr	r2, [pc, #64]	; (800e81c <xTaskPriorityInherit+0xf8>)
 800e7dc:	441a      	add	r2, r3
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4610      	mov	r0, r2
 800e7e6:	f7fe f9b8 	bl	800cb5a <vListInsertEnd>
 800e7ea:	e004      	b.n	800e7f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7ec:	4b0a      	ldr	r3, [pc, #40]	; (800e818 <xTaskPriorityInherit+0xf4>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	e008      	b.n	800e80e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <xTaskPriorityInherit+0xf4>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e806:	429a      	cmp	r2, r3
 800e808:	d201      	bcs.n	800e80e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e80a:	2301      	movs	r3, #1
 800e80c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e80e:	68fb      	ldr	r3, [r7, #12]
	}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	200003fc 	.word	0x200003fc
 800e81c:	20000400 	.word	0x20000400
 800e820:	20000504 	.word	0x20000504

0800e824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e830:	2300      	movs	r3, #0
 800e832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d070      	beq.n	800e91c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e83a:	4b3b      	ldr	r3, [pc, #236]	; (800e928 <xTaskPriorityDisinherit+0x104>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	693a      	ldr	r2, [r7, #16]
 800e840:	429a      	cmp	r2, r3
 800e842:	d00b      	beq.n	800e85c <xTaskPriorityDisinherit+0x38>
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	b672      	cpsid	i
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	b662      	cpsie	i
 800e858:	60fb      	str	r3, [r7, #12]
 800e85a:	e7fe      	b.n	800e85a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10b      	bne.n	800e87c <xTaskPriorityDisinherit+0x58>
 800e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e868:	b672      	cpsid	i
 800e86a:	f383 8811 	msr	BASEPRI, r3
 800e86e:	f3bf 8f6f 	isb	sy
 800e872:	f3bf 8f4f 	dsb	sy
 800e876:	b662      	cpsie	i
 800e878:	60bb      	str	r3, [r7, #8]
 800e87a:	e7fe      	b.n	800e87a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e880:	1e5a      	subs	r2, r3, #1
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e88e:	429a      	cmp	r2, r3
 800e890:	d044      	beq.n	800e91c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e896:	2b00      	cmp	r3, #0
 800e898:	d140      	bne.n	800e91c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	3304      	adds	r3, #4
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fe f9b8 	bl	800cc14 <uxListRemove>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d115      	bne.n	800e8d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ae:	491f      	ldr	r1, [pc, #124]	; (800e92c <xTaskPriorityDisinherit+0x108>)
 800e8b0:	4613      	mov	r3, r2
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4413      	add	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	440b      	add	r3, r1
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d10a      	bne.n	800e8d6 <xTaskPriorityDisinherit+0xb2>
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ca:	43da      	mvns	r2, r3
 800e8cc:	4b18      	ldr	r3, [pc, #96]	; (800e930 <xTaskPriorityDisinherit+0x10c>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	4a17      	ldr	r2, [pc, #92]	; (800e930 <xTaskPriorityDisinherit+0x10c>)
 800e8d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e2:	f1c3 0207 	rsb	r2, r3, #7
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	409a      	lsls	r2, r3
 800e8f2:	4b0f      	ldr	r3, [pc, #60]	; (800e930 <xTaskPriorityDisinherit+0x10c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4313      	orrs	r3, r2
 800e8f8:	4a0d      	ldr	r2, [pc, #52]	; (800e930 <xTaskPriorityDisinherit+0x10c>)
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e900:	4613      	mov	r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4a08      	ldr	r2, [pc, #32]	; (800e92c <xTaskPriorityDisinherit+0x108>)
 800e90a:	441a      	add	r2, r3
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	3304      	adds	r3, #4
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	f7fe f921 	bl	800cb5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e918:	2301      	movs	r3, #1
 800e91a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e91c:	697b      	ldr	r3, [r7, #20]
	}
 800e91e:	4618      	mov	r0, r3
 800e920:	3718      	adds	r7, #24
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	200003fc 	.word	0x200003fc
 800e92c:	20000400 	.word	0x20000400
 800e930:	20000504 	.word	0x20000504

0800e934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e942:	2301      	movs	r3, #1
 800e944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 8085 	beq.w	800ea58 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e952:	2b00      	cmp	r3, #0
 800e954:	d10b      	bne.n	800e96e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	b672      	cpsid	i
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	b662      	cpsie	i
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	e7fe      	b.n	800e96c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d902      	bls.n	800e97e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	61fb      	str	r3, [r7, #28]
 800e97c:	e002      	b.n	800e984 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e982:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e988:	69fa      	ldr	r2, [r7, #28]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d064      	beq.n	800ea58 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	429a      	cmp	r2, r3
 800e996:	d15f      	bne.n	800ea58 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e998:	4b31      	ldr	r3, [pc, #196]	; (800ea60 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	69ba      	ldr	r2, [r7, #24]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d10b      	bne.n	800e9ba <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	b672      	cpsid	i
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	b662      	cpsie	i
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	e7fe      	b.n	800e9b8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	69fa      	ldr	r2, [r7, #28]
 800e9c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	db04      	blt.n	800e9d8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	f1c3 0207 	rsb	r2, r3, #7
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	6959      	ldr	r1, [r3, #20]
 800e9dc:	693a      	ldr	r2, [r7, #16]
 800e9de:	4613      	mov	r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	4a1f      	ldr	r2, [pc, #124]	; (800ea64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e9e8:	4413      	add	r3, r2
 800e9ea:	4299      	cmp	r1, r3
 800e9ec:	d134      	bne.n	800ea58 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fe f90e 	bl	800cc14 <uxListRemove>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d115      	bne.n	800ea2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea02:	4918      	ldr	r1, [pc, #96]	; (800ea64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ea04:	4613      	mov	r3, r2
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	440b      	add	r3, r1
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10a      	bne.n	800ea2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea18:	2201      	movs	r2, #1
 800ea1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1e:	43da      	mvns	r2, r3
 800ea20:	4b11      	ldr	r3, [pc, #68]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4013      	ands	r3, r2
 800ea26:	4a10      	ldr	r2, [pc, #64]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2e:	2201      	movs	r2, #1
 800ea30:	409a      	lsls	r2, r3
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	4a0b      	ldr	r2, [pc, #44]	; (800ea68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea40:	4613      	mov	r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4413      	add	r3, r2
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4a06      	ldr	r2, [pc, #24]	; (800ea64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ea4a:	441a      	add	r2, r3
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	4619      	mov	r1, r3
 800ea52:	4610      	mov	r0, r2
 800ea54:	f7fe f881 	bl	800cb5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea58:	bf00      	nop
 800ea5a:	3720      	adds	r7, #32
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	200003fc 	.word	0x200003fc
 800ea64:	20000400 	.word	0x20000400
 800ea68:	20000504 	.word	0x20000504

0800ea6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ea78:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea7e:	3201      	adds	r2, #1
 800ea80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ea82:	4b03      	ldr	r3, [pc, #12]	; (800ea90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ea84:	681b      	ldr	r3, [r3, #0]
	}
 800ea86:	4618      	mov	r0, r3
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	200003fc 	.word	0x200003fc

0800ea94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea9e:	4b29      	ldr	r3, [pc, #164]	; (800eb44 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaa4:	4b28      	ldr	r3, [pc, #160]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe f8b2 	bl	800cc14 <uxListRemove>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10b      	bne.n	800eace <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eab6:	4b24      	ldr	r3, [pc, #144]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabc:	2201      	movs	r2, #1
 800eabe:	fa02 f303 	lsl.w	r3, r2, r3
 800eac2:	43da      	mvns	r2, r3
 800eac4:	4b21      	ldr	r3, [pc, #132]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4013      	ands	r3, r2
 800eaca:	4a20      	ldr	r2, [pc, #128]	; (800eb4c <prvAddCurrentTaskToDelayedList+0xb8>)
 800eacc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead4:	d10a      	bne.n	800eaec <prvAddCurrentTaskToDelayedList+0x58>
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d007      	beq.n	800eaec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eadc:	4b1a      	ldr	r3, [pc, #104]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3304      	adds	r3, #4
 800eae2:	4619      	mov	r1, r3
 800eae4:	481a      	ldr	r0, [pc, #104]	; (800eb50 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eae6:	f7fe f838 	bl	800cb5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eaea:	e026      	b.n	800eb3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eaf4:	4b14      	ldr	r3, [pc, #80]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d209      	bcs.n	800eb18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb04:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	4b0f      	ldr	r3, [pc, #60]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f7fe f846 	bl	800cba2 <vListInsert>
}
 800eb16:	e010      	b.n	800eb3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb18:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	4b0a      	ldr	r3, [pc, #40]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3304      	adds	r3, #4
 800eb22:	4619      	mov	r1, r3
 800eb24:	4610      	mov	r0, r2
 800eb26:	f7fe f83c 	bl	800cba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d202      	bcs.n	800eb3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb34:	4a09      	ldr	r2, [pc, #36]	; (800eb5c <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	6013      	str	r3, [r2, #0]
}
 800eb3a:	bf00      	nop
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20000500 	.word	0x20000500
 800eb48:	200003fc 	.word	0x200003fc
 800eb4c:	20000504 	.word	0x20000504
 800eb50:	200004e8 	.word	0x200004e8
 800eb54:	200004b8 	.word	0x200004b8
 800eb58:	200004b4 	.word	0x200004b4
 800eb5c:	2000051c 	.word	0x2000051c

0800eb60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3b04      	subs	r3, #4
 800eb70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	3b04      	subs	r3, #4
 800eb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f023 0201 	bic.w	r2, r3, #1
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3b04      	subs	r3, #4
 800eb8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb90:	4a0c      	ldr	r2, [pc, #48]	; (800ebc4 <pxPortInitialiseStack+0x64>)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3b14      	subs	r3, #20
 800eb9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3b04      	subs	r3, #4
 800eba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f06f 0202 	mvn.w	r2, #2
 800ebae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3b20      	subs	r3, #32
 800ebb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	0800ebc9 	.word	0x0800ebc9

0800ebc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b085      	sub	sp, #20
 800ebcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebd2:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <prvTaskExitError+0x58>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebda:	d00b      	beq.n	800ebf4 <prvTaskExitError+0x2c>
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	b672      	cpsid	i
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	b662      	cpsie	i
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e7fe      	b.n	800ebf2 <prvTaskExitError+0x2a>
 800ebf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf8:	b672      	cpsid	i
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	b662      	cpsie	i
 800ec08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec0a:	bf00      	nop
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d0fc      	beq.n	800ec0c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec12:	bf00      	nop
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20000024 	.word	0x20000024
	...

0800ec30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <pxCurrentTCBConst2>)
 800ec32:	6819      	ldr	r1, [r3, #0]
 800ec34:	6808      	ldr	r0, [r1, #0]
 800ec36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	f380 8809 	msr	PSP, r0
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f04f 0000 	mov.w	r0, #0
 800ec46:	f380 8811 	msr	BASEPRI, r0
 800ec4a:	4770      	bx	lr
 800ec4c:	f3af 8000 	nop.w

0800ec50 <pxCurrentTCBConst2>:
 800ec50:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop

0800ec58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec58:	4808      	ldr	r0, [pc, #32]	; (800ec7c <prvPortStartFirstTask+0x24>)
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	6800      	ldr	r0, [r0, #0]
 800ec5e:	f380 8808 	msr	MSP, r0
 800ec62:	f04f 0000 	mov.w	r0, #0
 800ec66:	f380 8814 	msr	CONTROL, r0
 800ec6a:	b662      	cpsie	i
 800ec6c:	b661      	cpsie	f
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	df00      	svc	0
 800ec78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec7a:	bf00      	nop
 800ec7c:	e000ed08 	.word	0xe000ed08

0800ec80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec86:	4b36      	ldr	r3, [pc, #216]	; (800ed60 <xPortStartScheduler+0xe0>)
 800ec88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	22ff      	movs	r2, #255	; 0xff
 800ec96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	4b2e      	ldr	r3, [pc, #184]	; (800ed64 <xPortStartScheduler+0xe4>)
 800ecac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecae:	4b2e      	ldr	r3, [pc, #184]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ecb0:	2207      	movs	r2, #7
 800ecb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecb4:	e009      	b.n	800ecca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ecb6:	4b2c      	ldr	r3, [pc, #176]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	4a2a      	ldr	r2, [pc, #168]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ecbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ecc0:	78fb      	ldrb	r3, [r7, #3]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd2:	2b80      	cmp	r3, #128	; 0x80
 800ecd4:	d0ef      	beq.n	800ecb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ecd6:	4b24      	ldr	r3, [pc, #144]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f1c3 0307 	rsb	r3, r3, #7
 800ecde:	2b04      	cmp	r3, #4
 800ece0:	d00b      	beq.n	800ecfa <xPortStartScheduler+0x7a>
 800ece2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece6:	b672      	cpsid	i
 800ece8:	f383 8811 	msr	BASEPRI, r3
 800ecec:	f3bf 8f6f 	isb	sy
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	b662      	cpsie	i
 800ecf6:	60bb      	str	r3, [r7, #8]
 800ecf8:	e7fe      	b.n	800ecf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ecfa:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	4a19      	ldr	r2, [pc, #100]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ed02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed04:	4b18      	ldr	r3, [pc, #96]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed0c:	4a16      	ldr	r2, [pc, #88]	; (800ed68 <xPortStartScheduler+0xe8>)
 800ed0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed18:	4b14      	ldr	r3, [pc, #80]	; (800ed6c <xPortStartScheduler+0xec>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a13      	ldr	r2, [pc, #76]	; (800ed6c <xPortStartScheduler+0xec>)
 800ed1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed24:	4b11      	ldr	r3, [pc, #68]	; (800ed6c <xPortStartScheduler+0xec>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4a10      	ldr	r2, [pc, #64]	; (800ed6c <xPortStartScheduler+0xec>)
 800ed2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed30:	f000 f8d4 	bl	800eedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed34:	4b0e      	ldr	r3, [pc, #56]	; (800ed70 <xPortStartScheduler+0xf0>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed3a:	f000 f8f3 	bl	800ef24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed3e:	4b0d      	ldr	r3, [pc, #52]	; (800ed74 <xPortStartScheduler+0xf4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a0c      	ldr	r2, [pc, #48]	; (800ed74 <xPortStartScheduler+0xf4>)
 800ed44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed4a:	f7ff ff85 	bl	800ec58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed4e:	f7ff fa63 	bl	800e218 <vTaskSwitchContext>
	prvTaskExitError();
 800ed52:	f7ff ff39 	bl	800ebc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	e000e400 	.word	0xe000e400
 800ed64:	20000528 	.word	0x20000528
 800ed68:	2000052c 	.word	0x2000052c
 800ed6c:	e000ed20 	.word	0xe000ed20
 800ed70:	20000024 	.word	0x20000024
 800ed74:	e000ef34 	.word	0xe000ef34

0800ed78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	b672      	cpsid	i
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	b662      	cpsie	i
 800ed92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed94:	4b0f      	ldr	r3, [pc, #60]	; (800edd4 <vPortEnterCritical+0x5c>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	4a0e      	ldr	r2, [pc, #56]	; (800edd4 <vPortEnterCritical+0x5c>)
 800ed9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	; (800edd4 <vPortEnterCritical+0x5c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d110      	bne.n	800edc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eda6:	4b0c      	ldr	r3, [pc, #48]	; (800edd8 <vPortEnterCritical+0x60>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <vPortEnterCritical+0x50>
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	603b      	str	r3, [r7, #0]
 800edc6:	e7fe      	b.n	800edc6 <vPortEnterCritical+0x4e>
	}
}
 800edc8:	bf00      	nop
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr
 800edd4:	20000024 	.word	0x20000024
 800edd8:	e000ed04 	.word	0xe000ed04

0800eddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ede2:	4b12      	ldr	r3, [pc, #72]	; (800ee2c <vPortExitCritical+0x50>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10b      	bne.n	800ee02 <vPortExitCritical+0x26>
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	b672      	cpsid	i
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	b662      	cpsie	i
 800edfe:	607b      	str	r3, [r7, #4]
 800ee00:	e7fe      	b.n	800ee00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ee02:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <vPortExitCritical+0x50>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3b01      	subs	r3, #1
 800ee08:	4a08      	ldr	r2, [pc, #32]	; (800ee2c <vPortExitCritical+0x50>)
 800ee0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee0c:	4b07      	ldr	r3, [pc, #28]	; (800ee2c <vPortExitCritical+0x50>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <vPortExitCritical+0x42>
 800ee14:	2300      	movs	r3, #0
 800ee16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee1e:	bf00      	nop
 800ee20:	370c      	adds	r7, #12
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	20000024 	.word	0x20000024

0800ee30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee30:	f3ef 8009 	mrs	r0, PSP
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	4b15      	ldr	r3, [pc, #84]	; (800ee90 <pxCurrentTCBConst>)
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	f01e 0f10 	tst.w	lr, #16
 800ee40:	bf08      	it	eq
 800ee42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4a:	6010      	str	r0, [r2, #0]
 800ee4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee54:	b672      	cpsid	i
 800ee56:	f380 8811 	msr	BASEPRI, r0
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	b662      	cpsie	i
 800ee64:	f7ff f9d8 	bl	800e218 <vTaskSwitchContext>
 800ee68:	f04f 0000 	mov.w	r0, #0
 800ee6c:	f380 8811 	msr	BASEPRI, r0
 800ee70:	bc09      	pop	{r0, r3}
 800ee72:	6819      	ldr	r1, [r3, #0]
 800ee74:	6808      	ldr	r0, [r1, #0]
 800ee76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7a:	f01e 0f10 	tst.w	lr, #16
 800ee7e:	bf08      	it	eq
 800ee80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee84:	f380 8809 	msr	PSP, r0
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop

0800ee90 <pxCurrentTCBConst>:
 800ee90:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee94:	bf00      	nop
 800ee96:	bf00      	nop

0800ee98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	b672      	cpsid	i
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	b662      	cpsie	i
 800eeb2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eeb4:	f7ff f8f6 	bl	800e0a4 <xTaskIncrementTick>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d003      	beq.n	800eec6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eebe:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <SysTick_Handler+0x40>)
 800eec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	2300      	movs	r3, #0
 800eec8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eed0:	bf00      	nop
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	e000ed04 	.word	0xe000ed04

0800eedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eedc:	b480      	push	{r7}
 800eede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eee0:	4b0b      	ldr	r3, [pc, #44]	; (800ef10 <vPortSetupTimerInterrupt+0x34>)
 800eee2:	2200      	movs	r2, #0
 800eee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eee6:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <vPortSetupTimerInterrupt+0x38>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eeec:	4b0a      	ldr	r3, [pc, #40]	; (800ef18 <vPortSetupTimerInterrupt+0x3c>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a0a      	ldr	r2, [pc, #40]	; (800ef1c <vPortSetupTimerInterrupt+0x40>)
 800eef2:	fba2 2303 	umull	r2, r3, r2, r3
 800eef6:	099b      	lsrs	r3, r3, #6
 800eef8:	4a09      	ldr	r2, [pc, #36]	; (800ef20 <vPortSetupTimerInterrupt+0x44>)
 800eefa:	3b01      	subs	r3, #1
 800eefc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eefe:	4b04      	ldr	r3, [pc, #16]	; (800ef10 <vPortSetupTimerInterrupt+0x34>)
 800ef00:	2207      	movs	r2, #7
 800ef02:	601a      	str	r2, [r3, #0]
}
 800ef04:	bf00      	nop
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	e000e010 	.word	0xe000e010
 800ef14:	e000e018 	.word	0xe000e018
 800ef18:	20000018 	.word	0x20000018
 800ef1c:	10624dd3 	.word	0x10624dd3
 800ef20:	e000e014 	.word	0xe000e014

0800ef24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef34 <vPortEnableVFP+0x10>
 800ef28:	6801      	ldr	r1, [r0, #0]
 800ef2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef2e:	6001      	str	r1, [r0, #0]
 800ef30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef32:	bf00      	nop
 800ef34:	e000ed88 	.word	0xe000ed88

0800ef38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef3e:	f3ef 8305 	mrs	r3, IPSR
 800ef42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b0f      	cmp	r3, #15
 800ef48:	d915      	bls.n	800ef76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef4a:	4a18      	ldr	r2, [pc, #96]	; (800efac <vPortValidateInterruptPriority+0x74>)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4413      	add	r3, r2
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef54:	4b16      	ldr	r3, [pc, #88]	; (800efb0 <vPortValidateInterruptPriority+0x78>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	7afa      	ldrb	r2, [r7, #11]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d20b      	bcs.n	800ef76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	b672      	cpsid	i
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	b662      	cpsie	i
 800ef72:	607b      	str	r3, [r7, #4]
 800ef74:	e7fe      	b.n	800ef74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef76:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <vPortValidateInterruptPriority+0x7c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef7e:	4b0e      	ldr	r3, [pc, #56]	; (800efb8 <vPortValidateInterruptPriority+0x80>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d90b      	bls.n	800ef9e <vPortValidateInterruptPriority+0x66>
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	b672      	cpsid	i
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	b662      	cpsie	i
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	e7fe      	b.n	800ef9c <vPortValidateInterruptPriority+0x64>
	}
 800ef9e:	bf00      	nop
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	e000e3f0 	.word	0xe000e3f0
 800efb0:	20000528 	.word	0x20000528
 800efb4:	e000ed0c 	.word	0xe000ed0c
 800efb8:	2000052c 	.word	0x2000052c

0800efbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08a      	sub	sp, #40	; 0x28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efc4:	2300      	movs	r3, #0
 800efc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efc8:	f7fe ff9e 	bl	800df08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efcc:	4b5c      	ldr	r3, [pc, #368]	; (800f140 <pvPortMalloc+0x184>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d101      	bne.n	800efd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800efd4:	f000 f91a 	bl	800f20c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800efd8:	4b5a      	ldr	r3, [pc, #360]	; (800f144 <pvPortMalloc+0x188>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4013      	ands	r3, r2
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f040 8090 	bne.w	800f106 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d01e      	beq.n	800f02a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800efec:	2208      	movs	r2, #8
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4413      	add	r3, r2
 800eff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f003 0307 	and.w	r3, r3, #7
 800effa:	2b00      	cmp	r3, #0
 800effc:	d015      	beq.n	800f02a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f023 0307 	bic.w	r3, r3, #7
 800f004:	3308      	adds	r3, #8
 800f006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00b      	beq.n	800f02a <pvPortMalloc+0x6e>
 800f012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f016:	b672      	cpsid	i
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	b662      	cpsie	i
 800f026:	617b      	str	r3, [r7, #20]
 800f028:	e7fe      	b.n	800f028 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d06a      	beq.n	800f106 <pvPortMalloc+0x14a>
 800f030:	4b45      	ldr	r3, [pc, #276]	; (800f148 <pvPortMalloc+0x18c>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	429a      	cmp	r2, r3
 800f038:	d865      	bhi.n	800f106 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f03a:	4b44      	ldr	r3, [pc, #272]	; (800f14c <pvPortMalloc+0x190>)
 800f03c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f03e:	4b43      	ldr	r3, [pc, #268]	; (800f14c <pvPortMalloc+0x190>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f044:	e004      	b.n	800f050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	429a      	cmp	r2, r3
 800f058:	d903      	bls.n	800f062 <pvPortMalloc+0xa6>
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1f1      	bne.n	800f046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f062:	4b37      	ldr	r3, [pc, #220]	; (800f140 <pvPortMalloc+0x184>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f068:	429a      	cmp	r2, r3
 800f06a:	d04c      	beq.n	800f106 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2208      	movs	r2, #8
 800f072:	4413      	add	r3, r2
 800f074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	685a      	ldr	r2, [r3, #4]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	1ad2      	subs	r2, r2, r3
 800f086:	2308      	movs	r3, #8
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d920      	bls.n	800f0d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4413      	add	r3, r2
 800f094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	f003 0307 	and.w	r3, r3, #7
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00b      	beq.n	800f0b8 <pvPortMalloc+0xfc>
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	b672      	cpsid	i
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	b662      	cpsie	i
 800f0b4:	613b      	str	r3, [r7, #16]
 800f0b6:	e7fe      	b.n	800f0b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	1ad2      	subs	r2, r2, r3
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0ca:	69b8      	ldr	r0, [r7, #24]
 800f0cc:	f000 f900 	bl	800f2d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0d0:	4b1d      	ldr	r3, [pc, #116]	; (800f148 <pvPortMalloc+0x18c>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	4a1b      	ldr	r2, [pc, #108]	; (800f148 <pvPortMalloc+0x18c>)
 800f0dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0de:	4b1a      	ldr	r3, [pc, #104]	; (800f148 <pvPortMalloc+0x18c>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	4b1b      	ldr	r3, [pc, #108]	; (800f150 <pvPortMalloc+0x194>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d203      	bcs.n	800f0f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f0ea:	4b17      	ldr	r3, [pc, #92]	; (800f148 <pvPortMalloc+0x18c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4a18      	ldr	r2, [pc, #96]	; (800f150 <pvPortMalloc+0x194>)
 800f0f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	685a      	ldr	r2, [r3, #4]
 800f0f6:	4b13      	ldr	r3, [pc, #76]	; (800f144 <pvPortMalloc+0x188>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	431a      	orrs	r2, r3
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	2200      	movs	r2, #0
 800f104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f106:	f7fe ff0d 	bl	800df24 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f110:	f7f1 fcf4 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	f003 0307 	and.w	r3, r3, #7
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00b      	beq.n	800f136 <pvPortMalloc+0x17a>
 800f11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f122:	b672      	cpsid	i
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	b662      	cpsie	i
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	e7fe      	b.n	800f134 <pvPortMalloc+0x178>
	return pvReturn;
 800f136:	69fb      	ldr	r3, [r7, #28]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3728      	adds	r7, #40	; 0x28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20008538 	.word	0x20008538
 800f144:	20008544 	.word	0x20008544
 800f148:	2000853c 	.word	0x2000853c
 800f14c:	20008530 	.word	0x20008530
 800f150:	20008540 	.word	0x20008540

0800f154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d04a      	beq.n	800f1fc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f166:	2308      	movs	r3, #8
 800f168:	425b      	negs	r3, r3
 800f16a:	697a      	ldr	r2, [r7, #20]
 800f16c:	4413      	add	r3, r2
 800f16e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	4b22      	ldr	r3, [pc, #136]	; (800f204 <vPortFree+0xb0>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4013      	ands	r3, r2
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d10b      	bne.n	800f19a <vPortFree+0x46>
 800f182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f186:	b672      	cpsid	i
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	b662      	cpsie	i
 800f196:	60fb      	str	r3, [r7, #12]
 800f198:	e7fe      	b.n	800f198 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00b      	beq.n	800f1ba <vPortFree+0x66>
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	b672      	cpsid	i
 800f1a8:	f383 8811 	msr	BASEPRI, r3
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	b662      	cpsie	i
 800f1b6:	60bb      	str	r3, [r7, #8]
 800f1b8:	e7fe      	b.n	800f1b8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	4b11      	ldr	r3, [pc, #68]	; (800f204 <vPortFree+0xb0>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d019      	beq.n	800f1fc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d115      	bne.n	800f1fc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	685a      	ldr	r2, [r3, #4]
 800f1d4:	4b0b      	ldr	r3, [pc, #44]	; (800f204 <vPortFree+0xb0>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	43db      	mvns	r3, r3
 800f1da:	401a      	ands	r2, r3
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1e0:	f7fe fe92 	bl	800df08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	4b07      	ldr	r3, [pc, #28]	; (800f208 <vPortFree+0xb4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	4a06      	ldr	r2, [pc, #24]	; (800f208 <vPortFree+0xb4>)
 800f1f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1f2:	6938      	ldr	r0, [r7, #16]
 800f1f4:	f000 f86c 	bl	800f2d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f1f8:	f7fe fe94 	bl	800df24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1fc:	bf00      	nop
 800f1fe:	3718      	adds	r7, #24
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	20008544 	.word	0x20008544
 800f208:	2000853c 	.word	0x2000853c

0800f20c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f20c:	b480      	push	{r7}
 800f20e:	b085      	sub	sp, #20
 800f210:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f216:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f218:	4b27      	ldr	r3, [pc, #156]	; (800f2b8 <prvHeapInit+0xac>)
 800f21a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f003 0307 	and.w	r3, r3, #7
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00c      	beq.n	800f240 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 0307 	bic.w	r3, r3, #7
 800f232:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	4a1f      	ldr	r2, [pc, #124]	; (800f2b8 <prvHeapInit+0xac>)
 800f23c:	4413      	add	r3, r2
 800f23e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f244:	4a1d      	ldr	r2, [pc, #116]	; (800f2bc <prvHeapInit+0xb0>)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f24a:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <prvHeapInit+0xb0>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	4413      	add	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f258:	2208      	movs	r2, #8
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	1a9b      	subs	r3, r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f023 0307 	bic.w	r3, r3, #7
 800f266:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	4a15      	ldr	r2, [pc, #84]	; (800f2c0 <prvHeapInit+0xb4>)
 800f26c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f26e:	4b14      	ldr	r3, [pc, #80]	; (800f2c0 <prvHeapInit+0xb4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2200      	movs	r2, #0
 800f274:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f276:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <prvHeapInit+0xb4>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2200      	movs	r2, #0
 800f27c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	1ad2      	subs	r2, r2, r3
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f28c:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <prvHeapInit+0xb4>)
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	4a0a      	ldr	r2, [pc, #40]	; (800f2c4 <prvHeapInit+0xb8>)
 800f29a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a09      	ldr	r2, [pc, #36]	; (800f2c8 <prvHeapInit+0xbc>)
 800f2a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2a4:	4b09      	ldr	r3, [pc, #36]	; (800f2cc <prvHeapInit+0xc0>)
 800f2a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2aa:	601a      	str	r2, [r3, #0]
}
 800f2ac:	bf00      	nop
 800f2ae:	3714      	adds	r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	20000530 	.word	0x20000530
 800f2bc:	20008530 	.word	0x20008530
 800f2c0:	20008538 	.word	0x20008538
 800f2c4:	20008540 	.word	0x20008540
 800f2c8:	2000853c 	.word	0x2000853c
 800f2cc:	20008544 	.word	0x20008544

0800f2d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2d8:	4b28      	ldr	r3, [pc, #160]	; (800f37c <prvInsertBlockIntoFreeList+0xac>)
 800f2da:	60fb      	str	r3, [r7, #12]
 800f2dc:	e002      	b.n	800f2e4 <prvInsertBlockIntoFreeList+0x14>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d8f7      	bhi.n	800f2de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d108      	bne.n	800f312 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	441a      	add	r2, r3
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	441a      	add	r2, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	429a      	cmp	r2, r3
 800f324:	d118      	bne.n	800f358 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	4b15      	ldr	r3, [pc, #84]	; (800f380 <prvInsertBlockIntoFreeList+0xb0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d00d      	beq.n	800f34e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	441a      	add	r2, r3
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	e008      	b.n	800f360 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f34e:	4b0c      	ldr	r3, [pc, #48]	; (800f380 <prvInsertBlockIntoFreeList+0xb0>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	e003      	b.n	800f360 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	429a      	cmp	r2, r3
 800f366:	d002      	beq.n	800f36e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f36e:	bf00      	nop
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	20008530 	.word	0x20008530
 800f380:	20008538 	.word	0x20008538

0800f384 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08c      	sub	sp, #48	; 0x30
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a51      	ldr	r2, [pc, #324]	; (800f4d4 <I2Cx_MspInit+0x150>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d14d      	bne.n	800f430 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f394:	4b50      	ldr	r3, [pc, #320]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f398:	4a4f      	ldr	r2, [pc, #316]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f39e:	6313      	str	r3, [r2, #48]	; 0x30
 800f3a0:	4b4d      	ldr	r3, [pc, #308]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3a8:	61bb      	str	r3, [r7, #24]
 800f3aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f3ac:	2380      	movs	r3, #128	; 0x80
 800f3ae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f3b0:	2312      	movs	r3, #18
 800f3b2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f3bc:	2304      	movs	r3, #4
 800f3be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f3c0:	f107 031c 	add.w	r3, r7, #28
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4845      	ldr	r0, [pc, #276]	; (800f4dc <I2Cx_MspInit+0x158>)
 800f3c8:	f7f5 ff78 	bl	80052bc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f3cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f3d2:	f107 031c 	add.w	r3, r7, #28
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4840      	ldr	r0, [pc, #256]	; (800f4dc <I2Cx_MspInit+0x158>)
 800f3da:	f7f5 ff6f 	bl	80052bc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f3de:	4b3e      	ldr	r3, [pc, #248]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	4a3d      	ldr	r2, [pc, #244]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f3e8:	6413      	str	r3, [r2, #64]	; 0x40
 800f3ea:	4b3b      	ldr	r3, [pc, #236]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3f2:	617b      	str	r3, [r7, #20]
 800f3f4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f3f6:	4b38      	ldr	r3, [pc, #224]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	4a37      	ldr	r2, [pc, #220]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f3fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f400:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f402:	4b35      	ldr	r3, [pc, #212]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	4a34      	ldr	r2, [pc, #208]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f408:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f40c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f40e:	2200      	movs	r2, #0
 800f410:	210f      	movs	r1, #15
 800f412:	2048      	movs	r0, #72	; 0x48
 800f414:	f7f5 f924 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f418:	2048      	movs	r0, #72	; 0x48
 800f41a:	f7f5 f93d 	bl	8004698 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f41e:	2200      	movs	r2, #0
 800f420:	210f      	movs	r1, #15
 800f422:	2049      	movs	r0, #73	; 0x49
 800f424:	f7f5 f91c 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f428:	2049      	movs	r0, #73	; 0x49
 800f42a:	f7f5 f935 	bl	8004698 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f42e:	e04d      	b.n	800f4cc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f430:	4b29      	ldr	r3, [pc, #164]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f434:	4a28      	ldr	r2, [pc, #160]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f436:	f043 0302 	orr.w	r3, r3, #2
 800f43a:	6313      	str	r3, [r2, #48]	; 0x30
 800f43c:	4b26      	ldr	r3, [pc, #152]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f440:	f003 0302 	and.w	r3, r3, #2
 800f444:	613b      	str	r3, [r7, #16]
 800f446:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f44c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f44e:	2312      	movs	r3, #18
 800f450:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f452:	2300      	movs	r3, #0
 800f454:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f456:	2302      	movs	r3, #2
 800f458:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800f45a:	2304      	movs	r3, #4
 800f45c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f45e:	f107 031c 	add.w	r3, r7, #28
 800f462:	4619      	mov	r1, r3
 800f464:	481e      	ldr	r0, [pc, #120]	; (800f4e0 <I2Cx_MspInit+0x15c>)
 800f466:	f7f5 ff29 	bl	80052bc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800f46a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f46e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f470:	f107 031c 	add.w	r3, r7, #28
 800f474:	4619      	mov	r1, r3
 800f476:	481a      	ldr	r0, [pc, #104]	; (800f4e0 <I2Cx_MspInit+0x15c>)
 800f478:	f7f5 ff20 	bl	80052bc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800f47c:	4b16      	ldr	r3, [pc, #88]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f480:	4a15      	ldr	r2, [pc, #84]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f486:	6413      	str	r3, [r2, #64]	; 0x40
 800f488:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f48c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f490:	60fb      	str	r3, [r7, #12]
 800f492:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800f494:	4b10      	ldr	r3, [pc, #64]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f496:	6a1b      	ldr	r3, [r3, #32]
 800f498:	4a0f      	ldr	r2, [pc, #60]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f49a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f49e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800f4a0:	4b0d      	ldr	r3, [pc, #52]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f4a2:	6a1b      	ldr	r3, [r3, #32]
 800f4a4:	4a0c      	ldr	r2, [pc, #48]	; (800f4d8 <I2Cx_MspInit+0x154>)
 800f4a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4aa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	210f      	movs	r1, #15
 800f4b0:	201f      	movs	r0, #31
 800f4b2:	f7f5 f8d5 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800f4b6:	201f      	movs	r0, #31
 800f4b8:	f7f5 f8ee 	bl	8004698 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800f4bc:	2200      	movs	r2, #0
 800f4be:	210f      	movs	r1, #15
 800f4c0:	2020      	movs	r0, #32
 800f4c2:	f7f5 f8cd 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800f4c6:	2020      	movs	r0, #32
 800f4c8:	f7f5 f8e6 	bl	8004698 <HAL_NVIC_EnableIRQ>
}
 800f4cc:	bf00      	nop
 800f4ce:	3730      	adds	r7, #48	; 0x30
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	20008548 	.word	0x20008548
 800f4d8:	40023800 	.word	0x40023800
 800f4dc:	40021c00 	.word	0x40021c00
 800f4e0:	40020400 	.word	0x40020400

0800f4e4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7f6 fbc3 	bl	8005c78 <HAL_I2C_GetState>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d125      	bne.n	800f544 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a14      	ldr	r2, [pc, #80]	; (800f54c <I2Cx_Init+0x68>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d103      	bne.n	800f508 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a13      	ldr	r2, [pc, #76]	; (800f550 <I2Cx_Init+0x6c>)
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	e002      	b.n	800f50e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4a12      	ldr	r2, [pc, #72]	; (800f554 <I2Cx_Init+0x70>)
 800f50c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4a11      	ldr	r2, [pc, #68]	; (800f558 <I2Cx_Init+0x74>)
 800f512:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2201      	movs	r2, #1
 800f51e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7ff ff23 	bl	800f384 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7f6 f898 	bl	8005674 <HAL_I2C_Init>
  }
}
 800f544:	bf00      	nop
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20008548 	.word	0x20008548
 800f550:	40005c00 	.word	0x40005c00
 800f554:	40005400 	.word	0x40005400
 800f558:	40912732 	.word	0x40912732

0800f55c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08a      	sub	sp, #40	; 0x28
 800f560:	af04      	add	r7, sp, #16
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	4608      	mov	r0, r1
 800f566:	4611      	mov	r1, r2
 800f568:	461a      	mov	r2, r3
 800f56a:	4603      	mov	r3, r0
 800f56c:	72fb      	strb	r3, [r7, #11]
 800f56e:	460b      	mov	r3, r1
 800f570:	813b      	strh	r3, [r7, #8]
 800f572:	4613      	mov	r3, r2
 800f574:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f576:	2300      	movs	r3, #0
 800f578:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	b299      	uxth	r1, r3
 800f57e:	88f8      	ldrh	r0, [r7, #6]
 800f580:	893a      	ldrh	r2, [r7, #8]
 800f582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f586:	9302      	str	r3, [sp, #8]
 800f588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f58a:	9301      	str	r3, [sp, #4]
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	9300      	str	r3, [sp, #0]
 800f590:	4603      	mov	r3, r0
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f7f6 fa56 	bl	8005a44 <HAL_I2C_Mem_Read>
 800f598:	4603      	mov	r3, r0
 800f59a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800f59c:	7dfb      	ldrb	r3, [r7, #23]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d004      	beq.n	800f5ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800f5a2:	7afb      	ldrb	r3, [r7, #11]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f000 f832 	bl	800f610 <I2Cx_Error>
  }
  return status;    
 800f5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3718      	adds	r7, #24
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b08a      	sub	sp, #40	; 0x28
 800f5ba:	af04      	add	r7, sp, #16
 800f5bc:	60f8      	str	r0, [r7, #12]
 800f5be:	4608      	mov	r0, r1
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	72fb      	strb	r3, [r7, #11]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	813b      	strh	r3, [r7, #8]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800f5d4:	7afb      	ldrb	r3, [r7, #11]
 800f5d6:	b299      	uxth	r1, r3
 800f5d8:	88f8      	ldrh	r0, [r7, #6]
 800f5da:	893a      	ldrh	r2, [r7, #8]
 800f5dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5e0:	9302      	str	r3, [sp, #8]
 800f5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f7f6 f915 	bl	800581c <HAL_I2C_Mem_Write>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d004      	beq.n	800f606 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	4619      	mov	r1, r3
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 f805 	bl	800f610 <I2Cx_Error>
  }
  return status;
 800f606:	7dfb      	ldrb	r3, [r7, #23]
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7f6 f8b9 	bl	8005794 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff ff5e 	bl	800f4e4 <I2Cx_Init>
}
 800f628:	bf00      	nop
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800f634:	4802      	ldr	r0, [pc, #8]	; (800f640 <TS_IO_Init+0x10>)
 800f636:	f7ff ff55 	bl	800f4e4 <I2Cx_Init>
}
 800f63a:	bf00      	nop
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	20008548 	.word	0x20008548

0800f644 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af02      	add	r7, sp, #8
 800f64a:	4603      	mov	r3, r0
 800f64c:	71fb      	strb	r3, [r7, #7]
 800f64e:	460b      	mov	r3, r1
 800f650:	71bb      	strb	r3, [r7, #6]
 800f652:	4613      	mov	r3, r2
 800f654:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800f656:	79bb      	ldrb	r3, [r7, #6]
 800f658:	b29a      	uxth	r2, r3
 800f65a:	79f9      	ldrb	r1, [r7, #7]
 800f65c:	2301      	movs	r3, #1
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	1d7b      	adds	r3, r7, #5
 800f662:	9300      	str	r3, [sp, #0]
 800f664:	2301      	movs	r3, #1
 800f666:	4803      	ldr	r0, [pc, #12]	; (800f674 <TS_IO_Write+0x30>)
 800f668:	f7ff ffa5 	bl	800f5b6 <I2Cx_WriteMultiple>
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	20008548 	.word	0x20008548

0800f678 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	4603      	mov	r3, r0
 800f680:	460a      	mov	r2, r1
 800f682:	71fb      	strb	r3, [r7, #7]
 800f684:	4613      	mov	r3, r2
 800f686:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800f688:	2300      	movs	r3, #0
 800f68a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800f68c:	79bb      	ldrb	r3, [r7, #6]
 800f68e:	b29a      	uxth	r2, r3
 800f690:	79f9      	ldrb	r1, [r7, #7]
 800f692:	2301      	movs	r3, #1
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	f107 030f 	add.w	r3, r7, #15
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	2301      	movs	r3, #1
 800f69e:	4804      	ldr	r0, [pc, #16]	; (800f6b0 <TS_IO_Read+0x38>)
 800f6a0:	f7ff ff5c 	bl	800f55c <I2Cx_ReadMultiple>

  return read_value;
 800f6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	20008548 	.word	0x20008548

0800f6b4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f3 ffd1 	bl	8003664 <HAL_Delay>
}
 800f6c2:	bf00      	nop
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	460a      	mov	r2, r1
 800f6d6:	80fb      	strh	r3, [r7, #6]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800f6e0:	4a14      	ldr	r2, [pc, #80]	; (800f734 <BSP_TS_Init+0x68>)
 800f6e2:	88fb      	ldrh	r3, [r7, #6]
 800f6e4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800f6e6:	4a14      	ldr	r2, [pc, #80]	; (800f738 <BSP_TS_Init+0x6c>)
 800f6e8:	88bb      	ldrh	r3, [r7, #4]
 800f6ea:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800f6ec:	4b13      	ldr	r3, [pc, #76]	; (800f73c <BSP_TS_Init+0x70>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2070      	movs	r0, #112	; 0x70
 800f6f2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800f6f4:	4b11      	ldr	r3, [pc, #68]	; (800f73c <BSP_TS_Init+0x70>)
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	2070      	movs	r0, #112	; 0x70
 800f6fa:	4798      	blx	r3
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b51      	cmp	r3, #81	; 0x51
 800f700:	d111      	bne.n	800f726 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <BSP_TS_Init+0x74>)
 800f704:	4a0d      	ldr	r2, [pc, #52]	; (800f73c <BSP_TS_Init+0x70>)
 800f706:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <BSP_TS_Init+0x78>)
 800f70a:	2270      	movs	r2, #112	; 0x70
 800f70c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800f70e:	4b0e      	ldr	r3, [pc, #56]	; (800f748 <BSP_TS_Init+0x7c>)
 800f710:	2208      	movs	r2, #8
 800f712:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800f714:	4b0a      	ldr	r3, [pc, #40]	; (800f740 <BSP_TS_Init+0x74>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	4a0a      	ldr	r2, [pc, #40]	; (800f744 <BSP_TS_Init+0x78>)
 800f71c:	7812      	ldrb	r2, [r2, #0]
 800f71e:	b292      	uxth	r2, r2
 800f720:	4610      	mov	r0, r2
 800f722:	4798      	blx	r3
 800f724:	e001      	b.n	800f72a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800f726:	2303      	movs	r3, #3
 800f728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	20008598 	.word	0x20008598
 800f738:	2000859a 	.word	0x2000859a
 800f73c:	20000058 	.word	0x20000058
 800f740:	20008594 	.word	0x20008594
 800f744:	2000859d 	.word	0x2000859d
 800f748:	2000859c 	.word	0x2000859c

0800f74c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800f74c:	b590      	push	{r4, r7, lr}
 800f74e:	b097      	sub	sp, #92	; 0x5c
 800f750:	af02      	add	r7, sp, #8
 800f752:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800f766:	4b97      	ldr	r3, [pc, #604]	; (800f9c4 <BSP_TS_GetState+0x278>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	4a96      	ldr	r2, [pc, #600]	; (800f9c8 <BSP_TS_GetState+0x27c>)
 800f76e:	7812      	ldrb	r2, [r2, #0]
 800f770:	b292      	uxth	r2, r2
 800f772:	4610      	mov	r0, r2
 800f774:	4798      	blx	r3
 800f776:	4603      	mov	r3, r0
 800f778:	461a      	mov	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 81a8 	beq.w	800fad8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800f788:	2300      	movs	r3, #0
 800f78a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f78c:	e197      	b.n	800fabe <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800f78e:	4b8d      	ldr	r3, [pc, #564]	; (800f9c4 <BSP_TS_GetState+0x278>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	695b      	ldr	r3, [r3, #20]
 800f794:	4a8c      	ldr	r2, [pc, #560]	; (800f9c8 <BSP_TS_GetState+0x27c>)
 800f796:	7812      	ldrb	r2, [r2, #0]
 800f798:	b290      	uxth	r0, r2
 800f79a:	f107 0120 	add.w	r1, r7, #32
 800f79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7a0:	0052      	lsls	r2, r2, #1
 800f7a2:	188c      	adds	r4, r1, r2
 800f7a4:	f107 0114 	add.w	r1, r7, #20
 800f7a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7aa:	0052      	lsls	r2, r2, #1
 800f7ac:	440a      	add	r2, r1
 800f7ae:	4621      	mov	r1, r4
 800f7b0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800f7b2:	4b86      	ldr	r3, [pc, #536]	; (800f9cc <BSP_TS_GetState+0x280>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d11b      	bne.n	800f7f2 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800f7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800f7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ca:	005b      	lsls	r3, r3, #1
 800f7cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f7d0:	440b      	add	r3, r1
 800f7d2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800f7d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f7de:	4413      	add	r3, r2
 800f7e0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800f7e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f7ec:	440b      	add	r3, r1
 800f7ee:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800f7f2:	4b76      	ldr	r3, [pc, #472]	; (800f9cc <BSP_TS_GetState+0x280>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	f003 0302 	and.w	r3, r3, #2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d010      	beq.n	800f820 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800f7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f800:	005b      	lsls	r3, r3, #1
 800f802:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f806:	4413      	add	r3, r2
 800f808:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800f80c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800f810:	b29a      	uxth	r2, r3
 800f812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f81a:	440b      	add	r3, r1
 800f81c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800f820:	4b6a      	ldr	r3, [pc, #424]	; (800f9cc <BSP_TS_GetState+0x280>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	f003 0304 	and.w	r3, r3, #4
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d010      	beq.n	800f84e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800f82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f82e:	005b      	lsls	r3, r3, #1
 800f830:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f834:	4413      	add	r3, r2
 800f836:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800f83a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800f83e:	b29a      	uxth	r2, r3
 800f840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f848:	440b      	add	r3, r1
 800f84a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800f84e:	4b5f      	ldr	r3, [pc, #380]	; (800f9cc <BSP_TS_GetState+0x280>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	f003 0308 	and.w	r3, r3, #8
 800f856:	2b00      	cmp	r3, #0
 800f858:	d01b      	beq.n	800f892 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800f85a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f862:	4413      	add	r3, r2
 800f864:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800f868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f870:	440b      	add	r3, r1
 800f872:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800f876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f87e:	4413      	add	r3, r2
 800f880:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800f884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f886:	005b      	lsls	r3, r3, #1
 800f888:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f88c:	440b      	add	r3, r1
 800f88e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800f892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f89a:	4413      	add	r3, r2
 800f89c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4a4b      	ldr	r2, [pc, #300]	; (800f9d0 <BSP_TS_GetState+0x284>)
 800f8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8aa:	4299      	cmp	r1, r3
 800f8ac:	d90e      	bls.n	800f8cc <BSP_TS_GetState+0x180>
 800f8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800f8bc:	4944      	ldr	r1, [pc, #272]	; (800f9d0 <BSP_TS_GetState+0x284>)
 800f8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	1ad3      	subs	r3, r2, r3
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	e00d      	b.n	800f8e8 <BSP_TS_GetState+0x19c>
 800f8cc:	4a40      	ldr	r2, [pc, #256]	; (800f9d0 <BSP_TS_GetState+0x284>)
 800f8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f8de:	440b      	add	r3, r1
 800f8e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800f8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f8f4:	4413      	add	r3, r2
 800f8f6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	4a35      	ldr	r2, [pc, #212]	; (800f9d4 <BSP_TS_GetState+0x288>)
 800f8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f904:	4299      	cmp	r1, r3
 800f906:	d90e      	bls.n	800f926 <BSP_TS_GetState+0x1da>
 800f908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f910:	4413      	add	r3, r2
 800f912:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800f916:	492f      	ldr	r1, [pc, #188]	; (800f9d4 <BSP_TS_GetState+0x288>)
 800f918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f91a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	b29b      	uxth	r3, r3
 800f924:	e00d      	b.n	800f942 <BSP_TS_GetState+0x1f6>
 800f926:	4a2b      	ldr	r2, [pc, #172]	; (800f9d4 <BSP_TS_GetState+0x288>)
 800f928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f92e:	b29a      	uxth	r2, r3
 800f930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f932:	005b      	lsls	r3, r3, #1
 800f934:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f938:	440b      	add	r3, r1
 800f93a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	b29b      	uxth	r3, r3
 800f942:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800f946:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f94a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f94e:	4413      	add	r3, r2
 800f950:	2b05      	cmp	r3, #5
 800f952:	dd17      	ble.n	800f984 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800f954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f956:	005b      	lsls	r3, r3, #1
 800f958:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f95c:	4413      	add	r3, r2
 800f95e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800f962:	4619      	mov	r1, r3
 800f964:	4a1a      	ldr	r2, [pc, #104]	; (800f9d0 <BSP_TS_GetState+0x284>)
 800f966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800f96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f974:	4413      	add	r3, r2
 800f976:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800f97a:	4619      	mov	r1, r3
 800f97c:	4a15      	ldr	r2, [pc, #84]	; (800f9d4 <BSP_TS_GetState+0x288>)
 800f97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800f984:	4b10      	ldr	r3, [pc, #64]	; (800f9c8 <BSP_TS_GetState+0x27c>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b70      	cmp	r3, #112	; 0x70
 800f98a:	d125      	bne.n	800f9d8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800f98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f994:	4413      	add	r3, r2
 800f996:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f99e:	005b      	lsls	r3, r3, #1
 800f9a0:	4413      	add	r3, r2
 800f9a2:	460a      	mov	r2, r1
 800f9a4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800f9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9a8:	005b      	lsls	r3, r3, #1
 800f9aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	4413      	add	r3, r2
 800f9be:	460a      	mov	r2, r1
 800f9c0:	809a      	strh	r2, [r3, #4]
 800f9c2:	e02c      	b.n	800fa1e <BSP_TS_GetState+0x2d2>
 800f9c4:	20008594 	.word	0x20008594
 800f9c8:	2000859d 	.word	0x2000859d
 800f9cc:	2000859c 	.word	0x2000859c
 800f9d0:	200085a0 	.word	0x200085a0
 800f9d4:	200085b4 	.word	0x200085b4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800f9d8:	4b42      	ldr	r3, [pc, #264]	; (800fae4 <BSP_TS_GetState+0x398>)
 800f9da:	881b      	ldrh	r3, [r3, #0]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4a42      	ldr	r2, [pc, #264]	; (800fae8 <BSP_TS_GetState+0x39c>)
 800f9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e6:	fb03 f301 	mul.w	r3, r3, r1
 800f9ea:	0b1b      	lsrs	r3, r3, #12
 800f9ec:	b299      	uxth	r1, r3
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	4413      	add	r3, r2
 800f9f6:	460a      	mov	r2, r1
 800f9f8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800f9fa:	4b3c      	ldr	r3, [pc, #240]	; (800faec <BSP_TS_GetState+0x3a0>)
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4a3b      	ldr	r2, [pc, #236]	; (800faf0 <BSP_TS_GetState+0x3a4>)
 800fa02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa08:	fb03 f301 	mul.w	r3, r3, r1
 800fa0c:	0b1b      	lsrs	r3, r3, #12
 800fa0e:	b299      	uxth	r1, r3
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa14:	3304      	adds	r3, #4
 800fa16:	005b      	lsls	r3, r3, #1
 800fa18:	4413      	add	r3, r2
 800fa1a:	460a      	mov	r2, r1
 800fa1c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800fa1e:	4b35      	ldr	r3, [pc, #212]	; (800faf4 <BSP_TS_GetState+0x3a8>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	b298      	uxth	r0, r3
 800fa24:	f107 010c 	add.w	r1, r7, #12
 800fa28:	f107 0210 	add.w	r2, r7, #16
 800fa2c:	f107 0308 	add.w	r3, r7, #8
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	460b      	mov	r3, r1
 800fa34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fa36:	f008 fa19 	bl	8017e6c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	b2d9      	uxtb	r1, r3
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa42:	4413      	add	r3, r2
 800fa44:	3316      	adds	r3, #22
 800fa46:	460a      	mov	r2, r1
 800fa48:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	b2d9      	uxtb	r1, r3
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa52:	4413      	add	r3, r2
 800fa54:	3320      	adds	r3, #32
 800fa56:	460a      	mov	r2, r1
 800fa58:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d827      	bhi.n	800fab0 <BSP_TS_GetState+0x364>
 800fa60:	a201      	add	r2, pc, #4	; (adr r2, 800fa68 <BSP_TS_GetState+0x31c>)
 800fa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa66:	bf00      	nop
 800fa68:	0800fa79 	.word	0x0800fa79
 800fa6c:	0800fa87 	.word	0x0800fa87
 800fa70:	0800fa95 	.word	0x0800fa95
 800fa74:	0800faa3 	.word	0x0800faa3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa7c:	4413      	add	r3, r2
 800fa7e:	331b      	adds	r3, #27
 800fa80:	2201      	movs	r2, #1
 800fa82:	701a      	strb	r2, [r3, #0]
          break;
 800fa84:	e018      	b.n	800fab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800fa86:	687a      	ldr	r2, [r7, #4]
 800fa88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa8a:	4413      	add	r3, r2
 800fa8c:	331b      	adds	r3, #27
 800fa8e:	2202      	movs	r2, #2
 800fa90:	701a      	strb	r2, [r3, #0]
          break;
 800fa92:	e011      	b.n	800fab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa98:	4413      	add	r3, r2
 800fa9a:	331b      	adds	r3, #27
 800fa9c:	2203      	movs	r2, #3
 800fa9e:	701a      	strb	r2, [r3, #0]
          break;
 800faa0:	e00a      	b.n	800fab8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa6:	4413      	add	r3, r2
 800faa8:	331b      	adds	r3, #27
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
          break;
 800faae:	e003      	b.n	800fab8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800fab0:	2301      	movs	r3, #1
 800fab2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800fab6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800fab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faba:	3301      	adds	r3, #1
 800fabc:	64bb      	str	r3, [r7, #72]	; 0x48
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	461a      	mov	r2, r3
 800fac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac6:	4293      	cmp	r3, r2
 800fac8:	f4ff ae61 	bcc.w	800f78e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 f813 	bl	800faf8 <BSP_TS_Get_GestureId>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800fad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3754      	adds	r7, #84	; 0x54
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd90      	pop	{r4, r7, pc}
 800fae4:	20008598 	.word	0x20008598
 800fae8:	200085a0 	.word	0x200085a0
 800faec:	2000859a 	.word	0x2000859a
 800faf0:	200085b4 	.word	0x200085b4
 800faf4:	2000859d 	.word	0x2000859d

0800faf8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800fb04:	2300      	movs	r3, #0
 800fb06:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800fb08:	4b1f      	ldr	r3, [pc, #124]	; (800fb88 <BSP_TS_Get_GestureId+0x90>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	f107 0208 	add.w	r2, r7, #8
 800fb12:	4611      	mov	r1, r2
 800fb14:	4618      	mov	r0, r3
 800fb16:	f008 f990 	bl	8017e3a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2b18      	cmp	r3, #24
 800fb1e:	d01b      	beq.n	800fb58 <BSP_TS_Get_GestureId+0x60>
 800fb20:	2b18      	cmp	r3, #24
 800fb22:	d806      	bhi.n	800fb32 <BSP_TS_Get_GestureId+0x3a>
 800fb24:	2b10      	cmp	r3, #16
 800fb26:	d00f      	beq.n	800fb48 <BSP_TS_Get_GestureId+0x50>
 800fb28:	2b14      	cmp	r3, #20
 800fb2a:	d011      	beq.n	800fb50 <BSP_TS_Get_GestureId+0x58>
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d007      	beq.n	800fb40 <BSP_TS_Get_GestureId+0x48>
 800fb30:	e022      	b.n	800fb78 <BSP_TS_Get_GestureId+0x80>
 800fb32:	2b40      	cmp	r3, #64	; 0x40
 800fb34:	d018      	beq.n	800fb68 <BSP_TS_Get_GestureId+0x70>
 800fb36:	2b49      	cmp	r3, #73	; 0x49
 800fb38:	d01a      	beq.n	800fb70 <BSP_TS_Get_GestureId+0x78>
 800fb3a:	2b1c      	cmp	r3, #28
 800fb3c:	d010      	beq.n	800fb60 <BSP_TS_Get_GestureId+0x68>
 800fb3e:	e01b      	b.n	800fb78 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb46:	e01a      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb4e:	e016      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2202      	movs	r2, #2
 800fb54:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb56:	e012      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2203      	movs	r2, #3
 800fb5c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb5e:	e00e      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2204      	movs	r2, #4
 800fb64:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb66:	e00a      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2205      	movs	r2, #5
 800fb6c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb6e:	e006      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2206      	movs	r2, #6
 800fb74:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800fb76:	e002      	b.n	800fb7e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb7c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	2000859d 	.word	0x2000859d

0800fb8c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800fb90:	f007 fb78 	bl	8017284 <touchgfx_init>
}
 800fb94:	bf00      	nop
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800fb9c:	f007 fb9c 	bl	80172d8 <touchgfx_taskEntry>
}
 800fba0:	bf00      	nop
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
    {
 800fbac:	4a04      	ldr	r2, [pc, #16]	; (800fbc0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	601a      	str	r2, [r3, #0]
    }
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	08029728 	.word	0x08029728

0800fbc4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
    }
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff ffe9 	bl	800fba4 <_ZN8touchgfx12FontProviderD1Ev>
 800fbd2:	2104      	movs	r1, #4
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f018 f984 	bl	8027ee2 <_ZdlPvj>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	460b      	mov	r3, r1
 800fbee:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800fbf0:	887b      	ldrh	r3, [r7, #2]
 800fbf2:	2b07      	cmp	r3, #7
 800fbf4:	d83a      	bhi.n	800fc6c <_ZN23ApplicationFontProvider7getFontEt+0x88>
 800fbf6:	a201      	add	r2, pc, #4	; (adr r2, 800fbfc <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800fbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfc:	0800fc1d 	.word	0x0800fc1d
 800fc00:	0800fc27 	.word	0x0800fc27
 800fc04:	0800fc31 	.word	0x0800fc31
 800fc08:	0800fc3b 	.word	0x0800fc3b
 800fc0c:	0800fc45 	.word	0x0800fc45
 800fc10:	0800fc4f 	.word	0x0800fc4f
 800fc14:	0800fc59 	.word	0x0800fc59
 800fc18:	0800fc63 	.word	0x0800fc63
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800fc1c:	f005 fa2e 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc20:	4603      	mov	r3, r0
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	e023      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800fc26:	f005 fa29 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	e01e      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800fc30:	f005 fa24 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc34:	4603      	mov	r3, r0
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	e019      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800fc3a:	f005 fa1f 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	e014      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800fc44:	f005 fa1a 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	e00f      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800fc4e:	f005 fa15 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc52:	4603      	mov	r3, r0
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	e00a      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800fc58:	f005 fa10 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	e005      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800fc62:	f005 fa0b 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 800fc66:	4603      	mov	r3, r0
 800fc68:	699b      	ldr	r3, [r3, #24]
 800fc6a:	e000      	b.n	800fc6e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 800fc6c:	2300      	movs	r3, #0
    }
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop

0800fc78 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff ff8b 	bl	800fba4 <_ZN8touchgfx12FontProviderD1Ev>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08029714 	.word	0x08029714

0800fc9c <_ZN23ApplicationFontProviderD0Ev>:
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffe7 	bl	800fc78 <_ZN23ApplicationFontProviderD1Ev>
 800fcaa:	2104      	movs	r1, #4
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f018 f918 	bl	8027ee2 <_ZdlPvj>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800fcbc:	b480      	push	{r7}
 800fcbe:	b083      	sub	sp, #12
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	4a04      	ldr	r2, [pc, #16]	; (800fcd8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	0802c124 	.word	0x0802c124

0800fcdc <_ZN8touchgfx4FontD0Ev>:
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f7ff ffe9 	bl	800fcbc <_ZN8touchgfx4FontD1Ev>
 800fcea:	2110      	movs	r1, #16
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f018 f8f8 	bl	8027ee2 <_ZdlPvj>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800fcfc:	b590      	push	{r4, r7, lr}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3308      	adds	r3, #8
 800fd16:	681c      	ldr	r4, [r3, #0]
 800fd18:	f107 030f 	add.w	r3, r7, #15
 800fd1c:	f107 0210 	add.w	r2, r7, #16
 800fd20:	8879      	ldrh	r1, [r7, #2]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	47a0      	blx	r4
 800fd26:	6178      	str	r0, [r7, #20]
        return glyph;
 800fd28:	697b      	ldr	r3, [r7, #20]
    }
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	371c      	adds	r7, #28
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd90      	pop	{r4, r7, pc}

0800fd32 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800fd32:	b480      	push	{r7}
 800fd34:	b083      	sub	sp, #12
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	895b      	ldrh	r3, [r3, #10]
    }
 800fd3e:	4618      	mov	r0, r3
 800fd40:	370c      	adds	r7, #12
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800fd4a:	b480      	push	{r7}
 800fd4c:	b083      	sub	sp, #12
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	899b      	ldrh	r3, [r3, #12]
    }
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr

0800fd62 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800fd62:	b480      	push	{r7}
 800fd64:	b083      	sub	sp, #12
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	889b      	ldrh	r3, [r3, #4]
    }
 800fd6e:	4618      	mov	r0, r3
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800fd7a:	b480      	push	{r7}
 800fd7c:	b083      	sub	sp, #12
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	889a      	ldrh	r2, [r3, #4]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	799b      	ldrb	r3, [r3, #6]
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	4413      	add	r3, r2
 800fd8e:	b29b      	uxth	r3, r3
    }
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	79db      	ldrb	r3, [r3, #7]
 800fda8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fdac:	b2db      	uxtb	r3, r3
    }
 800fdae:	4618      	mov	r0, r3
 800fdb0:	370c      	adds	r7, #12
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr

0800fdba <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800fdba:	b480      	push	{r7}
 800fdbc:	b083      	sub	sp, #12
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	79db      	ldrb	r3, [r3, #7]
 800fdc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fdca:	b2db      	uxtb	r3, r3
    }
 800fdcc:	4618      	mov	r0, r3
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	4a05      	ldr	r2, [pc, #20]	; (800fdf8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff ff67 	bl	800fcbc <_ZN8touchgfx4FontD1Ev>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	0802c1dc 	.word	0x0802c1dc

0800fdfc <_ZN8touchgfx9ConstFontD0Ev>:
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff ffe7 	bl	800fdd8 <_ZN8touchgfx9ConstFontD1Ev>
 800fe0a:	2118      	movs	r1, #24
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f018 f868 	bl	8027ee2 <_ZdlPvj>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff ffd3 	bl	800fdd8 <_ZN8touchgfx9ConstFontD1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	0802976c 	.word	0x0802976c

0800fe40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 800fe4e:	2124      	movs	r1, #36	; 0x24
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f018 f846 	bl	8027ee2 <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 f82d 	bl	800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800fe6e:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	4b08      	ldr	r3, [pc, #32]	; (800fe94 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800fe74:	6819      	ldr	r1, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	005b      	lsls	r3, r3, #1
 800fe7c:	440b      	add	r3, r1
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	4413      	add	r3, r2
 800fe84:	681b      	ldr	r3, [r3, #0]
    }
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	2000bf84 	.word	0x2000bf84
 800fe94:	2000bf7c 	.word	0x2000bf7c

0800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 f811 	bl	800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	005b      	lsls	r3, r3, #1
 800feb0:	4413      	add	r3, r2
 800feb2:	785b      	ldrb	r3, [r3, #1]
 800feb4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800feb8:	b2db      	uxtb	r3, r3
    }
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	2000bf7c 	.word	0x2000bf7c

0800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fed0:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d105      	bne.n	800fee4 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800fed8:	4b0b      	ldr	r3, [pc, #44]	; (800ff08 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800feda:	4a0c      	ldr	r2, [pc, #48]	; (800ff0c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800fedc:	21de      	movs	r1, #222	; 0xde
 800fede:	480c      	ldr	r0, [pc, #48]	; (800ff10 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800fee0:	f018 f82a 	bl	8027f38 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	881a      	ldrh	r2, [r3, #0]
 800fee8:	4b0a      	ldr	r3, [pc, #40]	; (800ff14 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800feea:	881b      	ldrh	r3, [r3, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d305      	bcc.n	800fefc <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800fef0:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800fef2:	4a06      	ldr	r2, [pc, #24]	; (800ff0c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800fef4:	21df      	movs	r1, #223	; 0xdf
 800fef6:	4806      	ldr	r0, [pc, #24]	; (800ff10 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800fef8:	f018 f81e 	bl	8027f38 <__assert_func>
    }
 800fefc:	bf00      	nop
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	2000bf7c 	.word	0x2000bf7c
 800ff08:	08028fe8 	.word	0x08028fe8
 800ff0c:	08029734 	.word	0x08029734
 800ff10:	0802902c 	.word	0x0802902c
 800ff14:	2000bf80 	.word	0x2000bf80
 800ff18:	08029070 	.word	0x08029070

0800ff1c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	7b5b      	ldrb	r3, [r3, #13]
 800ff28:	021b      	lsls	r3, r3, #8
 800ff2a:	b21b      	sxth	r3, r3
 800ff2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff30:	b21a      	sxth	r2, r3
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	7adb      	ldrb	r3, [r3, #11]
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	b21b      	sxth	r3, r3
 800ff3c:	b29b      	uxth	r3, r3
    }
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a1b      	ldr	r3, [r3, #32]
    }
 800ff56:	4618      	mov	r0, r3
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
	...

0800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08c      	sub	sp, #48	; 0x30
 800ff68:	af08      	add	r7, sp, #32
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	4611      	mov	r1, r2
 800ff70:	461a      	mov	r2, r3
 800ff72:	460b      	mov	r3, r1
 800ff74:	80fb      	strh	r3, [r7, #6]
 800ff76:	4613      	mov	r3, r2
 800ff78:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	88b9      	ldrh	r1, [r7, #4]
 800ff7e:	88fa      	ldrh	r2, [r7, #6]
 800ff80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ff82:	9306      	str	r3, [sp, #24]
 800ff84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ff86:	9305      	str	r3, [sp, #20]
 800ff88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff8c:	9304      	str	r3, [sp, #16]
 800ff8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff92:	9303      	str	r3, [sp, #12]
 800ff94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	7f3b      	ldrb	r3, [r7, #28]
 800ff9c:	9301      	str	r3, [sp, #4]
 800ff9e:	7e3b      	ldrb	r3, [r7, #24]
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	68b9      	ldr	r1, [r7, #8]
 800ffa6:	f00c fc81 	bl	801c8ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800ffaa:	4a08      	ldr	r2, [pc, #32]	; (800ffcc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	601a      	str	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffb4:	619a      	str	r2, [r3, #24]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffba:	61da      	str	r2, [r3, #28]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffc0:	621a      	str	r2, [r3, #32]
{
}
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	0802976c 	.word	0x0802976c

0800ffd0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	889b      	ldrh	r3, [r3, #4]
 800ffe4:	0adb      	lsrs	r3, r3, #11
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	4413      	add	r3, r2
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4413      	add	r3, r2
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3714      	adds	r7, #20
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr

08010002 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b086      	sub	sp, #24
 8010006:	af00      	add	r7, sp, #0
 8010008:	60f8      	str	r0, [r7, #12]
 801000a:	460b      	mov	r3, r1
 801000c:	607a      	str	r2, [r7, #4]
 801000e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7b1b      	ldrb	r3, [r3, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801001e:	2300      	movs	r3, #0
 8010020:	e023      	b.n	801006a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff ff7a 	bl	800ff1c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8010028:	4603      	mov	r3, r0
 801002a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801002c:	8abb      	ldrh	r3, [r7, #20]
 801002e:	82fb      	strh	r3, [r7, #22]
 8010030:	8afa      	ldrh	r2, [r7, #22]
 8010032:	8abb      	ldrh	r3, [r7, #20]
 8010034:	6879      	ldr	r1, [r7, #4]
 8010036:	7b09      	ldrb	r1, [r1, #12]
 8010038:	440b      	add	r3, r1
 801003a:	429a      	cmp	r2, r3
 801003c:	da14      	bge.n	8010068 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	69da      	ldr	r2, [r3, #28]
 8010042:	8afb      	ldrh	r3, [r7, #22]
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	897a      	ldrh	r2, [r7, #10]
 801004c:	429a      	cmp	r2, r3
 801004e:	d107      	bne.n	8010060 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	69da      	ldr	r2, [r3, #28]
 8010054:	8afb      	ldrh	r3, [r7, #22]
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4413      	add	r3, r2
 801005a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801005e:	e004      	b.n	801006a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010060:	8afb      	ldrh	r3, [r7, #22]
 8010062:	3301      	adds	r3, #1
 8010064:	82fb      	strh	r3, [r7, #22]
 8010066:	e7e3      	b.n	8010030 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
	...

08010074 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
 8010078:	4801      	ldr	r0, [pc, #4]	; (8010080 <__tcf_0+0xc>)
 801007a:	f7ff fecf 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 801007e:	bd80      	pop	{r7, pc}
 8010080:	200085c8 	.word	0x200085c8

08010084 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	; 0x28
 8010088:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 801008a:	4b15      	ldr	r3, [pc, #84]	; (80100e0 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 0301 	and.w	r3, r3, #1
 8010092:	2b00      	cmp	r3, #0
 8010094:	d11f      	bne.n	80100d6 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 8010096:	2300      	movs	r3, #0
 8010098:	9309      	str	r3, [sp, #36]	; 0x24
 801009a:	2300      	movs	r3, #0
 801009c:	9308      	str	r3, [sp, #32]
 801009e:	233f      	movs	r3, #63	; 0x3f
 80100a0:	9307      	str	r3, [sp, #28]
 80100a2:	4b10      	ldr	r3, [pc, #64]	; (80100e4 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 80100a4:	9306      	str	r3, [sp, #24]
 80100a6:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 80100a8:	9305      	str	r3, [sp, #20]
 80100aa:	2301      	movs	r3, #1
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	2300      	movs	r3, #0
 80100b0:	9303      	str	r3, [sp, #12]
 80100b2:	2301      	movs	r3, #1
 80100b4:	9302      	str	r3, [sp, #8]
 80100b6:	2304      	movs	r3, #4
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	2300      	movs	r3, #0
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	230a      	movs	r3, #10
 80100c0:	2204      	movs	r2, #4
 80100c2:	490a      	ldr	r1, [pc, #40]	; (80100ec <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 80100c4:	480a      	ldr	r0, [pc, #40]	; (80100f0 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 80100c6:	f7ff ff4d 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80100cc:	2201      	movs	r2, #1
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	4808      	ldr	r0, [pc, #32]	; (80100f4 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 80100d2:	f017 ff4f 	bl	8027f74 <atexit>
    return Asap_Bold_10_4bpp;
 80100d6:	4b06      	ldr	r3, [pc, #24]	; (80100f0 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 80100d8:	4618      	mov	r0, r3
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	200085ec 	.word	0x200085ec
 80100e4:	080313e8 	.word	0x080313e8
 80100e8:	080297b8 	.word	0x080297b8
 80100ec:	08031410 	.word	0x08031410
 80100f0:	200085c8 	.word	0x200085c8
 80100f4:	08010075 	.word	0x08010075

080100f8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 80100f8:	b580      	push	{r7, lr}
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	4801      	ldr	r0, [pc, #4]	; (8010104 <__tcf_0+0xc>)
 80100fe:	f7ff fe8d 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010102:	bd80      	pop	{r7, pc}
 8010104:	200085f0 	.word	0x200085f0

08010108 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08a      	sub	sp, #40	; 0x28
 801010c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801010e:	4b15      	ldr	r3, [pc, #84]	; (8010164 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	2b00      	cmp	r3, #0
 8010118:	d11f      	bne.n	801015a <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801011a:	2300      	movs	r3, #0
 801011c:	9309      	str	r3, [sp, #36]	; 0x24
 801011e:	2300      	movs	r3, #0
 8010120:	9308      	str	r3, [sp, #32]
 8010122:	233f      	movs	r3, #63	; 0x3f
 8010124:	9307      	str	r3, [sp, #28]
 8010126:	4b10      	ldr	r3, [pc, #64]	; (8010168 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 8010128:	9306      	str	r3, [sp, #24]
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 801012c:	9305      	str	r3, [sp, #20]
 801012e:	2301      	movs	r3, #1
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	2300      	movs	r3, #0
 8010134:	9303      	str	r3, [sp, #12]
 8010136:	2301      	movs	r3, #1
 8010138:	9302      	str	r3, [sp, #8]
 801013a:	2304      	movs	r3, #4
 801013c:	9301      	str	r3, [sp, #4]
 801013e:	2300      	movs	r3, #0
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	230c      	movs	r3, #12
 8010144:	2209      	movs	r2, #9
 8010146:	490a      	ldr	r1, [pc, #40]	; (8010170 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 8010148:	480a      	ldr	r0, [pc, #40]	; (8010174 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 801014a:	f7ff ff0b 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801014e:	4b05      	ldr	r3, [pc, #20]	; (8010164 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010150:	2201      	movs	r2, #1
 8010152:	601a      	str	r2, [r3, #0]
 8010154:	4808      	ldr	r0, [pc, #32]	; (8010178 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 8010156:	f017 ff0d 	bl	8027f74 <atexit>
    return Asap_Bold_12_4bpp;
 801015a:	4b06      	ldr	r3, [pc, #24]	; (8010174 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 801015c:	4618      	mov	r0, r3
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	20008614 	.word	0x20008614
 8010168:	080313ec 	.word	0x080313ec
 801016c:	080297bc 	.word	0x080297bc
 8010170:	08031448 	.word	0x08031448
 8010174:	200085f0 	.word	0x200085f0
 8010178:	080100f9 	.word	0x080100f9

0801017c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
 8010180:	4801      	ldr	r0, [pc, #4]	; (8010188 <__tcf_0+0xc>)
 8010182:	f7ff fe4b 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20008618 	.word	0x20008618

0801018c <_Z25getFont_Asap_Bold_18_4bppv>:
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b08a      	sub	sp, #40	; 0x28
 8010190:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 29, 18, 0, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 8010192:	4b15      	ldr	r3, [pc, #84]	; (80101e8 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f003 0301 	and.w	r3, r3, #1
 801019a:	2b00      	cmp	r3, #0
 801019c:	d11f      	bne.n	80101de <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 801019e:	2300      	movs	r3, #0
 80101a0:	9309      	str	r3, [sp, #36]	; 0x24
 80101a2:	2300      	movs	r3, #0
 80101a4:	9308      	str	r3, [sp, #32]
 80101a6:	2300      	movs	r3, #0
 80101a8:	9307      	str	r3, [sp, #28]
 80101aa:	4b10      	ldr	r3, [pc, #64]	; (80101ec <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 80101ac:	9306      	str	r3, [sp, #24]
 80101ae:	4b10      	ldr	r3, [pc, #64]	; (80101f0 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	2301      	movs	r3, #1
 80101b4:	9304      	str	r3, [sp, #16]
 80101b6:	2300      	movs	r3, #0
 80101b8:	9303      	str	r3, [sp, #12]
 80101ba:	2301      	movs	r3, #1
 80101bc:	9302      	str	r3, [sp, #8]
 80101be:	2304      	movs	r3, #4
 80101c0:	9301      	str	r3, [sp, #4]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	2312      	movs	r3, #18
 80101c8:	221d      	movs	r2, #29
 80101ca:	490a      	ldr	r1, [pc, #40]	; (80101f4 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 80101cc:	480a      	ldr	r0, [pc, #40]	; (80101f8 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 80101ce:	f7ff fec9 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80101d2:	4b05      	ldr	r3, [pc, #20]	; (80101e8 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80101d4:	2201      	movs	r2, #1
 80101d6:	601a      	str	r2, [r3, #0]
 80101d8:	4808      	ldr	r0, [pc, #32]	; (80101fc <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 80101da:	f017 fecb 	bl	8027f74 <atexit>
    return Asap_Bold_18_4bpp;
 80101de:	4b06      	ldr	r3, [pc, #24]	; (80101f8 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
 80101e6:	bf00      	nop
 80101e8:	2000863c 	.word	0x2000863c
 80101ec:	080313f0 	.word	0x080313f0
 80101f0:	080297c0 	.word	0x080297c0
 80101f4:	080314c8 	.word	0x080314c8
 80101f8:	20008618 	.word	0x20008618
 80101fc:	0801017d 	.word	0x0801017d

08010200 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010200:	b580      	push	{r7, lr}
 8010202:	af00      	add	r7, sp, #0
 8010204:	4801      	ldr	r0, [pc, #4]	; (801020c <__tcf_0+0xc>)
 8010206:	f7ff fe09 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 801020a:	bd80      	pop	{r7, pc}
 801020c:	20008640 	.word	0x20008640

08010210 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08a      	sub	sp, #40	; 0x28
 8010214:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010216:	4b15      	ldr	r3, [pc, #84]	; (801026c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f003 0301 	and.w	r3, r3, #1
 801021e:	2b00      	cmp	r3, #0
 8010220:	d11f      	bne.n	8010262 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 8010222:	2300      	movs	r3, #0
 8010224:	9309      	str	r3, [sp, #36]	; 0x24
 8010226:	2300      	movs	r3, #0
 8010228:	9308      	str	r3, [sp, #32]
 801022a:	233f      	movs	r3, #63	; 0x3f
 801022c:	9307      	str	r3, [sp, #28]
 801022e:	4b10      	ldr	r3, [pc, #64]	; (8010270 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 8010230:	9306      	str	r3, [sp, #24]
 8010232:	4b10      	ldr	r3, [pc, #64]	; (8010274 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 8010234:	9305      	str	r3, [sp, #20]
 8010236:	2301      	movs	r3, #1
 8010238:	9304      	str	r3, [sp, #16]
 801023a:	2300      	movs	r3, #0
 801023c:	9303      	str	r3, [sp, #12]
 801023e:	2301      	movs	r3, #1
 8010240:	9302      	str	r3, [sp, #8]
 8010242:	2304      	movs	r3, #4
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	2300      	movs	r3, #0
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	2315      	movs	r3, #21
 801024c:	220d      	movs	r2, #13
 801024e:	490a      	ldr	r1, [pc, #40]	; (8010278 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 8010250:	480a      	ldr	r0, [pc, #40]	; (801027c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 8010252:	f7ff fe87 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010256:	4b05      	ldr	r3, [pc, #20]	; (801026c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010258:	2201      	movs	r2, #1
 801025a:	601a      	str	r2, [r3, #0]
 801025c:	4808      	ldr	r0, [pc, #32]	; (8010280 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 801025e:	f017 fe89 	bl	8027f74 <atexit>
    return Asap_Bold_21_4bpp;
 8010262:	4b06      	ldr	r3, [pc, #24]	; (801027c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 8010264:	4618      	mov	r0, r3
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	20008664 	.word	0x20008664
 8010270:	08031400 	.word	0x08031400
 8010274:	080297c4 	.word	0x080297c4
 8010278:	08031660 	.word	0x08031660
 801027c:	20008640 	.word	0x20008640
 8010280:	08010201 	.word	0x08010201

08010284 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
 8010288:	4801      	ldr	r0, [pc, #4]	; (8010290 <__tcf_0+0xc>)
 801028a:	f7ff fdc7 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20008668 	.word	0x20008668

08010294 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08a      	sub	sp, #40	; 0x28
 8010298:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 801029a:	4b15      	ldr	r3, [pc, #84]	; (80102f0 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f003 0301 	and.w	r3, r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d11f      	bne.n	80102e6 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 80102a6:	2300      	movs	r3, #0
 80102a8:	9309      	str	r3, [sp, #36]	; 0x24
 80102aa:	2300      	movs	r3, #0
 80102ac:	9308      	str	r3, [sp, #32]
 80102ae:	233f      	movs	r3, #63	; 0x3f
 80102b0:	9307      	str	r3, [sp, #28]
 80102b2:	4b10      	ldr	r3, [pc, #64]	; (80102f4 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 80102b4:	9306      	str	r3, [sp, #24]
 80102b6:	4b10      	ldr	r3, [pc, #64]	; (80102f8 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 80102b8:	9305      	str	r3, [sp, #20]
 80102ba:	2301      	movs	r3, #1
 80102bc:	9304      	str	r3, [sp, #16]
 80102be:	2300      	movs	r3, #0
 80102c0:	9303      	str	r3, [sp, #12]
 80102c2:	2301      	movs	r3, #1
 80102c4:	9302      	str	r3, [sp, #8]
 80102c6:	2304      	movs	r3, #4
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	2300      	movs	r3, #0
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	231e      	movs	r3, #30
 80102d0:	220c      	movs	r2, #12
 80102d2:	490a      	ldr	r1, [pc, #40]	; (80102fc <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 80102d4:	480a      	ldr	r0, [pc, #40]	; (8010300 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 80102d6:	f7ff fe45 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80102da:	4b05      	ldr	r3, [pc, #20]	; (80102f0 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80102dc:	2201      	movs	r2, #1
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	4808      	ldr	r0, [pc, #32]	; (8010304 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 80102e2:	f017 fe47 	bl	8027f74 <atexit>
    return Asap_Bold_30_4bpp;
 80102e6:	4b06      	ldr	r3, [pc, #24]	; (8010300 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	2000868c 	.word	0x2000868c
 80102f4:	08031404 	.word	0x08031404
 80102f8:	080297c8 	.word	0x080297c8
 80102fc:	08031718 	.word	0x08031718
 8010300:	20008668 	.word	0x20008668
 8010304:	08010285 	.word	0x08010285

08010308 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
 801030c:	4801      	ldr	r0, [pc, #4]	; (8010314 <__tcf_0+0xc>)
 801030e:	f7ff fd85 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010312:	bd80      	pop	{r7, pc}
 8010314:	20008690 	.word	0x20008690

08010318 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b08a      	sub	sp, #40	; 0x28
 801031c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 801031e:	4b15      	ldr	r3, [pc, #84]	; (8010374 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	2b00      	cmp	r3, #0
 8010328:	d11f      	bne.n	801036a <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 801032a:	2300      	movs	r3, #0
 801032c:	9309      	str	r3, [sp, #36]	; 0x24
 801032e:	2300      	movs	r3, #0
 8010330:	9308      	str	r3, [sp, #32]
 8010332:	233f      	movs	r3, #63	; 0x3f
 8010334:	9307      	str	r3, [sp, #28]
 8010336:	4b10      	ldr	r3, [pc, #64]	; (8010378 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 8010338:	9306      	str	r3, [sp, #24]
 801033a:	4b10      	ldr	r3, [pc, #64]	; (801037c <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	2301      	movs	r3, #1
 8010340:	9304      	str	r3, [sp, #16]
 8010342:	2300      	movs	r3, #0
 8010344:	9303      	str	r3, [sp, #12]
 8010346:	2301      	movs	r3, #1
 8010348:	9302      	str	r3, [sp, #8]
 801034a:	2304      	movs	r3, #4
 801034c:	9301      	str	r3, [sp, #4]
 801034e:	2300      	movs	r3, #0
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	2328      	movs	r3, #40	; 0x28
 8010354:	220d      	movs	r2, #13
 8010356:	490a      	ldr	r1, [pc, #40]	; (8010380 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 8010358:	480a      	ldr	r0, [pc, #40]	; (8010384 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 801035a:	f7ff fe03 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801035e:	4b05      	ldr	r3, [pc, #20]	; (8010374 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010360:	2201      	movs	r2, #1
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	4808      	ldr	r0, [pc, #32]	; (8010388 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 8010366:	f017 fe05 	bl	8027f74 <atexit>
    return Asap_Bold_40_4bpp;
 801036a:	4b06      	ldr	r3, [pc, #24]	; (8010384 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 801036c:	4618      	mov	r0, r3
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	200086b4 	.word	0x200086b4
 8010378:	08031408 	.word	0x08031408
 801037c:	080297cc 	.word	0x080297cc
 8010380:	080317c0 	.word	0x080317c0
 8010384:	20008690 	.word	0x20008690
 8010388:	08010309 	.word	0x08010309

0801038c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 801038c:	b580      	push	{r7, lr}
 801038e:	af00      	add	r7, sp, #0
 8010390:	4801      	ldr	r0, [pc, #4]	; (8010398 <__tcf_0+0xc>)
 8010392:	f7ff fd43 	bl	800fe1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010396:	bd80      	pop	{r7, pc}
 8010398:	200086b8 	.word	0x200086b8

0801039c <_Z25getFont_Asap_Bold_60_4bppv>:
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b08a      	sub	sp, #40	; 0x28
 80103a0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 80103a2:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f003 0301 	and.w	r3, r3, #1
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d11f      	bne.n	80103ee <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 80103ae:	2300      	movs	r3, #0
 80103b0:	9309      	str	r3, [sp, #36]	; 0x24
 80103b2:	2300      	movs	r3, #0
 80103b4:	9308      	str	r3, [sp, #32]
 80103b6:	233f      	movs	r3, #63	; 0x3f
 80103b8:	9307      	str	r3, [sp, #28]
 80103ba:	4b10      	ldr	r3, [pc, #64]	; (80103fc <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 80103bc:	9306      	str	r3, [sp, #24]
 80103be:	4b10      	ldr	r3, [pc, #64]	; (8010400 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 80103c0:	9305      	str	r3, [sp, #20]
 80103c2:	2300      	movs	r3, #0
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	2300      	movs	r3, #0
 80103c8:	9303      	str	r3, [sp, #12]
 80103ca:	2301      	movs	r3, #1
 80103cc:	9302      	str	r3, [sp, #8]
 80103ce:	2304      	movs	r3, #4
 80103d0:	9301      	str	r3, [sp, #4]
 80103d2:	2300      	movs	r3, #0
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	233c      	movs	r3, #60	; 0x3c
 80103d8:	220d      	movs	r2, #13
 80103da:	490a      	ldr	r1, [pc, #40]	; (8010404 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 80103dc:	480a      	ldr	r0, [pc, #40]	; (8010408 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 80103de:	f7ff fdc1 	bl	800ff64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80103e2:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 80103e4:	2201      	movs	r2, #1
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	4808      	ldr	r0, [pc, #32]	; (801040c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 80103ea:	f017 fdc3 	bl	8027f74 <atexit>
    return Asap_Bold_60_4bpp;
 80103ee:	4b06      	ldr	r3, [pc, #24]	; (8010408 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	200086dc 	.word	0x200086dc
 80103fc:	0803140c 	.word	0x0803140c
 8010400:	080297d0 	.word	0x080297d0
 8010404:	08031878 	.word	0x08031878
 8010408:	200086b8 	.word	0x200086b8
 801040c:	0801038d 	.word	0x0801038d

08010410 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
    {
    }
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801043e:	b480      	push	{r7}
 8010440:	b083      	sub	sp, #12
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
    {
    }
 8010448:	bf00      	nop
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
    {
    }
 801045e:	bf00      	nop
 8010460:	370c      	adds	r7, #12
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
 8010472:	460b      	mov	r3, r1
 8010474:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010476:	bf00      	nop
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010482:	b480      	push	{r7}
 8010484:	b083      	sub	sp, #12
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
    {
    }
 801048a:	bf00      	nop
 801048c:	370c      	adds	r7, #12
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr

08010496 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010496:	b480      	push	{r7}
 8010498:	b083      	sub	sp, #12
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
    {
    }
 801049e:	bf00      	nop
 80104a0:	370c      	adds	r7, #12
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
	...

080104ac <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    {
 80104b4:	4a04      	ldr	r2, [pc, #16]	; (80104c8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	601a      	str	r2, [r3, #0]
    }
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr
 80104c8:	0802991c 	.word	0x0802991c

080104cc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
    }
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7ff ffe9 	bl	80104ac <_ZN8touchgfx15UIEventListenerD1Ev>
 80104da:	2104      	movs	r1, #4
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f017 fd00 	bl	8027ee2 <_ZdlPvj>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 80104f4:	4a07      	ldr	r2, [pc, #28]	; (8010514 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	605a      	str	r2, [r3, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	721a      	strb	r2, [r3, #8]
    {
    }
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	080298fc 	.word	0x080298fc

08010518 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
    {
 8010520:	4a04      	ldr	r2, [pc, #16]	; (8010534 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
    }
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	080298fc 	.word	0x080298fc

08010538 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
    }
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff ffe9 	bl	8010518 <_ZN8touchgfx10TransitionD1Ev>
 8010546:	210c      	movs	r1, #12
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f017 fcca 	bl	8027ee2 <_ZdlPvj>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	bf00      	nop
 8010562:	370c      	adds	r7, #12
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	bf00      	nop
 8010576:	370c      	adds	r7, #12
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	bf00      	nop
 801058a:	370c      	adds	r7, #12
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	683a      	ldr	r2, [r7, #0]
 80105a2:	605a      	str	r2, [r3, #4]
    }
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	70fb      	strb	r3, [r7, #3]
    {
    }
 80105bc:	bf00      	nop
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    {
 80105d0:	4a04      	ldr	r2, [pc, #16]	; (80105e4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	601a      	str	r2, [r3, #0]
    }
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4618      	mov	r0, r3
 80105da:	370c      	adds	r7, #12
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	080298e4 	.word	0x080298e4

080105e8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
    }
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7ff ffe9 	bl	80105c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80105f6:	2104      	movs	r1, #4
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f017 fc72 	bl	8027ee2 <_ZdlPvj>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	60f8      	str	r0, [r7, #12]
 8010610:	4608      	mov	r0, r1
 8010612:	4611      	mov	r1, r2
 8010614:	461a      	mov	r2, r3
 8010616:	4603      	mov	r3, r0
 8010618:	817b      	strh	r3, [r7, #10]
 801061a:	460b      	mov	r3, r1
 801061c:	813b      	strh	r3, [r7, #8]
 801061e:	4613      	mov	r3, r2
 8010620:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3334      	adds	r3, #52	; 0x34
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801062e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	4798      	blx	r3
        setWidth(width);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3338      	adds	r3, #56	; 0x38
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010642:	4611      	mov	r1, r2
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	4798      	blx	r3
        setHeight(height);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	333c      	adds	r3, #60	; 0x3c
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010654:	4611      	mov	r1, r2
 8010656:	68f8      	ldr	r0, [r7, #12]
 8010658:	4798      	blx	r3
    }
 801065a:	bf00      	nop
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010662:	b480      	push	{r7}
 8010664:	b083      	sub	sp, #12
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010670:	4618      	mov	r0, r3
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
	...

08010698 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0
    {
        return instance;
 801069c:	4b03      	ldr	r3, [pc, #12]	; (80106ac <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801069e:	681b      	ldr	r3, [r3, #0]
    }
 80106a0:	4618      	mov	r0, r3
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr
 80106aa:	bf00      	nop
 80106ac:	2000beec 	.word	0x2000beec

080106b0 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80106b0:	b480      	push	{r7}
 80106b2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80106b4:	4b0b      	ldr	r3, [pc, #44]	; (80106e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d008      	beq.n	80106d2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80106c0:	4b08      	ldr	r3, [pc, #32]	; (80106e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d003      	beq.n	80106d2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80106ca:	4b06      	ldr	r3, [pc, #24]	; (80106e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106d0:	e002      	b.n	80106d8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 80106d2:	4b04      	ldr	r3, [pc, #16]	; (80106e4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	689b      	ldr	r3, [r3, #8]
        }
    }
 80106d8:	4618      	mov	r0, r3
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	2000beec 	.word	0x2000beec

080106e8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	4a05      	ldr	r2, [pc, #20]	; (8010708 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff fed7 	bl	80104ac <_ZN8touchgfx15UIEventListenerD1Ev>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4618      	mov	r0, r3
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	0802c03c 	.word	0x0802c03c

0801070c <_ZN8touchgfx11ApplicationD0Ev>:
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ffe7 	bl	80106e8 <_ZN8touchgfx11ApplicationD1Ev>
 801071a:	f44f 7198 	mov.w	r1, #304	; 0x130
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f017 fbdf 	bl	8027ee2 <_ZdlPvj>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	3708      	adds	r7, #8
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
	...

08010730 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4618      	mov	r0, r3
 801073c:	f00b fbf0 	bl	801bf20 <_ZN8touchgfx11ApplicationC1Ev>
 8010740:	4a09      	ldr	r2, [pc, #36]	; (8010768 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4a04      	ldr	r2, [pc, #16]	; (801076c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801075a:	6013      	str	r3, [r2, #0]
    }
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4618      	mov	r0, r3
 8010760:	3708      	adds	r7, #8
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	080298a8 	.word	0x080298a8
 801076c:	2000bf78 	.word	0x2000bf78

08010770 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	4a05      	ldr	r2, [pc, #20]	; (8010790 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	601a      	str	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff ffb1 	bl	80106e8 <_ZN8touchgfx11ApplicationD1Ev>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	080298a8 	.word	0x080298a8

08010794 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ffe7 	bl	8010770 <_ZN8touchgfx14MVPApplicationD1Ev>
 80107a2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f017 fb9b 	bl	8027ee2 <_ZdlPvj>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4618      	mov	r0, r3
 80107b0:	3708      	adds	r7, #8
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}

080107b6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80107b6:	b580      	push	{r7, lr}
 80107b8:	b082      	sub	sp, #8
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 f804 	bl	80107cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00f      	beq.n	80107fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	330c      	adds	r3, #12
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4610      	mov	r0, r2
 80107f2:	4798      	blx	r3
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e000      	b.n	8010800 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80107fe:	2300      	movs	r3, #0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00e      	beq.n	8010822 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3308      	adds	r3, #8
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4610      	mov	r0, r2
 8010818:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010822:	bf00      	nop
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801082a:	b580      	push	{r7, lr}
 801082c:	b084      	sub	sp, #16
 801082e:	af00      	add	r7, sp, #0
 8010830:	60f8      	str	r0, [r7, #12]
 8010832:	60b9      	str	r1, [r7, #8]
 8010834:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010836:	f00b fb51 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 801083a:	4603      	mov	r3, r0
 801083c:	4618      	mov	r0, r3
 801083e:	f00b fb53 	bl	801bee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d008      	beq.n	801085c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	330c      	adds	r3, #12
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4610      	mov	r0, r2
 801085a:	4798      	blx	r3
    }
    if (*currentTrans)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d007      	beq.n	8010874 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4610      	mov	r0, r2
 8010872:	4798      	blx	r3
    }
    if (*currentScreen)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d008      	beq.n	801088e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3314      	adds	r3, #20
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4610      	mov	r0, r2
 801088c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d008      	beq.n	80108a8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	3304      	adds	r3, #4
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4610      	mov	r0, r2
 80108a6:	4798      	blx	r3
    }
    if (*currentScreen)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d007      	beq.n	80108c0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4610      	mov	r0, r2
 80108be:	4798      	blx	r3
    }
    if (*currentPresenter)
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d008      	beq.n	80108da <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3308      	adds	r3, #8
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4610      	mov	r0, r2
 80108d8:	4798      	blx	r3
    }
}
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b084      	sub	sp, #16
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	60f8      	str	r0, [r7, #12]
 80108ea:	60b9      	str	r1, [r7, #8]
 80108ec:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	330c      	adds	r3, #12
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	4798      	blx	r3
    newPresenter->activate();
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68b8      	ldr	r0, [r7, #8]
 8010902:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010904:	6879      	ldr	r1, [r7, #4]
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f00c fbf8 	bl	801d0fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	3310      	adds	r3, #16
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	4798      	blx	r3

    Application::getInstance()->draw();
 8010918:	f00b fae0 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 801091c:	4602      	mov	r2, r0
 801091e:	6813      	ldr	r3, [r2, #0]
 8010920:	3328      	adds	r3, #40	; 0x28
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4610      	mov	r0, r2
 8010926:	4798      	blx	r3
}
 8010928:	bf00      	nop
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	683a      	ldr	r2, [r7, #0]
 801093e:	601a      	str	r2, [r3, #0]
    }
 8010940:	bf00      	nop
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	4a08      	ldr	r2, [pc, #32]	; (8010978 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010960:	4618      	mov	r0, r3
 8010962:	f000 fde7 	bl	8011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff ff01 	bl	8010770 <_ZN8touchgfx14MVPApplicationD1Ev>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	08029854 	.word	0x08029854

0801097c <_ZN23FrontendApplicationBaseD0Ev>:
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff ffe1 	bl	801094c <_ZN23FrontendApplicationBaseD1Ev>
 801098a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f017 faa7 	bl	8027ee2 <_ZdlPvj>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	3708      	adds	r7, #8
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
	...

080109a0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ff fd9e 	bl	80104ec <_ZN8touchgfx10TransitionC1Ev>
 80109b0:	4a03      	ldr	r2, [pc, #12]	; (80109c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	08029834 	.word	0x08029834

080109c4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	4a05      	ldr	r2, [pc, #20]	; (80109e4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7ff fd9f 	bl	8010518 <_ZN8touchgfx10TransitionD1Ev>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	08029834 	.word	0x08029834

080109e8 <_ZN8touchgfx12NoTransitionD0Ev>:
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff ffe7 	bl	80109c4 <_ZN8touchgfx12NoTransitionD1Ev>
 80109f6:	210c      	movs	r1, #12
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f017 fa72 	bl	8027ee2 <_ZdlPvj>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2201      	movs	r2, #1
 8010a14:	721a      	strb	r2, [r3, #8]
    }
 8010a16:	bf00      	nop
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8010a22:	b480      	push	{r7}
 8010a24:	b083      	sub	sp, #12
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
 8010a2a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	683a      	ldr	r2, [r7, #0]
 8010a30:	605a      	str	r2, [r3, #4]
    }
 8010a32:	bf00      	nop
 8010a34:	370c      	adds	r7, #12
 8010a36:	46bd      	mov	sp, r7
 8010a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3c:	4770      	bx	lr
	...

08010a40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff fe6e 	bl	8010730 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010a54:	4a13      	ldr	r2, [pc, #76]	; (8010aa4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	601a      	str	r2, [r3, #0]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010a60:	4618      	mov	r0, r3
 8010a62:	f000 f92b 	bl	8010cbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010a76:	f7ff fe0f 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	6813      	ldr	r3, [r2, #0]
 8010a7e:	3308      	adds	r3, #8
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2100      	movs	r1, #0
 8010a84:	4610      	mov	r0, r2
 8010a86:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8010a88:	2000      	movs	r0, #0
 8010a8a:	f004 fa7f 	bl	8014f8c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010a8e:	f7ff fe0f 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8010a92:	4603      	mov	r3, r0
 8010a94:	4618      	mov	r0, r3
 8010a96:	f010 ff32 	bl	80218fe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	08029854 	.word	0x08029854

08010aa8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	370c      	adds	r7, #12
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr

08010ac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	6039      	str	r1, [r7, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	4611      	mov	r1, r2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff ffe9 	bl	8010aa8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	605a      	str	r2, [r3, #4]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	683a      	ldr	r2, [r7, #0]
 8010ae2:	3308      	adds	r3, #8
 8010ae4:	3208      	adds	r2, #8
 8010ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aea:	e883 0003 	stmia.w	r3, {r0, r1}
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8010af8:	b590      	push	{r4, r7, lr}
 8010afa:	b089      	sub	sp, #36	; 0x24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010b06:	4b10      	ldr	r3, [pc, #64]	; (8010b48 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8010b08:	61bb      	str	r3, [r7, #24]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	61fb      	str	r3, [r7, #28]
 8010b0e:	f107 0008 	add.w	r0, r7, #8
 8010b12:	f107 0318 	add.w	r3, r7, #24
 8010b16:	cb0c      	ldmia	r3, {r2, r3}
 8010b18:	6879      	ldr	r1, [r7, #4]
 8010b1a:	f000 f8eb 	bl	8010cf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010b1e:	f107 0308 	add.w	r3, r7, #8
 8010b22:	4619      	mov	r1, r3
 8010b24:	4620      	mov	r0, r4
 8010b26:	f7ff ffcb 	bl	8010ac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010b2a:	f107 0308 	add.w	r3, r7, #8
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 fd00 	bl	8011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010b40:	bf00      	nop
 8010b42:	3724      	adds	r7, #36	; 0x24
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd90      	pop	{r4, r7, pc}
 8010b48:	08010b4d 	.word	0x08010b4d

08010b4c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af02      	add	r7, sp, #8
 8010b52:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010b60:	461a      	mov	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	4b04      	ldr	r3, [pc, #16]	; (8010b7c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8010b6c:	4804      	ldr	r0, [pc, #16]	; (8010b80 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8010b6e:	f000 f8e1 	bl	8010d34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010b72:	bf00      	nop
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	2000bf6c 	.word	0x2000bf6c
 8010b80:	2000bf68 	.word	0x2000bf68

08010b84 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEast()
{
 8010b84:	b590      	push	{r4, r7, lr}
 8010b86:	b089      	sub	sp, #36	; 0x24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionEastImpl);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010b92:	4b10      	ldr	r3, [pc, #64]	; (8010bd4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv+0x50>)
 8010b94:	61bb      	str	r3, [r7, #24]
 8010b96:	2300      	movs	r3, #0
 8010b98:	61fb      	str	r3, [r7, #28]
 8010b9a:	f107 0008 	add.w	r0, r7, #8
 8010b9e:	f107 0318 	add.w	r3, r7, #24
 8010ba2:	cb0c      	ldmia	r3, {r2, r3}
 8010ba4:	6879      	ldr	r1, [r7, #4]
 8010ba6:	f000 f8a5 	bl	8010cf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010baa:	f107 0308 	add.w	r3, r7, #8
 8010bae:	4619      	mov	r1, r3
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f7ff ff85 	bl	8010ac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010bb6:	f107 0308 	add.w	r3, r7, #8
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 fcba 	bl	8011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010bcc:	bf00      	nop
 8010bce:	3724      	adds	r7, #36	; 0x24
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd90      	pop	{r4, r7, pc}
 8010bd4:	08010bd9 	.word	0x08010bd9

08010bd8 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionEastImpl()
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af02      	add	r7, sp, #8
 8010bde:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010bec:	461a      	mov	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	4b04      	ldr	r3, [pc, #16]	; (8010c08 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x30>)
 8010bf8:	4804      	ldr	r0, [pc, #16]	; (8010c0c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionEastImplEv+0x34>)
 8010bfa:	f000 f957 	bl	8010eac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010bfe:	bf00      	nop
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	2000bf6c 	.word	0x2000bf6c
 8010c0c:	2000bf68 	.word	0x2000bf68

08010c10 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b089      	sub	sp, #36	; 0x24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8010c20:	61bb      	str	r3, [r7, #24]
 8010c22:	2300      	movs	r3, #0
 8010c24:	61fb      	str	r3, [r7, #28]
 8010c26:	f107 0008 	add.w	r0, r7, #8
 8010c2a:	f107 0318 	add.w	r3, r7, #24
 8010c2e:	cb0c      	ldmia	r3, {r2, r3}
 8010c30:	6879      	ldr	r1, [r7, #4]
 8010c32:	f000 f85f 	bl	8010cf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010c36:	f107 0308 	add.w	r3, r7, #8
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f7ff ff3f 	bl	8010ac0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010c42:	f107 0308 	add.w	r3, r7, #8
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 fc74 	bl	8011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8010c58:	bf00      	nop
 8010c5a:	3724      	adds	r7, #36	; 0x24
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd90      	pop	{r4, r7, pc}
 8010c60:	08010c65 	.word	0x08010c65

08010c64 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af02      	add	r7, sp, #8
 8010c6a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010c78:	461a      	mov	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	4b04      	ldr	r3, [pc, #16]	; (8010c94 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 8010c84:	4804      	ldr	r0, [pc, #16]	; (8010c98 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 8010c86:	f000 f9cd 	bl	8011024 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010c8a:	bf00      	nop
 8010c8c:	3708      	adds	r7, #8
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	2000bf6c 	.word	0x2000bf6c
 8010c98:	2000bf68 	.word	0x2000bf68

08010c9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	4a04      	ldr	r2, [pc, #16]	; (8010cb8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr
 8010cb8:	080298e4 	.word	0x080298e4

08010cbc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff ffe8 	bl	8010c9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010ccc:	4a08      	ldr	r2, [pc, #32]	; (8010cf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	605a      	str	r2, [r3, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	609a      	str	r2, [r3, #8]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	60da      	str	r2, [r3, #12]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	08029890 	.word	0x08029890

08010cf4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	4639      	mov	r1, r7
 8010d00:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7ff ffc8 	bl	8010c9c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010d0c:	4a08      	ldr	r2, [pc, #32]	; (8010d30 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	68ba      	ldr	r2, [r7, #8]
 8010d16:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	3308      	adds	r3, #8
 8010d1c:	463a      	mov	r2, r7
 8010d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}
 8010d30:	08029890 	.word	0x08029890

08010d34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b089      	sub	sp, #36	; 0x24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
 8010d40:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	689a      	ldr	r2, [r3, #8]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3320      	adds	r3, #32
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4610      	mov	r0, r2
 8010d52:	4798      	blx	r3
 8010d54:	4602      	mov	r2, r0
 8010d56:	f642 0343 	movw	r3, #10307	; 0x2843
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d805      	bhi.n	8010d6a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010d5e:	4b4e      	ldr	r3, [pc, #312]	; (8010e98 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8010d60:	4a4e      	ldr	r2, [pc, #312]	; (8010e9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010d62:	21c2      	movs	r1, #194	; 0xc2
 8010d64:	484e      	ldr	r0, [pc, #312]	; (8010ea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010d66:	f017 f8e7 	bl	8027f38 <__assert_func>
 8010d6a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685a      	ldr	r2, [r3, #4]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	3320      	adds	r3, #32
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	4798      	blx	r3
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b0f      	cmp	r3, #15
 8010d82:	d805      	bhi.n	8010d90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010d84:	4b47      	ldr	r3, [pc, #284]	; (8010ea4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8010d86:	4a45      	ldr	r2, [pc, #276]	; (8010e9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010d88:	21c3      	movs	r1, #195	; 0xc3
 8010d8a:	4845      	ldr	r0, [pc, #276]	; (8010ea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010d8c:	f017 f8d4 	bl	8027f38 <__assert_func>
 8010d90:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3320      	adds	r3, #32
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b0b      	cmp	r3, #11
 8010da8:	d805      	bhi.n	8010db6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010daa:	4b3f      	ldr	r3, [pc, #252]	; (8010ea8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8010dac:	4a3b      	ldr	r2, [pc, #236]	; (8010e9c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010dae:	21c4      	movs	r1, #196	; 0xc4
 8010db0:	483b      	ldr	r0, [pc, #236]	; (8010ea0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010db2:	f017 f8c1 	bl	8027f38 <__assert_func>
 8010db6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	68b9      	ldr	r1, [r7, #8]
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f7ff fd34 	bl	801082a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f000 f9e5 	bl	8011198 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	200c      	movs	r0, #12
 8010dd4:	f7ff fb1c 	bl	8010410 <_ZnwjPv>
 8010dd8:	4604      	mov	r4, r0
 8010dda:	2c00      	cmp	r4, #0
 8010ddc:	d004      	beq.n	8010de8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8010dde:	4620      	mov	r0, r4
 8010de0:	f7ff fdde 	bl	80109a0 <_ZN8touchgfx12NoTransitionC1Ev>
 8010de4:	4623      	mov	r3, r4
 8010de6:	e000      	b.n	8010dea <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8010de8:	4623      	mov	r3, r4
 8010dea:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	2100      	movs	r1, #0
 8010df2:	4618      	mov	r0, r3
 8010df4:	f000 f9e3 	bl	80111be <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	f642 0044 	movw	r0, #10308	; 0x2844
 8010e00:	f7ff fb06 	bl	8010410 <_ZnwjPv>
 8010e04:	4604      	mov	r4, r0
 8010e06:	2c00      	cmp	r4, #0
 8010e08:	d004      	beq.n	8010e14 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f004 fb38 	bl	8015480 <_ZN8MainViewC1Ev>
 8010e10:	4623      	mov	r3, r4
 8010e12:	e000      	b.n	8010e16 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8010e14:	4623      	mov	r3, r4
 8010e16:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 f9e0 	bl	80111e4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8010e24:	4603      	mov	r3, r0
 8010e26:	4619      	mov	r1, r3
 8010e28:	2010      	movs	r0, #16
 8010e2a:	f7ff faf1 	bl	8010410 <_ZnwjPv>
 8010e2e:	4604      	mov	r4, r0
 8010e30:	2c00      	cmp	r4, #0
 8010e32:	d005      	beq.n	8010e40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8010e34:	69b9      	ldr	r1, [r7, #24]
 8010e36:	4620      	mov	r0, r4
 8010e38:	f004 fa76 	bl	8015328 <_ZN13MainPresenterC1ER8MainView>
 8010e3c:	4623      	mov	r3, r4
 8010e3e:	e000      	b.n	8010e42 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8010e40:	4623      	mov	r3, r4
 8010e42:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	69fa      	ldr	r2, [r7, #28]
 8010e48:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	69ba      	ldr	r2, [r7, #24]
 8010e54:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d002      	beq.n	8010e62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	3304      	adds	r3, #4
 8010e60:	e000      	b.n	8010e64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8010e62:	2300      	movs	r3, #0
 8010e64:	4619      	mov	r1, r3
 8010e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e68:	f7ff fd62 	bl	8010930 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	3304      	adds	r3, #4
 8010e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7ff fdd5 	bl	8010a22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	6979      	ldr	r1, [r7, #20]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 f9c4 	bl	801120a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8010e82:	69fa      	ldr	r2, [r7, #28]
 8010e84:	6979      	ldr	r1, [r7, #20]
 8010e86:	69b8      	ldr	r0, [r7, #24]
 8010e88:	f7ff fd2b 	bl	80108e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8010e8c:	697b      	ldr	r3, [r7, #20]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3724      	adds	r7, #36	; 0x24
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd90      	pop	{r4, r7, pc}
 8010e96:	bf00      	nop
 8010e98:	080290c4 	.word	0x080290c4
 8010e9c:	0802993c 	.word	0x0802993c
 8010ea0:	08029154 	.word	0x08029154
 8010ea4:	08029198 	.word	0x08029198
 8010ea8:	0802923c 	.word	0x0802923c

08010eac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010eac:	b590      	push	{r4, r7, lr}
 8010eae:	b089      	sub	sp, #36	; 0x24
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
 8010eb8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	689a      	ldr	r2, [r3, #8]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	3320      	adds	r3, #32
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4610      	mov	r0, r2
 8010eca:	4798      	blx	r3
 8010ecc:	4602      	mov	r2, r0
 8010ece:	f642 0343 	movw	r3, #10307	; 0x2843
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d805      	bhi.n	8010ee2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010ed6:	4b4e      	ldr	r3, [pc, #312]	; (8011010 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8010ed8:	4a4e      	ldr	r2, [pc, #312]	; (8011014 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010eda:	21c2      	movs	r1, #194	; 0xc2
 8010edc:	484e      	ldr	r0, [pc, #312]	; (8011018 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010ede:	f017 f82b 	bl	8027f38 <__assert_func>
 8010ee2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3320      	adds	r3, #32
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	4798      	blx	r3
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b0f      	cmp	r3, #15
 8010efa:	d805      	bhi.n	8010f08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010efc:	4b47      	ldr	r3, [pc, #284]	; (801101c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8010efe:	4a45      	ldr	r2, [pc, #276]	; (8011014 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010f00:	21c3      	movs	r1, #195	; 0xc3
 8010f02:	4845      	ldr	r0, [pc, #276]	; (8011018 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010f04:	f017 f818 	bl	8027f38 <__assert_func>
 8010f08:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	68da      	ldr	r2, [r3, #12]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	3320      	adds	r3, #32
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	4610      	mov	r0, r2
 8010f1a:	4798      	blx	r3
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b53      	cmp	r3, #83	; 0x53
 8010f20:	d805      	bhi.n	8010f2e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010f22:	4b3f      	ldr	r3, [pc, #252]	; (8011020 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8010f24:	4a3b      	ldr	r2, [pc, #236]	; (8011014 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8010f26:	21c4      	movs	r1, #196	; 0xc4
 8010f28:	483b      	ldr	r0, [pc, #236]	; (8011018 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8010f2a:	f017 f805 	bl	8027f38 <__assert_func>
 8010f2e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	68b9      	ldr	r1, [r7, #8]
 8010f34:	68f8      	ldr	r0, [r7, #12]
 8010f36:	f7ff fc78 	bl	801082a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	2100      	movs	r1, #0
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 f970 	bl	8011226 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8010f46:	4603      	mov	r3, r0
 8010f48:	4619      	mov	r1, r3
 8010f4a:	2054      	movs	r0, #84	; 0x54
 8010f4c:	f7ff fa60 	bl	8010410 <_ZnwjPv>
 8010f50:	4604      	mov	r4, r0
 8010f52:	2c00      	cmp	r4, #0
 8010f54:	d005      	beq.n	8010f62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8010f56:	2114      	movs	r1, #20
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f000 f999 	bl	8011290 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8010f5e:	4623      	mov	r3, r4
 8010f60:	e000      	b.n	8010f64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 8010f62:	4623      	mov	r3, r4
 8010f64:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 f926 	bl	80111be <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8010f72:	4603      	mov	r3, r0
 8010f74:	4619      	mov	r1, r3
 8010f76:	f642 0044 	movw	r0, #10308	; 0x2844
 8010f7a:	f7ff fa49 	bl	8010410 <_ZnwjPv>
 8010f7e:	4604      	mov	r4, r0
 8010f80:	2c00      	cmp	r4, #0
 8010f82:	d004      	beq.n	8010f8e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8010f84:	4620      	mov	r0, r4
 8010f86:	f004 fa7b 	bl	8015480 <_ZN8MainViewC1Ev>
 8010f8a:	4623      	mov	r3, r4
 8010f8c:	e000      	b.n	8010f90 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 8010f8e:	4623      	mov	r3, r4
 8010f90:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	2100      	movs	r1, #0
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 f923 	bl	80111e4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	2010      	movs	r0, #16
 8010fa4:	f7ff fa34 	bl	8010410 <_ZnwjPv>
 8010fa8:	4604      	mov	r4, r0
 8010faa:	2c00      	cmp	r4, #0
 8010fac:	d005      	beq.n	8010fba <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8010fae:	69b9      	ldr	r1, [r7, #24]
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	f004 f9b9 	bl	8015328 <_ZN13MainPresenterC1ER8MainView>
 8010fb6:	4623      	mov	r3, r4
 8010fb8:	e000      	b.n	8010fbc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 8010fba:	4623      	mov	r3, r4
 8010fbc:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	69fa      	ldr	r2, [r7, #28]
 8010fc2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	69ba      	ldr	r2, [r7, #24]
 8010fce:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d002      	beq.n	8010fdc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	3304      	adds	r3, #4
 8010fda:	e000      	b.n	8010fde <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fe2:	f7ff fca5 	bl	8010930 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fd18 	bl	8010a22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010ff2:	69bb      	ldr	r3, [r7, #24]
 8010ff4:	6979      	ldr	r1, [r7, #20]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f000 f907 	bl	801120a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	6979      	ldr	r1, [r7, #20]
 8011000:	69b8      	ldr	r0, [r7, #24]
 8011002:	f7ff fc6e 	bl	80108e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011006:	697b      	ldr	r3, [r7, #20]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3724      	adds	r7, #36	; 0x24
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	080290c4 	.word	0x080290c4
 8011014:	08029a3c 	.word	0x08029a3c
 8011018:	08029154 	.word	0x08029154
 801101c:	08029198 	.word	0x08029198
 8011020:	0802923c 	.word	0x0802923c

08011024 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011024:	b590      	push	{r4, r7, lr}
 8011026:	b089      	sub	sp, #36	; 0x24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
 8011030:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	689a      	ldr	r2, [r3, #8]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	3320      	adds	r3, #32
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4610      	mov	r0, r2
 8011042:	4798      	blx	r3
 8011044:	4603      	mov	r3, r0
 8011046:	2bf7      	cmp	r3, #247	; 0xf7
 8011048:	d805      	bhi.n	8011056 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801104a:	4b4e      	ldr	r3, [pc, #312]	; (8011184 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801104c:	4a4e      	ldr	r2, [pc, #312]	; (8011188 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801104e:	21c2      	movs	r1, #194	; 0xc2
 8011050:	484e      	ldr	r0, [pc, #312]	; (801118c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011052:	f016 ff71 	bl	8027f38 <__assert_func>
 8011056:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	685a      	ldr	r2, [r3, #4]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	3320      	adds	r3, #32
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	4610      	mov	r0, r2
 8011068:	4798      	blx	r3
 801106a:	4603      	mov	r3, r0
 801106c:	2b0f      	cmp	r3, #15
 801106e:	d805      	bhi.n	801107c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8011070:	4b47      	ldr	r3, [pc, #284]	; (8011190 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011072:	4a45      	ldr	r2, [pc, #276]	; (8011188 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011074:	21c3      	movs	r1, #195	; 0xc3
 8011076:	4845      	ldr	r0, [pc, #276]	; (801118c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011078:	f016 ff5e 	bl	8027f38 <__assert_func>
 801107c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	68da      	ldr	r2, [r3, #12]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	3320      	adds	r3, #32
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4610      	mov	r0, r2
 801108e:	4798      	blx	r3
 8011090:	4603      	mov	r3, r0
 8011092:	2b53      	cmp	r3, #83	; 0x53
 8011094:	d805      	bhi.n	80110a2 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8011096:	4b3f      	ldr	r3, [pc, #252]	; (8011194 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8011098:	4a3b      	ldr	r2, [pc, #236]	; (8011188 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801109a:	21c4      	movs	r1, #196	; 0xc4
 801109c:	483b      	ldr	r0, [pc, #236]	; (801118c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801109e:	f016 ff4b 	bl	8027f38 <__assert_func>
 80110a2:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80110a4:	683a      	ldr	r2, [r7, #0]
 80110a6:	68b9      	ldr	r1, [r7, #8]
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	f7ff fbbe 	bl	801082a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	2100      	movs	r1, #0
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 f8b6 	bl	8011226 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80110ba:	4603      	mov	r3, r0
 80110bc:	4619      	mov	r1, r3
 80110be:	2054      	movs	r0, #84	; 0x54
 80110c0:	f7ff f9a6 	bl	8010410 <_ZnwjPv>
 80110c4:	4604      	mov	r4, r0
 80110c6:	2c00      	cmp	r4, #0
 80110c8:	d005      	beq.n	80110d6 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 80110ca:	2114      	movs	r1, #20
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 f8df 	bl	8011290 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80110d2:	4623      	mov	r3, r4
 80110d4:	e000      	b.n	80110d8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80110d6:	4623      	mov	r3, r4
 80110d8:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	2100      	movs	r1, #0
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f969 	bl	80113b8 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 80110e6:	4603      	mov	r3, r0
 80110e8:	4619      	mov	r1, r3
 80110ea:	20f8      	movs	r0, #248	; 0xf8
 80110ec:	f7ff f990 	bl	8010410 <_ZnwjPv>
 80110f0:	4604      	mov	r4, r0
 80110f2:	2c00      	cmp	r4, #0
 80110f4:	d004      	beq.n	8011100 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 80110f6:	4620      	mov	r0, r4
 80110f8:	f004 fe1e 	bl	8015d38 <_ZN16SecondScreenViewC1Ev>
 80110fc:	4623      	mov	r3, r4
 80110fe:	e000      	b.n	8011102 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8011100:	4623      	mov	r3, r4
 8011102:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	2100      	movs	r1, #0
 801110a:	4618      	mov	r0, r3
 801110c:	f000 f967 	bl	80113de <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011110:	4603      	mov	r3, r0
 8011112:	4619      	mov	r1, r3
 8011114:	2010      	movs	r0, #16
 8011116:	f7ff f97b 	bl	8010410 <_ZnwjPv>
 801111a:	4604      	mov	r4, r0
 801111c:	2c00      	cmp	r4, #0
 801111e:	d005      	beq.n	801112c <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 8011120:	69b9      	ldr	r1, [r7, #24]
 8011122:	4620      	mov	r0, r4
 8011124:	f004 fdb2 	bl	8015c8c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 8011128:	4623      	mov	r3, r4
 801112a:	e000      	b.n	801112e <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801112c:	4623      	mov	r3, r4
 801112e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	69fa      	ldr	r2, [r7, #28]
 8011134:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	697a      	ldr	r2, [r7, #20]
 801113a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	69ba      	ldr	r2, [r7, #24]
 8011140:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	3304      	adds	r3, #4
 801114c:	e000      	b.n	8011150 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801114e:	2300      	movs	r3, #0
 8011150:	4619      	mov	r1, r3
 8011152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011154:	f7ff fbec 	bl	8010930 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	3304      	adds	r3, #4
 801115c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff fc5f 	bl	8010a22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	6979      	ldr	r1, [r7, #20]
 8011168:	4618      	mov	r0, r3
 801116a:	f000 f94b 	bl	8011404 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801116e:	69fa      	ldr	r2, [r7, #28]
 8011170:	6979      	ldr	r1, [r7, #20]
 8011172:	69b8      	ldr	r0, [r7, #24]
 8011174:	f7ff fbb5 	bl	80108e2 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011178:	697b      	ldr	r3, [r7, #20]
}
 801117a:	4618      	mov	r0, r3
 801117c:	3724      	adds	r7, #36	; 0x24
 801117e:	46bd      	mov	sp, r7
 8011180:	bd90      	pop	{r4, r7, pc}
 8011182:	bf00      	nop
 8011184:	080290c4 	.word	0x080290c4
 8011188:	08029b58 	.word	0x08029b58
 801118c:	08029154 	.word	0x08029154
 8011190:	08029198 	.word	0x08029198
 8011194:	0802923c 	.word	0x0802923c

08011198 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	460b      	mov	r3, r1
 80111a2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	3324      	adds	r3, #36	; 0x24
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	887a      	ldrh	r2, [r7, #2]
 80111ae:	4611      	mov	r1, r2
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	4798      	blx	r3
 80111b4:	4603      	mov	r3, r0
    }
 80111b6:	4618      	mov	r0, r3
 80111b8:	3708      	adds	r7, #8
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd80      	pop	{r7, pc}

080111be <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80111be:	b580      	push	{r7, lr}
 80111c0:	b082      	sub	sp, #8
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3324      	adds	r3, #36	; 0x24
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	887a      	ldrh	r2, [r7, #2]
 80111d4:	4611      	mov	r1, r2
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	4798      	blx	r3
 80111da:	4603      	mov	r3, r0
    }
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	460b      	mov	r3, r1
 80111ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3324      	adds	r3, #36	; 0x24
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	887a      	ldrh	r2, [r7, #2]
 80111fa:	4611      	mov	r1, r2
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	4798      	blx	r3
 8011200:	4603      	mov	r3, r0
    }
 8011202:	4618      	mov	r0, r3
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801120a:	b480      	push	{r7}
 801120c:	b083      	sub	sp, #12
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	683a      	ldr	r2, [r7, #0]
 8011218:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801121a:	bf00      	nop
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr

08011226 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	460b      	mov	r3, r1
 8011230:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	3324      	adds	r3, #36	; 0x24
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	887a      	ldrh	r2, [r7, #2]
 801123c:	4611      	mov	r1, r2
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	4798      	blx	r3
 8011242:	4603      	mov	r3, r0
    }
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	4a05      	ldr	r2, [pc, #20]	; (801126c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	f000 f949 	bl	80114f4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	08029804 	.word	0x08029804

08011270 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f7ff ffe7 	bl	801124c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 801127e:	2110      	movs	r1, #16
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f016 fe2e 	bl	8027ee2 <_ZdlPvj>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8011290:	b590      	push	{r4, r7, lr}
 8011292:	b087      	sub	sp, #28
 8011294:	af02      	add	r7, sp, #8
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	460b      	mov	r3, r1
 801129a:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7ff f924 	bl	80104ec <_ZN8touchgfx10TransitionC1Ev>
 80112a4:	4a3f      	ldr	r2, [pc, #252]	; (80113a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	601a      	str	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	330c      	adds	r3, #12
 80112ae:	4618      	mov	r0, r3
 80112b0:	f009 f914 	bl	801a4dc <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f103 020c 	add.w	r2, r3, #12
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	639a      	str	r2, [r3, #56]	; 0x38
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80112c4:	4a38      	ldr	r2, [pc, #224]	; (80113a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 80112c6:	f107 0308 	add.w	r3, r7, #8
 80112ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80112d2:	f107 0308 	add.w	r3, r7, #8
 80112d6:	cb0c      	ldmia	r3, {r2, r3}
 80112d8:	6879      	ldr	r1, [r7, #4]
 80112da:	4620      	mov	r0, r4
 80112dc:	f000 f8ea 	bl	80114b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2202      	movs	r2, #2
 80112e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	78fa      	ldrb	r2, [r7, #3]
 80112ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011300:	4b2a      	ldr	r3, [pc, #168]	; (80113ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d047      	beq.n	8011398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f103 000c 	add.w	r0, r3, #12
 801130e:	4b28      	ldr	r3, [pc, #160]	; (80113b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011310:	881b      	ldrh	r3, [r3, #0]
 8011312:	b21a      	sxth	r2, r3
 8011314:	4b27      	ldr	r3, [pc, #156]	; (80113b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	b21b      	sxth	r3, r3
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	4613      	mov	r3, r2
 801131e:	2200      	movs	r2, #0
 8011320:	2100      	movs	r1, #0
 8011322:	f7ff f971 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	330c      	adds	r3, #12
 801132a:	4618      	mov	r0, r3
 801132c:	f009 f852 	bl	801a3d4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011336:	2b03      	cmp	r3, #3
 8011338:	d82a      	bhi.n	8011390 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 801133a:	a201      	add	r2, pc, #4	; (adr r2, 8011340 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 801133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011340:	08011371 	.word	0x08011371
 8011344:	0801137f 	.word	0x0801137f
 8011348:	08011351 	.word	0x08011351
 801134c:	08011363 	.word	0x08011363
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011350:	4b17      	ldr	r3, [pc, #92]	; (80113b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011352:	881b      	ldrh	r3, [r3, #0]
 8011354:	425b      	negs	r3, r3
 8011356:	b29b      	uxth	r3, r3
 8011358:	b21a      	sxth	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011360:	e01a      	b.n	8011398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8011362:	4b13      	ldr	r3, [pc, #76]	; (80113b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	b21a      	sxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801136e:	e013      	b.n	8011398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8011370:	4b10      	ldr	r3, [pc, #64]	; (80113b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	b21a      	sxth	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801137c:	e00c      	b.n	8011398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 801137e:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011380:	881b      	ldrh	r3, [r3, #0]
 8011382:	425b      	negs	r3, r3
 8011384:	b29b      	uxth	r3, r3
 8011386:	b21a      	sxth	r2, r3
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 801138e:	e003      	b.n	8011398 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2201      	movs	r2, #1
 8011394:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011396:	bf00      	nop
            }
        }
    }
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd90      	pop	{r4, r7, pc}
 80113a2:	bf00      	nop
 80113a4:	080297dc 	.word	0x080297dc
 80113a8:	080292e0 	.word	0x080292e0
 80113ac:	2000bee9 	.word	0x2000bee9
 80113b0:	2000bede 	.word	0x2000bede
 80113b4:	2000bee0 	.word	0x2000bee0

080113b8 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	460b      	mov	r3, r1
 80113c2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	3324      	adds	r3, #36	; 0x24
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	887a      	ldrh	r2, [r7, #2]
 80113ce:	4611      	mov	r1, r2
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	4798      	blx	r3
 80113d4:	4603      	mov	r3, r0
    }
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 80113de:	b580      	push	{r7, lr}
 80113e0:	b082      	sub	sp, #8
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
 80113e6:	460b      	mov	r3, r1
 80113e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	3324      	adds	r3, #36	; 0x24
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	887a      	ldrh	r2, [r7, #2]
 80113f4:	4611      	mov	r1, r2
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	4798      	blx	r3
 80113fa:	4603      	mov	r3, r0
    }
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011414:	bf00      	nop
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801142e:	683a      	ldr	r2, [r7, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d02a      	beq.n	801148a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801143a:	2b03      	cmp	r3, #3
 801143c:	d820      	bhi.n	8011480 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 801143e:	a201      	add	r2, pc, #4	; (adr r2, 8011444 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011444:	0801146b 	.word	0x0801146b
 8011448:	0801146b 	.word	0x0801146b
 801144c:	08011455 	.word	0x08011455
 8011450:	08011455 	.word	0x08011455
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	3354      	adds	r3, #84	; 0x54
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011462:	2200      	movs	r2, #0
 8011464:	6838      	ldr	r0, [r7, #0]
 8011466:	4798      	blx	r3
            break;
 8011468:	e010      	b.n	801148c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	3354      	adds	r3, #84	; 0x54
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011478:	2100      	movs	r1, #0
 801147a:	6838      	ldr	r0, [r7, #0]
 801147c:	4798      	blx	r3
            break;
 801147e:	e005      	b.n	801148c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2201      	movs	r2, #1
 8011484:	721a      	strb	r2, [r3, #8]
            break;
 8011486:	bf00      	nop
 8011488:	e000      	b.n	801148c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801148a:	bf00      	nop
        }
    }
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop

08011494 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	4a04      	ldr	r2, [pc, #16]	; (80114b0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	601a      	str	r2, [r3, #0]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr
 80114b0:	0802981c 	.word	0x0802981c

080114b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	4639      	mov	r1, r7
 80114c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff ffe4 	bl	8011494 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80114cc:	4a08      	ldr	r2, [pc, #32]	; (80114f0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	68ba      	ldr	r2, [r7, #8]
 80114d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	3308      	adds	r3, #8
 80114dc:	463a      	mov	r2, r7
 80114de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	08029804 	.word	0x08029804

080114f4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
    }
 80114fc:	4a04      	ldr	r2, [pc, #16]	; (8011510 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	601a      	str	r2, [r3, #0]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	0802981c 	.word	0x0802981c

08011514 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
    }
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff ffe9 	bl	80114f4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011522:	2104      	movs	r1, #4
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f016 fcdc 	bl	8027ee2 <_ZdlPvj>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	4a05      	ldr	r2, [pc, #20]	; (8011554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff f83f 	bl	80105c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4618      	mov	r0, r3
 801154e:	3708      	adds	r7, #8
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	08029890 	.word	0x08029890

08011558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f7ff ffe7 	bl	8011534 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011566:	2110      	movs	r1, #16
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f016 fcba 	bl	8027ee2 <_ZdlPvj>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4618      	mov	r0, r3
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
    }
 8011580:	4a0a      	ldr	r2, [pc, #40]	; (80115ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	601a      	str	r2, [r3, #0]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	333c      	adds	r3, #60	; 0x3c
 801158a:	4618      	mov	r0, r3
 801158c:	f7ff fe5e 	bl	801124c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	330c      	adds	r3, #12
 8011594:	4618      	mov	r0, r3
 8011596:	f008 ff1c 	bl	801a3d2 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4618      	mov	r0, r3
 801159e:	f7fe ffbb 	bl	8010518 <_ZN8touchgfx10TransitionD1Ev>
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4618      	mov	r0, r3
 80115a6:	3708      	adds	r7, #8
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	080297dc 	.word	0x080297dc

080115b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
    }
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff ffdd 	bl	8011578 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80115be:	2154      	movs	r1, #84	; 0x54
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f016 fc8e 	bl	8027ee2 <_ZdlPvj>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4618      	mov	r0, r3
 80115ca:	3708      	adds	r7, #8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80115d8:	4b59      	ldr	r3, [pc, #356]	; (8011740 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f083 0301 	eor.w	r3, r3, #1
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2201      	movs	r2, #1
 80115ea:	721a      	strb	r2, [r3, #8]
            return;
 80115ec:	e0a5      	b.n	801173a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fe ffb1 	bl	8010558 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80115fc:	3301      	adds	r3, #1
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011612:	429a      	cmp	r2, r3
 8011614:	d82f      	bhi.n	8011676 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801161c:	b298      	uxth	r0, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801162a:	b29b      	uxth	r3, r3
 801162c:	2100      	movs	r1, #0
 801162e:	f00b fd7c 	bl	801d12a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011632:	4603      	mov	r3, r0
 8011634:	461a      	mov	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011642:	b29b      	uxth	r3, r3
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	b29b      	uxth	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d01b      	beq.n	8011686 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011654:	b29b      	uxth	r3, r3
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 801165c:	2a00      	cmp	r2, #0
 801165e:	dd01      	ble.n	8011664 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8011660:	2201      	movs	r2, #1
 8011662:	e001      	b.n	8011668 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8011664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011668:	4413      	add	r3, r2
 801166a:	b29b      	uxth	r3, r3
 801166c:	b21a      	sxth	r2, r3
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011674:	e007      	b.n	8011686 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2201      	movs	r2, #1
 801167a:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011684:	e059      	b.n	801173a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801168c:	2b03      	cmp	r3, #3
 801168e:	d845      	bhi.n	801171c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 8011690:	a201      	add	r2, pc, #4	; (adr r2, 8011698 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 8011692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011696:	bf00      	nop
 8011698:	080116e3 	.word	0x080116e3
 801169c:	080116e3 	.word	0x080116e3
 80116a0:	080116a9 	.word	0x080116a9
 80116a4:	080116a9 	.word	0x080116a9
            calculatedValue -= snapshot.getX();
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	330c      	adds	r3, #12
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe ffd8 	bl	8010662 <_ZNK8touchgfx8Drawable4getXEv>
 80116b2:	4603      	mov	r3, r0
 80116b4:	4619      	mov	r1, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80116bc:	b29a      	uxth	r2, r3
 80116be:	b28b      	uxth	r3, r1
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	b21a      	sxth	r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f103 000c 	add.w	r0, r3, #12
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80116d8:	2200      	movs	r2, #0
 80116da:	4619      	mov	r1, r3
 80116dc:	f00b f85c 	bl	801c798 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80116e0:	e020      	b.n	8011724 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	330c      	adds	r3, #12
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe ffc8 	bl	801067c <_ZNK8touchgfx8Drawable4getYEv>
 80116ec:	4603      	mov	r3, r0
 80116ee:	4619      	mov	r1, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	b28b      	uxth	r3, r1
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	b21a      	sxth	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f103 000c 	add.w	r0, r3, #12
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011712:	461a      	mov	r2, r3
 8011714:	2100      	movs	r1, #0
 8011716:	f00b f83f 	bl	801c798 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801171a:	e003      	b.n	8011724 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2201      	movs	r2, #1
 8011720:	721a      	strb	r2, [r3, #8]
            break;
 8011722:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6858      	ldr	r0, [r3, #4]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	3378      	adds	r3, #120	; 0x78
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	323c      	adds	r2, #60	; 0x3c
 8011736:	4611      	mov	r1, r2
 8011738:	4798      	blx	r3
    }
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	2000bee9 	.word	0x2000bee9

08011744 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 801174c:	4b0b      	ldr	r3, [pc, #44]	; (801177c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00e      	beq.n	8011772 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6858      	ldr	r0, [r3, #4]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	3364      	adds	r3, #100	; 0x64
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	320c      	adds	r2, #12
 801176e:	4611      	mov	r1, r2
 8011770:	4798      	blx	r3
    }
 8011772:	bf00      	nop
 8011774:	3708      	adds	r7, #8
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	2000bee9 	.word	0x2000bee9

08011780 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8011780:	b580      	push	{r7, lr}
 8011782:	b088      	sub	sp, #32
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011788:	4b1a      	ldr	r3, [pc, #104]	; (80117f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d02d      	beq.n	80117ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	4618      	mov	r0, r3
 8011794:	f7fe fef4 	bl	8010580 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011798:	4a17      	ldr	r2, [pc, #92]	; (80117f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 801179a:	f107 0318 	add.w	r3, r7, #24
 801179e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80117a6:	f107 0008 	add.w	r0, r7, #8
 80117aa:	f107 0318 	add.w	r3, r7, #24
 80117ae:	cb0c      	ldmia	r3, {r2, r3}
 80117b0:	6879      	ldr	r1, [r7, #4]
 80117b2:	f7ff fe7f 	bl	80114b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	685a      	ldr	r2, [r3, #4]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	3378      	adds	r3, #120	; 0x78
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f107 0108 	add.w	r1, r7, #8
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
            screenContainer->add(snapshot);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6858      	ldr	r0, [r3, #4]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	3360      	adds	r3, #96	; 0x60
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	320c      	adds	r2, #12
 80117de:	4611      	mov	r1, r2
 80117e0:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80117e2:	f107 0308 	add.w	r3, r7, #8
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7ff fd30 	bl	801124c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 80117ec:	bf00      	nop
 80117ee:	3720      	adds	r7, #32
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	2000bee9 	.word	0x2000bee9
 80117f8:	080292e8 	.word	0x080292e8

080117fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801180c:	2b03      	cmp	r3, #3
 801180e:	d83b      	bhi.n	8011888 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011810:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011816:	bf00      	nop
 8011818:	08011859 	.word	0x08011859
 801181c:	08011873 	.word	0x08011873
 8011820:	08011829 	.word	0x08011829
 8011824:	0801183f 	.word	0x0801183f
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3354      	adds	r3, #84	; 0x54
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a18      	ldr	r2, [pc, #96]	; (8011894 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011832:	8812      	ldrh	r2, [r2, #0]
 8011834:	b211      	sxth	r1, r2
 8011836:	2200      	movs	r2, #0
 8011838:	6838      	ldr	r0, [r7, #0]
 801183a:	4798      	blx	r3
            break;
 801183c:	e025      	b.n	801188a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	3354      	adds	r3, #84	; 0x54
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a13      	ldr	r2, [pc, #76]	; (8011894 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011848:	8812      	ldrh	r2, [r2, #0]
 801184a:	4252      	negs	r2, r2
 801184c:	b292      	uxth	r2, r2
 801184e:	b211      	sxth	r1, r2
 8011850:	2200      	movs	r2, #0
 8011852:	6838      	ldr	r0, [r7, #0]
 8011854:	4798      	blx	r3
            break;
 8011856:	e018      	b.n	801188a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3354      	adds	r3, #84	; 0x54
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a0d      	ldr	r2, [pc, #52]	; (8011898 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011862:	8812      	ldrh	r2, [r2, #0]
 8011864:	4252      	negs	r2, r2
 8011866:	b292      	uxth	r2, r2
 8011868:	b212      	sxth	r2, r2
 801186a:	2100      	movs	r1, #0
 801186c:	6838      	ldr	r0, [r7, #0]
 801186e:	4798      	blx	r3
            break;
 8011870:	e00b      	b.n	801188a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	3354      	adds	r3, #84	; 0x54
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4a07      	ldr	r2, [pc, #28]	; (8011898 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801187c:	8812      	ldrh	r2, [r2, #0]
 801187e:	b212      	sxth	r2, r2
 8011880:	2100      	movs	r1, #0
 8011882:	6838      	ldr	r0, [r7, #0]
 8011884:	4798      	blx	r3
            break;
 8011886:	e000      	b.n	801188a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011888:	bf00      	nop
    }
 801188a:	bf00      	nop
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	2000bede 	.word	0x2000bede
 8011898:	2000bee0 	.word	0x2000bee0

0801189c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	68d2      	ldr	r2, [r2, #12]
 80118ae:	1052      	asrs	r2, r2, #1
 80118b0:	1898      	adds	r0, r3, r2
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	f003 0301 	and.w	r3, r3, #1
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d102      	bne.n	80118c4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	e00a      	b.n	80118da <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	68d2      	ldr	r2, [r2, #12]
 80118cc:	1052      	asrs	r2, r2, #1
 80118ce:	4413      	add	r3, r2
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	6892      	ldr	r2, [r2, #8]
 80118d6:	4413      	add	r3, r2
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	6839      	ldr	r1, [r7, #0]
 80118dc:	4798      	blx	r3
    }
 80118de:	bf00      	nop
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80118e6:	b480      	push	{r7}
 80118e8:	b083      	sub	sp, #12
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d010      	beq.n	8011918 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d107      	bne.n	801190e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	f003 0301 	and.w	r3, r3, #1
 8011906:	2b00      	cmp	r3, #0
 8011908:	d101      	bne.n	801190e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801190a:	2301      	movs	r3, #1
 801190c:	e000      	b.n	8011910 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801190e:	2300      	movs	r3, #0
 8011910:	2b01      	cmp	r3, #1
 8011912:	d001      	beq.n	8011918 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8011914:	2301      	movs	r3, #1
 8011916:	e000      	b.n	801191a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8011918:	2300      	movs	r3, #0
    }
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8011926:	b580      	push	{r7, lr}
 8011928:	b082      	sub	sp, #8
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	68d2      	ldr	r2, [r2, #12]
 8011936:	1052      	asrs	r2, r2, #1
 8011938:	1899      	adds	r1, r3, r2
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	f003 0301 	and.w	r3, r3, #1
 8011942:	2b00      	cmp	r3, #0
 8011944:	d102      	bne.n	801194c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	e00a      	b.n	8011962 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	68d2      	ldr	r2, [r2, #12]
 8011954:	1052      	asrs	r2, r2, #1
 8011956:	4413      	add	r3, r2
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	6892      	ldr	r2, [r2, #8]
 801195e:	4413      	add	r3, r2
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4608      	mov	r0, r1
 8011964:	4798      	blx	r3
    }
 8011966:	bf00      	nop
 8011968:	3708      	adds	r7, #8
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801196e:	b480      	push	{r7}
 8011970:	b083      	sub	sp, #12
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d010      	beq.n	80119a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d107      	bne.n	8011996 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	f003 0301 	and.w	r3, r3, #1
 801198e:	2b00      	cmp	r3, #0
 8011990:	d101      	bne.n	8011996 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011992:	2301      	movs	r3, #1
 8011994:	e000      	b.n	8011998 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011996:	2300      	movs	r3, #0
 8011998:	2b01      	cmp	r3, #1
 801199a:	d001      	beq.n	80119a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801199c:	2301      	movs	r3, #1
 801199e:	e000      	b.n	80119a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80119a0:	2300      	movs	r3, #0
    }
 80119a2:	4618      	mov	r0, r3
 80119a4:	370c      	adds	r7, #12
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	4618      	mov	r0, r3
 80119c0:	370c      	adds	r7, #12
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80119ca:	b480      	push	{r7}
 80119cc:	b083      	sub	sp, #12
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	6078      	str	r0, [r7, #4]
 80119d2:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	683a      	ldr	r2, [r7, #0]
 80119d8:	601a      	str	r2, [r3, #0]
    }
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr

080119e8 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2200      	movs	r2, #0
 8011a06:	80da      	strh	r2, [r3, #6]
    }
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	370c      	adds	r7, #12
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a14:	4770      	bx	lr

08011a16 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8011a16:	b480      	push	{r7}
 8011a18:	b085      	sub	sp, #20
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	4608      	mov	r0, r1
 8011a20:	4611      	mov	r1, r2
 8011a22:	461a      	mov	r2, r3
 8011a24:	4603      	mov	r3, r0
 8011a26:	817b      	strh	r3, [r7, #10]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	813b      	strh	r3, [r7, #8]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	897a      	ldrh	r2, [r7, #10]
 8011a34:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	893a      	ldrh	r2, [r7, #8]
 8011a3a:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	88fa      	ldrh	r2, [r7, #6]
 8011a40:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	8b3a      	ldrh	r2, [r7, #24]
 8011a46:	80da      	strh	r2, [r3, #6]
    }
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3714      	adds	r7, #20
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr

08011a56 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8011a56:	b480      	push	{r7}
 8011a58:	b083      	sub	sp, #12
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
    {
        return _type;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	791b      	ldrb	r3, [r3, #4]
    }
 8011a62:	4618      	mov	r0, r3
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr

08011a6e <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8011a6e:	b480      	push	{r7}
 8011a70:	b083      	sub	sp, #12
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
 8011a76:	460b      	mov	r3, r1
 8011a78:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	887a      	ldrh	r2, [r7, #2]
 8011a7e:	801a      	strh	r2, [r3, #0]
    {
    }
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4618      	mov	r0, r3
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
	...

08011a90 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af02      	add	r7, sp, #8
 8011a96:	6078      	str	r0, [r7, #4]
        visible(true)
 8011a98:	4a13      	ldr	r2, [pc, #76]	; (8011ae8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	1d18      	adds	r0, r3, #4
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	2100      	movs	r1, #0
 8011aac:	f7ff ffb3 	bl	8011a16 <_ZN8touchgfx4RectC1Essss>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	330c      	adds	r3, #12
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7ff ff97 	bl	80119e8 <_ZN8touchgfx4RectC1Ev>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2200      	movs	r2, #0
 8011abe:	615a      	str	r2, [r3, #20]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	619a      	str	r2, [r3, #24]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	61da      	str	r2, [r3, #28]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3708      	adds	r7, #8
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	0802c174 	.word	0x0802c174

08011aec <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	4618      	mov	r0, r3
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	0802c174 	.word	0x0802c174

08011b0c <_ZN8touchgfx8DrawableD0Ev>:
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7ff ffe9 	bl	8011aec <_ZN8touchgfx8DrawableD1Ev>
 8011b1a:	2128      	movs	r1, #40	; 0x28
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f016 f9e0 	bl	8027ee2 <_ZdlPvj>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	4618      	mov	r0, r3
 8011b26:	3708      	adds	r7, #8
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8011b2c:	b480      	push	{r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	460b      	mov	r3, r1
 8011b36:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	887a      	ldrh	r2, [r7, #2]
 8011b3c:	809a      	strh	r2, [r3, #4]
    }
 8011b3e:	bf00      	nop
 8011b40:	370c      	adds	r7, #12
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8011b4a:	b480      	push	{r7}
 8011b4c:	b083      	sub	sp, #12
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
 8011b52:	460b      	mov	r3, r1
 8011b54:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	887a      	ldrh	r2, [r7, #2]
 8011b5a:	80da      	strh	r2, [r3, #6]
    }
 8011b5c:	bf00      	nop
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	807b      	strh	r3, [r7, #2]
 8011b74:	4613      	mov	r3, r2
 8011b76:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	332c      	adds	r3, #44	; 0x2c
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011b84:	4611      	mov	r1, r2
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	4798      	blx	r3
        setY(y);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	3330      	adds	r3, #48	; 0x30
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011b96:	4611      	mov	r1, r2
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	4798      	blx	r3
    }
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	460b      	mov	r3, r1
 8011bae:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	887a      	ldrh	r2, [r7, #2]
 8011bb4:	811a      	strh	r2, [r3, #8]
    }
 8011bb6:	bf00      	nop
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8011bc2:	b480      	push	{r7}
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	460b      	mov	r3, r1
 8011bcc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	887a      	ldrh	r2, [r7, #2]
 8011bd2:	815a      	strh	r2, [r3, #10]
    }
 8011bd4:	bf00      	nop
 8011bd6:	370c      	adds	r7, #12
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bde:	4770      	bx	lr

08011be0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
 8011bfe:	bf00      	nop
 8011c00:	370c      	adds	r7, #12
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr

08011c0a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8011c0a:	b480      	push	{r7}
 8011c0c:	b083      	sub	sp, #12
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	6078      	str	r0, [r7, #4]
 8011c12:	6039      	str	r1, [r7, #0]
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
 8011c2a:	bf00      	nop
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8011c36:	b480      	push	{r7}
 8011c38:	b083      	sub	sp, #12
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	bf00      	nop
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8011c4a:	b480      	push	{r7}
 8011c4c:	b083      	sub	sp, #12
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	460b      	mov	r3, r1
 8011c54:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	78fa      	ldrb	r2, [r7, #3]
 8011c5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8011c5e:	bf00      	nop
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8011c6a:	b480      	push	{r7}
 8011c6c:	b083      	sub	sp, #12
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
 8011c72:	460b      	mov	r3, r1
 8011c74:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	78fa      	ldrb	r2, [r7, #3]
 8011c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8011c7e:	bf00      	nop
 8011c80:	370c      	adds	r7, #12
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr

08011c8a <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011c8a:	b480      	push	{r7}
 8011c8c:	b083      	sub	sp, #12
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011c98:	4618      	mov	r0, r3
 8011c9a:	370c      	adds	r7, #12
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca2:	4770      	bx	lr

08011ca4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	370c      	adds	r7, #12
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr

08011cbe <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b082      	sub	sp, #8
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	807b      	strh	r3, [r7, #2]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	3354      	adds	r3, #84	; 0x54
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	8879      	ldrh	r1, [r7, #2]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011cde:	b292      	uxth	r2, r2
 8011ce0:	1a8a      	subs	r2, r1, r2
 8011ce2:	b292      	uxth	r2, r2
 8011ce4:	b210      	sxth	r0, r2
 8011ce6:	8839      	ldrh	r1, [r7, #0]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011cee:	b292      	uxth	r2, r2
 8011cf0:	1a8a      	subs	r2, r1, r2
 8011cf2:	b292      	uxth	r2, r2
 8011cf4:	b212      	sxth	r2, r2
 8011cf6:	4601      	mov	r1, r0
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	4798      	blx	r3
    }
 8011cfc:	bf00      	nop
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d12:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d1a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d22:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8011d24:	bf00      	nop
 8011d26:	370c      	adds	r7, #12
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b084      	sub	sp, #16
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f7ff ffe1 	bl	8011d04 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	601a      	str	r2, [r3, #0]
    }
 8011d50:	bf00      	nop
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
        firstChild(0)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fe94 	bl	8011a90 <_ZN8touchgfx8DrawableC1Ev>
 8011d68:	4a05      	ldr	r2, [pc, #20]	; (8011d80 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2200      	movs	r2, #0
 8011d72:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4618      	mov	r0, r3
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	0802ae68 	.word	0x0802ae68

08011d84 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	4a05      	ldr	r2, [pc, #20]	; (8011da4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	601a      	str	r2, [r3, #0]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ff fea9 	bl	8011aec <_ZN8touchgfx8DrawableD1Ev>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3708      	adds	r7, #8
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	0802ae68 	.word	0x0802ae68

08011da8 <_ZN8touchgfx9ContainerD0Ev>:
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f7ff ffe7 	bl	8011d84 <_ZN8touchgfx9ContainerD1Ev>
 8011db6:	212c      	movs	r1, #44	; 0x2c
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f016 f892 	bl	8027ee2 <_ZdlPvj>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	4a06      	ldr	r2, [pc, #24]	; (8011dec <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	601a      	str	r2, [r3, #0]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	3304      	adds	r3, #4
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff ffd2 	bl	8011d84 <_ZN8touchgfx9ContainerD1Ev>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	0802c26c 	.word	0x0802c26c

08011df0 <_ZN8touchgfx6ScreenD0Ev>:
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f7ff ffe5 	bl	8011dc8 <_ZN8touchgfx6ScreenD1Ev>
 8011dfe:	213c      	movs	r1, #60	; 0x3c
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f016 f86e 	bl	8027ee2 <_ZdlPvj>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8011e10:	b480      	push	{r7}
 8011e12:	b083      	sub	sp, #12
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	bf00      	nop
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
    {
    }
 8011e54:	bf00      	nop
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	3304      	adds	r3, #4
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f006 fd5d 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8011e8e:	bf00      	nop
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7ff fdf4 	bl	8011a90 <_ZN8touchgfx8DrawableC1Ev>
 8011ea8:	4a03      	ldr	r2, [pc, #12]	; (8011eb8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	601a      	str	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3708      	adds	r7, #8
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	08029f5c 	.word	0x08029f5c

08011ebc <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	4a05      	ldr	r2, [pc, #20]	; (8011edc <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	601a      	str	r2, [r3, #0]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff fe0d 	bl	8011aec <_ZN8touchgfx8DrawableD1Ev>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3708      	adds	r7, #8
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	08029f5c 	.word	0x08029f5c

08011ee0 <_ZN8touchgfx6WidgetD0Ev>:
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7ff ffe7 	bl	8011ebc <_ZN8touchgfx6WidgetD1Ev>
 8011eee:	2128      	movs	r1, #40	; 0x28
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f015 fff6 	bl	8027ee2 <_ZdlPvj>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	607b      	str	r3, [r7, #4]
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	817b      	strh	r3, [r7, #10]
 8011f0e:	4613      	mov	r3, r2
 8011f10:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff feb8 	bl	8011c8a <_ZNK8touchgfx8Drawable9isVisibleEv>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d008      	beq.n	8011f32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7ff febe 	bl	8011ca4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8011f2e:	2301      	movs	r3, #1
 8011f30:	e000      	b.n	8011f34 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8011f32:	2300      	movs	r3, #0
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d002      	beq.n	8011f3e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	601a      	str	r2, [r3, #0]
        }
    }
 8011f3e:	bf00      	nop
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
	...

08011f48 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff ffa0 	bl	8011e98 <_ZN8touchgfx6WidgetC1Ev>
 8011f58:	4a0a      	ldr	r2, [pc, #40]	; (8011f84 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	22ff      	movs	r2, #255	; 0xff
 8011f62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	3328      	adds	r3, #40	; 0x28
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7ff fd2c 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	0802bc10 	.word	0x0802bc10

08011f88 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	4a05      	ldr	r2, [pc, #20]	; (8011fa8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7ff ff8f 	bl	8011ebc <_ZN8touchgfx6WidgetD1Ev>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	0802bc10 	.word	0x0802bc10

08011fac <_ZN8touchgfx3BoxD0Ev>:
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ffe7 	bl	8011f88 <_ZN8touchgfx3BoxD1Ev>
 8011fba:	2130      	movs	r1, #48	; 0x30
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f015 ff90 	bl	8027ee2 <_ZdlPvj>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3708      	adds	r7, #8
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	683a      	ldr	r2, [r7, #0]
 8011fda:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8011fdc:	bf00      	nop
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr

08011fe8 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	807b      	strh	r3, [r7, #2]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	887a      	ldrh	r2, [r7, #2]
 8011ff8:	801a      	strh	r2, [r3, #0]
    }
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
        assertValid();
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7fd ff59 	bl	800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012016:	4b06      	ldr	r3, [pc, #24]	; (8012030 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	881b      	ldrh	r3, [r3, #0]
 801201e:	4619      	mov	r1, r3
 8012020:	4610      	mov	r0, r2
 8012022:	f003 f809 	bl	8015038 <_ZNK8touchgfx5Texts7getTextEt>
 8012026:	4603      	mov	r3, r0
    }
 8012028:	4618      	mov	r0, r3
 801202a:	3708      	adds	r7, #8
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	2000bf88 	.word	0x2000bf88

08012034 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff ff2a 	bl	8011e98 <_ZN8touchgfx6WidgetC1Ev>
 8012044:	4a13      	ldr	r2, [pc, #76]	; (8012094 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	601a      	str	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	3326      	adds	r3, #38	; 0x26
 801204e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff ffc8 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	3328      	adds	r3, #40	; 0x28
 801205c:	2100      	movs	r1, #0
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff fcb3 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	859a      	strh	r2, [r3, #44]	; 0x2c
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	22ff      	movs	r2, #255	; 0xff
 801206e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4618      	mov	r0, r3
 801208e:	3708      	adds	r7, #8
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}
 8012094:	0802bb94 	.word	0x0802bb94

08012098 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af02      	add	r7, sp, #8
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 80120a2:	2300      	movs	r3, #0
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	2300      	movs	r3, #0
 80120a8:	2200      	movs	r2, #0
 80120aa:	2100      	movs	r1, #0
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f7ff fcb2 	bl	8011a16 <_ZN8touchgfx4RectC1Essss>
    }
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	683a      	ldr	r2, [r7, #0]
 80120c8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80120ca:	bf00      	nop
 80120cc:	370c      	adds	r7, #12
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr

080120d6 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 80120d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120d8:	b085      	sub	sp, #20
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	460b      	mov	r3, r1
 80120e0:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80120e2:	687e      	ldr	r6, [r7, #4]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	3330      	adds	r3, #48	; 0x30
 80120ea:	681c      	ldr	r4, [r3, #0]
 80120ec:	887d      	ldrh	r5, [r7, #2]
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f000 f845 	bl	801217e <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80120f4:	4603      	mov	r3, r0
 80120f6:	81bb      	strh	r3, [r7, #12]
 80120f8:	f107 030c 	add.w	r3, r7, #12
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fd feaf 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 8012102:	4602      	mov	r2, r0
 8012104:	6813      	ldr	r3, [r2, #0]
 8012106:	332c      	adds	r3, #44	; 0x2c
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4610      	mov	r0, r2
 801210c:	4798      	blx	r3
 801210e:	4603      	mov	r3, r0
 8012110:	1aeb      	subs	r3, r5, r3
 8012112:	b29b      	uxth	r3, r3
 8012114:	b21b      	sxth	r3, r3
 8012116:	4619      	mov	r1, r3
 8012118:	4630      	mov	r0, r6
 801211a:	47a0      	blx	r4
    }
 801211c:	bf00      	nop
 801211e:	3714      	adds	r7, #20
 8012120:	46bd      	mov	sp, r7
 8012122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012124 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	460b      	mov	r3, r1
 801212e:	807b      	strh	r3, [r7, #2]
 8012130:	4613      	mov	r3, r2
 8012132:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	332c      	adds	r3, #44	; 0x2c
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012142:	4610      	mov	r0, r2
 8012144:	4798      	blx	r3
        setBaselineY(baselineY);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	3360      	adds	r3, #96	; 0x60
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012152:	4611      	mov	r1, r2
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	4798      	blx	r3
    }
 8012158:	bf00      	nop
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	887a      	ldrh	r2, [r7, #2]
 8012170:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8012172:	bf00      	nop
 8012174:	370c      	adds	r7, #12
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 801218a:	4618      	mov	r0, r3
 801218c:	370c      	adds	r7, #12
 801218e:	46bd      	mov	sp, r7
 8012190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012194:	4770      	bx	lr
	...

08012198 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	4a05      	ldr	r2, [pc, #20]	; (80121b8 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff fe87 	bl	8011ebc <_ZN8touchgfx6WidgetD1Ev>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	0802bb94 	.word	0x0802bb94

080121bc <_ZN8touchgfx8TextAreaD0Ev>:
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7ff ffe7 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80121ca:	2134      	movs	r1, #52	; 0x34
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f015 fe88 	bl	8027ee2 <_ZdlPvj>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	3708      	adds	r7, #8
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 80121dc:	b580      	push	{r7, lr}
 80121de:	b082      	sub	sp, #8
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
        : TextArea()
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7ff ff24 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 80121ec:	4a03      	ldr	r2, [pc, #12]	; (80121fc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	601a      	str	r2, [r3, #0]
    {
    }
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	08029ee0 	.word	0x08029ee0

08012200 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	4a05      	ldr	r2, [pc, #20]	; (8012220 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	601a      	str	r2, [r3, #0]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	4618      	mov	r0, r3
 8012212:	f7ff ffc1 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	4618      	mov	r0, r3
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	08029ee0 	.word	0x08029ee0

08012224 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7ff ffe7 	bl	8012200 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012232:	2134      	movs	r1, #52	; 0x34
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f015 fe54 	bl	8027ee2 <_ZdlPvj>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff ffc4 	bl	80121dc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012254:	4a05      	ldr	r2, [pc, #20]	; (801226c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	0802bcfc 	.word	0x0802bcfc

08012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	683a      	ldr	r2, [r7, #0]
 801227e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff fdfd 	bl	8011e98 <_ZN8touchgfx6WidgetC1Ev>
 801229e:	4a0b      	ldr	r2, [pc, #44]	; (80122cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	601a      	str	r2, [r3, #0]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3326      	adds	r3, #38	; 0x26
 80122a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7ff fbde 	bl	8011a6e <_ZN8touchgfx6BitmapC1Et>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	22ff      	movs	r2, #255	; 0xff
 80122b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80122ba:	6839      	ldr	r1, [r7, #0]
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f008 fd5f 	bl	801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	4618      	mov	r0, r3
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	0802bde0 	.word	0x0802bde0

080122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	601a      	str	r2, [r3, #0]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4618      	mov	r0, r3
 80122e4:	370c      	adds	r7, #12
 80122e6:	46bd      	mov	sp, r7
 80122e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80122ee:	b480      	push	{r7}
 80122f0:	b083      	sub	sp, #12
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
        {
            return v;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
        }
 80122fa:	4618      	mov	r0, r3
 80122fc:	370c      	adds	r7, #12
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr

08012306 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8012306:	b590      	push	{r4, r7, lr}
 8012308:	b083      	sub	sp, #12
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
 801230e:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	3340      	adds	r3, #64	; 0x40
 8012314:	4618      	mov	r0, r3
 8012316:	f7ff ffea 	bl	80122ee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 801231a:	4604      	mov	r4, r0
 801231c:	463b      	mov	r3, r7
 801231e:	4618      	mov	r0, r3
 8012320:	f7ff ffe5 	bl	80122ee <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012324:	4603      	mov	r3, r0
 8012326:	429c      	cmp	r4, r3
 8012328:	bf0c      	ite	eq
 801232a:	2301      	moveq	r3, #1
 801232c:	2300      	movne	r3, #0
 801232e:	b2db      	uxtb	r3, r3
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	683a      	ldr	r2, [r7, #0]
 8012338:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f007 fe6c 	bl	801a018 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8012340:	e000      	b.n	8012344 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8012342:	bf00      	nop
    }
 8012344:	370c      	adds	r7, #12
 8012346:	46bd      	mov	sp, r7
 8012348:	bd90      	pop	{r4, r7, pc}
	...

0801234c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	4a05      	ldr	r2, [pc, #20]	; (801236c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f007 fc6f 	bl	8019c40 <_ZN8touchgfx15AbstractPainterD1Ev>
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	0802b678 	.word	0x0802b678

08012370 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ff ffe7 	bl	801234c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801237e:	2114      	movs	r1, #20
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f015 fdae 	bl	8027ee2 <_ZdlPvj>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	4a05      	ldr	r2, [pc, #20]	; (80123b0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	601a      	str	r2, [r3, #0]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff fd8b 	bl	8011ebc <_ZN8touchgfx6WidgetD1Ev>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4618      	mov	r0, r3
 80123aa:	3708      	adds	r7, #8
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	0802bde0 	.word	0x0802bde0

080123b4 <_ZN8touchgfx5ImageD0Ev>:
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f7ff ffe7 	bl	8012390 <_ZN8touchgfx5ImageD1Ev>
 80123c2:	212c      	movs	r1, #44	; 0x2c
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f015 fd8c 	bl	8027ee2 <_ZdlPvj>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4618      	mov	r0, r3
 80123e0:	f7ff fcba 	bl	8011d58 <_ZN8touchgfx9ContainerC1Ev>
 80123e4:	4a0b      	ldr	r2, [pc, #44]	; (8012414 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	22ff      	movs	r2, #255	; 0xff
 80123f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2101      	movs	r1, #1
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff fc30 	bl	8011c6a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	08029e4c 	.word	0x08029e4c

08012418 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	4a05      	ldr	r2, [pc, #20]	; (8012438 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	601a      	str	r2, [r3, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	4618      	mov	r0, r3
 801242a:	f7ff fcab 	bl	8011d84 <_ZN8touchgfx9ContainerD1Ev>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	4618      	mov	r0, r3
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	08029e4c 	.word	0x08029e4c

0801243c <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff ffe7 	bl	8012418 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801244a:	2134      	movs	r1, #52	; 0x34
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f015 fd48 	bl	8027ee2 <_ZdlPvj>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4618      	mov	r0, r3
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	460b      	mov	r3, r1
 8012466:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	78fa      	ldrb	r2, [r7, #3]
 801246c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	3384      	adds	r3, #132	; 0x84
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	4798      	blx	r3
    }
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012492:	4618      	mov	r0, r3
 8012494:	370c      	adds	r7, #12
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr

0801249e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 801249e:	b580      	push	{r7, lr}
 80124a0:	b082      	sub	sp, #8
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	460b      	mov	r3, r1
 80124a8:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	78fa      	ldrb	r2, [r7, #3]
 80124ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	3388      	adds	r3, #136	; 0x88
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	4798      	blx	r3
    }
 80124be:	bf00      	nop
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 80124d4:	4618      	mov	r0, r3
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr

080124e0 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	bf00      	nop
 8012506:	370c      	adds	r7, #12
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	bf00      	nop
 801251a:	370c      	adds	r7, #12
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4618      	mov	r0, r3
 8012530:	f7ff ff50 	bl	80123d4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8012534:	4a03      	ldr	r2, [pc, #12]	; (8012544 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	601a      	str	r2, [r3, #0]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	08029da0 	.word	0x08029da0

08012548 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	4a05      	ldr	r2, [pc, #20]	; (8012568 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	601a      	str	r2, [r3, #0]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff ff5d 	bl	8012418 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	08029da0 	.word	0x08029da0

0801256c <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff ffe7 	bl	8012548 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 801257a:	2134      	movs	r1, #52	; 0x34
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f015 fcb0 	bl	8027ee2 <_ZdlPvj>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff ff73 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801259e:	4603      	mov	r3, r0
 80125a0:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80125a2:	6838      	ldr	r0, [r7, #0]
 80125a4:	f7ff fa57 	bl	8011a56 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	bf0c      	ite	eq
 80125ae:	2301      	moveq	r3, #1
 80125b0:	2300      	movne	r3, #0
 80125b2:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80125b4:	7bbb      	ldrb	r3, [r7, #14]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d005      	beq.n	80125c6 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80125ba:	7bfb      	ldrb	r3, [r7, #15]
 80125bc:	f083 0301 	eor.w	r3, r3, #1
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d108      	bne.n	80125d8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80125c6:	7bbb      	ldrb	r3, [r7, #14]
 80125c8:	f083 0301 	eor.w	r3, r3, #1
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00f      	beq.n	80125f2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d00c      	beq.n	80125f2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	7bba      	ldrb	r2, [r7, #14]
 80125dc:	4611      	mov	r1, r2
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ff ff3c 	bl	801245c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	3314      	adds	r3, #20
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4610      	mov	r0, r2
 80125f0:	4798      	blx	r3
        }
        if (newPressedValue && action)
 80125f2:	7bbb      	ldrb	r3, [r7, #14]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d019      	beq.n	801262c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d015      	beq.n	801262c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	330c      	adds	r3, #12
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4610      	mov	r0, r2
 8012610:	4798      	blx	r3
 8012612:	4603      	mov	r3, r0
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	3308      	adds	r3, #8
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	6879      	ldr	r1, [r7, #4]
 8012628:	4610      	mov	r0, r2
 801262a:	4798      	blx	r3
            }
        }
    }
 801262c:	bf00      	nop
 801262e:	3710      	adds	r7, #16
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4618      	mov	r0, r3
 8012640:	f7ff fc2a 	bl	8011e98 <_ZN8touchgfx6WidgetC1Ev>
 8012644:	4a0d      	ldr	r2, [pc, #52]	; (801267c <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	22ff      	movs	r2, #255	; 0xff
 801264e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3328      	adds	r3, #40	; 0x28
 8012656:	2100      	movs	r1, #0
 8012658:	4618      	mov	r0, r3
 801265a:	f7ff f9b6 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	332c      	adds	r3, #44	; 0x2c
 8012662:	2100      	movs	r1, #0
 8012664:	4618      	mov	r0, r3
 8012666:	f7ff f9b0 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	0802bd78 	.word	0x0802bd78

08012680 <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	4a05      	ldr	r2, [pc, #20]	; (80126a0 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff fc13 	bl	8011ebc <_ZN8touchgfx6WidgetD1Ev>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	0802bd78 	.word	0x0802bd78

080126a4 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff ffe7 	bl	8012680 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80126b2:	2134      	movs	r1, #52	; 0x34
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f015 fc14 	bl	8027ee2 <_ZdlPvj>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	683a      	ldr	r2, [r7, #0]
 80126d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80126d4:	bf00      	nop
 80126d6:	370c      	adds	r7, #12
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	460b      	mov	r3, r1
 8012706:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	78fa      	ldrb	r2, [r7, #3]
 801270c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8012710:	bf00      	nop
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	460b      	mov	r3, r1
 8012726:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	78fa      	ldrb	r2, [r7, #3]
 801272c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 8012730:	bf00      	nop
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr

0801273c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	4a05      	ldr	r2, [pc, #20]	; (801275c <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	601a      	str	r2, [r3, #0]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f7ff fb3b 	bl	8011dc8 <_ZN8touchgfx6ScreenD1Ev>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4618      	mov	r0, r3
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	08029d6c 	.word	0x08029d6c

08012760 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff ffe7 	bl	801273c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801276e:	2140      	movs	r1, #64	; 0x40
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f015 fbb6 	bl	8027ee2 <_ZdlPvj>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4618      	mov	r0, r3
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	4a8a      	ldr	r2, [pc, #552]	; (80129b4 <_ZN12MainViewBaseD1Ev+0x234>)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	601a      	str	r2, [r3, #0]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8012794:	4618      	mov	r0, r3
 8012796:	f001 ff97 	bl	80146c8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80127a0:	4618      	mov	r0, r3
 80127a2:	f001 fde5 	bl	8014370 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80127ac:	4618      	mov	r0, r3
 80127ae:	f001 ffad 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ff fced 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80127c4:	4618      	mov	r0, r3
 80127c6:	f001 ffa1 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff fce1 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80127dc:	4618      	mov	r0, r3
 80127de:	f001 ff95 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80127e8:	4618      	mov	r0, r3
 80127ea:	f001 ff8f 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80127f4:	4618      	mov	r0, r3
 80127f6:	f001 ff89 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012800:	4618      	mov	r0, r3
 8012802:	f7ff fcc9 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801280c:	4618      	mov	r0, r3
 801280e:	f001 ff7d 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012818:	4618      	mov	r0, r3
 801281a:	f005 fd99 	bl	8018350 <_ZN8touchgfx13ImageProgressD1Ev>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8012824:	4618      	mov	r0, r3
 8012826:	f001 ff71 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8012830:	4618      	mov	r0, r3
 8012832:	f001 ffaf 	bl	8014794 <_ZN8touchgfx13PainterRGB888D1Ev>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801283c:	4618      	mov	r0, r3
 801283e:	f001 ff87 	bl	8014750 <_ZN8touchgfx4LineD1Ev>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8012848:	4618      	mov	r0, r3
 801284a:	f001 ffa3 	bl	8014794 <_ZN8touchgfx13PainterRGB888D1Ev>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012854:	4618      	mov	r0, r3
 8012856:	f001 ff7b 	bl	8014750 <_ZN8touchgfx4LineD1Ev>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012860:	4618      	mov	r0, r3
 8012862:	f005 fc75 	bl	8018150 <_ZN8touchgfx11BoxProgressD1Ev>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801286c:	4618      	mov	r0, r3
 801286e:	f7ff fc93 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012878:	4618      	mov	r0, r3
 801287a:	f001 ff47 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012884:	4618      	mov	r0, r3
 8012886:	f001 ff41 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012890:	4618      	mov	r0, r3
 8012892:	f7ff fc81 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff fc7b 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80128a8:	4618      	mov	r0, r3
 80128aa:	f001 ff2f 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80128b4:	4618      	mov	r0, r3
 80128b6:	f001 ff29 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff fc69 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7ff fc63 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80128d8:	4618      	mov	r0, r3
 80128da:	f001 ff5b 	bl	8014794 <_ZN8touchgfx13PainterRGB888D1Ev>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80128e4:	4618      	mov	r0, r3
 80128e6:	f001 ff33 	bl	8014750 <_ZN8touchgfx4LineD1Ev>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80128f0:	4618      	mov	r0, r3
 80128f2:	f001 ff0b 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80128fc:	4618      	mov	r0, r3
 80128fe:	f001 ff05 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012908:	4618      	mov	r0, r3
 801290a:	f001 feff 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012914:	4618      	mov	r0, r3
 8012916:	f001 fef9 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012920:	4618      	mov	r0, r3
 8012922:	f001 fef3 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801292c:	4618      	mov	r0, r3
 801292e:	f001 feed 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012938:	4618      	mov	r0, r3
 801293a:	f001 fee7 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012944:	4618      	mov	r0, r3
 8012946:	f001 fee1 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012950:	4618      	mov	r0, r3
 8012952:	f7ff fd1d 	bl	8012390 <_ZN8touchgfx5ImageD1Ev>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801295c:	4618      	mov	r0, r3
 801295e:	f001 fed5 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012968:	4618      	mov	r0, r3
 801296a:	f001 fecf 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012974:	4618      	mov	r0, r3
 8012976:	f7ff fc0f 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	33d8      	adds	r3, #216	; 0xd8
 801297e:	4618      	mov	r0, r3
 8012980:	f7ff fc0a 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	33a4      	adds	r3, #164	; 0xa4
 8012988:	4618      	mov	r0, r3
 801298a:	f7ff fc05 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	3370      	adds	r3, #112	; 0x70
 8012992:	4618      	mov	r0, r3
 8012994:	f7ff fc00 	bl	8012198 <_ZN8touchgfx8TextAreaD1Ev>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	3340      	adds	r3, #64	; 0x40
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff faf3 	bl	8011f88 <_ZN8touchgfx3BoxD1Ev>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7ff fec9 	bl	801273c <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	08029c8c 	.word	0x08029c8c

080129b8 <_ZN12MainViewBaseD0Ev>:
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f7ff fedd 	bl	8012780 <_ZN12MainViewBaseD1Ev>
 80129c6:	f642 0144 	movw	r1, #10308	; 0x2844
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f015 fa89 	bl	8027ee2 <_ZdlPvj>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	4618      	mov	r0, r3
 80129d4:	3708      	adds	r7, #8
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80129e2:	f009 fa7b 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 80129e6:	4603      	mov	r3, r0
    }
 80129e8:	4618      	mov	r0, r3
 80129ea:	3708      	adds	r7, #8
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80129f0:	b590      	push	{r4, r7, lr}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	4603      	mov	r3, r0
 80129f8:	71fb      	strb	r3, [r7, #7]
 80129fa:	460b      	mov	r3, r1
 80129fc:	71bb      	strb	r3, [r7, #6]
 80129fe:	4613      	mov	r3, r2
 8012a00:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8012a02:	f7fd fe49 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d105      	bne.n	8012a18 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	; (8012a38 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8012a0e:	4a0b      	ldr	r2, [pc, #44]	; (8012a3c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8012a10:	2138      	movs	r1, #56	; 0x38
 8012a12:	480b      	ldr	r0, [pc, #44]	; (8012a40 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8012a14:	f015 fa90 	bl	8027f38 <__assert_func>
 8012a18:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8012a1a:	f7fd fe49 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8012a1e:	6803      	ldr	r3, [r0, #0]
 8012a20:	332c      	adds	r3, #44	; 0x2c
 8012a22:	681c      	ldr	r4, [r3, #0]
 8012a24:	797b      	ldrb	r3, [r7, #5]
 8012a26:	79ba      	ldrb	r2, [r7, #6]
 8012a28:	79f9      	ldrb	r1, [r7, #7]
 8012a2a:	47a0      	blx	r4
 8012a2c:	4603      	mov	r3, r0
    }
 8012a2e:	4618      	mov	r0, r3
 8012a30:	370c      	adds	r7, #12
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd90      	pop	{r4, r7, pc}
 8012a36:	bf00      	nop
 8012a38:	080293cc 	.word	0x080293cc
 8012a3c:	08029fbc 	.word	0x08029fbc
 8012a40:	08029410 	.word	0x08029410

08012a44 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 8012a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a48:	b0c2      	sub	sp, #264	; 0x108
 8012a4a:	af02      	add	r7, sp, #8
 8012a4c:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f001 fcb5 	bl	80143c0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8012a56:	4ada      	ldr	r2, [pc, #872]	; (8012dc0 <_ZN12MainViewBaseC1Ev+0x37c>)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	601a      	str	r2, [r3, #0]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	3340      	adds	r3, #64	; 0x40
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7ff fa71 	bl	8011f48 <_ZN8touchgfx3BoxC1Ev>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	3370      	adds	r3, #112	; 0x70
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7ff fae2 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	33a4      	adds	r3, #164	; 0xa4
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff fadd 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	33d8      	adds	r3, #216	; 0xd8
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7ff fad8 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7ff fad2 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ff fbd4 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7ff fbce 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 8012aae:	f107 030c 	add.w	r3, r7, #12
 8012ab2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7fe ffd9 	bl	8011a6e <_ZN8touchgfx6BitmapC1Et>
 8012abc:	f107 030c 	add.w	r3, r7, #12
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f7ff fbe2 	bl	801228c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7ff fbb8 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff fbb2 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7ff fbac 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7ff fba6 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7ff fba0 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7ff fb9a 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7ff fb94 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff fb8e 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f007 fa52 	bl	8019fd8 <_ZN8touchgfx4LineC1Ev>
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8012b3a:	f107 0310 	add.w	r3, r7, #16
 8012b3e:	2100      	movs	r1, #0
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fe ff42 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 8012b46:	22ff      	movs	r2, #255	; 0xff
 8012b48:	6939      	ldr	r1, [r7, #16]
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f007 f836 	bl	8019bbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7ff fa6c 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7ff fa66 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff fb68 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff fb62 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7ff fa54 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff fa4e 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7ff fb50 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff fb4a 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff fa3c 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f005 fad8 	bl	8018178 <_ZN8touchgfx11BoxProgressC1Ev>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f007 fa02 	bl	8019fd8 <_ZN8touchgfx4LineC1Ev>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8012bda:	f107 0314 	add.w	r3, r7, #20
 8012bde:	2100      	movs	r1, #0
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fe fef2 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 8012be6:	22ff      	movs	r2, #255	; 0xff
 8012be8:	6979      	ldr	r1, [r7, #20]
 8012bea:	4620      	mov	r0, r4
 8012bec:	f006 ffe6 	bl	8019bbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f007 f9ee 	bl	8019fd8 <_ZN8touchgfx4LineC1Ev>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 8012c02:	f107 0318 	add.w	r3, r7, #24
 8012c06:	2100      	movs	r1, #0
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7fe fede 	bl	80119ca <_ZN8touchgfx9colortypeC1Em>
 8012c0e:	22ff      	movs	r2, #255	; 0xff
 8012c10:	69b9      	ldr	r1, [r7, #24]
 8012c12:	4620      	mov	r0, r4
 8012c14:	f006 ffd2 	bl	8019bbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff fb10 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f005 fbba 	bl	80183a4 <_ZN8touchgfx13ImageProgressC1Ev>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7ff fb04 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7ff f9f6 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ff faf8 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff faf2 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7ff faec 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7ff f9de 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff fae0 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff f9d2 	bl	8012034 <_ZN8touchgfx8TextAreaC1Ev>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff fad4 	bl	8012244 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f001 fba2 	bl	80143ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 8012cae:	4b45      	ldr	r3, [pc, #276]	; (8012dc4 <_ZN12MainViewBaseC1Ev+0x380>)
 8012cb0:	61fb      	str	r3, [r7, #28]
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	623b      	str	r3, [r7, #32]
 8012cb6:	f107 031c 	add.w	r3, r7, #28
 8012cba:	cb0c      	ldmia	r3, {r2, r3}
 8012cbc:	6879      	ldr	r1, [r7, #4]
 8012cbe:	f001 fbdf 	bl	8014480 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8012cc8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f008 f8c5 	bl	801ae5c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 800, 480);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8012cd8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012cdc:	9300      	str	r3, [sp, #0]
 8012cde:	f44f 7348 	mov.w	r3, #800	; 0x320
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	f7fd fc8f 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	2100      	movs	r1, #0
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	f7ff fe7b 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	4620      	mov	r0, r4
 8012d00:	f7ff f964 	bl	8011fcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	3370      	adds	r3, #112	; 0x70
 8012d08:	22da      	movs	r2, #218	; 0xda
 8012d0a:	21e0      	movs	r1, #224	; 0xe0
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7fe ff2b 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012d18:	2200      	movs	r2, #0
 8012d1a:	21dc      	movs	r1, #220	; 0xdc
 8012d1c:	20ff      	movs	r0, #255	; 0xff
 8012d1e:	f7ff fe67 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d22:	4603      	mov	r3, r0
 8012d24:	4619      	mov	r1, r3
 8012d26:	4620      	mov	r0, r4
 8012d28:	f7ff f9c7 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	3370      	adds	r3, #112	; 0x70
 8012d30:	2100      	movs	r1, #0
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7ff fa14 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8012d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d42:	211a      	movs	r1, #26
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff f94f 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012d4a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f007 fceb 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	33a4      	adds	r3, #164	; 0xa4
 8012d56:	227e      	movs	r2, #126	; 0x7e
 8012d58:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fe ff03 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8012d68:	2200      	movs	r2, #0
 8012d6a:	21dc      	movs	r1, #220	; 0xdc
 8012d6c:	20ff      	movs	r0, #255	; 0xff
 8012d6e:	f7ff fe3f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012d72:	4603      	mov	r3, r0
 8012d74:	4619      	mov	r1, r3
 8012d76:	4620      	mov	r0, r4
 8012d78:	f7ff f99f 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	33a4      	adds	r3, #164	; 0xa4
 8012d80:	2100      	movs	r1, #0
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7ff f9ec 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8012d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d92:	2119      	movs	r1, #25
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff f927 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012d9a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f007 fcc3 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	33d8      	adds	r3, #216	; 0xd8
 8012da6:	2288      	movs	r2, #136	; 0x88
 8012da8:	21d8      	movs	r1, #216	; 0xd8
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe fedc 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8012db6:	2200      	movs	r2, #0
 8012db8:	21dc      	movs	r1, #220	; 0xdc
 8012dba:	20ff      	movs	r0, #255	; 0xff
 8012dbc:	e004      	b.n	8012dc8 <_ZN12MainViewBaseC1Ev+0x384>
 8012dbe:	bf00      	nop
 8012dc0:	08029c8c 	.word	0x08029c8c
 8012dc4:	08014345 	.word	0x08014345
 8012dc8:	f7ff fe12 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	4619      	mov	r1, r3
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f7ff f972 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	33d8      	adds	r3, #216	; 0xd8
 8012dda:	2100      	movs	r1, #0
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff f9bf 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8012de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dec:	2113      	movs	r1, #19
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7ff f8fa 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012df4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8012df6:	4620      	mov	r0, r4
 8012df8:	f007 fc96 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012e02:	227e      	movs	r2, #126	; 0x7e
 8012e04:	2174      	movs	r1, #116	; 0x74
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fe feae 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8012e12:	2200      	movs	r2, #0
 8012e14:	21dc      	movs	r1, #220	; 0xdc
 8012e16:	20ff      	movs	r0, #255	; 0xff
 8012e18:	f7ff fdea 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7ff f94a 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff f996 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8012e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e3e:	2112      	movs	r1, #18
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7ff f8d1 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012e46:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f007 fc6d 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8012e54:	233e      	movs	r3, #62	; 0x3e
 8012e56:	9300      	str	r3, [sp, #0]
 8012e58:	2372      	movs	r3, #114	; 0x72
 8012e5a:	224d      	movs	r2, #77	; 0x4d
 8012e5c:	21bb      	movs	r1, #187	; 0xbb
 8012e5e:	f7fd fbd3 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012e68:	22ff      	movs	r2, #255	; 0xff
 8012e6a:	21ff      	movs	r1, #255	; 0xff
 8012e6c:	20ff      	movs	r0, #255	; 0xff
 8012e6e:	f7ff fdbf 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012e72:	4603      	mov	r3, r0
 8012e74:	4619      	mov	r1, r3
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7ff f91f 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e82:	2100      	movs	r1, #0
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff f96b 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 8012e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012e94:	2103      	movs	r1, #3
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7ff f8a6 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff f8b1 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	4ae1      	ldr	r2, [pc, #900]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8012eaa:	2105      	movs	r1, #5
 8012eac:	4620      	mov	r0, r4
 8012eae:	f00b f8ab 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	f7ff f9d5 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ed0:	2102      	movs	r1, #2
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7ff f888 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012ed8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8012eda:	4620      	mov	r0, r4
 8012edc:	f007 fc24 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8012ee6:	2329      	movs	r3, #41	; 0x29
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	2347      	movs	r3, #71	; 0x47
 8012eec:	2255      	movs	r2, #85	; 0x55
 8012eee:	2166      	movs	r1, #102	; 0x66
 8012ef0:	f7fd fb8a 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8012efa:	22ff      	movs	r2, #255	; 0xff
 8012efc:	21ff      	movs	r1, #255	; 0xff
 8012efe:	20ff      	movs	r0, #255	; 0xff
 8012f00:	f7ff fd76 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012f04:	4603      	mov	r3, r0
 8012f06:	4619      	mov	r1, r3
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f7ff f8d6 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012f14:	2100      	movs	r1, #0
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7ff f922 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 8012f22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012f26:	2101      	movs	r1, #1
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff f85d 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7ff f868 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	4abd      	ldr	r2, [pc, #756]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8012f3c:	2105      	movs	r1, #5
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f00b f862 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 8012f50:	4619      	mov	r1, r3
 8012f52:	4610      	mov	r0, r2
 8012f54:	f7ff f98c 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8012f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012f62:	2100      	movs	r1, #0
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7ff f83f 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012f6a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f007 fbda 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012f7a:	223f      	movs	r2, #63	; 0x3f
 8012f7c:	21b3      	movs	r1, #179	; 0xb3
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fe fdf2 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7fe fe5c 	bl	8011c4a <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8012f98:	230e      	movs	r3, #14
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	2312      	movs	r3, #18
 8012f9e:	223f      	movs	r2, #63	; 0x3f
 8012fa0:	2136      	movs	r1, #54	; 0x36
 8012fa2:	f7fd fb31 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8012fac:	22ff      	movs	r2, #255	; 0xff
 8012fae:	21ff      	movs	r1, #255	; 0xff
 8012fb0:	20ff      	movs	r0, #255	; 0xff
 8012fb2:	f7ff fd1d 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7ff f87d 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7ff f8c9 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8012fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012fd8:	2126      	movs	r1, #38	; 0x26
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7ff f804 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8012fe0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff f80f 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8012fea:	4603      	mov	r3, r0
 8012fec:	4a90      	ldr	r2, [pc, #576]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8012fee:	2102      	movs	r1, #2
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f00b f809 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8013002:	4619      	mov	r1, r3
 8013004:	4610      	mov	r0, r2
 8013006:	f7ff f933 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013014:	2104      	movs	r1, #4
 8013016:	4618      	mov	r0, r3
 8013018:	f7fe ffe6 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801301c:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8013020:	4620      	mov	r0, r4
 8013022:	f007 fb81 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f503 7005 	add.w	r0, r3, #532	; 0x214
 801302c:	230e      	movs	r3, #14
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	2312      	movs	r3, #18
 8013032:	223f      	movs	r2, #63	; 0x3f
 8013034:	2173      	movs	r1, #115	; 0x73
 8013036:	f7fd fae7 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013040:	22ff      	movs	r2, #255	; 0xff
 8013042:	21ff      	movs	r1, #255	; 0xff
 8013044:	20ff      	movs	r0, #255	; 0xff
 8013046:	f7ff fcd3 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801304a:	4603      	mov	r3, r0
 801304c:	4619      	mov	r1, r3
 801304e:	4620      	mov	r0, r4
 8013050:	f7ff f833 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f503 7305 	add.w	r3, r3, #532	; 0x214
 801305a:	2100      	movs	r1, #0
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff f87f 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 8013068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801306c:	2127      	movs	r1, #39	; 0x27
 801306e:	4618      	mov	r0, r3
 8013070:	f7fe ffba 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013078:	4618      	mov	r0, r3
 801307a:	f7fe ffc5 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801307e:	4603      	mov	r3, r0
 8013080:	4a6b      	ldr	r2, [pc, #428]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013082:	2102      	movs	r1, #2
 8013084:	4620      	mov	r0, r4
 8013086:	f00a ffbf 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8013096:	4619      	mov	r1, r3
 8013098:	4610      	mov	r0, r2
 801309a:	f7ff f8e9 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f503 7405 	add.w	r4, r3, #532	; 0x214
 80130a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80130a8:	2105      	movs	r1, #5
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe ff9c 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80130b0:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 80130b4:	4620      	mov	r0, r4
 80130b6:	f007 fb37 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80130c0:	230e      	movs	r3, #14
 80130c2:	9300      	str	r3, [sp, #0]
 80130c4:	2312      	movs	r3, #18
 80130c6:	223e      	movs	r2, #62	; 0x3e
 80130c8:	21ad      	movs	r1, #173	; 0xad
 80130ca:	f7fd fa9d 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 80130d4:	22ff      	movs	r2, #255	; 0xff
 80130d6:	21ff      	movs	r1, #255	; 0xff
 80130d8:	20ff      	movs	r0, #255	; 0xff
 80130da:	f7ff fc89 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80130de:	4603      	mov	r3, r0
 80130e0:	4619      	mov	r1, r3
 80130e2:	4620      	mov	r0, r4
 80130e4:	f7fe ffe9 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80130ee:	2100      	movs	r1, #0
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7ff f835 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 80130fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013100:	2128      	movs	r1, #40	; 0x28
 8013102:	4618      	mov	r0, r3
 8013104:	f7fe ff70 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013108:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe ff7b 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013112:	4603      	mov	r3, r0
 8013114:	4a46      	ldr	r2, [pc, #280]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013116:	2102      	movs	r1, #2
 8013118:	4620      	mov	r0, r4
 801311a:	f00a ff75 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 801312a:	4619      	mov	r1, r3
 801312c:	4610      	mov	r0, r2
 801312e:	f7ff f89f 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801313c:	2106      	movs	r1, #6
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe ff52 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013144:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8013148:	4620      	mov	r0, r4
 801314a:	f007 faed 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013154:	230e      	movs	r3, #14
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	2312      	movs	r3, #18
 801315a:	223e      	movs	r2, #62	; 0x3e
 801315c:	21e7      	movs	r1, #231	; 0xe7
 801315e:	f7fd fa53 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013168:	22ff      	movs	r2, #255	; 0xff
 801316a:	21ff      	movs	r1, #255	; 0xff
 801316c:	20ff      	movs	r0, #255	; 0xff
 801316e:	f7ff fc3f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013172:	4603      	mov	r3, r0
 8013174:	4619      	mov	r1, r3
 8013176:	4620      	mov	r0, r4
 8013178:	f7fe ff9f 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013182:	2100      	movs	r1, #0
 8013184:	4618      	mov	r0, r3
 8013186:	f7fe ffeb 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8013190:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013194:	2129      	movs	r1, #41	; 0x29
 8013196:	4618      	mov	r0, r3
 8013198:	f7fe ff26 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801319c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fe ff31 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 80131a6:	4603      	mov	r3, r0
 80131a8:	4a21      	ldr	r2, [pc, #132]	; (8013230 <_ZN12MainViewBaseC1Ev+0x7ec>)
 80131aa:	2102      	movs	r1, #2
 80131ac:	4620      	mov	r0, r4
 80131ae:	f00a ff2b 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f503 7221 	add.w	r2, r3, #644	; 0x284
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80131be:	4619      	mov	r1, r3
 80131c0:	4610      	mov	r0, r2
 80131c2:	f7ff f855 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f503 7421 	add.w	r4, r3, #644	; 0x284
 80131cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80131d0:	2107      	movs	r1, #7
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7fe ff08 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80131d8:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80131dc:	4620      	mov	r0, r4
 80131de:	f007 faa3 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 80131e8:	230e      	movs	r3, #14
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	2312      	movs	r3, #18
 80131ee:	223f      	movs	r2, #63	; 0x3f
 80131f0:	f44f 7192 	mov.w	r1, #292	; 0x124
 80131f4:	f7fd fa08 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80131fe:	22ff      	movs	r2, #255	; 0xff
 8013200:	21ff      	movs	r1, #255	; 0xff
 8013202:	20ff      	movs	r0, #255	; 0xff
 8013204:	f7ff fbf4 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013208:	4603      	mov	r3, r0
 801320a:	4619      	mov	r1, r3
 801320c:	4620      	mov	r0, r4
 801320e:	f7fe ff54 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013218:	2100      	movs	r1, #0
 801321a:	4618      	mov	r0, r3
 801321c:	f7fe ffa0 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 8013226:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801322a:	212a      	movs	r1, #42	; 0x2a
 801322c:	4618      	mov	r0, r3
 801322e:	e001      	b.n	8013234 <_ZN12MainViewBaseC1Ev+0x7f0>
 8013230:	08029450 	.word	0x08029450
 8013234:	f7fe fed8 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801323c:	4618      	mov	r0, r3
 801323e:	f7fe fee3 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013242:	4603      	mov	r3, r0
 8013244:	4ae2      	ldr	r2, [pc, #904]	; (80135d0 <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013246:	2102      	movs	r1, #2
 8013248:	4620      	mov	r0, r4
 801324a:	f00a fedd 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 801325a:	4619      	mov	r1, r3
 801325c:	4610      	mov	r0, r2
 801325e:	f7ff f807 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801326c:	2108      	movs	r1, #8
 801326e:	4618      	mov	r0, r3
 8013270:	f7fe feba 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013274:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8013278:	4620      	mov	r0, r4
 801327a:	f007 fa55 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8013284:	230e      	movs	r3, #14
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	2312      	movs	r3, #18
 801328a:	223f      	movs	r2, #63	; 0x3f
 801328c:	f240 115d 	movw	r1, #349	; 0x15d
 8013290:	f7fd f9ba 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801329a:	22ff      	movs	r2, #255	; 0xff
 801329c:	21ff      	movs	r1, #255	; 0xff
 801329e:	20ff      	movs	r0, #255	; 0xff
 80132a0:	f7ff fba6 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80132a4:	4603      	mov	r3, r0
 80132a6:	4619      	mov	r1, r3
 80132a8:	4620      	mov	r0, r4
 80132aa:	f7fe ff06 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80132b4:	2100      	movs	r1, #0
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe ff52 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 80132c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132c6:	212b      	movs	r1, #43	; 0x2b
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fe fe8d 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80132ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe fe98 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 80132d8:	4603      	mov	r3, r0
 80132da:	4abd      	ldr	r2, [pc, #756]	; (80135d0 <_ZN12MainViewBaseC1Ev+0xb8c>)
 80132dc:	2102      	movs	r1, #2
 80132de:	4620      	mov	r0, r4
 80132e0:	f00a fe92 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80132f0:	4619      	mov	r1, r3
 80132f2:	4610      	mov	r0, r2
 80132f4:	f7fe ffbc 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80132fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013302:	2109      	movs	r1, #9
 8013304:	4618      	mov	r0, r3
 8013306:	f7fe fe6f 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801330a:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 801330e:	4620      	mov	r0, r4
 8013310:	f007 fa0a 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 801331a:	230f      	movs	r3, #15
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	2312      	movs	r3, #18
 8013320:	223e      	movs	r2, #62	; 0x3e
 8013322:	f240 119b 	movw	r1, #411	; 0x19b
 8013326:	f7fd f96f 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013330:	22ff      	movs	r2, #255	; 0xff
 8013332:	21ff      	movs	r1, #255	; 0xff
 8013334:	20ff      	movs	r0, #255	; 0xff
 8013336:	f7ff fb5b 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801333a:	4603      	mov	r3, r0
 801333c:	4619      	mov	r1, r3
 801333e:	4620      	mov	r0, r4
 8013340:	f7fe febb 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801334a:	2100      	movs	r1, #0
 801334c:	4618      	mov	r0, r3
 801334e:	f7fe ff07 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 8013358:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801335c:	212c      	movs	r1, #44	; 0x2c
 801335e:	4618      	mov	r0, r3
 8013360:	f7fe fe42 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013364:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013368:	4618      	mov	r0, r3
 801336a:	f7fe fe4d 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801336e:	4603      	mov	r3, r0
 8013370:	4a97      	ldr	r2, [pc, #604]	; (80135d0 <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013372:	2102      	movs	r1, #2
 8013374:	4620      	mov	r0, r4
 8013376:	f00a fe47 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 8013386:	4619      	mov	r1, r3
 8013388:	4610      	mov	r0, r2
 801338a:	f7fe ff71 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013394:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013398:	210a      	movs	r1, #10
 801339a:	4618      	mov	r0, r3
 801339c:	f7fe fe24 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80133a0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80133a4:	4620      	mov	r0, r4
 80133a6:	f007 f9bf 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80133b0:	230e      	movs	r3, #14
 80133b2:	9300      	str	r3, [sp, #0]
 80133b4:	2312      	movs	r3, #18
 80133b6:	223e      	movs	r2, #62	; 0x3e
 80133b8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80133bc:	f7fd f924 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80133c6:	22ff      	movs	r2, #255	; 0xff
 80133c8:	21ff      	movs	r1, #255	; 0xff
 80133ca:	20ff      	movs	r0, #255	; 0xff
 80133cc:	f7ff fb10 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80133d0:	4603      	mov	r3, r0
 80133d2:	4619      	mov	r1, r3
 80133d4:	4620      	mov	r0, r4
 80133d6:	f7fe fe70 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80133e0:	2100      	movs	r1, #0
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fe febc 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 80133ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80133f2:	212d      	movs	r1, #45	; 0x2d
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fe fdf7 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80133fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fe fe02 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013404:	4603      	mov	r3, r0
 8013406:	4a72      	ldr	r2, [pc, #456]	; (80135d0 <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013408:	2102      	movs	r1, #2
 801340a:	4620      	mov	r0, r4
 801340c:	f00a fdfc 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 801341c:	4619      	mov	r1, r3
 801341e:	4610      	mov	r0, r2
 8013420:	f7fe ff26 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f503 7459 	add.w	r4, r3, #868	; 0x364
 801342a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801342e:	210b      	movs	r1, #11
 8013430:	4618      	mov	r0, r3
 8013432:	f7fe fdd9 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013436:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 801343a:	4620      	mov	r0, r4
 801343c:	f007 f974 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8013446:	2305      	movs	r3, #5
 8013448:	9300      	str	r3, [sp, #0]
 801344a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 801344e:	223a      	movs	r2, #58	; 0x3a
 8013450:	f06f 0101 	mvn.w	r1, #1
 8013454:	f7fd f8d8 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801345e:	22ff      	movs	r2, #255	; 0xff
 8013460:	21ff      	movs	r1, #255	; 0xff
 8013462:	20ff      	movs	r0, #255	; 0xff
 8013464:	f7ff fac4 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013468:	4603      	mov	r3, r0
 801346a:	22ff      	movs	r2, #255	; 0xff
 801346c:	4619      	mov	r1, r3
 801346e:	4620      	mov	r0, r4
 8013470:	f006 fb89 	bl	8019b86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013480:	4619      	mov	r1, r3
 8013482:	4610      	mov	r0, r2
 8013484:	f006 fbe8 	bl	8019c58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801348e:	2203      	movs	r2, #3
 8013490:	2100      	movs	r1, #0
 8013492:	4618      	mov	r0, r3
 8013494:	f001 f814 	bl	80144c0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801349e:	2203      	movs	r2, #3
 80134a0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80134a4:	4618      	mov	r0, r3
 80134a6:	f001 f831 	bl	801450c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80134b0:	2102      	movs	r1, #2
 80134b2:	4618      	mov	r0, r3
 80134b4:	f001 f850 	bl	8014558 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80134be:	2101      	movs	r1, #1
 80134c0:	4618      	mov	r0, r3
 80134c2:	f006 fee3 	bl	801a28c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80134cc:	227e      	movs	r2, #126	; 0x7e
 80134ce:	212b      	movs	r1, #43	; 0x2b
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fe fb49 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80134dc:	2200      	movs	r2, #0
 80134de:	21dc      	movs	r1, #220	; 0xdc
 80134e0:	20ff      	movs	r0, #255	; 0xff
 80134e2:	f7ff fa85 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80134e6:	4603      	mov	r3, r0
 80134e8:	4619      	mov	r1, r3
 80134ea:	4620      	mov	r0, r4
 80134ec:	f7fe fde5 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80134f6:	2100      	movs	r1, #0
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe fe31 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013504:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013508:	2110      	movs	r1, #16
 801350a:	4618      	mov	r0, r3
 801350c:	f7fe fd6c 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013510:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8013514:	4620      	mov	r0, r4
 8013516:	f007 f907 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8013520:	22c1      	movs	r2, #193	; 0xc1
 8013522:	212a      	movs	r1, #42	; 0x2a
 8013524:	4618      	mov	r0, r3
 8013526:	f7fe fb1f 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013530:	2200      	movs	r2, #0
 8013532:	21dc      	movs	r1, #220	; 0xdc
 8013534:	20ff      	movs	r0, #255	; 0xff
 8013536:	f7ff fa5b 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801353a:	4603      	mov	r3, r0
 801353c:	4619      	mov	r1, r3
 801353e:	4620      	mov	r0, r4
 8013540:	f7fe fdbb 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801354a:	2100      	movs	r1, #0
 801354c:	4618      	mov	r0, r3
 801354e:	f7fe fe07 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8013558:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801355c:	2111      	movs	r1, #17
 801355e:	4618      	mov	r0, r3
 8013560:	f7fe fd42 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013564:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8013568:	4620      	mov	r0, r4
 801356a:	f007 f8dd 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8013574:	232a      	movs	r3, #42	; 0x2a
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	233c      	movs	r3, #60	; 0x3c
 801357a:	2255      	movs	r2, #85	; 0x55
 801357c:	2119      	movs	r1, #25
 801357e:	f7fd f843 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8013588:	22ff      	movs	r2, #255	; 0xff
 801358a:	21ff      	movs	r1, #255	; 0xff
 801358c:	20ff      	movs	r0, #255	; 0xff
 801358e:	f7ff fa2f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013592:	4603      	mov	r3, r0
 8013594:	4619      	mov	r1, r3
 8013596:	4620      	mov	r0, r4
 8013598:	f7fe fd8f 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80135a2:	2100      	movs	r1, #0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7fe fddb 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 80135b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80135b4:	210d      	movs	r1, #13
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fe fd16 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80135bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe fd21 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 80135c6:	4603      	mov	r3, r0
 80135c8:	4a01      	ldr	r2, [pc, #4]	; (80135d0 <_ZN12MainViewBaseC1Ev+0xb8c>)
 80135ca:	2105      	movs	r1, #5
 80135cc:	4620      	mov	r0, r4
 80135ce:	e001      	b.n	80135d4 <_ZN12MainViewBaseC1Ev+0xb90>
 80135d0:	08029450 	.word	0x08029450
 80135d4:	f00a fd18 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 80135e4:	4619      	mov	r1, r3
 80135e6:	4610      	mov	r0, r2
 80135e8:	f7fe fe42 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80135f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80135f6:	210c      	movs	r1, #12
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fe fcf5 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80135fe:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8013602:	4620      	mov	r0, r4
 8013604:	f007 f890 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 801360e:	232a      	movs	r3, #42	; 0x2a
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	2343      	movs	r3, #67	; 0x43
 8013614:	2299      	movs	r2, #153	; 0x99
 8013616:	2119      	movs	r1, #25
 8013618:	f7fc fff6 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013622:	22ff      	movs	r2, #255	; 0xff
 8013624:	21ff      	movs	r1, #255	; 0xff
 8013626:	20ff      	movs	r0, #255	; 0xff
 8013628:	f7ff f9e2 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801362c:	4603      	mov	r3, r0
 801362e:	4619      	mov	r1, r3
 8013630:	4620      	mov	r0, r4
 8013632:	f7fe fd42 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 801363c:	2100      	movs	r1, #0
 801363e:	4618      	mov	r0, r3
 8013640:	f7fe fd8e 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 801364a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801364e:	210f      	movs	r1, #15
 8013650:	4618      	mov	r0, r3
 8013652:	f7fe fcc9 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801365a:	4618      	mov	r0, r3
 801365c:	f7fe fcd4 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013660:	4603      	mov	r3, r0
 8013662:	4ae3      	ldr	r2, [pc, #908]	; (80139f0 <_ZN12MainViewBaseC1Ev+0xfac>)
 8013664:	2105      	movs	r1, #5
 8013666:	4620      	mov	r0, r4
 8013668:	f00a fcce 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8013678:	4619      	mov	r1, r3
 801367a:	4610      	mov	r0, r2
 801367c:	f7fe fdf8 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8013686:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801368a:	210e      	movs	r1, #14
 801368c:	4618      	mov	r0, r3
 801368e:	f7fe fcab 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013692:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8013696:	4620      	mov	r0, r4
 8013698:	f007 f846 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136a2:	22c1      	movs	r2, #193	; 0xc1
 80136a4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7fe fa5d 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80136b4:	2200      	movs	r2, #0
 80136b6:	21dc      	movs	r1, #220	; 0xdc
 80136b8:	20ff      	movs	r0, #255	; 0xff
 80136ba:	f7ff f999 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80136be:	4603      	mov	r3, r0
 80136c0:	4619      	mov	r1, r3
 80136c2:	4620      	mov	r0, r4
 80136c4:	f7fe fcf9 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136ce:	2100      	movs	r1, #0
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fe fd45 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80136dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80136e0:	2114      	movs	r1, #20
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fe fc80 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80136e8:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 80136ec:	4620      	mov	r0, r4
 80136ee:	f007 f81b 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80136f8:	22c1      	movs	r2, #193	; 0xc1
 80136fa:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe fa32 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f203 5434 	addw	r4, r3, #1332	; 0x534
 801370a:	2200      	movs	r2, #0
 801370c:	21dc      	movs	r1, #220	; 0xdc
 801370e:	20ff      	movs	r0, #255	; 0xff
 8013710:	f7ff f96e 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013714:	4603      	mov	r3, r0
 8013716:	4619      	mov	r1, r3
 8013718:	4620      	mov	r0, r4
 801371a:	f7fe fcce 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8013724:	2100      	movs	r1, #0
 8013726:	4618      	mov	r0, r3
 8013728:	f7fe fd1a 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8013732:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013736:	2115      	movs	r1, #21
 8013738:	4618      	mov	r0, r3
 801373a:	f7fe fc55 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801373e:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 8013742:	4620      	mov	r0, r4
 8013744:	f006 fff0 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 801374e:	232a      	movs	r3, #42	; 0x2a
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	234b      	movs	r3, #75	; 0x4b
 8013754:	2299      	movs	r2, #153	; 0x99
 8013756:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801375a:	f7fc ff55 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8013764:	22ff      	movs	r2, #255	; 0xff
 8013766:	21ff      	movs	r1, #255	; 0xff
 8013768:	20ff      	movs	r0, #255	; 0xff
 801376a:	f7ff f941 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801376e:	4603      	mov	r3, r0
 8013770:	4619      	mov	r1, r3
 8013772:	4620      	mov	r0, r4
 8013774:	f7fe fca1 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801377e:	2100      	movs	r1, #0
 8013780:	4618      	mov	r0, r3
 8013782:	f7fe fced 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 801378c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013790:	2117      	movs	r1, #23
 8013792:	4618      	mov	r0, r3
 8013794:	f7fe fc28 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013798:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801379c:	4618      	mov	r0, r3
 801379e:	f7fe fc33 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 80137a2:	4603      	mov	r3, r0
 80137a4:	4a92      	ldr	r2, [pc, #584]	; (80139f0 <_ZN12MainViewBaseC1Ev+0xfac>)
 80137a6:	2105      	movs	r1, #5
 80137a8:	4620      	mov	r0, r4
 80137aa:	f00a fc2d 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80137ba:	4619      	mov	r1, r3
 80137bc:	4610      	mov	r0, r2
 80137be:	f7fe fd57 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 80137c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80137cc:	2116      	movs	r1, #22
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7fe fc0a 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80137d4:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80137d8:	4620      	mov	r0, r4
 80137da:	f006 ffa5 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 80137e4:	2328      	movs	r3, #40	; 0x28
 80137e6:	9300      	str	r3, [sp, #0]
 80137e8:	2347      	movs	r3, #71	; 0x47
 80137ea:	2299      	movs	r2, #153	; 0x99
 80137ec:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80137f0:	f7fc ff0a 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 80137fa:	22ff      	movs	r2, #255	; 0xff
 80137fc:	21ff      	movs	r1, #255	; 0xff
 80137fe:	20ff      	movs	r0, #255	; 0xff
 8013800:	f7ff f8f6 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013804:	4603      	mov	r3, r0
 8013806:	4619      	mov	r1, r3
 8013808:	4620      	mov	r0, r4
 801380a:	f7fe fc56 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013814:	2100      	movs	r1, #0
 8013816:	4618      	mov	r0, r3
 8013818:	f7fe fca2 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 8013822:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013826:	2125      	movs	r1, #37	; 0x25
 8013828:	4618      	mov	r0, r3
 801382a:	f7fe fbdd 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801382e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013832:	4618      	mov	r0, r3
 8013834:	f7fe fbe8 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013838:	4603      	mov	r3, r0
 801383a:	4a6d      	ldr	r2, [pc, #436]	; (80139f0 <_ZN12MainViewBaseC1Ev+0xfac>)
 801383c:	2105      	movs	r1, #5
 801383e:	4620      	mov	r0, r4
 8013840:	f00a fbe2 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 8013850:	4619      	mov	r1, r3
 8013852:	4610      	mov	r0, r2
 8013854:	f7fe fd0c 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801385e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013862:	2118      	movs	r1, #24
 8013864:	4618      	mov	r0, r3
 8013866:	f7fe fbbf 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 801386a:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801386e:	4620      	mov	r0, r4
 8013870:	f006 ff5a 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 801387a:	22f0      	movs	r2, #240	; 0xf0
 801387c:	f240 1197 	movw	r1, #407	; 0x197
 8013880:	4618      	mov	r0, r3
 8013882:	f7fe f971 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 801388c:	2200      	movs	r2, #0
 801388e:	21dc      	movs	r1, #220	; 0xdc
 8013890:	20ff      	movs	r0, #255	; 0xff
 8013892:	f7ff f8ad 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013896:	4603      	mov	r3, r0
 8013898:	4619      	mov	r1, r3
 801389a:	4620      	mov	r0, r4
 801389c:	f7fe fc0d 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80138a6:	2100      	movs	r1, #0
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fe fc59 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80138b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80138b8:	211b      	movs	r1, #27
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fe fb94 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 80138c0:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80138c4:	4620      	mov	r0, r4
 80138c6:	f006 ff2f 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80138d0:	22e2      	movs	r2, #226	; 0xe2
 80138d2:	f240 116f 	movw	r1, #367	; 0x16f
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7fe f946 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 80138e2:	230a      	movs	r3, #10
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	2364      	movs	r3, #100	; 0x64
 80138e8:	2202      	movs	r2, #2
 80138ea:	2102      	movs	r1, #2
 80138ec:	f004 fc7a 	bl	80181e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 80138f6:	2300      	movs	r3, #0
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	2300      	movs	r3, #0
 80138fc:	2264      	movs	r2, #100	; 0x64
 80138fe:	2100      	movs	r1, #0
 8013900:	f004 feee 	bl	80186e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801390a:	2100      	movs	r1, #0
 801390c:	4618      	mov	r0, r3
 801390e:	f004 fcc9 	bl	80182a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013918:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801391c:	2100      	movs	r1, #0
 801391e:	4618      	mov	r0, r3
 8013920:	f7fe f8a5 	bl	8011a6e <_ZN8touchgfx6BitmapC1Et>
 8013924:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013928:	4619      	mov	r1, r3
 801392a:	4620      	mov	r0, r4
 801392c:	f004 fecd 	bl	80186ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8013936:	2200      	movs	r2, #0
 8013938:	21dc      	movs	r1, #220	; 0xdc
 801393a:	20ff      	movs	r0, #255	; 0xff
 801393c:	f7ff f858 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013940:	4603      	mov	r3, r0
 8013942:	4619      	mov	r1, r3
 8013944:	4620      	mov	r0, r4
 8013946:	f004 fbf7 	bl	8018138 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8013950:	213c      	movs	r1, #60	; 0x3c
 8013952:	4618      	mov	r0, r3
 8013954:	f004 fc5e 	bl	8018214 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801395e:	230a      	movs	r3, #10
 8013960:	9300      	str	r3, [sp, #0]
 8013962:	23b4      	movs	r3, #180	; 0xb4
 8013964:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013968:	210e      	movs	r1, #14
 801396a:	f7fc fe4d 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8013974:	22ff      	movs	r2, #255	; 0xff
 8013976:	21ff      	movs	r1, #255	; 0xff
 8013978:	20ff      	movs	r0, #255	; 0xff
 801397a:	f7ff f839 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801397e:	4603      	mov	r3, r0
 8013980:	22ff      	movs	r2, #255	; 0xff
 8013982:	4619      	mov	r1, r3
 8013984:	4620      	mov	r0, r4
 8013986:	f006 f8fe 	bl	8019b86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8013996:	4619      	mov	r1, r3
 8013998:	4610      	mov	r0, r2
 801399a:	f006 f95d 	bl	8019c58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80139a4:	2205      	movs	r2, #5
 80139a6:	2100      	movs	r1, #0
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 fd89 	bl	80144c0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80139b4:	2205      	movs	r2, #5
 80139b6:	21b4      	movs	r1, #180	; 0xb4
 80139b8:	4618      	mov	r0, r3
 80139ba:	f000 fda7 	bl	801450c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80139c4:	2102      	movs	r1, #2
 80139c6:	4618      	mov	r0, r3
 80139c8:	f000 fdc6 	bl	8014558 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80139d2:	2100      	movs	r1, #0
 80139d4:	4618      	mov	r0, r3
 80139d6:	f006 fc59 	bl	801a28c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 80139e0:	230a      	movs	r3, #10
 80139e2:	9300      	str	r3, [sp, #0]
 80139e4:	23b4      	movs	r3, #180	; 0xb4
 80139e6:	f44f 7281 	mov.w	r2, #258	; 0x102
 80139ea:	f240 111f 	movw	r1, #287	; 0x11f
 80139ee:	e001      	b.n	80139f4 <_ZN12MainViewBaseC1Ev+0xfb0>
 80139f0:	08029450 	.word	0x08029450
 80139f4:	f7fc fe08 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 80139fe:	22ff      	movs	r2, #255	; 0xff
 8013a00:	21ff      	movs	r1, #255	; 0xff
 8013a02:	20ff      	movs	r0, #255	; 0xff
 8013a04:	f7fe fff4 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	22ff      	movs	r2, #255	; 0xff
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f006 f8b9 	bl	8019b86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 8013a20:	4619      	mov	r1, r3
 8013a22:	4610      	mov	r0, r2
 8013a24:	f006 f918 	bl	8019c58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013a2e:	2205      	movs	r2, #5
 8013a30:	2100      	movs	r1, #0
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 fd44 	bl	80144c0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013a3e:	2205      	movs	r2, #5
 8013a40:	21b4      	movs	r1, #180	; 0xb4
 8013a42:	4618      	mov	r0, r3
 8013a44:	f000 fd62 	bl	801450c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013a4e:	2102      	movs	r1, #2
 8013a50:	4618      	mov	r0, r3
 8013a52:	f000 fd81 	bl	8014558 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f006 fc14 	bl	801a28c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8013a6a:	2315      	movs	r3, #21
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	233c      	movs	r3, #60	; 0x3c
 8013a70:	22f7      	movs	r2, #247	; 0xf7
 8013a72:	21d2      	movs	r1, #210	; 0xd2
 8013a74:	f7fc fdc8 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8013a7e:	22ff      	movs	r2, #255	; 0xff
 8013a80:	21ff      	movs	r1, #255	; 0xff
 8013a82:	20ff      	movs	r0, #255	; 0xff
 8013a84:	f7fe ffb4 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f7fe fb14 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013a98:	2100      	movs	r1, #0
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fe fb60 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 8013aa6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013aaa:	211d      	movs	r1, #29
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7fe fa9b 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013ab2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fe faa6 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013abc:	4603      	mov	r3, r0
 8013abe:	4ae2      	ldr	r2, [pc, #904]	; (8013e48 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013ac0:	2105      	movs	r1, #5
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f00a faa0 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4610      	mov	r0, r2
 8013ad8:	f7fe fbca 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8013ae2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ae6:	211c      	movs	r1, #28
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fe fa7d 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013aee:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8013af2:	4620      	mov	r0, r4
 8013af4:	f006 fe18 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013afe:	2201      	movs	r2, #1
 8013b00:	2101      	movs	r1, #1
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fe f830 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8013b0e:	2337      	movs	r3, #55	; 0x37
 8013b10:	9300      	str	r3, [sp, #0]
 8013b12:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8013b16:	2202      	movs	r2, #2
 8013b18:	2102      	movs	r1, #2
 8013b1a:	f004 fcb3 	bl	8018484 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8013b24:	2300      	movs	r3, #0
 8013b26:	9300      	str	r3, [sp, #0]
 8013b28:	2300      	movs	r3, #0
 8013b2a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013b2e:	2100      	movs	r1, #0
 8013b30:	f004 fdd6 	bl	80186e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013b3a:	2100      	movs	r1, #0
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f004 fbb1 	bl	80182a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013b48:	2101      	movs	r1, #1
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f004 fbf5 	bl	801833a <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013b56:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f004 fcaa 	bl	80184b4 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013b66:	2101      	movs	r1, #1
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f004 fbcf 	bl	801830c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8013b74:	2316      	movs	r3, #22
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	2337      	movs	r3, #55	; 0x37
 8013b7a:	2204      	movs	r2, #4
 8013b7c:	2119      	movs	r1, #25
 8013b7e:	f7fc fd43 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8013b88:	22ff      	movs	r2, #255	; 0xff
 8013b8a:	21ff      	movs	r1, #255	; 0xff
 8013b8c:	20ff      	movs	r0, #255	; 0xff
 8013b8e:	f7fe ff2f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b92:	4603      	mov	r3, r0
 8013b94:	4619      	mov	r1, r3
 8013b96:	4620      	mov	r0, r4
 8013b98:	f7fe fa8f 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fe fadb 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 8013bb0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013bb4:	211f      	movs	r1, #31
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fe fa16 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013bbc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7fe fa21 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	4a9f      	ldr	r2, [pc, #636]	; (8013e48 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013bca:	2105      	movs	r1, #5
 8013bcc:	4620      	mov	r0, r4
 8013bce:	f00a fa1b 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 8013bde:	4619      	mov	r1, r3
 8013be0:	4610      	mov	r0, r2
 8013be2:	f7fe fb45 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8013bec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8013bf0:	211e      	movs	r1, #30
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe f9f8 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013bf8:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	f006 fd93 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8013c08:	220f      	movs	r2, #15
 8013c0a:	2152      	movs	r1, #82	; 0x52
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fd ffab 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8013c18:	22ff      	movs	r2, #255	; 0xff
 8013c1a:	21ff      	movs	r1, #255	; 0xff
 8013c1c:	20ff      	movs	r0, #255	; 0xff
 8013c1e:	f7fe fee7 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c22:	4603      	mov	r3, r0
 8013c24:	4619      	mov	r1, r3
 8013c26:	4620      	mov	r0, r4
 8013c28:	f7fe fa47 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8013c32:	2100      	movs	r1, #0
 8013c34:	4618      	mov	r0, r3
 8013c36:	f7fe fa93 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8013c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013c44:	2120      	movs	r1, #32
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fe f9ce 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013c4c:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 8013c50:	4620      	mov	r0, r4
 8013c52:	f006 fd69 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8013c5c:	232a      	movs	r3, #42	; 0x2a
 8013c5e:	9300      	str	r3, [sp, #0]
 8013c60:	2348      	movs	r3, #72	; 0x48
 8013c62:	2255      	movs	r2, #85	; 0x55
 8013c64:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8013c68:	f7fc fcce 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8013c72:	22ff      	movs	r2, #255	; 0xff
 8013c74:	21ff      	movs	r1, #255	; 0xff
 8013c76:	20ff      	movs	r0, #255	; 0xff
 8013c78:	f7fe feba 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	4619      	mov	r1, r3
 8013c80:	4620      	mov	r0, r4
 8013c82:	f7fe fa1a 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013c8c:	2100      	movs	r1, #0
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7fe fa66 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 8013c9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013c9e:	2122      	movs	r1, #34	; 0x22
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fe f9a1 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013ca6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fe f9ac 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	4a65      	ldr	r2, [pc, #404]	; (8013e48 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013cb4:	2105      	movs	r1, #5
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	f00a f9a6 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f603 1278 	addw	r2, r3, #2424	; 0x978
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 8013cc8:	4619      	mov	r1, r3
 8013cca:	4610      	mov	r0, r2
 8013ccc:	f7fe fad0 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f603 1478 	addw	r4, r3, #2424	; 0x978
 8013cd6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013cda:	2121      	movs	r1, #33	; 0x21
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fe f983 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013ce2:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f006 fd1e 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8013cf2:	233c      	movs	r3, #60	; 0x3c
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	2360      	movs	r3, #96	; 0x60
 8013cf8:	229e      	movs	r2, #158	; 0x9e
 8013cfa:	21c3      	movs	r1, #195	; 0xc3
 8013cfc:	f7fc fc84 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8013d06:	22ff      	movs	r2, #255	; 0xff
 8013d08:	21ff      	movs	r1, #255	; 0xff
 8013d0a:	20ff      	movs	r0, #255	; 0xff
 8013d0c:	f7fe fe70 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d10:	4603      	mov	r3, r0
 8013d12:	4619      	mov	r1, r3
 8013d14:	4620      	mov	r0, r4
 8013d16:	f7fe f9d0 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013d20:	2100      	movs	r1, #0
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fe fa1c 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 8013d2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013d32:	2124      	movs	r1, #36	; 0x24
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe f957 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013d3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7fe f962 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d44:	4603      	mov	r3, r0
 8013d46:	4a40      	ldr	r2, [pc, #256]	; (8013e48 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013d48:	2105      	movs	r1, #5
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f00a f95c 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	4610      	mov	r0, r2
 8013d60:	f7fe fa86 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8013d6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8013d6e:	2123      	movs	r1, #35	; 0x23
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fe f939 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013d76:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f006 fcd4 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 8013d86:	232a      	movs	r3, #42	; 0x2a
 8013d88:	9300      	str	r3, [sp, #0]
 8013d8a:	234e      	movs	r3, #78	; 0x4e
 8013d8c:	2299      	movs	r2, #153	; 0x99
 8013d8e:	2164      	movs	r1, #100	; 0x64
 8013d90:	f7fc fc3a 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8013d9a:	22ff      	movs	r2, #255	; 0xff
 8013d9c:	21ff      	movs	r1, #255	; 0xff
 8013d9e:	20ff      	movs	r0, #255	; 0xff
 8013da0:	f7fe fe26 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013da4:	4603      	mov	r3, r0
 8013da6:	4619      	mov	r1, r3
 8013da8:	4620      	mov	r0, r4
 8013daa:	f7fe f986 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013db4:	2100      	movs	r1, #0
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fe f9d2 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 8013dc2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013dc6:	212f      	movs	r1, #47	; 0x2f
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7fe f90d 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013dce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fe f918 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	4a1b      	ldr	r2, [pc, #108]	; (8013e48 <_ZN12MainViewBaseC1Ev+0x1404>)
 8013ddc:	2105      	movs	r1, #5
 8013dde:	4620      	mov	r0, r4
 8013de0:	f00a f912 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f7fe fa3c 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8013dfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013e02:	212e      	movs	r1, #46	; 0x2e
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fe f8ef 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013e0a:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f006 fc8a 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013e1a:	22c1      	movs	r2, #193	; 0xc1
 8013e1c:	2172      	movs	r1, #114	; 0x72
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fd fea2 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	21dc      	movs	r1, #220	; 0xdc
 8013e2e:	20ff      	movs	r0, #255	; 0xff
 8013e30:	f7fe fdde 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e34:	4603      	mov	r3, r0
 8013e36:	4619      	mov	r1, r3
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f7fe f93e 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013e44:	2100      	movs	r1, #0
 8013e46:	e001      	b.n	8013e4c <_ZN12MainViewBaseC1Ev+0x1408>
 8013e48:	08029450 	.word	0x08029450
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fe f987 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8013e58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013e5c:	2130      	movs	r1, #48	; 0x30
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7fe f8c2 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013e64:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f006 fc5d 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8013e74:	232a      	movs	r3, #42	; 0x2a
 8013e76:	9300      	str	r3, [sp, #0]
 8013e78:	2344      	movs	r3, #68	; 0x44
 8013e7a:	2255      	movs	r2, #85	; 0x55
 8013e7c:	f240 118f 	movw	r1, #399	; 0x18f
 8013e80:	f7fc fbc2 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8013e8a:	22ff      	movs	r2, #255	; 0xff
 8013e8c:	21ff      	movs	r1, #255	; 0xff
 8013e8e:	20ff      	movs	r0, #255	; 0xff
 8013e90:	f7fe fdae 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e94:	4603      	mov	r3, r0
 8013e96:	4619      	mov	r1, r3
 8013e98:	4620      	mov	r0, r4
 8013e9a:	f7fe f90e 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fe f95a 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 8013eb2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013eb6:	2132      	movs	r1, #50	; 0x32
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe f895 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013ebe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7fe f8a0 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	4ad7      	ldr	r2, [pc, #860]	; (8014228 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8013ecc:	2105      	movs	r1, #5
 8013ece:	4620      	mov	r0, r4
 8013ed0:	f00a f89a 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	4610      	mov	r0, r2
 8013ee4:	f7fe f9c4 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8013eee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013ef2:	2131      	movs	r1, #49	; 0x31
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fe f877 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013efa:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 8013efe:	4620      	mov	r0, r4
 8013f00:	f006 fc12 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8013f0a:	227e      	movs	r2, #126	; 0x7e
 8013f0c:	f240 1197 	movw	r1, #407	; 0x197
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fd fe29 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	21dc      	movs	r1, #220	; 0xdc
 8013f20:	20ff      	movs	r0, #255	; 0xff
 8013f22:	f7fe fd65 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f26:	4603      	mov	r3, r0
 8013f28:	4619      	mov	r1, r3
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f7fe f8c5 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8013f36:	2100      	movs	r1, #0
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fe f911 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8013f44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8013f48:	2133      	movs	r1, #51	; 0x33
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fe f84c 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013f50:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8013f54:	4620      	mov	r0, r4
 8013f56:	f006 fbe7 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8013f60:	2311      	movs	r3, #17
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	2313      	movs	r3, #19
 8013f66:	22e2      	movs	r2, #226	; 0xe2
 8013f68:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8013f6c:	f7fc fb4c 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8013f76:	220d      	movs	r2, #13
 8013f78:	210d      	movs	r1, #13
 8013f7a:	200d      	movs	r0, #13
 8013f7c:	f7fe fd38 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f80:	4603      	mov	r3, r0
 8013f82:	4619      	mov	r1, r3
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7fe f898 	bl	80120ba <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013f90:	2100      	movs	r1, #0
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fe f8e4 	bl	8012160 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 8013f9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013fa2:	2135      	movs	r1, #53	; 0x35
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fe f81f 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013faa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fe f82a 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	4a9c      	ldr	r2, [pc, #624]	; (8014228 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8013fb8:	2105      	movs	r1, #5
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f00a f824 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8013fcc:	4619      	mov	r1, r3
 8013fce:	4610      	mov	r0, r2
 8013fd0:	f7fe f94e 	bl	8012270 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8013fda:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013fde:	2134      	movs	r1, #52	; 0x34
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe f801 	bl	8011fe8 <_ZN8touchgfx9TypedTextC1Et>
 8013fe6:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8013fea:	4620      	mov	r0, r4
 8013fec:	f006 fb9c 	bl	801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8013ff6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	237a      	movs	r3, #122	; 0x7a
 8013ffe:	2200      	movs	r2, #0
 8014000:	2100      	movs	r1, #0
 8014002:	f000 fac1 	bl	8014588 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801400c:	2105      	movs	r1, #5
 801400e:	4618      	mov	r0, r3
 8014010:	f000 fada 	bl	80145c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 801401a:	2299      	movs	r2, #153	; 0x99
 801401c:	2166      	movs	r1, #102	; 0x66
 801401e:	2000      	movs	r0, #0
 8014020:	f7fe fce6 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014024:	4605      	mov	r5, r0
 8014026:	22cc      	movs	r2, #204	; 0xcc
 8014028:	2199      	movs	r1, #153	; 0x99
 801402a:	2000      	movs	r0, #0
 801402c:	f7fe fce0 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014030:	4606      	mov	r6, r0
 8014032:	2266      	movs	r2, #102	; 0x66
 8014034:	2133      	movs	r1, #51	; 0x33
 8014036:	2000      	movs	r0, #0
 8014038:	f7fe fcda 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801403c:	4680      	mov	r8, r0
 801403e:	2299      	movs	r2, #153	; 0x99
 8014040:	2166      	movs	r1, #102	; 0x66
 8014042:	2033      	movs	r0, #51	; 0x33
 8014044:	f7fe fcd4 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014048:	4603      	mov	r3, r0
 801404a:	9300      	str	r3, [sp, #0]
 801404c:	4643      	mov	r3, r8
 801404e:	4632      	mov	r2, r6
 8014050:	4629      	mov	r1, r5
 8014052:	4620      	mov	r0, r4
 8014054:	f000 fac9 	bl	80145ea <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 801405e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	237a      	movs	r3, #122	; 0x7a
 8014066:	2200      	movs	r2, #0
 8014068:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801406c:	f7fc facc 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014076:	2100      	movs	r1, #0
 8014078:	4618      	mov	r0, r3
 801407a:	f7fe fa10 	bl	801249e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 801408a:	4619      	mov	r1, r3
 801408c:	4610      	mov	r0, r2
 801408e:	f7fe fa27 	bl	80124e0 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	3340      	adds	r3, #64	; 0x40
 8014098:	4619      	mov	r1, r3
 801409a:	4610      	mov	r0, r2
 801409c:	f7fd feec 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 80140a0:	687a      	ldr	r2, [r7, #4]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	3370      	adds	r3, #112	; 0x70
 80140a6:	4619      	mov	r1, r3
 80140a8:	4610      	mov	r0, r2
 80140aa:	f7fd fee5 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	33a4      	adds	r3, #164	; 0xa4
 80140b4:	4619      	mov	r1, r3
 80140b6:	4610      	mov	r0, r2
 80140b8:	f7fd fede 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	33d8      	adds	r3, #216	; 0xd8
 80140c2:	4619      	mov	r1, r3
 80140c4:	4610      	mov	r0, r2
 80140c6:	f7fd fed7 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80140d2:	4619      	mov	r1, r3
 80140d4:	4610      	mov	r0, r2
 80140d6:	f7fd fecf 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80140e2:	4619      	mov	r1, r3
 80140e4:	4610      	mov	r0, r2
 80140e6:	f7fd fec7 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80140f2:	4619      	mov	r1, r3
 80140f4:	4610      	mov	r0, r2
 80140f6:	f7fd febf 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 80140fa:	687a      	ldr	r2, [r7, #4]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8014102:	4619      	mov	r1, r3
 8014104:	4610      	mov	r0, r2
 8014106:	f7fd feb7 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8014112:	4619      	mov	r1, r3
 8014114:	4610      	mov	r0, r2
 8014116:	f7fd feaf 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014122:	4619      	mov	r1, r3
 8014124:	4610      	mov	r0, r2
 8014126:	f7fd fea7 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 801412a:	687a      	ldr	r2, [r7, #4]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8014132:	4619      	mov	r1, r3
 8014134:	4610      	mov	r0, r2
 8014136:	f7fd fe9f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8014142:	4619      	mov	r1, r3
 8014144:	4610      	mov	r0, r2
 8014146:	f7fd fe97 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014152:	4619      	mov	r1, r3
 8014154:	4610      	mov	r0, r2
 8014156:	f7fd fe8f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014162:	4619      	mov	r1, r3
 8014164:	4610      	mov	r0, r2
 8014166:	f7fd fe87 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8014172:	4619      	mov	r1, r3
 8014174:	4610      	mov	r0, r2
 8014176:	f7fd fe7f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014182:	4619      	mov	r1, r3
 8014184:	4610      	mov	r0, r2
 8014186:	f7fd fe77 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014192:	4619      	mov	r1, r3
 8014194:	4610      	mov	r0, r2
 8014196:	f7fd fe6f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80141a2:	4619      	mov	r1, r3
 80141a4:	4610      	mov	r0, r2
 80141a6:	f7fd fe67 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80141b2:	4619      	mov	r1, r3
 80141b4:	4610      	mov	r0, r2
 80141b6:	f7fd fe5f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80141c2:	4619      	mov	r1, r3
 80141c4:	4610      	mov	r0, r2
 80141c6:	f7fd fe57 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 80141ca:	687a      	ldr	r2, [r7, #4]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80141d2:	4619      	mov	r1, r3
 80141d4:	4610      	mov	r0, r2
 80141d6:	f7fd fe4f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141e2:	4619      	mov	r1, r3
 80141e4:	4610      	mov	r0, r2
 80141e6:	f7fd fe47 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80141f2:	4619      	mov	r1, r3
 80141f4:	4610      	mov	r0, r2
 80141f6:	f7fd fe3f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014202:	4619      	mov	r1, r3
 8014204:	4610      	mov	r0, r2
 8014206:	f7fd fe37 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014212:	4619      	mov	r1, r3
 8014214:	4610      	mov	r0, r2
 8014216:	f7fd fe2f 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014222:	4619      	mov	r1, r3
 8014224:	e002      	b.n	801422c <_ZN12MainViewBaseC1Ev+0x17e8>
 8014226:	bf00      	nop
 8014228:	08029450 	.word	0x08029450
 801422c:	4610      	mov	r0, r2
 801422e:	f7fd fe23 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8014232:	687a      	ldr	r2, [r7, #4]
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801423a:	4619      	mov	r1, r3
 801423c:	4610      	mov	r0, r2
 801423e:	f7fd fe1b 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 801424a:	4619      	mov	r1, r3
 801424c:	4610      	mov	r0, r2
 801424e:	f7fd fe13 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801425a:	4619      	mov	r1, r3
 801425c:	4610      	mov	r0, r2
 801425e:	f7fd fe0b 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801426a:	4619      	mov	r1, r3
 801426c:	4610      	mov	r0, r2
 801426e:	f7fd fe03 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801427a:	4619      	mov	r1, r3
 801427c:	4610      	mov	r0, r2
 801427e:	f7fd fdfb 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 801428a:	4619      	mov	r1, r3
 801428c:	4610      	mov	r0, r2
 801428e:	f7fd fdf3 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8014292:	687a      	ldr	r2, [r7, #4]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801429a:	4619      	mov	r1, r3
 801429c:	4610      	mov	r0, r2
 801429e:	f7fd fdeb 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80142aa:	4619      	mov	r1, r3
 80142ac:	4610      	mov	r0, r2
 80142ae:	f7fd fde3 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 80142ba:	4619      	mov	r1, r3
 80142bc:	4610      	mov	r0, r2
 80142be:	f7fd fddb 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80142ca:	4619      	mov	r1, r3
 80142cc:	4610      	mov	r0, r2
 80142ce:	f7fd fdd3 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80142da:	4619      	mov	r1, r3
 80142dc:	4610      	mov	r0, r2
 80142de:	f7fd fdcb 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80142ea:	4619      	mov	r1, r3
 80142ec:	4610      	mov	r0, r2
 80142ee:	f7fd fdc3 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80142fa:	4619      	mov	r1, r3
 80142fc:	4610      	mov	r0, r2
 80142fe:	f7fd fdbb 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801430a:	4619      	mov	r1, r3
 801430c:	4610      	mov	r0, r2
 801430e:	f7fd fdb3 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 801431a:	4619      	mov	r1, r3
 801431c:	4610      	mov	r0, r2
 801431e:	f7fd fdab 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	4618      	mov	r0, r3
 8014326:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801432a:	46bd      	mov	sp, r7
 801432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014330 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]

}
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014354:	683a      	ldr	r2, [r7, #0]
 8014356:	429a      	cmp	r2, r3
 8014358:	d106      	bne.n	8014368 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f7fe fb3d 	bl	80129da <_ZN12MainViewBase11applicationEv>
 8014360:	4603      	mov	r3, r0
 8014362:	4618      	mov	r0, r3
 8014364:	f7fc fc54 	bl	8010c10 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	4a08      	ldr	r2, [pc, #32]	; (801439c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3334      	adds	r3, #52	; 0x34
 8014382:	4618      	mov	r0, r3
 8014384:	f7fe f97c 	bl	8012680 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4618      	mov	r0, r3
 801438c:	f7fe f8dc 	bl	8012548 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	08029cd8 	.word	0x08029cd8

080143a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7ff ffe1 	bl	8014370 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80143ae:	2178      	movs	r1, #120	; 0x78
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f013 fd96 	bl	8027ee2 <_ZdlPvj>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}

080143c0 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4618      	mov	r0, r3
 80143cc:	f008 fd1c 	bl	801ce08 <_ZN8touchgfx6ScreenC1Ev>
 80143d0:	4a05      	ldr	r2, [pc, #20]	; (80143e8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	601a      	str	r2, [r3, #0]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	4618      	mov	r0, r3
 80143e0:	3708      	adds	r7, #8
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}
 80143e6:	bf00      	nop
 80143e8:	08029d6c 	.word	0x08029d6c

080143ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7fe f894 	bl	8012524 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 80143fc:	4a17      	ldr	r2, [pc, #92]	; (801445c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	3334      	adds	r3, #52	; 0x34
 8014406:	4618      	mov	r0, r3
 8014408:	f7fe f914 	bl	8012634 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	3368      	adds	r3, #104	; 0x68
 8014410:	4618      	mov	r0, r3
 8014412:	f7fd facc 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	336c      	adds	r3, #108	; 0x6c
 801441a:	4618      	mov	r0, r3
 801441c:	f7fd fac7 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	3370      	adds	r3, #112	; 0x70
 8014424:	4618      	mov	r0, r3
 8014426:	f7fd fac2 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	3374      	adds	r3, #116	; 0x74
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd fabd 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	3334      	adds	r3, #52	; 0x34
 8014438:	2200      	movs	r2, #0
 801443a:	2100      	movs	r1, #0
 801443c:	4618      	mov	r0, r3
 801443e:	f7fd fb93 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	3334      	adds	r3, #52	; 0x34
 8014448:	4619      	mov	r1, r3
 801444a:	4610      	mov	r0, r2
 801444c:	f004 fa7c 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4618      	mov	r0, r3
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	08029cd8 	.word	0x08029cd8

08014460 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	4a04      	ldr	r2, [pc, #16]	; (801447c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	601a      	str	r2, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	4618      	mov	r0, r3
 8014472:	370c      	adds	r7, #12
 8014474:	46bd      	mov	sp, r7
 8014476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447a:	4770      	bx	lr
 801447c:	08029e34 	.word	0x08029e34

08014480 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014480:	b580      	push	{r7, lr}
 8014482:	b084      	sub	sp, #16
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	4639      	mov	r1, r7
 801448c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff ffe4 	bl	8014460 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014498:	4a08      	ldr	r2, [pc, #32]	; (80144bc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	3308      	adds	r3, #8
 80144a8:	463a      	mov	r2, r7
 80144aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80144ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	4618      	mov	r0, r3
 80144b6:	3710      	adds	r7, #16
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	08029cc0 	.word	0x08029cc0

080144c0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b089      	sub	sp, #36	; 0x24
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	607a      	str	r2, [r7, #4]
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80144d0:	69bb      	ldr	r3, [r7, #24]
 80144d2:	015a      	lsls	r2, r3, #5
 80144d4:	f107 0314 	add.w	r3, r7, #20
 80144d8:	4611      	mov	r1, r2
 80144da:	4618      	mov	r0, r3
 80144dc:	f7fd fef8 	bl	80122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	461c      	mov	r4, r3
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	61fb      	str	r3, [r7, #28]
 80144e8:	69fb      	ldr	r3, [r7, #28]
 80144ea:	015a      	lsls	r2, r3, #5
 80144ec:	f107 0310 	add.w	r3, r7, #16
 80144f0:	4611      	mov	r1, r2
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7fd feec 	bl	80122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80144f8:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 80144fa:	461a      	mov	r2, r3
 80144fc:	4621      	mov	r1, r4
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f005 feae 	bl	801a260 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8014504:	bf00      	nop
 8014506:	3724      	adds	r7, #36	; 0x24
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}

0801450c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 801450c:	b590      	push	{r4, r7, lr}
 801450e:	b089      	sub	sp, #36	; 0x24
 8014510:	af00      	add	r7, sp, #0
 8014512:	60f8      	str	r0, [r7, #12]
 8014514:	60b9      	str	r1, [r7, #8]
 8014516:	607a      	str	r2, [r7, #4]
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	61bb      	str	r3, [r7, #24]
 801451c:	69bb      	ldr	r3, [r7, #24]
 801451e:	015a      	lsls	r2, r3, #5
 8014520:	f107 0314 	add.w	r3, r7, #20
 8014524:	4611      	mov	r1, r2
 8014526:	4618      	mov	r0, r3
 8014528:	f7fd fed2 	bl	80122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	461c      	mov	r4, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	61fb      	str	r3, [r7, #28]
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	015a      	lsls	r2, r3, #5
 8014538:	f107 0310 	add.w	r3, r7, #16
 801453c:	4611      	mov	r1, r2
 801453e:	4618      	mov	r0, r3
 8014540:	f7fd fec6 	bl	80122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014544:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8014546:	461a      	mov	r2, r3
 8014548:	4621      	mov	r1, r4
 801454a:	68f8      	ldr	r0, [r7, #12]
 801454c:	f005 fe93 	bl	801a276 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8014550:	bf00      	nop
 8014552:	3724      	adds	r7, #36	; 0x24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd90      	pop	{r4, r7, pc}

08014558 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	60fb      	str	r3, [r7, #12]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	015a      	lsls	r2, r3, #5
 801456a:	f107 0308 	add.w	r3, r7, #8
 801456e:	4611      	mov	r1, r2
 8014570:	4618      	mov	r0, r3
 8014572:	f7fd fead 	bl	80122d0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014576:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8014578:	4619      	mov	r1, r3
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7fd fec3 	bl	8012306 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8014580:	bf00      	nop
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014588:	b590      	push	{r4, r7, lr}
 801458a:	b087      	sub	sp, #28
 801458c:	af02      	add	r7, sp, #8
 801458e:	60f8      	str	r0, [r7, #12]
 8014590:	4608      	mov	r0, r1
 8014592:	4611      	mov	r1, r2
 8014594:	461a      	mov	r2, r3
 8014596:	4603      	mov	r3, r0
 8014598:	817b      	strh	r3, [r7, #10]
 801459a:	460b      	mov	r3, r1
 801459c:	813b      	strh	r3, [r7, #8]
 801459e:	4613      	mov	r3, r2
 80145a0:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80145a8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80145ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80145b0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80145b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	4623      	mov	r3, r4
 80145bc:	f7fc f824 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80145c0:	bf00      	nop
 80145c2:	3714      	adds	r7, #20
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd90      	pop	{r4, r7, pc}

080145c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	460b      	mov	r3, r1
 80145d2:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	3334      	adds	r3, #52	; 0x34
 80145d8:	78fa      	ldrb	r2, [r7, #3]
 80145da:	4611      	mov	r1, r2
 80145dc:	4618      	mov	r0, r3
 80145de:	f7fe f88d 	bl	80126fc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 80145e2:	bf00      	nop
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	60f8      	str	r0, [r7, #12]
 80145f2:	60b9      	str	r1, [r7, #8]
 80145f4:	607a      	str	r2, [r7, #4]
 80145f6:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	69ba      	ldr	r2, [r7, #24]
 801460e:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	3384      	adds	r3, #132	; 0x84
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	68f8      	ldr	r0, [r7, #12]
 801461a:	4798      	blx	r3
    }
 801461c:	bf00      	nop
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    }
 801462c:	4a04      	ldr	r2, [pc, #16]	; (8014640 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	601a      	str	r2, [r3, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	4618      	mov	r0, r3
 8014636:	370c      	adds	r7, #12
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr
 8014640:	08029e34 	.word	0x08029e34

08014644 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
    }
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7ff ffe9 	bl	8014624 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014652:	2104      	movs	r1, #4
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f013 fc44 	bl	8027ee2 <_ZdlPvj>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	4618      	mov	r0, r3
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8014664:	b590      	push	{r4, r7, lr}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	4618      	mov	r0, r3
 8014676:	f7fd ff05 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d002      	beq.n	8014686 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	336c      	adds	r3, #108	; 0x6c
 8014684:	e001      	b.n	801468a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	3368      	adds	r3, #104	; 0x68
 801468a:	6819      	ldr	r1, [r3, #0]
 801468c:	4620      	mov	r0, r4
 801468e:	f7fe f819 	bl	80126c4 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	4618      	mov	r0, r3
 801469c:	f7fd fef2 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80146a0:	4603      	mov	r3, r0
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d002      	beq.n	80146ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	3374      	adds	r3, #116	; 0x74
 80146aa:	e001      	b.n	80146b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	3370      	adds	r3, #112	; 0x70
 80146b0:	6819      	ldr	r1, [r3, #0]
 80146b2:	4620      	mov	r0, r4
 80146b4:	f7fe f814 	bl	80126e0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fd ff1e 	bl	80124fc <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd90      	pop	{r4, r7, pc}

080146c8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
 80146d0:	4a05      	ldr	r2, [pc, #20]	; (80146e8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	f7ff ffa3 	bl	8014624 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	4618      	mov	r0, r3
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	08029cc0 	.word	0x08029cc0

080146ec <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7ff ffe7 	bl	80146c8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80146fa:	2110      	movs	r1, #16
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f013 fbf0 	bl	8027ee2 <_ZdlPvj>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	4a05      	ldr	r2, [pc, #20]	; (801472c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	601a      	str	r2, [r3, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4618      	mov	r0, r3
 801471e:	f7fd fd6f 	bl	8012200 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	0802bcfc 	.word	0x0802bcfc

08014730 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f7ff ffe7 	bl	801470c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801473e:	2138      	movs	r1, #56	; 0x38
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f013 fbce 	bl	8027ee2 <_ZdlPvj>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	4618      	mov	r0, r3
 801474a:	3708      	adds	r7, #8
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	4a05      	ldr	r2, [pc, #20]	; (8014770 <_ZN8touchgfx4LineD1Ev+0x20>)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	601a      	str	r2, [r3, #0]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4618      	mov	r0, r3
 8014762:	f005 fb57 	bl	8019e14 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	0802ba38 	.word	0x0802ba38

08014774 <_ZN8touchgfx4LineD0Ev>:
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff ffe7 	bl	8014750 <_ZN8touchgfx4LineD1Ev>
 8014782:	2174      	movs	r1, #116	; 0x74
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f013 fbac 	bl	8027ee2 <_ZdlPvj>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	4618      	mov	r0, r3
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	4a05      	ldr	r2, [pc, #20]	; (80147b4 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fd fdd1 	bl	801234c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	0802b73c 	.word	0x0802b73c

080147b8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff ffe7 	bl	8014794 <_ZN8touchgfx13PainterRGB888D1Ev>
 80147c6:	2118      	movs	r1, #24
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f013 fb8a 	bl	8027ee2 <_ZdlPvj>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	4618      	mov	r0, r3
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	68d2      	ldr	r2, [r2, #12]
 80147ea:	1052      	asrs	r2, r2, #1
 80147ec:	1898      	adds	r0, r3, r2
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d102      	bne.n	8014800 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	e00a      	b.n	8014816 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	68d2      	ldr	r2, [r2, #12]
 8014808:	1052      	asrs	r2, r2, #1
 801480a:	4413      	add	r3, r2
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	6892      	ldr	r2, [r2, #8]
 8014812:	4413      	add	r3, r2
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	6839      	ldr	r1, [r7, #0]
 8014818:	4798      	blx	r3
    }
 801481a:	bf00      	nop
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}

08014822 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8014822:	b480      	push	{r7}
 8014824:	b083      	sub	sp, #12
 8014826:	af00      	add	r7, sp, #0
 8014828:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d010      	beq.n	8014854 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	689b      	ldr	r3, [r3, #8]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d107      	bne.n	801484a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	f003 0301 	and.w	r3, r3, #1
 8014842:	2b00      	cmp	r3, #0
 8014844:	d101      	bne.n	801484a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014846:	2301      	movs	r3, #1
 8014848:	e000      	b.n	801484c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 801484a:	2300      	movs	r3, #0
 801484c:	2b01      	cmp	r3, #1
 801484e:	d001      	beq.n	8014854 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014850:	2301      	movs	r3, #1
 8014852:	e000      	b.n	8014856 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8014854:	2300      	movs	r3, #0
    }
 8014856:	4618      	mov	r0, r3
 8014858:	370c      	adds	r7, #12
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr

08014862 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 8014862:	b590      	push	{r4, r7, lr}
 8014864:	b083      	sub	sp, #12
 8014866:	af00      	add	r7, sp, #0
 8014868:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	4618      	mov	r0, r3
 8014874:	f7fd fe27 	bl	80124c6 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014878:	4603      	mov	r3, r0
 801487a:	4619      	mov	r1, r3
 801487c:	4620      	mov	r0, r4
 801487e:	f7fd ff4d 	bl	801271c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7fd fe43 	bl	8012510 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801488a:	bf00      	nop
 801488c:	370c      	adds	r7, #12
 801488e:	46bd      	mov	sp, r7
 8014890:	bd90      	pop	{r4, r7, pc}
	...

08014894 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fd fd98 	bl	80123d4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80148a4:	4a03      	ldr	r2, [pc, #12]	; (80148b4 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	601a      	str	r2, [r3, #0]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	0802a134 	.word	0x0802a134

080148b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	4a05      	ldr	r2, [pc, #20]	; (80148d8 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fd fda5 	bl	8012418 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4618      	mov	r0, r3
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	0802a134 	.word	0x0802a134

080148dc <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7ff ffe7 	bl	80148b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80148ea:	2134      	movs	r1, #52	; 0x34
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f013 faf8 	bl	8027ee2 <_ZdlPvj>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4618      	mov	r0, r3
 80148f6:	3708      	adds	r7, #8
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	4618      	mov	r0, r3
 801490a:	f7fd fdbb 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801490e:	4603      	mov	r3, r0
 8014910:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8014912:	6838      	ldr	r0, [r7, #0]
 8014914:	f7fd f89f 	bl	8011a56 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8014918:	4603      	mov	r3, r0
 801491a:	2b00      	cmp	r3, #0
 801491c:	bf0c      	ite	eq
 801491e:	2301      	moveq	r3, #1
 8014920:	2300      	movne	r3, #0
 8014922:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8014924:	7bbb      	ldrb	r3, [r7, #14]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d005      	beq.n	8014936 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 801492a:	7bfb      	ldrb	r3, [r7, #15]
 801492c:	f083 0301 	eor.w	r3, r3, #1
 8014930:	b2db      	uxtb	r3, r3
 8014932:	2b00      	cmp	r3, #0
 8014934:	d108      	bne.n	8014948 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8014936:	7bbb      	ldrb	r3, [r7, #14]
 8014938:	f083 0301 	eor.w	r3, r3, #1
 801493c:	b2db      	uxtb	r3, r3
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00f      	beq.n	8014962 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8014942:	7bfb      	ldrb	r3, [r7, #15]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d00c      	beq.n	8014962 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	7bba      	ldrb	r2, [r7, #14]
 801494c:	4611      	mov	r1, r2
 801494e:	4618      	mov	r0, r3
 8014950:	f7fd fd84 	bl	801245c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	3314      	adds	r3, #20
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	4610      	mov	r0, r2
 8014960:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 8014962:	7bfb      	ldrb	r3, [r7, #15]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d00b      	beq.n	8014980 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014968:	6838      	ldr	r0, [r7, #0]
 801496a:	f7fd f874 	bl	8011a56 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801496e:	4603      	mov	r3, r0
 8014970:	2b01      	cmp	r3, #1
 8014972:	d105      	bne.n	8014980 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014978:	2b00      	cmp	r3, #0
 801497a:	d001      	beq.n	8014980 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801497c:	2301      	movs	r3, #1
 801497e:	e000      	b.n	8014982 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 8014980:	2300      	movs	r3, #0
 8014982:	2b00      	cmp	r3, #0
 8014984:	d015      	beq.n	80149b2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	330c      	adds	r3, #12
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	4610      	mov	r0, r2
 8014996:	4798      	blx	r3
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d009      	beq.n	80149b2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	3308      	adds	r3, #8
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	6879      	ldr	r1, [r7, #4]
 80149ae:	4610      	mov	r0, r2
 80149b0:	4798      	blx	r3
            }
        }
    }
 80149b2:	bf00      	nop
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
	...

080149bc <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	4a05      	ldr	r2, [pc, #20]	; (80149dc <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7fd f9fb 	bl	8011dc8 <_ZN8touchgfx6ScreenD1Ev>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4618      	mov	r0, r3
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	0802a100 	.word	0x0802a100

080149e0 <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff ffe7 	bl	80149bc <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 80149ee:	2140      	movs	r1, #64	; 0x40
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f013 fa76 	bl	8027ee2 <_ZdlPvj>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	4618      	mov	r0, r3
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	4a0d      	ldr	r2, [pc, #52]	; (8014a40 <_ZN20SecondScreenViewBaseD1Ev+0x40>)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	601a      	str	r2, [r3, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	33e8      	adds	r3, #232	; 0xe8
 8014a12:	4618      	mov	r0, r3
 8014a14:	f000 fa0c 	bl	8014e30 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	3370      	adds	r3, #112	; 0x70
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f000 f8ef 	bl	8014c00 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	3340      	adds	r3, #64	; 0x40
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fd faae 	bl	8011f88 <_ZN8touchgfx3BoxD1Ev>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7ff ffc4 	bl	80149bc <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	4618      	mov	r0, r3
 8014a38:	3708      	adds	r7, #8
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	0802a020 	.word	0x0802a020

08014a44 <_ZN20SecondScreenViewBaseD0Ev>:
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7ff ffd7 	bl	8014a00 <_ZN20SecondScreenViewBaseD1Ev>
 8014a52:	21f8      	movs	r1, #248	; 0xf8
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f013 fa44 	bl	8027ee2 <_ZdlPvj>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3708      	adds	r7, #8
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <_ZN20SecondScreenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8014a6c:	f007 fa36 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 8014a70:	4603      	mov	r3, r0
    }
 8014a72:	4618      	mov	r0, r3
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
	...

08014a7c <_ZN20SecondScreenViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>

SecondScreenViewBase::SecondScreenViewBase() :
 8014a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a80:	b086      	sub	sp, #24
 8014a82:	af02      	add	r7, sp, #8
 8014a84:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f000 f8e1 	bl	8014c50 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 8014a8e:	4a4a      	ldr	r2, [pc, #296]	; (8014bb8 <_ZN20SecondScreenViewBaseC1Ev+0x13c>)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	601a      	str	r2, [r3, #0]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	3340      	adds	r3, #64	; 0x40
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7fd fa55 	bl	8011f48 <_ZN8touchgfx3BoxC1Ev>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	3370      	adds	r3, #112	; 0x70
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f000 f8ea 	bl	8014c7c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8014aae:	4b43      	ldr	r3, [pc, #268]	; (8014bbc <_ZN20SecondScreenViewBaseC1Ev+0x140>)
 8014ab0:	60bb      	str	r3, [r7, #8]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	60fb      	str	r3, [r7, #12]
 8014ab6:	f107 0308 	add.w	r3, r7, #8
 8014aba:	cb0c      	ldmia	r3, {r2, r3}
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	f000 f917 	bl	8014cf0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014ac8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	2100      	movs	r1, #0
 8014ad6:	f7fb fd97 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2100      	movs	r1, #0
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	f7fd ff83 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014aea:	4603      	mov	r3, r0
 8014aec:	4619      	mov	r1, r3
 8014aee:	4620      	mov	r0, r4
 8014af0:	f7fd fa6c 	bl	8011fcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014afa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014afe:	9300      	str	r3, [sp, #0]
 8014b00:	2385      	movs	r3, #133	; 0x85
 8014b02:	2200      	movs	r2, #0
 8014b04:	2100      	movs	r1, #0
 8014b06:	f000 f913 	bl	8014d30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	3370      	adds	r3, #112	; 0x70
 8014b0e:	2105      	movs	r1, #5
 8014b10:	4618      	mov	r0, r3
 8014b12:	f000 f92d 	bl	8014d70 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014b1c:	2299      	movs	r2, #153	; 0x99
 8014b1e:	2166      	movs	r1, #102	; 0x66
 8014b20:	2000      	movs	r0, #0
 8014b22:	f7fd ff65 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b26:	4605      	mov	r5, r0
 8014b28:	22cc      	movs	r2, #204	; 0xcc
 8014b2a:	2199      	movs	r1, #153	; 0x99
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	f7fd ff5f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b32:	4606      	mov	r6, r0
 8014b34:	2266      	movs	r2, #102	; 0x66
 8014b36:	2133      	movs	r1, #51	; 0x33
 8014b38:	2000      	movs	r0, #0
 8014b3a:	f7fd ff59 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b3e:	4680      	mov	r8, r0
 8014b40:	2299      	movs	r2, #153	; 0x99
 8014b42:	2166      	movs	r1, #102	; 0x66
 8014b44:	2033      	movs	r0, #51	; 0x33
 8014b46:	f7fd ff53 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	9300      	str	r3, [sp, #0]
 8014b4e:	4643      	mov	r3, r8
 8014b50:	4632      	mov	r2, r6
 8014b52:	4629      	mov	r1, r5
 8014b54:	4620      	mov	r0, r4
 8014b56:	f000 f91c 	bl	8014d92 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8014b60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	2385      	movs	r3, #133	; 0x85
 8014b68:	2200      	movs	r2, #0
 8014b6a:	2100      	movs	r1, #0
 8014b6c:	f7fb fd4c 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	3370      	adds	r3, #112	; 0x70
 8014b74:	2100      	movs	r1, #0
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fd fc91 	bl	801249e <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	33e8      	adds	r3, #232	; 0xe8
 8014b86:	4619      	mov	r1, r3
 8014b88:	4610      	mov	r0, r2
 8014b8a:	f7fd fca9 	bl	80124e0 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	3340      	adds	r3, #64	; 0x40
 8014b94:	4619      	mov	r1, r3
 8014b96:	4610      	mov	r0, r2
 8014b98:	f7fd f96e 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	3370      	adds	r3, #112	; 0x70
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	4610      	mov	r0, r2
 8014ba6:	f7fd f967 	bl	8011e78 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb6:	bf00      	nop
 8014bb8:	0802a020 	.word	0x0802a020
 8014bbc:	08014bd5 	.word	0x08014bd5

08014bc0 <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]

}
 8014bc8:	bf00      	nop
 8014bca:	370c      	adds	r7, #12
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd2:	4770      	bx	lr

08014bd4 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	3370      	adds	r3, #112	; 0x70
 8014be2:	683a      	ldr	r2, [r7, #0]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d106      	bne.n	8014bf6 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When ButtonGoToMainScreen clicked change screen to Main
        //Go to Main with screen transition towards East
        application().gotoMainScreenSlideTransitionEast();
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7ff ff3b 	bl	8014a64 <_ZN20SecondScreenViewBase11applicationEv>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7fb ffc7 	bl	8010b84 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionEastEv>
    }
}
 8014bf6:	bf00      	nop
 8014bf8:	3708      	adds	r7, #8
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}
	...

08014c00 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	4a08      	ldr	r2, [pc, #32]	; (8014c2c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	601a      	str	r2, [r3, #0]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	3334      	adds	r3, #52	; 0x34
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7fd fd34 	bl	8012680 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7ff fe4c 	bl	80148b8 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	4618      	mov	r0, r3
 8014c24:	3708      	adds	r7, #8
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	0802a06c 	.word	0x0802a06c

08014c30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7ff ffe1 	bl	8014c00 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8014c3e:	2178      	movs	r1, #120	; 0x78
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f013 f94e 	bl	8027ee2 <_ZdlPvj>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3708      	adds	r7, #8
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f008 f8d4 	bl	801ce08 <_ZN8touchgfx6ScreenC1Ev>
 8014c60:	4a05      	ldr	r2, [pc, #20]	; (8014c78 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	601a      	str	r2, [r3, #0]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3708      	adds	r7, #8
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	0802a100 	.word	0x0802a100

08014c7c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7ff fe04 	bl	8014894 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8014c8c:	4a17      	ldr	r2, [pc, #92]	; (8014cec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	601a      	str	r2, [r3, #0]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	3334      	adds	r3, #52	; 0x34
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fd fccc 	bl	8012634 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	3368      	adds	r3, #104	; 0x68
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fc fe84 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	336c      	adds	r3, #108	; 0x6c
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fc fe7f 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3370      	adds	r3, #112	; 0x70
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7fc fe7a 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	3374      	adds	r3, #116	; 0x74
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7fc fe75 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3334      	adds	r3, #52	; 0x34
 8014cc8:	2200      	movs	r2, #0
 8014cca:	2100      	movs	r1, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fc ff4b 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	3334      	adds	r3, #52	; 0x34
 8014cd8:	4619      	mov	r1, r3
 8014cda:	4610      	mov	r0, r2
 8014cdc:	f003 fe34 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3708      	adds	r7, #8
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	0802a06c 	.word	0x0802a06c

08014cf0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b084      	sub	sp, #16
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	4639      	mov	r1, r7
 8014cfc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7ff fbac 	bl	8014460 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014d08:	4a08      	ldr	r2, [pc, #32]	; (8014d2c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	68ba      	ldr	r2, [r7, #8]
 8014d12:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	3308      	adds	r3, #8
 8014d18:	463a      	mov	r2, r7
 8014d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	4618      	mov	r0, r3
 8014d26:	3710      	adds	r7, #16
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	0802a054 	.word	0x0802a054

08014d30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014d30:	b590      	push	{r4, r7, lr}
 8014d32:	b087      	sub	sp, #28
 8014d34:	af02      	add	r7, sp, #8
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	4608      	mov	r0, r1
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	4603      	mov	r3, r0
 8014d40:	817b      	strh	r3, [r7, #10]
 8014d42:	460b      	mov	r3, r1
 8014d44:	813b      	strh	r3, [r7, #8]
 8014d46:	4613      	mov	r3, r2
 8014d48:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014d50:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014d54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014d58:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014d5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	4623      	mov	r3, r4
 8014d64:	f7fb fc50 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8014d68:	bf00      	nop
 8014d6a:	3714      	adds	r7, #20
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd90      	pop	{r4, r7, pc}

08014d70 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	460b      	mov	r3, r1
 8014d7a:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	3334      	adds	r3, #52	; 0x34
 8014d80:	78fa      	ldrb	r2, [r7, #3]
 8014d82:	4611      	mov	r1, r2
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7fd fcb9 	bl	80126fc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8014d8a:	bf00      	nop
 8014d8c:	3708      	adds	r7, #8
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	60b9      	str	r1, [r7, #8]
 8014d9c:	607a      	str	r2, [r7, #4]
 8014d9e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	68ba      	ldr	r2, [r7, #8]
 8014da4:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	683a      	ldr	r2, [r7, #0]
 8014db0:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	69ba      	ldr	r2, [r7, #24]
 8014db6:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	3384      	adds	r3, #132	; 0x84
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	4798      	blx	r3
    }
 8014dc4:	bf00      	nop
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8014dcc:	b590      	push	{r4, r7, lr}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7fd fb51 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d002      	beq.n	8014dee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	336c      	adds	r3, #108	; 0x6c
 8014dec:	e001      	b.n	8014df2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	3368      	adds	r3, #104	; 0x68
 8014df2:	6819      	ldr	r1, [r3, #0]
 8014df4:	4620      	mov	r0, r4
 8014df6:	f7fd fc65 	bl	80126c4 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fd fb3e 	bl	8012484 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d002      	beq.n	8014e14 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3374      	adds	r3, #116	; 0x74
 8014e12:	e001      	b.n	8014e18 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3370      	adds	r3, #112	; 0x70
 8014e18:	6819      	ldr	r1, [r3, #0]
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f7fd fc60 	bl	80126e0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd fb6a 	bl	80124fc <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8014e28:	bf00      	nop
 8014e2a:	370c      	adds	r7, #12
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd90      	pop	{r4, r7, pc}

08014e30 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	4a05      	ldr	r2, [pc, #20]	; (8014e50 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	601a      	str	r2, [r3, #0]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7ff fbef 	bl	8014624 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	0802a054 	.word	0x0802a054

08014e54 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7ff ffe7 	bl	8014e30 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8014e62:	2110      	movs	r1, #16
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f013 f83c 	bl	8027ee2 <_ZdlPvj>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3708      	adds	r7, #8
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	68d2      	ldr	r2, [r2, #12]
 8014e86:	1052      	asrs	r2, r2, #1
 8014e88:	1898      	adds	r0, r3, r2
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	f003 0301 	and.w	r3, r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d102      	bne.n	8014e9c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	e00a      	b.n	8014eb2 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	68d2      	ldr	r2, [r2, #12]
 8014ea4:	1052      	asrs	r2, r2, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	687a      	ldr	r2, [r7, #4]
 8014eac:	6892      	ldr	r2, [r2, #8]
 8014eae:	4413      	add	r3, r2
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	6839      	ldr	r1, [r7, #0]
 8014eb4:	4798      	blx	r3
    }
 8014eb6:	bf00      	nop
 8014eb8:	3708      	adds	r7, #8
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8014ebe:	b480      	push	{r7}
 8014ec0:	b083      	sub	sp, #12
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d010      	beq.n	8014ef0 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	689b      	ldr	r3, [r3, #8]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d107      	bne.n	8014ee6 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	f003 0301 	and.w	r3, r3, #1
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d101      	bne.n	8014ee6 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8014ee2:	2301      	movs	r3, #1
 8014ee4:	e000      	b.n	8014ee8 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d001      	beq.n	8014ef0 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8014eec:	2301      	movs	r3, #1
 8014eee:	e000      	b.n	8014ef2 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8014ef0:	2300      	movs	r3, #0
    }
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr

08014efe <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8014efe:	b590      	push	{r4, r7, lr}
 8014f00:	b083      	sub	sp, #12
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fd fad9 	bl	80124c6 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014f14:	4603      	mov	r3, r0
 8014f16:	4619      	mov	r1, r3
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f7fd fbff 	bl	801271c <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7fd faf5 	bl	8012510 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8014f26:	bf00      	nop
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd90      	pop	{r4, r7, pc}
	...

08014f30 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014f30:	b480      	push	{r7}
 8014f32:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014f34:	4b02      	ldr	r3, [pc, #8]	; (8014f40 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr
 8014f40:	0802a1c0 	.word	0x0802a1c0

08014f44 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014f44:	b480      	push	{r7}
 8014f46:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014f48:	2303      	movs	r3, #3
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f52:	4770      	bx	lr

08014f54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8014f54:	b480      	push	{r7}
 8014f56:	b085      	sub	sp, #20
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8014f62:	4a07      	ldr	r2, [pc, #28]	; (8014f80 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	6013      	str	r3, [r2, #0]
        fonts = f;
 8014f68:	4a06      	ldr	r2, [pc, #24]	; (8014f84 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8014f6e:	4a06      	ldr	r2, [pc, #24]	; (8014f88 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8014f70:	88fb      	ldrh	r3, [r7, #6]
 8014f72:	8013      	strh	r3, [r2, #0]
    }
 8014f74:	bf00      	nop
 8014f76:	3714      	adds	r7, #20
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr
 8014f80:	2000bf7c 	.word	0x2000bf7c
 8014f84:	2000bf84 	.word	0x2000bf84
 8014f88:	2000bf80 	.word	0x2000bf80

08014f8c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014f8c:	b590      	push	{r4, r7, lr}
 8014f8e:	b085      	sub	sp, #20
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	4603      	mov	r3, r0
 8014f94:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8014f96:	2300      	movs	r3, #0
 8014f98:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014f9a:	88fb      	ldrh	r3, [r7, #6]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d127      	bne.n	8014ff0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014fa0:	88fb      	ldrh	r3, [r7, #6]
 8014fa2:	4a1e      	ldr	r2, [pc, #120]	; (801501c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d016      	beq.n	8014fda <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014fac:	88fb      	ldrh	r3, [r7, #6]
 8014fae:	4a1b      	ldr	r2, [pc, #108]	; (801501c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fb4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	68ba      	ldr	r2, [r7, #8]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	4a18      	ldr	r2, [pc, #96]	; (8015020 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014fc0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	68ba      	ldr	r2, [r7, #8]
 8014fc8:	4413      	add	r3, r2
 8014fca:	4a16      	ldr	r2, [pc, #88]	; (8015024 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014fcc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	68ba      	ldr	r2, [r7, #8]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	60fb      	str	r3, [r7, #12]
 8014fd8:	e00a      	b.n	8014ff0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014fda:	4b11      	ldr	r3, [pc, #68]	; (8015020 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014fdc:	4a12      	ldr	r2, [pc, #72]	; (8015028 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014fde:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014fe0:	4a12      	ldr	r2, [pc, #72]	; (801502c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014fe2:	4b10      	ldr	r3, [pc, #64]	; (8015024 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014fe4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014fe6:	88fb      	ldrh	r3, [r7, #6]
 8014fe8:	4a11      	ldr	r2, [pc, #68]	; (8015030 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014fee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d00d      	beq.n	8015012 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014ff6:	4a0f      	ldr	r2, [pc, #60]	; (8015034 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014ff8:	88fb      	ldrh	r3, [r7, #6]
 8014ffa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014ffc:	f000 f83e 	bl	801507c <_ZN17TypedTextDatabase8getFontsEv>
 8015000:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015002:	f000 f833 	bl	801506c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015006:	4603      	mov	r3, r0
 8015008:	461a      	mov	r2, r3
 801500a:	4621      	mov	r1, r4
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f7ff ffa1 	bl	8014f54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015012:	bf00      	nop
 8015014:	3714      	adds	r7, #20
 8015016:	46bd      	mov	sp, r7
 8015018:	bd90      	pop	{r4, r7, pc}
 801501a:	bf00      	nop
 801501c:	200086f0 	.word	0x200086f0
 8015020:	200086f8 	.word	0x200086f8
 8015024:	200086fc 	.word	0x200086fc
 8015028:	08064f00 	.word	0x08064f00
 801502c:	08064e28 	.word	0x08064e28
 8015030:	08065064 	.word	0x08065064
 8015034:	200086f4 	.word	0x200086f4

08015038 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
 8015040:	460b      	mov	r3, r1
 8015042:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015044:	4b07      	ldr	r3, [pc, #28]	; (8015064 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	4b07      	ldr	r3, [pc, #28]	; (8015068 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801504a:	6819      	ldr	r1, [r3, #0]
 801504c:	887b      	ldrh	r3, [r7, #2]
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	440b      	add	r3, r1
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	005b      	lsls	r3, r3, #1
 8015056:	4413      	add	r3, r2
}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	200086f8 	.word	0x200086f8
 8015068:	200086fc 	.word	0x200086fc

0801506c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801506c:	b480      	push	{r7}
 801506e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015070:	2336      	movs	r3, #54	; 0x36
}
 8015072:	4618      	mov	r0, r3
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr

0801507c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 801507c:	b480      	push	{r7}
 801507e:	af00      	add	r7, sp, #0
    return _fonts;
 8015080:	4b02      	ldr	r3, [pc, #8]	; (801508c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015082:	4618      	mov	r0, r3
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr
 801508c:	20008700 	.word	0x20008700

08015090 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2b01      	cmp	r3, #1
 801509e:	d127      	bne.n	80150f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d122      	bne.n	80150f0 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80150aa:	f7fb f86f 	bl	801018c <_Z25getFont_Asap_Bold_18_4bppv>
 80150ae:	4602      	mov	r2, r0
};
 80150b0:	4b11      	ldr	r3, [pc, #68]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150b2:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 80150b4:	f7fb f930 	bl	8010318 <_Z25getFont_Asap_Bold_40_4bppv>
 80150b8:	4602      	mov	r2, r0
};
 80150ba:	4b0f      	ldr	r3, [pc, #60]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150bc:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 80150be:	f7fb f8e9 	bl	8010294 <_Z25getFont_Asap_Bold_30_4bppv>
 80150c2:	4602      	mov	r2, r0
};
 80150c4:	4b0c      	ldr	r3, [pc, #48]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150c6:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 80150c8:	f7fb f81e 	bl	8010108 <_Z25getFont_Asap_Bold_12_4bppv>
 80150cc:	4602      	mov	r2, r0
};
 80150ce:	4b0a      	ldr	r3, [pc, #40]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150d0:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 80150d2:	f7fb f963 	bl	801039c <_Z25getFont_Asap_Bold_60_4bppv>
 80150d6:	4602      	mov	r2, r0
};
 80150d8:	4b07      	ldr	r3, [pc, #28]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150da:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 80150dc:	f7fb f898 	bl	8010210 <_Z25getFont_Asap_Bold_21_4bppv>
 80150e0:	4602      	mov	r2, r0
};
 80150e2:	4b05      	ldr	r3, [pc, #20]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150e4:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 80150e6:	f7fa ffcd 	bl	8010084 <_Z25getFont_Asap_Bold_10_4bppv>
 80150ea:	4602      	mov	r2, r0
};
 80150ec:	4b02      	ldr	r3, [pc, #8]	; (80150f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80150ee:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 80150f0:	bf00      	nop
 80150f2:	3708      	adds	r7, #8
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	20008700 	.word	0x20008700

080150fc <_GLOBAL__sub_I__fonts>:
 80150fc:	b580      	push	{r7, lr}
 80150fe:	af00      	add	r7, sp, #0
 8015100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015104:	2001      	movs	r0, #1
 8015106:	f7ff ffc3 	bl	8015090 <_Z41__static_initialization_and_destruction_0ii>
 801510a:	bd80      	pop	{r7, pc}

0801510c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	4a05      	ldr	r2, [pc, #20]	; (801512c <_ZN19FrontendApplicationD1Ev+0x20>)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	601a      	str	r2, [r3, #0]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	4618      	mov	r0, r3
 801511e:	f7fb fc15 	bl	801094c <_ZN23FrontendApplicationBaseD1Ev>
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	4618      	mov	r0, r3
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	0802a204 	.word	0x0802a204

08015130 <_ZN19FrontendApplicationD0Ev>:
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7ff ffe7 	bl	801510c <_ZN19FrontendApplicationD1Ev>
 801513e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f012 fecd 	bl	8027ee2 <_ZdlPvj>
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	3708      	adds	r7, #8
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}

08015152 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015152:	b580      	push	{r7, lr}
 8015154:	b082      	sub	sp, #8
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015160:	4618      	mov	r0, r3
 8015162:	f000 fd1d 	bl	8015ba0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	f006 fdd1 	bl	801bd10 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801516e:	bf00      	nop
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
	...

08015178 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	68b9      	ldr	r1, [r7, #8]
 801518a:	4618      	mov	r0, r3
 801518c:	f7fb fc58 	bl	8010a40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015190:	4a03      	ldr	r2, [pc, #12]	; (80151a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	601a      	str	r2, [r3, #0]
{
}
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	4618      	mov	r0, r3
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	0802a204 	.word	0x0802a204

080151a4 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
    {
    }
 80151ac:	bf00      	nop
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80151b8:	b480      	push	{r7}
 80151ba:	b083      	sub	sp, #12
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
    {
    }
 80151c0:	bf00      	nop
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr

080151cc <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80151cc:	b480      	push	{r7}
 80151ce:	b083      	sub	sp, #12
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
    {
 80151d4:	4a04      	ldr	r2, [pc, #16]	; (80151e8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	601a      	str	r2, [r3, #0]
    }
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	4618      	mov	r0, r3
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e6:	4770      	bx	lr
 80151e8:	0802a290 	.word	0x0802a290

080151ec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
    }
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff ffe9 	bl	80151cc <_ZN8touchgfx9PresenterD1Ev>
 80151fa:	2104      	movs	r1, #4
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f012 fe70 	bl	8027ee2 <_ZdlPvj>
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	4618      	mov	r0, r3
 8015206:	3708      	adds	r7, #8
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}

0801520c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
    {
 8015214:	4a04      	ldr	r2, [pc, #16]	; (8015228 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	601a      	str	r2, [r3, #0]
    }
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4618      	mov	r0, r3
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr
 8015228:	0802a290 	.word	0x0802a290

0801522c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801522c:	b480      	push	{r7}
 801522e:	b083      	sub	sp, #12
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	4a06      	ldr	r2, [pc, #24]	; (8015250 <_ZN13ModelListenerC1Ev+0x24>)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	601a      	str	r2, [r3, #0]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2200      	movs	r2, #0
 801523e:	605a      	str	r2, [r3, #4]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4618      	mov	r0, r3
 8015244:	370c      	adds	r7, #12
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop
 8015250:	0802a278 	.word	0x0802a278

08015254 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	4a04      	ldr	r2, [pc, #16]	; (8015270 <_ZN13ModelListenerD1Ev+0x1c>)
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	370c      	adds	r7, #12
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	0802a278 	.word	0x0802a278

08015274 <_ZN13ModelListenerD0Ev>:
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f7ff ffe9 	bl	8015254 <_ZN13ModelListenerD1Ev>
 8015282:	2108      	movs	r1, #8
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f012 fe2c 	bl	8027ee2 <_ZdlPvj>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	4618      	mov	r0, r3
 801528e:	3708      	adds	r7, #8
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	bf00      	nop
 80152a0:	370c      	adds	r7, #12
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80152aa:	b480      	push	{r7}
 80152ac:	b083      	sub	sp, #12
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	6039      	str	r1, [r7, #0]
 80152b4:	bf00      	nop
 80152b6:	370c      	adds	r7, #12
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr

080152c0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	4a09      	ldr	r2, [pc, #36]	; (80152f0 <_ZN13MainPresenterD1Ev+0x30>)
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	601a      	str	r2, [r3, #0]
 80152ce:	4a09      	ldr	r2, [pc, #36]	; (80152f4 <_ZN13MainPresenterD1Ev+0x34>)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	605a      	str	r2, [r3, #4]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	3304      	adds	r3, #4
 80152d8:	4618      	mov	r0, r3
 80152da:	f7ff ffbb 	bl	8015254 <_ZN13ModelListenerD1Ev>
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7ff ff73 	bl	80151cc <_ZN8touchgfx9PresenterD1Ev>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	0802a240 	.word	0x0802a240
 80152f4:	0802a260 	.word	0x0802a260

080152f8 <_ZThn4_N13MainPresenterD1Ev>:
 80152f8:	f1a0 0004 	sub.w	r0, r0, #4
 80152fc:	e7e0      	b.n	80152c0 <_ZN13MainPresenterD1Ev>
 80152fe:	bf00      	nop

08015300 <_ZN13MainPresenterD0Ev>:
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7ff ffd9 	bl	80152c0 <_ZN13MainPresenterD1Ev>
 801530e:	2110      	movs	r1, #16
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f012 fde6 	bl	8027ee2 <_ZdlPvj>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <_ZThn4_N13MainPresenterD0Ev>:
 8015320:	f1a0 0004 	sub.w	r0, r0, #4
 8015324:	e7ec      	b.n	8015300 <_ZN13MainPresenterD0Ev>
	...

08015328 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
    : view(v)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4618      	mov	r0, r3
 8015336:	f7ff ff69 	bl	801520c <_ZN8touchgfx9PresenterC1Ev>
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	3304      	adds	r3, #4
 801533e:	4618      	mov	r0, r3
 8015340:	f7ff ff74 	bl	801522c <_ZN13ModelListenerC1Ev>
 8015344:	4a06      	ldr	r2, [pc, #24]	; (8015360 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	601a      	str	r2, [r3, #0]
 801534a:	4a06      	ldr	r2, [pc, #24]	; (8015364 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	605a      	str	r2, [r3, #4]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	60da      	str	r2, [r3, #12]
{
}
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	0802a240 	.word	0x0802a240
 8015364:	0802a260 	.word	0x0802a260

08015368 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8015368:	b480      	push	{r7}
 801536a:	b083      	sub	sp, #12
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
}
 8015370:	bf00      	nop
 8015372:	370c      	adds	r7, #12
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801537c:	b480      	push	{r7}
 801537e:	b083      	sub	sp, #12
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
}
 8015384:	bf00      	nop
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	68db      	ldr	r3, [r3, #12]
 801539e:	6839      	ldr	r1, [r7, #0]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f000 f9e9 	bl	8015778 <_ZN8MainView9updateValEPh>
}
 80153a6:	bf00      	nop
 80153a8:	3708      	adds	r7, #8
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <_ZThn4_N13MainPresenter11setNewValueEPh>:

    void setNewValue(uint8_t* newValue);
 80153ae:	f1a0 0004 	sub.w	r0, r0, #4
 80153b2:	f7ff bfed 	b.w	8015390 <_ZN13MainPresenter11setNewValueEPh>

080153b6 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	68db      	ldr	r3, [r3, #12]
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f000 f8fa 	bl	80155c0 <_ZN8MainView14updateSettingsEPh>
}
 80153cc:	bf00      	nop
 80153ce:	3708      	adds	r7, #8
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
    void updateDisplaySettings(uint8_t* settings);
 80153d4:	f1a0 0004 	sub.w	r0, r0, #4
 80153d8:	f7ff bfed 	b.w	80153b6 <_ZN13MainPresenter21updateDisplaySettingsEPh>

080153dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80153dc:	b580      	push	{r7, lr}
 80153de:	b084      	sub	sp, #16
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	60f8      	str	r0, [r7, #12]
 80153e4:	460b      	mov	r3, r1
 80153e6:	607a      	str	r2, [r7, #4]
 80153e8:	ed87 0a00 	vstr	s0, [r7]
 80153ec:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80153ee:	463b      	mov	r3, r7
 80153f0:	8979      	ldrh	r1, [r7, #10]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	68f8      	ldr	r0, [r7, #12]
 80153f6:	f008 ff61 	bl	801e2bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80153fa:	4603      	mov	r3, r0
    }
 80153fc:	4618      	mov	r0, r3
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8015404:	b480      	push	{r7}
 8015406:	b083      	sub	sp, #12
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
        return rect.width;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8015412:	4618      	mov	r0, r3
 8015414:	370c      	adds	r7, #12
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr

0801541e <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801541e:	b480      	push	{r7}
 8015420:	b083      	sub	sp, #12
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
        return rect.height;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 801542c:	4618      	mov	r0, r3
 801542e:	370c      	adds	r7, #12
 8015430:	46bd      	mov	sp, r7
 8015432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015436:	4770      	bx	lr

08015438 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	4a05      	ldr	r2, [pc, #20]	; (8015458 <_ZN8MainViewD1Ev+0x20>)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	4618      	mov	r0, r3
 801544a:	f7fd f999 	bl	8012780 <_ZN12MainViewBaseD1Ev>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4618      	mov	r0, r3
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	0802a2a8 	.word	0x0802a2a8

0801545c <_ZN8MainViewD0Ev>:
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7ff ffe7 	bl	8015438 <_ZN8MainViewD1Ev>
 801546a:	f642 0144 	movw	r1, #10308	; 0x2844
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f012 fd37 	bl	8027ee2 <_ZdlPvj>
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	4618      	mov	r0, r3
 8015478:	3708      	adds	r7, #8
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
	...

08015480 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView()
 8015480:	b590      	push	{r4, r7, lr}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	4618      	mov	r0, r3
 801548c:	f7fd fada 	bl	8012a44 <_ZN12MainViewBaseC1Ev>
 8015490:	4a15      	ldr	r2, [pc, #84]	; (80154e8 <_ZN8MainViewC1Ev+0x68>)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 8015496:	4b15      	ldr	r3, [pc, #84]	; (80154ec <_ZN8MainViewC1Ev+0x6c>)
 8015498:	881b      	ldrh	r3, [r3, #0]
 801549a:	461c      	mov	r4, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7ff ffae 	bl	8015404 <_ZNK8touchgfx8Drawable8getWidthEv>
 80154a8:	4603      	mov	r3, r0
 80154aa:	429c      	cmp	r4, r3
 80154ac:	dc0b      	bgt.n	80154c6 <_ZN8MainViewC1Ev+0x46>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80154ae:	4b10      	ldr	r3, [pc, #64]	; (80154f0 <_ZN8MainViewC1Ev+0x70>)
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	461c      	mov	r4, r3
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7ff ffaf 	bl	801541e <_ZNK8touchgfx8Drawable9getHeightEv>
 80154c0:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80154c2:	429c      	cmp	r4, r3
 80154c4:	dd01      	ble.n	80154ca <_ZN8MainViewC1Ev+0x4a>
 80154c6:	2301      	movs	r3, #1
 80154c8:	e000      	b.n	80154cc <_ZN8MainViewC1Ev+0x4c>
 80154ca:	2300      	movs	r3, #0
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d005      	beq.n	80154dc <_ZN8MainViewC1Ev+0x5c>
    {
        backgroundBox.setVisible(true);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3340      	adds	r3, #64	; 0x40
 80154d4:	2101      	movs	r1, #1
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fc fbb7 	bl	8011c4a <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	4618      	mov	r0, r3
 80154e0:	370c      	adds	r7, #12
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd90      	pop	{r4, r7, pc}
 80154e6:	bf00      	nop
 80154e8:	0802a2a8 	.word	0x0802a2a8
 80154ec:	2000bede 	.word	0x2000bede
 80154f0:	2000bee0 	.word	0x2000bee0

080154f4 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 80154f4:	b480      	push	{r7}
 80154f6:	b083      	sub	sp, #12
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
}
 8015510:	bf00      	nop
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <_ZL13getBlackColorv>:

static colortype getBlackColor()
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015522:	2200      	movs	r2, #0
 8015524:	2100      	movs	r1, #0
 8015526:	2000      	movs	r0, #0
 8015528:	f7fd fa62 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801552c:	4603      	mov	r3, r0
 801552e:	607b      	str	r3, [r7, #4]
}
 8015530:	bf00      	nop
 8015532:	4618      	mov	r0, r3
 8015534:	3708      	adds	r7, #8
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
	...

0801553c <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit()
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0

	color_index ++;
 8015542:	4b1e      	ldr	r3, [pc, #120]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	3301      	adds	r3, #1
 8015548:	4a1c      	ldr	r2, [pc, #112]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 801554a:	6013      	str	r3, [r2, #0]
	if(color_index >= 3)
 801554c:	4b1b      	ldr	r3, [pc, #108]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b02      	cmp	r3, #2
 8015552:	dd02      	ble.n	801555a <_ZL20getColorFromRevLimitv+0x1e>
	{
		color_index = 0;
 8015554:	4b19      	ldr	r3, [pc, #100]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 8015556:	2200      	movs	r2, #0
 8015558:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255,0,0);
 801555a:	2200      	movs	r2, #0
 801555c:	2100      	movs	r1, #0
 801555e:	20ff      	movs	r0, #255	; 0xff
 8015560:	f7fd fa46 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015564:	4603      	mov	r3, r0
 8015566:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0,0,0);
 8015568:	2200      	movs	r2, #0
 801556a:	2100      	movs	r1, #0
 801556c:	2000      	movs	r0, #0
 801556e:	f7fd fa3f 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015572:	4603      	mov	r3, r0
 8015574:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255,255,255);
 8015576:	22ff      	movs	r2, #255	; 0xff
 8015578:	21ff      	movs	r1, #255	; 0xff
 801557a:	20ff      	movs	r0, #255	; 0xff
 801557c:	f7fd fa38 	bl	80129f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015580:	4603      	mov	r3, r0
 8015582:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8015584:	463b      	mov	r3, r7
 8015586:	4618      	mov	r0, r3
 8015588:	f7fc fa11 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>

	if(color_index == 0)
 801558c:	4b0b      	ldr	r3, [pc, #44]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d101      	bne.n	8015598 <_ZL20getColorFromRevLimitv+0x5c>
	{
		color_to_set = red_color;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 1)
 8015598:	4b08      	ldr	r3, [pc, #32]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d101      	bne.n	80155a4 <_ZL20getColorFromRevLimitv+0x68>
	{
		color_to_set = black_color;
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	603b      	str	r3, [r7, #0]
	}
	if(color_index == 2)
 80155a4:	4b05      	ldr	r3, [pc, #20]	; (80155bc <_ZL20getColorFromRevLimitv+0x80>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	2b02      	cmp	r3, #2
 80155aa:	d101      	bne.n	80155b0 <_ZL20getColorFromRevLimitv+0x74>
	{
		color_to_set = white_color;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 80155b0:	683b      	ldr	r3, [r7, #0]
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	2000871c 	.word	0x2000871c

080155c0 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t* settings)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b086      	sub	sp, #24
 80155c4:	af02      	add	r7, sp, #8
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
	settings_message* new_settings = (settings_message*) settings;
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	60fb      	str	r3, [r7, #12]

	rev_limit = (int)new_settings->rpm_limit;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	4a66      	ldr	r2, [pc, #408]	; (801576c <_ZN8MainView14updateSettingsEPh+0x1ac>)
 80155d4:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int)(new_settings->rpm8*1000.0f), 0, 0);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	6a1b      	ldr	r3, [r3, #32]
 80155e0:	ee07 3a90 	vmov	s15, r3
 80155e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155e8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8015770 <_ZN8MainView14updateSettingsEPh+0x1b0>
 80155ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155f4:	ee17 3a90 	vmov	r3, s15
 80155f8:	b21a      	sxth	r2, r3
 80155fa:	2300      	movs	r3, #0
 80155fc:	9300      	str	r3, [sp, #0]
 80155fe:	2300      	movs	r3, #0
 8015600:	2100      	movs	r1, #0
 8015602:	f003 f86d 	bl	80186e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801560c:	4618      	mov	r0, r3
 801560e:	f007 f893 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	4a55      	ldr	r2, [pc, #340]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801561e:	2102      	movs	r1, #2
 8015620:	f008 fcf2 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 801562a:	4618      	mov	r0, r3
 801562c:	f005 f852 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8015636:	4618      	mov	r0, r3
 8015638:	f007 f87e 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	689b      	ldr	r3, [r3, #8]
 8015646:	4a4b      	ldr	r2, [pc, #300]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015648:	2102      	movs	r1, #2
 801564a:	f008 fcdd 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015654:	4618      	mov	r0, r3
 8015656:	f005 f83d 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8015660:	4618      	mov	r0, r3
 8015662:	f007 f869 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	4a40      	ldr	r2, [pc, #256]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015672:	2102      	movs	r1, #2
 8015674:	f008 fcc8 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801567e:	4618      	mov	r0, r3
 8015680:	f005 f828 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801568a:	4618      	mov	r0, r3
 801568c:	f007 f854 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	691b      	ldr	r3, [r3, #16]
 801569a:	4a36      	ldr	r2, [pc, #216]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801569c:	2102      	movs	r1, #2
 801569e:	f008 fcb3 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80156a8:	4618      	mov	r0, r3
 80156aa:	f005 f813 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80156b4:	4618      	mov	r0, r3
 80156b6:	f007 f83f 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	695b      	ldr	r3, [r3, #20]
 80156c4:	4a2b      	ldr	r2, [pc, #172]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80156c6:	2102      	movs	r1, #2
 80156c8:	f008 fc9e 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80156d2:	4618      	mov	r0, r3
 80156d4:	f004 fffe 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80156de:	4618      	mov	r0, r3
 80156e0:	f007 f82a 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	699b      	ldr	r3, [r3, #24]
 80156ee:	4a21      	ldr	r2, [pc, #132]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80156f0:	2102      	movs	r1, #2
 80156f2:	f008 fc89 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80156fc:	4618      	mov	r0, r3
 80156fe:	f004 ffe9 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015708:	4618      	mov	r0, r3
 801570a:	f007 f815 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	69db      	ldr	r3, [r3, #28]
 8015718:	4a16      	ldr	r2, [pc, #88]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801571a:	2102      	movs	r1, #2
 801571c:	f008 fc74 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015726:	4618      	mov	r0, r3
 8015728:	f004 ffd4 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8015732:	4618      	mov	r0, r3
 8015734:	f007 f800 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	6a1b      	ldr	r3, [r3, #32]
 8015742:	4a0c      	ldr	r2, [pc, #48]	; (8015774 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8015744:	2102      	movs	r1, #2
 8015746:	f008 fc5f 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8015750:	4618      	mov	r0, r3
 8015752:	f004 ffbf 	bl	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801575c:	4618      	mov	r0, r3
 801575e:	f006 ffeb 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8015762:	bf00      	nop
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	20000038 	.word	0x20000038
 8015770:	447a0000 	.word	0x447a0000
 8015774:	080295b4 	.word	0x080295b4

08015778 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t* newValue)
{
 8015778:	b590      	push	{r4, r7, lr}
 801577a:	b085      	sub	sp, #20
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	6039      	str	r1, [r7, #0]

	static bool background_is_black = false;
	display_values* values = (display_values*) newValue;
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	4b0e      	ldr	r3, [pc, #56]	; (80157c4 <_ZN8MainView9updateValEPh+0x4c>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	429a      	cmp	r2, r3
 8015790:	bfac      	ite	ge
 8015792:	2301      	movge	r3, #1
 8015794:	2300      	movlt	r3, #0
 8015796:	72fb      	strb	r3, [r7, #11]
	if(on_rev_limiter)
 8015798:	7afb      	ldrb	r3, [r7, #11]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d016      	beq.n	80157cc <_ZN8MainView9updateValEPh+0x54>
	{
		background_is_black = false;
 801579e:	4b0a      	ldr	r3, [pc, #40]	; (80157c8 <_ZN8MainView9updateValEPh+0x50>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80157aa:	f7ff fec7 	bl	801553c <_ZL20getColorFromRevLimitv>
 80157ae:	4603      	mov	r3, r0
 80157b0:	4619      	mov	r1, r3
 80157b2:	4620      	mov	r0, r4
 80157b4:	f7fc fc0a 	bl	8011fcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	3340      	adds	r3, #64	; 0x40
 80157bc:	4618      	mov	r0, r3
 80157be:	f006 ffbb 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
 80157c2:	e01c      	b.n	80157fe <_ZN8MainView9updateValEPh+0x86>
 80157c4:	20000038 	.word	0x20000038
 80157c8:	20008740 	.word	0x20008740
	}
	else if(!background_is_black){
 80157cc:	4bac      	ldr	r3, [pc, #688]	; (8015a80 <_ZN8MainView9updateValEPh+0x308>)
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	f083 0301 	eor.w	r3, r3, #1
 80157d4:	b2db      	uxtb	r3, r3
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d011      	beq.n	80157fe <_ZN8MainView9updateValEPh+0x86>
		backgroundBox.setColor(getBlackColor());
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80157e0:	f7ff fe9c 	bl	801551c <_ZL13getBlackColorv>
 80157e4:	4603      	mov	r3, r0
 80157e6:	4619      	mov	r1, r3
 80157e8:	4620      	mov	r0, r4
 80157ea:	f7fc fbef 	bl	8011fcc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	3340      	adds	r3, #64	; 0x40
 80157f2:	4618      	mov	r0, r3
 80157f4:	f006 ffa0 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 80157f8:	4ba1      	ldr	r3, [pc, #644]	; (8015a80 <_ZN8MainView9updateValEPh+0x308>)
 80157fa:	2201      	movs	r2, #1
 80157fc:	701a      	strb	r2, [r3, #0]
	}

	if(values->rpm != prev_rpm) {
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	4ba0      	ldr	r3, [pc, #640]	; (8015a84 <_ZN8MainView9updateValEPh+0x30c>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	429a      	cmp	r2, r3
 8015808:	d021      	beq.n	801584e <_ZN8MainView9updateValEPh+0xd6>
		prev_rpm = values->rpm;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	4a9d      	ldr	r2, [pc, #628]	; (8015a84 <_ZN8MainView9updateValEPh+0x30c>)
 8015810:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	4619      	mov	r1, r3
 801581e:	4610      	mov	r0, r2
 8015820:	f002 fe48 	bl	80184b4 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801582a:	4618      	mov	r0, r3
 801582c:	f006 ff84 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	4a93      	ldr	r2, [pc, #588]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 801583c:	2105      	movs	r1, #5
 801583e:	f008 fbe3 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8015848:	4618      	mov	r0, r3
 801584a:	f006 ff75 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->map != prev_map) {
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	689a      	ldr	r2, [r3, #8]
 8015852:	4b8e      	ldr	r3, [pc, #568]	; (8015a8c <_ZN8MainView9updateValEPh+0x314>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	429a      	cmp	r2, r3
 8015858:	d012      	beq.n	8015880 <_ZN8MainView9updateValEPh+0x108>
		prev_map = values->map;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	689b      	ldr	r3, [r3, #8]
 801585e:	4a8b      	ldr	r2, [pc, #556]	; (8015a8c <_ZN8MainView9updateValEPh+0x314>)
 8015860:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	689b      	ldr	r3, [r3, #8]
 801586c:	4a86      	ldr	r2, [pc, #536]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 801586e:	2105      	movs	r1, #5
 8015870:	f008 fbca 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801587a:	4618      	mov	r0, r3
 801587c:	f006 ff5c 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->clt != prev_clt) {
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	685a      	ldr	r2, [r3, #4]
 8015884:	4b82      	ldr	r3, [pc, #520]	; (8015a90 <_ZN8MainView9updateValEPh+0x318>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	429a      	cmp	r2, r3
 801588a:	d012      	beq.n	80158b2 <_ZN8MainView9updateValEPh+0x13a>
		prev_clt = values->clt;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	4a7f      	ldr	r2, [pc, #508]	; (8015a90 <_ZN8MainView9updateValEPh+0x318>)
 8015892:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	4a7a      	ldr	r2, [pc, #488]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 80158a0:	2105      	movs	r1, #5
 80158a2:	f008 fbb1 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80158ac:	4618      	mov	r0, r3
 80158ae:	f006 ff43 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda != prev_lambda) {
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80158b8:	4b76      	ldr	r3, [pc, #472]	; (8015a94 <_ZN8MainView9updateValEPh+0x31c>)
 80158ba:	edd3 7a00 	vldr	s15, [r3]
 80158be:	eeb4 7a67 	vcmp.f32	s14, s15
 80158c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c6:	d015      	beq.n	80158f4 <_ZN8MainView9updateValEPh+0x17c>
		prev_lambda = values->lambda;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	4a71      	ldr	r2, [pc, #452]	; (8015a94 <_ZN8MainView9updateValEPh+0x31c>)
 80158ce:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",values->lambda);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80158dc:	eeb0 0a67 	vmov.f32	s0, s15
 80158e0:	4a6d      	ldr	r2, [pc, #436]	; (8015a98 <_ZN8MainView9updateValEPh+0x320>)
 80158e2:	2105      	movs	r1, #5
 80158e4:	f7ff fd7a 	bl	80153dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		LambdaValue.invalidate();
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80158ee:	4618      	mov	r0, r3
 80158f0:	f006 ff22 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->lambda_trgt != prev_lambda_targ) {
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80158fa:	4b68      	ldr	r3, [pc, #416]	; (8015a9c <_ZN8MainView9updateValEPh+0x324>)
 80158fc:	edd3 7a00 	vldr	s15, [r3]
 8015900:	eeb4 7a67 	vcmp.f32	s14, s15
 8015904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015908:	d015      	beq.n	8015936 <_ZN8MainView9updateValEPh+0x1be>
		prev_lambda_targ = values->lambda_trgt;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	691b      	ldr	r3, [r3, #16]
 801590e:	4a63      	ldr	r2, [pc, #396]	; (8015a9c <_ZN8MainView9updateValEPh+0x324>)
 8015910:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",values->lambda_trgt);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	edd3 7a04 	vldr	s15, [r3, #16]
 801591e:	eeb0 0a67 	vmov.f32	s0, s15
 8015922:	4a5d      	ldr	r2, [pc, #372]	; (8015a98 <_ZN8MainView9updateValEPh+0x320>)
 8015924:	2105      	movs	r1, #5
 8015926:	f7ff fd59 	bl	80153dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		TrgtValue.invalidate();
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015930:	4618      	mov	r0, r3
 8015932:	f006 ff01 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_press != prev_oil_press) {
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	ed93 7a06 	vldr	s14, [r3, #24]
 801593c:	4b58      	ldr	r3, [pc, #352]	; (8015aa0 <_ZN8MainView9updateValEPh+0x328>)
 801593e:	edd3 7a00 	vldr	s15, [r3]
 8015942:	eeb4 7a67 	vcmp.f32	s14, s15
 8015946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594a:	d015      	beq.n	8015978 <_ZN8MainView9updateValEPh+0x200>
		prev_oil_press = values->oil_press;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	699b      	ldr	r3, [r3, #24]
 8015950:	4a53      	ldr	r2, [pc, #332]	; (8015aa0 <_ZN8MainView9updateValEPh+0x328>)
 8015952:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%.1f",values->oil_press);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	edd3 7a06 	vldr	s15, [r3, #24]
 8015960:	eeb0 0a67 	vmov.f32	s0, s15
 8015964:	4a4f      	ldr	r2, [pc, #316]	; (8015aa4 <_ZN8MainView9updateValEPh+0x32c>)
 8015966:	2105      	movs	r1, #5
 8015968:	f7ff fd38 	bl	80153dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		OILPressureValue.invalidate();
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8015972:	4618      	mov	r0, r3
 8015974:	f006 fee0 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->fuel_press != prev_fuel_press) {
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	69da      	ldr	r2, [r3, #28]
 801597c:	4b4a      	ldr	r3, [pc, #296]	; (8015aa8 <_ZN8MainView9updateValEPh+0x330>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	429a      	cmp	r2, r3
 8015982:	d012      	beq.n	80159aa <_ZN8MainView9updateValEPh+0x232>
		prev_fuel_press = values->fuel_press;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	69db      	ldr	r3, [r3, #28]
 8015988:	4a47      	ldr	r2, [pc, #284]	; (8015aa8 <_ZN8MainView9updateValEPh+0x330>)
 801598a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",values->fuel_press);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	69db      	ldr	r3, [r3, #28]
 8015996:	4a3c      	ldr	r2, [pc, #240]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 8015998:	2105      	movs	r1, #5
 801599a:	f008 fb35 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		FuelPValue.invalidate();
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80159a4:	4618      	mov	r0, r3
 80159a6:	f006 fec7 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->oil_tmp != prev_oil_tmp) {
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	695a      	ldr	r2, [r3, #20]
 80159ae:	4b3f      	ldr	r3, [pc, #252]	; (8015aac <_ZN8MainView9updateValEPh+0x334>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d012      	beq.n	80159dc <_ZN8MainView9updateValEPh+0x264>
		prev_oil_tmp = values->oil_tmp;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	695b      	ldr	r3, [r3, #20]
 80159ba:	4a3c      	ldr	r2, [pc, #240]	; (8015aac <_ZN8MainView9updateValEPh+0x334>)
 80159bc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",values->oil_tmp);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	695b      	ldr	r3, [r3, #20]
 80159c8:	4a2f      	ldr	r2, [pc, #188]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 80159ca:	2105      	movs	r1, #5
 80159cc:	f008 fb1c 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		OILTempValue.invalidate();
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80159d6:	4618      	mov	r0, r3
 80159d8:	f006 feae 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->iat != prev_iat) {
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	6a1a      	ldr	r2, [r3, #32]
 80159e0:	4b33      	ldr	r3, [pc, #204]	; (8015ab0 <_ZN8MainView9updateValEPh+0x338>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d012      	beq.n	8015a0e <_ZN8MainView9updateValEPh+0x296>
		prev_iat = values->iat;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	6a1b      	ldr	r3, [r3, #32]
 80159ec:	4a30      	ldr	r2, [pc, #192]	; (8015ab0 <_ZN8MainView9updateValEPh+0x338>)
 80159ee:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d",values->iat);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	6a1b      	ldr	r3, [r3, #32]
 80159fa:	4a23      	ldr	r2, [pc, #140]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 80159fc:	2105      	movs	r1, #5
 80159fe:	f008 fb03 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f006 fe95 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt != prev_egt) {
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a12:	4b28      	ldr	r3, [pc, #160]	; (8015ab4 <_ZN8MainView9updateValEPh+0x33c>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d012      	beq.n	8015a40 <_ZN8MainView9updateValEPh+0x2c8>
		prev_egt = values->egt;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1e:	4a25      	ldr	r2, [pc, #148]	; (8015ab4 <_ZN8MainView9updateValEPh+0x33c>)
 8015a20:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d",values->egt);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a2c:	4a16      	ldr	r2, [pc, #88]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 8015a2e:	2105      	movs	r1, #5
 8015a30:	f008 faea 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f006 fe7c 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->egt_2 != prev_egt_2) {
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a44:	4b1c      	ldr	r3, [pc, #112]	; (8015ab8 <_ZN8MainView9updateValEPh+0x340>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d012      	beq.n	8015a72 <_ZN8MainView9updateValEPh+0x2fa>
		prev_egt_2 = values->egt_2;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a50:	4a19      	ldr	r2, [pc, #100]	; (8015ab8 <_ZN8MainView9updateValEPh+0x340>)
 8015a52:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d",values->egt_2);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a5e:	4a0a      	ldr	r2, [pc, #40]	; (8015a88 <_ZN8MainView9updateValEPh+0x310>)
 8015a60:	2105      	movs	r1, #5
 8015a62:	f008 fad1 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f006 fe63 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->tps != prev_tps) {
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a76:	4b11      	ldr	r3, [pc, #68]	; (8015abc <_ZN8MainView9updateValEPh+0x344>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d042      	beq.n	8015b04 <_ZN8MainView9updateValEPh+0x38c>
 8015a7e:	e01f      	b.n	8015ac0 <_ZN8MainView9updateValEPh+0x348>
 8015a80:	20008740 	.word	0x20008740
 8015a84:	2000003c 	.word	0x2000003c
 8015a88:	080295b4 	.word	0x080295b4
 8015a8c:	20000040 	.word	0x20000040
 8015a90:	20000044 	.word	0x20000044
 8015a94:	20000048 	.word	0x20000048
 8015a98:	080295b8 	.word	0x080295b8
 8015a9c:	2000004c 	.word	0x2000004c
 8015aa0:	20008724 	.word	0x20008724
 8015aa4:	080295c0 	.word	0x080295c0
 8015aa8:	20008728 	.word	0x20008728
 8015aac:	20008720 	.word	0x20008720
 8015ab0:	2000872c 	.word	0x2000872c
 8015ab4:	20008730 	.word	0x20008730
 8015ab8:	20008734 	.word	0x20008734
 8015abc:	20008738 	.word	0x20008738
		prev_tps = values->tps;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ac4:	4a22      	ldr	r2, [pc, #136]	; (8015b50 <_ZN8MainView9updateValEPh+0x3d8>)
 8015ac6:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	4610      	mov	r0, r2
 8015ad6:	f002 fb9d 	bl	8018214 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f006 fe29 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",values->tps);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015af0:	4a18      	ldr	r2, [pc, #96]	; (8015b54 <_ZN8MainView9updateValEPh+0x3dc>)
 8015af2:	2105      	movs	r1, #5
 8015af4:	f008 fa88 	bl	801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		TpsNumberValue.invalidate();
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8015afe:	4618      	mov	r0, r3
 8015b00:	f006 fe1a 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(values->batt_v != prev_batt_v) {
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8015b0a:	4b13      	ldr	r3, [pc, #76]	; (8015b58 <_ZN8MainView9updateValEPh+0x3e0>)
 8015b0c:	edd3 7a00 	vldr	s15, [r3]
 8015b10:	eeb4 7a67 	vcmp.f32	s14, s15
 8015b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b18:	d015      	beq.n	8015b46 <_ZN8MainView9updateValEPh+0x3ce>
		prev_batt_v = values->batt_v;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b1e:	4a0e      	ldr	r2, [pc, #56]	; (8015b58 <_ZN8MainView9updateValEPh+0x3e0>)
 8015b20:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%.2f",values->batt_v);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8015b32:	4a0a      	ldr	r2, [pc, #40]	; (8015b5c <_ZN8MainView9updateValEPh+0x3e4>)
 8015b34:	2105      	movs	r1, #5
 8015b36:	f7ff fc51 	bl	80153dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		BatteryVoltage.invalidate();
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8015b40:	4618      	mov	r0, r3
 8015b42:	f006 fdf9 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 8015b46:	bf00      	nop
 8015b48:	3714      	adds	r7, #20
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd90      	pop	{r4, r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	20008738 	.word	0x20008738
 8015b54:	080295b4 	.word	0x080295b4
 8015b58:	2000873c 	.word	0x2000873c
 8015b5c:	080295b8 	.word	0x080295b8

08015b60 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8015b6e:	2200      	movs	r2, #0
 8015b70:	2134      	movs	r1, #52	; 0x34
 8015b72:	2001      	movs	r0, #1
 8015b74:	f7f7 f95f 	bl	800ce36 <xQueueGenericCreate>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	4b07      	ldr	r3, [pc, #28]	; (8015b98 <_ZN5ModelC1Ev+0x38>)
 8015b7c:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8015b7e:	2200      	movs	r2, #0
 8015b80:	2128      	movs	r1, #40	; 0x28
 8015b82:	2001      	movs	r0, #1
 8015b84:	f7f7 f957 	bl	800ce36 <xQueueGenericCreate>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	4b04      	ldr	r3, [pc, #16]	; (8015b9c <_ZN5ModelC1Ev+0x3c>)
 8015b8c:	601a      	str	r2, [r3, #0]
}
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4618      	mov	r0, r3
 8015b92:	3708      	adds	r7, #8
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}
 8015b98:	200087a0 	.word	0x200087a0
 8015b9c:	200087a4 	.word	0x200087a4

08015ba0 <_ZN5Model4tickEv>:

void Model::tick()
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b082      	sub	sp, #8
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8015ba8:	4b1a      	ldr	r3, [pc, #104]	; (8015c14 <_ZN5Model4tickEv+0x74>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	2200      	movs	r2, #0
 8015bae:	491a      	ldr	r1, [pc, #104]	; (8015c18 <_ZN5Model4tickEv+0x78>)
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f7 fbd1 	bl	800d358 <xQueueReceive>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	bf0c      	ite	eq
 8015bbc:	2301      	moveq	r3, #1
 8015bbe:	2300      	movne	r3, #0
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d009      	beq.n	8015bda <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	3308      	adds	r3, #8
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	4910      	ldr	r1, [pc, #64]	; (8015c18 <_ZN5Model4tickEv+0x78>)
 8015bd6:	4610      	mov	r0, r2
 8015bd8:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8015bda:	4b10      	ldr	r3, [pc, #64]	; (8015c1c <_ZN5Model4tickEv+0x7c>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	2200      	movs	r2, #0
 8015be0:	490f      	ldr	r1, [pc, #60]	; (8015c20 <_ZN5Model4tickEv+0x80>)
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7f7 fbb8 	bl	800d358 <xQueueReceive>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	bf0c      	ite	eq
 8015bee:	2301      	moveq	r3, #1
 8015bf0:	2300      	movne	r3, #0
 8015bf2:	b2db      	uxtb	r3, r3
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d009      	beq.n	8015c0c <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	330c      	adds	r3, #12
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	4906      	ldr	r1, [pc, #24]	; (8015c20 <_ZN5Model4tickEv+0x80>)
 8015c08:	4610      	mov	r0, r2
 8015c0a:	4798      	blx	r3
	}
}
 8015c0c:	bf00      	nop
 8015c0e:	3708      	adds	r7, #8
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	200087a0 	.word	0x200087a0
 8015c18:	20008744 	.word	0x20008744
 8015c1c:	200087a4 	.word	0x200087a4
 8015c20:	20008778 	.word	0x20008778

08015c24 <_ZN21SecondScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~SecondScreenPresenter() {};
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	4a09      	ldr	r2, [pc, #36]	; (8015c54 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	601a      	str	r2, [r3, #0]
 8015c32:	4a09      	ldr	r2, [pc, #36]	; (8015c58 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	605a      	str	r2, [r3, #4]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f7ff fb09 	bl	8015254 <_ZN13ModelListenerD1Ev>
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7ff fac1 	bl	80151cc <_ZN8touchgfx9PresenterD1Ev>
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	0802a2dc 	.word	0x0802a2dc
 8015c58:	0802a2f4 	.word	0x0802a2f4

08015c5c <_ZThn4_N21SecondScreenPresenterD1Ev>:
 8015c5c:	f1a0 0004 	sub.w	r0, r0, #4
 8015c60:	e7e0      	b.n	8015c24 <_ZN21SecondScreenPresenterD1Ev>
 8015c62:	bf00      	nop

08015c64 <_ZN21SecondScreenPresenterD0Ev>:
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f7ff ffd9 	bl	8015c24 <_ZN21SecondScreenPresenterD1Ev>
 8015c72:	2110      	movs	r1, #16
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f012 f934 	bl	8027ee2 <_ZdlPvj>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3708      	adds	r7, #8
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}

08015c84 <_ZThn4_N21SecondScreenPresenterD0Ev>:
 8015c84:	f1a0 0004 	sub.w	r0, r0, #4
 8015c88:	e7ec      	b.n	8015c64 <_ZN21SecondScreenPresenterD0Ev>
	...

08015c8c <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	6039      	str	r1, [r7, #0]
    : view(v)
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7ff fab7 	bl	801520c <_ZN8touchgfx9PresenterC1Ev>
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7ff fac2 	bl	801522c <_ZN13ModelListenerC1Ev>
 8015ca8:	4a06      	ldr	r2, [pc, #24]	; (8015cc4 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	601a      	str	r2, [r3, #0]
 8015cae:	4a06      	ldr	r2, [pc, #24]	; (8015cc8 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	605a      	str	r2, [r3, #4]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	683a      	ldr	r2, [r7, #0]
 8015cb8:	60da      	str	r2, [r3, #12]
{

}
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3708      	adds	r7, #8
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	0802a2dc 	.word	0x0802a2dc
 8015cc8:	0802a2f4 	.word	0x0802a2f4

08015ccc <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]

}
 8015cd4:	bf00      	nop
 8015cd6:	370c      	adds	r7, #12
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr

08015ce0 <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]

}
 8015ce8:	bf00      	nop
 8015cea:	370c      	adds	r7, #12
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <_ZN16SecondScreenViewD1Ev>:

class SecondScreenView : public SecondScreenViewBase
{
public:
    SecondScreenView();
    virtual ~SecondScreenView() {}
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	4a05      	ldr	r2, [pc, #20]	; (8015d14 <_ZN16SecondScreenViewD1Ev+0x20>)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	601a      	str	r2, [r3, #0]
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fe fe7b 	bl	8014a00 <_ZN20SecondScreenViewBaseD1Ev>
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	3708      	adds	r7, #8
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}
 8015d14:	0802a30c 	.word	0x0802a30c

08015d18 <_ZN16SecondScreenViewD0Ev>:
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b082      	sub	sp, #8
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	6078      	str	r0, [r7, #4]
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f7ff ffe7 	bl	8015cf4 <_ZN16SecondScreenViewD1Ev>
 8015d26:	21f8      	movs	r1, #248	; 0xf8
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f012 f8da 	bl	8027ee2 <_ZdlPvj>
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <_ZN16SecondScreenViewC1Ev>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>

SecondScreenView::SecondScreenView()
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7fe fe9a 	bl	8014a7c <_ZN20SecondScreenViewBaseC1Ev>
 8015d48:	4a03      	ldr	r2, [pc, #12]	; (8015d58 <_ZN16SecondScreenViewC1Ev+0x20>)
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	601a      	str	r2, [r3, #0]
{

}
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	4618      	mov	r0, r3
 8015d52:	3708      	adds	r7, #8
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd80      	pop	{r7, pc}
 8015d58:	0802a30c 	.word	0x0802a30c

08015d5c <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen()
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::setupScreen();
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7fe ff2a 	bl	8014bc0 <_ZN20SecondScreenViewBase11setupScreenEv>
}
 8015d6c:	bf00      	nop
 8015d6e:	3708      	adds	r7, #8
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen()
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
    SecondScreenViewBase::tearDownScreen();
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fc f85a 	bl	8011e38 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015d84:	bf00      	nop
 8015d86:	3708      	adds	r7, #8
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
    {
 8015d94:	4a04      	ldr	r2, [pc, #16]	; (8015da8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	601a      	str	r2, [r3, #0]
    }
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	370c      	adds	r7, #12
 8015da0:	46bd      	mov	sp, r7
 8015da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da6:	4770      	bx	lr
 8015da8:	0802a358 	.word	0x0802a358

08015dac <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
    }
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7ff ffe9 	bl	8015d8c <_ZN8touchgfx15TouchControllerD1Ev>
 8015dba:	2104      	movs	r1, #4
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f012 f890 	bl	8027ee2 <_ZdlPvj>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3708      	adds	r7, #8
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8015dd4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8015dd8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8015ddc:	f7f9 fc76 	bl	800f6cc <BSP_TS_Init>
}
 8015de0:	bf00      	nop
 8015de2:	3708      	adds	r7, #8
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b090      	sub	sp, #64	; 0x40
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	60f8      	str	r0, [r7, #12]
 8015df0:	60b9      	str	r1, [r7, #8]
 8015df2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8015df4:	f107 0314 	add.w	r3, r7, #20
 8015df8:	222c      	movs	r2, #44	; 0x2c
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f012 f924 	bl	802804a <memset>
	    BSP_TS_GetState(&state);
 8015e02:	f107 0314 	add.w	r3, r7, #20
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7f9 fca0 	bl	800f74c <BSP_TS_GetState>
	    if (state.touchDetected)
 8015e0c:	7d3b      	ldrb	r3, [r7, #20]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d009      	beq.n	8015e26 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 8015e12:	8afb      	ldrh	r3, [r7, #22]
 8015e14:	461a      	mov	r2, r3
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 8015e1a:	8c3b      	ldrh	r3, [r7, #32]
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	601a      	str	r2, [r3, #0]

	        return true;
 8015e22:	2301      	movs	r3, #1
 8015e24:	e000      	b.n	8015e28 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 8015e26:	2300      	movs	r3, #0
}
 8015e28:	4618      	mov	r0, r3
 8015e2a:	3740      	adds	r7, #64	; 0x40
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}

08015e30 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	4a05      	ldr	r2, [pc, #20]	; (8015e50 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	601a      	str	r2, [r3, #0]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7ff ffa3 	bl	8015d8c <_ZN8touchgfx15TouchControllerD1Ev>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	0802a340 	.word	0x0802a340

08015e54 <_ZN20STM32TouchControllerD0Ev>:
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b082      	sub	sp, #8
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6878      	ldr	r0, [r7, #4]
 8015e5e:	f7ff ffe7 	bl	8015e30 <_ZN20STM32TouchControllerD1Ev>
 8015e62:	2104      	movs	r1, #4
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f012 f83c 	bl	8027ee2 <_ZdlPvj>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	71fb      	strb	r3, [r7, #7]

}
 8015e7e:	bf00      	nop
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr

08015e8a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015e8a:	b480      	push	{r7}
 8015e8c:	b083      	sub	sp, #12
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	4603      	mov	r3, r0
 8015e92:	71fb      	strb	r3, [r7, #7]

}
 8015e94:	bf00      	nop
 8015e96:	370c      	adds	r7, #12
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr

08015ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	71fb      	strb	r3, [r7, #7]

}
 8015eaa:	bf00      	nop
 8015eac:	370c      	adds	r7, #12
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb4:	4770      	bx	lr
	...

08015eb8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
    {
 8015ec0:	4a04      	ldr	r2, [pc, #16]	; (8015ed4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	601a      	str	r2, [r3, #0]
    }
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4618      	mov	r0, r3
 8015eca:	370c      	adds	r7, #12
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed2:	4770      	bx	lr
 8015ed4:	0802b110 	.word	0x0802b110

08015ed8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
    }
 8015ee0:	6878      	ldr	r0, [r7, #4]
 8015ee2:	f7ff ffe9 	bl	8015eb8 <_ZN8touchgfx3HALD1Ev>
 8015ee6:	2178      	movs	r1, #120	; 0x78
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f011 fffa 	bl	8027ee2 <_ZdlPvj>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3708      	adds	r7, #8
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015ef8:	b480      	push	{r7}
 8015efa:	b083      	sub	sp, #12
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	460b      	mov	r3, r1
 8015f02:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	78fa      	ldrb	r2, [r7, #3]
 8015f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015f14:	bf00      	nop
 8015f16:	370c      	adds	r7, #12
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1e:	4770      	bx	lr

08015f20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	685a      	ldr	r2, [r3, #4]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	4610      	mov	r0, r2
 8015f36:	4798      	blx	r3
 8015f38:	4603      	mov	r3, r0
    }
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3708      	adds	r7, #8
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b082      	sub	sp, #8
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f003 fbbc 	bl	80196c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	3390      	adds	r3, #144	; 0x90
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	4798      	blx	r3
    }
 8015f5c:	bf00      	nop
 8015f5e:	3708      	adds	r7, #8
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}

08015f64 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8015f64:	b480      	push	{r7}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
    {
        return false;
 8015f6e:	2300      	movs	r3, #0
    }
 8015f70:	4618      	mov	r0, r3
 8015f72:	370c      	adds	r7, #12
 8015f74:	46bd      	mov	sp, r7
 8015f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7a:	4770      	bx	lr

08015f7c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8015f7c:	b590      	push	{r4, r7, lr}
 8015f7e:	b08b      	sub	sp, #44	; 0x2c
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	4611      	mov	r1, r2
 8015f88:	461a      	mov	r2, r3
 8015f8a:	460b      	mov	r3, r1
 8015f8c:	80fb      	strh	r3, [r7, #6]
 8015f8e:	4613      	mov	r3, r2
 8015f90:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8015f92:	f7fa fb8d 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8015f96:	4602      	mov	r2, r0
 8015f98:	6813      	ldr	r3, [r2, #0]
 8015f9a:	3328      	adds	r3, #40	; 0x28
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	4610      	mov	r0, r2
 8015fa0:	4798      	blx	r3
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8015fa6:	8b7b      	ldrh	r3, [r7, #26]
 8015fa8:	4a3d      	ldr	r2, [pc, #244]	; (80160a0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8015faa:	8812      	ldrh	r2, [r2, #0]
 8015fac:	fb02 f303 	mul.w	r3, r2, r3
 8015fb0:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8015fb2:	68bb      	ldr	r3, [r7, #8]
 8015fb4:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8015fbe:	797b      	ldrb	r3, [r7, #5]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d005      	beq.n	8015fd0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8015fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	4413      	add	r3, r2
 8015fca:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8015fd0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d005      	beq.n	8015fe4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8015fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	4413      	add	r3, r2
 8015fde:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8015fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe2:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8015fe4:	88fb      	ldrh	r3, [r7, #6]
 8015fe6:	3b01      	subs	r3, #1
 8015fe8:	2b1f      	cmp	r3, #31
 8015fea:	d84d      	bhi.n	8016088 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8015fec:	a201      	add	r2, pc, #4	; (adr r2, 8015ff4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8015fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff2:	bf00      	nop
 8015ff4:	08016075 	.word	0x08016075
 8015ff8:	08016075 	.word	0x08016075
 8015ffc:	08016089 	.word	0x08016089
 8016000:	08016075 	.word	0x08016075
 8016004:	08016089 	.word	0x08016089
 8016008:	08016089 	.word	0x08016089
 801600c:	08016089 	.word	0x08016089
 8016010:	08016075 	.word	0x08016075
 8016014:	08016089 	.word	0x08016089
 8016018:	08016089 	.word	0x08016089
 801601c:	08016089 	.word	0x08016089
 8016020:	08016089 	.word	0x08016089
 8016024:	08016089 	.word	0x08016089
 8016028:	08016089 	.word	0x08016089
 801602c:	08016089 	.word	0x08016089
 8016030:	08016075 	.word	0x08016075
 8016034:	08016089 	.word	0x08016089
 8016038:	08016089 	.word	0x08016089
 801603c:	08016089 	.word	0x08016089
 8016040:	08016089 	.word	0x08016089
 8016044:	08016089 	.word	0x08016089
 8016048:	08016089 	.word	0x08016089
 801604c:	08016089 	.word	0x08016089
 8016050:	08016075 	.word	0x08016075
 8016054:	08016089 	.word	0x08016089
 8016058:	08016089 	.word	0x08016089
 801605c:	08016089 	.word	0x08016089
 8016060:	08016089 	.word	0x08016089
 8016064:	08016089 	.word	0x08016089
 8016068:	08016089 	.word	0x08016089
 801606c:	08016089 	.word	0x08016089
 8016070:	08016075 	.word	0x08016075
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	3374      	adds	r3, #116	; 0x74
 801607a:	681c      	ldr	r4, [r3, #0]
 801607c:	69fb      	ldr	r3, [r7, #28]
 801607e:	6a3a      	ldr	r2, [r7, #32]
 8016080:	68b9      	ldr	r1, [r7, #8]
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	47a0      	blx	r4
            break;
 8016086:	e006      	b.n	8016096 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8016088:	4b06      	ldr	r3, [pc, #24]	; (80160a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 801608a:	4a07      	ldr	r2, [pc, #28]	; (80160a8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 801608c:	f240 3125 	movw	r1, #805	; 0x325
 8016090:	4806      	ldr	r0, [pc, #24]	; (80160ac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8016092:	f011 ff51 	bl	8027f38 <__assert_func>
            break;
        }
    }
 8016096:	bf00      	nop
 8016098:	372c      	adds	r7, #44	; 0x2c
 801609a:	46bd      	mov	sp, r7
 801609c:	bd90      	pop	{r4, r7, pc}
 801609e:	bf00      	nop
 80160a0:	2000bee6 	.word	0x2000bee6
 80160a4:	080295c8 	.word	0x080295c8
 80160a8:	0802a46c 	.word	0x0802a46c
 80160ac:	080295e8 	.word	0x080295e8

080160b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	607a      	str	r2, [r7, #4]
 80160bc:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d106      	bne.n	80160d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80160c4:	4b11      	ldr	r3, [pc, #68]	; (801610c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80160c6:	4a12      	ldr	r2, [pc, #72]	; (8016110 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80160c8:	f240 3137 	movw	r1, #823	; 0x337
 80160cc:	4811      	ldr	r0, [pc, #68]	; (8016114 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80160ce:	f011 ff33 	bl	8027f38 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	68ba      	ldr	r2, [r7, #8]
 80160d6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	683a      	ldr	r2, [r7, #0]
 80160e2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	bf14      	ite	ne
 80160ea:	2301      	movne	r3, #1
 80160ec:	2300      	moveq	r3, #0
 80160ee:	b2da      	uxtb	r2, r3
 80160f0:	4b09      	ldr	r3, [pc, #36]	; (8016118 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80160f2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	bf14      	ite	ne
 80160fa:	2301      	movne	r3, #1
 80160fc:	2300      	moveq	r3, #0
 80160fe:	b2da      	uxtb	r2, r3
 8016100:	4b06      	ldr	r3, [pc, #24]	; (801611c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016102:	701a      	strb	r2, [r3, #0]
    }
 8016104:	bf00      	nop
 8016106:	3710      	adds	r7, #16
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	0802962c 	.word	0x0802962c
 8016110:	0802a41c 	.word	0x0802a41c
 8016114:	080295e8 	.word	0x080295e8
 8016118:	2000bee8 	.word	0x2000bee8
 801611c:	2000bee9 	.word	0x2000bee9

08016120 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
 8016128:	460b      	mov	r3, r1
 801612a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016130:	2b00      	cmp	r3, #0
 8016132:	d004      	beq.n	801613e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016138:	887a      	ldrh	r2, [r7, #2]
 801613a:	4610      	mov	r0, r2
 801613c:	4798      	blx	r3
        }
    }
 801613e:	bf00      	nop
 8016140:	3708      	adds	r7, #8
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}

08016146 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8016146:	b580      	push	{r7, lr}
 8016148:	b082      	sub	sp, #8
 801614a:	af00      	add	r7, sp, #0
 801614c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	685a      	ldr	r2, [r3, #4]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	3318      	adds	r3, #24
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	4610      	mov	r0, r2
 801615e:	4798      	blx	r3
 8016160:	4603      	mov	r3, r0
    }
 8016162:	4618      	mov	r0, r3
 8016164:	3708      	adds	r7, #8
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
	...

0801616c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 801616c:	b480      	push	{r7}
 801616e:	b083      	sub	sp, #12
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016180:	429a      	cmp	r2, r3
 8016182:	d017      	beq.n	80161b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016184:	4b1a      	ldr	r3, [pc, #104]	; (80161f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d12a      	bne.n	80161e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801618c:	4b19      	ldr	r3, [pc, #100]	; (80161f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801618e:	881a      	ldrh	r2, [r3, #0]
 8016190:	4b19      	ldr	r3, [pc, #100]	; (80161f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016192:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016194:	4b19      	ldr	r3, [pc, #100]	; (80161fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016196:	881a      	ldrh	r2, [r3, #0]
 8016198:	4b19      	ldr	r3, [pc, #100]	; (8016200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801619a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801619c:	4b16      	ldr	r3, [pc, #88]	; (80161f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801619e:	881a      	ldrh	r2, [r3, #0]
 80161a0:	4b16      	ldr	r3, [pc, #88]	; (80161fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80161a2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80161a4:	4b16      	ldr	r3, [pc, #88]	; (8016200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80161a6:	881a      	ldrh	r2, [r3, #0]
 80161a8:	4b12      	ldr	r3, [pc, #72]	; (80161f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80161aa:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80161ac:	4b10      	ldr	r3, [pc, #64]	; (80161f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80161ae:	2201      	movs	r2, #1
 80161b0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80161b2:	e016      	b.n	80161e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80161b4:	4b0e      	ldr	r3, [pc, #56]	; (80161f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d012      	beq.n	80161e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80161bc:	4b0f      	ldr	r3, [pc, #60]	; (80161fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80161be:	881a      	ldrh	r2, [r3, #0]
 80161c0:	4b0d      	ldr	r3, [pc, #52]	; (80161f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80161c2:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80161c4:	4b0b      	ldr	r3, [pc, #44]	; (80161f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80161c6:	881a      	ldrh	r2, [r3, #0]
 80161c8:	4b0d      	ldr	r3, [pc, #52]	; (8016200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80161ca:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80161cc:	4b0c      	ldr	r3, [pc, #48]	; (8016200 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80161ce:	881a      	ldrh	r2, [r3, #0]
 80161d0:	4b0a      	ldr	r3, [pc, #40]	; (80161fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80161d2:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80161d4:	4b08      	ldr	r3, [pc, #32]	; (80161f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80161d6:	881a      	ldrh	r2, [r3, #0]
 80161d8:	4b06      	ldr	r3, [pc, #24]	; (80161f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80161da:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80161dc:	4b04      	ldr	r3, [pc, #16]	; (80161f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80161de:	2200      	movs	r2, #0
 80161e0:	701a      	strb	r2, [r3, #0]
    }
 80161e2:	bf00      	nop
 80161e4:	370c      	adds	r7, #12
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
 80161ee:	bf00      	nop
 80161f0:	2000bee2 	.word	0x2000bee2
 80161f4:	2000bede 	.word	0x2000bede
 80161f8:	2000bee4 	.word	0x2000bee4
 80161fc:	2000bee0 	.word	0x2000bee0
 8016200:	2000bee6 	.word	0x2000bee6

08016204 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	4618      	mov	r0, r3
 8016210:	f002 fcdc 	bl	8018bcc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
 8016224:	4a05      	ldr	r2, [pc, #20]	; (801623c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	601a      	str	r2, [r3, #0]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	4618      	mov	r0, r3
 801622e:	f7ff fe43 	bl	8015eb8 <_ZN8touchgfx3HALD1Ev>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	4618      	mov	r0, r3
 8016236:	3708      	adds	r7, #8
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	0802a644 	.word	0x0802a644

08016240 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7ff ffe7 	bl	801621c <_ZN20TouchGFXGeneratedHALD1Ev>
 801624e:	2178      	movs	r1, #120	; 0x78
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f011 fe46 	bl	8027ee2 <_ZdlPvj>
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	4618      	mov	r0, r3
 801625a:	3708      	adds	r7, #8
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}

08016260 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	4618      	mov	r0, r3
 801626c:	f7ff ffca 	bl	8016204 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8016270:	bf00      	nop
 8016272:	3708      	adds	r7, #8
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}

08016278 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	4618      	mov	r0, r3
 8016284:	f001 fb08 	bl	8017898 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8016288:	bf00      	nop
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	4618      	mov	r0, r3
 801629c:	f001 fb88 	bl	80179b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80162a0:	4603      	mov	r3, r0
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3708      	adds	r7, #8
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}

080162aa <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b082      	sub	sp, #8
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
 80162b2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6839      	ldr	r1, [r7, #0]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f001 fb87 	bl	80179cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80162be:	bf00      	nop
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}

080162c6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80162c6:	b580      	push	{r7, lr}
 80162c8:	b082      	sub	sp, #8
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
 80162ce:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6839      	ldr	r1, [r7, #0]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f001 fb8f 	bl	80179f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b082      	sub	sp, #8
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f001 fb05 	bl	80178fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80162f2:	bf00      	nop
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80162fa:	b580      	push	{r7, lr}
 80162fc:	b082      	sub	sp, #8
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	4618      	mov	r0, r3
 8016306:	f001 fb09 	bl	801791c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801630a:	bf00      	nop
 801630c:	3708      	adds	r7, #8
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}

08016312 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8016312:	b580      	push	{r7, lr}
 8016314:	b082      	sub	sp, #8
 8016316:	af00      	add	r7, sp, #0
 8016318:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	4618      	mov	r0, r3
 801631e:	f001 fb0b 	bl	8017938 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8016322:	bf00      	nop
 8016324:	3708      	adds	r7, #8
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}

0801632a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801632a:	b580      	push	{r7, lr}
 801632c:	b082      	sub	sp, #8
 801632e:	af00      	add	r7, sp, #0
 8016330:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	4618      	mov	r0, r3
 8016336:	f001 fb0d 	bl	8017954 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801633a:	bf00      	nop
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
	...

08016344 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	4a05      	ldr	r2, [pc, #20]	; (8016364 <_ZN11TouchGFXHALD1Ev+0x20>)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	601a      	str	r2, [r3, #0]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	4618      	mov	r0, r3
 8016356:	f7ff ff61 	bl	801621c <_ZN20TouchGFXGeneratedHALD1Ev>
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	4618      	mov	r0, r3
 801635e:	3708      	adds	r7, #8
 8016360:	46bd      	mov	sp, r7
 8016362:	bd80      	pop	{r7, pc}
 8016364:	0802a370 	.word	0x0802a370

08016368 <_ZN11TouchGFXHALD0Ev>:
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f7ff ffe7 	bl	8016344 <_ZN11TouchGFXHALD1Ev>
 8016376:	2178      	movs	r1, #120	; 0x78
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f011 fdb2 	bl	8027ee2 <_ZdlPvj>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	4618      	mov	r0, r3
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8016388:	b580      	push	{r7, lr}
 801638a:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 801638c:	2203      	movs	r2, #3
 801638e:	2100      	movs	r1, #0
 8016390:	2001      	movs	r0, #1
 8016392:	f7f6 fd50 	bl	800ce36 <xQueueGenericCreate>
 8016396:	4602      	mov	r2, r0
 8016398:	4b0b      	ldr	r3, [pc, #44]	; (80163c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801639a:	601a      	str	r2, [r3, #0]
 801639c:	4b0a      	ldr	r3, [pc, #40]	; (80163c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d006      	beq.n	80163b2 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80163a4:	4b08      	ldr	r3, [pc, #32]	; (80163c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80163a6:	6818      	ldr	r0, [r3, #0]
 80163a8:	2300      	movs	r3, #0
 80163aa:	2200      	movs	r2, #0
 80163ac:	2100      	movs	r1, #0
 80163ae:	f7f6 fda3 	bl	800cef8 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80163b2:	2200      	movs	r2, #0
 80163b4:	2101      	movs	r1, #1
 80163b6:	2001      	movs	r0, #1
 80163b8:	f7f6 fd3d 	bl	800ce36 <xQueueGenericCreate>
 80163bc:	4602      	mov	r2, r0
 80163be:	4b03      	ldr	r3, [pc, #12]	; (80163cc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80163c0:	601a      	str	r2, [r3, #0]
}
 80163c2:	bf00      	nop
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	200087a8 	.word	0x200087a8
 80163cc:	200087ac 	.word	0x200087ac

080163d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80163d4:	4b04      	ldr	r3, [pc, #16]	; (80163e8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	f04f 31ff 	mov.w	r1, #4294967295
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f7 f89d 	bl	800d51c <xQueueSemaphoreTake>
}
 80163e2:	bf00      	nop
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	200087a8 	.word	0x200087a8

080163ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80163f0:	4b04      	ldr	r3, [pc, #16]	; (8016404 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80163f2:	6818      	ldr	r0, [r3, #0]
 80163f4:	2300      	movs	r3, #0
 80163f6:	2200      	movs	r2, #0
 80163f8:	2100      	movs	r1, #0
 80163fa:	f7f6 fd7d 	bl	800cef8 <xQueueGenericSend>
}
 80163fe:	bf00      	nop
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	200087a8 	.word	0x200087a8

08016408 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016408:	b580      	push	{r7, lr}
 801640a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801640c:	4b03      	ldr	r3, [pc, #12]	; (801641c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2100      	movs	r1, #0
 8016412:	4618      	mov	r0, r3
 8016414:	f7f7 f882 	bl	800d51c <xQueueSemaphoreTake>
}
 8016418:	bf00      	nop
 801641a:	bd80      	pop	{r7, pc}
 801641c:	200087a8 	.word	0x200087a8

08016420 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8016426:	2300      	movs	r3, #0
 8016428:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801642a:	4b0b      	ldr	r3, [pc, #44]	; (8016458 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	1d3a      	adds	r2, r7, #4
 8016430:	4611      	mov	r1, r2
 8016432:	4618      	mov	r0, r3
 8016434:	f7f6 fefe 	bl	800d234 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d007      	beq.n	801644e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 801643e:	4b07      	ldr	r3, [pc, #28]	; (801645c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8016440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016444:	601a      	str	r2, [r3, #0]
 8016446:	f3bf 8f4f 	dsb	sy
 801644a:	f3bf 8f6f 	isb	sy
}
 801644e:	bf00      	nop
 8016450:	3708      	adds	r7, #8
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	200087a8 	.word	0x200087a8
 801645c:	e000ed04 	.word	0xe000ed04

08016460 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	af00      	add	r7, sp, #0
    if (vsync_q)
 8016466:	4b0e      	ldr	r3, [pc, #56]	; (80164a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d013      	beq.n	8016496 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 801646e:	2300      	movs	r3, #0
 8016470:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8016472:	4b0b      	ldr	r3, [pc, #44]	; (80164a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016474:	6818      	ldr	r0, [r3, #0]
 8016476:	1d3a      	adds	r2, r7, #4
 8016478:	2300      	movs	r3, #0
 801647a:	490a      	ldr	r1, [pc, #40]	; (80164a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 801647c:	f7f6 fe3e 	bl	800d0fc <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d007      	beq.n	8016496 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8016486:	4b08      	ldr	r3, [pc, #32]	; (80164a8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8016488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801648c:	601a      	str	r2, [r3, #0]
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	f3bf 8f6f 	isb	sy
    }
}
 8016496:	bf00      	nop
 8016498:	3708      	adds	r7, #8
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
 801649e:	bf00      	nop
 80164a0:	200087ac 	.word	0x200087ac
 80164a4:	20000050 	.word	0x20000050
 80164a8:	e000ed04 	.word	0xe000ed04

080164ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 80164b0:	4b08      	ldr	r3, [pc, #32]	; (80164d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2200      	movs	r2, #0
 80164b6:	4908      	ldr	r1, [pc, #32]	; (80164d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7f6 ff4d 	bl	800d358 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80164be:	4b05      	ldr	r3, [pc, #20]	; (80164d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	f04f 32ff 	mov.w	r2, #4294967295
 80164c6:	4904      	ldr	r1, [pc, #16]	; (80164d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7f6 ff45 	bl	800d358 <xQueueReceive>
}
 80164ce:	bf00      	nop
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	200087ac 	.word	0x200087ac
 80164d8:	20000050 	.word	0x20000050

080164dc <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b082      	sub	sp, #8
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	4603      	mov	r3, r0
 80164e4:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80164e6:	88fb      	ldrh	r3, [r7, #6]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f7 fc75 	bl	800ddd8 <vTaskDelay>
}
 80164ee:	bf00      	nop
 80164f0:	3708      	adds	r7, #8
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
	...

080164f8 <__NVIC_EnableIRQ>:
{
 80164f8:	b480      	push	{r7}
 80164fa:	b083      	sub	sp, #12
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	4603      	mov	r3, r0
 8016500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016506:	2b00      	cmp	r3, #0
 8016508:	db0d      	blt.n	8016526 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801650e:	b2db      	uxtb	r3, r3
 8016510:	f003 021f 	and.w	r2, r3, #31
 8016514:	4907      	ldr	r1, [pc, #28]	; (8016534 <__NVIC_EnableIRQ+0x3c>)
 8016516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801651a:	095b      	lsrs	r3, r3, #5
 801651c:	2001      	movs	r0, #1
 801651e:	fa00 f202 	lsl.w	r2, r0, r2
 8016522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016526:	bf00      	nop
 8016528:	370c      	adds	r7, #12
 801652a:	46bd      	mov	sp, r7
 801652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016530:	4770      	bx	lr
 8016532:	bf00      	nop
 8016534:	e000e100 	.word	0xe000e100

08016538 <__NVIC_DisableIRQ>:
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	4603      	mov	r3, r0
 8016540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016546:	2b00      	cmp	r3, #0
 8016548:	db12      	blt.n	8016570 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801654e:	b2db      	uxtb	r3, r3
 8016550:	f003 021f 	and.w	r2, r3, #31
 8016554:	4909      	ldr	r1, [pc, #36]	; (801657c <__NVIC_DisableIRQ+0x44>)
 8016556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801655a:	095b      	lsrs	r3, r3, #5
 801655c:	2001      	movs	r0, #1
 801655e:	fa00 f202 	lsl.w	r2, r0, r2
 8016562:	3320      	adds	r3, #32
 8016564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801656c:	f3bf 8f6f 	isb	sy
}
 8016570:	bf00      	nop
 8016572:	370c      	adds	r7, #12
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr
 801657c:	e000e100 	.word	0xe000e100

08016580 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
        return color;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
    }
 801658c:	4618      	mov	r0, r3
 801658e:	370c      	adds	r7, #12
 8016590:	46bd      	mov	sp, r7
 8016592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016596:	4770      	bx	lr

08016598 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016598:	b480      	push	{r7}
 801659a:	b083      	sub	sp, #12
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	b29b      	uxth	r3, r3
    }
 80165a6:	4618      	mov	r0, r3
 80165a8:	370c      	adds	r7, #12
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr
	...

080165b4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80165b4:	b480      	push	{r7}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
    {
 80165bc:	4a04      	ldr	r2, [pc, #16]	; (80165d0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	601a      	str	r2, [r3, #0]
    }
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	4618      	mov	r0, r3
 80165c6:	370c      	adds	r7, #12
 80165c8:	46bd      	mov	sp, r7
 80165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ce:	4770      	bx	lr
 80165d0:	0802a518 	.word	0x0802a518

080165d4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
    }
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7ff ffe9 	bl	80165b4 <_ZN8touchgfx9DMA_QueueD1Ev>
 80165e2:	2104      	movs	r1, #4
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f011 fc7c 	bl	8027ee2 <_ZdlPvj>
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4618      	mov	r0, r3
 80165ee:	3708      	adds	r7, #8
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	3344      	adds	r3, #68	; 0x44
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	4798      	blx	r3
    }
 8016608:	bf00      	nop
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016618:	2300      	movs	r3, #0
    }
 801661a:	4618      	mov	r0, r3
 801661c:	370c      	adds	r7, #12
 801661e:	46bd      	mov	sp, r7
 8016620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016624:	4770      	bx	lr
	...

08016628 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016628:	b480      	push	{r7}
 801662a:	b083      	sub	sp, #12
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
    {
 8016630:	4a04      	ldr	r2, [pc, #16]	; (8016644 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	601a      	str	r2, [r3, #0]
    }
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	4618      	mov	r0, r3
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr
 8016644:	0802b554 	.word	0x0802b554

08016648 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
    }
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f7ff ffe9 	bl	8016628 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016656:	210c      	movs	r1, #12
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f011 fc42 	bl	8027ee2 <_ZdlPvj>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4618      	mov	r0, r3
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016668:	b480      	push	{r7}
 801666a:	b083      	sub	sp, #12
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016672:	4a09      	ldr	r2, [pc, #36]	; (8016698 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	601a      	str	r2, [r3, #0]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	683a      	ldr	r2, [r7, #0]
 801667c:	605a      	str	r2, [r3, #4]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2200      	movs	r2, #0
 8016682:	721a      	strb	r2, [r3, #8]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2200      	movs	r2, #0
 8016688:	725a      	strb	r2, [r3, #9]
    {
    }
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	4618      	mov	r0, r3
 801668e:	370c      	adds	r7, #12
 8016690:	46bd      	mov	sp, r7
 8016692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016696:	4770      	bx	lr
 8016698:	0802b554 	.word	0x0802b554

0801669c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	685a      	ldr	r2, [r3, #4]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	3314      	adds	r3, #20
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	4610      	mov	r0, r2
 80166b4:	4798      	blx	r3
    }
 80166b6:	bf00      	nop
 80166b8:	3708      	adds	r7, #8
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}

080166be <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80166be:	b580      	push	{r7, lr}
 80166c0:	b082      	sub	sp, #8
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80166c6:	687a      	ldr	r2, [r7, #4]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	3328      	adds	r3, #40	; 0x28
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	4610      	mov	r0, r2
 80166d2:	4798      	blx	r3
    }
 80166d4:	bf00      	nop
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 80166dc:	b480      	push	{r7}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	607a      	str	r2, [r7, #4]
 80166e8:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80166f4:	68ba      	ldr	r2, [r7, #8]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	430a      	orrs	r2, r1
 80166fc:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016704:	f023 0107 	bic.w	r1, r3, #7
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	430a      	orrs	r2, r1
 8016710:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016718:	4b06      	ldr	r3, [pc, #24]	; (8016734 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801671a:	4013      	ands	r3, r2
 801671c:	6839      	ldr	r1, [r7, #0]
 801671e:	68fa      	ldr	r2, [r7, #12]
 8016720:	6812      	ldr	r2, [r2, #0]
 8016722:	430b      	orrs	r3, r1
 8016724:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016726:	2300      	movs	r3, #0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3714      	adds	r7, #20
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr
 8016734:	ffffc000 	.word	0xffffc000

08016738 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016740:	f7f9 ffaa 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8016744:	4603      	mov	r3, r0
 8016746:	4618      	mov	r0, r3
 8016748:	f7ff ffa8 	bl	801669c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 801674c:	bf00      	nop
 801674e:	3708      	adds	r7, #8
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
    assert(0);
 801675c:	4b02      	ldr	r3, [pc, #8]	; (8016768 <DMA2D_XferErrorCallback+0x14>)
 801675e:	4a03      	ldr	r2, [pc, #12]	; (801676c <DMA2D_XferErrorCallback+0x18>)
 8016760:	213e      	movs	r1, #62	; 0x3e
 8016762:	4803      	ldr	r0, [pc, #12]	; (8016770 <DMA2D_XferErrorCallback+0x1c>)
 8016764:	f011 fbe8 	bl	8027f38 <__assert_func>
 8016768:	08029664 	.word	0x08029664
 801676c:	0802a534 	.word	0x0802a534
 8016770:	08029668 	.word	0x08029668

08016774 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	3318      	adds	r3, #24
 8016780:	4618      	mov	r0, r3
 8016782:	f7fb f914 	bl	80119ae <_ZN8touchgfx9colortypeC1Ev>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	4618      	mov	r0, r3
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}

08016790 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016790:	b5b0      	push	{r4, r5, r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016798:	687a      	ldr	r2, [r7, #4]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	330c      	adds	r3, #12
 801679e:	4619      	mov	r1, r3
 80167a0:	4610      	mov	r0, r2
 80167a2:	f7ff ff61 	bl	8016668 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80167a6:	4a0e      	ldr	r2, [pc, #56]	; (80167e0 <_ZN10STM32F7DMAC1Ev+0x50>)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	601a      	str	r2, [r3, #0]
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f103 000c 	add.w	r0, r3, #12
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	3320      	adds	r3, #32
 80167b6:	2260      	movs	r2, #96	; 0x60
 80167b8:	4619      	mov	r1, r3
 80167ba:	f003 f8ab 	bl	8019914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	3320      	adds	r3, #32
 80167c2:	245f      	movs	r4, #95	; 0x5f
 80167c4:	461d      	mov	r5, r3
 80167c6:	2c00      	cmp	r4, #0
 80167c8:	db05      	blt.n	80167d6 <_ZN10STM32F7DMAC1Ev+0x46>
 80167ca:	4628      	mov	r0, r5
 80167cc:	f7ff ffd2 	bl	8016774 <_ZN8touchgfx6BlitOpC1Ev>
 80167d0:	3520      	adds	r5, #32
 80167d2:	3c01      	subs	r4, #1
 80167d4:	e7f7      	b.n	80167c6 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bdb0      	pop	{r4, r5, r7, pc}
 80167e0:	0802a4c8 	.word	0x0802a4c8

080167e4 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	4a0b      	ldr	r2, [pc, #44]	; (801681c <_ZN10STM32F7DMAD1Ev+0x38>)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80167f2:	480b      	ldr	r0, [pc, #44]	; (8016820 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80167f4:	f7ee f9b4 	bl	8004b60 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80167f8:	205a      	movs	r0, #90	; 0x5a
 80167fa:	f7ff fe9d 	bl	8016538 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	330c      	adds	r3, #12
 8016802:	4618      	mov	r0, r3
 8016804:	f000 faa0 	bl	8016d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	4618      	mov	r0, r3
 801680c:	f7ff ff0c 	bl	8016628 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	4618      	mov	r0, r3
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	0802a4c8 	.word	0x0802a4c8
 8016820:	2000c770 	.word	0x2000c770

08016824 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
}
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7ff ffd9 	bl	80167e4 <_ZN10STM32F7DMAD1Ev>
 8016832:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f011 fb53 	bl	8027ee2 <_ZdlPvj>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	4618      	mov	r0, r3
 8016840:	3708      	adds	r7, #8
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
	...

08016848 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016850:	4b09      	ldr	r3, [pc, #36]	; (8016878 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016852:	4a0a      	ldr	r2, [pc, #40]	; (801687c <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016854:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016856:	4808      	ldr	r0, [pc, #32]	; (8016878 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016858:	f7ee f938 	bl	8004acc <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801685c:	4b06      	ldr	r3, [pc, #24]	; (8016878 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801685e:	4a08      	ldr	r2, [pc, #32]	; (8016880 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016860:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016862:	4b05      	ldr	r3, [pc, #20]	; (8016878 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016864:	4a07      	ldr	r2, [pc, #28]	; (8016884 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016866:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016868:	205a      	movs	r0, #90	; 0x5a
 801686a:	f7ff fe45 	bl	80164f8 <__NVIC_EnableIRQ>
}
 801686e:	bf00      	nop
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	2000c770 	.word	0x2000c770
 801687c:	4002b000 	.word	0x4002b000
 8016880:	08016739 	.word	0x08016739
 8016884:	08016755 	.word	0x08016755

08016888 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016890:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016894:	4618      	mov	r0, r3
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr

080168a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80168a0:	b590      	push	{r4, r7, lr}
 80168a2:	b08d      	sub	sp, #52	; 0x34
 80168a4:	af02      	add	r7, sp, #8
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80168aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80168ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80168b0:	2300      	movs	r3, #0
 80168b2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80168b8:	2b20      	cmp	r3, #32
 80168ba:	d007      	beq.n	80168cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b40      	cmp	r3, #64	; 0x40
 80168c2:	d003      	beq.n	80168cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	2b04      	cmp	r3, #4
 80168ca:	d101      	bne.n	80168d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80168cc:	2301      	movs	r3, #1
 80168ce:	e000      	b.n	80168d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80168d0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80168d2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80168d8:	2b80      	cmp	r3, #128	; 0x80
 80168da:	d004      	beq.n	80168e6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168e4:	d101      	bne.n	80168ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80168e6:	2301      	movs	r3, #1
 80168e8:	e000      	b.n	80168ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80168ea:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80168ec:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80168ee:	f7f9 fedf 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80168f2:	4602      	mov	r2, r0
 80168f4:	6813      	ldr	r3, [r2, #0]
 80168f6:	3320      	adds	r3, #32
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	4610      	mov	r0, r2
 80168fc:	4798      	blx	r3
 80168fe:	4603      	mov	r3, r0
 8016900:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016902:	683b      	ldr	r3, [r7, #0]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b40      	cmp	r3, #64	; 0x40
 8016908:	d01d      	beq.n	8016946 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801690a:	2b40      	cmp	r3, #64	; 0x40
 801690c:	d804      	bhi.n	8016918 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801690e:	2b04      	cmp	r3, #4
 8016910:	d00e      	beq.n	8016930 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016912:	2b20      	cmp	r3, #32
 8016914:	d017      	beq.n	8016946 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016916:	e019      	b.n	801694c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016918:	2b80      	cmp	r3, #128	; 0x80
 801691a:	d003      	beq.n	8016924 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 801691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016920:	d003      	beq.n	801692a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016922:	e013      	b.n	801694c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016924:	230a      	movs	r3, #10
 8016926:	623b      	str	r3, [r7, #32]
        break;
 8016928:	e01a      	b.n	8016960 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801692a:	2309      	movs	r3, #9
 801692c:	623b      	str	r3, [r7, #32]
        break;
 801692e:	e017      	b.n	8016960 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016934:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016936:	7f7b      	ldrb	r3, [r7, #29]
 8016938:	2b10      	cmp	r3, #16
 801693a:	d101      	bne.n	8016940 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801693c:	2302      	movs	r3, #2
 801693e:	e000      	b.n	8016942 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016940:	2301      	movs	r3, #1
 8016942:	623b      	str	r3, [r7, #32]
        break;
 8016944:	e00c      	b.n	8016960 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016946:	2300      	movs	r3, #0
 8016948:	623b      	str	r3, [r7, #32]
        break;
 801694a:	e009      	b.n	8016960 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801694c:	2300      	movs	r3, #0
 801694e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016950:	7f7b      	ldrb	r3, [r7, #29]
 8016952:	2b10      	cmp	r3, #16
 8016954:	d101      	bne.n	801695a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016956:	2302      	movs	r3, #2
 8016958:	e000      	b.n	801695c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801695a:	2301      	movs	r3, #1
 801695c:	623b      	str	r3, [r7, #32]
        break;
 801695e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016960:	4a76      	ldr	r2, [pc, #472]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016964:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016966:	7f7b      	ldrb	r3, [r7, #29]
 8016968:	2b10      	cmp	r3, #16
 801696a:	d101      	bne.n	8016970 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801696c:	2302      	movs	r3, #2
 801696e:	e000      	b.n	8016972 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016970:	2301      	movs	r3, #1
 8016972:	4a72      	ldr	r2, [pc, #456]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016974:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	8adb      	ldrh	r3, [r3, #22]
 801697a:	461a      	mov	r2, r3
 801697c:	683b      	ldr	r3, [r7, #0]
 801697e:	8a1b      	ldrh	r3, [r3, #16]
 8016980:	1ad3      	subs	r3, r2, r3
 8016982:	461a      	mov	r2, r3
 8016984:	4b6d      	ldr	r3, [pc, #436]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016986:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016988:	7f7b      	ldrb	r3, [r7, #29]
 801698a:	2b10      	cmp	r3, #16
 801698c:	d101      	bne.n	8016992 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801698e:	2202      	movs	r2, #2
 8016990:	e000      	b.n	8016994 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016992:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	8adb      	ldrh	r3, [r3, #22]
 8016998:	4619      	mov	r1, r3
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	8a1b      	ldrh	r3, [r3, #16]
 801699e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80169a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169a2:	4866      	ldr	r0, [pc, #408]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169a4:	f7ff fe9a 	bl	80166dc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80169a8:	4a64      	ldr	r2, [pc, #400]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169aa:	6a3b      	ldr	r3, [r7, #32]
 80169ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	8a9b      	ldrh	r3, [r3, #20]
 80169b2:	461a      	mov	r2, r3
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	8a1b      	ldrh	r3, [r3, #16]
 80169b8:	1ad3      	subs	r3, r2, r3
 80169ba:	461a      	mov	r2, r3
 80169bc:	4b5f      	ldr	r3, [pc, #380]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169be:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80169c0:	7ffb      	ldrb	r3, [r7, #31]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d103      	bne.n	80169ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80169c6:	7fbb      	ldrb	r3, [r7, #30]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f000 8082 	beq.w	8016ad2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	7f1b      	ldrb	r3, [r3, #28]
 80169d2:	2bff      	cmp	r3, #255	; 0xff
 80169d4:	d008      	beq.n	80169e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80169d6:	4b59      	ldr	r3, [pc, #356]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169d8:	2202      	movs	r2, #2
 80169da:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	7f1b      	ldrb	r3, [r3, #28]
 80169e0:	461a      	mov	r2, r3
 80169e2:	4b56      	ldr	r3, [pc, #344]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169e4:	635a      	str	r2, [r3, #52]	; 0x34
 80169e6:	e002      	b.n	80169ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80169e8:	4b54      	ldr	r3, [pc, #336]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80169ee:	7fbb      	ldrb	r3, [r7, #30]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d059      	beq.n	8016aa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80169f4:	7f7b      	ldrb	r3, [r7, #29]
 80169f6:	2b10      	cmp	r3, #16
 80169f8:	d14a      	bne.n	8016a90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	3318      	adds	r3, #24
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7ff fdca 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016a04:	4603      	mov	r3, r0
 8016a06:	12db      	asrs	r3, r3, #11
 8016a08:	f003 021f 	and.w	r2, r3, #31
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	021b      	lsls	r3, r3, #8
 8016a10:	1a9b      	subs	r3, r3, r2
 8016a12:	4a4b      	ldr	r2, [pc, #300]	; (8016b40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a14:	fb82 1203 	smull	r1, r2, r2, r3
 8016a18:	441a      	add	r2, r3
 8016a1a:	1112      	asrs	r2, r2, #4
 8016a1c:	17db      	asrs	r3, r3, #31
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	3318      	adds	r3, #24
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7ff fdb6 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	115b      	asrs	r3, r3, #5
 8016a30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016a34:	4613      	mov	r3, r2
 8016a36:	021b      	lsls	r3, r3, #8
 8016a38:	1a9b      	subs	r3, r3, r2
 8016a3a:	4a42      	ldr	r2, [pc, #264]	; (8016b44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8016a40:	441a      	add	r2, r3
 8016a42:	1152      	asrs	r2, r2, #5
 8016a44:	17db      	asrs	r3, r3, #31
 8016a46:	1ad3      	subs	r3, r2, r3
 8016a48:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	3318      	adds	r3, #24
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7ff fda2 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016a54:	4603      	mov	r3, r0
 8016a56:	f003 021f 	and.w	r2, r3, #31
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	021b      	lsls	r3, r3, #8
 8016a5e:	1a9b      	subs	r3, r3, r2
 8016a60:	4a37      	ldr	r2, [pc, #220]	; (8016b40 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016a62:	fb82 1203 	smull	r1, r2, r2, r3
 8016a66:	441a      	add	r2, r3
 8016a68:	1112      	asrs	r2, r2, #4
 8016a6a:	17db      	asrs	r3, r3, #31
 8016a6c:	1ad3      	subs	r3, r2, r3
 8016a6e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	7f1b      	ldrb	r3, [r3, #28]
 8016a74:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	061a      	lsls	r2, r3, #24
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	041b      	lsls	r3, r3, #16
 8016a7e:	431a      	orrs	r2, r3
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	021b      	lsls	r3, r3, #8
 8016a84:	431a      	orrs	r2, r3
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	4313      	orrs	r3, r2
 8016a8a:	4a2c      	ldr	r2, [pc, #176]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016a8c:	6353      	str	r3, [r2, #52]	; 0x34
 8016a8e:	e00b      	b.n	8016aa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	3318      	adds	r3, #24
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7ff fd73 	bl	8016580 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	7f1b      	ldrb	r3, [r3, #28]
 8016aa0:	061b      	lsls	r3, r3, #24
 8016aa2:	4313      	orrs	r3, r2
 8016aa4:	4a25      	ldr	r2, [pc, #148]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016aa6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	8adb      	ldrh	r3, [r3, #22]
 8016aac:	461a      	mov	r2, r3
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	8a1b      	ldrh	r3, [r3, #16]
 8016ab2:	1ad3      	subs	r3, r2, r3
 8016ab4:	461a      	mov	r2, r3
 8016ab6:	4b21      	ldr	r3, [pc, #132]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ab8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016aba:	7f7b      	ldrb	r3, [r7, #29]
 8016abc:	2b10      	cmp	r3, #16
 8016abe:	d101      	bne.n	8016ac4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8016ac0:	2302      	movs	r3, #2
 8016ac2:	e000      	b.n	8016ac6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8016ac4:	2301      	movs	r3, #1
 8016ac6:	4a1d      	ldr	r2, [pc, #116]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ac8:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016aca:	2100      	movs	r1, #0
 8016acc:	481b      	ldr	r0, [pc, #108]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ace:	f7ee fac7 	bl	8005060 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016ad2:	2101      	movs	r1, #1
 8016ad4:	4819      	ldr	r0, [pc, #100]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ad6:	f7ee fac3 	bl	8005060 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8016ada:	7ffb      	ldrb	r3, [r7, #31]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d102      	bne.n	8016ae6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8016ae0:	7fbb      	ldrb	r3, [r7, #30]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d015      	beq.n	8016b12 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016aea:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016af0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016af6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016afc:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016b02:	9301      	str	r3, [sp, #4]
 8016b04:	9200      	str	r2, [sp, #0]
 8016b06:	4623      	mov	r3, r4
 8016b08:	4602      	mov	r2, r0
 8016b0a:	480c      	ldr	r0, [pc, #48]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b0c:	f7ee f8cb 	bl	8004ca6 <HAL_DMA2D_BlendingStart_IT>
 8016b10:	e00f      	b.n	8016b32 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016b16:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016b1c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016b22:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016b28:	9300      	str	r3, [sp, #0]
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	4803      	ldr	r0, [pc, #12]	; (8016b3c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016b2e:	f7ee f887 	bl	8004c40 <HAL_DMA2D_Start_IT>
    }
}
 8016b32:	bf00      	nop
 8016b34:	372c      	adds	r7, #44	; 0x2c
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd90      	pop	{r4, r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	2000c770 	.word	0x2000c770
 8016b40:	84210843 	.word	0x84210843
 8016b44:	82082083 	.word	0x82082083

08016b48 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016b48:	b590      	push	{r4, r7, lr}
 8016b4a:	b08d      	sub	sp, #52	; 0x34
 8016b4c:	af02      	add	r7, sp, #8
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016b52:	f7f9 fdad 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8016b56:	4602      	mov	r2, r0
 8016b58:	6813      	ldr	r3, [r2, #0]
 8016b5a:	3320      	adds	r3, #32
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	4610      	mov	r0, r2
 8016b60:	4798      	blx	r3
 8016b62:	4603      	mov	r3, r0
 8016b64:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016b66:	7ffb      	ldrb	r3, [r7, #31]
 8016b68:	2b10      	cmp	r3, #16
 8016b6a:	d101      	bne.n	8016b70 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8016b6c:	2302      	movs	r3, #2
 8016b6e:	e000      	b.n	8016b72 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8016b70:	2301      	movs	r3, #1
 8016b72:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8016b74:	2300      	movs	r3, #0
 8016b76:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8016b78:	7ffb      	ldrb	r3, [r7, #31]
 8016b7a:	2b10      	cmp	r3, #16
 8016b7c:	d149      	bne.n	8016c12 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	3318      	adds	r3, #24
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ff fd08 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	12db      	asrs	r3, r3, #11
 8016b8c:	f003 021f 	and.w	r2, r3, #31
 8016b90:	4613      	mov	r3, r2
 8016b92:	021b      	lsls	r3, r3, #8
 8016b94:	1a9b      	subs	r3, r3, r2
 8016b96:	4a69      	ldr	r2, [pc, #420]	; (8016d3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016b98:	fb82 1203 	smull	r1, r2, r2, r3
 8016b9c:	441a      	add	r2, r3
 8016b9e:	1112      	asrs	r2, r2, #4
 8016ba0:	17db      	asrs	r3, r3, #31
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	3318      	adds	r3, #24
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7ff fcf4 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	115b      	asrs	r3, r3, #5
 8016bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016bb8:	4613      	mov	r3, r2
 8016bba:	021b      	lsls	r3, r3, #8
 8016bbc:	1a9b      	subs	r3, r3, r2
 8016bbe:	4a60      	ldr	r2, [pc, #384]	; (8016d40 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8016bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8016bc4:	441a      	add	r2, r3
 8016bc6:	1152      	asrs	r2, r2, #5
 8016bc8:	17db      	asrs	r3, r3, #31
 8016bca:	1ad3      	subs	r3, r2, r3
 8016bcc:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	3318      	adds	r3, #24
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7ff fce0 	bl	8016598 <_ZNK8touchgfx9colortypecvtEv>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	f003 021f 	and.w	r2, r3, #31
 8016bde:	4613      	mov	r3, r2
 8016be0:	021b      	lsls	r3, r3, #8
 8016be2:	1a9b      	subs	r3, r3, r2
 8016be4:	4a55      	ldr	r2, [pc, #340]	; (8016d3c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016be6:	fb82 1203 	smull	r1, r2, r2, r3
 8016bea:	441a      	add	r2, r3
 8016bec:	1112      	asrs	r2, r2, #4
 8016bee:	17db      	asrs	r3, r3, #31
 8016bf0:	1ad3      	subs	r3, r2, r3
 8016bf2:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	7f1b      	ldrb	r3, [r3, #28]
 8016bf8:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	061a      	lsls	r2, r3, #24
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	041b      	lsls	r3, r3, #16
 8016c02:	431a      	orrs	r2, r3
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	021b      	lsls	r3, r3, #8
 8016c08:	4313      	orrs	r3, r2
 8016c0a:	68fa      	ldr	r2, [r7, #12]
 8016c0c:	4313      	orrs	r3, r2
 8016c0e:	623b      	str	r3, [r7, #32]
 8016c10:	e00b      	b.n	8016c2a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	7f1b      	ldrb	r3, [r3, #28]
 8016c16:	061b      	lsls	r3, r3, #24
 8016c18:	461c      	mov	r4, r3
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	3318      	adds	r3, #24
 8016c1e:	4618      	mov	r0, r3
 8016c20:	f7ff fcae 	bl	8016580 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016c24:	4603      	mov	r3, r0
 8016c26:	4323      	orrs	r3, r4
 8016c28:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2b08      	cmp	r3, #8
 8016c30:	d103      	bne.n	8016c3a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016c38:	e003      	b.n	8016c42 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016c3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8016c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016c40:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016c42:	4a40      	ldr	r2, [pc, #256]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c46:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016c48:	7ffb      	ldrb	r3, [r7, #31]
 8016c4a:	2b10      	cmp	r3, #16
 8016c4c:	d101      	bne.n	8016c52 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8016c4e:	2302      	movs	r3, #2
 8016c50:	e000      	b.n	8016c54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8016c52:	2301      	movs	r3, #1
 8016c54:	4a3b      	ldr	r2, [pc, #236]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c56:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	8adb      	ldrh	r3, [r3, #22]
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	8a1b      	ldrh	r3, [r3, #16]
 8016c62:	1ad3      	subs	r3, r2, r3
 8016c64:	461a      	mov	r2, r3
 8016c66:	4b37      	ldr	r3, [pc, #220]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c68:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016c6a:	7ffb      	ldrb	r3, [r7, #31]
 8016c6c:	2b10      	cmp	r3, #16
 8016c6e:	d101      	bne.n	8016c74 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8016c70:	2202      	movs	r2, #2
 8016c72:	e000      	b.n	8016c76 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8016c74:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	8adb      	ldrh	r3, [r3, #22]
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	8a1b      	ldrh	r3, [r3, #16]
 8016c80:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c84:	482f      	ldr	r0, [pc, #188]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c86:	f7ff fd29 	bl	80166dc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016c90:	d11e      	bne.n	8016cd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8016c92:	4b2c      	ldr	r3, [pc, #176]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c94:	2201      	movs	r2, #1
 8016c96:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016c98:	4a2a      	ldr	r2, [pc, #168]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016c9a:	6a3b      	ldr	r3, [r7, #32]
 8016c9c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8016c9e:	4b29      	ldr	r3, [pc, #164]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016ca0:	2209      	movs	r2, #9
 8016ca2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	8adb      	ldrh	r3, [r3, #22]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	8a1b      	ldrh	r3, [r3, #16]
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	461a      	mov	r2, r3
 8016cb2:	4b24      	ldr	r3, [pc, #144]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016cb4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016cb6:	7ffb      	ldrb	r3, [r7, #31]
 8016cb8:	2b10      	cmp	r3, #16
 8016cba:	d101      	bne.n	8016cc0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8016cbc:	2302      	movs	r3, #2
 8016cbe:	e000      	b.n	8016cc2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	4a20      	ldr	r2, [pc, #128]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016cc4:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	481e      	ldr	r0, [pc, #120]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016cca:	f7ee f9c9 	bl	8005060 <HAL_DMA2D_ConfigLayer>
 8016cce:	e005      	b.n	8016cdc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016cd0:	4a1c      	ldr	r2, [pc, #112]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8016cd6:	4b1b      	ldr	r3, [pc, #108]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016cdc:	2101      	movs	r1, #1
 8016cde:	4819      	ldr	r0, [pc, #100]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016ce0:	f7ee f9be 	bl	8005060 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8016ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016cea:	d115      	bne.n	8016d18 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016cf0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016cf6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016cfc:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016d02:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016d08:	9301      	str	r3, [sp, #4]
 8016d0a:	9200      	str	r2, [sp, #0]
 8016d0c:	4623      	mov	r3, r4
 8016d0e:	4602      	mov	r2, r0
 8016d10:	480c      	ldr	r0, [pc, #48]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016d12:	f7ed ffc8 	bl	8004ca6 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016d16:	e00d      	b.n	8016d34 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016d18:	683b      	ldr	r3, [r7, #0]
 8016d1a:	68db      	ldr	r3, [r3, #12]
 8016d1c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016d22:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016d28:	9300      	str	r3, [sp, #0]
 8016d2a:	460b      	mov	r3, r1
 8016d2c:	6a39      	ldr	r1, [r7, #32]
 8016d2e:	4805      	ldr	r0, [pc, #20]	; (8016d44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016d30:	f7ed ff86 	bl	8004c40 <HAL_DMA2D_Start_IT>
}
 8016d34:	bf00      	nop
 8016d36:	372c      	adds	r7, #44	; 0x2c
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd90      	pop	{r4, r7, pc}
 8016d3c:	84210843 	.word	0x84210843
 8016d40:	82082083 	.word	0x82082083
 8016d44:	2000c770 	.word	0x2000c770

08016d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	4a05      	ldr	r2, [pc, #20]	; (8016d68 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7ff fc2b 	bl	80165b4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	4618      	mov	r0, r3
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	0802b5a4 	.word	0x0802b5a4

08016d6c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f7ff ffe7 	bl	8016d48 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016d7a:	2114      	movs	r1, #20
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f011 f8b0 	bl	8027ee2 <_ZdlPvj>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	4618      	mov	r0, r3
 8016d86:	3708      	adds	r7, #8
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8016d8c:	b480      	push	{r7}
 8016d8e:	b083      	sub	sp, #12
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
        texts = t;
 8016d94:	4a04      	ldr	r2, [pc, #16]	; (8016da8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6013      	str	r3, [r2, #0]
    }
 8016d9a:	bf00      	nop
 8016d9c:	370c      	adds	r7, #12
 8016d9e:	46bd      	mov	sp, r7
 8016da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da4:	4770      	bx	lr
 8016da6:	bf00      	nop
 8016da8:	2000bf88 	.word	0x2000bf88

08016dac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016dac:	b480      	push	{r7}
 8016dae:	b085      	sub	sp, #20
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	60f8      	str	r0, [r7, #12]
 8016db4:	60b9      	str	r1, [r7, #8]
 8016db6:	607a      	str	r2, [r7, #4]
 8016db8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8016dba:	4a0b      	ldr	r2, [pc, #44]	; (8016de8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	601a      	str	r2, [r3, #0]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	68ba      	ldr	r2, [r7, #8]
 8016dc4:	605a      	str	r2, [r3, #4]
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	609a      	str	r2, [r3, #8]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	683a      	ldr	r2, [r7, #0]
 8016dd0:	60da      	str	r2, [r3, #12]
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	69ba      	ldr	r2, [r7, #24]
 8016dd6:	611a      	str	r2, [r3, #16]
    {
    }
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3714      	adds	r7, #20
 8016dde:	46bd      	mov	sp, r7
 8016de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop
 8016de8:	0802a634 	.word	0x0802a634

08016dec <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8016dec:	b480      	push	{r7}
 8016dee:	b083      	sub	sp, #12
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
    {
 8016df4:	4a04      	ldr	r2, [pc, #16]	; (8016e08 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	601a      	str	r2, [r3, #0]
    }
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr
 8016e08:	0802a634 	.word	0x0802a634

08016e0c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b082      	sub	sp, #8
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
    }
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f7ff ffe9 	bl	8016dec <_ZN8touchgfx7MVPHeapD1Ev>
 8016e1a:	2114      	movs	r1, #20
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f011 f860 	bl	8027ee2 <_ZdlPvj>
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	4618      	mov	r0, r3
 8016e26:	3708      	adds	r7, #8
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
    {
 8016e34:	4a04      	ldr	r2, [pc, #16]	; (8016e48 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	601a      	str	r2, [r3, #0]
    }
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	370c      	adds	r7, #12
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr
 8016e48:	0802bf60 	.word	0x0802bf60

08016e4c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
    }
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f7ff ffe9 	bl	8016e2c <_ZN8touchgfx3LCDD1Ev>
 8016e5a:	2108      	movs	r1, #8
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f011 f840 	bl	8027ee2 <_ZdlPvj>
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	4618      	mov	r0, r3
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8016e6c:	b480      	push	{r7}
 8016e6e:	b083      	sub	sp, #12
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2200      	movs	r2, #0
 8016e78:	801a      	strh	r2, [r3, #0]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	805a      	strh	r2, [r3, #2]
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2200      	movs	r2, #0
 8016e84:	809a      	strh	r2, [r3, #4]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	80da      	strh	r2, [r3, #6]
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	811a      	strh	r2, [r3, #8]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2200      	movs	r2, #0
 8016e96:	815a      	strh	r2, [r3, #10]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	819a      	strh	r2, [r3, #12]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	739a      	strb	r2, [r3, #14]
        {
        }
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	370c      	adds	r7, #12
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb0:	4770      	bx	lr

08016eb2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8016eb2:	b580      	push	{r7, lr}
 8016eb4:	b082      	sub	sp, #8
 8016eb6:	af00      	add	r7, sp, #0
 8016eb8:	6078      	str	r0, [r7, #4]
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f7ff ffd5 	bl	8016e6c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	611a      	str	r2, [r3, #16]
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	829a      	strh	r2, [r3, #20]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3708      	adds	r7, #8
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}

08016ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b084      	sub	sp, #16
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	60f8      	str	r0, [r7, #12]
 8016ee0:	60b9      	str	r1, [r7, #8]
 8016ee2:	607a      	str	r2, [r7, #4]
 8016ee4:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8016ee6:	4a44      	ldr	r2, [pc, #272]	; (8016ff8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	601a      	str	r2, [r3, #0]
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	68ba      	ldr	r2, [r7, #8]
 8016ef0:	605a      	str	r2, [r3, #4]
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	609a      	str	r2, [r3, #8]
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	683a      	ldr	r2, [r7, #0]
 8016efc:	60da      	str	r2, [r3, #12]
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2200      	movs	r2, #0
 8016f02:	611a      	str	r2, [r3, #16]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2200      	movs	r2, #0
 8016f08:	615a      	str	r2, [r3, #20]
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	619a      	str	r2, [r3, #24]
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	331c      	adds	r3, #28
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7ff ffcc 	bl	8016eb2 <_ZN8touchgfx8GesturesC1Ev>
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	639a      	str	r2, [r3, #56]	; 0x38
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	2200      	movs	r2, #0
 8016f24:	63da      	str	r2, [r3, #60]	; 0x3c
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	645a      	str	r2, [r3, #68]	; 0x44
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2200      	movs	r2, #0
 8016f36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2201      	movs	r2, #1
 8016f3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	2201      	movs	r2, #1
 8016f46:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	3350      	adds	r3, #80	; 0x50
 8016f54:	4618      	mov	r0, r3
 8016f56:	f7fa fd47 	bl	80119e8 <_ZN8touchgfx4RectC1Ev>
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	2200      	movs	r2, #0
 8016f66:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	2201      	movs	r2, #1
 8016f76:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	2200      	movs	r2, #0
 8016f86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2200      	movs	r2, #0
 8016f96:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	671a      	str	r2, [r3, #112]	; 0x70
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	2200      	movs	r2, #0
 8016fac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016fb0:	4a12      	ldr	r2, [pc, #72]	; (8016ffc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016fb6:	4a12      	ldr	r2, [pc, #72]	; (8017000 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016fb8:	8b3b      	ldrh	r3, [r7, #24]
 8016fba:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016fbc:	4a11      	ldr	r2, [pc, #68]	; (8017004 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016fbe:	8bbb      	ldrh	r3, [r7, #28]
 8016fc0:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016fc2:	4b11      	ldr	r3, [pc, #68]	; (8017008 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016fc8:	4b0d      	ldr	r3, [pc, #52]	; (8017000 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016fca:	881a      	ldrh	r2, [r3, #0]
 8016fcc:	4b0f      	ldr	r3, [pc, #60]	; (801700c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016fce:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016fd0:	4b0c      	ldr	r3, [pc, #48]	; (8017004 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016fd2:	881a      	ldrh	r2, [r3, #0]
 8016fd4:	4b0e      	ldr	r3, [pc, #56]	; (8017010 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016fd6:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016fd8:	8b3a      	ldrh	r2, [r7, #24]
 8016fda:	8bbb      	ldrh	r3, [r7, #28]
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	d301      	bcc.n	8016fe4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	e000      	b.n	8016fe6 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3710      	adds	r7, #16
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	bd80      	pop	{r7, pc}
 8016ff6:	bf00      	nop
 8016ff8:	0802b110 	.word	0x0802b110
 8016ffc:	2000beec 	.word	0x2000beec
 8017000:	2000bede 	.word	0x2000bede
 8017004:	2000bee0 	.word	0x2000bee0
 8017008:	2000bee2 	.word	0x2000bee2
 801700c:	2000bee4 	.word	0x2000bee4
 8017010:	2000bee6 	.word	0x2000bee6

08017014 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	4618      	mov	r0, r3
 8017022:	f7f9 fd69 	bl	8010af8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8017026:	bf00      	nop
 8017028:	3708      	adds	r7, #8
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
	...

08017030 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8017030:	b580      	push	{r7, lr}
 8017032:	b086      	sub	sp, #24
 8017034:	af02      	add	r7, sp, #8
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	607a      	str	r2, [r7, #4]
 801703c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801703e:	68f8      	ldr	r0, [r7, #12]
 8017040:	69bb      	ldr	r3, [r7, #24]
 8017042:	9300      	str	r3, [sp, #0]
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	687a      	ldr	r2, [r7, #4]
 8017048:	68b9      	ldr	r1, [r7, #8]
 801704a:	f7ff feaf 	bl	8016dac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801704e:	4a04      	ldr	r2, [pc, #16]	; (8017060 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	601a      	str	r2, [r3, #0]
    {

    }
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4618      	mov	r0, r3
 8017058:	3710      	adds	r7, #16
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	0802a620 	.word	0x0802a620

08017064 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8017064:	b580      	push	{r7, lr}
 8017066:	af00      	add	r7, sp, #0
 8017068:	4801      	ldr	r0, [pc, #4]	; (8017070 <__tcf_0+0xc>)
 801706a:	f000 f9dd 	bl	8017428 <_ZN12FrontendHeapD1Ev>
 801706e:	bd80      	pop	{r7, pc}
 8017070:	200087b0 	.word	0x200087b0

08017074 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8017074:	b580      	push	{r7, lr}
 8017076:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8017078:	4b08      	ldr	r3, [pc, #32]	; (801709c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	f003 0301 	and.w	r3, r3, #1
 8017080:	2b00      	cmp	r3, #0
 8017082:	d108      	bne.n	8017096 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8017084:	4806      	ldr	r0, [pc, #24]	; (80170a0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8017086:	f000 f831 	bl	80170ec <_ZN12FrontendHeapC1Ev>
 801708a:	4b04      	ldr	r3, [pc, #16]	; (801709c <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801708c:	2201      	movs	r2, #1
 801708e:	601a      	str	r2, [r3, #0]
 8017090:	4804      	ldr	r0, [pc, #16]	; (80170a4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8017092:	f010 ff6f 	bl	8027f74 <atexit>
        return instance;
 8017096:	4b02      	ldr	r3, [pc, #8]	; (80170a0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8017098:	4618      	mov	r0, r3
 801709a:	bd80      	pop	{r7, pc}
 801709c:	2000b1d8 	.word	0x2000b1d8
 80170a0:	200087b0 	.word	0x200087b0
 80170a4:	08017065 	.word	0x08017065

080170a8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	4a05      	ldr	r2, [pc, #20]	; (80170c8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	601a      	str	r2, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7ff fe97 	bl	8016dec <_ZN8touchgfx7MVPHeapD1Ev>
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	4618      	mov	r0, r3
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	0802a620 	.word	0x0802a620

080170cc <_ZN16FrontendHeapBaseD0Ev>:
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f7ff ffe7 	bl	80170a8 <_ZN16FrontendHeapBaseD1Ev>
 80170da:	2114      	movs	r1, #20
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f010 ff00 	bl	8027ee2 <_ZdlPvj>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	4618      	mov	r0, r3
 80170e6:	3708      	adds	r7, #8
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}

080170ec <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80170ec:	b5b0      	push	{r4, r5, r7, lr}
 80170ee:	b084      	sub	sp, #16
 80170f0:	af02      	add	r7, sp, #8
 80170f2:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80170f4:	6878      	ldr	r0, [r7, #4]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f103 0414 	add.w	r4, r3, #20
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f642 0278 	movw	r2, #10360	; 0x2878
 8017108:	441a      	add	r2, r3
 801710a:	6879      	ldr	r1, [r7, #4]
 801710c:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017110:	440b      	add	r3, r1
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	4613      	mov	r3, r2
 8017116:	462a      	mov	r2, r5
 8017118:	4621      	mov	r1, r4
 801711a:	f7ff ff89 	bl	8017030 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801711e:	4a1a      	ldr	r2, [pc, #104]	; (8017188 <_ZN12FrontendHeapC1Ev+0x9c>)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	601a      	str	r2, [r3, #0]
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	3314      	adds	r3, #20
 8017128:	4618      	mov	r0, r3
 801712a:	f000 f8df 	bl	80172ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	332c      	adds	r3, #44	; 0x2c
 8017132:	4618      	mov	r0, r3
 8017134:	f000 f90e 	bl	8017354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017138:	687a      	ldr	r2, [r7, #4]
 801713a:	f642 0378 	movw	r3, #10360	; 0x2878
 801713e:	4413      	add	r3, r2
 8017140:	4618      	mov	r0, r3
 8017142:	f000 f93d 	bl	80173c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8017146:	687a      	ldr	r2, [r7, #4]
 8017148:	f642 03d4 	movw	r3, #10452	; 0x28d4
 801714c:	4413      	add	r3, r2
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	f642 2124 	movw	r1, #10788	; 0x2a24
 8017154:	4411      	add	r1, r2
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	4618      	mov	r0, r3
 801715a:	f7fe f80d 	bl	8015178 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801715e:	687a      	ldr	r2, [r7, #4]
 8017160:	f642 2324 	movw	r3, #10788	; 0x2a24
 8017164:	4413      	add	r3, r2
 8017166:	4618      	mov	r0, r3
 8017168:	f7fe fcfa 	bl	8015b60 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8017174:	4413      	add	r3, r2
 8017176:	4619      	mov	r1, r3
 8017178:	f7ff ff4c 	bl	8017014 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	4618      	mov	r0, r3
 8017180:	3708      	adds	r7, #8
 8017182:	46bd      	mov	sp, r7
 8017184:	bdb0      	pop	{r4, r5, r7, pc}
 8017186:	bf00      	nop
 8017188:	0802a570 	.word	0x0802a570

0801718c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 801718c:	b580      	push	{r7, lr}
 801718e:	b082      	sub	sp, #8
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
    {
 8017194:	4a05      	ldr	r2, [pc, #20]	; (80171ac <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	601a      	str	r2, [r3, #0]
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4618      	mov	r0, r3
 801719e:	f7ff fe45 	bl	8016e2c <_ZN8touchgfx3LCDD1Ev>
    }
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4618      	mov	r0, r3
 80171a6:	3708      	adds	r7, #8
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}
 80171ac:	0802d33c 	.word	0x0802d33c

080171b0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b082      	sub	sp, #8
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
    }
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f7ff ffe7 	bl	801718c <_ZN8touchgfx8LCD24bppD1Ev>
 80171be:	2158      	movs	r1, #88	; 0x58
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f010 fe8e 	bl	8027ee2 <_ZdlPvj>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4618      	mov	r0, r3
 80171ca:	3708      	adds	r7, #8
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b086      	sub	sp, #24
 80171d4:	af02      	add	r7, sp, #8
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	603b      	str	r3, [r7, #0]
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	8bbb      	ldrh	r3, [r7, #28]
 80171e2:	9301      	str	r3, [sp, #4]
 80171e4:	8b3b      	ldrh	r3, [r7, #24]
 80171e6:	9300      	str	r3, [sp, #0]
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	687a      	ldr	r2, [r7, #4]
 80171ec:	68b9      	ldr	r1, [r7, #8]
 80171ee:	f7ff fe73 	bl	8016ed8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80171f2:	4a04      	ldr	r2, [pc, #16]	; (8017204 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	601a      	str	r2, [r3, #0]
    }
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	4618      	mov	r0, r3
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
 8017202:	bf00      	nop
 8017204:	0802a644 	.word	0x0802a644

08017208 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8017208:	b580      	push	{r7, lr}
 801720a:	b086      	sub	sp, #24
 801720c:	af02      	add	r7, sp, #8
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	60b9      	str	r1, [r7, #8]
 8017212:	607a      	str	r2, [r7, #4]
 8017214:	603b      	str	r3, [r7, #0]
 8017216:	68f8      	ldr	r0, [r7, #12]
 8017218:	8bbb      	ldrh	r3, [r7, #28]
 801721a:	9301      	str	r3, [sp, #4]
 801721c:	8b3b      	ldrh	r3, [r7, #24]
 801721e:	9300      	str	r3, [sp, #0]
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	68b9      	ldr	r1, [r7, #8]
 8017226:	f7ff ffd3 	bl	80171d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801722a:	4a04      	ldr	r2, [pc, #16]	; (801723c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	601a      	str	r2, [r3, #0]
    }
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	4618      	mov	r0, r3
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	0802a370 	.word	0x0802a370

08017240 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8017240:	b480      	push	{r7}
 8017242:	b083      	sub	sp, #12
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	4a04      	ldr	r2, [pc, #16]	; (801725c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	601a      	str	r2, [r3, #0]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	4618      	mov	r0, r3
 8017252:	370c      	adds	r7, #12
 8017254:	46bd      	mov	sp, r7
 8017256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725a:	4770      	bx	lr
 801725c:	0802a358 	.word	0x0802a358

08017260 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	4618      	mov	r0, r3
 801726c:	f7ff ffe8 	bl	8017240 <_ZN8touchgfx15TouchControllerC1Ev>
 8017270:	4a03      	ldr	r2, [pc, #12]	; (8017280 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	601a      	str	r2, [r3, #0]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	4618      	mov	r0, r3
 801727a:	3708      	adds	r7, #8
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}
 8017280:	0802a340 	.word	0x0802a340

08017284 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8017284:	b590      	push	{r4, r7, lr}
 8017286:	b085      	sub	sp, #20
 8017288:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801728a:	f7fd fe51 	bl	8014f30 <_ZN14BitmapDatabase11getInstanceEv>
 801728e:	4604      	mov	r4, r0
 8017290:	f7fd fe58 	bl	8014f44 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017294:	4603      	mov	r3, r0
 8017296:	4619      	mov	r1, r3
 8017298:	2300      	movs	r3, #0
 801729a:	9300      	str	r3, [sp, #0]
 801729c:	2300      	movs	r3, #0
 801729e:	2200      	movs	r2, #0
 80172a0:	4620      	mov	r0, r4
 80172a2:	f007 f8e3 	bl	801e46c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80172a6:	4809      	ldr	r0, [pc, #36]	; (80172cc <touchgfx_init+0x48>)
 80172a8:	f7ff fd70 	bl	8016d8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80172ac:	2000      	movs	r0, #0
 80172ae:	f7fd fe6d 	bl	8014f8c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80172b2:	4807      	ldr	r0, [pc, #28]	; (80172d0 <touchgfx_init+0x4c>)
 80172b4:	f007 f828 	bl	801e308 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80172b8:	f7ff fedc 	bl	8017074 <_ZN12FrontendHeap11getInstanceEv>
 80172bc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80172be:	4805      	ldr	r0, [pc, #20]	; (80172d4 <touchgfx_init+0x50>)
 80172c0:	f7fe ffda 	bl	8016278 <_ZN11TouchGFXHAL10initializeEv>
}
 80172c4:	bf00      	nop
 80172c6:	370c      	adds	r7, #12
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd90      	pop	{r4, r7, pc}
 80172cc:	2000be58 	.word	0x2000be58
 80172d0:	20000054 	.word	0x20000054
 80172d4:	2000be5c 	.word	0x2000be5c

080172d8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80172dc:	4802      	ldr	r0, [pc, #8]	; (80172e8 <touchgfx_taskEntry+0x10>)
 80172de:	f001 fca6 	bl	8018c2e <_ZN8touchgfx3HAL9taskEntryEv>
}
 80172e2:	bf00      	nop
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	2000be5c 	.word	0x2000be5c

080172ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	4618      	mov	r0, r3
 80172f8:	f000 ff16 	bl	8018128 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80172fc:	4a03      	ldr	r2, [pc, #12]	; (801730c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	601a      	str	r2, [r3, #0]
    {
    }
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	4618      	mov	r0, r3
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	0802a5ec 	.word	0x0802a5ec

08017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
    {
    }
 8017318:	4a05      	ldr	r2, [pc, #20]	; (8017330 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	601a      	str	r2, [r3, #0]
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4618      	mov	r0, r3
 8017322:	f000 feff 	bl	8018124 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	0802a5ec 	.word	0x0802a5ec

08017334 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
    }
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7ff ffe7 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017342:	2118      	movs	r1, #24
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f010 fdcc 	bl	8027ee2 <_ZdlPvj>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	4618      	mov	r0, r3
 8017360:	f000 fee2 	bl	8018128 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017364:	4a03      	ldr	r2, [pc, #12]	; (8017374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	601a      	str	r2, [r3, #0]
    }
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	4618      	mov	r0, r3
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	0802a5b8 	.word	0x0802a5b8

08017378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
    }
 8017380:	4a05      	ldr	r2, [pc, #20]	; (8017398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	601a      	str	r2, [r3, #0]
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	4618      	mov	r0, r3
 801738a:	f000 fecb 	bl	8018124 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	4618      	mov	r0, r3
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}
 8017398:	0802a5b8 	.word	0x0802a5b8

0801739c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
    }
 80173a4:	6878      	ldr	r0, [r7, #4]
 80173a6:	f7ff ffe7 	bl	8017378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80173aa:	f642 014c 	movw	r1, #10316	; 0x284c
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f010 fd97 	bl	8027ee2 <_ZdlPvj>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	4618      	mov	r0, r3
 80173b8:	3708      	adds	r7, #8
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd80      	pop	{r7, pc}
	...

080173c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b082      	sub	sp, #8
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f000 feac 	bl	8018128 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80173d0:	4a03      	ldr	r2, [pc, #12]	; (80173e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	601a      	str	r2, [r3, #0]
    }
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	4618      	mov	r0, r3
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	0802a584 	.word	0x0802a584

080173e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
    }
 80173ec:	4a05      	ldr	r2, [pc, #20]	; (8017404 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	601a      	str	r2, [r3, #0]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	4618      	mov	r0, r3
 80173f6:	f000 fe95 	bl	8018124 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	4618      	mov	r0, r3
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	0802a584 	.word	0x0802a584

08017408 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
    }
 8017410:	6878      	ldr	r0, [r7, #4]
 8017412:	f7ff ffe7 	bl	80173e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017416:	215c      	movs	r1, #92	; 0x5c
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f010 fd62 	bl	8027ee2 <_ZdlPvj>
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4618      	mov	r0, r3
 8017422:	3708      	adds	r7, #8
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}

08017428 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	4a11      	ldr	r2, [pc, #68]	; (8017478 <_ZN12FrontendHeapD1Ev+0x50>)
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	601a      	str	r2, [r3, #0]
 8017436:	687a      	ldr	r2, [r7, #4]
 8017438:	f642 03d4 	movw	r3, #10452	; 0x28d4
 801743c:	4413      	add	r3, r2
 801743e:	4618      	mov	r0, r3
 8017440:	f7fd fe64 	bl	801510c <_ZN19FrontendApplicationD1Ev>
 8017444:	687a      	ldr	r2, [r7, #4]
 8017446:	f642 0378 	movw	r3, #10360	; 0x2878
 801744a:	4413      	add	r3, r2
 801744c:	4618      	mov	r0, r3
 801744e:	f7ff ffc9 	bl	80173e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	332c      	adds	r3, #44	; 0x2c
 8017456:	4618      	mov	r0, r3
 8017458:	f7ff ff8e 	bl	8017378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	3314      	adds	r3, #20
 8017460:	4618      	mov	r0, r3
 8017462:	f7ff ff55 	bl	8017310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	4618      	mov	r0, r3
 801746a:	f7ff fe1d 	bl	80170a8 <_ZN16FrontendHeapBaseD1Ev>
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	4618      	mov	r0, r3
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}
 8017478:	0802a570 	.word	0x0802a570

0801747c <_ZN12FrontendHeapD0Ev>:
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7ff ffcf 	bl	8017428 <_ZN12FrontendHeapD1Ev>
 801748a:	f642 2128 	movw	r1, #10792	; 0x2a28
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f010 fd27 	bl	8027ee2 <_ZdlPvj>
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	4618      	mov	r0, r3
 8017498:	3708      	adds	r7, #8
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
	...

080174a0 <_Z41__static_initialization_and_destruction_0ii>:
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b084      	sub	sp, #16
 80174a4:	af02      	add	r7, sp, #8
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	6039      	str	r1, [r7, #0]
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	d119      	bne.n	80174e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174b6:	4293      	cmp	r3, r2
 80174b8:	d114      	bne.n	80174e4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80174ba:	4818      	ldr	r0, [pc, #96]	; (801751c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80174bc:	f7ff fed0 	bl	8017260 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80174c0:	4817      	ldr	r0, [pc, #92]	; (8017520 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80174c2:	f7ff f965 	bl	8016790 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80174c6:	4817      	ldr	r0, [pc, #92]	; (8017524 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80174c8:	f009 f9f6 	bl	80208b8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80174cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80174d0:	9301      	str	r3, [sp, #4]
 80174d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80174d6:	9300      	str	r3, [sp, #0]
 80174d8:	4b10      	ldr	r3, [pc, #64]	; (801751c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80174da:	4a12      	ldr	r2, [pc, #72]	; (8017524 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80174dc:	4910      	ldr	r1, [pc, #64]	; (8017520 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80174de:	4812      	ldr	r0, [pc, #72]	; (8017528 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80174e0:	f7ff fe92 	bl	8017208 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d113      	bne.n	8017512 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174f0:	4293      	cmp	r3, r2
 80174f2:	d10e      	bne.n	8017512 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80174f4:	480c      	ldr	r0, [pc, #48]	; (8017528 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80174f6:	f7fe ff25 	bl	8016344 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80174fa:	480c      	ldr	r0, [pc, #48]	; (801752c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80174fc:	f7f8 fbbc 	bl	800fc78 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8017500:	4808      	ldr	r0, [pc, #32]	; (8017524 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017502:	f7ff fe43 	bl	801718c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8017506:	4806      	ldr	r0, [pc, #24]	; (8017520 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017508:	f7ff f96c 	bl	80167e4 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801750c:	4803      	ldr	r0, [pc, #12]	; (801751c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801750e:	f7fe fc8f 	bl	8015e30 <_ZN20STM32TouchControllerD1Ev>
}
 8017512:	bf00      	nop
 8017514:	3708      	adds	r7, #8
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	2000b1dc 	.word	0x2000b1dc
 8017520:	2000b1e0 	.word	0x2000b1e0
 8017524:	2000be00 	.word	0x2000be00
 8017528:	2000be5c 	.word	0x2000be5c
 801752c:	20000054 	.word	0x20000054

08017530 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8017530:	b480      	push	{r7}
 8017532:	b083      	sub	sp, #12
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017538:	2301      	movs	r3, #1
    }
 801753a:	4618      	mov	r0, r3
 801753c:	370c      	adds	r7, #12
 801753e:	46bd      	mov	sp, r7
 8017540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017544:	4770      	bx	lr

08017546 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8017546:	b480      	push	{r7}
 8017548:	b083      	sub	sp, #12
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801754e:	2354      	movs	r3, #84	; 0x54
    }
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017568:	887b      	ldrh	r3, [r7, #2]
 801756a:	2254      	movs	r2, #84	; 0x54
 801756c:	fb02 f303 	mul.w	r3, r2, r3
 8017570:	3308      	adds	r3, #8
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	4413      	add	r3, r2
    }
 8017576:	4618      	mov	r0, r3
 8017578:	370c      	adds	r7, #12
 801757a:	46bd      	mov	sp, r7
 801757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017580:	4770      	bx	lr

08017582 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8017582:	b480      	push	{r7}
 8017584:	b083      	sub	sp, #12
 8017586:	af00      	add	r7, sp, #0
 8017588:	6078      	str	r0, [r7, #4]
 801758a:	460b      	mov	r3, r1
 801758c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801758e:	887b      	ldrh	r3, [r7, #2]
 8017590:	2254      	movs	r2, #84	; 0x54
 8017592:	fb02 f303 	mul.w	r3, r2, r3
 8017596:	3308      	adds	r3, #8
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	4413      	add	r3, r2
    }
 801759c:	4618      	mov	r0, r3
 801759e:	370c      	adds	r7, #12
 80175a0:	46bd      	mov	sp, r7
 80175a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a6:	4770      	bx	lr

080175a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80175a8:	b480      	push	{r7}
 80175aa:	b083      	sub	sp, #12
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80175b0:	2301      	movs	r3, #1
    }
 80175b2:	4618      	mov	r0, r3
 80175b4:	370c      	adds	r7, #12
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr

080175be <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80175be:	b480      	push	{r7}
 80175c0:	b083      	sub	sp, #12
 80175c2:	af00      	add	r7, sp, #0
 80175c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80175c6:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 80175ca:	4618      	mov	r0, r3
 80175cc:	370c      	adds	r7, #12
 80175ce:	46bd      	mov	sp, r7
 80175d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d4:	4770      	bx	lr

080175d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80175d6:	b480      	push	{r7}
 80175d8:	b083      	sub	sp, #12
 80175da:	af00      	add	r7, sp, #0
 80175dc:	6078      	str	r0, [r7, #4]
 80175de:	460b      	mov	r3, r1
 80175e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80175e2:	887b      	ldrh	r3, [r7, #2]
 80175e4:	f642 0244 	movw	r2, #10308	; 0x2844
 80175e8:	fb02 f303 	mul.w	r3, r2, r3
 80175ec:	3308      	adds	r3, #8
 80175ee:	687a      	ldr	r2, [r7, #4]
 80175f0:	4413      	add	r3, r2
    }
 80175f2:	4618      	mov	r0, r3
 80175f4:	370c      	adds	r7, #12
 80175f6:	46bd      	mov	sp, r7
 80175f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fc:	4770      	bx	lr

080175fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80175fe:	b480      	push	{r7}
 8017600:	b083      	sub	sp, #12
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
 8017606:	460b      	mov	r3, r1
 8017608:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801760a:	887b      	ldrh	r3, [r7, #2]
 801760c:	f642 0244 	movw	r2, #10308	; 0x2844
 8017610:	fb02 f303 	mul.w	r3, r2, r3
 8017614:	3308      	adds	r3, #8
 8017616:	687a      	ldr	r2, [r7, #4]
 8017618:	4413      	add	r3, r2
    }
 801761a:	4618      	mov	r0, r3
 801761c:	370c      	adds	r7, #12
 801761e:	46bd      	mov	sp, r7
 8017620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017624:	4770      	bx	lr

08017626 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017626:	b480      	push	{r7}
 8017628:	b083      	sub	sp, #12
 801762a:	af00      	add	r7, sp, #0
 801762c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801762e:	2301      	movs	r3, #1
    }
 8017630:	4618      	mov	r0, r3
 8017632:	370c      	adds	r7, #12
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr

0801763c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017644:	2310      	movs	r3, #16
    }
 8017646:	4618      	mov	r0, r3
 8017648:	370c      	adds	r7, #12
 801764a:	46bd      	mov	sp, r7
 801764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017650:	4770      	bx	lr

08017652 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017652:	b480      	push	{r7}
 8017654:	b083      	sub	sp, #12
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
 801765a:	460b      	mov	r3, r1
 801765c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801765e:	887b      	ldrh	r3, [r7, #2]
 8017660:	011b      	lsls	r3, r3, #4
 8017662:	3308      	adds	r3, #8
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	4413      	add	r3, r2
    }
 8017668:	4618      	mov	r0, r3
 801766a:	370c      	adds	r7, #12
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr

08017674 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	460b      	mov	r3, r1
 801767e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017680:	887b      	ldrh	r3, [r7, #2]
 8017682:	011b      	lsls	r3, r3, #4
 8017684:	3308      	adds	r3, #8
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	4413      	add	r3, r2
    }
 801768a:	4618      	mov	r0, r3
 801768c:	370c      	adds	r7, #12
 801768e:	46bd      	mov	sp, r7
 8017690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017694:	4770      	bx	lr

08017696 <_GLOBAL__sub_I_touchgfx_init>:
 8017696:	b580      	push	{r7, lr}
 8017698:	af00      	add	r7, sp, #0
 801769a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801769e:	2001      	movs	r0, #1
 80176a0:	f7ff fefe 	bl	80174a0 <_Z41__static_initialization_and_destruction_0ii>
 80176a4:	bd80      	pop	{r7, pc}

080176a6 <_GLOBAL__sub_D_touchgfx_init>:
 80176a6:	b580      	push	{r7, lr}
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80176ae:	2000      	movs	r0, #0
 80176b0:	f7ff fef6 	bl	80174a0 <_Z41__static_initialization_and_destruction_0ii>
 80176b4:	bd80      	pop	{r7, pc}

080176b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80176b6:	b580      	push	{r7, lr}
 80176b8:	b082      	sub	sp, #8
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	3318      	adds	r3, #24
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	4798      	blx	r3
    }
 80176ca:	bf00      	nop
 80176cc:	3708      	adds	r7, #8
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}

080176d2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80176d2:	b480      	push	{r7}
 80176d4:	b083      	sub	sp, #12
 80176d6:	af00      	add	r7, sp, #0
 80176d8:	6078      	str	r0, [r7, #4]
 80176da:	460b      	mov	r3, r1
 80176dc:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	78fa      	ldrb	r2, [r7, #3]
 80176e2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 80176e6:	bf00      	nop
 80176e8:	370c      	adds	r7, #12
 80176ea:	46bd      	mov	sp, r7
 80176ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f0:	4770      	bx	lr

080176f2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80176f2:	b480      	push	{r7}
 80176f4:	b083      	sub	sp, #12
 80176f6:	af00      	add	r7, sp, #0
 80176f8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017700:	3301      	adds	r3, #1
 8017702:	b2da      	uxtb	r2, r3
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801770a:	bf00      	nop
 801770c:	370c      	adds	r7, #12
 801770e:	46bd      	mov	sp, r7
 8017710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017714:	4770      	bx	lr
	...

08017718 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	460b      	mov	r3, r1
 8017722:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017724:	78fb      	ldrb	r3, [r7, #3]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d002      	beq.n	8017730 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801772a:	78fb      	ldrb	r3, [r7, #3]
 801772c:	2b02      	cmp	r3, #2
 801772e:	d105      	bne.n	801773c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	78fa      	ldrb	r2, [r7, #3]
 8017734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017738:	2301      	movs	r3, #1
 801773a:	e027      	b.n	801778c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 801773c:	78fb      	ldrb	r3, [r7, #3]
 801773e:	2b01      	cmp	r3, #1
 8017740:	d123      	bne.n	801778a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017746:	2b00      	cmp	r3, #0
 8017748:	d014      	beq.n	8017774 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	3380      	adds	r3, #128	; 0x80
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	4798      	blx	r3
 8017756:	4603      	mov	r3, r0
 8017758:	461a      	mov	r2, r3
 801775a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801775e:	429a      	cmp	r2, r3
 8017760:	d008      	beq.n	8017774 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017762:	4b0c      	ldr	r3, [pc, #48]	; (8017794 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	f083 0301 	eor.w	r3, r3, #1
 801776a:	b2db      	uxtb	r3, r3
 801776c:	2b00      	cmp	r3, #0
 801776e:	d001      	beq.n	8017774 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017770:	2301      	movs	r3, #1
 8017772:	e000      	b.n	8017776 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017774:	2300      	movs	r3, #0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d005      	beq.n	8017786 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	78fa      	ldrb	r2, [r7, #3]
 801777e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8017782:	2301      	movs	r3, #1
 8017784:	e002      	b.n	801778c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017786:	2300      	movs	r3, #0
 8017788:	e000      	b.n	801778c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 801778a:	2300      	movs	r3, #0
    }
 801778c:	4618      	mov	r0, r3
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	2000bee8 	.word	0x2000bee8

08017798 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8017798:	b480      	push	{r7}
 801779a:	b083      	sub	sp, #12
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	683a      	ldr	r2, [r7, #0]
 80177a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80177a8:	bf00      	nop
 80177aa:	370c      	adds	r7, #12
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <__NVIC_EnableIRQ>:
{
 80177b4:	b480      	push	{r7}
 80177b6:	b083      	sub	sp, #12
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	4603      	mov	r3, r0
 80177bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80177be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	db0d      	blt.n	80177e2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80177c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	f003 021f 	and.w	r2, r3, #31
 80177d0:	4907      	ldr	r1, [pc, #28]	; (80177f0 <__NVIC_EnableIRQ+0x3c>)
 80177d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80177d6:	095b      	lsrs	r3, r3, #5
 80177d8:	2001      	movs	r0, #1
 80177da:	fa00 f202 	lsl.w	r2, r0, r2
 80177de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80177e2:	bf00      	nop
 80177e4:	370c      	adds	r7, #12
 80177e6:	46bd      	mov	sp, r7
 80177e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop
 80177f0:	e000e100 	.word	0xe000e100

080177f4 <__NVIC_DisableIRQ>:
{
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	4603      	mov	r3, r0
 80177fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80177fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017802:	2b00      	cmp	r3, #0
 8017804:	db12      	blt.n	801782c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801780a:	b2db      	uxtb	r3, r3
 801780c:	f003 021f 	and.w	r2, r3, #31
 8017810:	4909      	ldr	r1, [pc, #36]	; (8017838 <__NVIC_DisableIRQ+0x44>)
 8017812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017816:	095b      	lsrs	r3, r3, #5
 8017818:	2001      	movs	r0, #1
 801781a:	fa00 f202 	lsl.w	r2, r0, r2
 801781e:	3320      	adds	r3, #32
 8017820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017824:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017828:	f3bf 8f6f 	isb	sy
}
 801782c:	bf00      	nop
 801782e:	370c      	adds	r7, #12
 8017830:	46bd      	mov	sp, r7
 8017832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017836:	4770      	bx	lr
 8017838:	e000e100 	.word	0xe000e100

0801783c <__NVIC_SetPriority>:
{
 801783c:	b480      	push	{r7}
 801783e:	b083      	sub	sp, #12
 8017840:	af00      	add	r7, sp, #0
 8017842:	4603      	mov	r3, r0
 8017844:	6039      	str	r1, [r7, #0]
 8017846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801784c:	2b00      	cmp	r3, #0
 801784e:	db0c      	blt.n	801786a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	b2db      	uxtb	r3, r3
 8017854:	4a0e      	ldr	r2, [pc, #56]	; (8017890 <__NVIC_SetPriority+0x54>)
 8017856:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801785a:	4608      	mov	r0, r1
 801785c:	011b      	lsls	r3, r3, #4
 801785e:	b2d9      	uxtb	r1, r3
 8017860:	1813      	adds	r3, r2, r0
 8017862:	460a      	mov	r2, r1
 8017864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017868:	e00c      	b.n	8017884 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	b2da      	uxtb	r2, r3
 801786e:	4909      	ldr	r1, [pc, #36]	; (8017894 <__NVIC_SetPriority+0x58>)
 8017870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017874:	b2db      	uxtb	r3, r3
 8017876:	f003 030f 	and.w	r3, r3, #15
 801787a:	3b04      	subs	r3, #4
 801787c:	0112      	lsls	r2, r2, #4
 801787e:	b2d2      	uxtb	r2, r2
 8017880:	440b      	add	r3, r1
 8017882:	761a      	strb	r2, [r3, #24]
}
 8017884:	bf00      	nop
 8017886:	370c      	adds	r7, #12
 8017888:	46bd      	mov	sp, r7
 801788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788e:	4770      	bx	lr
 8017890:	e000e100 	.word	0xe000e100
 8017894:	e000ed00 	.word	0xe000ed00

08017898 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017898:	b5b0      	push	{r4, r5, r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f001 fc88 	bl	80191b8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 80178a8:	687d      	ldr	r5, [r7, #4]
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	334c      	adds	r3, #76	; 0x4c
 80178b0:	681c      	ldr	r4, [r3, #0]
 80178b2:	f004 fb13 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 80178b6:	4603      	mov	r3, r0
 80178b8:	4619      	mov	r1, r3
 80178ba:	4628      	mov	r0, r5
 80178bc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	490d      	ldr	r1, [pc, #52]	; (80178f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7ff ff68 	bl	8017798 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2101      	movs	r1, #1
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7ff ff23 	bl	8017718 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	3374      	adds	r3, #116	; 0x74
 80178da:	681c      	ldr	r4, [r3, #0]
 80178dc:	2300      	movs	r3, #0
 80178de:	2200      	movs	r2, #0
 80178e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80178e4:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2101      	movs	r1, #1
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7ff fef1 	bl	80176d2 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80178f0:	bf00      	nop
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bdb0      	pop	{r4, r5, r7, pc}
 80178f8:	080164dd 	.word	0x080164dd

080178fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017904:	2109      	movs	r1, #9
 8017906:	205a      	movs	r0, #90	; 0x5a
 8017908:	f7ff ff98 	bl	801783c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801790c:	2109      	movs	r1, #9
 801790e:	2058      	movs	r0, #88	; 0x58
 8017910:	f7ff ff94 	bl	801783c <__NVIC_SetPriority>
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017924:	205a      	movs	r0, #90	; 0x5a
 8017926:	f7ff ff45 	bl	80177b4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801792a:	2058      	movs	r0, #88	; 0x58
 801792c:	f7ff ff42 	bl	80177b4 <__NVIC_EnableIRQ>
}
 8017930:	bf00      	nop
 8017932:	3708      	adds	r7, #8
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}

08017938 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017940:	205a      	movs	r0, #90	; 0x5a
 8017942:	f7ff ff57 	bl	80177f4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017946:	2058      	movs	r0, #88	; 0x58
 8017948:	f7ff ff54 	bl	80177f4 <__NVIC_DisableIRQ>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801795c:	4b11      	ldr	r3, [pc, #68]	; (80179a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801795e:	68db      	ldr	r3, [r3, #12]
 8017960:	b29b      	uxth	r3, r3
 8017962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017966:	b29b      	uxth	r3, r3
 8017968:	3b01      	subs	r3, #1
 801796a:	b29a      	uxth	r2, r3
 801796c:	4b0e      	ldr	r3, [pc, #56]	; (80179a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801796e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017970:	4b0c      	ldr	r3, [pc, #48]	; (80179a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017972:	691b      	ldr	r3, [r3, #16]
 8017974:	b29b      	uxth	r3, r3
 8017976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801797a:	b29b      	uxth	r3, r3
 801797c:	3b01      	subs	r3, #1
 801797e:	b29a      	uxth	r2, r3
 8017980:	4b0a      	ldr	r3, [pc, #40]	; (80179ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017982:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017984:	4b08      	ldr	r3, [pc, #32]	; (80179a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017986:	881a      	ldrh	r2, [r3, #0]
 8017988:	4b06      	ldr	r3, [pc, #24]	; (80179a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801798a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801798c:	4b05      	ldr	r3, [pc, #20]	; (80179a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017990:	4a04      	ldr	r2, [pc, #16]	; (80179a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017992:	f043 0301 	orr.w	r3, r3, #1
 8017996:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017998:	bf00      	nop
 801799a:	370c      	adds	r7, #12
 801799c:	46bd      	mov	sp, r7
 801799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a2:	4770      	bx	lr
 80179a4:	40016800 	.word	0x40016800
 80179a8:	2000bed4 	.word	0x2000bed4
 80179ac:	2000bed6 	.word	0x2000bed6

080179b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80179b0:	b480      	push	{r7}
 80179b2:	b083      	sub	sp, #12
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80179b8:	4b03      	ldr	r3, [pc, #12]	; (80179c8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80179ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80179bc:	4618      	mov	r0, r3
 80179be:	370c      	adds	r7, #12
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr
 80179c8:	40016884 	.word	0x40016884

080179cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80179cc:	b480      	push	{r7}
 80179ce:	b083      	sub	sp, #12
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80179d6:	4a06      	ldr	r2, [pc, #24]	; (80179f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80179dc:	4b05      	ldr	r3, [pc, #20]	; (80179f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80179de:	2201      	movs	r2, #1
 80179e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80179e2:	bf00      	nop
 80179e4:	370c      	adds	r7, #12
 80179e6:	46bd      	mov	sp, r7
 80179e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ec:	4770      	bx	lr
 80179ee:	bf00      	nop
 80179f0:	40016884 	.word	0x40016884
 80179f4:	40016800 	.word	0x40016800

080179f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b082      	sub	sp, #8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6839      	ldr	r1, [r7, #0]
 8017a06:	4618      	mov	r0, r3
 8017a08:	f001 f8e6 	bl	8018bd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017a0c:	bf00      	nop
 8017a0e:	3708      	adds	r7, #8
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017a14:	b480      	push	{r7}
 8017a16:	b085      	sub	sp, #20
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017a1c:	4b0d      	ldr	r3, [pc, #52]	; (8017a54 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a20:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017a22:	4b0c      	ldr	r3, [pc, #48]	; (8017a54 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017a24:	68db      	ldr	r3, [r3, #12]
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	3301      	adds	r3, #1
 8017a30:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8017a32:	89fa      	ldrh	r2, [r7, #14]
 8017a34:	89bb      	ldrh	r3, [r7, #12]
 8017a36:	429a      	cmp	r2, r3
 8017a38:	d201      	bcs.n	8017a3e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	e003      	b.n	8017a46 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8017a3e:	89fa      	ldrh	r2, [r7, #14]
 8017a40:	89bb      	ldrh	r3, [r7, #12]
 8017a42:	1ad3      	subs	r3, r2, r3
 8017a44:	b29b      	uxth	r3, r3
    }
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3714      	adds	r7, #20
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop
 8017a54:	40016800 	.word	0x40016800

08017a58 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017a60:	4b1a      	ldr	r3, [pc, #104]	; (8017acc <HAL_LTDC_LineEventCallback+0x74>)
 8017a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a64:	4a1a      	ldr	r2, [pc, #104]	; (8017ad0 <HAL_LTDC_LineEventCallback+0x78>)
 8017a66:	8812      	ldrh	r2, [r2, #0]
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	bf0c      	ite	eq
 8017a6c:	2301      	moveq	r3, #1
 8017a6e:	2300      	movne	r3, #0
 8017a70:	b2db      	uxtb	r3, r3
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d017      	beq.n	8017aa6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8017a76:	4b17      	ldr	r3, [pc, #92]	; (8017ad4 <HAL_LTDC_LineEventCallback+0x7c>)
 8017a78:	881b      	ldrh	r3, [r3, #0]
 8017a7a:	4619      	mov	r1, r3
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ee fceb 	bl	8006458 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8017a82:	f7f8 fe09 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8017a86:	4603      	mov	r3, r0
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7ff fe32 	bl	80176f2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017a8e:	f7fe fce7 	bl	8016460 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8017a92:	f7f8 fe01 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8017a96:	4603      	mov	r3, r0
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f001 fe15 	bl	80196c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	f7fe f9e8 	bl	8015e74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8017aa4:	e00e      	b.n	8017ac4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8017aa6:	4b0a      	ldr	r3, [pc, #40]	; (8017ad0 <HAL_LTDC_LineEventCallback+0x78>)
 8017aa8:	881b      	ldrh	r3, [r3, #0]
 8017aaa:	4619      	mov	r1, r3
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f7ee fcd3 	bl	8006458 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8017ab2:	2000      	movs	r0, #0
 8017ab4:	f7fe f9e9 	bl	8015e8a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8017ab8:	f7f8 fdee 	bl	8010698 <_ZN8touchgfx3HAL11getInstanceEv>
 8017abc:	4603      	mov	r3, r0
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7ff fdf9 	bl	80176b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8017ac4:	bf00      	nop
 8017ac6:	3708      	adds	r7, #8
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	bd80      	pop	{r7, pc}
 8017acc:	40016800 	.word	0x40016800
 8017ad0:	2000bed4 	.word	0x2000bed4
 8017ad4:	2000bed6 	.word	0x2000bed6

08017ad8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	4603      	mov	r3, r0
 8017ae0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8017ae2:	20c8      	movs	r0, #200	; 0xc8
 8017ae4:	f7f7 fde6 	bl	800f6b4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8017ae8:	f000 fa7a 	bl	8017fe0 <ft5336_I2C_InitializeIfRequired>
}
 8017aec:	bf00      	nop
 8017aee:	3708      	adds	r7, #8
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}

08017af4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	4603      	mov	r3, r0
 8017afc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8017afe:	bf00      	nop
 8017b00:	370c      	adds	r7, #12
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr

08017b0a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b084      	sub	sp, #16
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	4603      	mov	r3, r0
 8017b12:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8017b14:	2300      	movs	r3, #0
 8017b16:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8017b20:	f000 fa5e 	bl	8017fe0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8017b24:	2300      	movs	r3, #0
 8017b26:	73fb      	strb	r3, [r7, #15]
 8017b28:	e010      	b.n	8017b4c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8017b2a:	88fb      	ldrh	r3, [r7, #6]
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	21a8      	movs	r1, #168	; 0xa8
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7f7 fda1 	bl	800f678 <TS_IO_Read>
 8017b36:	4603      	mov	r3, r0
 8017b38:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8017b3a:	7b7b      	ldrb	r3, [r7, #13]
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	2b51      	cmp	r3, #81	; 0x51
 8017b40:	d101      	bne.n	8017b46 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8017b42:	2301      	movs	r3, #1
 8017b44:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8017b46:	7bfb      	ldrb	r3, [r7, #15]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	73fb      	strb	r3, [r7, #15]
 8017b4c:	7bfb      	ldrb	r3, [r7, #15]
 8017b4e:	2b02      	cmp	r3, #2
 8017b50:	d802      	bhi.n	8017b58 <ft5336_ReadID+0x4e>
 8017b52:	7bbb      	ldrb	r3, [r7, #14]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d0e8      	beq.n	8017b2a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8017b58:	7b7b      	ldrb	r3, [r7, #13]
 8017b5a:	b2db      	uxtb	r3, r3
 8017b5c:	b29b      	uxth	r3, r3
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b082      	sub	sp, #8
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8017b70:	88fb      	ldrh	r3, [r7, #6]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f000 fa44 	bl	8018000 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8017b78:	88fb      	ldrh	r3, [r7, #6]
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f000 f932 	bl	8017de4 <ft5336_TS_DisableIT>
}
 8017b80:	bf00      	nop
 8017b82:	3708      	adds	r7, #8
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	4603      	mov	r3, r0
 8017b90:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8017b96:	88fb      	ldrh	r3, [r7, #6]
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	2102      	movs	r1, #2
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7f7 fd6b 	bl	800f678 <TS_IO_Read>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8017ba6:	7bfb      	ldrb	r3, [r7, #15]
 8017ba8:	b2db      	uxtb	r3, r3
 8017baa:	f003 030f 	and.w	r3, r3, #15
 8017bae:	b2db      	uxtb	r3, r3
 8017bb0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8017bb2:	7bfb      	ldrb	r3, [r7, #15]
 8017bb4:	b2db      	uxtb	r3, r3
 8017bb6:	2b05      	cmp	r3, #5
 8017bb8:	d901      	bls.n	8017bbe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8017bbe:	7bfb      	ldrb	r3, [r7, #15]
 8017bc0:	b2da      	uxtb	r2, r3
 8017bc2:	4b05      	ldr	r3, [pc, #20]	; (8017bd8 <ft5336_TS_DetectTouch+0x50>)
 8017bc4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8017bc6:	4b04      	ldr	r3, [pc, #16]	; (8017bd8 <ft5336_TS_DetectTouch+0x50>)
 8017bc8:	2200      	movs	r2, #0
 8017bca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8017bcc:	7bfb      	ldrb	r3, [r7, #15]
 8017bce:	b2db      	uxtb	r3, r3
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3710      	adds	r7, #16
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	2000bed8 	.word	0x2000bed8

08017bdc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b086      	sub	sp, #24
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	4603      	mov	r3, r0
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]
 8017be8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8017bea:	2300      	movs	r3, #0
 8017bec:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8017bfe:	4b6d      	ldr	r3, [pc, #436]	; (8017db4 <ft5336_TS_GetXY+0x1d8>)
 8017c00:	789a      	ldrb	r2, [r3, #2]
 8017c02:	4b6c      	ldr	r3, [pc, #432]	; (8017db4 <ft5336_TS_GetXY+0x1d8>)
 8017c04:	785b      	ldrb	r3, [r3, #1]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	f080 80cf 	bcs.w	8017daa <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8017c0c:	4b69      	ldr	r3, [pc, #420]	; (8017db4 <ft5336_TS_GetXY+0x1d8>)
 8017c0e:	789b      	ldrb	r3, [r3, #2]
 8017c10:	2b09      	cmp	r3, #9
 8017c12:	d871      	bhi.n	8017cf8 <ft5336_TS_GetXY+0x11c>
 8017c14:	a201      	add	r2, pc, #4	; (adr r2, 8017c1c <ft5336_TS_GetXY+0x40>)
 8017c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c1a:	bf00      	nop
 8017c1c:	08017c45 	.word	0x08017c45
 8017c20:	08017c57 	.word	0x08017c57
 8017c24:	08017c69 	.word	0x08017c69
 8017c28:	08017c7b 	.word	0x08017c7b
 8017c2c:	08017c8d 	.word	0x08017c8d
 8017c30:	08017c9f 	.word	0x08017c9f
 8017c34:	08017cb1 	.word	0x08017cb1
 8017c38:	08017cc3 	.word	0x08017cc3
 8017c3c:	08017cd5 	.word	0x08017cd5
 8017c40:	08017ce7 	.word	0x08017ce7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8017c44:	2304      	movs	r3, #4
 8017c46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8017c48:	2303      	movs	r3, #3
 8017c4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8017c4c:	2306      	movs	r3, #6
 8017c4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8017c50:	2305      	movs	r3, #5
 8017c52:	753b      	strb	r3, [r7, #20]
      break;
 8017c54:	e051      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8017c56:	230a      	movs	r3, #10
 8017c58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8017c5a:	2309      	movs	r3, #9
 8017c5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8017c5e:	230c      	movs	r3, #12
 8017c60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8017c62:	230b      	movs	r3, #11
 8017c64:	753b      	strb	r3, [r7, #20]
      break;
 8017c66:	e048      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8017c68:	2310      	movs	r3, #16
 8017c6a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8017c6c:	230f      	movs	r3, #15
 8017c6e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8017c70:	2312      	movs	r3, #18
 8017c72:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8017c74:	2311      	movs	r3, #17
 8017c76:	753b      	strb	r3, [r7, #20]
      break;
 8017c78:	e03f      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8017c7a:	2316      	movs	r3, #22
 8017c7c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8017c7e:	2315      	movs	r3, #21
 8017c80:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8017c82:	2318      	movs	r3, #24
 8017c84:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8017c86:	2317      	movs	r3, #23
 8017c88:	753b      	strb	r3, [r7, #20]
      break;
 8017c8a:	e036      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8017c8c:	231c      	movs	r3, #28
 8017c8e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8017c90:	231b      	movs	r3, #27
 8017c92:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8017c94:	231e      	movs	r3, #30
 8017c96:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8017c98:	231d      	movs	r3, #29
 8017c9a:	753b      	strb	r3, [r7, #20]
      break;
 8017c9c:	e02d      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8017c9e:	2322      	movs	r3, #34	; 0x22
 8017ca0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8017ca2:	2321      	movs	r3, #33	; 0x21
 8017ca4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8017ca6:	2324      	movs	r3, #36	; 0x24
 8017ca8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8017caa:	2323      	movs	r3, #35	; 0x23
 8017cac:	753b      	strb	r3, [r7, #20]
      break;
 8017cae:	e024      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8017cb0:	2328      	movs	r3, #40	; 0x28
 8017cb2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8017cb4:	2327      	movs	r3, #39	; 0x27
 8017cb6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8017cb8:	232a      	movs	r3, #42	; 0x2a
 8017cba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8017cbc:	2329      	movs	r3, #41	; 0x29
 8017cbe:	753b      	strb	r3, [r7, #20]
      break;
 8017cc0:	e01b      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8017cc2:	232e      	movs	r3, #46	; 0x2e
 8017cc4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8017cc6:	232d      	movs	r3, #45	; 0x2d
 8017cc8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8017cca:	2330      	movs	r3, #48	; 0x30
 8017ccc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8017cce:	232f      	movs	r3, #47	; 0x2f
 8017cd0:	753b      	strb	r3, [r7, #20]
      break;
 8017cd2:	e012      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8017cd4:	2334      	movs	r3, #52	; 0x34
 8017cd6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8017cd8:	2333      	movs	r3, #51	; 0x33
 8017cda:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8017cdc:	2336      	movs	r3, #54	; 0x36
 8017cde:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8017ce0:	2335      	movs	r3, #53	; 0x35
 8017ce2:	753b      	strb	r3, [r7, #20]
      break;
 8017ce4:	e009      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8017ce6:	233a      	movs	r3, #58	; 0x3a
 8017ce8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8017cea:	2339      	movs	r3, #57	; 0x39
 8017cec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8017cee:	233c      	movs	r3, #60	; 0x3c
 8017cf0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8017cf2:	233b      	movs	r3, #59	; 0x3b
 8017cf4:	753b      	strb	r3, [r7, #20]
      break;
 8017cf6:	e000      	b.n	8017cfa <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8017cf8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8017cfa:	89fb      	ldrh	r3, [r7, #14]
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	7dfa      	ldrb	r2, [r7, #23]
 8017d00:	4611      	mov	r1, r2
 8017d02:	4618      	mov	r0, r3
 8017d04:	f7f7 fcb8 	bl	800f678 <TS_IO_Read>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8017d0c:	7cfb      	ldrb	r3, [r7, #19]
 8017d0e:	b2db      	uxtb	r3, r3
 8017d10:	b29a      	uxth	r2, r3
 8017d12:	4b29      	ldr	r3, [pc, #164]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d14:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8017d16:	89fb      	ldrh	r3, [r7, #14]
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	7dba      	ldrb	r2, [r7, #22]
 8017d1c:	4611      	mov	r1, r2
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f7f7 fcaa 	bl	800f678 <TS_IO_Read>
 8017d24:	4603      	mov	r3, r0
 8017d26:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8017d28:	7cfb      	ldrb	r3, [r7, #19]
 8017d2a:	b2db      	uxtb	r3, r3
 8017d2c:	021b      	lsls	r3, r3, #8
 8017d2e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8017d32:	b21a      	sxth	r2, r3
 8017d34:	4b20      	ldr	r3, [pc, #128]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d36:	881b      	ldrh	r3, [r3, #0]
 8017d38:	b21b      	sxth	r3, r3
 8017d3a:	4313      	orrs	r3, r2
 8017d3c:	b21b      	sxth	r3, r3
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	4b1d      	ldr	r3, [pc, #116]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d42:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8017d44:	4b1c      	ldr	r3, [pc, #112]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d46:	881a      	ldrh	r2, [r3, #0]
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8017d4c:	89fb      	ldrh	r3, [r7, #14]
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	7d7a      	ldrb	r2, [r7, #21]
 8017d52:	4611      	mov	r1, r2
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7f7 fc8f 	bl	800f678 <TS_IO_Read>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8017d5e:	7cfb      	ldrb	r3, [r7, #19]
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	b29a      	uxth	r2, r3
 8017d64:	4b14      	ldr	r3, [pc, #80]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d66:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8017d68:	89fb      	ldrh	r3, [r7, #14]
 8017d6a:	b2db      	uxtb	r3, r3
 8017d6c:	7d3a      	ldrb	r2, [r7, #20]
 8017d6e:	4611      	mov	r1, r2
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7f7 fc81 	bl	800f678 <TS_IO_Read>
 8017d76:	4603      	mov	r3, r0
 8017d78:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8017d7a:	7cfb      	ldrb	r3, [r7, #19]
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	021b      	lsls	r3, r3, #8
 8017d80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8017d84:	b21a      	sxth	r2, r3
 8017d86:	4b0c      	ldr	r3, [pc, #48]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	b21b      	sxth	r3, r3
 8017d8c:	4313      	orrs	r3, r2
 8017d8e:	b21b      	sxth	r3, r3
 8017d90:	b29a      	uxth	r2, r3
 8017d92:	4b09      	ldr	r3, [pc, #36]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d94:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8017d96:	4b08      	ldr	r3, [pc, #32]	; (8017db8 <ft5336_TS_GetXY+0x1dc>)
 8017d98:	881a      	ldrh	r2, [r3, #0]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8017d9e:	4b05      	ldr	r3, [pc, #20]	; (8017db4 <ft5336_TS_GetXY+0x1d8>)
 8017da0:	789b      	ldrb	r3, [r3, #2]
 8017da2:	3301      	adds	r3, #1
 8017da4:	b2da      	uxtb	r2, r3
 8017da6:	4b03      	ldr	r3, [pc, #12]	; (8017db4 <ft5336_TS_GetXY+0x1d8>)
 8017da8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8017daa:	bf00      	nop
 8017dac:	3718      	adds	r7, #24
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	2000bed8 	.word	0x2000bed8
 8017db8:	2000bedc 	.word	0x2000bedc

08017dbc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8017dca:	2301      	movs	r3, #1
 8017dcc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8017dce:	88fb      	ldrh	r3, [r7, #6]
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	7bfa      	ldrb	r2, [r7, #15]
 8017dd4:	21a4      	movs	r1, #164	; 0xa4
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7f7 fc34 	bl	800f644 <TS_IO_Write>
}
 8017ddc:	bf00      	nop
 8017dde:	3710      	adds	r7, #16
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	4603      	mov	r3, r0
 8017dec:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8017dee:	2300      	movs	r3, #0
 8017df0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8017df2:	2300      	movs	r3, #0
 8017df4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8017df6:	88fb      	ldrh	r3, [r7, #6]
 8017df8:	b2db      	uxtb	r3, r3
 8017dfa:	7bfa      	ldrb	r2, [r7, #15]
 8017dfc:	21a4      	movs	r1, #164	; 0xa4
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7f7 fc20 	bl	800f644 <TS_IO_Write>
}
 8017e04:	bf00      	nop
 8017e06:	3710      	adds	r7, #16
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	4603      	mov	r3, r0
 8017e14:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8017e16:	2300      	movs	r3, #0
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8017e24:	b480      	push	{r7}
 8017e26:	b083      	sub	sp, #12
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8017e2e:	bf00      	nop
 8017e30:	370c      	adds	r7, #12
 8017e32:	46bd      	mov	sp, r7
 8017e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e38:	4770      	bx	lr

08017e3a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8017e3a:	b580      	push	{r7, lr}
 8017e3c:	b084      	sub	sp, #16
 8017e3e:	af00      	add	r7, sp, #0
 8017e40:	4603      	mov	r3, r0
 8017e42:	6039      	str	r1, [r7, #0]
 8017e44:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8017e46:	2300      	movs	r3, #0
 8017e48:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8017e4a:	88fb      	ldrh	r3, [r7, #6]
 8017e4c:	b2db      	uxtb	r3, r3
 8017e4e:	2101      	movs	r1, #1
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7f7 fc11 	bl	800f678 <TS_IO_Read>
 8017e56:	4603      	mov	r3, r0
 8017e58:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8017e5a:	7bfb      	ldrb	r3, [r7, #15]
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	461a      	mov	r2, r3
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	601a      	str	r2, [r3, #0]
}
 8017e64:	bf00      	nop
 8017e66:	3710      	adds	r7, #16
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b086      	sub	sp, #24
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60b9      	str	r1, [r7, #8]
 8017e74:	607a      	str	r2, [r7, #4]
 8017e76:	603b      	str	r3, [r7, #0]
 8017e78:	4603      	mov	r3, r0
 8017e7a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8017e80:	2300      	movs	r3, #0
 8017e82:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8017e84:	2300      	movs	r3, #0
 8017e86:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8017e8c:	4b4d      	ldr	r3, [pc, #308]	; (8017fc4 <ft5336_TS_GetTouchInfo+0x158>)
 8017e8e:	785b      	ldrb	r3, [r3, #1]
 8017e90:	461a      	mov	r2, r3
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	4293      	cmp	r3, r2
 8017e96:	f080 8090 	bcs.w	8017fba <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	2b09      	cmp	r3, #9
 8017e9e:	d85d      	bhi.n	8017f5c <ft5336_TS_GetTouchInfo+0xf0>
 8017ea0:	a201      	add	r2, pc, #4	; (adr r2, 8017ea8 <ft5336_TS_GetTouchInfo+0x3c>)
 8017ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ea6:	bf00      	nop
 8017ea8:	08017ed1 	.word	0x08017ed1
 8017eac:	08017edf 	.word	0x08017edf
 8017eb0:	08017eed 	.word	0x08017eed
 8017eb4:	08017efb 	.word	0x08017efb
 8017eb8:	08017f09 	.word	0x08017f09
 8017ebc:	08017f17 	.word	0x08017f17
 8017ec0:	08017f25 	.word	0x08017f25
 8017ec4:	08017f33 	.word	0x08017f33
 8017ec8:	08017f41 	.word	0x08017f41
 8017ecc:	08017f4f 	.word	0x08017f4f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8017ed0:	2303      	movs	r3, #3
 8017ed2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8017ed4:	2307      	movs	r3, #7
 8017ed6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8017ed8:	2308      	movs	r3, #8
 8017eda:	757b      	strb	r3, [r7, #21]
      break;
 8017edc:	e03f      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8017ede:	2309      	movs	r3, #9
 8017ee0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8017ee2:	230d      	movs	r3, #13
 8017ee4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8017ee6:	230e      	movs	r3, #14
 8017ee8:	757b      	strb	r3, [r7, #21]
      break;
 8017eea:	e038      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8017eec:	230f      	movs	r3, #15
 8017eee:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8017ef0:	2313      	movs	r3, #19
 8017ef2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8017ef4:	2314      	movs	r3, #20
 8017ef6:	757b      	strb	r3, [r7, #21]
      break;
 8017ef8:	e031      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8017efa:	2315      	movs	r3, #21
 8017efc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8017efe:	2319      	movs	r3, #25
 8017f00:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8017f02:	231a      	movs	r3, #26
 8017f04:	757b      	strb	r3, [r7, #21]
      break;
 8017f06:	e02a      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8017f08:	231b      	movs	r3, #27
 8017f0a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8017f0c:	231f      	movs	r3, #31
 8017f0e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8017f10:	2320      	movs	r3, #32
 8017f12:	757b      	strb	r3, [r7, #21]
      break;
 8017f14:	e023      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8017f16:	2321      	movs	r3, #33	; 0x21
 8017f18:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8017f1a:	2325      	movs	r3, #37	; 0x25
 8017f1c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8017f1e:	2326      	movs	r3, #38	; 0x26
 8017f20:	757b      	strb	r3, [r7, #21]
      break;
 8017f22:	e01c      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8017f24:	2327      	movs	r3, #39	; 0x27
 8017f26:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8017f28:	232b      	movs	r3, #43	; 0x2b
 8017f2a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8017f2c:	232c      	movs	r3, #44	; 0x2c
 8017f2e:	757b      	strb	r3, [r7, #21]
      break;
 8017f30:	e015      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8017f32:	232d      	movs	r3, #45	; 0x2d
 8017f34:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8017f36:	2331      	movs	r3, #49	; 0x31
 8017f38:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8017f3a:	2332      	movs	r3, #50	; 0x32
 8017f3c:	757b      	strb	r3, [r7, #21]
      break;
 8017f3e:	e00e      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8017f40:	2333      	movs	r3, #51	; 0x33
 8017f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8017f44:	2337      	movs	r3, #55	; 0x37
 8017f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8017f48:	2338      	movs	r3, #56	; 0x38
 8017f4a:	757b      	strb	r3, [r7, #21]
      break;
 8017f4c:	e007      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8017f4e:	2339      	movs	r3, #57	; 0x39
 8017f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8017f52:	233d      	movs	r3, #61	; 0x3d
 8017f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8017f56:	233e      	movs	r3, #62	; 0x3e
 8017f58:	757b      	strb	r3, [r7, #21]
      break;
 8017f5a:	e000      	b.n	8017f5e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8017f5c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8017f5e:	89fb      	ldrh	r3, [r7, #14]
 8017f60:	b2db      	uxtb	r3, r3
 8017f62:	7dfa      	ldrb	r2, [r7, #23]
 8017f64:	4611      	mov	r1, r2
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7f7 fb86 	bl	800f678 <TS_IO_Read>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8017f70:	7d3b      	ldrb	r3, [r7, #20]
 8017f72:	b2db      	uxtb	r3, r3
 8017f74:	119b      	asrs	r3, r3, #6
 8017f76:	f003 0203 	and.w	r2, r3, #3
 8017f7a:	6a3b      	ldr	r3, [r7, #32]
 8017f7c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8017f7e:	89fb      	ldrh	r3, [r7, #14]
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	7dba      	ldrb	r2, [r7, #22]
 8017f84:	4611      	mov	r1, r2
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7f7 fb76 	bl	800f678 <TS_IO_Read>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8017f90:	7d3b      	ldrb	r3, [r7, #20]
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	461a      	mov	r2, r3
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8017f9a:	89fb      	ldrh	r3, [r7, #14]
 8017f9c:	b2db      	uxtb	r3, r3
 8017f9e:	7d7a      	ldrb	r2, [r7, #21]
 8017fa0:	4611      	mov	r1, r2
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7f7 fb68 	bl	800f678 <TS_IO_Read>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8017fac:	7d3b      	ldrb	r3, [r7, #20]
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	111b      	asrs	r3, r3, #4
 8017fb2:	f003 0204 	and.w	r2, r3, #4
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8017fba:	bf00      	nop
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	2000bed8 	.word	0x2000bed8

08017fc8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8017fc8:	b480      	push	{r7}
 8017fca:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8017fcc:	4b03      	ldr	r3, [pc, #12]	; (8017fdc <ft5336_Get_I2C_InitializedStatus+0x14>)
 8017fce:	781b      	ldrb	r3, [r3, #0]
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd8:	4770      	bx	lr
 8017fda:	bf00      	nop
 8017fdc:	2000bed8 	.word	0x2000bed8

08017fe0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8017fe4:	f7ff fff0 	bl	8017fc8 <ft5336_Get_I2C_InitializedStatus>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d104      	bne.n	8017ff8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8017fee:	f7f7 fb1f 	bl	800f630 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8017ff2:	4b02      	ldr	r3, [pc, #8]	; (8017ffc <ft5336_I2C_InitializeIfRequired+0x1c>)
 8017ff4:	2201      	movs	r2, #1
 8017ff6:	701a      	strb	r2, [r3, #0]
  }
}
 8017ff8:	bf00      	nop
 8017ffa:	bd80      	pop	{r7, pc}
 8017ffc:	2000bed8 	.word	0x2000bed8

08018000 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8018000:	b480      	push	{r7}
 8018002:	b085      	sub	sp, #20
 8018004:	af00      	add	r7, sp, #0
 8018006:	4603      	mov	r3, r0
 8018008:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801800a:	2300      	movs	r3, #0
 801800c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801800e:	68fb      	ldr	r3, [r7, #12]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3714      	adds	r7, #20
 8018014:	46bd      	mov	sp, r7
 8018016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801a:	4770      	bx	lr

0801801c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801801c:	8880      	ldrh	r0, [r0, #4]
 801801e:	4770      	bx	lr

08018020 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018020:	2300      	movs	r3, #0
 8018022:	8083      	strh	r3, [r0, #4]
 8018024:	4770      	bx	lr
	...

08018028 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801802a:	6803      	ldr	r3, [r0, #0]
 801802c:	460e      	mov	r6, r1
 801802e:	2100      	movs	r1, #0
 8018030:	4605      	mov	r5, r0
 8018032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018034:	4798      	blx	r3
 8018036:	4604      	mov	r4, r0
 8018038:	682b      	ldr	r3, [r5, #0]
 801803a:	4628      	mov	r0, r5
 801803c:	1b34      	subs	r4, r6, r4
 801803e:	6a1b      	ldr	r3, [r3, #32]
 8018040:	b2a4      	uxth	r4, r4
 8018042:	4798      	blx	r3
 8018044:	88ab      	ldrh	r3, [r5, #4]
 8018046:	fbb4 f4f0 	udiv	r4, r4, r0
 801804a:	42a3      	cmp	r3, r4
 801804c:	d805      	bhi.n	801805a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801804e:	4b0e      	ldr	r3, [pc, #56]	; (8018088 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8018050:	211e      	movs	r1, #30
 8018052:	4a0e      	ldr	r2, [pc, #56]	; (801808c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018054:	480e      	ldr	r0, [pc, #56]	; (8018090 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018056:	f00f ff6f 	bl	8027f38 <__assert_func>
 801805a:	682b      	ldr	r3, [r5, #0]
 801805c:	2100      	movs	r1, #0
 801805e:	4628      	mov	r0, r5
 8018060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018062:	4798      	blx	r3
 8018064:	682b      	ldr	r3, [r5, #0]
 8018066:	4607      	mov	r7, r0
 8018068:	4628      	mov	r0, r5
 801806a:	6a1b      	ldr	r3, [r3, #32]
 801806c:	4798      	blx	r3
 801806e:	1bf3      	subs	r3, r6, r7
 8018070:	b29b      	uxth	r3, r3
 8018072:	fbb3 f2f0 	udiv	r2, r3, r0
 8018076:	fb02 3010 	mls	r0, r2, r0, r3
 801807a:	b118      	cbz	r0, 8018084 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801807c:	4b05      	ldr	r3, [pc, #20]	; (8018094 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801807e:	211f      	movs	r1, #31
 8018080:	4a02      	ldr	r2, [pc, #8]	; (801808c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018082:	e7e7      	b.n	8018054 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8018084:	4620      	mov	r0, r4
 8018086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018088:	0802a6f0 	.word	0x0802a6f0
 801808c:	0802a85e 	.word	0x0802a85e
 8018090:	0802a705 	.word	0x0802a705
 8018094:	0802a733 	.word	0x0802a733

08018098 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018098:	b538      	push	{r3, r4, r5, lr}
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	460d      	mov	r5, r1
 801809e:	4604      	mov	r4, r0
 80180a0:	6a1b      	ldr	r3, [r3, #32]
 80180a2:	4798      	blx	r3
 80180a4:	4285      	cmp	r5, r0
 80180a6:	d905      	bls.n	80180b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80180a8:	4b0c      	ldr	r3, [pc, #48]	; (80180dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80180aa:	212f      	movs	r1, #47	; 0x2f
 80180ac:	4a0c      	ldr	r2, [pc, #48]	; (80180e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80180ae:	480d      	ldr	r0, [pc, #52]	; (80180e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80180b0:	f00f ff42 	bl	8027f38 <__assert_func>
 80180b4:	6823      	ldr	r3, [r4, #0]
 80180b6:	4620      	mov	r0, r4
 80180b8:	88a5      	ldrh	r5, [r4, #4]
 80180ba:	69db      	ldr	r3, [r3, #28]
 80180bc:	4798      	blx	r3
 80180be:	4285      	cmp	r5, r0
 80180c0:	d303      	bcc.n	80180ca <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80180c2:	4b09      	ldr	r3, [pc, #36]	; (80180e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80180c4:	2130      	movs	r1, #48	; 0x30
 80180c6:	4a06      	ldr	r2, [pc, #24]	; (80180e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80180c8:	e7f1      	b.n	80180ae <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80180ca:	6823      	ldr	r3, [r4, #0]
 80180cc:	4620      	mov	r0, r4
 80180ce:	88a1      	ldrh	r1, [r4, #4]
 80180d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180d2:	4798      	blx	r3
 80180d4:	88a3      	ldrh	r3, [r4, #4]
 80180d6:	3301      	adds	r3, #1
 80180d8:	80a3      	strh	r3, [r4, #4]
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	0802a7ad 	.word	0x0802a7ad
 80180e0:	0802a8a1 	.word	0x0802a8a1
 80180e4:	0802a705 	.word	0x0802a705
 80180e8:	0802a7c4 	.word	0x0802a7c4

080180ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80180ec:	b570      	push	{r4, r5, r6, lr}
 80180ee:	6803      	ldr	r3, [r0, #0]
 80180f0:	4616      	mov	r6, r2
 80180f2:	4604      	mov	r4, r0
 80180f4:	460d      	mov	r5, r1
 80180f6:	6a1b      	ldr	r3, [r3, #32]
 80180f8:	4798      	blx	r3
 80180fa:	4286      	cmp	r6, r0
 80180fc:	d905      	bls.n	801810a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80180fe:	4b06      	ldr	r3, [pc, #24]	; (8018118 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018100:	2139      	movs	r1, #57	; 0x39
 8018102:	4a06      	ldr	r2, [pc, #24]	; (801811c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018104:	4806      	ldr	r0, [pc, #24]	; (8018120 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018106:	f00f ff17 	bl	8027f38 <__assert_func>
 801810a:	6823      	ldr	r3, [r4, #0]
 801810c:	4629      	mov	r1, r5
 801810e:	4620      	mov	r0, r4
 8018110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018116:	4718      	bx	r3
 8018118:	0802a7ad 	.word	0x0802a7ad
 801811c:	0802a814 	.word	0x0802a814
 8018120:	0802a705 	.word	0x0802a705

08018124 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018124:	4770      	bx	lr
	...

08018128 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018128:	4a02      	ldr	r2, [pc, #8]	; (8018134 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801812a:	6002      	str	r2, [r0, #0]
 801812c:	2200      	movs	r2, #0
 801812e:	8082      	strh	r2, [r0, #4]
 8018130:	4770      	bx	lr
 8018132:	bf00      	nop
 8018134:	0802a7e8 	.word	0x0802a7e8

08018138 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8018138:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801813c:	4770      	bx	lr

0801813e <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801813e:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8018142:	4770      	bx	lr

08018144 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8018144:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8018148:	4770      	bx	lr

0801814a <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801814a:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801814e:	4770      	bx	lr

08018150 <_ZN8touchgfx11BoxProgressD1Ev>:
 8018150:	4b03      	ldr	r3, [pc, #12]	; (8018160 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8018152:	b510      	push	{r4, lr}
 8018154:	4604      	mov	r4, r0
 8018156:	6003      	str	r3, [r0, #0]
 8018158:	f000 f8b6 	bl	80182c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801815c:	4620      	mov	r0, r4
 801815e:	bd10      	pop	{r4, pc}
 8018160:	0802a8e8 	.word	0x0802a8e8

08018164 <_ZN8touchgfx11BoxProgressD0Ev>:
 8018164:	b510      	push	{r4, lr}
 8018166:	4604      	mov	r4, r0
 8018168:	f7ff fff2 	bl	8018150 <_ZN8touchgfx11BoxProgressD1Ev>
 801816c:	21c0      	movs	r1, #192	; 0xc0
 801816e:	4620      	mov	r0, r4
 8018170:	f00f feb7 	bl	8027ee2 <_ZdlPvj>
 8018174:	4620      	mov	r0, r4
 8018176:	bd10      	pop	{r4, pc}

08018178 <_ZN8touchgfx11BoxProgressC1Ev>:
 8018178:	b510      	push	{r4, lr}
 801817a:	4604      	mov	r4, r0
 801817c:	f000 f8b8 	bl	80182f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8018180:	2201      	movs	r2, #1
 8018182:	4b16      	ldr	r3, [pc, #88]	; (80181dc <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8018184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018188:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801818c:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8018190:	4a13      	ldr	r2, [pc, #76]	; (80181e0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8018192:	6023      	str	r3, [r4, #0]
 8018194:	2300      	movs	r3, #0
 8018196:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801819a:	22ff      	movs	r2, #255	; 0xff
 801819c:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 80181a0:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80181a4:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 80181a8:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 80181ac:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 80181b0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80181b4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80181b8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80181bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80181c0:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80181c4:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 80181c8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80181cc:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80181d0:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80181d4:	f000 fbb8 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80181d8:	4620      	mov	r0, r4
 80181da:	bd10      	pop	{r4, pc}
 80181dc:	0802a8e8 	.word	0x0802a8e8
 80181e0:	0802bc10 	.word	0x0802bc10

080181e4 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 80181e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80181e8:	4617      	mov	r7, r2
 80181ea:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80181ee:	2200      	movs	r2, #0
 80181f0:	4604      	mov	r4, r0
 80181f2:	460e      	mov	r6, r1
 80181f4:	4698      	mov	r8, r3
 80181f6:	4611      	mov	r1, r2
 80181f8:	9500      	str	r5, [sp, #0]
 80181fa:	3090      	adds	r0, #144	; 0x90
 80181fc:	f7f8 fa04 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018200:	4643      	mov	r3, r8
 8018202:	463a      	mov	r2, r7
 8018204:	4631      	mov	r1, r6
 8018206:	4620      	mov	r0, r4
 8018208:	9508      	str	r5, [sp, #32]
 801820a:	b002      	add	sp, #8
 801820c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018210:	f000 b9fa 	b.w	8018608 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08018214 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8018214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018216:	4604      	mov	r4, r0
 8018218:	f000 fa40 	bl	801869c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801821c:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8018220:	4628      	mov	r0, r5
 8018222:	f004 fa89 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018226:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801822a:	2b03      	cmp	r3, #3
 801822c:	d814      	bhi.n	8018258 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801822e:	e8df f003 	tbb	[pc, r3]
 8018232:	0202      	.short	0x0202
 8018234:	1010      	.short	0x1010
 8018236:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801823a:	4620      	mov	r0, r4
 801823c:	f000 fa88 	bl	8018750 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8018240:	b200      	sxth	r0, r0
 8018242:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8018246:	2b03      	cmp	r3, #3
 8018248:	d81a      	bhi.n	8018280 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801824a:	e8df f003 	tbb	[pc, r3]
 801824e:	0e07      	.short	0x0e07
 8018250:	231f      	.short	0x231f
 8018252:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8018256:	e7f0      	b.n	801823a <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8018258:	2000      	movs	r0, #0
 801825a:	e7f2      	b.n	8018242 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801825c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018260:	9300      	str	r3, [sp, #0]
 8018262:	4603      	mov	r3, r0
 8018264:	2200      	movs	r2, #0
 8018266:	2100      	movs	r1, #0
 8018268:	e007      	b.n	801827a <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801826a:	8921      	ldrh	r1, [r4, #8]
 801826c:	2200      	movs	r2, #0
 801826e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018272:	1a09      	subs	r1, r1, r0
 8018274:	9300      	str	r3, [sp, #0]
 8018276:	4603      	mov	r3, r0
 8018278:	b209      	sxth	r1, r1
 801827a:	4628      	mov	r0, r5
 801827c:	f7f8 f9c4 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018280:	4628      	mov	r0, r5
 8018282:	b003      	add	sp, #12
 8018284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018288:	f004 ba56 	b.w	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
 801828c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018290:	9000      	str	r0, [sp, #0]
 8018292:	e7e7      	b.n	8018264 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8018294:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018298:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801829c:	1a12      	subs	r2, r2, r0
 801829e:	9000      	str	r0, [sp, #0]
 80182a0:	b212      	sxth	r2, r2
 80182a2:	e7e0      	b.n	8018266 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

080182a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80182a4:	b570      	push	{r4, r5, r6, lr}
 80182a6:	6803      	ldr	r3, [r0, #0]
 80182a8:	4604      	mov	r4, r0
 80182aa:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 80182ae:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80182b2:	4798      	blx	r3
 80182b4:	4601      	mov	r1, r0
 80182b6:	462b      	mov	r3, r5
 80182b8:	4620      	mov	r0, r4
 80182ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182be:	4718      	bx	r3

080182c0 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80182c0:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 80182c4:	4770      	bx	lr
	...

080182c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80182c8:	4b03      	ldr	r3, [pc, #12]	; (80182d8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 80182ca:	b510      	push	{r4, lr}
 80182cc:	4604      	mov	r4, r0
 80182ce:	6003      	str	r3, [r0, #0]
 80182d0:	f000 f999 	bl	8018606 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80182d4:	4620      	mov	r0, r4
 80182d6:	bd10      	pop	{r4, pc}
 80182d8:	0802a9c0 	.word	0x0802a9c0

080182dc <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80182dc:	b510      	push	{r4, lr}
 80182de:	4604      	mov	r4, r0
 80182e0:	f7ff fff2 	bl	80182c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80182e4:	2190      	movs	r1, #144	; 0x90
 80182e6:	4620      	mov	r0, r4
 80182e8:	f00f fdfb 	bl	8027ee2 <_ZdlPvj>
 80182ec:	4620      	mov	r0, r4
 80182ee:	bd10      	pop	{r4, pc}

080182f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 80182f0:	b510      	push	{r4, lr}
 80182f2:	4604      	mov	r4, r0
 80182f4:	f000 fa4c 	bl	8018790 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80182f8:	4b03      	ldr	r3, [pc, #12]	; (8018308 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80182fa:	2100      	movs	r1, #0
 80182fc:	4620      	mov	r0, r4
 80182fe:	6023      	str	r3, [r4, #0]
 8018300:	f7ff ffd0 	bl	80182a4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8018304:	4620      	mov	r0, r4
 8018306:	bd10      	pop	{r4, pc}
 8018308:	0802a9c0 	.word	0x0802a9c0

0801830c <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801830c:	b570      	push	{r4, r5, r6, lr}
 801830e:	6803      	ldr	r3, [r0, #0]
 8018310:	4604      	mov	r4, r0
 8018312:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8018316:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801831a:	4798      	blx	r3
 801831c:	4601      	mov	r1, r0
 801831e:	462b      	mov	r3, r5
 8018320:	4620      	mov	r0, r4
 8018322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018326:	4718      	bx	r3

08018328 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8018328:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801832c:	4770      	bx	lr

0801832e <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801832e:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8018332:	4770      	bx	lr

08018334 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8018334:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8018338:	4770      	bx	lr

0801833a <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801833a:	b507      	push	{r0, r1, r2, lr}
 801833c:	ab02      	add	r3, sp, #8
 801833e:	30bc      	adds	r0, #188	; 0xbc
 8018340:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8018344:	4619      	mov	r1, r3
 8018346:	f002 fa4b 	bl	801a7e0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801834a:	b003      	add	sp, #12
 801834c:	f85d fb04 	ldr.w	pc, [sp], #4

08018350 <_ZN8touchgfx13ImageProgressD1Ev>:
 8018350:	4b03      	ldr	r3, [pc, #12]	; (8018360 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8018352:	b510      	push	{r4, lr}
 8018354:	4604      	mov	r4, r0
 8018356:	6003      	str	r3, [r0, #0]
 8018358:	f7ff ffb6 	bl	80182c8 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801835c:	4620      	mov	r0, r4
 801835e:	bd10      	pop	{r4, pc}
 8018360:	0802aaec 	.word	0x0802aaec

08018364 <_ZN8touchgfx13ImageProgressD0Ev>:
 8018364:	b510      	push	{r4, lr}
 8018366:	4604      	mov	r4, r0
 8018368:	f7ff fff2 	bl	8018350 <_ZN8touchgfx13ImageProgressD1Ev>
 801836c:	21f0      	movs	r1, #240	; 0xf0
 801836e:	4620      	mov	r0, r4
 8018370:	f00f fdb7 	bl	8027ee2 <_ZdlPvj>
 8018374:	4620      	mov	r0, r4
 8018376:	bd10      	pop	{r4, pc}

08018378 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8018378:	b508      	push	{r3, lr}
 801837a:	4b06      	ldr	r3, [pc, #24]	; (8018394 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	b92b      	cbnz	r3, 801838c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8018380:	4b05      	ldr	r3, [pc, #20]	; (8018398 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8018382:	21b8      	movs	r1, #184	; 0xb8
 8018384:	4a05      	ldr	r2, [pc, #20]	; (801839c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8018386:	4806      	ldr	r0, [pc, #24]	; (80183a0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8018388:	f00f fdd6 	bl	8027f38 <__assert_func>
 801838c:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8018390:	bd08      	pop	{r3, pc}
 8018392:	bf00      	nop
 8018394:	2000bfb4 	.word	0x2000bfb4
 8018398:	0802aa80 	.word	0x0802aa80
 801839c:	0802abc4 	.word	0x0802abc4
 80183a0:	0802aabc 	.word	0x0802aabc

080183a4 <_ZN8touchgfx13ImageProgressC1Ev>:
 80183a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80183a8:	4604      	mov	r4, r0
 80183aa:	f7ff ffa1 	bl	80182f0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80183ae:	4b31      	ldr	r3, [pc, #196]	; (8018474 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 80183b0:	a902      	add	r1, sp, #8
 80183b2:	4626      	mov	r6, r4
 80183b4:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 80183b8:	2500      	movs	r5, #0
 80183ba:	4a2f      	ldr	r2, [pc, #188]	; (8018478 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 80183bc:	f846 3b90 	str.w	r3, [r6], #144
 80183c0:	2701      	movs	r7, #1
 80183c2:	4b2e      	ldr	r3, [pc, #184]	; (801847c <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 80183c4:	4640      	mov	r0, r8
 80183c6:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 80183ca:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80183ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80183d2:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 80183d6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80183da:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 80183de:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 80183e2:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 80183e6:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80183ea:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 80183ee:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 80183f2:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80183f6:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80183fa:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 80183fe:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8018402:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8018406:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801840a:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801840e:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8018412:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8018416:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801841a:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801841e:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8018422:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8018426:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801842a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801842e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8018432:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8018436:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801843a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 801843e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8018442:	f002 fc9d 	bl	801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018446:	4b0e      	ldr	r3, [pc, #56]	; (8018480 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8018448:	4641      	mov	r1, r8
 801844a:	4630      	mov	r0, r6
 801844c:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8018450:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8018454:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8018458:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801845c:	f000 fa74 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018460:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018464:	4631      	mov	r1, r6
 8018466:	f000 fa6f 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801846a:	4620      	mov	r0, r4
 801846c:	b002      	add	sp, #8
 801846e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018472:	bf00      	nop
 8018474:	0802aaec 	.word	0x0802aaec
 8018478:	0802bde0 	.word	0x0802bde0
 801847c:	0802ae68 	.word	0x0802ae68
 8018480:	0802bc78 	.word	0x0802bc78

08018484 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8018484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018488:	4617      	mov	r7, r2
 801848a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801848e:	2200      	movs	r2, #0
 8018490:	4604      	mov	r4, r0
 8018492:	460e      	mov	r6, r1
 8018494:	4698      	mov	r8, r3
 8018496:	4611      	mov	r1, r2
 8018498:	9500      	str	r5, [sp, #0]
 801849a:	3090      	adds	r0, #144	; 0x90
 801849c:	f7f8 f8b4 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 80184a0:	4643      	mov	r3, r8
 80184a2:	463a      	mov	r2, r7
 80184a4:	4631      	mov	r1, r6
 80184a6:	4620      	mov	r0, r4
 80184a8:	9508      	str	r5, [sp, #32]
 80184aa:	b002      	add	sp, #8
 80184ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184b0:	f000 b8aa 	b.w	8018608 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080184b4 <_ZN8touchgfx13ImageProgress8setValueEi>:
 80184b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80184b6:	4604      	mov	r4, r0
 80184b8:	f000 f8f0 	bl	801869c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80184bc:	f104 0790 	add.w	r7, r4, #144	; 0x90
 80184c0:	4638      	mov	r0, r7
 80184c2:	f004 f939 	bl	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
 80184c6:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80184ca:	4620      	mov	r0, r4
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	bf94      	ite	ls
 80184d0:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80184d4:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80184d8:	f000 f93a 	bl	8018750 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80184dc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80184e0:	4606      	mov	r6, r0
 80184e2:	b205      	sxth	r5, r0
 80184e4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80184e8:	2a00      	cmp	r2, #0
 80184ea:	d056      	beq.n	801859a <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 80184ec:	2b03      	cmp	r3, #3
 80184ee:	d82c      	bhi.n	801854a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 80184f0:	e8df f003 	tbb	[pc, r3]
 80184f4:	3d311202 	.word	0x3d311202
 80184f8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80184fc:	2200      	movs	r2, #0
 80184fe:	9300      	str	r3, [sp, #0]
 8018500:	4611      	mov	r1, r2
 8018502:	462b      	mov	r3, r5
 8018504:	4638      	mov	r0, r7
 8018506:	f7f8 f87f 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 801850a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801850e:	9300      	str	r3, [sp, #0]
 8018510:	462b      	mov	r3, r5
 8018512:	2200      	movs	r2, #0
 8018514:	4611      	mov	r1, r2
 8018516:	e014      	b.n	8018542 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8018518:	8921      	ldrh	r1, [r4, #8]
 801851a:	2200      	movs	r2, #0
 801851c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8018520:	1a09      	subs	r1, r1, r0
 8018522:	4638      	mov	r0, r7
 8018524:	9300      	str	r3, [sp, #0]
 8018526:	462b      	mov	r3, r5
 8018528:	b209      	sxth	r1, r1
 801852a:	f7f8 f86d 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 801852e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8018532:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018536:	4249      	negs	r1, r1
 8018538:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801853c:	9200      	str	r2, [sp, #0]
 801853e:	b209      	sxth	r1, r1
 8018540:	2200      	movs	r2, #0
 8018542:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8018546:	f7f8 f85f 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 801854a:	4638      	mov	r0, r7
 801854c:	b003      	add	sp, #12
 801854e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018552:	f004 b8f1 	b.w	801c738 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018556:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801855a:	2200      	movs	r2, #0
 801855c:	9500      	str	r5, [sp, #0]
 801855e:	2100      	movs	r1, #0
 8018560:	4638      	mov	r0, r7
 8018562:	f7f8 f851 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018566:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801856a:	9500      	str	r5, [sp, #0]
 801856c:	e7d1      	b.n	8018512 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801856e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8018572:	2100      	movs	r1, #0
 8018574:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018578:	1a12      	subs	r2, r2, r0
 801857a:	9500      	str	r5, [sp, #0]
 801857c:	4638      	mov	r0, r7
 801857e:	b212      	sxth	r2, r2
 8018580:	f7f8 f842 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018584:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8018588:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801858c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8018590:	4252      	negs	r2, r2
 8018592:	9100      	str	r1, [sp, #0]
 8018594:	b212      	sxth	r2, r2
 8018596:	2100      	movs	r1, #0
 8018598:	e7d3      	b.n	8018542 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801859a:	2b03      	cmp	r3, #3
 801859c:	d8d5      	bhi.n	801854a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801859e:	e8df f003 	tbb	[pc, r3]
 80185a2:	1102      	.short	0x1102
 80185a4:	2a1b      	.short	0x2a1b
 80185a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80185aa:	2200      	movs	r2, #0
 80185ac:	4638      	mov	r0, r7
 80185ae:	4611      	mov	r1, r2
 80185b0:	9300      	str	r3, [sp, #0]
 80185b2:	462b      	mov	r3, r5
 80185b4:	f7f8 f828 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 80185b8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80185bc:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80185c0:	1af1      	subs	r1, r6, r3
 80185c2:	e7bb      	b.n	801853c <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 80185c4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80185c8:	2200      	movs	r2, #0
 80185ca:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80185ce:	1a09      	subs	r1, r1, r0
 80185d0:	9300      	str	r3, [sp, #0]
 80185d2:	462b      	mov	r3, r5
 80185d4:	b209      	sxth	r1, r1
 80185d6:	e795      	b.n	8018504 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 80185d8:	2200      	movs	r2, #0
 80185da:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80185de:	4638      	mov	r0, r7
 80185e0:	9500      	str	r5, [sp, #0]
 80185e2:	4611      	mov	r1, r2
 80185e4:	f7f8 f810 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 80185e8:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 80185ec:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80185f0:	1a32      	subs	r2, r6, r0
 80185f2:	9000      	str	r0, [sp, #0]
 80185f4:	e7ce      	b.n	8018594 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 80185f6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80185fa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80185fe:	1a12      	subs	r2, r2, r0
 8018600:	9500      	str	r5, [sp, #0]
 8018602:	b212      	sxth	r2, r2
 8018604:	e7ab      	b.n	801855e <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08018606 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8018606:	4770      	bx	lr

08018608 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8018608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801860c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8018610:	4604      	mov	r4, r0
 8018612:	460e      	mov	r6, r1
 8018614:	4698      	mov	r8, r3
 8018616:	9700      	str	r7, [sp, #0]
 8018618:	3058      	adds	r0, #88	; 0x58
 801861a:	4615      	mov	r5, r2
 801861c:	f7f7 fff4 	bl	8010608 <_ZN8touchgfx8Drawable11setPositionEssss>
 8018620:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8018624:	eb06 0308 	add.w	r3, r6, r8
 8018628:	429a      	cmp	r2, r3
 801862a:	eb05 0207 	add.w	r2, r5, r7
 801862e:	bfb8      	it	lt
 8018630:	8123      	strhlt	r3, [r4, #8]
 8018632:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018636:	4293      	cmp	r3, r2
 8018638:	bfb8      	it	lt
 801863a:	8162      	strhlt	r2, [r4, #10]
 801863c:	b002      	add	sp, #8
 801863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018642 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8018642:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8018646:	4770      	bx	lr

08018648 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8018648:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801864c:	4770      	bx	lr

0801864e <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801864e:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8018652:	4770      	bx	lr

08018654 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8018654:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8018658:	4770      	bx	lr

0801865a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801865a:	b510      	push	{r4, lr}
 801865c:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8018660:	800c      	strh	r4, [r1, #0]
 8018662:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018666:	8011      	strh	r1, [r2, #0]
 8018668:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801866c:	801a      	strh	r2, [r3, #0]
 801866e:	9b02      	ldr	r3, [sp, #8]
 8018670:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8018674:	801a      	strh	r2, [r3, #0]
 8018676:	bd10      	pop	{r4, pc}

08018678 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8018678:	b510      	push	{r4, lr}
 801867a:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801867e:	800c      	strh	r4, [r1, #0]
 8018680:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8018684:	8011      	strh	r1, [r2, #0]
 8018686:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801868a:	801a      	strh	r2, [r3, #0]
 801868c:	bd10      	pop	{r4, pc}

0801868e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801868e:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8018692:	800b      	strh	r3, [r1, #0]
 8018694:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8018698:	8013      	strh	r3, [r2, #0]
 801869a:	4770      	bx	lr

0801869c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801869c:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 80186a0:	4299      	cmp	r1, r3
 80186a2:	bfb8      	it	lt
 80186a4:	4619      	movlt	r1, r3
 80186a6:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 80186aa:	4299      	cmp	r1, r3
 80186ac:	bfa8      	it	ge
 80186ae:	4619      	movge	r1, r3
 80186b0:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 80186b4:	4770      	bx	lr

080186b6 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80186b6:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 80186ba:	4770      	bx	lr

080186bc <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80186bc:	b510      	push	{r4, lr}
 80186be:	4604      	mov	r4, r0
 80186c0:	2190      	movs	r1, #144	; 0x90
 80186c2:	f00f fc0e 	bl	8027ee2 <_ZdlPvj>
 80186c6:	4620      	mov	r0, r4
 80186c8:	bd10      	pop	{r4, pc}

080186ca <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80186ca:	b510      	push	{r4, lr}
 80186cc:	4604      	mov	r4, r0
 80186ce:	302c      	adds	r0, #44	; 0x2c
 80186d0:	f002 fb56 	bl	801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80186d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80186d6:	8123      	strh	r3, [r4, #8]
 80186d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80186da:	8163      	strh	r3, [r4, #10]
 80186dc:	bd10      	pop	{r4, pc}
	...

080186e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 80186e0:	4291      	cmp	r1, r2
 80186e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186e6:	4604      	mov	r4, r0
 80186e8:	460e      	mov	r6, r1
 80186ea:	4615      	mov	r5, r2
 80186ec:	4698      	mov	r8, r3
 80186ee:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80186f2:	db05      	blt.n	8018700 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 80186f4:	4b12      	ldr	r3, [pc, #72]	; (8018740 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 80186f6:	214d      	movs	r1, #77	; 0x4d
 80186f8:	4a12      	ldr	r2, [pc, #72]	; (8018744 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 80186fa:	4813      	ldr	r0, [pc, #76]	; (8018748 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 80186fc:	f00f fc1c 	bl	8027f38 <__assert_func>
 8018700:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 8018704:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 8018708:	6803      	ldr	r3, [r0, #0]
 801870a:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801870e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018712:	4798      	blx	r3
 8018714:	f1b8 0f00 	cmp.w	r8, #0
 8018718:	d10c      	bne.n	8018734 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801871a:	1bad      	subs	r5, r5, r6
 801871c:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 8018720:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 8018724:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8018728:	42bb      	cmp	r3, r7
 801872a:	d806      	bhi.n	801873a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801872c:	4b07      	ldr	r3, [pc, #28]	; (801874c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801872e:	215a      	movs	r1, #90	; 0x5a
 8018730:	4a04      	ldr	r2, [pc, #16]	; (8018744 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 8018732:	e7e2      	b.n	80186fa <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 8018734:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8018738:	e7f2      	b.n	8018720 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801873a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801873e:	bf00      	nop
 8018740:	0802abf7 	.word	0x0802abf7
 8018744:	0802ad34 	.word	0x0802ad34
 8018748:	0802ac01 	.word	0x0802ac01
 801874c:	0802ac58 	.word	0x0802ac58

08018750 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8018750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018752:	4604      	mov	r4, r0
 8018754:	460d      	mov	r5, r1
 8018756:	b1b9      	cbz	r1, 8018788 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 8018758:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801875c:	ab01      	add	r3, sp, #4
 801875e:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 8018762:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 8018766:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801876a:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801876e:	1a12      	subs	r2, r2, r0
 8018770:	1b89      	subs	r1, r1, r6
 8018772:	1a38      	subs	r0, r7, r0
 8018774:	f004 f921 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 8018778:	4629      	mov	r1, r5
 801877a:	ab01      	add	r3, sp, #4
 801877c:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 8018780:	4430      	add	r0, r6
 8018782:	f004 f91a 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 8018786:	b285      	uxth	r5, r0
 8018788:	4628      	mov	r0, r5
 801878a:	b003      	add	sp, #12
 801878c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018790 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8018790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018794:	4604      	mov	r4, r0
 8018796:	2600      	movs	r6, #0
 8018798:	f7f9 f97a 	bl	8011a90 <_ZN8touchgfx8DrawableC1Ev>
 801879c:	4b1b      	ldr	r3, [pc, #108]	; (801880c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801879e:	4625      	mov	r5, r4
 80187a0:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80187a4:	af02      	add	r7, sp, #8
 80187a6:	62a6      	str	r6, [r4, #40]	; 0x28
 80187a8:	f845 3b2c 	str.w	r3, [r5], #44
 80187ac:	4628      	mov	r0, r5
 80187ae:	f827 8d04 	strh.w	r8, [r7, #-4]!
 80187b2:	f7f9 f96d 	bl	8011a90 <_ZN8touchgfx8DrawableC1Ev>
 80187b6:	4b16      	ldr	r3, [pc, #88]	; (8018810 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 80187b8:	4639      	mov	r1, r7
 80187ba:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80187be:	4628      	mov	r0, r5
 80187c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80187c2:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 80187c6:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 80187ca:	f002 fad9 	bl	801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80187ce:	4638      	mov	r0, r7
 80187d0:	f7f9 f95e 	bl	8011a90 <_ZN8touchgfx8DrawableC1Ev>
 80187d4:	4b0f      	ldr	r3, [pc, #60]	; (8018814 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 80187d6:	4632      	mov	r2, r6
 80187d8:	4631      	mov	r1, r6
 80187da:	65a3      	str	r3, [r4, #88]	; 0x58
 80187dc:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80187e0:	4628      	mov	r0, r5
 80187e2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80187e6:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 80187ea:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 80187ee:	f7f9 f9bb 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
 80187f2:	4629      	mov	r1, r5
 80187f4:	4620      	mov	r0, r4
 80187f6:	f000 f8a7 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80187fa:	4620      	mov	r0, r4
 80187fc:	4639      	mov	r1, r7
 80187fe:	f000 f8a3 	bl	8018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018802:	4620      	mov	r0, r4
 8018804:	b002      	add	sp, #8
 8018806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801880a:	bf00      	nop
 801880c:	0802ac7c 	.word	0x0802ac7c
 8018810:	0802bde0 	.word	0x0802bde0
 8018814:	0802ae68 	.word	0x0802ae68

08018818 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018818:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801881a:	2000      	movs	r0, #0
 801881c:	b12b      	cbz	r3, 801882a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801881e:	b920      	cbnz	r0, 801882a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018820:	1a5a      	subs	r2, r3, r1
 8018822:	699b      	ldr	r3, [r3, #24]
 8018824:	4250      	negs	r0, r2
 8018826:	4150      	adcs	r0, r2
 8018828:	e7f8      	b.n	801881c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801882a:	4770      	bx	lr

0801882c <_ZN8touchgfx9Container9removeAllEv>:
 801882c:	2200      	movs	r2, #0
 801882e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018830:	b123      	cbz	r3, 801883c <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018832:	6999      	ldr	r1, [r3, #24]
 8018834:	6281      	str	r1, [r0, #40]	; 0x28
 8018836:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801883a:	e7f8      	b.n	801882e <_ZN8touchgfx9Container9removeAllEv+0x2>
 801883c:	4770      	bx	lr

0801883e <_ZN8touchgfx9Container6unlinkEv>:
 801883e:	2300      	movs	r3, #0
 8018840:	6283      	str	r3, [r0, #40]	; 0x28
 8018842:	4770      	bx	lr

08018844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018848:	461f      	mov	r7, r3
 801884a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801884e:	460d      	mov	r5, r1
 8018850:	4616      	mov	r6, r2
 8018852:	b103      	cbz	r3, 8018856 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018854:	6038      	str	r0, [r7, #0]
 8018856:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018858:	b314      	cbz	r4, 80188a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801885a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801885e:	b1eb      	cbz	r3, 801889c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018860:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018864:	428d      	cmp	r5, r1
 8018866:	db19      	blt.n	801889c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018868:	b289      	uxth	r1, r1
 801886a:	8923      	ldrh	r3, [r4, #8]
 801886c:	440b      	add	r3, r1
 801886e:	b21b      	sxth	r3, r3
 8018870:	429d      	cmp	r5, r3
 8018872:	da13      	bge.n	801889c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018874:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018878:	4296      	cmp	r6, r2
 801887a:	db0f      	blt.n	801889c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801887c:	b292      	uxth	r2, r2
 801887e:	8963      	ldrh	r3, [r4, #10]
 8018880:	4413      	add	r3, r2
 8018882:	b21b      	sxth	r3, r3
 8018884:	429e      	cmp	r6, r3
 8018886:	da09      	bge.n	801889c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018888:	6823      	ldr	r3, [r4, #0]
 801888a:	1ab2      	subs	r2, r6, r2
 801888c:	1a69      	subs	r1, r5, r1
 801888e:	4620      	mov	r0, r4
 8018890:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8018894:	b212      	sxth	r2, r2
 8018896:	463b      	mov	r3, r7
 8018898:	b209      	sxth	r1, r1
 801889a:	47c0      	blx	r8
 801889c:	69a4      	ldr	r4, [r4, #24]
 801889e:	e7db      	b.n	8018858 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80188a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188a4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80188a4:	2200      	movs	r2, #0
 80188a6:	8002      	strh	r2, [r0, #0]
 80188a8:	8042      	strh	r2, [r0, #2]
 80188aa:	8082      	strh	r2, [r0, #4]
 80188ac:	80c2      	strh	r2, [r0, #6]
 80188ae:	4770      	bx	lr

080188b0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	460d      	mov	r5, r1
 80188b4:	4616      	mov	r6, r2
 80188b6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80188b8:	b13c      	cbz	r4, 80188ca <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80188ba:	6823      	ldr	r3, [r4, #0]
 80188bc:	4620      	mov	r0, r4
 80188be:	4632      	mov	r2, r6
 80188c0:	4629      	mov	r1, r5
 80188c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188c4:	4798      	blx	r3
 80188c6:	69a4      	ldr	r4, [r4, #24]
 80188c8:	e7f6      	b.n	80188b8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80188ca:	bd70      	pop	{r4, r5, r6, pc}

080188cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80188cc:	b538      	push	{r3, r4, r5, lr}
 80188ce:	460d      	mov	r5, r1
 80188d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80188d2:	b134      	cbz	r4, 80188e2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80188d4:	682b      	ldr	r3, [r5, #0]
 80188d6:	4621      	mov	r1, r4
 80188d8:	4628      	mov	r0, r5
 80188da:	689b      	ldr	r3, [r3, #8]
 80188dc:	4798      	blx	r3
 80188de:	69a4      	ldr	r4, [r4, #24]
 80188e0:	e7f7      	b.n	80188d2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80188e2:	bd38      	pop	{r3, r4, r5, pc}

080188e4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80188e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80188e6:	b19b      	cbz	r3, 8018910 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80188e8:	428b      	cmp	r3, r1
 80188ea:	d109      	bne.n	8018900 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80188ec:	699a      	ldr	r2, [r3, #24]
 80188ee:	2100      	movs	r1, #0
 80188f0:	6159      	str	r1, [r3, #20]
 80188f2:	6282      	str	r2, [r0, #40]	; 0x28
 80188f4:	b902      	cbnz	r2, 80188f8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80188f6:	4770      	bx	lr
 80188f8:	6199      	str	r1, [r3, #24]
 80188fa:	4770      	bx	lr
 80188fc:	4613      	mov	r3, r2
 80188fe:	b13a      	cbz	r2, 8018910 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018900:	699a      	ldr	r2, [r3, #24]
 8018902:	428a      	cmp	r2, r1
 8018904:	d1fa      	bne.n	80188fc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018906:	698a      	ldr	r2, [r1, #24]
 8018908:	619a      	str	r2, [r3, #24]
 801890a:	2300      	movs	r3, #0
 801890c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018910:	4770      	bx	lr

08018912 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018912:	b410      	push	{r4}
 8018914:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018916:	4604      	mov	r4, r0
 8018918:	b92b      	cbnz	r3, 8018926 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801891a:	6803      	ldr	r3, [r0, #0]
 801891c:	4611      	mov	r1, r2
 801891e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018924:	4718      	bx	r3
 8018926:	b941      	cbnz	r1, 801893a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8018928:	6193      	str	r3, [r2, #24]
 801892a:	6282      	str	r2, [r0, #40]	; 0x28
 801892c:	6154      	str	r4, [r2, #20]
 801892e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018932:	4770      	bx	lr
 8018934:	4603      	mov	r3, r0
 8018936:	2800      	cmp	r0, #0
 8018938:	d0f9      	beq.n	801892e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801893a:	4299      	cmp	r1, r3
 801893c:	6998      	ldr	r0, [r3, #24]
 801893e:	d1f9      	bne.n	8018934 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018940:	6190      	str	r0, [r2, #24]
 8018942:	618a      	str	r2, [r1, #24]
 8018944:	e7f2      	b.n	801892c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018948 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018948:	4288      	cmp	r0, r1
 801894a:	b508      	push	{r3, lr}
 801894c:	d105      	bne.n	801895a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801894e:	4b11      	ldr	r3, [pc, #68]	; (8018994 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8018950:	2123      	movs	r1, #35	; 0x23
 8018952:	4a11      	ldr	r2, [pc, #68]	; (8018998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018954:	4811      	ldr	r0, [pc, #68]	; (801899c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8018956:	f00f faef 	bl	8027f38 <__assert_func>
 801895a:	694b      	ldr	r3, [r1, #20]
 801895c:	b11b      	cbz	r3, 8018966 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801895e:	4b10      	ldr	r3, [pc, #64]	; (80189a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8018960:	2124      	movs	r1, #36	; 0x24
 8018962:	4a0d      	ldr	r2, [pc, #52]	; (8018998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018964:	e7f6      	b.n	8018954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018966:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801896a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801896c:	b913      	cbnz	r3, 8018974 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801896e:	6281      	str	r1, [r0, #40]	; 0x28
 8018970:	bd08      	pop	{r3, pc}
 8018972:	4613      	mov	r3, r2
 8018974:	699a      	ldr	r2, [r3, #24]
 8018976:	b12a      	cbz	r2, 8018984 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018978:	428b      	cmp	r3, r1
 801897a:	d1fa      	bne.n	8018972 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801897c:	4b09      	ldr	r3, [pc, #36]	; (80189a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801897e:	2135      	movs	r1, #53	; 0x35
 8018980:	4a05      	ldr	r2, [pc, #20]	; (8018998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018982:	e7e7      	b.n	8018954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018984:	428b      	cmp	r3, r1
 8018986:	d103      	bne.n	8018990 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018988:	4b06      	ldr	r3, [pc, #24]	; (80189a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801898a:	2138      	movs	r1, #56	; 0x38
 801898c:	4a02      	ldr	r2, [pc, #8]	; (8018998 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801898e:	e7e1      	b.n	8018954 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018990:	6199      	str	r1, [r3, #24]
 8018992:	e7ed      	b.n	8018970 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8018994:	0802ad95 	.word	0x0802ad95
 8018998:	0802aeec 	.word	0x0802aeec
 801899c:	0802adc1 	.word	0x0802adc1
 80189a0:	0802adf4 	.word	0x0802adf4
 80189a4:	0802ae2a 	.word	0x0802ae2a

080189a8 <_ZN8touchgfx4RectaNERKS0_>:
 80189a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189ac:	888b      	ldrh	r3, [r1, #4]
 80189ae:	f9b1 9000 	ldrsh.w	r9, [r1]
 80189b2:	f9b0 a000 	ldrsh.w	sl, [r0]
 80189b6:	444b      	add	r3, r9
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	fa0f f883 	sxth.w	r8, r3
 80189be:	45c2      	cmp	sl, r8
 80189c0:	da30      	bge.n	8018a24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80189c2:	8882      	ldrh	r2, [r0, #4]
 80189c4:	4452      	add	r2, sl
 80189c6:	b292      	uxth	r2, r2
 80189c8:	fa0f fe82 	sxth.w	lr, r2
 80189cc:	45f1      	cmp	r9, lr
 80189ce:	da29      	bge.n	8018a24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80189d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80189d4:	88cc      	ldrh	r4, [r1, #6]
 80189d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80189da:	442c      	add	r4, r5
 80189dc:	b224      	sxth	r4, r4
 80189de:	42a6      	cmp	r6, r4
 80189e0:	da20      	bge.n	8018a24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80189e2:	88c7      	ldrh	r7, [r0, #6]
 80189e4:	4437      	add	r7, r6
 80189e6:	b2bf      	uxth	r7, r7
 80189e8:	fa0f fc87 	sxth.w	ip, r7
 80189ec:	4565      	cmp	r5, ip
 80189ee:	da19      	bge.n	8018a24 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80189f0:	45ca      	cmp	sl, r9
 80189f2:	4654      	mov	r4, sl
 80189f4:	bfb8      	it	lt
 80189f6:	464c      	movlt	r4, r9
 80189f8:	42b5      	cmp	r5, r6
 80189fa:	bfb8      	it	lt
 80189fc:	4635      	movlt	r5, r6
 80189fe:	45f0      	cmp	r8, lr
 8018a00:	bfc8      	it	gt
 8018a02:	4613      	movgt	r3, r2
 8018a04:	1b1b      	subs	r3, r3, r4
 8018a06:	8083      	strh	r3, [r0, #4]
 8018a08:	88ca      	ldrh	r2, [r1, #6]
 8018a0a:	884b      	ldrh	r3, [r1, #2]
 8018a0c:	8004      	strh	r4, [r0, #0]
 8018a0e:	4413      	add	r3, r2
 8018a10:	8045      	strh	r5, [r0, #2]
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	b21a      	sxth	r2, r3
 8018a16:	4594      	cmp	ip, r2
 8018a18:	bfb8      	it	lt
 8018a1a:	463b      	movlt	r3, r7
 8018a1c:	1b5b      	subs	r3, r3, r5
 8018a1e:	80c3      	strh	r3, [r0, #6]
 8018a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a24:	2300      	movs	r3, #0
 8018a26:	8003      	strh	r3, [r0, #0]
 8018a28:	8043      	strh	r3, [r0, #2]
 8018a2a:	8083      	strh	r3, [r0, #4]
 8018a2c:	80c3      	strh	r3, [r0, #6]
 8018a2e:	e7f7      	b.n	8018a20 <_ZN8touchgfx4RectaNERKS0_+0x78>

08018a30 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8018a30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a34:	b12b      	cbz	r3, 8018a42 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8018a36:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018a3a:	fab0 f080 	clz	r0, r0
 8018a3e:	0940      	lsrs	r0, r0, #5
 8018a40:	4770      	bx	lr
 8018a42:	2001      	movs	r0, #1
 8018a44:	4770      	bx	lr

08018a46 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018a50:	8003      	strh	r3, [r0, #0]
 8018a52:	8043      	strh	r3, [r0, #2]
 8018a54:	8083      	strh	r3, [r0, #4]
 8018a56:	80c3      	strh	r3, [r0, #6]
 8018a58:	2d00      	cmp	r5, #0
 8018a5a:	d040      	beq.n	8018ade <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018a5c:	1d28      	adds	r0, r5, #4
 8018a5e:	f7ff ffe7 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a62:	b988      	cbnz	r0, 8018a88 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018a64:	4620      	mov	r0, r4
 8018a66:	f7ff ffe3 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a6a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018a6e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018a72:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018a76:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018a7a:	b138      	cbz	r0, 8018a8c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018a7c:	8022      	strh	r2, [r4, #0]
 8018a7e:	8063      	strh	r3, [r4, #2]
 8018a80:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018a84:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018a88:	69ad      	ldr	r5, [r5, #24]
 8018a8a:	e7e5      	b.n	8018a58 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018a8c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018a90:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018a94:	4290      	cmp	r0, r2
 8018a96:	4607      	mov	r7, r0
 8018a98:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018a9c:	460e      	mov	r6, r1
 8018a9e:	bfa8      	it	ge
 8018aa0:	4617      	movge	r7, r2
 8018aa2:	4299      	cmp	r1, r3
 8018aa4:	4472      	add	r2, lr
 8018aa6:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018aaa:	bfa8      	it	ge
 8018aac:	461e      	movge	r6, r3
 8018aae:	4440      	add	r0, r8
 8018ab0:	4471      	add	r1, lr
 8018ab2:	4463      	add	r3, ip
 8018ab4:	b200      	sxth	r0, r0
 8018ab6:	8027      	strh	r7, [r4, #0]
 8018ab8:	b212      	sxth	r2, r2
 8018aba:	8066      	strh	r6, [r4, #2]
 8018abc:	b209      	sxth	r1, r1
 8018abe:	b21b      	sxth	r3, r3
 8018ac0:	4290      	cmp	r0, r2
 8018ac2:	bfac      	ite	ge
 8018ac4:	ebc7 0200 	rsbge	r2, r7, r0
 8018ac8:	ebc7 0202 	rsblt	r2, r7, r2
 8018acc:	4299      	cmp	r1, r3
 8018ace:	bfac      	ite	ge
 8018ad0:	ebc6 0301 	rsbge	r3, r6, r1
 8018ad4:	ebc6 0303 	rsblt	r3, r6, r3
 8018ad8:	80a2      	strh	r2, [r4, #4]
 8018ada:	80e3      	strh	r3, [r4, #6]
 8018adc:	e7d4      	b.n	8018a88 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018ade:	4620      	mov	r0, r4
 8018ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ae4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ae8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018aec:	b383      	cbz	r3, 8018b50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018aee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018af0:	b374      	cbz	r4, 8018b50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018af2:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018af6:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018afa:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018afe:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018b02:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018b06:	b303      	cbz	r3, 8018b4a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018b08:	4668      	mov	r0, sp
 8018b0a:	1d21      	adds	r1, r4, #4
 8018b0c:	f8ad 5000 	strh.w	r5, [sp]
 8018b10:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018b14:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018b18:	f8ad 8006 	strh.w	r8, [sp, #6]
 8018b1c:	f7ff ff44 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 8018b20:	4668      	mov	r0, sp
 8018b22:	f7ff ff85 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b26:	b980      	cbnz	r0, 8018b4a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018b28:	f8bd 3000 	ldrh.w	r3, [sp]
 8018b2c:	4669      	mov	r1, sp
 8018b2e:	88a2      	ldrh	r2, [r4, #4]
 8018b30:	4620      	mov	r0, r4
 8018b32:	1a9b      	subs	r3, r3, r2
 8018b34:	88e2      	ldrh	r2, [r4, #6]
 8018b36:	f8ad 3000 	strh.w	r3, [sp]
 8018b3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018b3e:	1a9b      	subs	r3, r3, r2
 8018b40:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018b44:	6823      	ldr	r3, [r4, #0]
 8018b46:	689b      	ldr	r3, [r3, #8]
 8018b48:	4798      	blx	r3
 8018b4a:	69a4      	ldr	r4, [r4, #24]
 8018b4c:	2c00      	cmp	r4, #0
 8018b4e:	d1d8      	bne.n	8018b02 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018b50:	b002      	add	sp, #8
 8018b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018b58:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018b5c:	460d      	mov	r5, r1
 8018b5e:	4616      	mov	r6, r2
 8018b60:	b323      	cbz	r3, 8018bac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018b62:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018b64:	b314      	cbz	r4, 8018bac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018b66:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018b6a:	b1eb      	cbz	r3, 8018ba8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018b6c:	6828      	ldr	r0, [r5, #0]
 8018b6e:	466b      	mov	r3, sp
 8018b70:	6869      	ldr	r1, [r5, #4]
 8018b72:	c303      	stmia	r3!, {r0, r1}
 8018b74:	4668      	mov	r0, sp
 8018b76:	1d21      	adds	r1, r4, #4
 8018b78:	f7ff ff16 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 8018b7c:	4668      	mov	r0, sp
 8018b7e:	f7ff ff57 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b82:	b988      	cbnz	r0, 8018ba8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018b84:	f8bd 3000 	ldrh.w	r3, [sp]
 8018b88:	4669      	mov	r1, sp
 8018b8a:	88a2      	ldrh	r2, [r4, #4]
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	1a9b      	subs	r3, r3, r2
 8018b90:	88e2      	ldrh	r2, [r4, #6]
 8018b92:	f8ad 3000 	strh.w	r3, [sp]
 8018b96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018b9a:	1a9b      	subs	r3, r3, r2
 8018b9c:	4632      	mov	r2, r6
 8018b9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018ba2:	6823      	ldr	r3, [r4, #0]
 8018ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ba6:	4798      	blx	r3
 8018ba8:	69a4      	ldr	r4, [r4, #24]
 8018baa:	e7db      	b.n	8018b64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018bac:	b002      	add	sp, #8
 8018bae:	bd70      	pop	{r4, r5, r6, pc}

08018bb0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8018bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018bb4:	4770      	bx	lr

08018bb6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018bb6:	6803      	ldr	r3, [r0, #0]
 8018bb8:	b513      	push	{r0, r1, r4, lr}
 8018bba:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	e9cd 3300 	strd	r3, r3, [sp]
 8018bc4:	466b      	mov	r3, sp
 8018bc6:	47a0      	blx	r4
 8018bc8:	b002      	add	sp, #8
 8018bca:	bd10      	pop	{r4, pc}

08018bcc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018bcc:	2301      	movs	r3, #1
 8018bce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018bd2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018bd6:	4770      	bx	lr

08018bd8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8018bd8:	2301      	movs	r3, #1
 8018bda:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018bde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018be2:	4770      	bx	lr

08018be4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018be4:	6843      	ldr	r3, [r0, #4]
 8018be6:	2201      	movs	r2, #1
 8018be8:	725a      	strb	r2, [r3, #9]
 8018bea:	6840      	ldr	r0, [r0, #4]
 8018bec:	6803      	ldr	r3, [r0, #0]
 8018bee:	691b      	ldr	r3, [r3, #16]
 8018bf0:	4718      	bx	r3

08018bf2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018bf2:	6840      	ldr	r0, [r0, #4]
 8018bf4:	6803      	ldr	r3, [r0, #0]
 8018bf6:	689b      	ldr	r3, [r3, #8]
 8018bf8:	4718      	bx	r3
	...

08018bfc <_ZN8touchgfx3HAL10beginFrameEv>:
 8018bfc:	4b04      	ldr	r3, [pc, #16]	; (8018c10 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	b123      	cbz	r3, 8018c0c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018c02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018c06:	f080 0001 	eor.w	r0, r0, #1
 8018c0a:	4770      	bx	lr
 8018c0c:	2001      	movs	r0, #1
 8018c0e:	4770      	bx	lr
 8018c10:	2000bee8 	.word	0x2000bee8

08018c14 <_ZN8touchgfx3HAL8endFrameEv>:
 8018c14:	b510      	push	{r4, lr}
 8018c16:	4604      	mov	r4, r0
 8018c18:	6840      	ldr	r0, [r0, #4]
 8018c1a:	6803      	ldr	r3, [r0, #0]
 8018c1c:	689b      	ldr	r3, [r3, #8]
 8018c1e:	4798      	blx	r3
 8018c20:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018c24:	b113      	cbz	r3, 8018c2c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018c26:	2301      	movs	r3, #1
 8018c28:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018c2c:	bd10      	pop	{r4, pc}

08018c2e <_ZN8touchgfx3HAL9taskEntryEv>:
 8018c2e:	b508      	push	{r3, lr}
 8018c30:	6803      	ldr	r3, [r0, #0]
 8018c32:	4604      	mov	r4, r0
 8018c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c36:	4798      	blx	r3
 8018c38:	6823      	ldr	r3, [r4, #0]
 8018c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	4798      	blx	r3
 8018c40:	f7fd fc34 	bl	80164ac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018c44:	6823      	ldr	r3, [r4, #0]
 8018c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018c48:	e7f8      	b.n	8018c3c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018c4c <_ZN8touchgfx3HAL4tickEv>:
 8018c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018c4e:	6803      	ldr	r3, [r0, #0]
 8018c50:	4604      	mov	r4, r0
 8018c52:	4d5c      	ldr	r5, [pc, #368]	; (8018dc4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018c58:	4798      	blx	r3
 8018c5a:	2800      	cmp	r0, #0
 8018c5c:	f000 8097 	beq.w	8018d8e <_ZN8touchgfx3HAL4tickEv+0x142>
 8018c60:	2001      	movs	r0, #1
 8018c62:	2600      	movs	r6, #0
 8018c64:	f7fd f906 	bl	8015e74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018c68:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018c6c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8018c70:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018c74:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018c78:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018c7c:	b133      	cbz	r3, 8018c8c <_ZN8touchgfx3HAL4tickEv+0x40>
 8018c7e:	6823      	ldr	r3, [r4, #0]
 8018c80:	4620      	mov	r0, r4
 8018c82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018c86:	4798      	blx	r3
 8018c88:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018c8c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018c90:	2601      	movs	r6, #1
 8018c92:	6862      	ldr	r2, [r4, #4]
 8018c94:	f083 0301 	eor.w	r3, r3, #1
 8018c98:	702e      	strb	r6, [r5, #0]
 8018c9a:	7253      	strb	r3, [r2, #9]
 8018c9c:	f003 f91e 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 8018ca0:	6803      	ldr	r3, [r0, #0]
 8018ca2:	4631      	mov	r1, r6
 8018ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ca6:	4798      	blx	r3
 8018ca8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018cac:	b90b      	cbnz	r3, 8018cb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018cae:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018cb2:	f003 f913 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 8018cb6:	6803      	ldr	r3, [r0, #0]
 8018cb8:	695b      	ldr	r3, [r3, #20]
 8018cba:	4798      	blx	r3
 8018cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018cbe:	6803      	ldr	r3, [r0, #0]
 8018cc0:	691b      	ldr	r3, [r3, #16]
 8018cc2:	4798      	blx	r3
 8018cc4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018cc8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018ccc:	3b01      	subs	r3, #1
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018cd4:	b10a      	cbz	r2, 8018cda <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d1eb      	bne.n	8018cb2 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018cda:	4a3b      	ldr	r2, [pc, #236]	; (8018dc8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018cdc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018ce0:	7813      	ldrb	r3, [r2, #0]
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	b25b      	sxtb	r3, r3
 8018ce6:	4299      	cmp	r1, r3
 8018ce8:	7013      	strb	r3, [r2, #0]
 8018cea:	dc10      	bgt.n	8018d0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018cec:	2300      	movs	r3, #0
 8018cee:	68e0      	ldr	r0, [r4, #12]
 8018cf0:	a902      	add	r1, sp, #8
 8018cf2:	7013      	strb	r3, [r2, #0]
 8018cf4:	aa03      	add	r2, sp, #12
 8018cf6:	6803      	ldr	r3, [r0, #0]
 8018cf8:	68db      	ldr	r3, [r3, #12]
 8018cfa:	4798      	blx	r3
 8018cfc:	6823      	ldr	r3, [r4, #0]
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	d051      	beq.n	8018da6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018d06:	4620      	mov	r0, r4
 8018d08:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018d0c:	4798      	blx	r3
 8018d0e:	2300      	movs	r3, #0
 8018d10:	6960      	ldr	r0, [r4, #20]
 8018d12:	f88d 3007 	strb.w	r3, [sp, #7]
 8018d16:	b158      	cbz	r0, 8018d30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018d18:	6803      	ldr	r3, [r0, #0]
 8018d1a:	f10d 0107 	add.w	r1, sp, #7
 8018d1e:	68db      	ldr	r3, [r3, #12]
 8018d20:	4798      	blx	r3
 8018d22:	b128      	cbz	r0, 8018d30 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018d2a:	6803      	ldr	r3, [r0, #0]
 8018d2c:	68db      	ldr	r3, [r3, #12]
 8018d2e:	4798      	blx	r3
 8018d30:	f104 001c 	add.w	r0, r4, #28
 8018d34:	f00d fc34 	bl	80265a0 <_ZN8touchgfx8Gestures4tickEv>
 8018d38:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018d3c:	b30b      	cbz	r3, 8018d82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018d3e:	6920      	ldr	r0, [r4, #16]
 8018d40:	6803      	ldr	r3, [r0, #0]
 8018d42:	691b      	ldr	r3, [r3, #16]
 8018d44:	4798      	blx	r3
 8018d46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d48:	4606      	mov	r6, r0
 8018d4a:	b903      	cbnz	r3, 8018d4e <_ZN8touchgfx3HAL4tickEv+0x102>
 8018d4c:	6720      	str	r0, [r4, #112]	; 0x70
 8018d4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d50:	4a1e      	ldr	r2, [pc, #120]	; (8018dcc <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018d52:	1af3      	subs	r3, r6, r3
 8018d54:	4293      	cmp	r3, r2
 8018d56:	d914      	bls.n	8018d82 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018d58:	6920      	ldr	r0, [r4, #16]
 8018d5a:	6803      	ldr	r3, [r0, #0]
 8018d5c:	699b      	ldr	r3, [r3, #24]
 8018d5e:	4798      	blx	r3
 8018d60:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d62:	2264      	movs	r2, #100	; 0x64
 8018d64:	1af3      	subs	r3, r6, r3
 8018d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	dc1e      	bgt.n	8018db0 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018d72:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018d76:	6920      	ldr	r0, [r4, #16]
 8018d78:	2100      	movs	r1, #0
 8018d7a:	6803      	ldr	r3, [r0, #0]
 8018d7c:	69db      	ldr	r3, [r3, #28]
 8018d7e:	4798      	blx	r3
 8018d80:	6726      	str	r6, [r4, #112]	; 0x70
 8018d82:	f003 f8ab 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 8018d86:	6803      	ldr	r3, [r0, #0]
 8018d88:	2100      	movs	r1, #0
 8018d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d8c:	4798      	blx	r3
 8018d8e:	6823      	ldr	r3, [r4, #0]
 8018d90:	4620      	mov	r0, r4
 8018d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018d96:	4798      	blx	r3
 8018d98:	2001      	movs	r0, #1
 8018d9a:	f7fd f876 	bl	8015e8a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018d9e:	2300      	movs	r3, #0
 8018da0:	702b      	strb	r3, [r5, #0]
 8018da2:	b004      	add	sp, #16
 8018da4:	bd70      	pop	{r4, r5, r6, pc}
 8018da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018daa:	4620      	mov	r0, r4
 8018dac:	4798      	blx	r3
 8018dae:	e7ae      	b.n	8018d0e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018db0:	2863      	cmp	r0, #99	; 0x63
 8018db2:	bfcb      	itete	gt
 8018db4:	2300      	movgt	r3, #0
 8018db6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018dba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018dbe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018dc2:	e7d8      	b.n	8018d76 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018dc4:	2000bef0 	.word	0x2000bef0
 8018dc8:	2000bef1 	.word	0x2000bef1
 8018dcc:	05f5e100 	.word	0x05f5e100

08018dd0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018dd0:	f7fd bb0c 	b.w	80163ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018dd4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018dd4:	6581      	str	r1, [r0, #88]	; 0x58
 8018dd6:	301c      	adds	r0, #28
 8018dd8:	f00d bbe0 	b.w	802659c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018ddc <_ZN8touchgfx3HAL5touchEll>:
 8018ddc:	b530      	push	{r4, r5, lr}
 8018dde:	b087      	sub	sp, #28
 8018de0:	4604      	mov	r4, r0
 8018de2:	a804      	add	r0, sp, #16
 8018de4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018de8:	f002 fe7c 	bl	801bae4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018dec:	9b04      	ldr	r3, [sp, #16]
 8018dee:	a906      	add	r1, sp, #24
 8018df0:	a803      	add	r0, sp, #12
 8018df2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018df6:	9b05      	ldr	r3, [sp, #20]
 8018df8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018dfc:	f002 fec0 	bl	801bb80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018e00:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018e04:	f104 001c 	add.w	r0, r4, #28
 8018e08:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018e0c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018e10:	b189      	cbz	r1, 8018e36 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018e12:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018e16:	9300      	str	r3, [sp, #0]
 8018e18:	4613      	mov	r3, r2
 8018e1a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018e1e:	462a      	mov	r2, r5
 8018e20:	f00d fbcc 	bl	80265bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018e24:	b128      	cbz	r0, 8018e32 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018e26:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018e2a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018e2c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018e30:	6623      	str	r3, [r4, #96]	; 0x60
 8018e32:	b007      	add	sp, #28
 8018e34:	bd30      	pop	{r4, r5, pc}
 8018e36:	f00d fc05 	bl	8026644 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018e40:	e7f1      	b.n	8018e26 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018e42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018e42:	b570      	push	{r4, r5, r6, lr}
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d050      	beq.n	8018eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018e48:	ea81 0002 	eor.w	r0, r1, r2
 8018e4c:	07c6      	lsls	r6, r0, #31
 8018e4e:	d508      	bpl.n	8018e62 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018e50:	3a01      	subs	r2, #1
 8018e52:	18cc      	adds	r4, r1, r3
 8018e54:	42a1      	cmp	r1, r4
 8018e56:	d048      	beq.n	8018eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018e58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018e5c:	f801 0b01 	strb.w	r0, [r1], #1
 8018e60:	e7f8      	b.n	8018e54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018e62:	07d5      	lsls	r5, r2, #31
 8018e64:	bf42      	ittt	mi
 8018e66:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018e6a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018e6e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d915      	bls.n	8018ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018e76:	ea82 0001 	eor.w	r0, r2, r1
 8018e7a:	0784      	lsls	r4, r0, #30
 8018e7c:	d02d      	beq.n	8018eda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8018e7e:	1e94      	subs	r4, r2, #2
 8018e80:	4608      	mov	r0, r1
 8018e82:	18ce      	adds	r6, r1, r3
 8018e84:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8018e88:	f820 5b02 	strh.w	r5, [r0], #2
 8018e8c:	1a35      	subs	r5, r6, r0
 8018e8e:	2d01      	cmp	r5, #1
 8018e90:	d8f8      	bhi.n	8018e84 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8018e92:	1e98      	subs	r0, r3, #2
 8018e94:	f003 0301 	and.w	r3, r3, #1
 8018e98:	f020 0001 	bic.w	r0, r0, #1
 8018e9c:	3002      	adds	r0, #2
 8018e9e:	4401      	add	r1, r0
 8018ea0:	4402      	add	r2, r0
 8018ea2:	1f14      	subs	r4, r2, #4
 8018ea4:	4608      	mov	r0, r1
 8018ea6:	18ce      	adds	r6, r1, r3
 8018ea8:	1a35      	subs	r5, r6, r0
 8018eaa:	2d03      	cmp	r5, #3
 8018eac:	d810      	bhi.n	8018ed0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8018eae:	089c      	lsrs	r4, r3, #2
 8018eb0:	00a0      	lsls	r0, r4, #2
 8018eb2:	4401      	add	r1, r0
 8018eb4:	3801      	subs	r0, #1
 8018eb6:	4402      	add	r2, r0
 8018eb8:	f06f 0003 	mvn.w	r0, #3
 8018ebc:	fb00 3404 	mla	r4, r0, r4, r3
 8018ec0:	440c      	add	r4, r1
 8018ec2:	42a1      	cmp	r1, r4
 8018ec4:	d011      	beq.n	8018eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018ec6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018eca:	f801 3b01 	strb.w	r3, [r1], #1
 8018ece:	e7f8      	b.n	8018ec2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8018ed0:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8018ed4:	f840 5b04 	str.w	r5, [r0], #4
 8018ed8:	e7e6      	b.n	8018ea8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8018eda:	0790      	lsls	r0, r2, #30
 8018edc:	d0e1      	beq.n	8018ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018ede:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018ee2:	3b02      	subs	r3, #2
 8018ee4:	f821 0b02 	strh.w	r0, [r1], #2
 8018ee8:	e7db      	b.n	8018ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018eea:	2001      	movs	r0, #1
 8018eec:	bd70      	pop	{r4, r5, r6, pc}

08018eee <_ZN8touchgfx3HAL7noTouchEv>:
 8018eee:	b510      	push	{r4, lr}
 8018ef0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018ef4:	4604      	mov	r4, r0
 8018ef6:	b153      	cbz	r3, 8018f0e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018ef8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018efc:	2101      	movs	r1, #1
 8018efe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018f02:	301c      	adds	r0, #28
 8018f04:	f00d fb9e 	bl	8026644 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018f08:	2300      	movs	r3, #0
 8018f0a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018f0e:	bd10      	pop	{r4, pc}

08018f10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f14:	4605      	mov	r5, r0
 8018f16:	6980      	ldr	r0, [r0, #24]
 8018f18:	b085      	sub	sp, #20
 8018f1a:	460f      	mov	r7, r1
 8018f1c:	4690      	mov	r8, r2
 8018f1e:	4699      	mov	r9, r3
 8018f20:	b930      	cbnz	r0, 8018f30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018f22:	4b1f      	ldr	r3, [pc, #124]	; (8018fa0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018f24:	f44f 7198 	mov.w	r1, #304	; 0x130
 8018f28:	4a1e      	ldr	r2, [pc, #120]	; (8018fa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018f2a:	481f      	ldr	r0, [pc, #124]	; (8018fa8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8018f2c:	f00f f804 	bl	8027f38 <__assert_func>
 8018f30:	ac04      	add	r4, sp, #16
 8018f32:	2600      	movs	r6, #0
 8018f34:	f844 6d04 	str.w	r6, [r4, #-4]!
 8018f38:	6806      	ldr	r6, [r0, #0]
 8018f3a:	9401      	str	r4, [sp, #4]
 8018f3c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018f40:	9400      	str	r4, [sp, #0]
 8018f42:	6834      	ldr	r4, [r6, #0]
 8018f44:	47a0      	blx	r4
 8018f46:	4c19      	ldr	r4, [pc, #100]	; (8018fac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8018f48:	4606      	mov	r6, r0
 8018f4a:	f8a4 9000 	strh.w	r9, [r4]
 8018f4e:	f7f7 fbaf 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8018f52:	6803      	ldr	r3, [r0, #0]
 8018f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f56:	4798      	blx	r3
 8018f58:	280c      	cmp	r0, #12
 8018f5a:	d80f      	bhi.n	8018f7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018f5c:	e8df f000 	tbb	[pc, r0]
 8018f60:	1b1b1207 	.word	0x1b1b1207
 8018f64:	1b1b1b1b 	.word	0x1b1b1b1b
 8018f68:	1b1b1b1b 	.word	0x1b1b1b1b
 8018f6c:	1b          	.byte	0x1b
 8018f6d:	00          	.byte	0x00
 8018f6e:	8823      	ldrh	r3, [r4, #0]
 8018f70:	fb08 7203 	mla	r2, r8, r3, r7
 8018f74:	9b03      	ldr	r3, [sp, #12]
 8018f76:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018f7a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	b005      	add	sp, #20
 8018f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f84:	8822      	ldrh	r2, [r4, #0]
 8018f86:	9b03      	ldr	r3, [sp, #12]
 8018f88:	fb08 7202 	mla	r2, r8, r2, r7
 8018f8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f90:	1a9a      	subs	r2, r3, r2
 8018f92:	63ea      	str	r2, [r5, #60]	; 0x3c
 8018f94:	e7f2      	b.n	8018f7c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018f96:	4b06      	ldr	r3, [pc, #24]	; (8018fb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8018f98:	f240 114d 	movw	r1, #333	; 0x14d
 8018f9c:	4a01      	ldr	r2, [pc, #4]	; (8018fa4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018f9e:	e7c4      	b.n	8018f2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018fa0:	0802af95 	.word	0x0802af95
 8018fa4:	0802b2a6 	.word	0x0802b2a6
 8018fa8:	0802afda 	.word	0x0802afda
 8018fac:	2000bee4 	.word	0x2000bee4
 8018fb0:	0802b000 	.word	0x0802b000

08018fb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8018fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fb8:	4698      	mov	r8, r3
 8018fba:	6803      	ldr	r3, [r0, #0]
 8018fbc:	b087      	sub	sp, #28
 8018fbe:	460e      	mov	r6, r1
 8018fc0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8018fc2:	4617      	mov	r7, r2
 8018fc4:	4b0d      	ldr	r3, [pc, #52]	; (8018ffc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	f8b3 9000 	ldrh.w	r9, [r3]
 8018fcc:	f7f7 fb70 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8018fd0:	6803      	ldr	r3, [r0, #0]
 8018fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd4:	4798      	blx	r3
 8018fd6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018fda:	463a      	mov	r2, r7
 8018fdc:	4631      	mov	r1, r6
 8018fde:	9302      	str	r3, [sp, #8]
 8018fe0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018fe4:	9301      	str	r3, [sp, #4]
 8018fe6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018fea:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8018fee:	9300      	str	r3, [sp, #0]
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	4643      	mov	r3, r8
 8018ff4:	47a8      	blx	r5
 8018ff6:	b007      	add	sp, #28
 8018ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ffc:	2000bee4 	.word	0x2000bee4

08019000 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019004:	4606      	mov	r6, r0
 8019006:	b089      	sub	sp, #36	; 0x24
 8019008:	4610      	mov	r0, r2
 801900a:	460c      	mov	r4, r1
 801900c:	4691      	mov	r9, r2
 801900e:	4698      	mov	r8, r3
 8019010:	f005 f980 	bl	801e314 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019014:	2800      	cmp	r0, #0
 8019016:	f000 8092 	beq.w	801913e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801901a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8019158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801901e:	ad08      	add	r5, sp, #32
 8019020:	f8df b138 	ldr.w	fp, [pc, #312]	; 801915c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8019024:	f8da 0000 	ldr.w	r0, [sl]
 8019028:	4f4a      	ldr	r7, [pc, #296]	; (8019154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801902a:	6802      	ldr	r2, [r0, #0]
 801902c:	6a12      	ldr	r2, [r2, #32]
 801902e:	4790      	blx	r2
 8019030:	f8da 0000 	ldr.w	r0, [sl]
 8019034:	6802      	ldr	r2, [r0, #0]
 8019036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019038:	4790      	blx	r2
 801903a:	f8bb 3000 	ldrh.w	r3, [fp]
 801903e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8019042:	4628      	mov	r0, r5
 8019044:	9300      	str	r3, [sp, #0]
 8019046:	883b      	ldrh	r3, [r7, #0]
 8019048:	9301      	str	r3, [sp, #4]
 801904a:	f005 fa23 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801904e:	f8ab 0000 	strh.w	r0, [fp]
 8019052:	4628      	mov	r0, r5
 8019054:	f005 fa58 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019058:	f8da b000 	ldr.w	fp, [sl]
 801905c:	8038      	strh	r0, [r7, #0]
 801905e:	4648      	mov	r0, r9
 8019060:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8019064:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8019068:	9302      	str	r3, [sp, #8]
 801906a:	f005 f953 	bl	801e314 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801906e:	f8da 2000 	ldr.w	r2, [sl]
 8019072:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8019076:	63d0      	str	r0, [r2, #60]	; 0x3c
 8019078:	4620      	mov	r0, r4
 801907a:	6822      	ldr	r2, [r4, #0]
 801907c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8019080:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8019082:	2200      	movs	r2, #0
 8019084:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8019088:	4611      	mov	r1, r2
 801908a:	4798      	blx	r3
 801908c:	2201      	movs	r2, #1
 801908e:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8019092:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8019096:	1d22      	adds	r2, r4, #4
 8019098:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801909c:	2900      	cmp	r1, #0
 801909e:	d051      	beq.n	8019144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80190a0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80190a4:	2900      	cmp	r1, #0
 80190a6:	d04d      	beq.n	8019144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80190a8:	6810      	ldr	r0, [r2, #0]
 80190aa:	f10d 0c18 	add.w	ip, sp, #24
 80190ae:	6851      	ldr	r1, [r2, #4]
 80190b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80190b4:	4641      	mov	r1, r8
 80190b6:	a806      	add	r0, sp, #24
 80190b8:	f7ff fc76 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 80190bc:	4628      	mov	r0, r5
 80190be:	f005 fb75 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 80190c2:	4680      	mov	r8, r0
 80190c4:	f7f7 faf4 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80190c8:	6802      	ldr	r2, [r0, #0]
 80190ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80190cc:	4790      	blx	r2
 80190ce:	4580      	cmp	r8, r0
 80190d0:	d03d      	beq.n	801914e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 80190d2:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80190d4:	b150      	cbz	r0, 80190ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80190d6:	4628      	mov	r0, r5
 80190d8:	f005 fb68 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 80190dc:	4605      	mov	r5, r0
 80190de:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80190e0:	6803      	ldr	r3, [r0, #0]
 80190e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e4:	4798      	blx	r3
 80190e6:	1a2b      	subs	r3, r5, r0
 80190e8:	4258      	negs	r0, r3
 80190ea:	4158      	adcs	r0, r3
 80190ec:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 80190f0:	2500      	movs	r5, #0
 80190f2:	6963      	ldr	r3, [r4, #20]
 80190f4:	4620      	mov	r0, r4
 80190f6:	6822      	ldr	r2, [r4, #0]
 80190f8:	a906      	add	r1, sp, #24
 80190fa:	6165      	str	r5, [r4, #20]
 80190fc:	9303      	str	r3, [sp, #12]
 80190fe:	6892      	ldr	r2, [r2, #8]
 8019100:	4790      	blx	r2
 8019102:	9b03      	ldr	r3, [sp, #12]
 8019104:	4620      	mov	r0, r4
 8019106:	4652      	mov	r2, sl
 8019108:	6163      	str	r3, [r4, #20]
 801910a:	4649      	mov	r1, r9
 801910c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8019110:	6823      	ldr	r3, [r4, #0]
 8019112:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8019116:	4c10      	ldr	r4, [pc, #64]	; (8019158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8019118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801911a:	4798      	blx	r3
 801911c:	6820      	ldr	r0, [r4, #0]
 801911e:	9b02      	ldr	r3, [sp, #8]
 8019120:	9a00      	ldr	r2, [sp, #0]
 8019122:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8019126:	4b0d      	ldr	r3, [pc, #52]	; (801915c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8019128:	801a      	strh	r2, [r3, #0]
 801912a:	4b0a      	ldr	r3, [pc, #40]	; (8019154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801912c:	9a01      	ldr	r2, [sp, #4]
 801912e:	801a      	strh	r2, [r3, #0]
 8019130:	6803      	ldr	r3, [r0, #0]
 8019132:	6a1b      	ldr	r3, [r3, #32]
 8019134:	4798      	blx	r3
 8019136:	6820      	ldr	r0, [r4, #0]
 8019138:	6803      	ldr	r3, [r0, #0]
 801913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801913c:	4798      	blx	r3
 801913e:	b009      	add	sp, #36	; 0x24
 8019140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019144:	ab06      	add	r3, sp, #24
 8019146:	6810      	ldr	r0, [r2, #0]
 8019148:	6851      	ldr	r1, [r2, #4]
 801914a:	c303      	stmia	r3!, {r0, r1}
 801914c:	e7b6      	b.n	80190bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801914e:	2000      	movs	r0, #0
 8019150:	e7cc      	b.n	80190ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8019152:	bf00      	nop
 8019154:	2000bee6 	.word	0x2000bee6
 8019158:	2000beec 	.word	0x2000beec
 801915c:	2000bee4 	.word	0x2000bee4

08019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019160:	4b07      	ldr	r3, [pc, #28]	; (8019180 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8019162:	b510      	push	{r4, lr}
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	4604      	mov	r4, r0
 8019168:	b13b      	cbz	r3, 801917a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801916a:	6803      	ldr	r3, [r0, #0]
 801916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801916e:	4798      	blx	r3
 8019170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019172:	4283      	cmp	r3, r0
 8019174:	d101      	bne.n	801917a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019176:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019178:	bd10      	pop	{r4, pc}
 801917a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801917c:	e7fc      	b.n	8019178 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801917e:	bf00      	nop
 8019180:	2000bee8 	.word	0x2000bee8

08019184 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019184:	4b0b      	ldr	r3, [pc, #44]	; (80191b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8019186:	b510      	push	{r4, lr}
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	4604      	mov	r4, r0
 801918c:	b95b      	cbnz	r3, 80191a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801918e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019192:	2b02      	cmp	r3, #2
 8019194:	d007      	beq.n	80191a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019196:	6840      	ldr	r0, [r0, #4]
 8019198:	f000 fbc8 	bl	801992c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801919c:	b118      	cbz	r0, 80191a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801919e:	6862      	ldr	r2, [r4, #4]
 80191a0:	7a53      	ldrb	r3, [r2, #9]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d0fc      	beq.n	80191a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80191a6:	f7fd f913 	bl	80163d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191aa:	4620      	mov	r0, r4
 80191ac:	f7ff ffd8 	bl	8019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191b0:	bd10      	pop	{r4, pc}
 80191b2:	bf00      	nop
 80191b4:	2000bee8 	.word	0x2000bee8

080191b8 <_ZN8touchgfx3HAL10initializeEv>:
 80191b8:	b510      	push	{r4, lr}
 80191ba:	4604      	mov	r4, r0
 80191bc:	f7fd f8e4 	bl	8016388 <_ZN8touchgfx10OSWrappers10initializeEv>
 80191c0:	6860      	ldr	r0, [r4, #4]
 80191c2:	6803      	ldr	r3, [r0, #0]
 80191c4:	68db      	ldr	r3, [r3, #12]
 80191c6:	4798      	blx	r3
 80191c8:	68e0      	ldr	r0, [r4, #12]
 80191ca:	6803      	ldr	r3, [r0, #0]
 80191cc:	689b      	ldr	r3, [r3, #8]
 80191ce:	4798      	blx	r3
 80191d0:	6823      	ldr	r3, [r4, #0]
 80191d2:	4620      	mov	r0, r4
 80191d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191da:	4718      	bx	r3

080191dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80191dc:	b508      	push	{r3, lr}
 80191de:	290c      	cmp	r1, #12
 80191e0:	d817      	bhi.n	8019212 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80191e2:	e8df f001 	tbb	[pc, r1]
 80191e6:	090b      	.short	0x090b
 80191e8:	0d0d0d07 	.word	0x0d0d0d07
 80191ec:	1414140d 	.word	0x1414140d
 80191f0:	1414      	.short	0x1414
 80191f2:	0d          	.byte	0x0d
 80191f3:	00          	.byte	0x00
 80191f4:	2020      	movs	r0, #32
 80191f6:	bd08      	pop	{r3, pc}
 80191f8:	2018      	movs	r0, #24
 80191fa:	e7fc      	b.n	80191f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80191fc:	2010      	movs	r0, #16
 80191fe:	e7fa      	b.n	80191f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019200:	4b05      	ldr	r3, [pc, #20]	; (8019218 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8019202:	f44f 710c 	mov.w	r1, #560	; 0x230
 8019206:	4a05      	ldr	r2, [pc, #20]	; (801921c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019208:	4805      	ldr	r0, [pc, #20]	; (8019220 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801920a:	f00e fe95 	bl	8027f38 <__assert_func>
 801920e:	2008      	movs	r0, #8
 8019210:	e7f1      	b.n	80191f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019212:	2000      	movs	r0, #0
 8019214:	e7ef      	b.n	80191f6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019216:	bf00      	nop
 8019218:	0802b0d3 	.word	0x0802b0d3
 801921c:	0802b468 	.word	0x0802b468
 8019220:	0802afda 	.word	0x0802afda

08019224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8019224:	b570      	push	{r4, r5, r6, lr}
 8019226:	460d      	mov	r5, r1
 8019228:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801922c:	4616      	mov	r6, r2
 801922e:	461c      	mov	r4, r3
 8019230:	f7ff ffd4 	bl	80191dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8019234:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019238:	10c0      	asrs	r0, r0, #3
 801923a:	fb06 5101 	mla	r1, r6, r1, r5
 801923e:	fb00 4001 	mla	r0, r0, r1, r4
 8019242:	bd70      	pop	{r4, r5, r6, pc}

08019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8019244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019248:	b08a      	sub	sp, #40	; 0x28
 801924a:	f04f 0c00 	mov.w	ip, #0
 801924e:	4604      	mov	r4, r0
 8019250:	469a      	mov	sl, r3
 8019252:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8019256:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801925a:	f1b8 0f02 	cmp.w	r8, #2
 801925e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8019262:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019266:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801926a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801926e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8019272:	f8cd c020 	str.w	ip, [sp, #32]
 8019276:	d030      	beq.n	80192da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8019278:	2bff      	cmp	r3, #255	; 0xff
 801927a:	d12c      	bne.n	80192d6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801927c:	4560      	cmp	r0, ip
 801927e:	bf14      	ite	ne
 8019280:	2004      	movne	r0, #4
 8019282:	2001      	moveq	r0, #1
 8019284:	9204      	str	r2, [sp, #16]
 8019286:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801928a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801928e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019292:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019296:	f8ad 501a 	strh.w	r5, [sp, #26]
 801929a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801929e:	4620      	mov	r0, r4
 80192a0:	f7ff ff5e 	bl	8019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192a4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80192a8:	4603      	mov	r3, r0
 80192aa:	4651      	mov	r1, sl
 80192ac:	4620      	mov	r0, r4
 80192ae:	e9cd 9700 	strd	r9, r7, [sp]
 80192b2:	f7ff ffb7 	bl	8019224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80192b6:	f8ad 901e 	strh.w	r9, [sp, #30]
 80192ba:	9005      	str	r0, [sp, #20]
 80192bc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 80192c0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 80192c4:	b106      	cbz	r6, 80192c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 80192c6:	b98d      	cbnz	r5, 80192ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 80192c8:	4b12      	ldr	r3, [pc, #72]	; (8019314 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 80192ca:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80192ce:	4a12      	ldr	r2, [pc, #72]	; (8019318 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80192d0:	4812      	ldr	r0, [pc, #72]	; (801931c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 80192d2:	f00e fe31 	bl	8027f38 <__assert_func>
 80192d6:	2004      	movs	r0, #4
 80192d8:	e7d4      	b.n	8019284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80192da:	2bff      	cmp	r3, #255	; 0xff
 80192dc:	d104      	bne.n	80192e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 80192de:	2800      	cmp	r0, #0
 80192e0:	bf14      	ite	ne
 80192e2:	2040      	movne	r0, #64	; 0x40
 80192e4:	2020      	moveq	r0, #32
 80192e6:	e7cd      	b.n	8019284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80192e8:	2040      	movs	r0, #64	; 0x40
 80192ea:	e7cb      	b.n	8019284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80192ec:	6823      	ldr	r3, [r4, #0]
 80192ee:	4620      	mov	r0, r4
 80192f0:	9d02      	ldr	r5, [sp, #8]
 80192f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192f4:	4798      	blx	r3
 80192f6:	4228      	tst	r0, r5
 80192f8:	d104      	bne.n	8019304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80192fa:	4b09      	ldr	r3, [pc, #36]	; (8019320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80192fc:	f240 11b1 	movw	r1, #433	; 0x1b1
 8019300:	4a05      	ldr	r2, [pc, #20]	; (8019318 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8019302:	e7e5      	b.n	80192d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8019304:	6860      	ldr	r0, [r4, #4]
 8019306:	a902      	add	r1, sp, #8
 8019308:	6803      	ldr	r3, [r0, #0]
 801930a:	685b      	ldr	r3, [r3, #4]
 801930c:	4798      	blx	r3
 801930e:	b00a      	add	sp, #40	; 0x28
 8019310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019314:	0802b056 	.word	0x0802b056
 8019318:	0802b30a 	.word	0x0802b30a
 801931c:	0802afda 	.word	0x0802afda
 8019320:	0802b08e 	.word	0x0802b08e

08019324 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8019324:	b510      	push	{r4, lr}
 8019326:	b08a      	sub	sp, #40	; 0x28
 8019328:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801932c:	9408      	str	r4, [sp, #32]
 801932e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8019332:	9407      	str	r4, [sp, #28]
 8019334:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8019338:	9406      	str	r4, [sp, #24]
 801933a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801933e:	9405      	str	r4, [sp, #20]
 8019340:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8019344:	9404      	str	r4, [sp, #16]
 8019346:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801934a:	9403      	str	r4, [sp, #12]
 801934c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8019350:	9402      	str	r4, [sp, #8]
 8019352:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8019356:	e9cd 3400 	strd	r3, r4, [sp]
 801935a:	4613      	mov	r3, r2
 801935c:	2200      	movs	r2, #0
 801935e:	f7ff ff71 	bl	8019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019362:	b00a      	add	sp, #40	; 0x28
 8019364:	bd10      	pop	{r4, pc}
	...

08019368 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8019368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801936a:	b08b      	sub	sp, #44	; 0x2c
 801936c:	4616      	mov	r6, r2
 801936e:	460d      	mov	r5, r1
 8019370:	461f      	mov	r7, r3
 8019372:	4604      	mov	r4, r0
 8019374:	f7f7 f99c 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019378:	6803      	ldr	r3, [r0, #0]
 801937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801937c:	4798      	blx	r3
 801937e:	4b0e      	ldr	r3, [pc, #56]	; (80193b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8019380:	2200      	movs	r2, #0
 8019382:	4629      	mov	r1, r5
 8019384:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019388:	881b      	ldrh	r3, [r3, #0]
 801938a:	4620      	mov	r0, r4
 801938c:	9306      	str	r3, [sp, #24]
 801938e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019392:	9305      	str	r3, [sp, #20]
 8019394:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019398:	9304      	str	r3, [sp, #16]
 801939a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801939e:	9303      	str	r3, [sp, #12]
 80193a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80193a4:	9302      	str	r3, [sp, #8]
 80193a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80193aa:	e9cd 7300 	strd	r7, r3, [sp]
 80193ae:	4633      	mov	r3, r6
 80193b0:	f7ff ff48 	bl	8019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80193b4:	b00b      	add	sp, #44	; 0x2c
 80193b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193b8:	2000bee4 	.word	0x2000bee4

080193bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 80193bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193c0:	461f      	mov	r7, r3
 80193c2:	4b14      	ldr	r3, [pc, #80]	; (8019414 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 80193c4:	b08a      	sub	sp, #40	; 0x28
 80193c6:	4616      	mov	r6, r2
 80193c8:	f8b3 8000 	ldrh.w	r8, [r3]
 80193cc:	460d      	mov	r5, r1
 80193ce:	4604      	mov	r4, r0
 80193d0:	f7f7 f96e 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80193d4:	6803      	ldr	r3, [r0, #0]
 80193d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d8:	4798      	blx	r3
 80193da:	2302      	movs	r3, #2
 80193dc:	9008      	str	r0, [sp, #32]
 80193de:	2200      	movs	r2, #0
 80193e0:	4629      	mov	r1, r5
 80193e2:	4620      	mov	r0, r4
 80193e4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80193e8:	2301      	movs	r3, #1
 80193ea:	9305      	str	r3, [sp, #20]
 80193ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80193f0:	9304      	str	r3, [sp, #16]
 80193f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80193f6:	9303      	str	r3, [sp, #12]
 80193f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80193fc:	9302      	str	r3, [sp, #8]
 80193fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019402:	e9cd 7300 	strd	r7, r3, [sp]
 8019406:	4633      	mov	r3, r6
 8019408:	f7ff ff1c 	bl	8019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801940c:	b00a      	add	sp, #40	; 0x28
 801940e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019412:	bf00      	nop
 8019414:	2000bee4 	.word	0x2000bee4

08019418 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8019418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801941c:	b08b      	sub	sp, #44	; 0x2c
 801941e:	469b      	mov	fp, r3
 8019420:	4604      	mov	r4, r0
 8019422:	4692      	mov	sl, r2
 8019424:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8019428:	2600      	movs	r6, #0
 801942a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801942e:	4689      	mov	r9, r1
 8019430:	2fff      	cmp	r7, #255	; 0xff
 8019432:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8019436:	9608      	str	r6, [sp, #32]
 8019438:	bf14      	ite	ne
 801943a:	2308      	movne	r3, #8
 801943c:	2302      	moveq	r3, #2
 801943e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019442:	f7ff fe8d 	bl	8019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019446:	465a      	mov	r2, fp
 8019448:	4603      	mov	r3, r0
 801944a:	4651      	mov	r1, sl
 801944c:	4620      	mov	r0, r4
 801944e:	e9cd 8500 	strd	r8, r5, [sp]
 8019452:	f7ff fee7 	bl	8019224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019456:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801945a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801945e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019462:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019466:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801946a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801946e:	6823      	ldr	r3, [r4, #0]
 8019470:	9d02      	ldr	r5, [sp, #8]
 8019472:	9005      	str	r0, [sp, #20]
 8019474:	4620      	mov	r0, r4
 8019476:	f8ad 601c 	strh.w	r6, [sp, #28]
 801947a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801947e:	f8cd 9020 	str.w	r9, [sp, #32]
 8019482:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019488:	4798      	blx	r3
 801948a:	4228      	tst	r0, r5
 801948c:	d106      	bne.n	801949c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801948e:	4b07      	ldr	r3, [pc, #28]	; (80194ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8019490:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8019494:	4a06      	ldr	r2, [pc, #24]	; (80194b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8019496:	4807      	ldr	r0, [pc, #28]	; (80194b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019498:	f00e fd4e 	bl	8027f38 <__assert_func>
 801949c:	6860      	ldr	r0, [r4, #4]
 801949e:	a902      	add	r1, sp, #8
 80194a0:	6803      	ldr	r3, [r0, #0]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	4798      	blx	r3
 80194a6:	b00b      	add	sp, #44	; 0x2c
 80194a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194ac:	0802b08e 	.word	0x0802b08e
 80194b0:	0802b3d3 	.word	0x0802b3d3
 80194b4:	0802afda 	.word	0x0802afda

080194b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80194b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80194bc:	461f      	mov	r7, r3
 80194be:	4b0b      	ldr	r3, [pc, #44]	; (80194ec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80194c0:	460d      	mov	r5, r1
 80194c2:	4616      	mov	r6, r2
 80194c4:	f8b3 8000 	ldrh.w	r8, [r3]
 80194c8:	4604      	mov	r4, r0
 80194ca:	f7f7 f8f1 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80194ce:	6803      	ldr	r3, [r0, #0]
 80194d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194d2:	4798      	blx	r3
 80194d4:	463b      	mov	r3, r7
 80194d6:	4632      	mov	r2, r6
 80194d8:	4629      	mov	r1, r5
 80194da:	e9cd 8000 	strd	r8, r0, [sp]
 80194de:	4620      	mov	r0, r4
 80194e0:	f7ff fea0 	bl	8019224 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80194e4:	b002      	add	sp, #8
 80194e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ea:	bf00      	nop
 80194ec:	2000bee4 	.word	0x2000bee4

080194f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80194f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194f4:	4698      	mov	r8, r3
 80194f6:	b088      	sub	sp, #32
 80194f8:	2300      	movs	r3, #0
 80194fa:	4617      	mov	r7, r2
 80194fc:	4604      	mov	r4, r0
 80194fe:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8019502:	9306      	str	r3, [sp, #24]
 8019504:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019508:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801950c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019510:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019514:	e9cd 3100 	strd	r3, r1, [sp]
 8019518:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801951c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019520:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019524:	f88d 301c 	strb.w	r3, [sp, #28]
 8019528:	f7ff fe1a 	bl	8019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801952c:	4642      	mov	r2, r8
 801952e:	4603      	mov	r3, r0
 8019530:	4639      	mov	r1, r7
 8019532:	4620      	mov	r0, r4
 8019534:	f7ff ffc0 	bl	80194b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019538:	4b16      	ldr	r3, [pc, #88]	; (8019594 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801953a:	9003      	str	r0, [sp, #12]
 801953c:	881b      	ldrh	r3, [r3, #0]
 801953e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019542:	f7f7 f8b5 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019546:	6803      	ldr	r3, [r0, #0]
 8019548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801954a:	4798      	blx	r3
 801954c:	f88d 001e 	strb.w	r0, [sp, #30]
 8019550:	f88d 001d 	strb.w	r0, [sp, #29]
 8019554:	b106      	cbz	r6, 8019558 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8019556:	b935      	cbnz	r5, 8019566 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8019558:	4b0f      	ldr	r3, [pc, #60]	; (8019598 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801955a:	f240 11cd 	movw	r1, #461	; 0x1cd
 801955e:	4a0f      	ldr	r2, [pc, #60]	; (801959c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019560:	480f      	ldr	r0, [pc, #60]	; (80195a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8019562:	f00e fce9 	bl	8027f38 <__assert_func>
 8019566:	6823      	ldr	r3, [r4, #0]
 8019568:	4620      	mov	r0, r4
 801956a:	9d00      	ldr	r5, [sp, #0]
 801956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801956e:	4798      	blx	r3
 8019570:	4228      	tst	r0, r5
 8019572:	d104      	bne.n	801957e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8019574:	4b0b      	ldr	r3, [pc, #44]	; (80195a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8019576:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801957a:	4a08      	ldr	r2, [pc, #32]	; (801959c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801957c:	e7f0      	b.n	8019560 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801957e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019580:	4669      	mov	r1, sp
 8019582:	6860      	ldr	r0, [r4, #4]
 8019584:	9306      	str	r3, [sp, #24]
 8019586:	6803      	ldr	r3, [r0, #0]
 8019588:	685b      	ldr	r3, [r3, #4]
 801958a:	4798      	blx	r3
 801958c:	b008      	add	sp, #32
 801958e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019592:	bf00      	nop
 8019594:	2000bee4 	.word	0x2000bee4
 8019598:	0802b056 	.word	0x0802b056
 801959c:	0802b1bc 	.word	0x0802b1bc
 80195a0:	0802afda 	.word	0x0802afda
 80195a4:	0802b08e 	.word	0x0802b08e

080195a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80195a8:	b570      	push	{r4, r5, r6, lr}
 80195aa:	b08a      	sub	sp, #40	; 0x28
 80195ac:	4604      	mov	r4, r0
 80195ae:	466b      	mov	r3, sp
 80195b0:	e883 0006 	stmia.w	r3, {r1, r2}
 80195b4:	4b1f      	ldr	r3, [pc, #124]	; (8019634 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80195b6:	781b      	ldrb	r3, [r3, #0]
 80195b8:	b933      	cbnz	r3, 80195c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80195ba:	4b1f      	ldr	r3, [pc, #124]	; (8019638 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80195bc:	f240 11f9 	movw	r1, #505	; 0x1f9
 80195c0:	4a1e      	ldr	r2, [pc, #120]	; (801963c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80195c2:	481f      	ldr	r0, [pc, #124]	; (8019640 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80195c4:	f00e fcb8 	bl	8027f38 <__assert_func>
 80195c8:	2300      	movs	r3, #0
 80195ca:	f8bd 5000 	ldrh.w	r5, [sp]
 80195ce:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80195d2:	9308      	str	r3, [sp, #32]
 80195d4:	2301      	movs	r3, #1
 80195d6:	9302      	str	r3, [sp, #8]
 80195d8:	6803      	ldr	r3, [r0, #0]
 80195da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195dc:	4798      	blx	r3
 80195de:	4632      	mov	r2, r6
 80195e0:	4629      	mov	r1, r5
 80195e2:	4603      	mov	r3, r0
 80195e4:	4620      	mov	r0, r4
 80195e6:	f7ff ff67 	bl	80194b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80195ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80195ec:	9003      	str	r0, [sp, #12]
 80195ee:	9305      	str	r3, [sp, #20]
 80195f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80195f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80195f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80195fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019600:	4b10      	ldr	r3, [pc, #64]	; (8019644 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019602:	881b      	ldrh	r3, [r3, #0]
 8019604:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019608:	f8ad 301e 	strh.w	r3, [sp, #30]
 801960c:	f7f7 f850 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019610:	6803      	ldr	r3, [r0, #0]
 8019612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019614:	4798      	blx	r3
 8019616:	23ff      	movs	r3, #255	; 0xff
 8019618:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801961c:	a902      	add	r1, sp, #8
 801961e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019622:	6860      	ldr	r0, [r4, #4]
 8019624:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019628:	6803      	ldr	r3, [r0, #0]
 801962a:	685b      	ldr	r3, [r3, #4]
 801962c:	4798      	blx	r3
 801962e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019630:	b00a      	add	sp, #40	; 0x28
 8019632:	bd70      	pop	{r4, r5, r6, pc}
 8019634:	2000bee9 	.word	0x2000bee9
 8019638:	0802af27 	.word	0x0802af27
 801963c:	0802b260 	.word	0x0802b260
 8019640:	0802afda 	.word	0x0802afda
 8019644:	2000bee4 	.word	0x2000bee4

08019648 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801964a:	b08b      	sub	sp, #44	; 0x2c
 801964c:	4604      	mov	r4, r0
 801964e:	466d      	mov	r5, sp
 8019650:	e885 0006 	stmia.w	r5, {r1, r2}
 8019654:	461d      	mov	r5, r3
 8019656:	2300      	movs	r3, #0
 8019658:	f8bd 6000 	ldrh.w	r6, [sp]
 801965c:	9308      	str	r3, [sp, #32]
 801965e:	2301      	movs	r3, #1
 8019660:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019664:	9302      	str	r3, [sp, #8]
 8019666:	6803      	ldr	r3, [r0, #0]
 8019668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801966a:	4798      	blx	r3
 801966c:	463a      	mov	r2, r7
 801966e:	4631      	mov	r1, r6
 8019670:	4603      	mov	r3, r0
 8019672:	4620      	mov	r0, r4
 8019674:	f7ff ff20 	bl	80194b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019678:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801967c:	9003      	str	r0, [sp, #12]
 801967e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019682:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019686:	9505      	str	r5, [sp, #20]
 8019688:	f8ad 301a 	strh.w	r3, [sp, #26]
 801968c:	4b0d      	ldr	r3, [pc, #52]	; (80196c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801968e:	881b      	ldrh	r3, [r3, #0]
 8019690:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019696:	f8ad 301e 	strh.w	r3, [sp, #30]
 801969a:	f7f7 f809 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801969e:	6803      	ldr	r3, [r0, #0]
 80196a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a2:	4798      	blx	r3
 80196a4:	23ff      	movs	r3, #255	; 0xff
 80196a6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80196aa:	a902      	add	r1, sp, #8
 80196ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80196b0:	6860      	ldr	r0, [r4, #4]
 80196b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80196b6:	6803      	ldr	r3, [r0, #0]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	4798      	blx	r3
 80196bc:	4628      	mov	r0, r5
 80196be:	b00b      	add	sp, #44	; 0x2c
 80196c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196c2:	bf00      	nop
 80196c4:	2000bee4 	.word	0x2000bee4

080196c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80196c8:	b570      	push	{r4, r5, r6, lr}
 80196ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80196ce:	4604      	mov	r4, r0
 80196d0:	b19b      	cbz	r3, 80196fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80196d2:	2002      	movs	r0, #2
 80196d4:	f7fc fbe4 	bl	8015ea0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80196d8:	2300      	movs	r3, #0
 80196da:	4620      	mov	r0, r4
 80196dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80196e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80196ea:	f7ff fd39 	bl	8019160 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80196ee:	4601      	mov	r1, r0
 80196f0:	4620      	mov	r0, r4
 80196f2:	462b      	mov	r3, r5
 80196f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196f8:	4718      	bx	r3
 80196fa:	bd70      	pop	{r4, r5, r6, pc}

080196fc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80196fc:	4770      	bx	lr

080196fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80196fe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8019702:	1a13      	subs	r3, r2, r0
 8019704:	4258      	negs	r0, r3
 8019706:	4158      	adcs	r0, r3
 8019708:	4770      	bx	lr

0801970a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801970a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801970e:	1a9b      	subs	r3, r3, r2
 8019710:	2b00      	cmp	r3, #0
 8019712:	bfdc      	itt	le
 8019714:	6882      	ldrle	r2, [r0, #8]
 8019716:	189b      	addle	r3, r3, r2
 8019718:	2b01      	cmp	r3, #1
 801971a:	bfcc      	ite	gt
 801971c:	2000      	movgt	r0, #0
 801971e:	2001      	movle	r0, #1
 8019720:	4770      	bx	lr

08019722 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019722:	6902      	ldr	r2, [r0, #16]
 8019724:	6840      	ldr	r0, [r0, #4]
 8019726:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801972a:	4770      	bx	lr

0801972c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801972c:	6803      	ldr	r3, [r0, #0]
 801972e:	691b      	ldr	r3, [r3, #16]
 8019730:	4718      	bx	r3

08019732 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019732:	4770      	bx	lr

08019734 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019734:	4770      	bx	lr
	...

08019738 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019738:	2301      	movs	r3, #1
 801973a:	b570      	push	{r4, r5, r6, lr}
 801973c:	7203      	strb	r3, [r0, #8]
 801973e:	4604      	mov	r4, r0
 8019740:	6840      	ldr	r0, [r0, #4]
 8019742:	6803      	ldr	r3, [r0, #0]
 8019744:	699b      	ldr	r3, [r3, #24]
 8019746:	4798      	blx	r3
 8019748:	6803      	ldr	r3, [r0, #0]
 801974a:	4605      	mov	r5, r0
 801974c:	2b08      	cmp	r3, #8
 801974e:	d01e      	beq.n	801978e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019750:	d80b      	bhi.n	801976a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019752:	2b02      	cmp	r3, #2
 8019754:	d027      	beq.n	80197a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019756:	2b04      	cmp	r3, #4
 8019758:	d011      	beq.n	801977e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801975a:	2b01      	cmp	r3, #1
 801975c:	d028      	beq.n	80197b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801975e:	4b17      	ldr	r3, [pc, #92]	; (80197bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019760:	218b      	movs	r1, #139	; 0x8b
 8019762:	4a17      	ldr	r2, [pc, #92]	; (80197c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019764:	4817      	ldr	r0, [pc, #92]	; (80197c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019766:	f00e fbe7 	bl	8027f38 <__assert_func>
 801976a:	2b40      	cmp	r3, #64	; 0x40
 801976c:	d020      	beq.n	80197b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801976e:	d801      	bhi.n	8019774 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019770:	2b20      	cmp	r3, #32
 8019772:	e7f3      	b.n	801975c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019774:	2b80      	cmp	r3, #128	; 0x80
 8019776:	d01b      	beq.n	80197b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801977c:	e7ee      	b.n	801975c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801977e:	6823      	ldr	r3, [r4, #0]
 8019780:	7f01      	ldrb	r1, [r0, #28]
 8019782:	4620      	mov	r0, r4
 8019784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019786:	4798      	blx	r3
 8019788:	6823      	ldr	r3, [r4, #0]
 801978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801978c:	e006      	b.n	801979c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	7f01      	ldrb	r1, [r0, #28]
 8019792:	4620      	mov	r0, r4
 8019794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019796:	4798      	blx	r3
 8019798:	6823      	ldr	r3, [r4, #0]
 801979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801979c:	4629      	mov	r1, r5
 801979e:	4620      	mov	r0, r4
 80197a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197a4:	4718      	bx	r3
 80197a6:	6823      	ldr	r3, [r4, #0]
 80197a8:	4620      	mov	r0, r4
 80197aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197ac:	4798      	blx	r3
 80197ae:	e7f3      	b.n	8019798 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80197b0:	6823      	ldr	r3, [r4, #0]
 80197b2:	4620      	mov	r0, r4
 80197b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197b6:	4798      	blx	r3
 80197b8:	e7e6      	b.n	8019788 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80197ba:	bf00      	nop
 80197bc:	0802b4b1 	.word	0x0802b4b1
 80197c0:	0802b5c0 	.word	0x0802b5c0
 80197c4:	0802b4d6 	.word	0x0802b4d6

080197c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80197c8:	b570      	push	{r4, r5, r6, lr}
 80197ca:	4604      	mov	r4, r0
 80197cc:	460e      	mov	r6, r1
 80197ce:	6860      	ldr	r0, [r4, #4]
 80197d0:	6803      	ldr	r3, [r0, #0]
 80197d2:	685b      	ldr	r3, [r3, #4]
 80197d4:	4798      	blx	r3
 80197d6:	2800      	cmp	r0, #0
 80197d8:	d1f9      	bne.n	80197ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80197da:	4d0b      	ldr	r5, [pc, #44]	; (8019808 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80197dc:	6828      	ldr	r0, [r5, #0]
 80197de:	6803      	ldr	r3, [r0, #0]
 80197e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80197e2:	4798      	blx	r3
 80197e4:	f7fc fe10 	bl	8016408 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80197e8:	6860      	ldr	r0, [r4, #4]
 80197ea:	4631      	mov	r1, r6
 80197ec:	6803      	ldr	r3, [r0, #0]
 80197ee:	689b      	ldr	r3, [r3, #8]
 80197f0:	4798      	blx	r3
 80197f2:	6823      	ldr	r3, [r4, #0]
 80197f4:	4620      	mov	r0, r4
 80197f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197f8:	4798      	blx	r3
 80197fa:	6828      	ldr	r0, [r5, #0]
 80197fc:	6803      	ldr	r3, [r0, #0]
 80197fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019804:	4718      	bx	r3
 8019806:	bf00      	nop
 8019808:	2000beec 	.word	0x2000beec

0801980c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801980c:	b508      	push	{r3, lr}
 801980e:	f7fc fddf 	bl	80163d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019816:	f7fc bde9 	b.w	80163ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801981a <_ZN8touchgfx13DMA_Interface5startEv>:
 801981a:	b510      	push	{r4, lr}
 801981c:	4604      	mov	r4, r0
 801981e:	6840      	ldr	r0, [r0, #4]
 8019820:	6803      	ldr	r3, [r0, #0]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	4798      	blx	r3
 8019826:	b948      	cbnz	r0, 801983c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019828:	7a63      	ldrb	r3, [r4, #9]
 801982a:	b13b      	cbz	r3, 801983c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801982c:	7a23      	ldrb	r3, [r4, #8]
 801982e:	b92b      	cbnz	r3, 801983c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019830:	6823      	ldr	r3, [r4, #0]
 8019832:	4620      	mov	r0, r4
 8019834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801983a:	4718      	bx	r3
 801983c:	bd10      	pop	{r4, pc}
	...

08019840 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019840:	b510      	push	{r4, lr}
 8019842:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019846:	1b12      	subs	r2, r2, r4
 8019848:	2a00      	cmp	r2, #0
 801984a:	bfdc      	itt	le
 801984c:	6883      	ldrle	r3, [r0, #8]
 801984e:	18d2      	addle	r2, r2, r3
 8019850:	2a01      	cmp	r2, #1
 8019852:	dd18      	ble.n	8019886 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019854:	6843      	ldr	r3, [r0, #4]
 8019856:	f101 021c 	add.w	r2, r1, #28
 801985a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801985e:	f851 4b04 	ldr.w	r4, [r1], #4
 8019862:	4291      	cmp	r1, r2
 8019864:	f843 4b04 	str.w	r4, [r3], #4
 8019868:	d1f9      	bne.n	801985e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801986a:	880a      	ldrh	r2, [r1, #0]
 801986c:	801a      	strh	r2, [r3, #0]
 801986e:	788a      	ldrb	r2, [r1, #2]
 8019870:	709a      	strb	r2, [r3, #2]
 8019872:	68c3      	ldr	r3, [r0, #12]
 8019874:	6882      	ldr	r2, [r0, #8]
 8019876:	f3bf 8f5b 	dmb	ish
 801987a:	3301      	adds	r3, #1
 801987c:	429a      	cmp	r2, r3
 801987e:	bfd8      	it	le
 8019880:	1a9b      	suble	r3, r3, r2
 8019882:	60c3      	str	r3, [r0, #12]
 8019884:	bd10      	pop	{r4, pc}
 8019886:	4b03      	ldr	r3, [pc, #12]	; (8019894 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019888:	2139      	movs	r1, #57	; 0x39
 801988a:	4a03      	ldr	r2, [pc, #12]	; (8019898 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801988c:	4803      	ldr	r0, [pc, #12]	; (801989c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801988e:	f00e fb53 	bl	8027f38 <__assert_func>
 8019892:	bf00      	nop
 8019894:	0802b4fc 	.word	0x0802b4fc
 8019898:	0802b5f0 	.word	0x0802b5f0
 801989c:	0802b4d6 	.word	0x0802b4d6

080198a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80198a0:	b510      	push	{r4, lr}
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	4604      	mov	r4, r0
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	4798      	blx	r3
 80198aa:	b128      	cbz	r0, 80198b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80198ac:	4b07      	ldr	r3, [pc, #28]	; (80198cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80198ae:	213f      	movs	r1, #63	; 0x3f
 80198b0:	4a07      	ldr	r2, [pc, #28]	; (80198d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80198b2:	4808      	ldr	r0, [pc, #32]	; (80198d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80198b4:	f00e fb40 	bl	8027f38 <__assert_func>
 80198b8:	6923      	ldr	r3, [r4, #16]
 80198ba:	68a2      	ldr	r2, [r4, #8]
 80198bc:	f3bf 8f5b 	dmb	ish
 80198c0:	3301      	adds	r3, #1
 80198c2:	429a      	cmp	r2, r3
 80198c4:	bfd8      	it	le
 80198c6:	1a9b      	suble	r3, r3, r2
 80198c8:	6123      	str	r3, [r4, #16]
 80198ca:	bd10      	pop	{r4, pc}
 80198cc:	0802b51f 	.word	0x0802b51f
 80198d0:	0802b63e 	.word	0x0802b63e
 80198d4:	0802b4d6 	.word	0x0802b4d6

080198d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80198d8:	b570      	push	{r4, r5, r6, lr}
 80198da:	4604      	mov	r4, r0
 80198dc:	6840      	ldr	r0, [r0, #4]
 80198de:	6803      	ldr	r3, [r0, #0]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	4798      	blx	r3
 80198e4:	4605      	mov	r5, r0
 80198e6:	b930      	cbnz	r0, 80198f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80198e8:	7a23      	ldrb	r3, [r4, #8]
 80198ea:	b123      	cbz	r3, 80198f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80198ec:	6860      	ldr	r0, [r4, #4]
 80198ee:	6803      	ldr	r3, [r0, #0]
 80198f0:	695b      	ldr	r3, [r3, #20]
 80198f2:	4798      	blx	r3
 80198f4:	7225      	strb	r5, [r4, #8]
 80198f6:	6860      	ldr	r0, [r4, #4]
 80198f8:	6803      	ldr	r3, [r0, #0]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4798      	blx	r3
 80198fe:	b928      	cbnz	r0, 801990c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019900:	6823      	ldr	r3, [r4, #0]
 8019902:	4620      	mov	r0, r4
 8019904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801990a:	4718      	bx	r3
 801990c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019910:	f7fc bd86 	b.w	8016420 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019914 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019914:	b510      	push	{r4, lr}
 8019916:	6082      	str	r2, [r0, #8]
 8019918:	2200      	movs	r2, #0
 801991a:	4c03      	ldr	r4, [pc, #12]	; (8019928 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801991c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019920:	e9c0 4100 	strd	r4, r1, [r0]
 8019924:	bd10      	pop	{r4, pc}
 8019926:	bf00      	nop
 8019928:	0802b5a4 	.word	0x0802b5a4

0801992c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801992c:	6840      	ldr	r0, [r0, #4]
 801992e:	6803      	ldr	r3, [r0, #0]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	4718      	bx	r3

08019934 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019934:	2001      	movs	r0, #1
 8019936:	4770      	bx	lr

08019938 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801993c:	460d      	mov	r5, r1
 801993e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019942:	b085      	sub	sp, #20
 8019944:	4690      	mov	r8, r2
 8019946:	4411      	add	r1, r2
 8019948:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801994c:	4699      	mov	r9, r3
 801994e:	6803      	ldr	r3, [r0, #0]
 8019950:	60c1      	str	r1, [r0, #12]
 8019952:	4604      	mov	r4, r0
 8019954:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019956:	440a      	add	r2, r1
 8019958:	6102      	str	r2, [r0, #16]
 801995a:	68db      	ldr	r3, [r3, #12]
 801995c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8019960:	4798      	blx	r3
 8019962:	2800      	cmp	r0, #0
 8019964:	d039      	beq.n	80199da <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8019966:	44c8      	add	r8, r9
 8019968:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801996c:	4445      	add	r5, r8
 801996e:	6823      	ldr	r3, [r4, #0]
 8019970:	f10d 020f 	add.w	r2, sp, #15
 8019974:	a903      	add	r1, sp, #12
 8019976:	4620      	mov	r0, r4
 8019978:	9200      	str	r2, [sp, #0]
 801997a:	f10d 020d 	add.w	r2, sp, #13
 801997e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019982:	f10d 030e 	add.w	r3, sp, #14
 8019986:	47c0      	blx	r8
 8019988:	b1f8      	cbz	r0, 80199ca <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801998a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801998e:	7a20      	ldrb	r0, [r4, #8]
 8019990:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019994:	4358      	muls	r0, r3
 8019996:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801999a:	1c43      	adds	r3, r0, #1
 801999c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80199a0:	f817 0b01 	ldrb.w	r0, [r7], #1
 80199a4:	121b      	asrs	r3, r3, #8
 80199a6:	fb10 f003 	smulbb	r0, r0, r3
 80199aa:	b283      	uxth	r3, r0
 80199ac:	1c58      	adds	r0, r3, #1
 80199ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80199b2:	6823      	ldr	r3, [r4, #0]
 80199b4:	1200      	asrs	r0, r0, #8
 80199b6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80199ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80199be:	28ff      	cmp	r0, #255	; 0xff
 80199c0:	d10e      	bne.n	80199e0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80199c2:	9100      	str	r1, [sp, #0]
 80199c4:	4629      	mov	r1, r5
 80199c6:	4620      	mov	r0, r4
 80199c8:	47c0      	blx	r8
 80199ca:	68e3      	ldr	r3, [r4, #12]
 80199cc:	3e01      	subs	r6, #1
 80199ce:	f105 0503 	add.w	r5, r5, #3
 80199d2:	f103 0301 	add.w	r3, r3, #1
 80199d6:	60e3      	str	r3, [r4, #12]
 80199d8:	d1c9      	bne.n	801996e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80199da:	b005      	add	sp, #20
 80199dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199e0:	fa1f fc80 	uxth.w	ip, r0
 80199e4:	43c0      	mvns	r0, r0
 80199e6:	f895 e002 	ldrb.w	lr, [r5, #2]
 80199ea:	fb12 f20c 	smulbb	r2, r2, ip
 80199ee:	b2c0      	uxtb	r0, r0
 80199f0:	fb13 f30c 	smulbb	r3, r3, ip
 80199f4:	fb0e 2200 	mla	r2, lr, r0, r2
 80199f8:	f895 e001 	ldrb.w	lr, [r5, #1]
 80199fc:	fb11 f10c 	smulbb	r1, r1, ip
 8019a00:	fb0e 3300 	mla	r3, lr, r0, r3
 8019a04:	f895 e000 	ldrb.w	lr, [r5]
 8019a08:	b292      	uxth	r2, r2
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	fb0e 1000 	mla	r0, lr, r0, r1
 8019a10:	1c59      	adds	r1, r3, #1
 8019a12:	b280      	uxth	r0, r0
 8019a14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019a18:	1c51      	adds	r1, r2, #1
 8019a1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019a1e:	1c41      	adds	r1, r0, #1
 8019a20:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019a24:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8019a28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019a2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019a30:	9000      	str	r0, [sp, #0]
 8019a32:	e7c7      	b.n	80199c4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08019a34 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8019a34:	f89d 0000 	ldrb.w	r0, [sp]
 8019a38:	704b      	strb	r3, [r1, #1]
 8019a3a:	7008      	strb	r0, [r1, #0]
 8019a3c:	708a      	strb	r2, [r1, #2]
 8019a3e:	4770      	bx	lr

08019a40 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8019a40:	4413      	add	r3, r2
 8019a42:	7dc2      	ldrb	r2, [r0, #23]
 8019a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a48:	4419      	add	r1, r3
 8019a4a:	7a03      	ldrb	r3, [r0, #8]
 8019a4c:	435a      	muls	r2, r3
 8019a4e:	1c53      	adds	r3, r2, #1
 8019a50:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019a54:	121b      	asrs	r3, r3, #8
 8019a56:	2bff      	cmp	r3, #255	; 0xff
 8019a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a5a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8019a5e:	d13e      	bne.n	8019ade <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8019a60:	4427      	add	r7, r4
 8019a62:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019a66:	3103      	adds	r1, #3
 8019a68:	7d86      	ldrb	r6, [r0, #22]
 8019a6a:	2bff      	cmp	r3, #255	; 0xff
 8019a6c:	d10a      	bne.n	8019a84 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8019a6e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8019a72:	7d43      	ldrb	r3, [r0, #21]
 8019a74:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019a78:	7d03      	ldrb	r3, [r0, #20]
 8019a7a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019a7e:	42a7      	cmp	r7, r4
 8019a80:	d1ef      	bne.n	8019a62 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8019a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a84:	b29a      	uxth	r2, r3
 8019a86:	43db      	mvns	r3, r3
 8019a88:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019a8c:	fb16 f602 	smulbb	r6, r6, r2
 8019a90:	b2db      	uxtb	r3, r3
 8019a92:	fb05 6503 	mla	r5, r5, r3, r6
 8019a96:	b2ad      	uxth	r5, r5
 8019a98:	1c6e      	adds	r6, r5, #1
 8019a9a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019a9e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8019aa2:	fb16 f603 	smulbb	r6, r6, r3
 8019aa6:	122d      	asrs	r5, r5, #8
 8019aa8:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019aac:	7d45      	ldrb	r5, [r0, #21]
 8019aae:	fb05 6502 	mla	r5, r5, r2, r6
 8019ab2:	b2ad      	uxth	r5, r5
 8019ab4:	1c6e      	adds	r6, r5, #1
 8019ab6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019aba:	122d      	asrs	r5, r5, #8
 8019abc:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019ac0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019ac4:	7d06      	ldrb	r6, [r0, #20]
 8019ac6:	fb15 f303 	smulbb	r3, r5, r3
 8019aca:	fb06 3202 	mla	r2, r6, r2, r3
 8019ace:	b292      	uxth	r2, r2
 8019ad0:	1c53      	adds	r3, r2, #1
 8019ad2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019ad6:	1212      	asrs	r2, r2, #8
 8019ad8:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019adc:	e7cf      	b.n	8019a7e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8019ade:	b2de      	uxtb	r6, r3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d0ce      	beq.n	8019a82 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8019ae4:	3103      	adds	r1, #3
 8019ae6:	4427      	add	r7, r4
 8019ae8:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019aec:	3103      	adds	r1, #3
 8019aee:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8019af2:	fb02 f306 	mul.w	r3, r2, r6
 8019af6:	42bc      	cmp	r4, r7
 8019af8:	f103 0201 	add.w	r2, r3, #1
 8019afc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019b00:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019b04:	b295      	uxth	r5, r2
 8019b06:	ea6f 0202 	mvn.w	r2, r2
 8019b0a:	b2d3      	uxtb	r3, r2
 8019b0c:	7d82      	ldrb	r2, [r0, #22]
 8019b0e:	fb1c fc03 	smulbb	ip, ip, r3
 8019b12:	fb02 c205 	mla	r2, r2, r5, ip
 8019b16:	b292      	uxth	r2, r2
 8019b18:	f102 0c01 	add.w	ip, r2, #1
 8019b1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019b20:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8019b24:	fb1c fc03 	smulbb	ip, ip, r3
 8019b28:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019b2c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8019b30:	7d42      	ldrb	r2, [r0, #21]
 8019b32:	fb02 c205 	mla	r2, r2, r5, ip
 8019b36:	b292      	uxth	r2, r2
 8019b38:	f102 0c01 	add.w	ip, r2, #1
 8019b3c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019b40:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019b44:	f801 2c05 	strb.w	r2, [r1, #-5]
 8019b48:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8019b4c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019b50:	fb12 f303 	smulbb	r3, r2, r3
 8019b54:	fb0c 3305 	mla	r3, ip, r5, r3
 8019b58:	b29b      	uxth	r3, r3
 8019b5a:	f103 0201 	add.w	r2, r3, #1
 8019b5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b62:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019b66:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019b6a:	d1bd      	bne.n	8019ae8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8019b6c:	e789      	b.n	8019a82 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08019b6e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019b6e:	b510      	push	{r4, lr}
 8019b70:	7d04      	ldrb	r4, [r0, #20]
 8019b72:	700c      	strb	r4, [r1, #0]
 8019b74:	7d41      	ldrb	r1, [r0, #21]
 8019b76:	7011      	strb	r1, [r2, #0]
 8019b78:	7d82      	ldrb	r2, [r0, #22]
 8019b7a:	701a      	strb	r2, [r3, #0]
 8019b7c:	9b02      	ldr	r3, [sp, #8]
 8019b7e:	7dc2      	ldrb	r2, [r0, #23]
 8019b80:	2001      	movs	r0, #1
 8019b82:	701a      	strb	r2, [r3, #0]
 8019b84:	bd10      	pop	{r4, pc}

08019b86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8019b86:	b570      	push	{r4, r5, r6, lr}
 8019b88:	4616      	mov	r6, r2
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	460d      	mov	r5, r1
 8019b8e:	f7f6 fd8f 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019b92:	6803      	ldr	r3, [r0, #0]
 8019b94:	4629      	mov	r1, r5
 8019b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b98:	4798      	blx	r3
 8019b9a:	7520      	strb	r0, [r4, #20]
 8019b9c:	f7f6 fd88 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019ba0:	6803      	ldr	r3, [r0, #0]
 8019ba2:	4629      	mov	r1, r5
 8019ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ba6:	4798      	blx	r3
 8019ba8:	7560      	strb	r0, [r4, #21]
 8019baa:	f7f6 fd81 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019bae:	6803      	ldr	r3, [r0, #0]
 8019bb0:	4629      	mov	r1, r5
 8019bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bb4:	4798      	blx	r3
 8019bb6:	75e6      	strb	r6, [r4, #23]
 8019bb8:	75a0      	strb	r0, [r4, #22]
 8019bba:	bd70      	pop	{r4, r5, r6, pc}

08019bbc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8019bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bbe:	460e      	mov	r6, r1
 8019bc0:	4617      	mov	r7, r2
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	f000 f832 	bl	8019c2c <_ZN8touchgfx15AbstractPainterC1Ev>
 8019bc8:	4b12      	ldr	r3, [pc, #72]	; (8019c14 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8019bca:	6023      	str	r3, [r4, #0]
 8019bcc:	f7f6 fd70 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 8019bd0:	6803      	ldr	r3, [r0, #0]
 8019bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bd4:	4798      	blx	r3
 8019bd6:	1e43      	subs	r3, r0, #1
 8019bd8:	425d      	negs	r5, r3
 8019bda:	415d      	adcs	r5, r3
 8019bdc:	4b0e      	ldr	r3, [pc, #56]	; (8019c18 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019be2:	b130      	cbz	r0, 8019bf2 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8019be4:	6803      	ldr	r3, [r0, #0]
 8019be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019be8:	4798      	blx	r3
 8019bea:	2801      	cmp	r0, #1
 8019bec:	bf08      	it	eq
 8019bee:	f045 0501 	orreq.w	r5, r5, #1
 8019bf2:	b92d      	cbnz	r5, 8019c00 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8019bf4:	4b09      	ldr	r3, [pc, #36]	; (8019c1c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8019bf6:	2129      	movs	r1, #41	; 0x29
 8019bf8:	4a09      	ldr	r2, [pc, #36]	; (8019c20 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8019bfa:	480a      	ldr	r0, [pc, #40]	; (8019c24 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8019bfc:	f00e f99c 	bl	8027f38 <__assert_func>
 8019c00:	4b09      	ldr	r3, [pc, #36]	; (8019c28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8019c02:	4620      	mov	r0, r4
 8019c04:	463a      	mov	r2, r7
 8019c06:	4631      	mov	r1, r6
 8019c08:	6023      	str	r3, [r4, #0]
 8019c0a:	f7ff ffbc 	bl	8019b86 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8019c0e:	4620      	mov	r0, r4
 8019c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c12:	bf00      	nop
 8019c14:	0802b678 	.word	0x0802b678
 8019c18:	2000beec 	.word	0x2000beec
 8019c1c:	0802b690 	.word	0x0802b690
 8019c20:	0802b754 	.word	0x0802b754
 8019c24:	0802b6ee 	.word	0x0802b6ee
 8019c28:	0802b73c 	.word	0x0802b73c

08019c2c <_ZN8touchgfx15AbstractPainterC1Ev>:
 8019c2c:	4a03      	ldr	r2, [pc, #12]	; (8019c3c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8019c2e:	6002      	str	r2, [r0, #0]
 8019c30:	2200      	movs	r2, #0
 8019c32:	6042      	str	r2, [r0, #4]
 8019c34:	22ff      	movs	r2, #255	; 0xff
 8019c36:	7202      	strb	r2, [r0, #8]
 8019c38:	4770      	bx	lr
 8019c3a:	bf00      	nop
 8019c3c:	0802b798 	.word	0x0802b798

08019c40 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8019c40:	4770      	bx	lr

08019c42 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8019c42:	8081      	strh	r1, [r0, #4]
 8019c44:	80c2      	strh	r2, [r0, #6]
 8019c46:	4770      	bx	lr

08019c48 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8019c48:	7201      	strb	r1, [r0, #8]
 8019c4a:	4770      	bx	lr

08019c4c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8019c4c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8019c50:	4770      	bx	lr

08019c52 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8019c52:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8019c56:	4770      	bx	lr

08019c58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019c58:	6281      	str	r1, [r0, #40]	; 0x28
 8019c5a:	4770      	bx	lr

08019c5c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019c5c:	b513      	push	{r0, r1, r4, lr}
 8019c5e:	6803      	ldr	r3, [r0, #0]
 8019c60:	4604      	mov	r4, r0
 8019c62:	4601      	mov	r1, r0
 8019c64:	4668      	mov	r0, sp
 8019c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c68:	4798      	blx	r3
 8019c6a:	6823      	ldr	r3, [r4, #0]
 8019c6c:	4669      	mov	r1, sp
 8019c6e:	4620      	mov	r0, r4
 8019c70:	691b      	ldr	r3, [r3, #16]
 8019c72:	4798      	blx	r3
 8019c74:	b002      	add	sp, #8
 8019c76:	bd10      	pop	{r4, pc}

08019c78 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019c78:	b510      	push	{r4, lr}
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019c80:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019c84:	8002      	strh	r2, [r0, #0]
 8019c86:	8042      	strh	r2, [r0, #2]
 8019c88:	8084      	strh	r4, [r0, #4]
 8019c8a:	80c1      	strh	r1, [r0, #6]
 8019c8c:	bd10      	pop	{r4, pc}

08019c8e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8019c8e:	2200      	movs	r2, #0
 8019c90:	8002      	strh	r2, [r0, #0]
 8019c92:	8042      	strh	r2, [r0, #2]
 8019c94:	8082      	strh	r2, [r0, #4]
 8019c96:	80c2      	strh	r2, [r0, #6]
 8019c98:	4770      	bx	lr
	...

08019c9c <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019c9c:	b508      	push	{r3, lr}
 8019c9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019ca0:	b928      	cbnz	r0, 8019cae <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8019ca2:	4b03      	ldr	r3, [pc, #12]	; (8019cb0 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019ca4:	2127      	movs	r1, #39	; 0x27
 8019ca6:	4a03      	ldr	r2, [pc, #12]	; (8019cb4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019ca8:	4803      	ldr	r0, [pc, #12]	; (8019cb8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019caa:	f00e f945 	bl	8027f38 <__assert_func>
 8019cae:	bd08      	pop	{r3, pc}
 8019cb0:	0802b7a4 	.word	0x0802b7a4
 8019cb4:	0802b888 	.word	0x0802b888
 8019cb8:	0802b7cb 	.word	0x0802b7cb

08019cbc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc0:	b089      	sub	sp, #36	; 0x24
 8019cc2:	4604      	mov	r4, r0
 8019cc4:	6808      	ldr	r0, [r1, #0]
 8019cc6:	f04f 0a00 	mov.w	sl, #0
 8019cca:	6849      	ldr	r1, [r1, #4]
 8019ccc:	ab02      	add	r3, sp, #8
 8019cce:	f04f 0b01 	mov.w	fp, #1
 8019cd2:	c303      	stmia	r3!, {r0, r1}
 8019cd4:	4b3f      	ldr	r3, [pc, #252]	; (8019dd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8019cd6:	4621      	mov	r1, r4
 8019cd8:	a804      	add	r0, sp, #16
 8019cda:	781b      	ldrb	r3, [r3, #0]
 8019cdc:	2b01      	cmp	r3, #1
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ce2:	bf1f      	itttt	ne
 8019ce4:	f10d 0906 	addne.w	r9, sp, #6
 8019ce8:	ae03      	addne	r6, sp, #12
 8019cea:	f10d 050e 	addne.w	r5, sp, #14
 8019cee:	f10d 080a 	addne.w	r8, sp, #10
 8019cf2:	bf01      	itttt	eq
 8019cf4:	f10d 090e 	addeq.w	r9, sp, #14
 8019cf8:	f10d 0606 	addeq.w	r6, sp, #6
 8019cfc:	ad03      	addeq	r5, sp, #12
 8019cfe:	f10d 0808 	addeq.w	r8, sp, #8
 8019d02:	4798      	blx	r3
 8019d04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019d08:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d056      	beq.n	8019dbe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8019d10:	4293      	cmp	r3, r2
 8019d12:	bfa8      	it	ge
 8019d14:	4613      	movge	r3, r2
 8019d16:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019d1a:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8019d1e:	2f00      	cmp	r7, #0
 8019d20:	dd34      	ble.n	8019d8c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8019d22:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019d26:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8019d2a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019d2e:	4484      	add	ip, r0
 8019d30:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019d34:	f9b6 e000 	ldrsh.w	lr, [r6]
 8019d38:	fa0f fc8c 	sxth.w	ip, ip
 8019d3c:	f9b9 1000 	ldrsh.w	r1, [r9]
 8019d40:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019d44:	4562      	cmp	r2, ip
 8019d46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019d4a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019d4e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019d52:	da29      	bge.n	8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d54:	4472      	add	r2, lr
 8019d56:	b212      	sxth	r2, r2
 8019d58:	4290      	cmp	r0, r2
 8019d5a:	da25      	bge.n	8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d5c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019d60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019d64:	4402      	add	r2, r0
 8019d66:	b212      	sxth	r2, r2
 8019d68:	4293      	cmp	r3, r2
 8019d6a:	da1d      	bge.n	8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d6c:	440b      	add	r3, r1
 8019d6e:	b21b      	sxth	r3, r3
 8019d70:	4298      	cmp	r0, r3
 8019d72:	da19      	bge.n	8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d74:	6823      	ldr	r3, [r4, #0]
 8019d76:	a906      	add	r1, sp, #24
 8019d78:	4620      	mov	r0, r4
 8019d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019d7c:	4798      	blx	r3
 8019d7e:	b998      	cbnz	r0, 8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d80:	107f      	asrs	r7, r7, #1
 8019d82:	f04f 0a01 	mov.w	sl, #1
 8019d86:	f8ad 7006 	strh.w	r7, [sp, #6]
 8019d8a:	e7c6      	b.n	8019d1a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8019d8c:	d10c      	bne.n	8019da8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8019d8e:	f8ad b006 	strh.w	fp, [sp, #6]
 8019d92:	f8b8 2000 	ldrh.w	r2, [r8]
 8019d96:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8019d9a:	440a      	add	r2, r1
 8019d9c:	f8a8 2000 	strh.w	r2, [r8]
 8019da0:	882b      	ldrh	r3, [r5, #0]
 8019da2:	1a5b      	subs	r3, r3, r1
 8019da4:	802b      	strh	r3, [r5, #0]
 8019da6:	e7ad      	b.n	8019d04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019da8:	f1ba 0f00 	cmp.w	sl, #0
 8019dac:	d0f1      	beq.n	8019d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019dae:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019db2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019db6:	429a      	cmp	r2, r3
 8019db8:	bf08      	it	eq
 8019dba:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8019dbc:	e7e9      	b.n	8019d92 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8019dbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	bf04      	itt	eq
 8019dc6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8019dca:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8019dcc:	b009      	add	sp, #36	; 0x24
 8019dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dd2:	bf00      	nop
 8019dd4:	2000bee2 	.word	0x2000bee2

08019dd8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019dd8:	2200      	movs	r2, #0
 8019dda:	2101      	movs	r1, #1
 8019ddc:	8082      	strh	r2, [r0, #4]
 8019dde:	80c2      	strh	r2, [r0, #6]
 8019de0:	8102      	strh	r2, [r0, #8]
 8019de2:	8142      	strh	r2, [r0, #10]
 8019de4:	8182      	strh	r2, [r0, #12]
 8019de6:	81c2      	strh	r2, [r0, #14]
 8019de8:	8202      	strh	r2, [r0, #16]
 8019dea:	8242      	strh	r2, [r0, #18]
 8019dec:	61c2      	str	r2, [r0, #28]
 8019dee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019df2:	6282      	str	r2, [r0, #40]	; 0x28
 8019df4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019df8:	4905      	ldr	r1, [pc, #20]	; (8019e10 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8019dfa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019dfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019e02:	6001      	str	r1, [r0, #0]
 8019e04:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019e06:	22ff      	movs	r2, #255	; 0xff
 8019e08:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019e0c:	4770      	bx	lr
 8019e0e:	bf00      	nop
 8019e10:	0802b810 	.word	0x0802b810

08019e14 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8019e14:	4770      	bx	lr

08019e16 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8019e16:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8019e1a:	4602      	mov	r2, r0
 8019e1c:	cb03      	ldmia	r3!, {r0, r1}
 8019e1e:	6010      	str	r0, [r2, #0]
 8019e20:	4610      	mov	r0, r2
 8019e22:	6051      	str	r1, [r2, #4]
 8019e24:	4770      	bx	lr

08019e26 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e2a:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8019e2e:	b395      	cbz	r5, 8019e96 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8019e30:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8019e34:	f1bc 0f00 	cmp.w	ip, #0
 8019e38:	d02d      	beq.n	8019e96 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8019e3a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019e3e:	f9b1 e000 	ldrsh.w	lr, [r1]
 8019e42:	b354      	cbz	r4, 8019e9a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8019e44:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8019e48:	b33f      	cbz	r7, 8019e9a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8019e4a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8019e4e:	4475      	add	r5, lr
 8019e50:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019e54:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019e58:	45f0      	cmp	r8, lr
 8019e5a:	4646      	mov	r6, r8
 8019e5c:	4444      	add	r4, r8
 8019e5e:	bfa8      	it	ge
 8019e60:	4676      	movge	r6, lr
 8019e62:	4293      	cmp	r3, r2
 8019e64:	4619      	mov	r1, r3
 8019e66:	443b      	add	r3, r7
 8019e68:	bfa8      	it	ge
 8019e6a:	4611      	movge	r1, r2
 8019e6c:	4462      	add	r2, ip
 8019e6e:	b22d      	sxth	r5, r5
 8019e70:	8006      	strh	r6, [r0, #0]
 8019e72:	b224      	sxth	r4, r4
 8019e74:	8041      	strh	r1, [r0, #2]
 8019e76:	b212      	sxth	r2, r2
 8019e78:	b21b      	sxth	r3, r3
 8019e7a:	42a5      	cmp	r5, r4
 8019e7c:	bfac      	ite	ge
 8019e7e:	ebc6 0405 	rsbge	r4, r6, r5
 8019e82:	ebc6 0404 	rsblt	r4, r6, r4
 8019e86:	429a      	cmp	r2, r3
 8019e88:	bfac      	ite	ge
 8019e8a:	ebc1 0302 	rsbge	r3, r1, r2
 8019e8e:	ebc1 0303 	rsblt	r3, r1, r3
 8019e92:	8084      	strh	r4, [r0, #4]
 8019e94:	80c3      	strh	r3, [r0, #6]
 8019e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e9a:	f8a0 e000 	strh.w	lr, [r0]
 8019e9e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019ea2:	8043      	strh	r3, [r0, #2]
 8019ea4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019ea8:	8083      	strh	r3, [r0, #4]
 8019eaa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019eae:	e7f1      	b.n	8019e94 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08019eb0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8019eb0:	b507      	push	{r0, r1, r2, lr}
 8019eb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019eb6:	ab01      	add	r3, sp, #4
 8019eb8:	6809      	ldr	r1, [r1, #0]
 8019eba:	6800      	ldr	r0, [r0, #0]
 8019ebc:	f002 fd7d 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 8019ec0:	b003      	add	sp, #12
 8019ec2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019ec8 <_ZN8touchgfx7CWRUtil4sineEi>:
 8019ec8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019ecc:	fb90 f3f2 	sdiv	r3, r0, r2
 8019ed0:	fb03 0312 	mls	r3, r3, r2, r0
 8019ed4:	4413      	add	r3, r2
 8019ed6:	fb93 f0f2 	sdiv	r0, r3, r2
 8019eda:	fb02 3010 	mls	r0, r2, r0, r3
 8019ede:	4b0a      	ldr	r3, [pc, #40]	; (8019f08 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8019ee0:	285a      	cmp	r0, #90	; 0x5a
 8019ee2:	dc02      	bgt.n	8019eea <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8019ee4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8019ee8:	4770      	bx	lr
 8019eea:	28b4      	cmp	r0, #180	; 0xb4
 8019eec:	dc02      	bgt.n	8019ef4 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8019eee:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8019ef2:	e7f7      	b.n	8019ee4 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8019ef4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8019ef8:	bfd4      	ite	le
 8019efa:	38b4      	suble	r0, #180	; 0xb4
 8019efc:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8019f00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8019f04:	4240      	negs	r0, r0
 8019f06:	4770      	bx	lr
 8019f08:	0802b932 	.word	0x0802b932

08019f0c <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8019f0c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8019f10:	f04f 0300 	mov.w	r3, #0
 8019f14:	bf2c      	ite	cs
 8019f16:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8019f1a:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8019f1e:	1899      	adds	r1, r3, r2
 8019f20:	4288      	cmp	r0, r1
 8019f22:	bf24      	itt	cs
 8019f24:	1853      	addcs	r3, r2, r1
 8019f26:	1a40      	subcs	r0, r0, r1
 8019f28:	0892      	lsrs	r2, r2, #2
 8019f2a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8019f2e:	d1f6      	bne.n	8019f1e <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8019f30:	4618      	mov	r0, r3
 8019f32:	4770      	bx	lr

08019f34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8019f34:	2800      	cmp	r0, #0
 8019f36:	b508      	push	{r3, lr}
 8019f38:	da05      	bge.n	8019f46 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8019f3a:	4240      	negs	r0, r0
 8019f3c:	f7ff fffa 	bl	8019f34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019f40:	4240      	negs	r0, r0
 8019f42:	b240      	sxtb	r0, r0
 8019f44:	bd08      	pop	{r3, pc}
 8019f46:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019f4a:	dc11      	bgt.n	8019f70 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8019f4c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8019f50:	dd09      	ble.n	8019f66 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8019f52:	4340      	muls	r0, r0
 8019f54:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8019f58:	f7ff ffd8 	bl	8019f0c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8019f5c:	f7ff ffea 	bl	8019f34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019f60:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019f64:	e7ed      	b.n	8019f42 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8019f66:	3003      	adds	r0, #3
 8019f68:	4b02      	ldr	r3, [pc, #8]	; (8019f74 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8019f6a:	10c0      	asrs	r0, r0, #3
 8019f6c:	5618      	ldrsb	r0, [r3, r0]
 8019f6e:	e7e9      	b.n	8019f44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8019f70:	2000      	movs	r0, #0
 8019f72:	e7e7      	b.n	8019f44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8019f74:	0802b8d6 	.word	0x0802b8d6

08019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8019f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f7a:	460c      	mov	r4, r1
 8019f7c:	1e01      	subs	r1, r0, #0
 8019f7e:	4615      	mov	r5, r2
 8019f80:	db01      	blt.n	8019f86 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 8019f82:	2c00      	cmp	r4, #0
 8019f84:	da06      	bge.n	8019f94 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 8019f86:	4b11      	ldr	r3, [pc, #68]	; (8019fcc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8019f88:	f240 3197 	movw	r1, #919	; 0x397
 8019f8c:	4a10      	ldr	r2, [pc, #64]	; (8019fd0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8019f8e:	4811      	ldr	r0, [pc, #68]	; (8019fd4 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8019f90:	f00d ffd2 	bl	8027f38 <__assert_func>
 8019f94:	428c      	cmp	r4, r1
 8019f96:	dd06      	ble.n	8019fa6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8019f98:	4620      	mov	r0, r4
 8019f9a:	f7ff ffed 	bl	8019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8019f9e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019fa2:	b003      	add	sp, #12
 8019fa4:	bd30      	pop	{r4, r5, pc}
 8019fa6:	4349      	muls	r1, r1
 8019fa8:	fb04 1004 	mla	r0, r4, r4, r1
 8019fac:	f7ff ffae 	bl	8019f0c <_ZN8touchgfx7CWRUtil5isqrtEm>
 8019fb0:	6028      	str	r0, [r5, #0]
 8019fb2:	2800      	cmp	r0, #0
 8019fb4:	d0f5      	beq.n	8019fa2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8019fb6:	4602      	mov	r2, r0
 8019fb8:	ab01      	add	r3, sp, #4
 8019fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	f002 fcfb 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 8019fc4:	f7ff ffb6 	bl	8019f34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8019fc8:	e7eb      	b.n	8019fa2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8019fca:	bf00      	nop
 8019fcc:	0802b9e8 	.word	0x0802b9e8
 8019fd0:	0802bab0 	.word	0x0802bab0
 8019fd4:	0802b9f9 	.word	0x0802b9f9

08019fd8 <_ZN8touchgfx4LineC1Ev>:
 8019fd8:	b510      	push	{r4, lr}
 8019fda:	4604      	mov	r4, r0
 8019fdc:	f7ff fefc 	bl	8019dd8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8019fe0:	4b0c      	ldr	r3, [pc, #48]	; (801a014 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8019fe2:	2220      	movs	r2, #32
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	6023      	str	r3, [r4, #0]
 8019fe8:	2300      	movs	r3, #0
 8019fea:	6422      	str	r2, [r4, #64]	; 0x40
 8019fec:	2212      	movs	r2, #18
 8019fee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8019ff2:	6722      	str	r2, [r4, #112]	; 0x70
 8019ff4:	60a3      	str	r3, [r4, #8]
 8019ff6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019ffa:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8019ffe:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a002:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801a006:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801a00a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801a00e:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801a012:	bd10      	pop	{r4, pc}
 801a014:	0802ba38 	.word	0x0802ba38

0801a018 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a01c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801a01e:	b085      	sub	sp, #20
 801a020:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a022:	4604      	mov	r4, r0
 801a024:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a026:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801a028:	1af6      	subs	r6, r6, r3
 801a02a:	eba5 0502 	sub.w	r5, r5, r2
 801a02e:	f040 809b 	bne.w	801a168 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801a032:	b955      	cbnz	r5, 801a04a <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801a034:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801a038:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a03c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a040:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a044:	b005      	add	sp, #20
 801a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a04a:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801a04e:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801a052:	f04f 0802 	mov.w	r8, #2
 801a056:	463a      	mov	r2, r7
 801a058:	4629      	mov	r1, r5
 801a05a:	ab03      	add	r3, sp, #12
 801a05c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a05e:	f002 fcac 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 801a062:	ab03      	add	r3, sp, #12
 801a064:	463a      	mov	r2, r7
 801a066:	4631      	mov	r1, r6
 801a068:	fb90 f5f8 	sdiv	r5, r0, r8
 801a06c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a06e:	f002 fca4 	bl	801c9ba <_ZN8touchgfx6muldivElllRl>
 801a072:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801a076:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801a07a:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801a07e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801a080:	fb90 f0f8 	sdiv	r0, r0, r8
 801a084:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801a088:	eba8 0305 	sub.w	r3, r8, r5
 801a08c:	f1ba 0f00 	cmp.w	sl, #0
 801a090:	f040 80c3 	bne.w	801a21a <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801a094:	64a3      	str	r3, [r4, #72]	; 0x48
 801a096:	19c3      	adds	r3, r0, r7
 801a098:	65a3      	str	r3, [r4, #88]	; 0x58
 801a09a:	ebae 0305 	sub.w	r3, lr, r5
 801a09e:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a0a0:	eb00 030c 	add.w	r3, r0, ip
 801a0a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a0a6:	eb05 030e 	add.w	r3, r5, lr
 801a0aa:	6523      	str	r3, [r4, #80]	; 0x50
 801a0ac:	ebac 0300 	sub.w	r3, ip, r0
 801a0b0:	6623      	str	r3, [r4, #96]	; 0x60
 801a0b2:	eb05 0308 	add.w	r3, r5, r8
 801a0b6:	6563      	str	r3, [r4, #84]	; 0x54
 801a0b8:	1a3b      	subs	r3, r7, r0
 801a0ba:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801a0bc:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801a0c0:	6663      	str	r3, [r4, #100]	; 0x64
 801a0c2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801a0c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a0c8:	4632      	mov	r2, r6
 801a0ca:	9301      	str	r3, [sp, #4]
 801a0cc:	9100      	str	r1, [sp, #0]
 801a0ce:	f859 bb04 	ldr.w	fp, [r9], #4
 801a0d2:	9b00      	ldr	r3, [sp, #0]
 801a0d4:	455e      	cmp	r6, fp
 801a0d6:	bfa8      	it	ge
 801a0d8:	465e      	movge	r6, fp
 801a0da:	455a      	cmp	r2, fp
 801a0dc:	bfb8      	it	lt
 801a0de:	465a      	movlt	r2, fp
 801a0e0:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801a0e4:	4559      	cmp	r1, fp
 801a0e6:	bfa8      	it	ge
 801a0e8:	4659      	movge	r1, fp
 801a0ea:	455b      	cmp	r3, fp
 801a0ec:	bfb8      	it	lt
 801a0ee:	465b      	movlt	r3, fp
 801a0f0:	9300      	str	r3, [sp, #0]
 801a0f2:	9b01      	ldr	r3, [sp, #4]
 801a0f4:	454b      	cmp	r3, r9
 801a0f6:	d1ea      	bne.n	801a0ce <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801a0f8:	f04f 0b20 	mov.w	fp, #32
 801a0fc:	b209      	sxth	r1, r1
 801a0fe:	b212      	sxth	r2, r2
 801a100:	f1ba 0f01 	cmp.w	sl, #1
 801a104:	b236      	sxth	r6, r6
 801a106:	fb91 f9fb 	sdiv	r9, r1, fp
 801a10a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801a10e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801a112:	fb92 f2fb 	sdiv	r2, r2, fp
 801a116:	fb91 f1fb 	sdiv	r1, r1, fp
 801a11a:	fb96 f6fb 	sdiv	r6, r6, fp
 801a11e:	f102 0201 	add.w	r2, r2, #1
 801a122:	f101 0101 	add.w	r1, r1, #1
 801a126:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801a12a:	eba1 0109 	sub.w	r1, r1, r9
 801a12e:	eba2 0606 	sub.w	r6, r2, r6
 801a132:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801a136:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801a13a:	d183      	bne.n	801a044 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a13c:	eba8 0305 	sub.w	r3, r8, r5
 801a140:	64a3      	str	r3, [r4, #72]	; 0x48
 801a142:	19c3      	adds	r3, r0, r7
 801a144:	65a3      	str	r3, [r4, #88]	; 0x58
 801a146:	ebae 0305 	sub.w	r3, lr, r5
 801a14a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a14c:	eb00 030c 	add.w	r3, r0, ip
 801a150:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a152:	eb05 030e 	add.w	r3, r5, lr
 801a156:	4445      	add	r5, r8
 801a158:	6523      	str	r3, [r4, #80]	; 0x50
 801a15a:	ebac 0300 	sub.w	r3, ip, r0
 801a15e:	1a38      	subs	r0, r7, r0
 801a160:	6565      	str	r5, [r4, #84]	; 0x54
 801a162:	6623      	str	r3, [r4, #96]	; 0x60
 801a164:	6660      	str	r0, [r4, #100]	; 0x64
 801a166:	e76d      	b.n	801a044 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801a168:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801a16c:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801a170:	2d00      	cmp	r5, #0
 801a172:	f43f af6e 	beq.w	801a052 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a176:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801a17a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801a17e:	fb93 f2f7 	sdiv	r2, r3, r7
 801a182:	fb07 3312 	mls	r3, r7, r2, r3
 801a186:	b34b      	cbz	r3, 801a1dc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801a188:	fb97 f2f3 	sdiv	r2, r7, r3
 801a18c:	fb03 7712 	mls	r7, r3, r2, r7
 801a190:	2f00      	cmp	r7, #0
 801a192:	d1f4      	bne.n	801a17e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801a194:	2b01      	cmp	r3, #1
 801a196:	f24b 5204 	movw	r2, #46340	; 0xb504
 801a19a:	bf18      	it	ne
 801a19c:	fb96 f6f3 	sdivne	r6, r6, r3
 801a1a0:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801a1a4:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801a1a8:	bf18      	it	ne
 801a1aa:	fb95 f5f3 	sdivne	r5, r5, r3
 801a1ae:	4291      	cmp	r1, r2
 801a1b0:	dd16      	ble.n	801a1e0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801a1b2:	2d00      	cmp	r5, #0
 801a1b4:	da4d      	bge.n	801a252 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801a1b6:	4b29      	ldr	r3, [pc, #164]	; (801a25c <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801a1b8:	429d      	cmp	r5, r3
 801a1ba:	da27      	bge.n	801a20c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801a1bc:	426a      	negs	r2, r5
 801a1be:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a1c2:	fb91 f1f3 	sdiv	r1, r1, r3
 801a1c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1ca:	4299      	cmp	r1, r3
 801a1cc:	bfcc      	ite	gt
 801a1ce:	1c4b      	addgt	r3, r1, #1
 801a1d0:	3301      	addle	r3, #1
 801a1d2:	fb96 f6f3 	sdiv	r6, r6, r3
 801a1d6:	fb95 f5f3 	sdiv	r5, r5, r3
 801a1da:	e00f      	b.n	801a1fc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801a1dc:	463b      	mov	r3, r7
 801a1de:	e7d9      	b.n	801a194 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801a1e0:	2d00      	cmp	r5, #0
 801a1e2:	fb92 f2f1 	sdiv	r2, r2, r1
 801a1e6:	da13      	bge.n	801a210 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801a1e8:	4269      	negs	r1, r5
 801a1ea:	f24b 5304 	movw	r3, #46340	; 0xb504
 801a1ee:	fb93 f3f1 	sdiv	r3, r3, r1
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	bfa8      	it	ge
 801a1f6:	461a      	movge	r2, r3
 801a1f8:	4356      	muls	r6, r2
 801a1fa:	4355      	muls	r5, r2
 801a1fc:	fb05 f005 	mul.w	r0, r5, r5
 801a200:	fb06 0006 	mla	r0, r6, r6, r0
 801a204:	f7ff fe82 	bl	8019f0c <_ZN8touchgfx7CWRUtil5isqrtEm>
 801a208:	4607      	mov	r7, r0
 801a20a:	e722      	b.n	801a052 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801a20c:	2200      	movs	r2, #0
 801a20e:	e7eb      	b.n	801a1e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801a210:	4629      	mov	r1, r5
 801a212:	e7ea      	b.n	801a1ea <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a214:	4629      	mov	r1, r5
 801a216:	2200      	movs	r2, #0
 801a218:	e7e7      	b.n	801a1ea <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801a21a:	1a1b      	subs	r3, r3, r0
 801a21c:	64a3      	str	r3, [r4, #72]	; 0x48
 801a21e:	19c3      	adds	r3, r0, r7
 801a220:	1b5b      	subs	r3, r3, r5
 801a222:	65a3      	str	r3, [r4, #88]	; 0x58
 801a224:	ebae 0305 	sub.w	r3, lr, r5
 801a228:	4403      	add	r3, r0
 801a22a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801a22c:	eb00 030c 	add.w	r3, r0, ip
 801a230:	442b      	add	r3, r5
 801a232:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a234:	eb05 030e 	add.w	r3, r5, lr
 801a238:	4403      	add	r3, r0
 801a23a:	6523      	str	r3, [r4, #80]	; 0x50
 801a23c:	ebac 0300 	sub.w	r3, ip, r0
 801a240:	442b      	add	r3, r5
 801a242:	6623      	str	r3, [r4, #96]	; 0x60
 801a244:	eb05 0308 	add.w	r3, r5, r8
 801a248:	1a1b      	subs	r3, r3, r0
 801a24a:	6563      	str	r3, [r4, #84]	; 0x54
 801a24c:	1a3b      	subs	r3, r7, r0
 801a24e:	1b5b      	subs	r3, r3, r5
 801a250:	e733      	b.n	801a0ba <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801a252:	4295      	cmp	r5, r2
 801a254:	ddde      	ble.n	801a214 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801a256:	462a      	mov	r2, r5
 801a258:	e7b1      	b.n	801a1be <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801a25a:	bf00      	nop
 801a25c:	ffff4afc 	.word	0xffff4afc

0801a260 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801a260:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a262:	428b      	cmp	r3, r1
 801a264:	d102      	bne.n	801a26c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801a266:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801a268:	4293      	cmp	r3, r2
 801a26a:	d003      	beq.n	801a274 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801a26c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801a270:	f7ff bed2 	b.w	801a018 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a274:	4770      	bx	lr

0801a276 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801a276:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a278:	428b      	cmp	r3, r1
 801a27a:	d102      	bne.n	801a282 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801a27c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801a27e:	4293      	cmp	r3, r2
 801a280:	d003      	beq.n	801a28a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801a282:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801a286:	f7ff bec7 	b.w	801a018 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801a28a:	4770      	bx	lr

0801a28c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801a28c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801a290:	f7ff bec2 	b.w	801a018 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801a294 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801a294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a298:	b0b3      	sub	sp, #204	; 0xcc
 801a29a:	4604      	mov	r4, r0
 801a29c:	460a      	mov	r2, r1
 801a29e:	4601      	mov	r1, r0
 801a2a0:	a804      	add	r0, sp, #16
 801a2a2:	ad32      	add	r5, sp, #200	; 0xc8
 801a2a4:	f00c fa7c 	bl	80267a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801a2ac:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801a2b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a2b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a2b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a2b6:	1ac0      	subs	r0, r0, r3
 801a2b8:	eba1 0102 	sub.w	r1, r1, r2
 801a2bc:	d43c      	bmi.n	801a338 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801a2be:	2900      	cmp	r1, #0
 801a2c0:	462a      	mov	r2, r5
 801a2c2:	db33      	blt.n	801a32c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801a2c4:	f7ff fe58 	bl	8019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a2c8:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801a2cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801a2ce:	a804      	add	r0, sp, #16
 801a2d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a2d2:	f00c fc2e 	bl	8026b32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801a2d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801a2d8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801a2da:	a804      	add	r0, sp, #16
 801a2dc:	f00c fbb8 	bl	8026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a2e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a2e4:	2b01      	cmp	r3, #1
 801a2e6:	d137      	bne.n	801a358 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a2e8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a2ea:	2eb3      	cmp	r6, #179	; 0xb3
 801a2ec:	dc34      	bgt.n	801a358 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801a2ee:	eba7 0906 	sub.w	r9, r7, r6
 801a2f2:	4648      	mov	r0, r9
 801a2f4:	f7ff fde8 	bl	8019ec8 <_ZN8touchgfx7CWRUtil4sineEi>
 801a2f8:	a902      	add	r1, sp, #8
 801a2fa:	9002      	str	r0, [sp, #8]
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	f7ff fdd7 	bl	8019eb0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a304:	eb00 0801 	add.w	r8, r0, r1
 801a308:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a30c:	f7ff fddc 	bl	8019ec8 <_ZN8touchgfx7CWRUtil4sineEi>
 801a310:	a903      	add	r1, sp, #12
 801a312:	9003      	str	r0, [sp, #12]
 801a314:	4628      	mov	r0, r5
 801a316:	f7ff fdcb 	bl	8019eb0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a31a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a31c:	4641      	mov	r1, r8
 801a31e:	1a12      	subs	r2, r2, r0
 801a320:	a804      	add	r0, sp, #16
 801a322:	f00c fb95 	bl	8026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a326:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a328:	441e      	add	r6, r3
 801a32a:	e7de      	b.n	801a2ea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801a32c:	4249      	negs	r1, r1
 801a32e:	f7ff fe23 	bl	8019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a332:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801a336:	e7c9      	b.n	801a2cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a338:	2900      	cmp	r1, #0
 801a33a:	f1c0 0000 	rsb	r0, r0, #0
 801a33e:	462a      	mov	r2, r5
 801a340:	db04      	blt.n	801a34c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801a342:	f7ff fe19 	bl	8019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a346:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801a34a:	e7bf      	b.n	801a2cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a34c:	4249      	negs	r1, r1
 801a34e:	f7ff fe13 	bl	8019f78 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801a352:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801a356:	e7b9      	b.n	801a2cc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801a358:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801a35a:	a804      	add	r0, sp, #16
 801a35c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a35e:	f00c fb77 	bl	8026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a364:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a366:	a804      	add	r0, sp, #16
 801a368:	f00c fb72 	bl	8026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a36c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a370:	2b01      	cmp	r3, #1
 801a372:	d123      	bne.n	801a3bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a374:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801a376:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801a37a:	2e00      	cmp	r6, #0
 801a37c:	dd1e      	ble.n	801a3bc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801a37e:	eb06 0907 	add.w	r9, r6, r7
 801a382:	4648      	mov	r0, r9
 801a384:	f7ff fda0 	bl	8019ec8 <_ZN8touchgfx7CWRUtil4sineEi>
 801a388:	a902      	add	r1, sp, #8
 801a38a:	9002      	str	r0, [sp, #8]
 801a38c:	4628      	mov	r0, r5
 801a38e:	f7ff fd8f 	bl	8019eb0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a392:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a394:	eb00 0801 	add.w	r8, r0, r1
 801a398:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801a39c:	f7ff fd94 	bl	8019ec8 <_ZN8touchgfx7CWRUtil4sineEi>
 801a3a0:	a903      	add	r1, sp, #12
 801a3a2:	9003      	str	r0, [sp, #12]
 801a3a4:	4628      	mov	r0, r5
 801a3a6:	f7ff fd83 	bl	8019eb0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801a3aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a3ac:	4641      	mov	r1, r8
 801a3ae:	1a12      	subs	r2, r2, r0
 801a3b0:	a804      	add	r0, sp, #16
 801a3b2:	f00c fb4d 	bl	8026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801a3b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a3b8:	1af6      	subs	r6, r6, r3
 801a3ba:	e7de      	b.n	801a37a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801a3bc:	a804      	add	r0, sp, #16
 801a3be:	f00c fcbc 	bl	8026d3a <_ZN8touchgfx6Canvas6renderEv>
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	a804      	add	r0, sp, #16
 801a3c6:	f00c fcf9 	bl	8026dbc <_ZN8touchgfx6CanvasD1Ev>
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	b033      	add	sp, #204	; 0xcc
 801a3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a3d2 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801a3d2:	4770      	bx	lr

0801a3d4 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801a3d4:	6803      	ldr	r3, [r0, #0]
 801a3d6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801a3da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a3dc:	4718      	bx	r3

0801a3de <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801a3de:	b510      	push	{r4, lr}
 801a3e0:	4604      	mov	r4, r0
 801a3e2:	212c      	movs	r1, #44	; 0x2c
 801a3e4:	f00d fd7d 	bl	8027ee2 <_ZdlPvj>
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	bd10      	pop	{r4, pc}

0801a3ec <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801a3ec:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a3f0:	2bff      	cmp	r3, #255	; 0xff
 801a3f2:	b510      	push	{r4, lr}
 801a3f4:	d104      	bne.n	801a400 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801a3f6:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801a3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d105      	bne.n	801a40c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801a400:	2300      	movs	r3, #0
 801a402:	8003      	strh	r3, [r0, #0]
 801a404:	8043      	strh	r3, [r0, #2]
 801a406:	8083      	strh	r3, [r0, #4]
 801a408:	80c3      	strh	r3, [r0, #6]
 801a40a:	bd10      	pop	{r4, pc}
 801a40c:	2300      	movs	r3, #0
 801a40e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a412:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801a416:	8003      	strh	r3, [r0, #0]
 801a418:	8043      	strh	r3, [r0, #2]
 801a41a:	8084      	strh	r4, [r0, #4]
 801a41c:	80c2      	strh	r2, [r0, #6]
 801a41e:	e7f4      	b.n	801a40a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801a420 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801a420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a424:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801a428:	b087      	sub	sp, #28
 801a42a:	4604      	mov	r4, r0
 801a42c:	4689      	mov	r9, r1
 801a42e:	b363      	cbz	r3, 801a48a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a430:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a436:	429a      	cmp	r2, r3
 801a438:	d027      	beq.n	801a48a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801a43a:	ad06      	add	r5, sp, #24
 801a43c:	2700      	movs	r7, #0
 801a43e:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801a442:	4628      	mov	r0, r5
 801a444:	f004 f826 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a448:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a44c:	a904      	add	r1, sp, #16
 801a44e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a452:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a456:	4620      	mov	r0, r4
 801a458:	6823      	ldr	r3, [r4, #0]
 801a45a:	9704      	str	r7, [sp, #16]
 801a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a45e:	4798      	blx	r3
 801a460:	f7f6 f926 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801a464:	6803      	ldr	r3, [r0, #0]
 801a466:	4606      	mov	r6, r0
 801a468:	4628      	mov	r0, r5
 801a46a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801a46e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a470:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a474:	f004 f916 	bl	801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a478:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a47c:	4601      	mov	r1, r0
 801a47e:	9701      	str	r7, [sp, #4]
 801a480:	aa04      	add	r2, sp, #16
 801a482:	9300      	str	r3, [sp, #0]
 801a484:	4630      	mov	r0, r6
 801a486:	464b      	mov	r3, r9
 801a488:	47c0      	blx	r8
 801a48a:	b007      	add	sp, #28
 801a48c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a490 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801a490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a492:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a496:	460d      	mov	r5, r1
 801a498:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a49c:	2100      	movs	r1, #0
 801a49e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	6803      	ldr	r3, [r0, #0]
 801a4a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a4aa:	6a1b      	ldr	r3, [r3, #32]
 801a4ac:	9100      	str	r1, [sp, #0]
 801a4ae:	4669      	mov	r1, sp
 801a4b0:	4798      	blx	r3
 801a4b2:	4621      	mov	r1, r4
 801a4b4:	a802      	add	r0, sp, #8
 801a4b6:	f002 f9e6 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a4ba:	f7f6 f8f9 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801a4be:	6803      	ldr	r3, [r0, #0]
 801a4c0:	aa02      	add	r2, sp, #8
 801a4c2:	4669      	mov	r1, sp
 801a4c4:	699e      	ldr	r6, [r3, #24]
 801a4c6:	462b      	mov	r3, r5
 801a4c8:	47b0      	blx	r6
 801a4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	bf08      	it	eq
 801a4d2:	461d      	moveq	r5, r3
 801a4d4:	84e5      	strh	r5, [r4, #38]	; 0x26
 801a4d6:	b004      	add	sp, #16
 801a4d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a4dc <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801a4dc:	2200      	movs	r2, #0
 801a4de:	8082      	strh	r2, [r0, #4]
 801a4e0:	80c2      	strh	r2, [r0, #6]
 801a4e2:	8102      	strh	r2, [r0, #8]
 801a4e4:	8142      	strh	r2, [r0, #10]
 801a4e6:	8182      	strh	r2, [r0, #12]
 801a4e8:	81c2      	strh	r2, [r0, #14]
 801a4ea:	8202      	strh	r2, [r0, #16]
 801a4ec:	8242      	strh	r2, [r0, #18]
 801a4ee:	61c2      	str	r2, [r0, #28]
 801a4f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a4f4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a4f8:	2201      	movs	r2, #1
 801a4fa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801a4fe:	4a04      	ldr	r2, [pc, #16]	; (801a510 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801a500:	6002      	str	r2, [r0, #0]
 801a502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a506:	84c2      	strh	r2, [r0, #38]	; 0x26
 801a508:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801a50c:	4770      	bx	lr
 801a50e:	bf00      	nop
 801a510:	0802bb24 	.word	0x0802bb24

0801a514 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801a514:	b570      	push	{r4, r5, r6, lr}
 801a516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a51a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a51c:	4604      	mov	r4, r0
 801a51e:	429a      	cmp	r2, r3
 801a520:	d00c      	beq.n	801a53c <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801a522:	f850 3b26 	ldr.w	r3, [r0], #38
 801a526:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801a528:	f7f7 fd6e 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801a52c:	2300      	movs	r3, #0
 801a52e:	4601      	mov	r1, r0
 801a530:	46ac      	mov	ip, r5
 801a532:	4620      	mov	r0, r4
 801a534:	461a      	mov	r2, r3
 801a536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a53a:	4760      	bx	ip
 801a53c:	2000      	movs	r0, #0
 801a53e:	bd70      	pop	{r4, r5, r6, pc}

0801a540 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801a540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a546:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a548:	429a      	cmp	r2, r3
 801a54a:	d016      	beq.n	801a57a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801a54c:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801a550:	4620      	mov	r0, r4
 801a552:	f7f5 fc85 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801a556:	6803      	ldr	r3, [r0, #0]
 801a558:	4605      	mov	r5, r0
 801a55a:	4620      	mov	r0, r4
 801a55c:	69de      	ldr	r6, [r3, #28]
 801a55e:	f7f5 fc9b 	bl	800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801a562:	4607      	mov	r7, r0
 801a564:	4620      	mov	r0, r4
 801a566:	f7f7 fd4f 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801a56a:	2300      	movs	r3, #0
 801a56c:	4602      	mov	r2, r0
 801a56e:	4639      	mov	r1, r7
 801a570:	9300      	str	r3, [sp, #0]
 801a572:	4628      	mov	r0, r5
 801a574:	47b0      	blx	r6
 801a576:	b003      	add	sp, #12
 801a578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a57a:	2000      	movs	r0, #0
 801a57c:	e7fb      	b.n	801a576 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801a57e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a57e:	b40e      	push	{r1, r2, r3}
 801a580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a588:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a58a:	b09b      	sub	sp, #108	; 0x6c
 801a58c:	4604      	mov	r4, r0
 801a58e:	429a      	cmp	r2, r3
 801a590:	d03f      	beq.n	801a612 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801a592:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801a596:	ab22      	add	r3, sp, #136	; 0x88
 801a598:	4638      	mov	r0, r7
 801a59a:	9303      	str	r3, [sp, #12]
 801a59c:	f7f5 fc60 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801a5a0:	6803      	ldr	r3, [r0, #0]
 801a5a2:	4680      	mov	r8, r0
 801a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5a6:	4798      	blx	r3
 801a5a8:	4606      	mov	r6, r0
 801a5aa:	b205      	sxth	r5, r0
 801a5ac:	a804      	add	r0, sp, #16
 801a5ae:	f003 f845 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801a5b2:	f8d8 3000 	ldr.w	r3, [r8]
 801a5b6:	4640      	mov	r0, r8
 801a5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a5ba:	4798      	blx	r3
 801a5bc:	9a03      	ldr	r2, [sp, #12]
 801a5be:	4603      	mov	r3, r0
 801a5c0:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a5c2:	a804      	add	r0, sp, #16
 801a5c4:	f003 f857 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a5c8:	4638      	mov	r0, r7
 801a5ca:	f7f5 fc65 	bl	800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801a5ce:	4680      	mov	r8, r0
 801a5d0:	4638      	mov	r0, r7
 801a5d2:	f7f5 fc45 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801a5d6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a5da:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801a5de:	4642      	mov	r2, r8
 801a5e0:	9300      	str	r3, [sp, #0]
 801a5e2:	4603      	mov	r3, r0
 801a5e4:	a804      	add	r0, sp, #16
 801a5e6:	f001 f8a2 	bl	801b72e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801a5ea:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a5ee:	b203      	sxth	r3, r0
 801a5f0:	18a9      	adds	r1, r5, r2
 801a5f2:	2900      	cmp	r1, #0
 801a5f4:	dd0b      	ble.n	801a60e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801a5f6:	3b01      	subs	r3, #1
 801a5f8:	fb13 f302 	smulbb	r3, r3, r2
 801a5fc:	fb16 3300 	smlabb	r3, r6, r0, r3
 801a600:	b21d      	sxth	r5, r3
 801a602:	4628      	mov	r0, r5
 801a604:	b01b      	add	sp, #108	; 0x6c
 801a606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a60a:	b003      	add	sp, #12
 801a60c:	4770      	bx	lr
 801a60e:	2b00      	cmp	r3, #0
 801a610:	dcf7      	bgt.n	801a602 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801a612:	2500      	movs	r5, #0
 801a614:	e7f5      	b.n	801a602 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801a618 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801a618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a620:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801a622:	b08d      	sub	sp, #52	; 0x34
 801a624:	4604      	mov	r4, r0
 801a626:	429e      	cmp	r6, r3
 801a628:	4688      	mov	r8, r1
 801a62a:	d04b      	beq.n	801a6c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801a62c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801a630:	4628      	mov	r0, r5
 801a632:	f7f5 fc15 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801a636:	4607      	mov	r7, r0
 801a638:	2800      	cmp	r0, #0
 801a63a:	d043      	beq.n	801a6c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801a63c:	4628      	mov	r0, r5
 801a63e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801a642:	f7f5 fc41 	bl	800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801a646:	4b21      	ldr	r3, [pc, #132]	; (801a6cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801a648:	4628      	mov	r0, r5
 801a64a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801a654:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801a658:	785e      	ldrb	r6, [r3, #1]
 801a65a:	f7f5 fc1d 	bl	800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801a65e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a660:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801a664:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801a668:	9309      	str	r3, [sp, #36]	; 0x24
 801a66a:	4b19      	ldr	r3, [pc, #100]	; (801a6d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801a66c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801a676:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a67a:	9707      	str	r7, [sp, #28]
 801a67c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801a680:	f88d 6020 	strb.w	r6, [sp, #32]
 801a684:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a688:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801a68c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801a690:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801a694:	b10a      	cbz	r2, 801a69a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801a696:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801a698:	b906      	cbnz	r6, 801a69c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801a69a:	689e      	ldr	r6, [r3, #8]
 801a69c:	af05      	add	r7, sp, #20
 801a69e:	4621      	mov	r1, r4
 801a6a0:	4638      	mov	r0, r7
 801a6a2:	f002 f8f0 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	f7f7 fcae 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	9001      	str	r0, [sp, #4]
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a6b6:	ab07      	add	r3, sp, #28
 801a6b8:	9300      	str	r3, [sp, #0]
 801a6ba:	4643      	mov	r3, r8
 801a6bc:	e897 0006 	ldmia.w	r7, {r1, r2}
 801a6c0:	f000 fe02 	bl	801b2c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a6c4:	b00d      	add	sp, #52	; 0x34
 801a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ca:	bf00      	nop
 801a6cc:	2000bf7c 	.word	0x2000bf7c
 801a6d0:	2000beec 	.word	0x2000beec

0801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801a6d4:	b570      	push	{r4, r5, r6, lr}
 801a6d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a6da:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801a6dc:	4604      	mov	r4, r0
 801a6de:	429a      	cmp	r2, r3
 801a6e0:	d021      	beq.n	801a726 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801a6e2:	6803      	ldr	r3, [r0, #0]
 801a6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6e6:	4798      	blx	r3
 801a6e8:	6823      	ldr	r3, [r4, #0]
 801a6ea:	4605      	mov	r5, r0
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a6f0:	4798      	blx	r3
 801a6f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801a6f6:	4606      	mov	r6, r0
 801a6f8:	b22d      	sxth	r5, r5
 801a6fa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801a6fe:	6823      	ldr	r3, [r4, #0]
 801a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a702:	d109      	bne.n	801a718 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801a704:	4629      	mov	r1, r5
 801a706:	4620      	mov	r0, r4
 801a708:	4798      	blx	r3
 801a70a:	6823      	ldr	r3, [r4, #0]
 801a70c:	4631      	mov	r1, r6
 801a70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a710:	4620      	mov	r0, r4
 801a712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a716:	4718      	bx	r3
 801a718:	4601      	mov	r1, r0
 801a71a:	4620      	mov	r0, r4
 801a71c:	4798      	blx	r3
 801a71e:	6823      	ldr	r3, [r4, #0]
 801a720:	4629      	mov	r1, r5
 801a722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a724:	e7f4      	b.n	801a710 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801a726:	bd70      	pop	{r4, r5, r6, pc}

0801a728 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801a728:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a72c:	84c1      	strh	r1, [r0, #38]	; 0x26
 801a72e:	b922      	cbnz	r2, 801a73a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801a730:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a734:	b90b      	cbnz	r3, 801a73a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801a736:	f7ff bfcd 	b.w	801a6d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a73a:	4770      	bx	lr

0801a73c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a73c:	2300      	movs	r3, #0
 801a73e:	8003      	strh	r3, [r0, #0]
 801a740:	8043      	strh	r3, [r0, #2]
 801a742:	8083      	strh	r3, [r0, #4]
 801a744:	80c3      	strh	r3, [r0, #6]
 801a746:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801a74a:	b91b      	cbnz	r3, 801a754 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801a74c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a750:	2bff      	cmp	r3, #255	; 0xff
 801a752:	d103      	bne.n	801a75c <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801a754:	890b      	ldrh	r3, [r1, #8]
 801a756:	8083      	strh	r3, [r0, #4]
 801a758:	894b      	ldrh	r3, [r1, #10]
 801a75a:	80c3      	strh	r3, [r0, #6]
 801a75c:	4770      	bx	lr
	...

0801a760 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a762:	4604      	mov	r4, r0
 801a764:	466b      	mov	r3, sp
 801a766:	6808      	ldr	r0, [r1, #0]
 801a768:	6849      	ldr	r1, [r1, #4]
 801a76a:	c303      	stmia	r3!, {r0, r1}
 801a76c:	6823      	ldr	r3, [r4, #0]
 801a76e:	4669      	mov	r1, sp
 801a770:	4620      	mov	r0, r4
 801a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a774:	4798      	blx	r3
 801a776:	4b08      	ldr	r3, [pc, #32]	; (801a798 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a77e:	b10a      	cbz	r2, 801a784 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a780:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a782:	b900      	cbnz	r0, 801a786 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a784:	6898      	ldr	r0, [r3, #8]
 801a786:	6803      	ldr	r3, [r0, #0]
 801a788:	4669      	mov	r1, sp
 801a78a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a78c:	69dd      	ldr	r5, [r3, #28]
 801a78e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a792:	47a8      	blx	r5
 801a794:	b003      	add	sp, #12
 801a796:	bd30      	pop	{r4, r5, pc}
 801a798:	2000beec 	.word	0x2000beec

0801a79c <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801a79c:	b570      	push	{r4, r5, r6, lr}
 801a79e:	6803      	ldr	r3, [r0, #0]
 801a7a0:	4604      	mov	r4, r0
 801a7a2:	4615      	mov	r5, r2
 801a7a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a7a6:	4798      	blx	r3
 801a7a8:	6823      	ldr	r3, [r4, #0]
 801a7aa:	4629      	mov	r1, r5
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7b4:	4718      	bx	r3

0801a7b6 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801a7b6:	b570      	push	{r4, r5, r6, lr}
 801a7b8:	6803      	ldr	r3, [r0, #0]
 801a7ba:	4604      	mov	r4, r0
 801a7bc:	460e      	mov	r6, r1
 801a7be:	4615      	mov	r5, r2
 801a7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a7c2:	4798      	blx	r3
 801a7c4:	8030      	strh	r0, [r6, #0]
 801a7c6:	6823      	ldr	r3, [r4, #0]
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a7cc:	4798      	blx	r3
 801a7ce:	8028      	strh	r0, [r5, #0]
 801a7d0:	bd70      	pop	{r4, r5, r6, pc}

0801a7d2 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801a7d2:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801a7d6:	4770      	bx	lr

0801a7d8 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801a7d8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801a7dc:	4770      	bx	lr

0801a7de <_ZN8touchgfx10TiledImageD1Ev>:
 801a7de:	4770      	bx	lr

0801a7e0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801a7e0:	b510      	push	{r4, lr}
 801a7e2:	4604      	mov	r4, r0
 801a7e4:	f000 facc 	bl	801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a7e8:	6823      	ldr	r3, [r4, #0]
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801a7f0:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801a7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a7f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7fa:	4718      	bx	r3

0801a7fc <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7fe:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801a802:	4605      	mov	r5, r0
 801a804:	8541      	strh	r1, [r0, #42]	; 0x2a
 801a806:	4630      	mov	r0, r6
 801a808:	f003 fe44 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a80c:	b1a0      	cbz	r0, 801a838 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801a80e:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801a812:	4630      	mov	r0, r6
 801a814:	f003 fe3e 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a818:	fb97 f4f0 	sdiv	r4, r7, r0
 801a81c:	fb04 7410 	mls	r4, r4, r0, r7
 801a820:	4630      	mov	r0, r6
 801a822:	f003 fe37 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a826:	4404      	add	r4, r0
 801a828:	4630      	mov	r0, r6
 801a82a:	f003 fe33 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a82e:	fb94 f3f0 	sdiv	r3, r4, r0
 801a832:	fb03 4010 	mls	r0, r3, r0, r4
 801a836:	8568      	strh	r0, [r5, #42]	; 0x2a
 801a838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a83a <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801a83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a83c:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801a840:	4605      	mov	r5, r0
 801a842:	8581      	strh	r1, [r0, #44]	; 0x2c
 801a844:	4630      	mov	r0, r6
 801a846:	f003 fe5f 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a84a:	b1a0      	cbz	r0, 801a876 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801a84c:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801a850:	4630      	mov	r0, r6
 801a852:	f003 fe59 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a856:	fb97 f4f0 	sdiv	r4, r7, r0
 801a85a:	fb04 7410 	mls	r4, r4, r0, r7
 801a85e:	4630      	mov	r0, r6
 801a860:	f003 fe52 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a864:	4404      	add	r4, r0
 801a866:	4630      	mov	r0, r6
 801a868:	f003 fe4e 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a86c:	fb94 f3f0 	sdiv	r3, r4, r0
 801a870:	fb03 4010 	mls	r0, r3, r0, r4
 801a874:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a878 <_ZN8touchgfx10TiledImageD0Ev>:
 801a878:	b510      	push	{r4, lr}
 801a87a:	4604      	mov	r4, r0
 801a87c:	2130      	movs	r1, #48	; 0x30
 801a87e:	f00d fb30 	bl	8027ee2 <_ZdlPvj>
 801a882:	4620      	mov	r0, r4
 801a884:	bd10      	pop	{r4, pc}
	...

0801a888 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a88c:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801a890:	b093      	sub	sp, #76	; 0x4c
 801a892:	4607      	mov	r7, r0
 801a894:	460e      	mov	r6, r1
 801a896:	4658      	mov	r0, fp
 801a898:	f003 fdfc 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a89c:	4605      	mov	r5, r0
 801a89e:	4658      	mov	r0, fp
 801a8a0:	f003 fe32 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a8a4:	4680      	mov	r8, r0
 801a8a6:	2d00      	cmp	r5, #0
 801a8a8:	f000 80c5 	beq.w	801aa36 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	f000 80c2 	beq.w	801aa36 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	a90e      	add	r1, sp, #56	; 0x38
 801a8b6:	4638      	mov	r0, r7
 801a8b8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8c0:	4798      	blx	r3
 801a8c2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801a8c6:	f9b6 3000 	ldrsh.w	r3, [r6]
 801a8ca:	88b1      	ldrh	r1, [r6, #4]
 801a8cc:	189c      	adds	r4, r3, r2
 801a8ce:	440b      	add	r3, r1
 801a8d0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801a8d4:	fa02 f383 	sxtah	r3, r2, r3
 801a8d8:	3b01      	subs	r3, #1
 801a8da:	fb93 f3f5 	sdiv	r3, r3, r5
 801a8de:	fb94 f4f5 	sdiv	r4, r4, r5
 801a8e2:	fb13 f305 	smulbb	r3, r3, r5
 801a8e6:	fb14 f405 	smulbb	r4, r4, r5
 801a8ea:	b21b      	sxth	r3, r3
 801a8ec:	1aa4      	subs	r4, r4, r2
 801a8ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801a8f0:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a8f4:	b2a4      	uxth	r4, r4
 801a8f6:	185a      	adds	r2, r3, r1
 801a8f8:	fb92 f2f8 	sdiv	r2, r2, r8
 801a8fc:	fb12 f208 	smulbb	r2, r2, r8
 801a900:	1a52      	subs	r2, r2, r1
 801a902:	b212      	sxth	r2, r2
 801a904:	920c      	str	r2, [sp, #48]	; 0x30
 801a906:	88f2      	ldrh	r2, [r6, #6]
 801a908:	4413      	add	r3, r2
 801a90a:	fa01 f383 	sxtah	r3, r1, r3
 801a90e:	3b01      	subs	r3, #1
 801a910:	fb93 f3f8 	sdiv	r3, r3, r8
 801a914:	fb13 f308 	smulbb	r3, r3, r8
 801a918:	b21b      	sxth	r3, r3
 801a91a:	930d      	str	r3, [sp, #52]	; 0x34
 801a91c:	1963      	adds	r3, r4, r5
 801a91e:	fa1f fa83 	uxth.w	sl, r3
 801a922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a924:	b223      	sxth	r3, r4
 801a926:	4293      	cmp	r3, r2
 801a928:	9305      	str	r3, [sp, #20]
 801a92a:	f300 8084 	bgt.w	801aa36 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801a92e:	fa0f f38a 	sxth.w	r3, sl
 801a932:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a936:	9309      	str	r3, [sp, #36]	; 0x24
 801a938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a93a:	4599      	cmp	r9, r3
 801a93c:	dd04      	ble.n	801a948 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801a93e:	442c      	add	r4, r5
 801a940:	eb05 030a 	add.w	r3, r5, sl
 801a944:	b2a4      	uxth	r4, r4
 801a946:	e7ea      	b.n	801a91e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801a948:	f9b6 c000 	ldrsh.w	ip, [r6]
 801a94c:	88b2      	ldrh	r2, [r6, #4]
 801a94e:	4462      	add	r2, ip
 801a950:	b292      	uxth	r2, r2
 801a952:	b213      	sxth	r3, r2
 801a954:	9308      	str	r3, [sp, #32]
 801a956:	fa1f f389 	uxth.w	r3, r9
 801a95a:	eb08 0103 	add.w	r1, r8, r3
 801a95e:	9307      	str	r3, [sp, #28]
 801a960:	b289      	uxth	r1, r1
 801a962:	b208      	sxth	r0, r1
 801a964:	9006      	str	r0, [sp, #24]
 801a966:	9805      	ldr	r0, [sp, #20]
 801a968:	4603      	mov	r3, r0
 801a96a:	9808      	ldr	r0, [sp, #32]
 801a96c:	4283      	cmp	r3, r0
 801a96e:	da5e      	bge.n	801aa2e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801a970:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a972:	4584      	cmp	ip, r0
 801a974:	da5b      	bge.n	801aa2e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801a976:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801a97a:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801a97e:	4486      	add	lr, r0
 801a980:	fa1f fe8e 	uxth.w	lr, lr
 801a984:	fa0f f38e 	sxth.w	r3, lr
 801a988:	4599      	cmp	r9, r3
 801a98a:	930a      	str	r3, [sp, #40]	; 0x28
 801a98c:	da4f      	bge.n	801aa2e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801a98e:	9b06      	ldr	r3, [sp, #24]
 801a990:	4298      	cmp	r0, r3
 801a992:	da4c      	bge.n	801aa2e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801a994:	9b05      	ldr	r3, [sp, #20]
 801a996:	459c      	cmp	ip, r3
 801a998:	bfb8      	it	lt
 801a99a:	469c      	movlt	ip, r3
 801a99c:	4548      	cmp	r0, r9
 801a99e:	9b08      	ldr	r3, [sp, #32]
 801a9a0:	bfb8      	it	lt
 801a9a2:	4648      	movlt	r0, r9
 801a9a4:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801a9a8:	4699      	mov	r9, r3
 801a9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9ac:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801a9b0:	4599      	cmp	r9, r3
 801a9b2:	bfc8      	it	gt
 801a9b4:	4652      	movgt	r2, sl
 801a9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9b8:	eba2 020c 	sub.w	r2, r2, ip
 801a9bc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801a9c0:	9a06      	ldr	r2, [sp, #24]
 801a9c2:	4293      	cmp	r3, r2
 801a9c4:	bfd8      	it	le
 801a9c6:	4671      	movle	r1, lr
 801a9c8:	1a09      	subs	r1, r1, r0
 801a9ca:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801a9ce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a9d2:	9b07      	ldr	r3, [sp, #28]
 801a9d4:	1b12      	subs	r2, r2, r4
 801a9d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a9da:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a9de:	1ad2      	subs	r2, r2, r3
 801a9e0:	4b16      	ldr	r3, [pc, #88]	; (801aa3c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801a9e2:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a9e6:	681a      	ldr	r2, [r3, #0]
 801a9e8:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801a9ec:	b109      	cbz	r1, 801a9f2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801a9ee:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801a9f0:	b900      	cbnz	r0, 801a9f4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801a9f2:	6890      	ldr	r0, [r2, #8]
 801a9f4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a9f8:	f04f 0c01 	mov.w	ip, #1
 801a9fc:	9b07      	ldr	r3, [sp, #28]
 801a9fe:	6801      	ldr	r1, [r0, #0]
 801aa00:	4413      	add	r3, r2
 801aa02:	f8cd c008 	str.w	ip, [sp, #8]
 801aa06:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801aa0a:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801aa0e:	b21b      	sxth	r3, r3
 801aa10:	4422      	add	r2, r4
 801aa12:	f8cd c004 	str.w	ip, [sp, #4]
 801aa16:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801aa1a:	b212      	sxth	r2, r2
 801aa1c:	f8cd c000 	str.w	ip, [sp]
 801aa20:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801aa24:	4659      	mov	r1, fp
 801aa26:	47c8      	blx	r9
 801aa28:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801aa2c:	e784      	b.n	801a938 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801aa2e:	2300      	movs	r3, #0
 801aa30:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801aa34:	e7cb      	b.n	801a9ce <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801aa36:	b013      	add	sp, #76	; 0x4c
 801aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa3c:	2000beec 	.word	0x2000beec

0801aa40 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801aa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801aa48:	4606      	mov	r6, r0
 801aa4a:	4689      	mov	r9, r1
 801aa4c:	2bff      	cmp	r3, #255	; 0xff
 801aa4e:	d008      	beq.n	801aa62 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801aa50:	2300      	movs	r3, #0
 801aa52:	8003      	strh	r3, [r0, #0]
 801aa54:	8043      	strh	r3, [r0, #2]
 801aa56:	8083      	strh	r3, [r0, #4]
 801aa58:	4630      	mov	r0, r6
 801aa5a:	80f3      	strh	r3, [r6, #6]
 801aa5c:	b003      	add	sp, #12
 801aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa62:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801aa66:	4668      	mov	r0, sp
 801aa68:	4659      	mov	r1, fp
 801aa6a:	f003 fd87 	bl	801e57c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801aa6e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801aa72:	4658      	mov	r0, fp
 801aa74:	f9bd 7000 	ldrsh.w	r7, [sp]
 801aa78:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801aa7c:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801aa80:	f003 fd08 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aa84:	4284      	cmp	r4, r0
 801aa86:	d10d      	bne.n	801aaa4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801aa88:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801aa8c:	4658      	mov	r0, fp
 801aa8e:	f003 fd3b 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aa92:	4580      	cmp	r8, r0
 801aa94:	d12a      	bne.n	801aaec <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801aa96:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801aa9a:	8037      	strh	r7, [r6, #0]
 801aa9c:	f8a6 a002 	strh.w	sl, [r6, #2]
 801aaa0:	80b5      	strh	r5, [r6, #4]
 801aaa2:	e7d9      	b.n	801aa58 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801aaa4:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801aaa8:	4658      	mov	r0, fp
 801aaaa:	f003 fcf3 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aaae:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801aab2:	1b7f      	subs	r7, r7, r5
 801aab4:	b2a3      	uxth	r3, r4
 801aab6:	b2bd      	uxth	r5, r7
 801aab8:	b22f      	sxth	r7, r5
 801aaba:	4428      	add	r0, r5
 801aabc:	2f00      	cmp	r7, #0
 801aabe:	b280      	uxth	r0, r0
 801aac0:	bfb8      	it	lt
 801aac2:	18ed      	addlt	r5, r5, r3
 801aac4:	4403      	add	r3, r0
 801aac6:	bfac      	ite	ge
 801aac8:	4625      	movge	r5, r4
 801aaca:	2700      	movlt	r7, #0
 801aacc:	b29b      	uxth	r3, r3
 801aace:	bfb8      	it	lt
 801aad0:	b22d      	sxthlt	r5, r5
 801aad2:	b219      	sxth	r1, r3
 801aad4:	bfb8      	it	lt
 801aad6:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801aada:	4291      	cmp	r1, r2
 801aadc:	bfc4      	itt	gt
 801aade:	1a9c      	subgt	r4, r3, r2
 801aae0:	b224      	sxthgt	r4, r4
 801aae2:	42ac      	cmp	r4, r5
 801aae4:	bfc4      	itt	gt
 801aae6:	b207      	sxthgt	r7, r0
 801aae8:	4625      	movgt	r5, r4
 801aaea:	e7cf      	b.n	801aa8c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801aaec:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801aaf0:	4658      	mov	r0, fp
 801aaf2:	f003 fd09 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aaf6:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801aafa:	ebaa 0404 	sub.w	r4, sl, r4
 801aafe:	fa1f f288 	uxth.w	r2, r8
 801ab02:	b2a4      	uxth	r4, r4
 801ab04:	fa0f fa84 	sxth.w	sl, r4
 801ab08:	4420      	add	r0, r4
 801ab0a:	f1ba 0f00 	cmp.w	sl, #0
 801ab0e:	b280      	uxth	r0, r0
 801ab10:	bfb8      	it	lt
 801ab12:	18a3      	addlt	r3, r4, r2
 801ab14:	4402      	add	r2, r0
 801ab16:	bfac      	ite	ge
 801ab18:	4643      	movge	r3, r8
 801ab1a:	f04f 0a00 	movlt.w	sl, #0
 801ab1e:	b292      	uxth	r2, r2
 801ab20:	bfb8      	it	lt
 801ab22:	b21b      	sxthlt	r3, r3
 801ab24:	b214      	sxth	r4, r2
 801ab26:	bfb8      	it	lt
 801ab28:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ab2c:	428c      	cmp	r4, r1
 801ab2e:	bfc4      	itt	gt
 801ab30:	eba2 0801 	subgt.w	r8, r2, r1
 801ab34:	fa0f f888 	sxthgt.w	r8, r8
 801ab38:	4543      	cmp	r3, r8
 801ab3a:	bfbc      	itt	lt
 801ab3c:	fa0f fa80 	sxthlt.w	sl, r0
 801ab40:	4643      	movlt	r3, r8
 801ab42:	e7aa      	b.n	801aa9a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801ab44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801ab44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ab48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab4c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ab4e:	4604      	mov	r4, r0
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d018      	beq.n	801ab86 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 801ab54:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f7f5 f981 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801ab5e:	6803      	ldr	r3, [r0, #0]
 801ab60:	4606      	mov	r6, r0
 801ab62:	4628      	mov	r0, r5
 801ab64:	69df      	ldr	r7, [r3, #28]
 801ab66:	f7f5 f997 	bl	800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ab6a:	4680      	mov	r8, r0
 801ab6c:	4628      	mov	r0, r5
 801ab6e:	f7f7 fa4b 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801ab72:	2300      	movs	r3, #0
 801ab74:	4602      	mov	r2, r0
 801ab76:	4641      	mov	r1, r8
 801ab78:	9300      	str	r3, [sp, #0]
 801ab7a:	4630      	mov	r0, r6
 801ab7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ab7e:	47b8      	blx	r7
 801ab80:	b002      	add	sp, #8
 801ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab86:	2000      	movs	r0, #0
 801ab88:	e7fa      	b.n	801ab80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801ab8a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801ab8a:	b570      	push	{r4, r5, r6, lr}
 801ab8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab90:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ab92:	4604      	mov	r4, r0
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d00c      	beq.n	801abb2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801ab98:	f850 3b26 	ldr.w	r3, [r0], #38
 801ab9c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801ab9e:	f7f7 fa33 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801aba2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aba4:	4601      	mov	r1, r0
 801aba6:	46ac      	mov	ip, r5
 801aba8:	4620      	mov	r0, r4
 801abaa:	2300      	movs	r3, #0
 801abac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abb0:	4760      	bx	ip
 801abb2:	2000      	movs	r0, #0
 801abb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801abb8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abc0:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801abc2:	b08d      	sub	sp, #52	; 0x34
 801abc4:	4604      	mov	r4, r0
 801abc6:	429e      	cmp	r6, r3
 801abc8:	460f      	mov	r7, r1
 801abca:	d048      	beq.n	801ac5e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801abcc:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801abd0:	4628      	mov	r0, r5
 801abd2:	f7f5 f945 	bl	800fe60 <_ZNK8touchgfx9TypedText7getFontEv>
 801abd6:	4680      	mov	r8, r0
 801abd8:	2800      	cmp	r0, #0
 801abda:	d040      	beq.n	801ac5e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801abdc:	4628      	mov	r0, r5
 801abde:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801abe2:	f7f5 f971 	bl	800fec8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801abe6:	4b1f      	ldr	r3, [pc, #124]	; (801ac64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801abe8:	4628      	mov	r0, r5
 801abea:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801abf4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801abf8:	785e      	ldrb	r6, [r3, #1]
 801abfa:	f7f5 f94d 	bl	800fe98 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801abfe:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801ac02:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801ac06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ac08:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801ac0c:	f88d 6020 	strb.w	r6, [sp, #32]
 801ac10:	ae05      	add	r6, sp, #20
 801ac12:	9309      	str	r3, [sp, #36]	; 0x24
 801ac14:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801ac18:	f8cd 801c 	str.w	r8, [sp, #28]
 801ac1c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801ac20:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801ac24:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801ac28:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801ac2c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ac30:	f7f5 fd3e 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801ac34:	4621      	mov	r1, r4
 801ac36:	4680      	mov	r8, r0
 801ac38:	4630      	mov	r0, r6
 801ac3a:	f001 fe24 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ac3e:	4628      	mov	r0, r5
 801ac40:	f7f7 f9e2 	bl	8012008 <_ZNK8touchgfx9TypedText7getTextEv>
 801ac44:	2300      	movs	r3, #0
 801ac46:	9303      	str	r3, [sp, #12]
 801ac48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac4a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801ac4e:	ab07      	add	r3, sp, #28
 801ac50:	4640      	mov	r0, r8
 801ac52:	9300      	str	r3, [sp, #0]
 801ac54:	463b      	mov	r3, r7
 801ac56:	e896 0006 	ldmia.w	r6, {r1, r2}
 801ac5a:	f000 fb35 	bl	801b2c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ac5e:	b00d      	add	sp, #52	; 0x34
 801ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac64:	2000bf7c 	.word	0x2000bf7c

0801ac68 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801ac68:	2300      	movs	r3, #0
 801ac6a:	8083      	strh	r3, [r0, #4]
 801ac6c:	80c3      	strh	r3, [r0, #6]
 801ac6e:	8003      	strh	r3, [r0, #0]
 801ac70:	8043      	strh	r3, [r0, #2]
 801ac72:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801ac76:	2bff      	cmp	r3, #255	; 0xff
 801ac78:	bf01      	itttt	eq
 801ac7a:	890b      	ldrheq	r3, [r1, #8]
 801ac7c:	8083      	strheq	r3, [r0, #4]
 801ac7e:	894b      	ldrheq	r3, [r1, #10]
 801ac80:	80c3      	strheq	r3, [r0, #6]
 801ac82:	4770      	bx	lr

0801ac84 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801ac84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac88:	4604      	mov	r4, r0
 801ac8a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801ac8e:	460e      	mov	r6, r1
 801ac90:	b08c      	sub	sp, #48	; 0x30
 801ac92:	8962      	ldrh	r2, [r4, #10]
 801ac94:	b218      	sxth	r0, r3
 801ac96:	8921      	ldrh	r1, [r4, #8]
 801ac98:	005b      	lsls	r3, r3, #1
 801ac9a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ac9e:	1ac9      	subs	r1, r1, r3
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aca6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801acaa:	6830      	ldr	r0, [r6, #0]
 801acac:	6871      	ldr	r1, [r6, #4]
 801acae:	f8ad 3016 	strh.w	r3, [sp, #22]
 801acb2:	466b      	mov	r3, sp
 801acb4:	c303      	stmia	r3!, {r0, r1}
 801acb6:	a904      	add	r1, sp, #16
 801acb8:	4668      	mov	r0, sp
 801acba:	f7fd fe75 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801acbe:	6823      	ldr	r3, [r4, #0]
 801acc0:	4669      	mov	r1, sp
 801acc2:	4620      	mov	r0, r4
 801acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acc6:	4798      	blx	r3
 801acc8:	f7f5 fcf2 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801accc:	6803      	ldr	r3, [r0, #0]
 801acce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801acd0:	4669      	mov	r1, sp
 801acd2:	69dd      	ldr	r5, [r3, #28]
 801acd4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801acd8:	47a8      	blx	r5
 801acda:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801acde:	2a00      	cmp	r2, #0
 801ace0:	d04b      	beq.n	801ad7a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801ace2:	b211      	sxth	r1, r2
 801ace4:	8963      	ldrh	r3, [r4, #10]
 801ace6:	b292      	uxth	r2, r2
 801ace8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801acec:	2500      	movs	r5, #0
 801acee:	f8ad 1016 	strh.w	r1, [sp, #22]
 801acf2:	1a9f      	subs	r7, r3, r2
 801acf4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801acf8:	1a82      	subs	r2, r0, r2
 801acfa:	9504      	str	r5, [sp, #16]
 801acfc:	b21b      	sxth	r3, r3
 801acfe:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ad02:	af02      	add	r7, sp, #8
 801ad04:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ad08:	f8ad 5018 	strh.w	r5, [sp, #24]
 801ad0c:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ad10:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ad14:	f8ad 5020 	strh.w	r5, [sp, #32]
 801ad18:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801ad1c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ad20:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ad24:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ad28:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801ad2c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801ad30:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801ad34:	ab04      	add	r3, sp, #16
 801ad36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ad3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ad3e:	e887 0003 	stmia.w	r7, {r0, r1}
 801ad42:	4631      	mov	r1, r6
 801ad44:	4638      	mov	r0, r7
 801ad46:	f7fd fe2f 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801ad4a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ad4e:	b18b      	cbz	r3, 801ad74 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801ad50:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ad54:	b173      	cbz	r3, 801ad74 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801ad56:	6823      	ldr	r3, [r4, #0]
 801ad58:	4639      	mov	r1, r7
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad5e:	4798      	blx	r3
 801ad60:	f7f5 fca6 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 801ad64:	6803      	ldr	r3, [r0, #0]
 801ad66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ad68:	4639      	mov	r1, r7
 801ad6a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801ad6e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801ad72:	47c0      	blx	r8
 801ad74:	3501      	adds	r5, #1
 801ad76:	2d04      	cmp	r5, #4
 801ad78:	d1dc      	bne.n	801ad34 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801ad7a:	b00c      	add	sp, #48	; 0x30
 801ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801ad80:	b570      	push	{r4, r5, r6, lr}
 801ad82:	4605      	mov	r5, r0
 801ad84:	880b      	ldrh	r3, [r1, #0]
 801ad86:	4604      	mov	r4, r0
 801ad88:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ad8a:	f855 3b26 	ldr.w	r3, [r5], #38
 801ad8e:	4628      	mov	r0, r5
 801ad90:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801ad92:	f003 fb7f 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ad96:	b201      	sxth	r1, r0
 801ad98:	4620      	mov	r0, r4
 801ad9a:	47b0      	blx	r6
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	4628      	mov	r0, r5
 801ada0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801ada2:	f003 fbb1 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ada6:	b201      	sxth	r1, r0
 801ada8:	4620      	mov	r0, r4
 801adaa:	47b0      	blx	r6
 801adac:	4628      	mov	r0, r5
 801adae:	f003 fc3f 	bl	801e630 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801adb2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801adb6:	bd70      	pop	{r4, r5, r6, pc}

0801adb8 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801adb8:	b510      	push	{r4, lr}
 801adba:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801adbe:	4604      	mov	r4, r0
 801adc0:	2bff      	cmp	r3, #255	; 0xff
 801adc2:	d006      	beq.n	801add2 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801adc4:	2300      	movs	r3, #0
 801adc6:	8003      	strh	r3, [r0, #0]
 801adc8:	8043      	strh	r3, [r0, #2]
 801adca:	8083      	strh	r3, [r0, #4]
 801adcc:	80c3      	strh	r3, [r0, #6]
 801adce:	4620      	mov	r0, r4
 801add0:	bd10      	pop	{r4, pc}
 801add2:	3126      	adds	r1, #38	; 0x26
 801add4:	f003 fbd2 	bl	801e57c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801add8:	e7f9      	b.n	801adce <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801addc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	4604      	mov	r4, r0
 801ade2:	b088      	sub	sp, #32
 801ade4:	2500      	movs	r5, #0
 801ade6:	460f      	mov	r7, r1
 801ade8:	f854 3b26 	ldr.w	r3, [r4], #38
 801adec:	a904      	add	r1, sp, #16
 801adee:	4606      	mov	r6, r0
 801adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801adf6:	4798      	blx	r3
 801adf8:	4620      	mov	r0, r4
 801adfa:	f003 fb4b 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801adfe:	4680      	mov	r8, r0
 801ae00:	4620      	mov	r0, r4
 801ae02:	f003 fb81 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ae06:	9506      	str	r5, [sp, #24]
 801ae08:	ad06      	add	r5, sp, #24
 801ae0a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ae0e:	4639      	mov	r1, r7
 801ae10:	f8ad 801c 	strh.w	r8, [sp, #28]
 801ae14:	4628      	mov	r0, r5
 801ae16:	f7fd fdc7 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801ae1a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ae1e:	b1c3      	cbz	r3, 801ae52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801ae20:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ae24:	b1ab      	cbz	r3, 801ae52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801ae26:	4b0c      	ldr	r3, [pc, #48]	; (801ae58 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ae2e:	b10a      	cbz	r2, 801ae34 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801ae30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ae32:	b900      	cbnz	r0, 801ae36 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801ae34:	6898      	ldr	r0, [r3, #8]
 801ae36:	2701      	movs	r7, #1
 801ae38:	6801      	ldr	r1, [r0, #0]
 801ae3a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ae3e:	9702      	str	r7, [sp, #8]
 801ae40:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801ae44:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ae48:	e9cd 5600 	strd	r5, r6, [sp]
 801ae4c:	68cd      	ldr	r5, [r1, #12]
 801ae4e:	4621      	mov	r1, r4
 801ae50:	47a8      	blx	r5
 801ae52:	b008      	add	sp, #32
 801ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae58:	2000beec 	.word	0x2000beec

0801ae5c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801ae5c:	4b02      	ldr	r3, [pc, #8]	; (801ae68 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801ae5e:	6018      	str	r0, [r3, #0]
 801ae60:	4b02      	ldr	r3, [pc, #8]	; (801ae6c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801ae62:	6019      	str	r1, [r3, #0]
 801ae64:	4770      	bx	lr
 801ae66:	bf00      	nop
 801ae68:	2000bef4 	.word	0x2000bef4
 801ae6c:	2000bf08 	.word	0x2000bf08

0801ae70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801ae70:	b538      	push	{r3, r4, r5, lr}
 801ae72:	4c2b      	ldr	r4, [pc, #172]	; (801af20 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801ae74:	4b2b      	ldr	r3, [pc, #172]	; (801af24 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801ae76:	6821      	ldr	r1, [r4, #0]
 801ae78:	681a      	ldr	r2, [r3, #0]
 801ae7a:	4281      	cmp	r1, r0
 801ae7c:	4d2a      	ldr	r5, [pc, #168]	; (801af28 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801ae7e:	492b      	ldr	r1, [pc, #172]	; (801af2c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801ae80:	d108      	bne.n	801ae94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801ae82:	682b      	ldr	r3, [r5, #0]
 801ae84:	4293      	cmp	r3, r2
 801ae86:	d105      	bne.n	801ae94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801ae88:	6808      	ldr	r0, [r1, #0]
 801ae8a:	280f      	cmp	r0, #15
 801ae8c:	bf94      	ite	ls
 801ae8e:	2000      	movls	r0, #0
 801ae90:	2001      	movhi	r0, #1
 801ae92:	bd38      	pop	{r3, r4, r5, pc}
 801ae94:	4b26      	ldr	r3, [pc, #152]	; (801af30 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801ae96:	6020      	str	r0, [r4, #0]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	602a      	str	r2, [r5, #0]
 801ae9c:	4298      	cmp	r0, r3
 801ae9e:	d905      	bls.n	801aeac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801aea0:	4b24      	ldr	r3, [pc, #144]	; (801af34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801aea2:	2137      	movs	r1, #55	; 0x37
 801aea4:	4a24      	ldr	r2, [pc, #144]	; (801af38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801aea6:	4825      	ldr	r0, [pc, #148]	; (801af3c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801aea8:	f00d f846 	bl	8027f38 <__assert_func>
 801aeac:	f010 0403 	ands.w	r4, r0, #3
 801aeb0:	bf1f      	itttt	ne
 801aeb2:	f1c4 0504 	rsbne	r5, r4, #4
 801aeb6:	3b04      	subne	r3, #4
 801aeb8:	1952      	addne	r2, r2, r5
 801aeba:	191b      	addne	r3, r3, r4
 801aebc:	4d20      	ldr	r5, [pc, #128]	; (801af40 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801aebe:	4402      	add	r2, r0
 801aec0:	1a1b      	subs	r3, r3, r0
 801aec2:	3001      	adds	r0, #1
 801aec4:	602a      	str	r2, [r5, #0]
 801aec6:	f020 0401 	bic.w	r4, r0, #1
 801aeca:	42a3      	cmp	r3, r4
 801aecc:	d203      	bcs.n	801aed6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801aece:	4b19      	ldr	r3, [pc, #100]	; (801af34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801aed0:	214a      	movs	r1, #74	; 0x4a
 801aed2:	4a19      	ldr	r2, [pc, #100]	; (801af38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801aed4:	e7e7      	b.n	801aea6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801aed6:	f010 0002 	ands.w	r0, r0, #2
 801aeda:	bf1f      	itttt	ne
 801aedc:	f1c0 0504 	rsbne	r5, r0, #4
 801aee0:	1952      	addne	r2, r2, r5
 801aee2:	1f05      	subne	r5, r0, #4
 801aee4:	195b      	addne	r3, r3, r5
 801aee6:	4422      	add	r2, r4
 801aee8:	4d16      	ldr	r5, [pc, #88]	; (801af44 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801aeea:	1b1b      	subs	r3, r3, r4
 801aeec:	602a      	str	r2, [r5, #0]
 801aeee:	429c      	cmp	r4, r3
 801aef0:	d903      	bls.n	801aefa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801aef2:	4b10      	ldr	r3, [pc, #64]	; (801af34 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801aef4:	215d      	movs	r1, #93	; 0x5d
 801aef6:	4a10      	ldr	r2, [pc, #64]	; (801af38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801aef8:	e7d5      	b.n	801aea6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801aefa:	b120      	cbz	r0, 801af06 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801aefc:	f1c0 0504 	rsb	r5, r0, #4
 801af00:	3804      	subs	r0, #4
 801af02:	442a      	add	r2, r5
 801af04:	4403      	add	r3, r0
 801af06:	1b1b      	subs	r3, r3, r4
 801af08:	4422      	add	r2, r4
 801af0a:	480f      	ldr	r0, [pc, #60]	; (801af48 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801af0c:	2b0f      	cmp	r3, #15
 801af0e:	600b      	str	r3, [r1, #0]
 801af10:	6002      	str	r2, [r0, #0]
 801af12:	d803      	bhi.n	801af1c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801af14:	4b0d      	ldr	r3, [pc, #52]	; (801af4c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801af16:	2170      	movs	r1, #112	; 0x70
 801af18:	4a07      	ldr	r2, [pc, #28]	; (801af38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801af1a:	e7c4      	b.n	801aea6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801af1c:	2001      	movs	r0, #1
 801af1e:	e7b8      	b.n	801ae92 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801af20:	2000befc 	.word	0x2000befc
 801af24:	2000bef4 	.word	0x2000bef4
 801af28:	2000bf04 	.word	0x2000bf04
 801af2c:	2000bf0c 	.word	0x2000bf0c
 801af30:	2000bf08 	.word	0x2000bf08
 801af34:	0802be44 	.word	0x0802be44
 801af38:	0802bf0c 	.word	0x0802bf0c
 801af3c:	0802be7d 	.word	0x0802be7d
 801af40:	2000bf10 	.word	0x2000bf10
 801af44:	2000bf00 	.word	0x2000bf00
 801af48:	2000bef8 	.word	0x2000bef8
 801af4c:	0802bec7 	.word	0x0802bec7

0801af50 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801af50:	4b04      	ldr	r3, [pc, #16]	; (801af64 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801af52:	6818      	ldr	r0, [r3, #0]
 801af54:	b120      	cbz	r0, 801af60 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801af56:	4b04      	ldr	r3, [pc, #16]	; (801af68 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801af58:	6818      	ldr	r0, [r3, #0]
 801af5a:	3000      	adds	r0, #0
 801af5c:	bf18      	it	ne
 801af5e:	2001      	movne	r0, #1
 801af60:	4770      	bx	lr
 801af62:	bf00      	nop
 801af64:	2000bef4 	.word	0x2000bef4
 801af68:	2000bf08 	.word	0x2000bf08

0801af6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801af6c:	4b01      	ldr	r3, [pc, #4]	; (801af74 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801af6e:	6818      	ldr	r0, [r3, #0]
 801af70:	4770      	bx	lr
 801af72:	bf00      	nop
 801af74:	2000befc 	.word	0x2000befc

0801af78 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801af78:	4b01      	ldr	r3, [pc, #4]	; (801af80 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801af7a:	6818      	ldr	r0, [r3, #0]
 801af7c:	4770      	bx	lr
 801af7e:	bf00      	nop
 801af80:	2000bf04 	.word	0x2000bf04

0801af84 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801af84:	4b01      	ldr	r3, [pc, #4]	; (801af8c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801af86:	6818      	ldr	r0, [r3, #0]
 801af88:	4770      	bx	lr
 801af8a:	bf00      	nop
 801af8c:	2000bf10 	.word	0x2000bf10

0801af90 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801af90:	4b01      	ldr	r3, [pc, #4]	; (801af98 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801af92:	6818      	ldr	r0, [r3, #0]
 801af94:	4770      	bx	lr
 801af96:	bf00      	nop
 801af98:	2000bf00 	.word	0x2000bf00

0801af9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801af9c:	4b01      	ldr	r3, [pc, #4]	; (801afa4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801af9e:	6818      	ldr	r0, [r3, #0]
 801afa0:	4770      	bx	lr
 801afa2:	bf00      	nop
 801afa4:	2000bef8 	.word	0x2000bef8

0801afa8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801afa8:	4b01      	ldr	r3, [pc, #4]	; (801afb0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801afaa:	6818      	ldr	r0, [r3, #0]
 801afac:	4770      	bx	lr
 801afae:	bf00      	nop
 801afb0:	2000bf0c 	.word	0x2000bf0c

0801afb4 <_ZN8touchgfx3LCD4initEv>:
 801afb4:	4770      	bx	lr

0801afb6 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801afb6:	2000      	movs	r0, #0
 801afb8:	4770      	bx	lr

0801afba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801afba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afbe:	b091      	sub	sp, #68	; 0x44
 801afc0:	4699      	mov	r9, r3
 801afc2:	4617      	mov	r7, r2
 801afc4:	2500      	movs	r5, #0
 801afc6:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801afca:	4680      	mov	r8, r0
 801afcc:	a80e      	add	r0, sp, #56	; 0x38
 801afce:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801afd0:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801afd4:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801afd8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801afdc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801afe0:	910d      	str	r1, [sp, #52]	; 0x34
 801afe2:	950e      	str	r5, [sp, #56]	; 0x38
 801afe4:	f000 fe3a 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afe8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801afea:	f8d9 6000 	ldr.w	r6, [r9]
 801afee:	6818      	ldr	r0, [r3, #0]
 801aff0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aff2:	f9b4 b000 	ldrsh.w	fp, [r4]
 801aff6:	1b80      	subs	r0, r0, r6
 801aff8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801affc:	eb02 0c06 	add.w	ip, r2, r6
 801b000:	ebab 0e0c 	sub.w	lr, fp, ip
 801b004:	4570      	cmp	r0, lr
 801b006:	f340 80bc 	ble.w	801b182 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b00a:	88a1      	ldrh	r1, [r4, #4]
 801b00c:	4459      	add	r1, fp
 801b00e:	b209      	sxth	r1, r1
 801b010:	458c      	cmp	ip, r1
 801b012:	f300 80b6 	bgt.w	801b182 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b016:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801b01a:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801b01e:	4283      	cmp	r3, r0
 801b020:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801b024:	edd9 6a07 	vldr	s13, [r9, #28]
 801b028:	bfa8      	it	ge
 801b02a:	4603      	movge	r3, r0
 801b02c:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801b030:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801b034:	45e3      	cmp	fp, ip
 801b036:	ee07 3a90 	vmov	s15, r3
 801b03a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801b03e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b042:	ee25 4a04 	vmul.f32	s8, s10, s8
 801b046:	ee65 4a24 	vmul.f32	s9, s10, s9
 801b04a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801b04e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b052:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801b056:	ee32 1a05 	vadd.f32	s2, s4, s10
 801b05a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b05e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801b062:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b066:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b06a:	f340 808d 	ble.w	801b188 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801b06e:	fb9e f5f3 	sdiv	r5, lr, r3
 801b072:	ee07 5a10 	vmov	s14, r5
 801b076:	2d00      	cmp	r5, #0
 801b078:	fb03 e415 	mls	r4, r3, r5, lr
 801b07c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b080:	eea7 0a04 	vfma.f32	s0, s14, s8
 801b084:	eee7 0a24 	vfma.f32	s1, s14, s9
 801b088:	eea7 1a05 	vfma.f32	s2, s14, s10
 801b08c:	dd12      	ble.n	801b0b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801b08e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801b092:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801b096:	ee31 2a45 	vsub.f32	s4, s2, s10
 801b09a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801b09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0a2:	bf14      	ite	ne
 801b0a4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801b0a8:	eeb0 7a67 	vmoveq.f32	s14, s15
 801b0ac:	ee61 1a87 	vmul.f32	s3, s3, s14
 801b0b0:	ee22 2a07 	vmul.f32	s4, s4, s14
 801b0b4:	fb05 f703 	mul.w	r7, r5, r3
 801b0b8:	1bc0      	subs	r0, r0, r7
 801b0ba:	443e      	add	r6, r7
 801b0bc:	1997      	adds	r7, r2, r6
 801b0be:	4407      	add	r7, r0
 801b0c0:	42b9      	cmp	r1, r7
 801b0c2:	bfbc      	itt	lt
 801b0c4:	1a88      	sublt	r0, r1, r2
 801b0c6:	1b80      	sublt	r0, r0, r6
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	dd5a      	ble.n	801b182 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801b0cc:	fb90 f1f3 	sdiv	r1, r0, r3
 801b0d0:	fb03 0211 	mls	r2, r3, r1, r0
 801b0d4:	b90a      	cbnz	r2, 801b0da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801b0d6:	3901      	subs	r1, #1
 801b0d8:	461a      	mov	r2, r3
 801b0da:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801b0de:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801b0e2:	44a4      	add	ip, r4
 801b0e4:	2900      	cmp	r1, #0
 801b0e6:	bfcc      	ite	gt
 801b0e8:	469e      	movgt	lr, r3
 801b0ea:	4696      	movle	lr, r2
 801b0ec:	fb03 c505 	mla	r5, r3, r5, ip
 801b0f0:	eef0 6a42 	vmov.f32	s13, s4
 801b0f4:	eeb0 7a61 	vmov.f32	s14, s3
 801b0f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0fc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b100:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801b104:	ee21 3a23 	vmul.f32	s6, s2, s7
 801b108:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801b10c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b110:	ee17 0a90 	vmov	r0, s15
 801b114:	ee73 7a42 	vsub.f32	s15, s6, s4
 801b118:	fb90 f6f3 	sdiv	r6, r0, r3
 801b11c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801b120:	ee17 0a90 	vmov	r0, s15
 801b124:	fb90 f7f3 	sdiv	r7, r0, r3
 801b128:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b12c:	f8d0 8000 	ldr.w	r8, [r0]
 801b130:	900c      	str	r0, [sp, #48]	; 0x30
 801b132:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b134:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801b138:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b13c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b140:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b144:	f8cd a020 	str.w	sl, [sp, #32]
 801b148:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801b14c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b14e:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801b152:	9603      	str	r6, [sp, #12]
 801b154:	44ca      	add	sl, r9
 801b156:	9506      	str	r5, [sp, #24]
 801b158:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801b15c:	ee16 0a90 	vmov	r0, s13
 801b160:	f8cd a01c 	str.w	sl, [sp, #28]
 801b164:	fb07 0704 	mla	r7, r7, r4, r0
 801b168:	ee17 0a10 	vmov	r0, s14
 801b16c:	fb06 0604 	mla	r6, r6, r4, r0
 801b170:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b172:	9702      	str	r7, [sp, #8]
 801b174:	e9cd 3600 	strd	r3, r6, [sp]
 801b178:	ebae 0304 	sub.w	r3, lr, r4
 801b17c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801b180:	47a8      	blx	r5
 801b182:	b011      	add	sp, #68	; 0x44
 801b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b188:	462c      	mov	r4, r5
 801b18a:	e797      	b.n	801b0bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801b18c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b18c:	b570      	push	{r4, r5, r6, lr}
 801b18e:	4604      	mov	r4, r0
 801b190:	2500      	movs	r5, #0
 801b192:	9804      	ldr	r0, [sp, #16]
 801b194:	7223      	strb	r3, [r4, #8]
 801b196:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b19a:	8025      	strh	r5, [r4, #0]
 801b19c:	6061      	str	r1, [r4, #4]
 801b19e:	7263      	strb	r3, [r4, #9]
 801b1a0:	60e0      	str	r0, [r4, #12]
 801b1a2:	8222      	strh	r2, [r4, #16]
 801b1a4:	8265      	strh	r5, [r4, #18]
 801b1a6:	82a5      	strh	r5, [r4, #20]
 801b1a8:	82e5      	strh	r5, [r4, #22]
 801b1aa:	8325      	strh	r5, [r4, #24]
 801b1ac:	8365      	strh	r5, [r4, #26]
 801b1ae:	83a5      	strh	r5, [r4, #28]
 801b1b0:	77a5      	strb	r5, [r4, #30]
 801b1b2:	6803      	ldr	r3, [r0, #0]
 801b1b4:	695b      	ldr	r3, [r3, #20]
 801b1b6:	4798      	blx	r3
 801b1b8:	4606      	mov	r6, r0
 801b1ba:	b1f8      	cbz	r0, 801b1fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b1bc:	68e0      	ldr	r0, [r4, #12]
 801b1be:	4631      	mov	r1, r6
 801b1c0:	6803      	ldr	r3, [r0, #0]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	4798      	blx	r3
 801b1c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b1ca:	4605      	mov	r5, r0
 801b1cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b1d0:	7a83      	ldrb	r3, [r0, #10]
 801b1d2:	4313      	orrs	r3, r2
 801b1d4:	83a3      	strh	r3, [r4, #28]
 801b1d6:	7a63      	ldrb	r3, [r4, #9]
 801b1d8:	2b04      	cmp	r3, #4
 801b1da:	d10f      	bne.n	801b1fc <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b1dc:	68e0      	ldr	r0, [r4, #12]
 801b1de:	462a      	mov	r2, r5
 801b1e0:	4631      	mov	r1, r6
 801b1e2:	6803      	ldr	r3, [r0, #0]
 801b1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1e6:	4798      	blx	r3
 801b1e8:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801b1ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b1f0:	7aab      	ldrb	r3, [r5, #10]
 801b1f2:	4313      	orrs	r3, r2
 801b1f4:	4418      	add	r0, r3
 801b1f6:	8ba3      	ldrh	r3, [r4, #28]
 801b1f8:	4418      	add	r0, r3
 801b1fa:	83a0      	strh	r0, [r4, #28]
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	bd70      	pop	{r4, r5, r6, pc}

0801b200 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b204:	2400      	movs	r4, #0
 801b206:	b085      	sub	sp, #20
 801b208:	4681      	mov	r9, r0
 801b20a:	460f      	mov	r7, r1
 801b20c:	4692      	mov	sl, r2
 801b20e:	469b      	mov	fp, r3
 801b210:	46a0      	mov	r8, r4
 801b212:	4626      	mov	r6, r4
 801b214:	4554      	cmp	r4, sl
 801b216:	da21      	bge.n	801b25c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b218:	2300      	movs	r3, #0
 801b21a:	463a      	mov	r2, r7
 801b21c:	4659      	mov	r1, fp
 801b21e:	4648      	mov	r0, r9
 801b220:	9303      	str	r3, [sp, #12]
 801b222:	ab03      	add	r3, sp, #12
 801b224:	f002 fb8c 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b228:	4605      	mov	r5, r0
 801b22a:	b1b8      	cbz	r0, 801b25c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b22c:	280a      	cmp	r0, #10
 801b22e:	d015      	beq.n	801b25c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801b230:	9a03      	ldr	r2, [sp, #12]
 801b232:	b182      	cbz	r2, 801b256 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801b234:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801b238:	4641      	mov	r1, r8
 801b23a:	7a93      	ldrb	r3, [r2, #10]
 801b23c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b240:	8895      	ldrh	r5, [r2, #4]
 801b242:	4303      	orrs	r3, r0
 801b244:	4638      	mov	r0, r7
 801b246:	9301      	str	r3, [sp, #4]
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b24c:	4798      	blx	r3
 801b24e:	9b01      	ldr	r3, [sp, #4]
 801b250:	4418      	add	r0, r3
 801b252:	4406      	add	r6, r0
 801b254:	b2b6      	uxth	r6, r6
 801b256:	3401      	adds	r4, #1
 801b258:	46a8      	mov	r8, r5
 801b25a:	e7db      	b.n	801b214 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801b25c:	4630      	mov	r0, r6
 801b25e:	b005      	add	sp, #20
 801b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b264 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b264:	2a02      	cmp	r2, #2
 801b266:	b530      	push	{r4, r5, lr}
 801b268:	d011      	beq.n	801b28e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b26a:	2a03      	cmp	r2, #3
 801b26c:	d01c      	beq.n	801b2a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b26e:	2a01      	cmp	r2, #1
 801b270:	d10c      	bne.n	801b28c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b272:	888b      	ldrh	r3, [r1, #4]
 801b274:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b278:	8801      	ldrh	r1, [r0, #0]
 801b27a:	1a9b      	subs	r3, r3, r2
 801b27c:	8844      	ldrh	r4, [r0, #2]
 801b27e:	1a5b      	subs	r3, r3, r1
 801b280:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b284:	8004      	strh	r4, [r0, #0]
 801b286:	8043      	strh	r3, [r0, #2]
 801b288:	8081      	strh	r1, [r0, #4]
 801b28a:	80c2      	strh	r2, [r0, #6]
 801b28c:	bd30      	pop	{r4, r5, pc}
 801b28e:	88cb      	ldrh	r3, [r1, #6]
 801b290:	88c2      	ldrh	r2, [r0, #6]
 801b292:	1a9b      	subs	r3, r3, r2
 801b294:	8842      	ldrh	r2, [r0, #2]
 801b296:	1a9b      	subs	r3, r3, r2
 801b298:	888a      	ldrh	r2, [r1, #4]
 801b29a:	8881      	ldrh	r1, [r0, #4]
 801b29c:	8043      	strh	r3, [r0, #2]
 801b29e:	1a52      	subs	r2, r2, r1
 801b2a0:	8801      	ldrh	r1, [r0, #0]
 801b2a2:	1a52      	subs	r2, r2, r1
 801b2a4:	8002      	strh	r2, [r0, #0]
 801b2a6:	e7f1      	b.n	801b28c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b2a8:	88cb      	ldrh	r3, [r1, #6]
 801b2aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b2ae:	8841      	ldrh	r1, [r0, #2]
 801b2b0:	1a9b      	subs	r3, r3, r2
 801b2b2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b2b6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b2ba:	1a5b      	subs	r3, r3, r1
 801b2bc:	8045      	strh	r5, [r0, #2]
 801b2be:	8082      	strh	r2, [r0, #4]
 801b2c0:	8003      	strh	r3, [r0, #0]
 801b2c2:	80c4      	strh	r4, [r0, #6]
 801b2c4:	e7e2      	b.n	801b28c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801b2c8 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801b2c8:	b570      	push	{r4, r5, r6, lr}
 801b2ca:	b086      	sub	sp, #24
 801b2cc:	ac02      	add	r4, sp, #8
 801b2ce:	e884 0006 	stmia.w	r4, {r1, r2}
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	ab0c      	add	r3, sp, #48	; 0x30
 801b2d6:	9305      	str	r3, [sp, #20]
 801b2d8:	4b0a      	ldr	r3, [pc, #40]	; (801b304 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801b2da:	685d      	ldr	r5, [r3, #4]
 801b2dc:	1069      	asrs	r1, r5, #1
 801b2de:	07ed      	lsls	r5, r5, #31
 801b2e0:	eb00 0601 	add.w	r6, r0, r1
 801b2e4:	bf46      	itte	mi
 801b2e6:	681b      	ldrmi	r3, [r3, #0]
 801b2e8:	5841      	ldrmi	r1, [r0, r1]
 801b2ea:	681d      	ldrpl	r5, [r3, #0]
 801b2ec:	4630      	mov	r0, r6
 801b2ee:	bf48      	it	mi
 801b2f0:	58cd      	ldrmi	r5, [r1, r3]
 801b2f2:	4621      	mov	r1, r4
 801b2f4:	9b05      	ldr	r3, [sp, #20]
 801b2f6:	9301      	str	r3, [sp, #4]
 801b2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2fa:	9300      	str	r3, [sp, #0]
 801b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2fe:	47a8      	blx	r5
 801b300:	b006      	add	sp, #24
 801b302:	bd70      	pop	{r4, r5, r6, pc}
 801b304:	20000030 	.word	0x20000030

0801b308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30c:	b09d      	sub	sp, #116	; 0x74
 801b30e:	9114      	str	r1, [sp, #80]	; 0x50
 801b310:	9315      	str	r3, [sp, #84]	; 0x54
 801b312:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b314:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b316:	8809      	ldrh	r1, [r1, #0]
 801b318:	889b      	ldrh	r3, [r3, #4]
 801b31a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801b31c:	440b      	add	r3, r1
 801b31e:	9210      	str	r2, [sp, #64]	; 0x40
 801b320:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801b324:	b21b      	sxth	r3, r3
 801b326:	900f      	str	r0, [sp, #60]	; 0x3c
 801b328:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801b32c:	930e      	str	r3, [sp, #56]	; 0x38
 801b32e:	6833      	ldr	r3, [r6, #0]
 801b330:	7a59      	ldrb	r1, [r3, #9]
 801b332:	7a1b      	ldrb	r3, [r3, #8]
 801b334:	9113      	str	r1, [sp, #76]	; 0x4c
 801b336:	9312      	str	r3, [sp, #72]	; 0x48
 801b338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b33a:	f9b3 4000 	ldrsh.w	r4, [r3]
 801b33e:	2a00      	cmp	r2, #0
 801b340:	d059      	beq.n	801b3f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801b342:	7c33      	ldrb	r3, [r6, #16]
 801b344:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b346:	2b04      	cmp	r3, #4
 801b348:	bf14      	ite	ne
 801b34a:	2301      	movne	r3, #1
 801b34c:	2302      	moveq	r3, #2
 801b34e:	4413      	add	r3, r2
 801b350:	f04f 0800 	mov.w	r8, #0
 801b354:	930d      	str	r3, [sp, #52]	; 0x34
 801b356:	4645      	mov	r5, r8
 801b358:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801b35c:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801b360:	4293      	cmp	r3, r2
 801b362:	da75      	bge.n	801b450 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801b364:	2300      	movs	r3, #0
 801b366:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b368:	6832      	ldr	r2, [r6, #0]
 801b36a:	931a      	str	r3, [sp, #104]	; 0x68
 801b36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b36e:	428b      	cmp	r3, r1
 801b370:	db43      	blt.n	801b3fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801b372:	6813      	ldr	r3, [r2, #0]
 801b374:	4610      	mov	r0, r2
 801b376:	695b      	ldr	r3, [r3, #20]
 801b378:	4798      	blx	r3
 801b37a:	4681      	mov	r9, r0
 801b37c:	6830      	ldr	r0, [r6, #0]
 801b37e:	aa1b      	add	r2, sp, #108	; 0x6c
 801b380:	4649      	mov	r1, r9
 801b382:	6803      	ldr	r3, [r0, #0]
 801b384:	689f      	ldr	r7, [r3, #8]
 801b386:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801b38a:	47b8      	blx	r7
 801b38c:	901a      	str	r0, [sp, #104]	; 0x68
 801b38e:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801b392:	45d1      	cmp	r9, sl
 801b394:	d045      	beq.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b396:	f242 070b 	movw	r7, #8203	; 0x200b
 801b39a:	45b9      	cmp	r9, r7
 801b39c:	d041      	beq.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b39e:	f1b9 0f00 	cmp.w	r9, #0
 801b3a2:	f000 80ee 	beq.w	801b582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b3a6:	f1b9 0f0a 	cmp.w	r9, #10
 801b3aa:	d057      	beq.n	801b45c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801b3ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b3ae:	b383      	cbz	r3, 801b412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801b3b0:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801b3b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b3b6:	2a00      	cmp	r2, #0
 801b3b8:	f000 80d2 	beq.w	801b560 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801b3bc:	f1bb 0f00 	cmp.w	fp, #0
 801b3c0:	d100      	bne.n	801b3c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801b3c2:	4444      	add	r4, r8
 801b3c4:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801b3c8:	f1bb 0f01 	cmp.w	fp, #1
 801b3cc:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801b3d0:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b3d4:	ea48 0803 	orr.w	r8, r8, r3
 801b3d8:	d128      	bne.n	801b42c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801b3da:	eba4 0408 	sub.w	r4, r4, r8
 801b3de:	2d00      	cmp	r5, #0
 801b3e0:	d143      	bne.n	801b46a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801b3e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3e4:	eb08 0304 	add.w	r3, r8, r4
 801b3e8:	4413      	add	r3, r2
 801b3ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b3ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b3f0:	4293      	cmp	r3, r2
 801b3f2:	da44      	bge.n	801b47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b3f4:	e02b      	b.n	801b44e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801b3f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b3f8:	e7aa      	b.n	801b350 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801b3fa:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801b3fe:	4659      	mov	r1, fp
 801b400:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801b402:	9301      	str	r3, [sp, #4]
 801b404:	ab1b      	add	r3, sp, #108	; 0x6c
 801b406:	9300      	str	r3, [sp, #0]
 801b408:	ab1a      	add	r3, sp, #104	; 0x68
 801b40a:	f002 facd 	bl	801d9a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b40e:	4681      	mov	r9, r0
 801b410:	e7bd      	b.n	801b38e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801b412:	6830      	ldr	r0, [r6, #0]
 801b414:	6803      	ldr	r3, [r0, #0]
 801b416:	691b      	ldr	r3, [r3, #16]
 801b418:	4798      	blx	r3
 801b41a:	4550      	cmp	r0, sl
 801b41c:	d001      	beq.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b41e:	42b8      	cmp	r0, r7
 801b420:	d1c8      	bne.n	801b3b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b424:	464d      	mov	r5, r9
 801b426:	3301      	adds	r3, #1
 801b428:	930c      	str	r3, [sp, #48]	; 0x30
 801b42a:	e797      	b.n	801b35c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801b42c:	2d00      	cmp	r5, #0
 801b42e:	f000 80aa 	beq.w	801b586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801b432:	f1bb 0f00 	cmp.w	fp, #0
 801b436:	d118      	bne.n	801b46a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801b438:	6830      	ldr	r0, [r6, #0]
 801b43a:	4629      	mov	r1, r5
 801b43c:	6803      	ldr	r3, [r0, #0]
 801b43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b440:	4798      	blx	r3
 801b442:	4404      	add	r4, r0
 801b444:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b448:	1ae3      	subs	r3, r4, r3
 801b44a:	4293      	cmp	r3, r2
 801b44c:	dd17      	ble.n	801b47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b44e:	464d      	mov	r5, r9
 801b450:	2d00      	cmp	r5, #0
 801b452:	f000 8096 	beq.w	801b582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b456:	2d0a      	cmp	r5, #10
 801b458:	f040 8084 	bne.w	801b564 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801b45c:	250a      	movs	r5, #10
 801b45e:	fab5 f085 	clz	r0, r5
 801b462:	0940      	lsrs	r0, r0, #5
 801b464:	b01d      	add	sp, #116	; 0x74
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46a:	6830      	ldr	r0, [r6, #0]
 801b46c:	4629      	mov	r1, r5
 801b46e:	6803      	ldr	r3, [r0, #0]
 801b470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b472:	4798      	blx	r3
 801b474:	f1bb 0f01 	cmp.w	fp, #1
 801b478:	eba4 0400 	sub.w	r4, r4, r0
 801b47c:	d0b1      	beq.n	801b3e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801b47e:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b480:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b482:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b486:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b48a:	7b43      	ldrb	r3, [r0, #13]
 801b48c:	4421      	add	r1, r4
 801b48e:	015b      	lsls	r3, r3, #5
 801b490:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b494:	7983      	ldrb	r3, [r0, #6]
 801b496:	4313      	orrs	r3, r2
 801b498:	440b      	add	r3, r1
 801b49a:	42ab      	cmp	r3, r5
 801b49c:	dbc1      	blt.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4a0:	4299      	cmp	r1, r3
 801b4a2:	dabe      	bge.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b4a4:	6830      	ldr	r0, [r6, #0]
 801b4a6:	42a5      	cmp	r5, r4
 801b4a8:	6803      	ldr	r3, [r0, #0]
 801b4aa:	bfcc      	ite	gt
 801b4ac:	1b2d      	subgt	r5, r5, r4
 801b4ae:	2500      	movle	r5, #0
 801b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4b2:	bfc8      	it	gt
 801b4b4:	b2ad      	uxthgt	r5, r5
 801b4b6:	4798      	blx	r3
 801b4b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b4ba:	4935      	ldr	r1, [pc, #212]	; (801b590 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801b4bc:	7b5a      	ldrb	r2, [r3, #13]
 801b4be:	f893 e008 	ldrb.w	lr, [r3, #8]
 801b4c2:	f012 0f40 	tst.w	r2, #64	; 0x40
 801b4c6:	bf18      	it	ne
 801b4c8:	468c      	movne	ip, r1
 801b4ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b4cc:	bf08      	it	eq
 801b4ce:	f04f 0c00 	moveq.w	ip, #0
 801b4d2:	4408      	add	r0, r1
 801b4d4:	00d1      	lsls	r1, r2, #3
 801b4d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801b4da:	ea41 070e 	orr.w	r7, r1, lr
 801b4de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b4e0:	ea4c 0707 	orr.w	r7, ip, r7
 801b4e4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b4e8:	1bc7      	subs	r7, r0, r7
 801b4ea:	b2bf      	uxth	r7, r7
 801b4ec:	fa0f fa87 	sxth.w	sl, r7
 801b4f0:	4551      	cmp	r1, sl
 801b4f2:	dd33      	ble.n	801b55c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801b4f4:	0112      	lsls	r2, r2, #4
 801b4f6:	79d8      	ldrb	r0, [r3, #7]
 801b4f8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b4fc:	4302      	orrs	r2, r0
 801b4fe:	4492      	add	sl, r2
 801b500:	4551      	cmp	r1, sl
 801b502:	dc8e      	bgt.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b504:	1bcf      	subs	r7, r1, r7
 801b506:	468a      	mov	sl, r1
 801b508:	b2bf      	uxth	r7, r7
 801b50a:	9317      	str	r3, [sp, #92]	; 0x5c
 801b50c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b50e:	6830      	ldr	r0, [r6, #0]
 801b510:	681a      	ldr	r2, [r3, #0]
 801b512:	6801      	ldr	r1, [r0, #0]
 801b514:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b516:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b518:	9311      	str	r3, [sp, #68]	; 0x44
 801b51a:	9216      	str	r2, [sp, #88]	; 0x58
 801b51c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b51e:	4788      	blx	r1
 801b520:	79b1      	ldrb	r1, [r6, #6]
 801b522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b524:	910b      	str	r1, [sp, #44]	; 0x2c
 801b526:	7bb1      	ldrb	r1, [r6, #14]
 801b528:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b52a:	910a      	str	r1, [sp, #40]	; 0x28
 801b52c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801b530:	9109      	str	r1, [sp, #36]	; 0x24
 801b532:	68b1      	ldr	r1, [r6, #8]
 801b534:	9305      	str	r3, [sp, #20]
 801b536:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b538:	9206      	str	r2, [sp, #24]
 801b53a:	e9cd a501 	strd	sl, r5, [sp, #4]
 801b53e:	4425      	add	r5, r4
 801b540:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b544:	b22d      	sxth	r5, r5
 801b546:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b548:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b54c:	9500      	str	r5, [sp, #0]
 801b54e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b554:	685b      	ldr	r3, [r3, #4]
 801b556:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b558:	47a8      	blx	r5
 801b55a:	e762      	b.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b55c:	2700      	movs	r7, #0
 801b55e:	e7d4      	b.n	801b50a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801b560:	4690      	mov	r8, r2
 801b562:	e75e      	b.n	801b422 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801b564:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b566:	3401      	adds	r4, #1
 801b568:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b56a:	429c      	cmp	r4, r3
 801b56c:	f6bf af77 	bge.w	801b45e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801b570:	4659      	mov	r1, fp
 801b572:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801b574:	f002 f9a4 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b578:	4605      	mov	r5, r0
 801b57a:	b110      	cbz	r0, 801b582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801b57c:	280a      	cmp	r0, #10
 801b57e:	d1f2      	bne.n	801b566 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801b580:	e76c      	b.n	801b45c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801b582:	2500      	movs	r5, #0
 801b584:	e76b      	b.n	801b45e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801b586:	f1bb 0f00 	cmp.w	fp, #0
 801b58a:	f43f af5b 	beq.w	801b444 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801b58e:	e776      	b.n	801b47e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b590:	fffffe00 	.word	0xfffffe00

0801b594 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b594:	b530      	push	{r4, r5, lr}
 801b596:	8a44      	ldrh	r4, [r0, #18]
 801b598:	8ac5      	ldrh	r5, [r0, #22]
 801b59a:	82c3      	strh	r3, [r0, #22]
 801b59c:	442c      	add	r4, r5
 801b59e:	1ae4      	subs	r4, r4, r3
 801b5a0:	8b03      	ldrh	r3, [r0, #24]
 801b5a2:	8244      	strh	r4, [r0, #18]
 801b5a4:	8a84      	ldrh	r4, [r0, #20]
 801b5a6:	4422      	add	r2, r4
 801b5a8:	440c      	add	r4, r1
 801b5aa:	1a59      	subs	r1, r3, r1
 801b5ac:	8342      	strh	r2, [r0, #26]
 801b5ae:	8284      	strh	r4, [r0, #20]
 801b5b0:	8301      	strh	r1, [r0, #24]
 801b5b2:	bd30      	pop	{r4, r5, pc}

0801b5b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b8:	7a45      	ldrb	r5, [r0, #9]
 801b5ba:	b085      	sub	sp, #20
 801b5bc:	4604      	mov	r4, r0
 801b5be:	4689      	mov	r9, r1
 801b5c0:	1eeb      	subs	r3, r5, #3
 801b5c2:	b2db      	uxtb	r3, r3
 801b5c4:	b329      	cbz	r1, 801b612 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801b5c6:	2b01      	cmp	r3, #1
 801b5c8:	d921      	bls.n	801b60e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801b5ca:	1e69      	subs	r1, r5, #1
 801b5cc:	f1d1 0b00 	rsbs	fp, r1, #0
 801b5d0:	eb4b 0b01 	adc.w	fp, fp, r1
 801b5d4:	1eaa      	subs	r2, r5, #2
 801b5d6:	2500      	movs	r5, #0
 801b5d8:	4253      	negs	r3, r2
 801b5da:	9500      	str	r5, [sp, #0]
 801b5dc:	4153      	adcs	r3, r2
 801b5de:	9301      	str	r3, [sp, #4]
 801b5e0:	2600      	movs	r6, #0
 801b5e2:	f242 080b 	movw	r8, #8203	; 0x200b
 801b5e6:	8266      	strh	r6, [r4, #18]
 801b5e8:	82a6      	strh	r6, [r4, #20]
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	68e2      	ldr	r2, [r4, #12]
 801b5ee:	7a21      	ldrb	r1, [r4, #8]
 801b5f0:	9303      	str	r3, [sp, #12]
 801b5f2:	ab03      	add	r3, sp, #12
 801b5f4:	6860      	ldr	r0, [r4, #4]
 801b5f6:	8827      	ldrh	r7, [r4, #0]
 801b5f8:	f002 f9a2 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b5fc:	8020      	strh	r0, [r4, #0]
 801b5fe:	b9b0      	cbnz	r0, 801b62e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801b600:	8b22      	ldrh	r2, [r4, #24]
 801b602:	2300      	movs	r3, #0
 801b604:	4611      	mov	r1, r2
 801b606:	4620      	mov	r0, r4
 801b608:	f7ff ffc4 	bl	801b594 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b60c:	e062      	b.n	801b6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801b60e:	468b      	mov	fp, r1
 801b610:	e7e0      	b.n	801b5d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801b612:	2b01      	cmp	r3, #1
 801b614:	f105 35ff 	add.w	r5, r5, #4294967295
 801b618:	9101      	str	r1, [sp, #4]
 801b61a:	468b      	mov	fp, r1
 801b61c:	bf8c      	ite	hi
 801b61e:	2300      	movhi	r3, #0
 801b620:	2301      	movls	r3, #1
 801b622:	2d01      	cmp	r5, #1
 801b624:	9300      	str	r3, [sp, #0]
 801b626:	bf8c      	ite	hi
 801b628:	2500      	movhi	r5, #0
 801b62a:	2501      	movls	r5, #1
 801b62c:	e7d8      	b.n	801b5e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801b62e:	8ae3      	ldrh	r3, [r4, #22]
 801b630:	280a      	cmp	r0, #10
 801b632:	f103 0301 	add.w	r3, r3, #1
 801b636:	82e3      	strh	r3, [r4, #22]
 801b638:	d0e2      	beq.n	801b600 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801b63a:	9a03      	ldr	r2, [sp, #12]
 801b63c:	b972      	cbnz	r2, 801b65c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801b63e:	4540      	cmp	r0, r8
 801b640:	d1d3      	bne.n	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b642:	8823      	ldrh	r3, [r4, #0]
 801b644:	8b21      	ldrh	r1, [r4, #24]
 801b646:	2b20      	cmp	r3, #32
 801b648:	d001      	beq.n	801b64e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801b64a:	4543      	cmp	r3, r8
 801b64c:	d11d      	bne.n	801b68a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b64e:	2f20      	cmp	r7, #32
 801b650:	d002      	beq.n	801b658 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b652:	4547      	cmp	r7, r8
 801b654:	bf18      	it	ne
 801b656:	460e      	movne	r6, r1
 801b658:	2001      	movs	r0, #1
 801b65a:	e017      	b.n	801b68c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801b65c:	4540      	cmp	r0, r8
 801b65e:	d012      	beq.n	801b686 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801b660:	8893      	ldrh	r3, [r2, #4]
 801b662:	4639      	mov	r1, r7
 801b664:	8023      	strh	r3, [r4, #0]
 801b666:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801b66a:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801b66e:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801b672:	ea4a 0a00 	orr.w	sl, sl, r0
 801b676:	68e0      	ldr	r0, [r4, #12]
 801b678:	6803      	ldr	r3, [r0, #0]
 801b67a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b67c:	4798      	blx	r3
 801b67e:	eb0a 0200 	add.w	r2, sl, r0
 801b682:	b292      	uxth	r2, r2
 801b684:	e7dd      	b.n	801b642 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801b686:	2200      	movs	r2, #0
 801b688:	e7db      	b.n	801b642 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801b68a:	2000      	movs	r0, #0
 801b68c:	440a      	add	r2, r1
 801b68e:	8aa3      	ldrh	r3, [r4, #20]
 801b690:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b694:	b292      	uxth	r2, r2
 801b696:	8322      	strh	r2, [r4, #24]
 801b698:	4413      	add	r3, r2
 801b69a:	f1b9 0f00 	cmp.w	r9, #0
 801b69e:	d022      	beq.n	801b6e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801b6a0:	f1bb 0f00 	cmp.w	fp, #0
 801b6a4:	d102      	bne.n	801b6ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801b6a6:	9901      	ldr	r1, [sp, #4]
 801b6a8:	b149      	cbz	r1, 801b6be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801b6aa:	b140      	cbz	r0, 801b6be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801b6ac:	8ba1      	ldrh	r1, [r4, #28]
 801b6ae:	4419      	add	r1, r3
 801b6b0:	458c      	cmp	ip, r1
 801b6b2:	da12      	bge.n	801b6da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801b6b4:	8a61      	ldrh	r1, [r4, #18]
 801b6b6:	b181      	cbz	r1, 801b6da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801b6b8:	4563      	cmp	r3, ip
 801b6ba:	dd96      	ble.n	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b6bc:	e004      	b.n	801b6c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801b6be:	4563      	cmp	r3, ip
 801b6c0:	dd93      	ble.n	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b6c2:	8a63      	ldrh	r3, [r4, #18]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d090      	beq.n	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	8ba2      	ldrh	r2, [r4, #28]
 801b6cc:	77a3      	strb	r3, [r4, #30]
 801b6ce:	8b63      	ldrh	r3, [r4, #26]
 801b6d0:	4413      	add	r3, r2
 801b6d2:	8363      	strh	r3, [r4, #26]
 801b6d4:	b005      	add	sp, #20
 801b6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6da:	2300      	movs	r3, #0
 801b6dc:	4611      	mov	r1, r2
 801b6de:	4620      	mov	r0, r4
 801b6e0:	f7ff ff58 	bl	801b594 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b6e4:	e781      	b.n	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b6e6:	4563      	cmp	r3, ip
 801b6e8:	dd16      	ble.n	801b718 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801b6ea:	9b00      	ldr	r3, [sp, #0]
 801b6ec:	b113      	cbz	r3, 801b6f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	460a      	mov	r2, r1
 801b6f2:	e787      	b.n	801b604 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801b6f4:	2d00      	cmp	r5, #0
 801b6f6:	f43f af78 	beq.w	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b6fa:	2800      	cmp	r0, #0
 801b6fc:	f47f af75 	bne.w	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b700:	2f20      	cmp	r7, #32
 801b702:	d001      	beq.n	801b708 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801b704:	4547      	cmp	r7, r8
 801b706:	d102      	bne.n	801b70e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801b708:	2301      	movs	r3, #1
 801b70a:	4632      	mov	r2, r6
 801b70c:	e77b      	b.n	801b606 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801b70e:	8a63      	ldrh	r3, [r4, #18]
 801b710:	2b00      	cmp	r3, #0
 801b712:	f43f af6a 	beq.w	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b716:	e7dd      	b.n	801b6d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801b718:	2800      	cmp	r0, #0
 801b71a:	f47f af66 	bne.w	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b71e:	2f20      	cmp	r7, #32
 801b720:	d002      	beq.n	801b728 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801b722:	4547      	cmp	r7, r8
 801b724:	f47f af61 	bne.w	801b5ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801b728:	2301      	movs	r3, #1
 801b72a:	4632      	mov	r2, r6
 801b72c:	e7d7      	b.n	801b6de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801b72e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b72e:	b570      	push	{r4, r5, r6, lr}
 801b730:	4606      	mov	r6, r0
 801b732:	b08a      	sub	sp, #40	; 0x28
 801b734:	4615      	mov	r5, r2
 801b736:	b191      	cbz	r1, 801b75e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801b738:	2401      	movs	r4, #1
 801b73a:	e9cd 3100 	strd	r3, r1, [sp]
 801b73e:	4613      	mov	r3, r2
 801b740:	4601      	mov	r1, r0
 801b742:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b746:	a802      	add	r0, sp, #8
 801b748:	f7ff fd20 	bl	801b18c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b74c:	2100      	movs	r1, #0
 801b74e:	a802      	add	r0, sp, #8
 801b750:	f7ff ff30 	bl	801b5b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b754:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b758:	b173      	cbz	r3, 801b778 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801b75a:	3401      	adds	r4, #1
 801b75c:	e7f6      	b.n	801b74c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801b75e:	2401      	movs	r4, #1
 801b760:	4611      	mov	r1, r2
 801b762:	f002 f8ad 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b766:	280a      	cmp	r0, #10
 801b768:	4629      	mov	r1, r5
 801b76a:	4630      	mov	r0, r6
 801b76c:	bf08      	it	eq
 801b76e:	3401      	addeq	r4, #1
 801b770:	f002 f8a6 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b774:	2800      	cmp	r0, #0
 801b776:	d1f6      	bne.n	801b766 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801b778:	b2a0      	uxth	r0, r4
 801b77a:	b00a      	add	sp, #40	; 0x28
 801b77c:	bd70      	pop	{r4, r5, r6, pc}

0801b77e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b782:	b0db      	sub	sp, #364	; 0x16c
 801b784:	468a      	mov	sl, r1
 801b786:	461c      	mov	r4, r3
 801b788:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801b78c:	9009      	str	r0, [sp, #36]	; 0x24
 801b78e:	f1bb 0f00 	cmp.w	fp, #0
 801b792:	f000 80c7 	beq.w	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	f000 80c3 	beq.w	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b79e:	7ba3      	ldrb	r3, [r4, #14]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	f000 80bf 	beq.w	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b7a6:	af0c      	add	r7, sp, #48	; 0x30
 801b7a8:	6810      	ldr	r0, [r2, #0]
 801b7aa:	6851      	ldr	r1, [r2, #4]
 801b7ac:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801b7b0:	463b      	mov	r3, r7
 801b7b2:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801b7b6:	c303      	stmia	r3!, {r0, r1}
 801b7b8:	2100      	movs	r1, #0
 801b7ba:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801b7be:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801b7c2:	4638      	mov	r0, r7
 801b7c4:	910e      	str	r1, [sp, #56]	; 0x38
 801b7c6:	a90e      	add	r1, sp, #56	; 0x38
 801b7c8:	79a2      	ldrb	r2, [r4, #6]
 801b7ca:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b7ce:	f7ff fd49 	bl	801b264 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b7d2:	a90e      	add	r1, sp, #56	; 0x38
 801b7d4:	79a2      	ldrb	r2, [r4, #6]
 801b7d6:	4608      	mov	r0, r1
 801b7d8:	f7ff fd44 	bl	801b264 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b7dc:	4648      	mov	r0, r9
 801b7de:	f001 ff2d 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801b7e2:	6820      	ldr	r0, [r4, #0]
 801b7e4:	6803      	ldr	r3, [r0, #0]
 801b7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7e8:	4798      	blx	r3
 801b7ea:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	4659      	mov	r1, fp
 801b7f0:	4648      	mov	r0, r9
 801b7f2:	f001 ff40 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b7f6:	a82e      	add	r0, sp, #184	; 0xb8
 801b7f8:	f001 ff20 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801b7fc:	f894 8004 	ldrb.w	r8, [r4, #4]
 801b800:	f1b8 0f00 	cmp.w	r8, #0
 801b804:	d009      	beq.n	801b81a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801b806:	6820      	ldr	r0, [r4, #0]
 801b808:	6803      	ldr	r3, [r0, #0]
 801b80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b80c:	4798      	blx	r3
 801b80e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801b810:	4603      	mov	r3, r0
 801b812:	4659      	mov	r1, fp
 801b814:	a82e      	add	r0, sp, #184	; 0xb8
 801b816:	f001 ff2e 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b81a:	6820      	ldr	r0, [r4, #0]
 801b81c:	6803      	ldr	r3, [r0, #0]
 801b81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b820:	4798      	blx	r3
 801b822:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b826:	182e      	adds	r6, r5, r0
 801b828:	2e00      	cmp	r6, #0
 801b82a:	dd45      	ble.n	801b8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801b82c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b830:	4283      	cmp	r3, r0
 801b832:	db41      	blt.n	801b8b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801b834:	441d      	add	r5, r3
 801b836:	fb95 f5f6 	sdiv	r5, r5, r6
 801b83a:	a844      	add	r0, sp, #272	; 0x110
 801b83c:	f001 fefe 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801b840:	7c23      	ldrb	r3, [r4, #16]
 801b842:	b14b      	cbz	r3, 801b858 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801b844:	6820      	ldr	r0, [r4, #0]
 801b846:	6803      	ldr	r3, [r0, #0]
 801b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b84a:	4798      	blx	r3
 801b84c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801b84e:	4603      	mov	r3, r0
 801b850:	4659      	mov	r1, fp
 801b852:	a844      	add	r0, sp, #272	; 0x110
 801b854:	f001 ff0f 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b858:	7c21      	ldrb	r1, [r4, #16]
 801b85a:	a810      	add	r0, sp, #64	; 0x40
 801b85c:	7963      	ldrb	r3, [r4, #5]
 801b85e:	9101      	str	r1, [sp, #4]
 801b860:	6821      	ldr	r1, [r4, #0]
 801b862:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801b866:	9100      	str	r1, [sp, #0]
 801b868:	a944      	add	r1, sp, #272	; 0x110
 801b86a:	f7ff fc8f 	bl	801b18c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b86e:	7c23      	ldrb	r3, [r4, #16]
 801b870:	bb23      	cbnz	r3, 801b8bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801b872:	fa1f fb86 	uxth.w	fp, r6
 801b876:	2d00      	cmp	r5, #0
 801b878:	dd57      	ble.n	801b92a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801b87a:	7961      	ldrb	r1, [r4, #5]
 801b87c:	4648      	mov	r0, r9
 801b87e:	f002 f81f 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b882:	4603      	mov	r3, r0
 801b884:	f1b8 0f00 	cmp.w	r8, #0
 801b888:	d005      	beq.n	801b896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801b88a:	9008      	str	r0, [sp, #32]
 801b88c:	a82e      	add	r0, sp, #184	; 0xb8
 801b88e:	7961      	ldrb	r1, [r4, #5]
 801b890:	f002 f816 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b894:	9b08      	ldr	r3, [sp, #32]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d044      	beq.n	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b89a:	2b0a      	cmp	r3, #10
 801b89c:	d1eb      	bne.n	801b876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801b89e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b8a2:	3d01      	subs	r5, #1
 801b8a4:	445b      	add	r3, fp
 801b8a6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b8aa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b8ae:	eba3 030b 	sub.w	r3, r3, fp
 801b8b2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b8b6:	e7de      	b.n	801b876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801b8b8:	2500      	movs	r5, #0
 801b8ba:	e7be      	b.n	801b83a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801b8bc:	0073      	lsls	r3, r6, #1
 801b8be:	9308      	str	r3, [sp, #32]
 801b8c0:	2d00      	cmp	r5, #0
 801b8c2:	dd32      	ble.n	801b92a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801b8c4:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801b8c8:	a810      	add	r0, sp, #64	; 0x40
 801b8ca:	9b08      	ldr	r3, [sp, #32]
 801b8cc:	428b      	cmp	r3, r1
 801b8ce:	bfd4      	ite	le
 801b8d0:	2100      	movle	r1, #0
 801b8d2:	2101      	movgt	r1, #1
 801b8d4:	f7ff fe6e 	bl	801b5b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b8d8:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801b8dc:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b8e0:	fa1f fb83 	uxth.w	fp, r3
 801b8e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8e8:	459b      	cmp	fp, r3
 801b8ea:	d00b      	beq.n	801b904 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b8ec:	7961      	ldrb	r1, [r4, #5]
 801b8ee:	4648      	mov	r0, r9
 801b8f0:	f001 ffe6 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b8f4:	f1b8 0f00 	cmp.w	r8, #0
 801b8f8:	d0f0      	beq.n	801b8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801b8fa:	7961      	ldrb	r1, [r4, #5]
 801b8fc:	a82e      	add	r0, sp, #184	; 0xb8
 801b8fe:	f001 ffdf 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b902:	e7eb      	b.n	801b8dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801b904:	b2b3      	uxth	r3, r6
 801b906:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b90a:	3d01      	subs	r5, #1
 801b90c:	441a      	add	r2, r3
 801b90e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801b912:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801b916:	1ad3      	subs	r3, r2, r3
 801b918:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b91c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b920:	2b00      	cmp	r3, #0
 801b922:	d1cd      	bne.n	801b8c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801b924:	b05b      	add	sp, #364	; 0x16c
 801b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b92a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801b92e:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801b932:	7c23      	ldrb	r3, [r4, #16]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d05f      	beq.n	801b9f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801b938:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801b93c:	a810      	add	r0, sp, #64	; 0x40
 801b93e:	458b      	cmp	fp, r1
 801b940:	bfd4      	ite	le
 801b942:	2100      	movle	r1, #0
 801b944:	2101      	movgt	r1, #1
 801b946:	f7ff fe35 	bl	801b5b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b94a:	f1b8 0f00 	cmp.w	r8, #0
 801b94e:	d04c      	beq.n	801b9ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801b950:	7c23      	ldrb	r3, [r4, #16]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d053      	beq.n	801b9fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801b956:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801b95a:	7922      	ldrb	r2, [r4, #4]
 801b95c:	2a01      	cmp	r2, #1
 801b95e:	d13c      	bne.n	801b9da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b960:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801b964:	1ac0      	subs	r0, r0, r3
 801b966:	2302      	movs	r3, #2
 801b968:	fb90 f0f3 	sdiv	r0, r0, r3
 801b96c:	b200      	sxth	r0, r0
 801b96e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b972:	4418      	add	r0, r3
 801b974:	7c23      	ldrb	r3, [r4, #16]
 801b976:	8028      	strh	r0, [r5, #0]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d03a      	beq.n	801b9f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801b97c:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801b980:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801b984:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b988:	f8cd 9010 	str.w	r9, [sp, #16]
 801b98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b98e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b992:	2200      	movs	r2, #0
 801b994:	2100      	movs	r1, #0
 801b996:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b99a:	e9cd 5700 	strd	r5, r7, [sp]
 801b99e:	4652      	mov	r2, sl
 801b9a0:	f7ff fcb2 	bl	801b308 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b9a4:	2800      	cmp	r0, #0
 801b9a6:	d1bd      	bne.n	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b9a8:	b2b2      	uxth	r2, r6
 801b9aa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b9ae:	4611      	mov	r1, r2
 801b9b0:	4413      	add	r3, r2
 801b9b2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801b9b6:	b21b      	sxth	r3, r3
 801b9b8:	1a52      	subs	r2, r2, r1
 801b9ba:	7c21      	ldrb	r1, [r4, #16]
 801b9bc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b9c0:	b212      	sxth	r2, r2
 801b9c2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b9c6:	b109      	cbz	r1, 801b9cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801b9c8:	42b2      	cmp	r2, r6
 801b9ca:	dbab      	blt.n	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b9cc:	887a      	ldrh	r2, [r7, #2]
 801b9ce:	88f9      	ldrh	r1, [r7, #6]
 801b9d0:	440a      	add	r2, r1
 801b9d2:	b212      	sxth	r2, r2
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	ddac      	ble.n	801b932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801b9d8:	e7a4      	b.n	801b924 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801b9da:	2a02      	cmp	r2, #2
 801b9dc:	d107      	bne.n	801b9ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801b9de:	7be2      	ldrb	r2, [r4, #15]
 801b9e0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801b9e4:	1a80      	subs	r0, r0, r2
 801b9e6:	1ac0      	subs	r0, r0, r3
 801b9e8:	e7c0      	b.n	801b96c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b9ea:	7be0      	ldrb	r0, [r4, #15]
 801b9ec:	e7bf      	b.n	801b96e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801b9ee:	2000      	movs	r0, #0
 801b9f0:	e7bd      	b.n	801b96e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801b9f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b9f6:	e7c3      	b.n	801b980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801b9f8:	f1b8 0f00 	cmp.w	r8, #0
 801b9fc:	d0f5      	beq.n	801b9ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801b9fe:	2300      	movs	r3, #0
 801ba00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ba04:	6821      	ldr	r1, [r4, #0]
 801ba06:	a82e      	add	r0, sp, #184	; 0xb8
 801ba08:	f7ff fbfa 	bl	801b200 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ba0c:	b203      	sxth	r3, r0
 801ba0e:	e7a4      	b.n	801b95a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801ba10 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ba10:	2b02      	cmp	r3, #2
 801ba12:	b510      	push	{r4, lr}
 801ba14:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ba18:	d00b      	beq.n	801ba32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801ba1a:	2b03      	cmp	r3, #3
 801ba1c:	d00e      	beq.n	801ba3c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801ba1e:	2b01      	cmp	r3, #1
 801ba20:	d001      	beq.n	801ba26 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801ba22:	1860      	adds	r0, r4, r1
 801ba24:	bd10      	pop	{r4, pc}
 801ba26:	8880      	ldrh	r0, [r0, #4]
 801ba28:	4420      	add	r0, r4
 801ba2a:	b200      	sxth	r0, r0
 801ba2c:	1a80      	subs	r0, r0, r2
 801ba2e:	3801      	subs	r0, #1
 801ba30:	e7f8      	b.n	801ba24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801ba32:	8880      	ldrh	r0, [r0, #4]
 801ba34:	4420      	add	r0, r4
 801ba36:	b200      	sxth	r0, r0
 801ba38:	1a40      	subs	r0, r0, r1
 801ba3a:	e7f8      	b.n	801ba2e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ba3c:	18a0      	adds	r0, r4, r2
 801ba3e:	e7f1      	b.n	801ba24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801ba40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ba40:	2b02      	cmp	r3, #2
 801ba42:	b510      	push	{r4, lr}
 801ba44:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801ba48:	d006      	beq.n	801ba58 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801ba4a:	2b03      	cmp	r3, #3
 801ba4c:	d00a      	beq.n	801ba64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ba4e:	2b01      	cmp	r3, #1
 801ba50:	bf14      	ite	ne
 801ba52:	18a0      	addne	r0, r4, r2
 801ba54:	1860      	addeq	r0, r4, r1
 801ba56:	bd10      	pop	{r4, pc}
 801ba58:	88c0      	ldrh	r0, [r0, #6]
 801ba5a:	4420      	add	r0, r4
 801ba5c:	b200      	sxth	r0, r0
 801ba5e:	1a80      	subs	r0, r0, r2
 801ba60:	3801      	subs	r0, #1
 801ba62:	e7f8      	b.n	801ba56 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801ba64:	88c0      	ldrh	r0, [r0, #6]
 801ba66:	4420      	add	r0, r4
 801ba68:	b200      	sxth	r0, r0
 801ba6a:	1a40      	subs	r0, r0, r1
 801ba6c:	e7f8      	b.n	801ba60 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801ba70 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ba70:	4b01      	ldr	r3, [pc, #4]	; (801ba78 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ba72:	2200      	movs	r2, #0
 801ba74:	601a      	str	r2, [r3, #0]
 801ba76:	4770      	bx	lr
 801ba78:	2000bf14 	.word	0x2000bf14

0801ba7c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801ba7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba7e:	1e05      	subs	r5, r0, #0
 801ba80:	f04f 0601 	mov.w	r6, #1
 801ba84:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ba88:	bfba      	itte	lt
 801ba8a:	f04f 37ff 	movlt.w	r7, #4294967295
 801ba8e:	426d      	neglt	r5, r5
 801ba90:	2701      	movge	r7, #1
 801ba92:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801ba96:	f1be 0f00 	cmp.w	lr, #0
 801ba9a:	bfbc      	itt	lt
 801ba9c:	f1ce 0e00 	rsblt	lr, lr, #0
 801baa0:	427f      	neglt	r7, r7
 801baa2:	2c00      	cmp	r4, #0
 801baa4:	fa4e f001 	asr.w	r0, lr, r1
 801baa8:	fa06 f101 	lsl.w	r1, r6, r1
 801baac:	bfbc      	itt	lt
 801baae:	4264      	neglt	r4, r4
 801bab0:	427f      	neglt	r7, r7
 801bab2:	3901      	subs	r1, #1
 801bab4:	ea01 010e 	and.w	r1, r1, lr
 801bab8:	434d      	muls	r5, r1
 801baba:	f8dc 1000 	ldr.w	r1, [ip]
 801babe:	fb03 1300 	mla	r3, r3, r0, r1
 801bac2:	fb95 f1f4 	sdiv	r1, r5, r4
 801bac6:	fb04 5511 	mls	r5, r4, r1, r5
 801baca:	441d      	add	r5, r3
 801bacc:	fb95 f3f4 	sdiv	r3, r5, r4
 801bad0:	4419      	add	r1, r3
 801bad2:	fb04 5413 	mls	r4, r4, r3, r5
 801bad6:	fb02 1000 	mla	r0, r2, r0, r1
 801bada:	f8cc 4000 	str.w	r4, [ip]
 801bade:	4378      	muls	r0, r7
 801bae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bae4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bae8:	4c24      	ldr	r4, [pc, #144]	; (801bb7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801baea:	b086      	sub	sp, #24
 801baec:	4605      	mov	r5, r0
 801baee:	6807      	ldr	r7, [r0, #0]
 801baf0:	69a3      	ldr	r3, [r4, #24]
 801baf2:	b92b      	cbnz	r3, 801bb00 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801baf4:	6840      	ldr	r0, [r0, #4]
 801baf6:	e9c5 7000 	strd	r7, r0, [r5]
 801bafa:	b006      	add	sp, #24
 801bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb00:	f04f 0802 	mov.w	r8, #2
 801bb04:	68a2      	ldr	r2, [r4, #8]
 801bb06:	ae06      	add	r6, sp, #24
 801bb08:	6820      	ldr	r0, [r4, #0]
 801bb0a:	fb93 f1f8 	sdiv	r1, r3, r8
 801bb0e:	440a      	add	r2, r1
 801bb10:	69e1      	ldr	r1, [r4, #28]
 801bb12:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bb16:	9700      	str	r7, [sp, #0]
 801bb18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801bb1a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801bb1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801bb20:	f7ff ffac 	bl	801ba7c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bb24:	69a3      	ldr	r3, [r4, #24]
 801bb26:	4607      	mov	r7, r0
 801bb28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801bb2a:	9301      	str	r3, [sp, #4]
 801bb2c:	686b      	ldr	r3, [r5, #4]
 801bb2e:	6a21      	ldr	r1, [r4, #32]
 801bb30:	9300      	str	r3, [sp, #0]
 801bb32:	9602      	str	r6, [sp, #8]
 801bb34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb36:	6860      	ldr	r0, [r4, #4]
 801bb38:	f7ff ffa0 	bl	801ba7c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bb3c:	69a2      	ldr	r2, [r4, #24]
 801bb3e:	6963      	ldr	r3, [r4, #20]
 801bb40:	4407      	add	r7, r0
 801bb42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bb44:	68e0      	ldr	r0, [r4, #12]
 801bb46:	fb92 f8f8 	sdiv	r8, r2, r8
 801bb4a:	4443      	add	r3, r8
 801bb4c:	9305      	str	r3, [sp, #20]
 801bb4e:	682b      	ldr	r3, [r5, #0]
 801bb50:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801bb54:	9300      	str	r3, [sp, #0]
 801bb56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bb58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bb5a:	f7ff ff8f 	bl	801ba7c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bb5e:	69a3      	ldr	r3, [r4, #24]
 801bb60:	4680      	mov	r8, r0
 801bb62:	9602      	str	r6, [sp, #8]
 801bb64:	9301      	str	r3, [sp, #4]
 801bb66:	686b      	ldr	r3, [r5, #4]
 801bb68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801bb6a:	9300      	str	r3, [sp, #0]
 801bb6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bb6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801bb70:	6920      	ldr	r0, [r4, #16]
 801bb72:	f7ff ff83 	bl	801ba7c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801bb76:	4440      	add	r0, r8
 801bb78:	e7bd      	b.n	801baf6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801bb7a:	bf00      	nop
 801bb7c:	2000bf18 	.word	0x2000bf18

0801bb80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801bb80:	4b07      	ldr	r3, [pc, #28]	; (801bba0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801bb82:	b510      	push	{r4, lr}
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	2b01      	cmp	r3, #1
 801bb88:	d108      	bne.n	801bb9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801bb8a:	4b06      	ldr	r3, [pc, #24]	; (801bba4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801bb8c:	880c      	ldrh	r4, [r1, #0]
 801bb8e:	881b      	ldrh	r3, [r3, #0]
 801bb90:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bb94:	3b01      	subs	r3, #1
 801bb96:	1b1b      	subs	r3, r3, r4
 801bb98:	8003      	strh	r3, [r0, #0]
 801bb9a:	800a      	strh	r2, [r1, #0]
 801bb9c:	bd10      	pop	{r4, pc}
 801bb9e:	bf00      	nop
 801bba0:	2000bee2 	.word	0x2000bee2
 801bba4:	2000bee6 	.word	0x2000bee6

0801bba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801bba8:	4b0a      	ldr	r3, [pc, #40]	; (801bbd4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801bbaa:	b510      	push	{r4, lr}
 801bbac:	781b      	ldrb	r3, [r3, #0]
 801bbae:	2b01      	cmp	r3, #1
 801bbb0:	d10e      	bne.n	801bbd0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801bbb2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801bbb6:	8843      	ldrh	r3, [r0, #2]
 801bbb8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bbbc:	18ca      	adds	r2, r1, r3
 801bbbe:	4b06      	ldr	r3, [pc, #24]	; (801bbd8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801bbc0:	8044      	strh	r4, [r0, #2]
 801bbc2:	881b      	ldrh	r3, [r3, #0]
 801bbc4:	1a9b      	subs	r3, r3, r2
 801bbc6:	8003      	strh	r3, [r0, #0]
 801bbc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bbcc:	8081      	strh	r1, [r0, #4]
 801bbce:	80c3      	strh	r3, [r0, #6]
 801bbd0:	bd10      	pop	{r4, pc}
 801bbd2:	bf00      	nop
 801bbd4:	2000bee2 	.word	0x2000bee2
 801bbd8:	2000bede 	.word	0x2000bede

0801bbdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801bbdc:	4b07      	ldr	r3, [pc, #28]	; (801bbfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801bbde:	b510      	push	{r4, lr}
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d108      	bne.n	801bbf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801bbe6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bbea:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bbee:	8003      	strh	r3, [r0, #0]
 801bbf0:	8893      	ldrh	r3, [r2, #4]
 801bbf2:	3b01      	subs	r3, #1
 801bbf4:	1b1b      	subs	r3, r3, r4
 801bbf6:	800b      	strh	r3, [r1, #0]
 801bbf8:	bd10      	pop	{r4, pc}
 801bbfa:	bf00      	nop
 801bbfc:	2000bee2 	.word	0x2000bee2

0801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bc00:	4b08      	ldr	r3, [pc, #32]	; (801bc24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bc02:	b513      	push	{r0, r1, r4, lr}
 801bc04:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc08:	2400      	movs	r4, #0
 801bc0a:	4b07      	ldr	r3, [pc, #28]	; (801bc28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801bc0c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bc10:	466a      	mov	r2, sp
 801bc12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc16:	9400      	str	r4, [sp, #0]
 801bc18:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bc1c:	f7ff ffde 	bl	801bbdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bc20:	b002      	add	sp, #8
 801bc22:	bd10      	pop	{r4, pc}
 801bc24:	2000bede 	.word	0x2000bede
 801bc28:	2000bee0 	.word	0x2000bee0

0801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bc2c:	4b0a      	ldr	r3, [pc, #40]	; (801bc58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bc2e:	460a      	mov	r2, r1
 801bc30:	b510      	push	{r4, lr}
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	2b01      	cmp	r3, #1
 801bc36:	d10d      	bne.n	801bc54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bc38:	8881      	ldrh	r1, [r0, #4]
 801bc3a:	8803      	ldrh	r3, [r0, #0]
 801bc3c:	440b      	add	r3, r1
 801bc3e:	4601      	mov	r1, r0
 801bc40:	3b01      	subs	r3, #1
 801bc42:	f821 3b02 	strh.w	r3, [r1], #2
 801bc46:	f7ff ffc9 	bl	801bbdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bc4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bc4e:	88c2      	ldrh	r2, [r0, #6]
 801bc50:	80c3      	strh	r3, [r0, #6]
 801bc52:	8082      	strh	r2, [r0, #4]
 801bc54:	bd10      	pop	{r4, pc}
 801bc56:	bf00      	nop
 801bc58:	2000bee2 	.word	0x2000bee2

0801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801bc5c:	4b09      	ldr	r3, [pc, #36]	; (801bc84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801bc5e:	b507      	push	{r0, r1, r2, lr}
 801bc60:	2100      	movs	r1, #0
 801bc62:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bc66:	4b08      	ldr	r3, [pc, #32]	; (801bc88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801bc68:	9100      	str	r1, [sp, #0]
 801bc6a:	4669      	mov	r1, sp
 801bc6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc70:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bc74:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bc78:	f7ff ffd8 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bc7c:	b003      	add	sp, #12
 801bc7e:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc82:	bf00      	nop
 801bc84:	2000bede 	.word	0x2000bede
 801bc88:	2000bee0 	.word	0x2000bee0

0801bc8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bc8c:	4b03      	ldr	r3, [pc, #12]	; (801bc9c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bc8e:	6818      	ldr	r0, [r3, #0]
 801bc90:	b110      	cbz	r0, 801bc98 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bc92:	6803      	ldr	r3, [r0, #0]
 801bc94:	699b      	ldr	r3, [r3, #24]
 801bc96:	4718      	bx	r3
 801bc98:	4770      	bx	lr
 801bc9a:	bf00      	nop
 801bc9c:	2000bf68 	.word	0x2000bf68

0801bca0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bca0:	4770      	bx	lr
	...

0801bca4 <_ZN8touchgfx11Application4drawEv>:
 801bca4:	4b09      	ldr	r3, [pc, #36]	; (801bccc <_ZN8touchgfx11Application4drawEv+0x28>)
 801bca6:	b507      	push	{r0, r1, r2, lr}
 801bca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bcac:	2100      	movs	r1, #0
 801bcae:	4b08      	ldr	r3, [pc, #32]	; (801bcd0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bcb0:	9100      	str	r1, [sp, #0]
 801bcb2:	4669      	mov	r1, sp
 801bcb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bcb8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bcbc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bcc0:	6803      	ldr	r3, [r0, #0]
 801bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcc4:	4798      	blx	r3
 801bcc6:	b003      	add	sp, #12
 801bcc8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bccc:	2000bede 	.word	0x2000bede
 801bcd0:	2000bee0 	.word	0x2000bee0

0801bcd4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bcd4:	4b03      	ldr	r3, [pc, #12]	; (801bce4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bcd6:	6818      	ldr	r0, [r3, #0]
 801bcd8:	b110      	cbz	r0, 801bce0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bcda:	6803      	ldr	r3, [r0, #0]
 801bcdc:	69db      	ldr	r3, [r3, #28]
 801bcde:	4718      	bx	r3
 801bce0:	4770      	bx	lr
 801bce2:	bf00      	nop
 801bce4:	2000bf68 	.word	0x2000bf68

0801bce8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bce8:	4b03      	ldr	r3, [pc, #12]	; (801bcf8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bcea:	6818      	ldr	r0, [r3, #0]
 801bcec:	b110      	cbz	r0, 801bcf4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bcee:	6803      	ldr	r3, [r0, #0]
 801bcf0:	6a1b      	ldr	r3, [r3, #32]
 801bcf2:	4718      	bx	r3
 801bcf4:	4770      	bx	lr
 801bcf6:	bf00      	nop
 801bcf8:	2000bf68 	.word	0x2000bf68

0801bcfc <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bcfc:	4b03      	ldr	r3, [pc, #12]	; (801bd0c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bcfe:	6818      	ldr	r0, [r3, #0]
 801bd00:	b110      	cbz	r0, 801bd08 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bd02:	6803      	ldr	r3, [r0, #0]
 801bd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd06:	4718      	bx	r3
 801bd08:	4770      	bx	lr
 801bd0a:	bf00      	nop
 801bd0c:	2000bf68 	.word	0x2000bf68

0801bd10 <_ZN8touchgfx11Application15handleTickEventEv>:
 801bd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd14:	4d3a      	ldr	r5, [pc, #232]	; (801be00 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801bd16:	4604      	mov	r4, r0
 801bd18:	6828      	ldr	r0, [r5, #0]
 801bd1a:	b140      	cbz	r0, 801bd2e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801bd1c:	7a03      	ldrb	r3, [r0, #8]
 801bd1e:	b933      	cbnz	r3, 801bd2e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801bd20:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801bd24:	6803      	ldr	r3, [r0, #0]
 801bd26:	689b      	ldr	r3, [r3, #8]
 801bd28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd2c:	4718      	bx	r3
 801bd2e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801bd32:	b97b      	cbnz	r3, 801bd54 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801bd34:	b170      	cbz	r0, 801bd54 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801bd36:	7a03      	ldrb	r3, [r0, #8]
 801bd38:	b163      	cbz	r3, 801bd54 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801bd3a:	4b32      	ldr	r3, [pc, #200]	; (801be04 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801bd3c:	6818      	ldr	r0, [r3, #0]
 801bd3e:	b110      	cbz	r0, 801bd46 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801bd40:	6803      	ldr	r3, [r0, #0]
 801bd42:	691b      	ldr	r3, [r3, #16]
 801bd44:	4798      	blx	r3
 801bd46:	6828      	ldr	r0, [r5, #0]
 801bd48:	6803      	ldr	r3, [r0, #0]
 801bd4a:	68db      	ldr	r3, [r3, #12]
 801bd4c:	4798      	blx	r3
 801bd4e:	2301      	movs	r3, #1
 801bd50:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801bd54:	2500      	movs	r5, #0
 801bd56:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801bd5a:	42a8      	cmp	r0, r5
 801bd5c:	dd0c      	ble.n	801bd78 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801bd5e:	1963      	adds	r3, r4, r5
 801bd60:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801bd64:	b132      	cbz	r2, 801bd74 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801bd66:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801bd6a:	4413      	add	r3, r2
 801bd6c:	6858      	ldr	r0, [r3, #4]
 801bd6e:	6803      	ldr	r3, [r0, #0]
 801bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd72:	4798      	blx	r3
 801bd74:	3501      	adds	r5, #1
 801bd76:	e7ee      	b.n	801bd56 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801bd78:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801bd7c:	3801      	subs	r0, #1
 801bd7e:	f04f 0c00 	mov.w	ip, #0
 801bd82:	3678      	adds	r6, #120	; 0x78
 801bd84:	1c43      	adds	r3, r0, #1
 801bd86:	d033      	beq.n	801bdf0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801bd88:	1823      	adds	r3, r4, r0
 801bd8a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801bd8e:	bb6a      	cbnz	r2, 801bdec <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801bd90:	b281      	uxth	r1, r0
 801bd92:	1d25      	adds	r5, r4, #4
 801bd94:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801bd98:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801bd9c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801bda0:	4293      	cmp	r3, r2
 801bda2:	dc0a      	bgt.n	801bdba <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801bda4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801bda8:	4422      	add	r2, r4
 801bdaa:	18b1      	adds	r1, r6, r2
 801bdac:	b289      	uxth	r1, r1
 801bdae:	428b      	cmp	r3, r1
 801bdb0:	d919      	bls.n	801bde6 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801bdb2:	7851      	ldrb	r1, [r2, #1]
 801bdb4:	f802 1b01 	strb.w	r1, [r2], #1
 801bdb8:	e7f7      	b.n	801bdaa <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801bdba:	682f      	ldr	r7, [r5, #0]
 801bdbc:	f105 0804 	add.w	r8, r5, #4
 801bdc0:	45b9      	cmp	r9, r7
 801bdc2:	d10d      	bne.n	801bde0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801bdc4:	4696      	mov	lr, r2
 801bdc6:	f1be 0f1e 	cmp.w	lr, #30
 801bdca:	dc06      	bgt.n	801bdda <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801bdcc:	f10e 0e01 	add.w	lr, lr, #1
 801bdd0:	686f      	ldr	r7, [r5, #4]
 801bdd2:	4573      	cmp	r3, lr
 801bdd4:	f845 7b04 	str.w	r7, [r5], #4
 801bdd8:	dcf5      	bgt.n	801bdc6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801bdda:	3b01      	subs	r3, #1
 801bddc:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801bde0:	3201      	adds	r2, #1
 801bde2:	4645      	mov	r5, r8
 801bde4:	e7da      	b.n	801bd9c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801bde6:	4423      	add	r3, r4
 801bde8:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801bdec:	3801      	subs	r0, #1
 801bdee:	e7c9      	b.n	801bd84 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801bdf0:	4b04      	ldr	r3, [pc, #16]	; (801be04 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801bdf2:	6818      	ldr	r0, [r3, #0]
 801bdf4:	b110      	cbz	r0, 801bdfc <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801bdf6:	6803      	ldr	r3, [r0, #0]
 801bdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdfa:	e795      	b.n	801bd28 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be00:	2000bf6c 	.word	0x2000bf6c
 801be04:	2000bf68 	.word	0x2000bf68

0801be08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801be08:	b570      	push	{r4, r5, r6, lr}
 801be0a:	4606      	mov	r6, r0
 801be0c:	460c      	mov	r4, r1
 801be0e:	b929      	cbnz	r1, 801be1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801be10:	4b0c      	ldr	r3, [pc, #48]	; (801be44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801be12:	2164      	movs	r1, #100	; 0x64
 801be14:	4a0c      	ldr	r2, [pc, #48]	; (801be48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801be16:	480d      	ldr	r0, [pc, #52]	; (801be4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801be18:	f00c f88e 	bl	8027f38 <__assert_func>
 801be1c:	2300      	movs	r3, #0
 801be1e:	4d0c      	ldr	r5, [pc, #48]	; (801be50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801be20:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801be24:	6828      	ldr	r0, [r5, #0]
 801be26:	b110      	cbz	r0, 801be2e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801be28:	6803      	ldr	r3, [r0, #0]
 801be2a:	695b      	ldr	r3, [r3, #20]
 801be2c:	4798      	blx	r3
 801be2e:	602c      	str	r4, [r5, #0]
 801be30:	4620      	mov	r0, r4
 801be32:	6823      	ldr	r3, [r4, #0]
 801be34:	68db      	ldr	r3, [r3, #12]
 801be36:	4798      	blx	r3
 801be38:	6833      	ldr	r3, [r6, #0]
 801be3a:	4630      	mov	r0, r6
 801be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be42:	4718      	bx	r3
 801be44:	0802bfa8 	.word	0x0802bfa8
 801be48:	0802c070 	.word	0x0802c070
 801be4c:	0802bfb2 	.word	0x0802bfb2
 801be50:	2000bf68 	.word	0x2000bf68

0801be54 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801be54:	b510      	push	{r4, lr}
 801be56:	f9b1 4000 	ldrsh.w	r4, [r1]
 801be5a:	888a      	ldrh	r2, [r1, #4]
 801be5c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801be60:	4422      	add	r2, r4
 801be62:	b212      	sxth	r2, r2
 801be64:	4293      	cmp	r3, r2
 801be66:	da15      	bge.n	801be94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801be68:	8882      	ldrh	r2, [r0, #4]
 801be6a:	4413      	add	r3, r2
 801be6c:	b21b      	sxth	r3, r3
 801be6e:	429c      	cmp	r4, r3
 801be70:	da10      	bge.n	801be94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801be72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801be76:	88c9      	ldrh	r1, [r1, #6]
 801be78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801be7c:	4419      	add	r1, r3
 801be7e:	b209      	sxth	r1, r1
 801be80:	428a      	cmp	r2, r1
 801be82:	da07      	bge.n	801be94 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801be84:	88c0      	ldrh	r0, [r0, #6]
 801be86:	4410      	add	r0, r2
 801be88:	b200      	sxth	r0, r0
 801be8a:	4283      	cmp	r3, r0
 801be8c:	bfac      	ite	ge
 801be8e:	2000      	movge	r0, #0
 801be90:	2001      	movlt	r0, #1
 801be92:	bd10      	pop	{r4, pc}
 801be94:	2000      	movs	r0, #0
 801be96:	e7fc      	b.n	801be92 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801be98 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801be98:	b570      	push	{r4, r5, r6, lr}
 801be9a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801be9e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bea2:	42ac      	cmp	r4, r5
 801bea4:	db18      	blt.n	801bed8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bea6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801beaa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801beae:	429a      	cmp	r2, r3
 801beb0:	db12      	blt.n	801bed8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801beb2:	8886      	ldrh	r6, [r0, #4]
 801beb4:	4435      	add	r5, r6
 801beb6:	888e      	ldrh	r6, [r1, #4]
 801beb8:	4434      	add	r4, r6
 801beba:	b22d      	sxth	r5, r5
 801bebc:	b224      	sxth	r4, r4
 801bebe:	42a5      	cmp	r5, r4
 801bec0:	db0a      	blt.n	801bed8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bec2:	88c0      	ldrh	r0, [r0, #6]
 801bec4:	4418      	add	r0, r3
 801bec6:	88cb      	ldrh	r3, [r1, #6]
 801bec8:	441a      	add	r2, r3
 801beca:	b200      	sxth	r0, r0
 801becc:	b212      	sxth	r2, r2
 801bece:	4290      	cmp	r0, r2
 801bed0:	bfb4      	ite	lt
 801bed2:	2000      	movlt	r0, #0
 801bed4:	2001      	movge	r0, #1
 801bed6:	bd70      	pop	{r4, r5, r6, pc}
 801bed8:	2000      	movs	r0, #0
 801beda:	e7fc      	b.n	801bed6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bedc <_ZN8touchgfx11Application11getInstanceEv>:
 801bedc:	4b01      	ldr	r3, [pc, #4]	; (801bee4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bede:	6818      	ldr	r0, [r3, #0]
 801bee0:	4770      	bx	lr
 801bee2:	bf00      	nop
 801bee4:	2000bf78 	.word	0x2000bf78

0801bee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bee8:	2300      	movs	r3, #0
 801beea:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801beee:	30a8      	adds	r0, #168	; 0xa8
 801bef0:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bef4:	f802 3b01 	strb.w	r3, [r2], #1
 801bef8:	4282      	cmp	r2, r0
 801befa:	d1fb      	bne.n	801bef4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801befc:	4770      	bx	lr

0801befe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801befe:	4603      	mov	r3, r0
 801bf00:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bf04:	2200      	movs	r2, #0
 801bf06:	801a      	strh	r2, [r3, #0]
 801bf08:	3308      	adds	r3, #8
 801bf0a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bf0e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bf12:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bf16:	428b      	cmp	r3, r1
 801bf18:	d1f5      	bne.n	801bf06 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bf1a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bf1e:	4770      	bx	lr

0801bf20 <_ZN8touchgfx11ApplicationC1Ev>:
 801bf20:	b570      	push	{r4, r5, r6, lr}
 801bf22:	4b16      	ldr	r3, [pc, #88]	; (801bf7c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801bf24:	2500      	movs	r5, #0
 801bf26:	4604      	mov	r4, r0
 801bf28:	30a8      	adds	r0, #168	; 0xa8
 801bf2a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bf2e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bf32:	f7ff ffe4 	bl	801befe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf36:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bf3a:	f7ff ffe0 	bl	801befe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf3e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801bf42:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801bf46:	490e      	ldr	r1, [pc, #56]	; (801bf80 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801bf48:	480e      	ldr	r0, [pc, #56]	; (801bf84 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801bf4a:	f00a fadb 	bl	8026504 <CRC_Lock>
 801bf4e:	4e0e      	ldr	r6, [pc, #56]	; (801bf88 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801bf50:	4b0e      	ldr	r3, [pc, #56]	; (801bf8c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bf52:	b158      	cbz	r0, 801bf6c <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801bf54:	801d      	strh	r5, [r3, #0]
 801bf56:	2300      	movs	r3, #0
 801bf58:	4a0d      	ldr	r2, [pc, #52]	; (801bf90 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	6013      	str	r3, [r2, #0]
 801bf5e:	4a0d      	ldr	r2, [pc, #52]	; (801bf94 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bf60:	6033      	str	r3, [r6, #0]
 801bf62:	6013      	str	r3, [r2, #0]
 801bf64:	f7ff ffc0 	bl	801bee8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bf68:	4620      	mov	r0, r4
 801bf6a:	bd70      	pop	{r4, r5, r6, pc}
 801bf6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bf70:	2002      	movs	r0, #2
 801bf72:	801a      	strh	r2, [r3, #0]
 801bf74:	6030      	str	r0, [r6, #0]
 801bf76:	f000 ff81 	bl	801ce7c <_ZN8touchgfx6Screen4drawEv>
 801bf7a:	e7ec      	b.n	801bf56 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801bf7c:	0802c03c 	.word	0x0802c03c
 801bf80:	b5e8b5cd 	.word	0xb5e8b5cd
 801bf84:	f407a5c2 	.word	0xf407a5c2
 801bf88:	2000bf68 	.word	0x2000bf68
 801bf8c:	20000080 	.word	0x20000080
 801bf90:	2000bf78 	.word	0x2000bf78
 801bf94:	2000bf6c 	.word	0x2000bf6c

0801bf98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bf98:	2300      	movs	r3, #0
 801bf9a:	8003      	strh	r3, [r0, #0]
 801bf9c:	8043      	strh	r3, [r0, #2]
 801bf9e:	8083      	strh	r3, [r0, #4]
 801bfa0:	80c3      	strh	r3, [r0, #6]
 801bfa2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801bfa6:	4293      	cmp	r3, r2
 801bfa8:	b530      	push	{r4, r5, lr}
 801bfaa:	d912      	bls.n	801bfd2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bfac:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801bfb0:	3b01      	subs	r3, #1
 801bfb2:	6825      	ldr	r5, [r4, #0]
 801bfb4:	b29b      	uxth	r3, r3
 801bfb6:	6005      	str	r5, [r0, #0]
 801bfb8:	4293      	cmp	r3, r2
 801bfba:	6865      	ldr	r5, [r4, #4]
 801bfbc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801bfc0:	6045      	str	r5, [r0, #4]
 801bfc2:	d906      	bls.n	801bfd2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bfc4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801bfc8:	681d      	ldr	r5, [r3, #0]
 801bfca:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801bfce:	685d      	ldr	r5, [r3, #4]
 801bfd0:	6065      	str	r5, [r4, #4]
 801bfd2:	bd30      	pop	{r4, r5, pc}

0801bfd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801bfd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfd6:	466b      	mov	r3, sp
 801bfd8:	4604      	mov	r4, r0
 801bfda:	e883 0006 	stmia.w	r3, {r1, r2}
 801bfde:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801bfe2:	2a07      	cmp	r2, #7
 801bfe4:	d906      	bls.n	801bff4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801bfe6:	4b09      	ldr	r3, [pc, #36]	; (801c00c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801bfe8:	f44f 7102 	mov.w	r1, #520	; 0x208
 801bfec:	4a08      	ldr	r2, [pc, #32]	; (801c010 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801bfee:	4809      	ldr	r0, [pc, #36]	; (801c014 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801bff0:	f00b ffa2 	bl	8027f38 <__assert_func>
 801bff4:	1c51      	adds	r1, r2, #1
 801bff6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bffa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801bffe:	cb03      	ldmia	r3!, {r0, r1}
 801c000:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c004:	6069      	str	r1, [r5, #4]
 801c006:	b003      	add	sp, #12
 801c008:	bd30      	pop	{r4, r5, pc}
 801c00a:	bf00      	nop
 801c00c:	0802bfdc 	.word	0x0802bfdc
 801c010:	0802c0b4 	.word	0x0802c0b4
 801c014:	0802c00b 	.word	0x0802c00b

0801c018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c01c:	b089      	sub	sp, #36	; 0x24
 801c01e:	4606      	mov	r6, r0
 801c020:	466c      	mov	r4, sp
 801c022:	4620      	mov	r0, r4
 801c024:	e884 0006 	stmia.w	r4, {r1, r2}
 801c028:	f7fc fd02 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c02c:	bbb0      	cbnz	r0, 801c09c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c02e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801c032:	b1fd      	cbz	r5, 801c074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801c034:	3d01      	subs	r5, #1
 801c036:	af04      	add	r7, sp, #16
 801c038:	f04f 090a 	mov.w	r9, #10
 801c03c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801c040:	ab02      	add	r3, sp, #8
 801c042:	fa1f f885 	uxth.w	r8, r5
 801c046:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c04a:	6851      	ldr	r1, [r2, #4]
 801c04c:	c303      	stmia	r3!, {r0, r1}
 801c04e:	4621      	mov	r1, r4
 801c050:	a802      	add	r0, sp, #8
 801c052:	f7ff ff21 	bl	801be98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c056:	bb08      	cbnz	r0, 801c09c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801c058:	a902      	add	r1, sp, #8
 801c05a:	4620      	mov	r0, r4
 801c05c:	f7ff ff1c 	bl	801be98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c060:	b1f8      	cbz	r0, 801c0a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801c062:	4642      	mov	r2, r8
 801c064:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c068:	a806      	add	r0, sp, #24
 801c06a:	f7ff ff95 	bl	801bf98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c06e:	f115 35ff 	adds.w	r5, r5, #4294967295
 801c072:	d2e3      	bcs.n	801c03c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801c074:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801c078:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801c07c:	2b08      	cmp	r3, #8
 801c07e:	d108      	bne.n	801c092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801c080:	4629      	mov	r1, r5
 801c082:	a806      	add	r0, sp, #24
 801c084:	2207      	movs	r2, #7
 801c086:	f7ff ff87 	bl	801bf98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c08a:	a906      	add	r1, sp, #24
 801c08c:	4620      	mov	r0, r4
 801c08e:	f7fd feca 	bl	8019e26 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c092:	4628      	mov	r0, r5
 801c094:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c098:	f7ff ff9c 	bl	801bfd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c09c:	b009      	add	sp, #36	; 0x24
 801c09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0a2:	4621      	mov	r1, r4
 801c0a4:	a802      	add	r0, sp, #8
 801c0a6:	f7ff fed5 	bl	801be54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c0aa:	b150      	cbz	r0, 801c0c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801c0ac:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c0b0:	a806      	add	r0, sp, #24
 801c0b2:	4642      	mov	r2, r8
 801c0b4:	f7ff ff70 	bl	801bf98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c0b8:	a902      	add	r1, sp, #8
 801c0ba:	4620      	mov	r0, r4
 801c0bc:	f7fd feb3 	bl	8019e26 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c0c0:	e7d5      	b.n	801c06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c0c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c0c6:	e887 0003 	stmia.w	r7, {r0, r1}
 801c0ca:	a902      	add	r1, sp, #8
 801c0cc:	4638      	mov	r0, r7
 801c0ce:	f7fd feaa 	bl	8019e26 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c0d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c0d6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801c0da:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c0de:	fb13 f302 	smulbb	r3, r3, r2
 801c0e2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c0e6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c0ea:	fb11 f102 	smulbb	r1, r1, r2
 801c0ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801c0f2:	fb09 f303 	mul.w	r3, r9, r3
 801c0f6:	fb12 1100 	smlabb	r1, r2, r0, r1
 801c0fa:	220b      	movs	r2, #11
 801c0fc:	434a      	muls	r2, r1
 801c0fe:	4293      	cmp	r3, r2
 801c100:	dab5      	bge.n	801c06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801c102:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801c106:	a806      	add	r0, sp, #24
 801c108:	4642      	mov	r2, r8
 801c10a:	f7ff ff45 	bl	801bf98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c10e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c112:	e884 0003 	stmia.w	r4, {r0, r1}
 801c116:	e7aa      	b.n	801c06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801c118 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c118:	4b1d      	ldr	r3, [pc, #116]	; (801c190 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c11a:	b530      	push	{r4, r5, lr}
 801c11c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c120:	b085      	sub	sp, #20
 801c122:	4b1c      	ldr	r3, [pc, #112]	; (801c194 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c124:	460c      	mov	r4, r1
 801c126:	2100      	movs	r1, #0
 801c128:	4605      	mov	r5, r0
 801c12a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c12e:	6820      	ldr	r0, [r4, #0]
 801c130:	9100      	str	r1, [sp, #0]
 801c132:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c136:	ab02      	add	r3, sp, #8
 801c138:	6861      	ldr	r1, [r4, #4]
 801c13a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c13e:	c303      	stmia	r3!, {r0, r1}
 801c140:	4669      	mov	r1, sp
 801c142:	a802      	add	r0, sp, #8
 801c144:	f7fc fc30 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801c148:	ab02      	add	r3, sp, #8
 801c14a:	cb03      	ldmia	r3!, {r0, r1}
 801c14c:	4b12      	ldr	r3, [pc, #72]	; (801c198 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c14e:	6020      	str	r0, [r4, #0]
 801c150:	6818      	ldr	r0, [r3, #0]
 801c152:	6061      	str	r1, [r4, #4]
 801c154:	b138      	cbz	r0, 801c166 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c156:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801c15a:	b133      	cbz	r3, 801c16a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c15c:	6821      	ldr	r1, [r4, #0]
 801c15e:	4628      	mov	r0, r5
 801c160:	6862      	ldr	r2, [r4, #4]
 801c162:	f7ff ff59 	bl	801c018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c166:	b005      	add	sp, #20
 801c168:	bd30      	pop	{r4, r5, pc}
 801c16a:	6803      	ldr	r3, [r0, #0]
 801c16c:	4621      	mov	r1, r4
 801c16e:	689b      	ldr	r3, [r3, #8]
 801c170:	4798      	blx	r3
 801c172:	4b0a      	ldr	r3, [pc, #40]	; (801c19c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c174:	6818      	ldr	r0, [r3, #0]
 801c176:	b118      	cbz	r0, 801c180 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c178:	6803      	ldr	r3, [r0, #0]
 801c17a:	4621      	mov	r1, r4
 801c17c:	689b      	ldr	r3, [r3, #8]
 801c17e:	4798      	blx	r3
 801c180:	4b07      	ldr	r3, [pc, #28]	; (801c1a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c182:	4621      	mov	r1, r4
 801c184:	6818      	ldr	r0, [r3, #0]
 801c186:	6803      	ldr	r3, [r0, #0]
 801c188:	695b      	ldr	r3, [r3, #20]
 801c18a:	4798      	blx	r3
 801c18c:	e7eb      	b.n	801c166 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c18e:	bf00      	nop
 801c190:	2000bede 	.word	0x2000bede
 801c194:	2000bee0 	.word	0x2000bee0
 801c198:	2000bf68 	.word	0x2000bf68
 801c19c:	2000bf64 	.word	0x2000bf64
 801c1a0:	2000beec 	.word	0x2000beec

0801c1a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a8:	4604      	mov	r4, r0
 801c1aa:	b09b      	sub	sp, #108	; 0x6c
 801c1ac:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801c1b0:	b129      	cbz	r1, 801c1be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c1b8:	b01b      	add	sp, #108	; 0x6c
 801c1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1be:	4baf      	ldr	r3, [pc, #700]	; (801c47c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	b33b      	cbz	r3, 801c214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c1c4:	4dae      	ldr	r5, [pc, #696]	; (801c480 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	f7fc fc32 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1cc:	4606      	mov	r6, r0
 801c1ce:	bb08      	cbnz	r0, 801c214 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	f7ff fce9 	bl	801bba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c1d6:	6829      	ldr	r1, [r5, #0]
 801c1d8:	686a      	ldr	r2, [r5, #4]
 801c1da:	4620      	mov	r0, r4
 801c1dc:	f7ff ff1c 	bl	801c018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c1e0:	802e      	strh	r6, [r5, #0]
 801c1e2:	806e      	strh	r6, [r5, #2]
 801c1e4:	80ae      	strh	r6, [r5, #4]
 801c1e6:	80ee      	strh	r6, [r5, #6]
 801c1e8:	4fa6      	ldr	r7, [pc, #664]	; (801c484 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c1ea:	a809      	add	r0, sp, #36	; 0x24
 801c1ec:	f7ff fe87 	bl	801befe <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c1f0:	883d      	ldrh	r5, [r7, #0]
 801c1f2:	462e      	mov	r6, r5
 801c1f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c1f8:	42b3      	cmp	r3, r6
 801c1fa:	d910      	bls.n	801c21e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801c1fc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c200:	3601      	adds	r6, #1
 801c202:	a809      	add	r0, sp, #36	; 0x24
 801c204:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c208:	b2b6      	uxth	r6, r6
 801c20a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c20e:	f7ff fee1 	bl	801bfd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c212:	e7ef      	b.n	801c1f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801c214:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d1e5      	bne.n	801c1e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801c21c:	e7cc      	b.n	801c1b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c21e:	462e      	mov	r6, r5
 801c220:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c224:	42b3      	cmp	r3, r6
 801c226:	d90b      	bls.n	801c240 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c228:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c22c:	3601      	adds	r6, #1
 801c22e:	4620      	mov	r0, r4
 801c230:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c234:	b2b6      	uxth	r6, r6
 801c236:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c23a:	f7ff feed 	bl	801c018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c23e:	e7ef      	b.n	801c220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801c240:	4e91      	ldr	r6, [pc, #580]	; (801c488 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c242:	6833      	ldr	r3, [r6, #0]
 801c244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c248:	2b01      	cmp	r3, #1
 801c24a:	f040 8092 	bne.w	801c372 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801c24e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c252:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c256:	f04f 0900 	mov.w	r9, #0
 801c25a:	33aa      	adds	r3, #170	; 0xaa
 801c25c:	42a8      	cmp	r0, r5
 801c25e:	f103 0308 	add.w	r3, r3, #8
 801c262:	dd0a      	ble.n	801c27a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801c264:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c268:	3501      	adds	r5, #1
 801c26a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c26e:	440a      	add	r2, r1
 801c270:	b212      	sxth	r2, r2
 801c272:	4591      	cmp	r9, r2
 801c274:	bfb8      	it	lt
 801c276:	4691      	movlt	r9, r2
 801c278:	e7f0      	b.n	801c25c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801c27a:	4b84      	ldr	r3, [pc, #528]	; (801c48c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c27c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801c494 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801c280:	881d      	ldrh	r5, [r3, #0]
 801c282:	2300      	movs	r3, #0
 801c284:	2d0f      	cmp	r5, #15
 801c286:	bf8c      	ite	hi
 801c288:	08ed      	lsrhi	r5, r5, #3
 801c28a:	2501      	movls	r5, #1
 801c28c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c290:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c294:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c298:	6830      	ldr	r0, [r6, #0]
 801c29a:	440b      	add	r3, r1
 801c29c:	6802      	ldr	r2, [r0, #0]
 801c29e:	b21b      	sxth	r3, r3
 801c2a0:	4599      	cmp	r9, r3
 801c2a2:	dd49      	ble.n	801c338 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801c2a4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801c2a8:	4798      	blx	r3
 801c2aa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c2ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c2b2:	4413      	add	r3, r2
 801c2b4:	b21b      	sxth	r3, r3
 801c2b6:	195a      	adds	r2, r3, r5
 801c2b8:	4290      	cmp	r0, r2
 801c2ba:	da07      	bge.n	801c2cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c2bc:	4581      	cmp	r9, r0
 801c2be:	dd05      	ble.n	801c2cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801c2c0:	4298      	cmp	r0, r3
 801c2c2:	da33      	bge.n	801c32c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	dd31      	ble.n	801c32c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801c2c8:	4648      	mov	r0, r9
 801c2ca:	e004      	b.n	801c2d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801c2cc:	4298      	cmp	r0, r3
 801c2ce:	dbfb      	blt.n	801c2c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801c2d0:	4548      	cmp	r0, r9
 801c2d2:	bfa8      	it	ge
 801c2d4:	4648      	movge	r0, r9
 801c2d6:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c2da:	2100      	movs	r1, #0
 801c2dc:	1ac0      	subs	r0, r0, r3
 801c2de:	f8b7 a000 	ldrh.w	sl, [r7]
 801c2e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c2e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2ea:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c2ee:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c2f2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c2f6:	4553      	cmp	r3, sl
 801c2f8:	d9ca      	bls.n	801c290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c2fa:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c2fe:	ab07      	add	r3, sp, #28
 801c300:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c304:	6851      	ldr	r1, [r2, #4]
 801c306:	c303      	stmia	r3!, {r0, r1}
 801c308:	a807      	add	r0, sp, #28
 801c30a:	a905      	add	r1, sp, #20
 801c30c:	f7fc fb4c 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801c310:	a807      	add	r0, sp, #28
 801c312:	f7fc fb8d 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c316:	b920      	cbnz	r0, 801c322 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801c318:	6823      	ldr	r3, [r4, #0]
 801c31a:	a907      	add	r1, sp, #28
 801c31c:	4620      	mov	r0, r4
 801c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c320:	4798      	blx	r3
 801c322:	f10a 0a01 	add.w	sl, sl, #1
 801c326:	fa1f fa8a 	uxth.w	sl, sl
 801c32a:	e7e2      	b.n	801c2f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801c32c:	6830      	ldr	r0, [r6, #0]
 801c32e:	2101      	movs	r1, #1
 801c330:	6803      	ldr	r3, [r0, #0]
 801c332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c334:	4798      	blx	r3
 801c336:	e7ab      	b.n	801c290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801c338:	69d3      	ldr	r3, [r2, #28]
 801c33a:	4798      	blx	r3
 801c33c:	4b54      	ldr	r3, [pc, #336]	; (801c490 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c33e:	781b      	ldrb	r3, [r3, #0]
 801c340:	2b00      	cmp	r3, #0
 801c342:	f43f af39 	beq.w	801c1b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c346:	2300      	movs	r3, #0
 801c348:	883d      	ldrh	r5, [r7, #0]
 801c34a:	34ea      	adds	r4, #234	; 0xea
 801c34c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c350:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c354:	42ab      	cmp	r3, r5
 801c356:	f67f af2f 	bls.w	801c1b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c35a:	ab1a      	add	r3, sp, #104	; 0x68
 801c35c:	4620      	mov	r0, r4
 801c35e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c362:	3501      	adds	r5, #1
 801c364:	3b44      	subs	r3, #68	; 0x44
 801c366:	b2ad      	uxth	r5, r5
 801c368:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c36c:	f7ff fe32 	bl	801bfd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c370:	e7ee      	b.n	801c350 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801c372:	2b02      	cmp	r3, #2
 801c374:	d16a      	bne.n	801c44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801c376:	f8df a120 	ldr.w	sl, [pc, #288]	; 801c498 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c37a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c37e:	42ab      	cmp	r3, r5
 801c380:	d9dc      	bls.n	801c33c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801c382:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c386:	ab03      	add	r3, sp, #12
 801c388:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c38c:	6851      	ldr	r1, [r2, #4]
 801c38e:	c303      	stmia	r3!, {r0, r1}
 801c390:	f89a 3000 	ldrb.w	r3, [sl]
 801c394:	2b01      	cmp	r3, #1
 801c396:	d102      	bne.n	801c39e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801c398:	a803      	add	r0, sp, #12
 801c39a:	f7ff fc5f 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c39e:	a803      	add	r0, sp, #12
 801c3a0:	f7fc fb46 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3a4:	2800      	cmp	r0, #0
 801c3a6:	d14a      	bne.n	801c43e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801c3a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c3ac:	f10d 0914 	add.w	r9, sp, #20
 801c3b0:	f10d 081c 	add.w	r8, sp, #28
 801c3b4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c3b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c3bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801c3c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c3c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c3c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c3cc:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801c3d0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801c3d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c3d8:	44dc      	add	ip, fp
 801c3da:	6830      	ldr	r0, [r6, #0]
 801c3dc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c3e0:	ebac 0c02 	sub.w	ip, ip, r2
 801c3e4:	f8d0 e000 	ldr.w	lr, [r0]
 801c3e8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c3ec:	fa1f fc8c 	uxth.w	ip, ip
 801c3f0:	f8cd c000 	str.w	ip, [sp]
 801c3f4:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801c3f8:	47d8      	blx	fp
 801c3fa:	f89a 3000 	ldrb.w	r3, [sl]
 801c3fe:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c402:	2b01      	cmp	r3, #1
 801c404:	d11e      	bne.n	801c444 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801c406:	e899 0003 	ldmia.w	r9, {r0, r1}
 801c40a:	e888 0003 	stmia.w	r8, {r0, r1}
 801c40e:	4640      	mov	r0, r8
 801c410:	f7ff fbca 	bl	801bba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c414:	6823      	ldr	r3, [r4, #0]
 801c416:	4641      	mov	r1, r8
 801c418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c41a:	4620      	mov	r0, r4
 801c41c:	4798      	blx	r3
 801c41e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c422:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c426:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801c42a:	4413      	add	r3, r2
 801c42c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801c430:	440a      	add	r2, r1
 801c432:	b21b      	sxth	r3, r3
 801c434:	b212      	sxth	r2, r2
 801c436:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c43a:	4293      	cmp	r3, r2
 801c43c:	dbc6      	blt.n	801c3cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801c43e:	3501      	adds	r5, #1
 801c440:	b2ad      	uxth	r5, r5
 801c442:	e79a      	b.n	801c37a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801c444:	6823      	ldr	r3, [r4, #0]
 801c446:	4649      	mov	r1, r9
 801c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c44a:	e7e6      	b.n	801c41a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c44c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c450:	42ab      	cmp	r3, r5
 801c452:	f67f af73 	bls.w	801c33c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801c456:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c45a:	ab07      	add	r3, sp, #28
 801c45c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c460:	6851      	ldr	r1, [r2, #4]
 801c462:	c303      	stmia	r3!, {r0, r1}
 801c464:	a807      	add	r0, sp, #28
 801c466:	f7fc fae3 	bl	8018a30 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c46a:	b920      	cbnz	r0, 801c476 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801c46c:	6823      	ldr	r3, [r4, #0]
 801c46e:	a907      	add	r1, sp, #28
 801c470:	4620      	mov	r0, r4
 801c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c474:	4798      	blx	r3
 801c476:	3501      	adds	r5, #1
 801c478:	b2ad      	uxth	r5, r5
 801c47a:	e7e7      	b.n	801c44c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801c47c:	2000bf64 	.word	0x2000bf64
 801c480:	2000bf70 	.word	0x2000bf70
 801c484:	20000080 	.word	0x20000080
 801c488:	2000beec 	.word	0x2000beec
 801c48c:	2000bee0 	.word	0x2000bee0
 801c490:	2000bee8 	.word	0x2000bee8
 801c494:	2000bede 	.word	0x2000bede
 801c498:	2000bee2 	.word	0x2000bee2

0801c49c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c49c:	4b03      	ldr	r3, [pc, #12]	; (801c4ac <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c49e:	2200      	movs	r2, #0
 801c4a0:	801a      	strh	r2, [r3, #0]
 801c4a2:	805a      	strh	r2, [r3, #2]
 801c4a4:	809a      	strh	r2, [r3, #4]
 801c4a6:	80da      	strh	r2, [r3, #6]
 801c4a8:	4770      	bx	lr
 801c4aa:	bf00      	nop
 801c4ac:	2000bf70 	.word	0x2000bf70

0801c4b0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801c4b0:	2000      	movs	r0, #0
 801c4b2:	4770      	bx	lr

0801c4b4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801c4b4:	2000      	movs	r0, #0
 801c4b6:	4770      	bx	lr

0801c4b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c4b8:	b508      	push	{r3, lr}
 801c4ba:	6803      	ldr	r3, [r0, #0]
 801c4bc:	68db      	ldr	r3, [r3, #12]
 801c4be:	4798      	blx	r3
 801c4c0:	b128      	cbz	r0, 801c4ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c4c2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801c4c6:	7a80      	ldrb	r0, [r0, #10]
 801c4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c4cc:	4318      	orrs	r0, r3
 801c4ce:	bd08      	pop	{r3, pc}

0801c4d0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801c4d0:	b40e      	push	{r1, r2, r3}
 801c4d2:	b533      	push	{r0, r1, r4, r5, lr}
 801c4d4:	ab05      	add	r3, sp, #20
 801c4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4da:	9301      	str	r3, [sp, #4]
 801c4dc:	4b0a      	ldr	r3, [pc, #40]	; (801c508 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801c4de:	685c      	ldr	r4, [r3, #4]
 801c4e0:	1061      	asrs	r1, r4, #1
 801c4e2:	07e4      	lsls	r4, r4, #31
 801c4e4:	eb00 0501 	add.w	r5, r0, r1
 801c4e8:	bf46      	itte	mi
 801c4ea:	681b      	ldrmi	r3, [r3, #0]
 801c4ec:	5841      	ldrmi	r1, [r0, r1]
 801c4ee:	681c      	ldrpl	r4, [r3, #0]
 801c4f0:	4628      	mov	r0, r5
 801c4f2:	bf48      	it	mi
 801c4f4:	58cc      	ldrmi	r4, [r1, r3]
 801c4f6:	2100      	movs	r1, #0
 801c4f8:	9b01      	ldr	r3, [sp, #4]
 801c4fa:	47a0      	blx	r4
 801c4fc:	b002      	add	sp, #8
 801c4fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c502:	b003      	add	sp, #12
 801c504:	4770      	bx	lr
 801c506:	bf00      	nop
 801c508:	20000028 	.word	0x20000028

0801c50c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801c50c:	b40c      	push	{r2, r3}
 801c50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c510:	ab06      	add	r3, sp, #24
 801c512:	f853 2b04 	ldr.w	r2, [r3], #4
 801c516:	9301      	str	r3, [sp, #4]
 801c518:	4b09      	ldr	r3, [pc, #36]	; (801c540 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801c51a:	685d      	ldr	r5, [r3, #4]
 801c51c:	106c      	asrs	r4, r5, #1
 801c51e:	07ed      	lsls	r5, r5, #31
 801c520:	eb00 0604 	add.w	r6, r0, r4
 801c524:	bf45      	ittet	mi
 801c526:	681b      	ldrmi	r3, [r3, #0]
 801c528:	5900      	ldrmi	r0, [r0, r4]
 801c52a:	681c      	ldrpl	r4, [r3, #0]
 801c52c:	58c4      	ldrmi	r4, [r0, r3]
 801c52e:	4630      	mov	r0, r6
 801c530:	9b01      	ldr	r3, [sp, #4]
 801c532:	47a0      	blx	r4
 801c534:	b002      	add	sp, #8
 801c536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c53a:	b002      	add	sp, #8
 801c53c:	4770      	bx	lr
 801c53e:	bf00      	nop
 801c540:	20000028 	.word	0x20000028

0801c544 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c544:	b40e      	push	{r1, r2, r3}
 801c546:	b530      	push	{r4, r5, lr}
 801c548:	b098      	sub	sp, #96	; 0x60
 801c54a:	4604      	mov	r4, r0
 801c54c:	ab1b      	add	r3, sp, #108	; 0x6c
 801c54e:	a802      	add	r0, sp, #8
 801c550:	f853 5b04 	ldr.w	r5, [r3], #4
 801c554:	9301      	str	r3, [sp, #4]
 801c556:	f001 f871 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801c55a:	6823      	ldr	r3, [r4, #0]
 801c55c:	4620      	mov	r0, r4
 801c55e:	2401      	movs	r4, #1
 801c560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c562:	4798      	blx	r3
 801c564:	9a01      	ldr	r2, [sp, #4]
 801c566:	4603      	mov	r3, r0
 801c568:	4629      	mov	r1, r5
 801c56a:	a802      	add	r0, sp, #8
 801c56c:	f001 f883 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c570:	a802      	add	r0, sp, #8
 801c572:	f001 f8b9 	bl	801d6e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c576:	b2a3      	uxth	r3, r4
 801c578:	b138      	cbz	r0, 801c58a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801c57a:	280a      	cmp	r0, #10
 801c57c:	a802      	add	r0, sp, #8
 801c57e:	bf04      	itt	eq
 801c580:	3301      	addeq	r3, #1
 801c582:	b21c      	sxtheq	r4, r3
 801c584:	f001 f8b0 	bl	801d6e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c588:	e7f5      	b.n	801c576 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801c58a:	4618      	mov	r0, r3
 801c58c:	b018      	add	sp, #96	; 0x60
 801c58e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c592:	b003      	add	sp, #12
 801c594:	4770      	bx	lr
	...

0801c598 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c598:	b40e      	push	{r1, r2, r3}
 801c59a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c59c:	b098      	sub	sp, #96	; 0x60
 801c59e:	4605      	mov	r5, r0
 801c5a0:	4f25      	ldr	r7, [pc, #148]	; (801c638 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801c5a2:	ab1d      	add	r3, sp, #116	; 0x74
 801c5a4:	a802      	add	r0, sp, #8
 801c5a6:	ae18      	add	r6, sp, #96	; 0x60
 801c5a8:	f853 4b04 	ldr.w	r4, [r3], #4
 801c5ac:	9300      	str	r3, [sp, #0]
 801c5ae:	f001 f845 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801c5b2:	682b      	ldr	r3, [r5, #0]
 801c5b4:	4628      	mov	r0, r5
 801c5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5b8:	4798      	blx	r3
 801c5ba:	4621      	mov	r1, r4
 801c5bc:	2400      	movs	r4, #0
 801c5be:	4603      	mov	r3, r0
 801c5c0:	9a00      	ldr	r2, [sp, #0]
 801c5c2:	a802      	add	r0, sp, #8
 801c5c4:	f001 f857 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c5c8:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801c5cc:	462a      	mov	r2, r5
 801c5ce:	4633      	mov	r3, r6
 801c5d0:	4621      	mov	r1, r4
 801c5d2:	a802      	add	r0, sp, #8
 801c5d4:	f001 f9b4 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c5d8:	b340      	cbz	r0, 801c62c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801c5da:	280a      	cmp	r0, #10
 801c5dc:	d01f      	beq.n	801c61e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c5de:	9901      	ldr	r1, [sp, #4]
 801c5e0:	b1e9      	cbz	r1, 801c61e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c5e2:	7b4b      	ldrb	r3, [r1, #13]
 801c5e4:	f891 c008 	ldrb.w	ip, [r1, #8]
 801c5e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c5ec:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801c5f0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801c5f4:	79c9      	ldrb	r1, [r1, #7]
 801c5f6:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801c5fa:	bf18      	it	ne
 801c5fc:	4638      	movne	r0, r7
 801c5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c602:	bf08      	it	eq
 801c604:	2000      	moveq	r0, #0
 801c606:	88aa      	ldrh	r2, [r5, #4]
 801c608:	ea41 010e 	orr.w	r1, r1, lr
 801c60c:	ea43 030c 	orr.w	r3, r3, ip
 801c610:	440a      	add	r2, r1
 801c612:	4303      	orrs	r3, r0
 801c614:	1ad3      	subs	r3, r2, r3
 801c616:	b29b      	uxth	r3, r3
 801c618:	42a3      	cmp	r3, r4
 801c61a:	bfc8      	it	gt
 801c61c:	b21c      	sxthgt	r4, r3
 801c61e:	4633      	mov	r3, r6
 801c620:	462a      	mov	r2, r5
 801c622:	2100      	movs	r1, #0
 801c624:	a802      	add	r0, sp, #8
 801c626:	f001 f98b 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c62a:	e7d5      	b.n	801c5d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801c62c:	b2a0      	uxth	r0, r4
 801c62e:	b018      	add	sp, #96	; 0x60
 801c630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c634:	b003      	add	sp, #12
 801c636:	4770      	bx	lr
 801c638:	fffffe00 	.word	0xfffffe00

0801c63c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c63c:	b40e      	push	{r1, r2, r3}
 801c63e:	b570      	push	{r4, r5, r6, lr}
 801c640:	b099      	sub	sp, #100	; 0x64
 801c642:	4604      	mov	r4, r0
 801c644:	26ff      	movs	r6, #255	; 0xff
 801c646:	ab1d      	add	r3, sp, #116	; 0x74
 801c648:	a802      	add	r0, sp, #8
 801c64a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c64e:	9300      	str	r3, [sp, #0]
 801c650:	f000 fff4 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801c654:	6823      	ldr	r3, [r4, #0]
 801c656:	4620      	mov	r0, r4
 801c658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c65a:	4798      	blx	r3
 801c65c:	4629      	mov	r1, r5
 801c65e:	4603      	mov	r3, r0
 801c660:	9a00      	ldr	r2, [sp, #0]
 801c662:	a802      	add	r0, sp, #8
 801c664:	ad18      	add	r5, sp, #96	; 0x60
 801c666:	f001 f806 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c66a:	2100      	movs	r1, #0
 801c66c:	4622      	mov	r2, r4
 801c66e:	a802      	add	r0, sp, #8
 801c670:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801c674:	462b      	mov	r3, r5
 801c676:	f001 f963 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c67a:	b190      	cbz	r0, 801c6a2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801c67c:	280a      	cmp	r0, #10
 801c67e:	d009      	beq.n	801c694 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801c680:	9a01      	ldr	r2, [sp, #4]
 801c682:	b13a      	cbz	r2, 801c694 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801c684:	7923      	ldrb	r3, [r4, #4]
 801c686:	7a12      	ldrb	r2, [r2, #8]
 801c688:	1a9b      	subs	r3, r3, r2
 801c68a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801c68e:	429e      	cmp	r6, r3
 801c690:	bf28      	it	cs
 801c692:	461e      	movcs	r6, r3
 801c694:	462b      	mov	r3, r5
 801c696:	4622      	mov	r2, r4
 801c698:	2100      	movs	r1, #0
 801c69a:	a802      	add	r0, sp, #8
 801c69c:	f001 f950 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c6a0:	e7eb      	b.n	801c67a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801c6a2:	4630      	mov	r0, r6
 801c6a4:	b019      	add	sp, #100	; 0x64
 801c6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6aa:	b003      	add	sp, #12
 801c6ac:	4770      	bx	lr

0801c6ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c6ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6b2:	b099      	sub	sp, #100	; 0x64
 801c6b4:	4606      	mov	r6, r0
 801c6b6:	4614      	mov	r4, r2
 801c6b8:	4688      	mov	r8, r1
 801c6ba:	a802      	add	r0, sp, #8
 801c6bc:	461d      	mov	r5, r3
 801c6be:	f04f 0b00 	mov.w	fp, #0
 801c6c2:	f000 ffbb 	bl	801d63c <_ZN8touchgfx12TextProviderC1Ev>
 801c6c6:	6833      	ldr	r3, [r6, #0]
 801c6c8:	4630      	mov	r0, r6
 801c6ca:	465f      	mov	r7, fp
 801c6cc:	46da      	mov	sl, fp
 801c6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6d0:	46d9      	mov	r9, fp
 801c6d2:	4798      	blx	r3
 801c6d4:	462a      	mov	r2, r5
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	4621      	mov	r1, r4
 801c6da:	a802      	add	r0, sp, #8
 801c6dc:	f000 ffcb 	bl	801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801c6e0:	ab01      	add	r3, sp, #4
 801c6e2:	4632      	mov	r2, r6
 801c6e4:	4641      	mov	r1, r8
 801c6e6:	a802      	add	r0, sp, #8
 801c6e8:	f8cd 9004 	str.w	r9, [sp, #4]
 801c6ec:	f001 f928 	bl	801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c6f0:	4605      	mov	r5, r0
 801c6f2:	b108      	cbz	r0, 801c6f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801c6f4:	280a      	cmp	r0, #10
 801c6f6:	d10b      	bne.n	801c710 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801c6f8:	4557      	cmp	r7, sl
 801c6fa:	bf38      	it	cc
 801c6fc:	4657      	movcc	r7, sl
 801c6fe:	f04f 0a00 	mov.w	sl, #0
 801c702:	b91d      	cbnz	r5, 801c70c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801c704:	4638      	mov	r0, r7
 801c706:	b019      	add	sp, #100	; 0x64
 801c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c70c:	46ab      	mov	fp, r5
 801c70e:	e7e7      	b.n	801c6e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801c710:	9a01      	ldr	r2, [sp, #4]
 801c712:	2a00      	cmp	r2, #0
 801c714:	d0fa      	beq.n	801c70c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801c716:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801c71a:	4659      	mov	r1, fp
 801c71c:	6833      	ldr	r3, [r6, #0]
 801c71e:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801c722:	7a94      	ldrb	r4, [r2, #10]
 801c724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c726:	4304      	orrs	r4, r0
 801c728:	4630      	mov	r0, r6
 801c72a:	8895      	ldrh	r5, [r2, #4]
 801c72c:	4798      	blx	r3
 801c72e:	4420      	add	r0, r4
 801c730:	4450      	add	r0, sl
 801c732:	fa1f fa80 	uxth.w	sl, r0
 801c736:	e7e4      	b.n	801c702 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801c738 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c738:	b513      	push	{r0, r1, r4, lr}
 801c73a:	1d01      	adds	r1, r0, #4
 801c73c:	4603      	mov	r3, r0
 801c73e:	466a      	mov	r2, sp
 801c740:	c903      	ldmia	r1, {r0, r1}
 801c742:	e882 0003 	stmia.w	r2, {r0, r1}
 801c746:	2100      	movs	r1, #0
 801c748:	4618      	mov	r0, r3
 801c74a:	9100      	str	r1, [sp, #0]
 801c74c:	6819      	ldr	r1, [r3, #0]
 801c74e:	690c      	ldr	r4, [r1, #16]
 801c750:	4611      	mov	r1, r2
 801c752:	47a0      	blx	r4
 801c754:	b002      	add	sp, #8
 801c756:	bd10      	pop	{r4, pc}

0801c758 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c758:	b538      	push	{r3, r4, r5, lr}
 801c75a:	680b      	ldr	r3, [r1, #0]
 801c75c:	460c      	mov	r4, r1
 801c75e:	4605      	mov	r5, r0
 801c760:	68db      	ldr	r3, [r3, #12]
 801c762:	4798      	blx	r3
 801c764:	6823      	ldr	r3, [r4, #0]
 801c766:	4620      	mov	r0, r4
 801c768:	4629      	mov	r1, r5
 801c76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c76c:	4798      	blx	r3
 801c76e:	4628      	mov	r0, r5
 801c770:	bd38      	pop	{r3, r4, r5, pc}

0801c772 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c772:	b410      	push	{r4}
 801c774:	880a      	ldrh	r2, [r1, #0]
 801c776:	8884      	ldrh	r4, [r0, #4]
 801c778:	4422      	add	r2, r4
 801c77a:	800a      	strh	r2, [r1, #0]
 801c77c:	884a      	ldrh	r2, [r1, #2]
 801c77e:	88c4      	ldrh	r4, [r0, #6]
 801c780:	4422      	add	r2, r4
 801c782:	804a      	strh	r2, [r1, #2]
 801c784:	6940      	ldr	r0, [r0, #20]
 801c786:	b120      	cbz	r0, 801c792 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c788:	6803      	ldr	r3, [r0, #0]
 801c78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c790:	4718      	bx	r3
 801c792:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c796:	4770      	bx	lr

0801c798 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c79a:	460b      	mov	r3, r1
 801c79c:	b085      	sub	sp, #20
 801c79e:	4604      	mov	r4, r0
 801c7a0:	b901      	cbnz	r1, 801c7a4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c7a2:	b1fa      	cbz	r2, 801c7e4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801c7a4:	1d27      	adds	r7, r4, #4
 801c7a6:	466e      	mov	r6, sp
 801c7a8:	ad02      	add	r5, sp, #8
 801c7aa:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c7ae:	e886 0003 	stmia.w	r6, {r0, r1}
 801c7b2:	88e1      	ldrh	r1, [r4, #6]
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	440a      	add	r2, r1
 801c7b8:	88a1      	ldrh	r1, [r4, #4]
 801c7ba:	4419      	add	r1, r3
 801c7bc:	6823      	ldr	r3, [r4, #0]
 801c7be:	b212      	sxth	r2, r2
 801c7c0:	b209      	sxth	r1, r1
 801c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c7c4:	4798      	blx	r3
 801c7c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c7ca:	e885 0003 	stmia.w	r5, {r0, r1}
 801c7ce:	6960      	ldr	r0, [r4, #20]
 801c7d0:	b150      	cbz	r0, 801c7e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801c7d2:	6803      	ldr	r3, [r0, #0]
 801c7d4:	4631      	mov	r1, r6
 801c7d6:	691b      	ldr	r3, [r3, #16]
 801c7d8:	4798      	blx	r3
 801c7da:	6960      	ldr	r0, [r4, #20]
 801c7dc:	6803      	ldr	r3, [r0, #0]
 801c7de:	691b      	ldr	r3, [r3, #16]
 801c7e0:	4629      	mov	r1, r5
 801c7e2:	4798      	blx	r3
 801c7e4:	b005      	add	sp, #20
 801c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7e8:	f7ff fb78 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 801c7ec:	6803      	ldr	r3, [r0, #0]
 801c7ee:	4631      	mov	r1, r6
 801c7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7f2:	4798      	blx	r3
 801c7f4:	f7ff fb72 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 801c7f8:	6803      	ldr	r3, [r0, #0]
 801c7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7fc:	e7f0      	b.n	801c7e0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801c7fe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c7fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c800:	8882      	ldrh	r2, [r0, #4]
 801c802:	4605      	mov	r5, r0
 801c804:	880b      	ldrh	r3, [r1, #0]
 801c806:	460c      	mov	r4, r1
 801c808:	4413      	add	r3, r2
 801c80a:	800b      	strh	r3, [r1, #0]
 801c80c:	884b      	ldrh	r3, [r1, #2]
 801c80e:	88c2      	ldrh	r2, [r0, #6]
 801c810:	4413      	add	r3, r2
 801c812:	4602      	mov	r2, r0
 801c814:	804b      	strh	r3, [r1, #2]
 801c816:	466b      	mov	r3, sp
 801c818:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801c81c:	6851      	ldr	r1, [r2, #4]
 801c81e:	c303      	stmia	r3!, {r0, r1}
 801c820:	4621      	mov	r1, r4
 801c822:	4668      	mov	r0, sp
 801c824:	f7fc f8c0 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801c828:	466b      	mov	r3, sp
 801c82a:	cb03      	ldmia	r3!, {r0, r1}
 801c82c:	6020      	str	r0, [r4, #0]
 801c82e:	6061      	str	r1, [r4, #4]
 801c830:	6968      	ldr	r0, [r5, #20]
 801c832:	b128      	cbz	r0, 801c840 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801c834:	6803      	ldr	r3, [r0, #0]
 801c836:	691b      	ldr	r3, [r3, #16]
 801c838:	4621      	mov	r1, r4
 801c83a:	4798      	blx	r3
 801c83c:	b003      	add	sp, #12
 801c83e:	bd30      	pop	{r4, r5, pc}
 801c840:	f7ff fb4c 	bl	801bedc <_ZN8touchgfx11Application11getInstanceEv>
 801c844:	6803      	ldr	r3, [r0, #0]
 801c846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c848:	e7f6      	b.n	801c838 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801c84a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c84a:	b570      	push	{r4, r5, r6, lr}
 801c84c:	8882      	ldrh	r2, [r0, #4]
 801c84e:	460c      	mov	r4, r1
 801c850:	880b      	ldrh	r3, [r1, #0]
 801c852:	4605      	mov	r5, r0
 801c854:	4413      	add	r3, r2
 801c856:	800b      	strh	r3, [r1, #0]
 801c858:	884b      	ldrh	r3, [r1, #2]
 801c85a:	88c2      	ldrh	r2, [r0, #6]
 801c85c:	4413      	add	r3, r2
 801c85e:	804b      	strh	r3, [r1, #2]
 801c860:	1d01      	adds	r1, r0, #4
 801c862:	4620      	mov	r0, r4
 801c864:	f7fc f8a0 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801c868:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c86c:	b153      	cbz	r3, 801c884 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801c86e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c872:	b13b      	cbz	r3, 801c884 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801c874:	6968      	ldr	r0, [r5, #20]
 801c876:	b128      	cbz	r0, 801c884 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801c878:	6803      	ldr	r3, [r0, #0]
 801c87a:	4621      	mov	r1, r4
 801c87c:	6a1b      	ldr	r3, [r3, #32]
 801c87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c882:	4718      	bx	r3
 801c884:	bd70      	pop	{r4, r5, r6, pc}

0801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c886:	b510      	push	{r4, lr}
 801c888:	2300      	movs	r3, #0
 801c88a:	4604      	mov	r4, r0
 801c88c:	4608      	mov	r0, r1
 801c88e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c892:	8023      	strh	r3, [r4, #0]
 801c894:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c898:	8063      	strh	r3, [r4, #2]
 801c89a:	6803      	ldr	r3, [r0, #0]
 801c89c:	80a1      	strh	r1, [r4, #4]
 801c89e:	4621      	mov	r1, r4
 801c8a0:	80e2      	strh	r2, [r4, #6]
 801c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8a4:	4798      	blx	r3
 801c8a6:	4620      	mov	r0, r4
 801c8a8:	bd10      	pop	{r4, pc}
	...

0801c8ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c8ac:	b530      	push	{r4, r5, lr}
 801c8ae:	8083      	strh	r3, [r0, #4]
 801c8b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c8b4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c8b8:	7183      	strb	r3, [r0, #6]
 801c8ba:	79c3      	ldrb	r3, [r0, #7]
 801c8bc:	6101      	str	r1, [r0, #16]
 801c8be:	f365 0306 	bfi	r3, r5, #0, #7
 801c8c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c8c6:	8282      	strh	r2, [r0, #20]
 801c8c8:	f365 13c7 	bfi	r3, r5, #7, #1
 801c8cc:	71c3      	strb	r3, [r0, #7]
 801c8ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c8d2:	7203      	strb	r3, [r0, #8]
 801c8d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c8d8:	7243      	strb	r3, [r0, #9]
 801c8da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c8de:	8143      	strh	r3, [r0, #10]
 801c8e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c8e4:	8183      	strh	r3, [r0, #12]
 801c8e6:	4b01      	ldr	r3, [pc, #4]	; (801c8ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c8e8:	6003      	str	r3, [r0, #0]
 801c8ea:	bd30      	pop	{r4, r5, pc}
 801c8ec:	0802c1dc 	.word	0x0802c1dc

0801c8f0 <_ZNK8touchgfx9ConstFont4findEt>:
 801c8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8f2:	8a84      	ldrh	r4, [r0, #20]
 801c8f4:	2500      	movs	r5, #0
 801c8f6:	260e      	movs	r6, #14
 801c8f8:	3c01      	subs	r4, #1
 801c8fa:	42a5      	cmp	r5, r4
 801c8fc:	dc0c      	bgt.n	801c918 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801c8fe:	192a      	adds	r2, r5, r4
 801c900:	6903      	ldr	r3, [r0, #16]
 801c902:	1052      	asrs	r2, r2, #1
 801c904:	fb06 3302 	mla	r3, r6, r2, r3
 801c908:	889f      	ldrh	r7, [r3, #4]
 801c90a:	428f      	cmp	r7, r1
 801c90c:	d901      	bls.n	801c912 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801c90e:	1e54      	subs	r4, r2, #1
 801c910:	e7f3      	b.n	801c8fa <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801c912:	d202      	bcs.n	801c91a <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801c914:	1c55      	adds	r5, r2, #1
 801c916:	e7f0      	b.n	801c8fa <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801c918:	2300      	movs	r3, #0
 801c91a:	4618      	mov	r0, r3
 801c91c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c91e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c920:	4605      	mov	r5, r0
 801c922:	4617      	mov	r7, r2
 801c924:	461e      	mov	r6, r3
 801c926:	f7ff ffe3 	bl	801c8f0 <_ZNK8touchgfx9ConstFont4findEt>
 801c92a:	b9e0      	cbnz	r0, 801c966 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801c92c:	b911      	cbnz	r1, 801c934 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801c92e:	2400      	movs	r4, #0
 801c930:	4620      	mov	r0, r4
 801c932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c934:	290a      	cmp	r1, #10
 801c936:	d0fa      	beq.n	801c92e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c938:	682b      	ldr	r3, [r5, #0]
 801c93a:	4628      	mov	r0, r5
 801c93c:	691b      	ldr	r3, [r3, #16]
 801c93e:	4798      	blx	r3
 801c940:	4601      	mov	r1, r0
 801c942:	4628      	mov	r0, r5
 801c944:	f7ff ffd4 	bl	801c8f0 <_ZNK8touchgfx9ConstFont4findEt>
 801c948:	4604      	mov	r4, r0
 801c94a:	2800      	cmp	r0, #0
 801c94c:	d0ef      	beq.n	801c92e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c94e:	682b      	ldr	r3, [r5, #0]
 801c950:	4621      	mov	r1, r4
 801c952:	4628      	mov	r0, r5
 801c954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c956:	4798      	blx	r3
 801c958:	6038      	str	r0, [r7, #0]
 801c95a:	682b      	ldr	r3, [r5, #0]
 801c95c:	4628      	mov	r0, r5
 801c95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c960:	4798      	blx	r3
 801c962:	7030      	strb	r0, [r6, #0]
 801c964:	e7e4      	b.n	801c930 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801c966:	4604      	mov	r4, r0
 801c968:	e7f1      	b.n	801c94e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801c96a <_ZN8touchgfx6memsetEPvhm>:
 801c96a:	4402      	add	r2, r0
 801c96c:	4290      	cmp	r0, r2
 801c96e:	d002      	beq.n	801c976 <_ZN8touchgfx6memsetEPvhm+0xc>
 801c970:	f800 1b01 	strb.w	r1, [r0], #1
 801c974:	e7fa      	b.n	801c96c <_ZN8touchgfx6memsetEPvhm+0x2>
 801c976:	4770      	bx	lr

0801c978 <_ZN8touchgfx3clzEl>:
 801c978:	b1e8      	cbz	r0, 801c9b6 <_ZN8touchgfx3clzEl+0x3e>
 801c97a:	2800      	cmp	r0, #0
 801c97c:	bfb8      	it	lt
 801c97e:	4240      	neglt	r0, r0
 801c980:	0c03      	lsrs	r3, r0, #16
 801c982:	041b      	lsls	r3, r3, #16
 801c984:	b9ab      	cbnz	r3, 801c9b2 <_ZN8touchgfx3clzEl+0x3a>
 801c986:	0400      	lsls	r0, r0, #16
 801c988:	2310      	movs	r3, #16
 801c98a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c98e:	bf04      	itt	eq
 801c990:	0200      	lsleq	r0, r0, #8
 801c992:	3308      	addeq	r3, #8
 801c994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c998:	bf04      	itt	eq
 801c99a:	0100      	lsleq	r0, r0, #4
 801c99c:	3304      	addeq	r3, #4
 801c99e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c9a2:	bf04      	itt	eq
 801c9a4:	0080      	lsleq	r0, r0, #2
 801c9a6:	3302      	addeq	r3, #2
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	bfa8      	it	ge
 801c9ac:	3301      	addge	r3, #1
 801c9ae:	1e58      	subs	r0, r3, #1
 801c9b0:	4770      	bx	lr
 801c9b2:	2300      	movs	r3, #0
 801c9b4:	e7e9      	b.n	801c98a <_ZN8touchgfx3clzEl+0x12>
 801c9b6:	201f      	movs	r0, #31
 801c9b8:	4770      	bx	lr

0801c9ba <_ZN8touchgfx6muldivElllRl>:
 801c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9be:	4604      	mov	r4, r0
 801c9c0:	4698      	mov	r8, r3
 801c9c2:	2601      	movs	r6, #1
 801c9c4:	f7ff ffd8 	bl	801c978 <_ZN8touchgfx3clzEl>
 801c9c8:	2c00      	cmp	r4, #0
 801c9ca:	fa04 f500 	lsl.w	r5, r4, r0
 801c9ce:	fa06 f600 	lsl.w	r6, r6, r0
 801c9d2:	bfba      	itte	lt
 801c9d4:	f04f 37ff 	movlt.w	r7, #4294967295
 801c9d8:	4264      	neglt	r4, r4
 801c9da:	2701      	movge	r7, #1
 801c9dc:	2900      	cmp	r1, #0
 801c9de:	f106 36ff 	add.w	r6, r6, #4294967295
 801c9e2:	bfbc      	itt	lt
 801c9e4:	4249      	neglt	r1, r1
 801c9e6:	427f      	neglt	r7, r7
 801c9e8:	2a00      	cmp	r2, #0
 801c9ea:	fa41 fc00 	asr.w	ip, r1, r0
 801c9ee:	ea01 0106 	and.w	r1, r1, r6
 801c9f2:	bfb8      	it	lt
 801c9f4:	427f      	neglt	r7, r7
 801c9f6:	fb04 f401 	mul.w	r4, r4, r1
 801c9fa:	fb95 f3f2 	sdiv	r3, r5, r2
 801c9fe:	fb02 5513 	mls	r5, r2, r3, r5
 801ca02:	bfb8      	it	lt
 801ca04:	4252      	neglt	r2, r2
 801ca06:	fb94 f0f2 	sdiv	r0, r4, r2
 801ca0a:	fb02 4410 	mls	r4, r2, r0, r4
 801ca0e:	fb0c 4405 	mla	r4, ip, r5, r4
 801ca12:	fb94 f1f2 	sdiv	r1, r4, r2
 801ca16:	4408      	add	r0, r1
 801ca18:	fb02 4211 	mls	r2, r2, r1, r4
 801ca1c:	fb0c 0003 	mla	r0, ip, r3, r0
 801ca20:	f8c8 2000 	str.w	r2, [r8]
 801ca24:	4378      	muls	r0, r7
 801ca26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ca2a <_ZN8touchgfx10ClickEventD1Ev>:
 801ca2a:	4770      	bx	lr

0801ca2c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801ca2c:	2000      	movs	r0, #0
 801ca2e:	4770      	bx	lr

0801ca30 <_ZN8touchgfx9DragEventD1Ev>:
 801ca30:	4770      	bx	lr

0801ca32 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801ca32:	2001      	movs	r0, #1
 801ca34:	4770      	bx	lr

0801ca36 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801ca36:	2002      	movs	r0, #2
 801ca38:	4770      	bx	lr

0801ca3a <_ZN8touchgfx12GestureEventD1Ev>:
 801ca3a:	4770      	bx	lr

0801ca3c <_ZN8touchgfx10ClickEventD0Ev>:
 801ca3c:	b510      	push	{r4, lr}
 801ca3e:	4604      	mov	r4, r0
 801ca40:	210c      	movs	r1, #12
 801ca42:	f00b fa4e 	bl	8027ee2 <_ZdlPvj>
 801ca46:	4620      	mov	r0, r4
 801ca48:	bd10      	pop	{r4, pc}

0801ca4a <_ZN8touchgfx9DragEventD0Ev>:
 801ca4a:	b510      	push	{r4, lr}
 801ca4c:	4604      	mov	r4, r0
 801ca4e:	2110      	movs	r1, #16
 801ca50:	f00b fa47 	bl	8027ee2 <_ZdlPvj>
 801ca54:	4620      	mov	r0, r4
 801ca56:	bd10      	pop	{r4, pc}

0801ca58 <_ZN8touchgfx12GestureEventD0Ev>:
 801ca58:	b510      	push	{r4, lr}
 801ca5a:	4604      	mov	r4, r0
 801ca5c:	210c      	movs	r1, #12
 801ca5e:	f00b fa40 	bl	8027ee2 <_ZdlPvj>
 801ca62:	4620      	mov	r0, r4
 801ca64:	bd10      	pop	{r4, pc}
	...

0801ca68 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801ca68:	b530      	push	{r4, r5, lr}
 801ca6a:	460d      	mov	r5, r1
 801ca6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ca6e:	b087      	sub	sp, #28
 801ca70:	4604      	mov	r4, r0
 801ca72:	b301      	cbz	r1, 801cab6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801ca74:	a801      	add	r0, sp, #4
 801ca76:	f7ff ff06 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca7a:	892a      	ldrh	r2, [r5, #8]
 801ca7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801ca80:	7928      	ldrb	r0, [r5, #4]
 801ca82:	1ad2      	subs	r2, r2, r3
 801ca84:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ca86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801ca8a:	441a      	add	r2, r3
 801ca8c:	896b      	ldrh	r3, [r5, #10]
 801ca8e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801ca92:	f88d 0010 	strb.w	r0, [sp, #16]
 801ca96:	1b5b      	subs	r3, r3, r5
 801ca98:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801ca9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ca9c:	442b      	add	r3, r5
 801ca9e:	4d07      	ldr	r5, [pc, #28]	; (801cabc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801caa0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801caa4:	a903      	add	r1, sp, #12
 801caa6:	9503      	str	r5, [sp, #12]
 801caa8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801caac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cab0:	6803      	ldr	r3, [r0, #0]
 801cab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cab4:	4798      	blx	r3
 801cab6:	b007      	add	sp, #28
 801cab8:	bd30      	pop	{r4, r5, pc}
 801caba:	bf00      	nop
 801cabc:	0802c258 	.word	0x0802c258

0801cac0 <_ZNK8touchgfx4Rect9intersectEss>:
 801cac0:	b510      	push	{r4, lr}
 801cac2:	f9b0 3000 	ldrsh.w	r3, [r0]
 801cac6:	428b      	cmp	r3, r1
 801cac8:	dc10      	bgt.n	801caec <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801caca:	8884      	ldrh	r4, [r0, #4]
 801cacc:	4423      	add	r3, r4
 801cace:	b21b      	sxth	r3, r3
 801cad0:	4299      	cmp	r1, r3
 801cad2:	da0b      	bge.n	801caec <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cad4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801cad8:	4293      	cmp	r3, r2
 801cada:	dc07      	bgt.n	801caec <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801cadc:	88c0      	ldrh	r0, [r0, #6]
 801cade:	4418      	add	r0, r3
 801cae0:	b200      	sxth	r0, r0
 801cae2:	4282      	cmp	r2, r0
 801cae4:	bfac      	ite	ge
 801cae6:	2000      	movge	r0, #0
 801cae8:	2001      	movlt	r0, #1
 801caea:	bd10      	pop	{r4, pc}
 801caec:	2000      	movs	r0, #0
 801caee:	e7fc      	b.n	801caea <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801caf0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801caf2:	460c      	mov	r4, r1
 801caf4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801caf6:	b089      	sub	sp, #36	; 0x24
 801caf8:	4605      	mov	r5, r0
 801cafa:	2900      	cmp	r1, #0
 801cafc:	d054      	beq.n	801cba8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801cafe:	4668      	mov	r0, sp
 801cb00:	f7ff fec1 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb04:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801cb06:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801cb08:	4668      	mov	r0, sp
 801cb0a:	8922      	ldrh	r2, [r4, #8]
 801cb0c:	88e1      	ldrh	r1, [r4, #6]
 801cb0e:	443a      	add	r2, r7
 801cb10:	4431      	add	r1, r6
 801cb12:	b212      	sxth	r2, r2
 801cb14:	b209      	sxth	r1, r1
 801cb16:	f7ff ffd3 	bl	801cac0 <_ZNK8touchgfx4Rect9intersectEss>
 801cb1a:	b1d0      	cbz	r0, 801cb52 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801cb1c:	89a2      	ldrh	r2, [r4, #12]
 801cb1e:	4668      	mov	r0, sp
 801cb20:	8961      	ldrh	r1, [r4, #10]
 801cb22:	443a      	add	r2, r7
 801cb24:	4431      	add	r1, r6
 801cb26:	b212      	sxth	r2, r2
 801cb28:	b209      	sxth	r1, r1
 801cb2a:	f7ff ffc9 	bl	801cac0 <_ZNK8touchgfx4Rect9intersectEss>
 801cb2e:	4603      	mov	r3, r0
 801cb30:	b978      	cbnz	r0, 801cb52 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801cb32:	4a1e      	ldr	r2, [pc, #120]	; (801cbac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801cb34:	a904      	add	r1, sp, #16
 801cb36:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb38:	9204      	str	r2, [sp, #16]
 801cb3a:	2202      	movs	r2, #2
 801cb3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb40:	f88d 2014 	strb.w	r2, [sp, #20]
 801cb44:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cb48:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cb4c:	6803      	ldr	r3, [r0, #0]
 801cb4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb50:	4798      	blx	r3
 801cb52:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801cb54:	a802      	add	r0, sp, #8
 801cb56:	f7ff fe96 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cb5e:	88e0      	ldrh	r0, [r4, #6]
 801cb60:	8961      	ldrh	r1, [r4, #10]
 801cb62:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801cb66:	1a80      	subs	r0, r0, r2
 801cb68:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801cb6c:	1a89      	subs	r1, r1, r2
 801cb6e:	8923      	ldrh	r3, [r4, #8]
 801cb70:	4460      	add	r0, ip
 801cb72:	89a2      	ldrh	r2, [r4, #12]
 801cb74:	4461      	add	r1, ip
 801cb76:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801cb78:	eba3 030e 	sub.w	r3, r3, lr
 801cb7c:	eba2 020e 	sub.w	r2, r2, lr
 801cb80:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cb84:	7927      	ldrb	r7, [r4, #4]
 801cb86:	4433      	add	r3, r6
 801cb88:	4432      	add	r2, r6
 801cb8a:	4c09      	ldr	r4, [pc, #36]	; (801cbb0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801cb8c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb8e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801cb92:	a904      	add	r1, sp, #16
 801cb94:	9404      	str	r4, [sp, #16]
 801cb96:	f88d 7014 	strb.w	r7, [sp, #20]
 801cb9a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cb9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cba2:	6803      	ldr	r3, [r0, #0]
 801cba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cba6:	4798      	blx	r3
 801cba8:	b009      	add	sp, #36	; 0x24
 801cbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbac:	0802c230 	.word	0x0802c230
 801cbb0:	0802c244 	.word	0x0802c244

0801cbb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb8:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801cbbc:	b0a1      	sub	sp, #132	; 0x84
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	460d      	mov	r5, r1
 801cbc2:	790b      	ldrb	r3, [r1, #4]
 801cbc4:	f1b9 0f00 	cmp.w	r9, #0
 801cbc8:	d00f      	beq.n	801cbea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	f040 80a2 	bne.w	801cd14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801cbd0:	b021      	add	sp, #132	; 0x84
 801cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801cbda:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801cbde:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cbe2:	1d20      	adds	r0, r4, #4
 801cbe4:	f7fb fe2e 	bl	8018844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801cbe8:	e094      	b.n	801cd14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d1f0      	bne.n	801cbd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801cbee:	4b5f      	ldr	r3, [pc, #380]	; (801cd6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801cbf6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801cbfa:	f1ba 0f03 	cmp.w	sl, #3
 801cbfe:	ddea      	ble.n	801cbd6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801cc00:	f1ba 0f0c 	cmp.w	sl, #12
 801cc04:	f04f 0303 	mov.w	r3, #3
 801cc08:	f04f 0600 	mov.w	r6, #0
 801cc0c:	4958      	ldr	r1, [pc, #352]	; (801cd70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801cc0e:	bfd8      	it	le
 801cc10:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801cc14:	960a      	str	r6, [sp, #40]	; 0x28
 801cc16:	bfd8      	it	le
 801cc18:	fb92 f3f3 	sdivle	r3, r2, r3
 801cc1c:	9301      	str	r3, [sp, #4]
 801cc1e:	4b55      	ldr	r3, [pc, #340]	; (801cd74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801cc20:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc24:	4b54      	ldr	r3, [pc, #336]	; (801cd78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801cc26:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801cc2a:	2248      	movs	r2, #72	; 0x48
 801cc2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cc30:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801cc34:	ab0e      	add	r3, sp, #56	; 0x38
 801cc36:	4618      	mov	r0, r3
 801cc38:	f00b f9fc 	bl	8028034 <memcpy>
 801cc3c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc40:	f8cd a008 	str.w	sl, [sp, #8]
 801cc44:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801cc48:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cc4c:	46b3      	mov	fp, r6
 801cc4e:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc52:	b29b      	uxth	r3, r3
 801cc54:	9303      	str	r3, [sp, #12]
 801cc56:	2300      	movs	r3, #0
 801cc58:	9a03      	ldr	r2, [sp, #12]
 801cc5a:	88ef      	ldrh	r7, [r5, #6]
 801cc5c:	a80a      	add	r0, sp, #40	; 0x28
 801cc5e:	9309      	str	r3, [sp, #36]	; 0x24
 801cc60:	9b07      	ldr	r3, [sp, #28]
 801cc62:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801cc66:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801cc6a:	fb13 f302 	smulbb	r3, r3, r2
 801cc6e:	b29b      	uxth	r3, r3
 801cc70:	9304      	str	r3, [sp, #16]
 801cc72:	9b07      	ldr	r3, [sp, #28]
 801cc74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cc78:	685b      	ldr	r3, [r3, #4]
 801cc7a:	fb13 f302 	smulbb	r3, r3, r2
 801cc7e:	b29b      	uxth	r3, r3
 801cc80:	9305      	str	r3, [sp, #20]
 801cc82:	9b04      	ldr	r3, [sp, #16]
 801cc84:	441f      	add	r7, r3
 801cc86:	9b05      	ldr	r3, [sp, #20]
 801cc88:	4498      	add	r8, r3
 801cc8a:	b23f      	sxth	r7, r7
 801cc8c:	fa0f f888 	sxth.w	r8, r8
 801cc90:	4639      	mov	r1, r7
 801cc92:	4642      	mov	r2, r8
 801cc94:	f7ff ff14 	bl	801cac0 <_ZNK8touchgfx4Rect9intersectEss>
 801cc98:	b380      	cbz	r0, 801ccfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801cc9a:	4639      	mov	r1, r7
 801cc9c:	ab09      	add	r3, sp, #36	; 0x24
 801cc9e:	4642      	mov	r2, r8
 801cca0:	1d20      	adds	r0, r4, #4
 801cca2:	f7fb fdcf 	bl	8018844 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801cca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cca8:	b341      	cbz	r1, 801ccfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ccaa:	4549      	cmp	r1, r9
 801ccac:	d026      	beq.n	801ccfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ccae:	a80c      	add	r0, sp, #48	; 0x30
 801ccb0:	f7ff fde9 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ccb4:	2002      	movs	r0, #2
 801ccb6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ccba:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ccbe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ccc2:	fb92 f2f0 	sdiv	r2, r2, r0
 801ccc6:	440a      	add	r2, r1
 801ccc8:	1a99      	subs	r1, r3, r2
 801ccca:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801ccce:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801ccd2:	fb93 f3f0 	sdiv	r3, r3, r0
 801ccd6:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801ccda:	4403      	add	r3, r0
 801ccdc:	1ad3      	subs	r3, r2, r3
 801ccde:	9a06      	ldr	r2, [sp, #24]
 801cce0:	435b      	muls	r3, r3
 801cce2:	fb01 3301 	mla	r3, r1, r1, r3
 801cce6:	4293      	cmp	r3, r2
 801cce8:	d208      	bcs.n	801ccfc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801ccea:	9a04      	ldr	r2, [sp, #16]
 801ccec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ccf0:	86a2      	strh	r2, [r4, #52]	; 0x34
 801ccf2:	9a05      	ldr	r2, [sp, #20]
 801ccf4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801ccf8:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ccfa:	9306      	str	r3, [sp, #24]
 801ccfc:	f10b 0b02 	add.w	fp, fp, #2
 801cd00:	f1bb 0f08 	cmp.w	fp, #8
 801cd04:	dda7      	ble.n	801cc56 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801cd06:	9b02      	ldr	r3, [sp, #8]
 801cd08:	3601      	adds	r6, #1
 801cd0a:	4453      	add	r3, sl
 801cd0c:	9302      	str	r3, [sp, #8]
 801cd0e:	9b01      	ldr	r3, [sp, #4]
 801cd10:	42b3      	cmp	r3, r6
 801cd12:	d199      	bne.n	801cc48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801cd14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cd16:	2900      	cmp	r1, #0
 801cd18:	f43f af5a 	beq.w	801cbd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801cd1c:	a80c      	add	r0, sp, #48	; 0x30
 801cd1e:	2600      	movs	r6, #0
 801cd20:	f7ff fdb1 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd24:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801cd28:	88ea      	ldrh	r2, [r5, #6]
 801cd2a:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801cd2e:	1ad2      	subs	r2, r2, r3
 801cd30:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801cd32:	7929      	ldrb	r1, [r5, #4]
 801cd34:	441a      	add	r2, r3
 801cd36:	892b      	ldrh	r3, [r5, #8]
 801cd38:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801cd3c:	a90e      	add	r1, sp, #56	; 0x38
 801cd3e:	1a1b      	subs	r3, r3, r0
 801cd40:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801cd42:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801cd46:	4403      	add	r3, r0
 801cd48:	480c      	ldr	r0, [pc, #48]	; (801cd7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801cd4a:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801cd4e:	900e      	str	r0, [sp, #56]	; 0x38
 801cd50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cd52:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801cd56:	6803      	ldr	r3, [r0, #0]
 801cd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd5a:	4798      	blx	r3
 801cd5c:	792b      	ldrb	r3, [r5, #4]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	f43f af36 	beq.w	801cbd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801cd64:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801cd68:	e732      	b.n	801cbd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801cd6a:	bf00      	nop
 801cd6c:	2000beec 	.word	0x2000beec
 801cd70:	08029694 	.word	0x08029694
 801cd74:	2000bede 	.word	0x2000bede
 801cd78:	2000bee0 	.word	0x2000bee0
 801cd7c:	0802c230 	.word	0x0802c230

0801cd80 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd82:	4604      	mov	r4, r0
 801cd84:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cd88:	3201      	adds	r2, #1
 801cd8a:	d112      	bne.n	801cdb2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cd8c:	2500      	movs	r5, #0
 801cd8e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cd92:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd96:	6803      	ldr	r3, [r0, #0]
 801cd98:	9500      	str	r5, [sp, #0]
 801cd9a:	466d      	mov	r5, sp
 801cd9c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cda0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cda4:	4629      	mov	r1, r5
 801cda6:	6a1b      	ldr	r3, [r3, #32]
 801cda8:	4798      	blx	r3
 801cdaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cdae:	e884 0003 	stmia.w	r4, {r0, r1}
 801cdb2:	4620      	mov	r0, r4
 801cdb4:	b003      	add	sp, #12
 801cdb6:	bd30      	pop	{r4, r5, pc}

0801cdb8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cdb8:	b513      	push	{r0, r1, r4, lr}
 801cdba:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	d109      	bne.n	801cdd8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cdc4:	4601      	mov	r1, r0
 801cdc6:	4668      	mov	r0, sp
 801cdc8:	f7ff fd5d 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdcc:	f8bd 3000 	ldrh.w	r3, [sp]
 801cdd0:	8423      	strh	r3, [r4, #32]
 801cdd2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cdd6:	8463      	strh	r3, [r4, #34]	; 0x22
 801cdd8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cddc:	b002      	add	sp, #8
 801cdde:	bd10      	pop	{r4, pc}

0801cde0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cde0:	b513      	push	{r0, r1, r4, lr}
 801cde2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801cde6:	4604      	mov	r4, r0
 801cde8:	3301      	adds	r3, #1
 801cdea:	d109      	bne.n	801ce00 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cdec:	4601      	mov	r1, r0
 801cdee:	4668      	mov	r0, sp
 801cdf0:	f7ff fd49 	bl	801c886 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdf4:	f8bd 3000 	ldrh.w	r3, [sp]
 801cdf8:	8423      	strh	r3, [r4, #32]
 801cdfa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cdfe:	8463      	strh	r3, [r4, #34]	; 0x22
 801ce00:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ce04:	b002      	add	sp, #8
 801ce06:	bd10      	pop	{r4, pc}

0801ce08 <_ZN8touchgfx6ScreenC1Ev>:
 801ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce0a:	4605      	mov	r5, r0
 801ce0c:	4b17      	ldr	r3, [pc, #92]	; (801ce6c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ce0e:	2200      	movs	r2, #0
 801ce10:	4917      	ldr	r1, [pc, #92]	; (801ce70 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ce12:	f845 3b04 	str.w	r3, [r5], #4
 801ce16:	2301      	movs	r3, #1
 801ce18:	8102      	strh	r2, [r0, #8]
 801ce1a:	4604      	mov	r4, r0
 801ce1c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801ce20:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801ce24:	4b13      	ldr	r3, [pc, #76]	; (801ce74 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ce26:	8142      	strh	r2, [r0, #10]
 801ce28:	f9b3 7000 	ldrsh.w	r7, [r3]
 801ce2c:	4b12      	ldr	r3, [pc, #72]	; (801ce78 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801ce2e:	8182      	strh	r2, [r0, #12]
 801ce30:	81c2      	strh	r2, [r0, #14]
 801ce32:	8202      	strh	r2, [r0, #16]
 801ce34:	8242      	strh	r2, [r0, #18]
 801ce36:	8282      	strh	r2, [r0, #20]
 801ce38:	82c2      	strh	r2, [r0, #22]
 801ce3a:	6202      	str	r2, [r0, #32]
 801ce3c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801ce40:	6342      	str	r2, [r0, #52]	; 0x34
 801ce42:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ce46:	6041      	str	r1, [r0, #4]
 801ce48:	4611      	mov	r1, r2
 801ce4a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ce4e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801ce52:	4628      	mov	r0, r5
 801ce54:	f7f4 fe88 	bl	8011b68 <_ZN8touchgfx8Drawable5setXYEss>
 801ce58:	4639      	mov	r1, r7
 801ce5a:	4628      	mov	r0, r5
 801ce5c:	f7f4 fea2 	bl	8011ba4 <_ZN8touchgfx8Drawable8setWidthEs>
 801ce60:	4628      	mov	r0, r5
 801ce62:	4631      	mov	r1, r6
 801ce64:	f7f4 fead 	bl	8011bc2 <_ZN8touchgfx8Drawable9setHeightEs>
 801ce68:	4620      	mov	r0, r4
 801ce6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce6c:	0802c26c 	.word	0x0802c26c
 801ce70:	0802ae68 	.word	0x0802ae68
 801ce74:	2000bede 	.word	0x2000bede
 801ce78:	2000bee0 	.word	0x2000bee0

0801ce7c <_ZN8touchgfx6Screen4drawEv>:
 801ce7c:	4b09      	ldr	r3, [pc, #36]	; (801cea4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ce7e:	b507      	push	{r0, r1, r2, lr}
 801ce80:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ce84:	2100      	movs	r1, #0
 801ce86:	4b08      	ldr	r3, [pc, #32]	; (801cea8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ce88:	9100      	str	r1, [sp, #0]
 801ce8a:	4669      	mov	r1, sp
 801ce8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ce90:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ce94:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ce98:	6803      	ldr	r3, [r0, #0]
 801ce9a:	689b      	ldr	r3, [r3, #8]
 801ce9c:	4798      	blx	r3
 801ce9e:	b003      	add	sp, #12
 801cea0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cea4:	2000bede 	.word	0x2000bede
 801cea8:	2000bee0 	.word	0x2000bee0

0801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceb0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ceb4:	b089      	sub	sp, #36	; 0x24
 801ceb6:	4680      	mov	r8, r0
 801ceb8:	460c      	mov	r4, r1
 801ceba:	4615      	mov	r5, r2
 801cebc:	b16b      	cbz	r3, 801ceda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cebe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cec2:	b153      	cbz	r3, 801ceda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cec4:	4628      	mov	r0, r5
 801cec6:	f7ff ff5b 	bl	801cd80 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ceca:	4621      	mov	r1, r4
 801cecc:	f7fe ffc2 	bl	801be54 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ced0:	69eb      	ldr	r3, [r5, #28]
 801ced2:	b928      	cbnz	r0, 801cee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801ced4:	461d      	mov	r5, r3
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d1f4      	bne.n	801cec4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801ceda:	b009      	add	sp, #36	; 0x24
 801cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cee0:	ae04      	add	r6, sp, #16
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d051      	beq.n	801cf8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801cee6:	682b      	ldr	r3, [r5, #0]
 801cee8:	4629      	mov	r1, r5
 801ceea:	a802      	add	r0, sp, #8
 801ceec:	68db      	ldr	r3, [r3, #12]
 801ceee:	4798      	blx	r3
 801cef0:	4628      	mov	r0, r5
 801cef2:	f7ff ff61 	bl	801cdb8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cef6:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cefa:	4407      	add	r7, r0
 801cefc:	4628      	mov	r0, r5
 801cefe:	f7ff ff6f 	bl	801cde0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cf02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cf06:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cf0a:	b23f      	sxth	r7, r7
 801cf0c:	4418      	add	r0, r3
 801cf0e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cf12:	4621      	mov	r1, r4
 801cf14:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cf18:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cf1c:	4630      	mov	r0, r6
 801cf1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cf22:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cf26:	f7fb fd3f 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801cf2a:	4628      	mov	r0, r5
 801cf2c:	f7ff ff28 	bl	801cd80 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cf30:	ab06      	add	r3, sp, #24
 801cf32:	4602      	mov	r2, r0
 801cf34:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cf38:	e883 0003 	stmia.w	r3, {r0, r1}
 801cf3c:	4611      	mov	r1, r2
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7fb fd32 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801cf44:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cf48:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cf4c:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cf50:	4299      	cmp	r1, r3
 801cf52:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cf56:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cf5a:	d10b      	bne.n	801cf74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801cf5c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cf60:	4552      	cmp	r2, sl
 801cf62:	d107      	bne.n	801cf74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801cf64:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cf68:	455a      	cmp	r2, fp
 801cf6a:	d103      	bne.n	801cf74 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801cf6c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cf70:	454a      	cmp	r2, r9
 801cf72:	d00a      	beq.n	801cf8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801cf74:	f1bb 0f00 	cmp.w	fp, #0
 801cf78:	d002      	beq.n	801cf80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801cf7a:	f1b9 0f00 	cmp.w	r9, #0
 801cf7e:	d12e      	bne.n	801cfde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801cf80:	69ea      	ldr	r2, [r5, #28]
 801cf82:	4621      	mov	r1, r4
 801cf84:	4640      	mov	r0, r8
 801cf86:	f7ff ff91 	bl	801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cf8a:	4628      	mov	r0, r5
 801cf8c:	f7ff fef8 	bl	801cd80 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cf90:	6861      	ldr	r1, [r4, #4]
 801cf92:	4602      	mov	r2, r0
 801cf94:	4633      	mov	r3, r6
 801cf96:	6820      	ldr	r0, [r4, #0]
 801cf98:	c303      	stmia	r3!, {r0, r1}
 801cf9a:	4611      	mov	r1, r2
 801cf9c:	4630      	mov	r0, r6
 801cf9e:	f7fb fd03 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801cfa2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d097      	beq.n	801ceda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cfaa:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d093      	beq.n	801ceda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cfb2:	4628      	mov	r0, r5
 801cfb4:	f7ff ff00 	bl	801cdb8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cfb8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cfbc:	1a18      	subs	r0, r3, r0
 801cfbe:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	f7ff ff0c 	bl	801cde0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cfc8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cfcc:	4631      	mov	r1, r6
 801cfce:	1a18      	subs	r0, r3, r0
 801cfd0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cfd4:	4628      	mov	r0, r5
 801cfd6:	682b      	ldr	r3, [r5, #0]
 801cfd8:	689b      	ldr	r3, [r3, #8]
 801cfda:	4798      	blx	r3
 801cfdc:	e77d      	b.n	801ceda <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cfde:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cfe2:	fa1f f08a 	uxth.w	r0, sl
 801cfe6:	4552      	cmp	r2, sl
 801cfe8:	9000      	str	r0, [sp, #0]
 801cfea:	da12      	bge.n	801d012 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801cfec:	9301      	str	r3, [sp, #4]
 801cfee:	9b00      	ldr	r3, [sp, #0]
 801cff0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cff4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cff8:	1a9a      	subs	r2, r3, r2
 801cffa:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cffe:	4631      	mov	r1, r6
 801d000:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d004:	4640      	mov	r0, r8
 801d006:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d00a:	69ea      	ldr	r2, [r5, #28]
 801d00c:	f7ff ff4e 	bl	801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d010:	9b01      	ldr	r3, [sp, #4]
 801d012:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d016:	b29f      	uxth	r7, r3
 801d018:	429a      	cmp	r2, r3
 801d01a:	da0d      	bge.n	801d038 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801d01c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d020:	1aba      	subs	r2, r7, r2
 801d022:	f8ad a012 	strh.w	sl, [sp, #18]
 801d026:	4631      	mov	r1, r6
 801d028:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d02c:	4640      	mov	r0, r8
 801d02e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d032:	69ea      	ldr	r2, [r5, #28]
 801d034:	f7ff ff3a 	bl	801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d038:	8822      	ldrh	r2, [r4, #0]
 801d03a:	445f      	add	r7, fp
 801d03c:	88a3      	ldrh	r3, [r4, #4]
 801d03e:	b2bf      	uxth	r7, r7
 801d040:	4413      	add	r3, r2
 801d042:	b23a      	sxth	r2, r7
 801d044:	b29b      	uxth	r3, r3
 801d046:	b219      	sxth	r1, r3
 801d048:	4291      	cmp	r1, r2
 801d04a:	dd0d      	ble.n	801d068 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801d04c:	1bdb      	subs	r3, r3, r7
 801d04e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d052:	f8ad a012 	strh.w	sl, [sp, #18]
 801d056:	4631      	mov	r1, r6
 801d058:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d05c:	4640      	mov	r0, r8
 801d05e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d062:	69ea      	ldr	r2, [r5, #28]
 801d064:	f7ff ff22 	bl	801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d068:	88e2      	ldrh	r2, [r4, #6]
 801d06a:	8863      	ldrh	r3, [r4, #2]
 801d06c:	4413      	add	r3, r2
 801d06e:	9a00      	ldr	r2, [sp, #0]
 801d070:	444a      	add	r2, r9
 801d072:	b29b      	uxth	r3, r3
 801d074:	fa1f f982 	uxth.w	r9, r2
 801d078:	b219      	sxth	r1, r3
 801d07a:	fa0f f289 	sxth.w	r2, r9
 801d07e:	428a      	cmp	r2, r1
 801d080:	da83      	bge.n	801cf8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801d082:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d086:	eba3 0309 	sub.w	r3, r3, r9
 801d08a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d08e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d092:	4631      	mov	r1, r6
 801d094:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d098:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d09c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d0a0:	69ea      	ldr	r2, [r5, #28]
 801d0a2:	e76f      	b.n	801cf84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801d0a4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	aa02      	add	r2, sp, #8
 801d0aa:	4604      	mov	r4, r0
 801d0ac:	3004      	adds	r0, #4
 801d0ae:	f842 3d04 	str.w	r3, [r2, #-4]!
 801d0b2:	460d      	mov	r5, r1
 801d0b4:	f7fb fd4f 	bl	8018b56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d0b8:	9a01      	ldr	r2, [sp, #4]
 801d0ba:	b11a      	cbz	r2, 801d0c4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801d0bc:	4629      	mov	r1, r5
 801d0be:	4620      	mov	r0, r4
 801d0c0:	f7ff fef4 	bl	801ceac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d0c4:	b003      	add	sp, #12
 801d0c6:	bd30      	pop	{r4, r5, pc}

0801d0c8 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	4604      	mov	r4, r0
 801d0ce:	460d      	mov	r5, r1
 801d0d0:	466b      	mov	r3, sp
 801d0d2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d0d6:	6851      	ldr	r1, [r2, #4]
 801d0d8:	c303      	stmia	r3!, {r0, r1}
 801d0da:	4629      	mov	r1, r5
 801d0dc:	4668      	mov	r0, sp
 801d0de:	f7fb fc63 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 801d0e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d0e6:	4669      	mov	r1, sp
 801d0e8:	b123      	cbz	r3, 801d0f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801d0ea:	4620      	mov	r0, r4
 801d0ec:	f7ff ffda 	bl	801d0a4 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d0f0:	b003      	add	sp, #12
 801d0f2:	bd30      	pop	{r4, r5, pc}
 801d0f4:	1d20      	adds	r0, r4, #4
 801d0f6:	f7fb fcf5 	bl	8018ae4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d0fa:	e7f9      	b.n	801d0f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801d0fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d0fc:	460b      	mov	r3, r1
 801d0fe:	680a      	ldr	r2, [r1, #0]
 801d100:	1d01      	adds	r1, r0, #4
 801d102:	6952      	ldr	r2, [r2, #20]
 801d104:	4618      	mov	r0, r3
 801d106:	4710      	bx	r2

0801d108 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801d108:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d10c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d114:	bfcc      	ite	gt
 801d116:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801d11a:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801d11e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d122:	ee10 3a10 	vmov	r3, s0
 801d126:	b218      	sxth	r0, r3
 801d128:	4770      	bx	lr

0801d12a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d12a:	b510      	push	{r4, lr}
 801d12c:	4298      	cmp	r0, r3
 801d12e:	eb01 0402 	add.w	r4, r1, r2
 801d132:	b224      	sxth	r4, r4
 801d134:	d21f      	bcs.n	801d176 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d136:	b1f3      	cbz	r3, 801d176 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801d138:	ee07 0a90 	vmov	s15, r0
 801d13c:	ee06 1a10 	vmov	s12, r1
 801d140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d144:	ee07 3a90 	vmov	s15, r3
 801d148:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801d14c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d154:	ee06 2a90 	vmov	s13, r2
 801d158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d15c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d160:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d164:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d168:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d16c:	eea6 0a87 	vfma.f32	s0, s13, s14
 801d170:	f7ff ffca 	bl	801d108 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801d174:	4604      	mov	r4, r0
 801d176:	4620      	mov	r0, r4
 801d178:	bd10      	pop	{r4, pc}
	...

0801d17c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801d17c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801d180:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801d184:	4b03      	ldr	r3, [pc, #12]	; (801d194 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801d186:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d18a:	bf08      	it	eq
 801d18c:	2300      	moveq	r3, #0
 801d18e:	4308      	orrs	r0, r1
 801d190:	4318      	orrs	r0, r3
 801d192:	4770      	bx	lr
 801d194:	fffffe00 	.word	0xfffffe00

0801d198 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801d198:	7b43      	ldrb	r3, [r0, #13]
 801d19a:	7201      	strb	r1, [r0, #8]
 801d19c:	b289      	uxth	r1, r1
 801d19e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801d1a2:	05ca      	lsls	r2, r1, #23
 801d1a4:	bf48      	it	mi
 801d1a6:	f043 0320 	orrmi.w	r3, r3, #32
 801d1aa:	7343      	strb	r3, [r0, #13]
 801d1ac:	058b      	lsls	r3, r1, #22
 801d1ae:	bf42      	ittt	mi
 801d1b0:	7b43      	ldrbmi	r3, [r0, #13]
 801d1b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801d1b6:	7343      	strbmi	r3, [r0, #13]
 801d1b8:	4770      	bx	lr

0801d1ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d1ba:	b530      	push	{r4, r5, lr}
 801d1bc:	2500      	movs	r5, #0
 801d1be:	2401      	movs	r4, #1
 801d1c0:	6843      	ldr	r3, [r0, #4]
 801d1c2:	b913      	cbnz	r3, 801d1ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d1c4:	6803      	ldr	r3, [r0, #0]
 801d1c6:	b1f3      	cbz	r3, 801d206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d1c8:	6043      	str	r3, [r0, #4]
 801d1ca:	7c03      	ldrb	r3, [r0, #16]
 801d1cc:	b143      	cbz	r3, 801d1e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d1ce:	68c3      	ldr	r3, [r0, #12]
 801d1d0:	b12b      	cbz	r3, 801d1de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d1d2:	881a      	ldrh	r2, [r3, #0]
 801d1d4:	b11a      	cbz	r2, 801d1de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d1d6:	1c9a      	adds	r2, r3, #2
 801d1d8:	60c2      	str	r2, [r0, #12]
 801d1da:	8818      	ldrh	r0, [r3, #0]
 801d1dc:	bd30      	pop	{r4, r5, pc}
 801d1de:	7405      	strb	r5, [r0, #16]
 801d1e0:	6843      	ldr	r3, [r0, #4]
 801d1e2:	8819      	ldrh	r1, [r3, #0]
 801d1e4:	b179      	cbz	r1, 801d206 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801d1e6:	1c9a      	adds	r2, r3, #2
 801d1e8:	2902      	cmp	r1, #2
 801d1ea:	6042      	str	r2, [r0, #4]
 801d1ec:	d1f5      	bne.n	801d1da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d1ee:	6883      	ldr	r3, [r0, #8]
 801d1f0:	1d1a      	adds	r2, r3, #4
 801d1f2:	6082      	str	r2, [r0, #8]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	60c3      	str	r3, [r0, #12]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d0e1      	beq.n	801d1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d1fc:	881b      	ldrh	r3, [r3, #0]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d0de      	beq.n	801d1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d202:	7404      	strb	r4, [r0, #16]
 801d204:	e7dc      	b.n	801d1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d206:	2000      	movs	r0, #0
 801d208:	e7e8      	b.n	801d1dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d20a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d20a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d20c:	4605      	mov	r5, r0
 801d20e:	4608      	mov	r0, r1
 801d210:	b1f1      	cbz	r1, 801d250 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d212:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801d216:	460b      	mov	r3, r1
 801d218:	f101 0708 	add.w	r7, r1, #8
 801d21c:	4622      	mov	r2, r4
 801d21e:	6818      	ldr	r0, [r3, #0]
 801d220:	3308      	adds	r3, #8
 801d222:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d226:	4626      	mov	r6, r4
 801d228:	42bb      	cmp	r3, r7
 801d22a:	c603      	stmia	r6!, {r0, r1}
 801d22c:	4634      	mov	r4, r6
 801d22e:	d1f6      	bne.n	801d21e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d230:	6818      	ldr	r0, [r3, #0]
 801d232:	6030      	str	r0, [r6, #0]
 801d234:	4610      	mov	r0, r2
 801d236:	889b      	ldrh	r3, [r3, #4]
 801d238:	80b3      	strh	r3, [r6, #4]
 801d23a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801d23e:	015b      	lsls	r3, r3, #5
 801d240:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d244:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801d248:	430b      	orrs	r3, r1
 801d24a:	425b      	negs	r3, r3
 801d24c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801d250:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d252 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d252:	b538      	push	{r3, r4, r5, lr}
 801d254:	460c      	mov	r4, r1
 801d256:	6811      	ldr	r1, [r2, #0]
 801d258:	4610      	mov	r0, r2
 801d25a:	68cd      	ldr	r5, [r1, #12]
 801d25c:	4619      	mov	r1, r3
 801d25e:	47a8      	blx	r5
 801d260:	2800      	cmp	r0, #0
 801d262:	bf08      	it	eq
 801d264:	4620      	moveq	r0, r4
 801d266:	bd38      	pop	{r3, r4, r5, pc}

0801d268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d268:	b570      	push	{r4, r5, r6, lr}
 801d26a:	8810      	ldrh	r0, [r2, #0]
 801d26c:	4298      	cmp	r0, r3
 801d26e:	d817      	bhi.n	801d2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d270:	1e48      	subs	r0, r1, #1
 801d272:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d276:	4298      	cmp	r0, r3
 801d278:	d312      	bcc.n	801d2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d27a:	2400      	movs	r4, #0
 801d27c:	428c      	cmp	r4, r1
 801d27e:	d20f      	bcs.n	801d2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d280:	1860      	adds	r0, r4, r1
 801d282:	1040      	asrs	r0, r0, #1
 801d284:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d288:	0085      	lsls	r5, r0, #2
 801d28a:	42b3      	cmp	r3, r6
 801d28c:	d902      	bls.n	801d294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d28e:	3001      	adds	r0, #1
 801d290:	b284      	uxth	r4, r0
 801d292:	e7f3      	b.n	801d27c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d294:	d102      	bne.n	801d29c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801d296:	442a      	add	r2, r5
 801d298:	8850      	ldrh	r0, [r2, #2]
 801d29a:	bd70      	pop	{r4, r5, r6, pc}
 801d29c:	b281      	uxth	r1, r0
 801d29e:	e7ed      	b.n	801d27c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d2a0:	2000      	movs	r0, #0
 801d2a2:	e7fa      	b.n	801d29a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801d2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801d2a4:	b510      	push	{r4, lr}
 801d2a6:	8ac3      	ldrh	r3, [r0, #22]
 801d2a8:	428b      	cmp	r3, r1
 801d2aa:	d805      	bhi.n	801d2b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801d2ac:	4b07      	ldr	r3, [pc, #28]	; (801d2cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801d2ae:	21fd      	movs	r1, #253	; 0xfd
 801d2b0:	4a07      	ldr	r2, [pc, #28]	; (801d2d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801d2b2:	4808      	ldr	r0, [pc, #32]	; (801d2d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801d2b4:	f00a fe40 	bl	8027f38 <__assert_func>
 801d2b8:	8a83      	ldrh	r3, [r0, #20]
 801d2ba:	240a      	movs	r4, #10
 801d2bc:	4419      	add	r1, r3
 801d2be:	fbb1 f3f4 	udiv	r3, r1, r4
 801d2c2:	fb04 1113 	mls	r1, r4, r3, r1
 801d2c6:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801d2ca:	bd10      	pop	{r4, pc}
 801d2cc:	0802c2b9 	.word	0x0802c2b9
 801d2d0:	0802c6e8 	.word	0x0802c6e8
 801d2d4:	0802c2c7 	.word	0x0802c2c7

0801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801d2d8:	b508      	push	{r3, lr}
 801d2da:	8ac3      	ldrh	r3, [r0, #22]
 801d2dc:	428b      	cmp	r3, r1
 801d2de:	d805      	bhi.n	801d2ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801d2e0:	4b07      	ldr	r3, [pc, #28]	; (801d300 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801d2e2:	21d3      	movs	r1, #211	; 0xd3
 801d2e4:	4a07      	ldr	r2, [pc, #28]	; (801d304 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801d2e6:	4808      	ldr	r0, [pc, #32]	; (801d308 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801d2e8:	f00a fe26 	bl	8027f38 <__assert_func>
 801d2ec:	8a83      	ldrh	r3, [r0, #20]
 801d2ee:	220a      	movs	r2, #10
 801d2f0:	4419      	add	r1, r3
 801d2f2:	fbb1 f3f2 	udiv	r3, r1, r2
 801d2f6:	fb02 1113 	mls	r1, r2, r3, r1
 801d2fa:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801d2fe:	bd08      	pop	{r3, pc}
 801d300:	0802c2b9 	.word	0x0802c2b9
 801d304:	0802c438 	.word	0x0802c438
 801d308:	0802c2c7 	.word	0x0802c2c7

0801d30c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d30c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d310:	4604      	mov	r4, r0
 801d312:	4688      	mov	r8, r1
 801d314:	4615      	mov	r5, r2
 801d316:	b94a      	cbnz	r2, 801d32c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801d318:	4691      	mov	r9, r2
 801d31a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801d31e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801d322:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d326:	4648      	mov	r0, r9
 801d328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d32c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801d330:	8892      	ldrh	r2, [r2, #4]
 801d332:	462b      	mov	r3, r5
 801d334:	f105 0c08 	add.w	ip, r5, #8
 801d338:	46b3      	mov	fp, r6
 801d33a:	6818      	ldr	r0, [r3, #0]
 801d33c:	3308      	adds	r3, #8
 801d33e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d342:	4637      	mov	r7, r6
 801d344:	4563      	cmp	r3, ip
 801d346:	c703      	stmia	r7!, {r0, r1}
 801d348:	463e      	mov	r6, r7
 801d34a:	d1f6      	bne.n	801d33a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801d34c:	6818      	ldr	r0, [r3, #0]
 801d34e:	46d9      	mov	r9, fp
 801d350:	6038      	str	r0, [r7, #0]
 801d352:	889b      	ldrh	r3, [r3, #4]
 801d354:	80bb      	strh	r3, [r7, #4]
 801d356:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801d35a:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801d35e:	18d3      	adds	r3, r2, r3
 801d360:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801d364:	b298      	uxth	r0, r3
 801d366:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801d36a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801d36e:	281d      	cmp	r0, #29
 801d370:	ea4a 0a01 	orr.w	sl, sl, r1
 801d374:	fa1f f68a 	uxth.w	r6, sl
 801d378:	d842      	bhi.n	801d400 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801d37a:	2301      	movs	r3, #1
 801d37c:	4950      	ldr	r1, [pc, #320]	; (801d4c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801d37e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801d382:	4083      	lsls	r3, r0
 801d384:	420b      	tst	r3, r1
 801d386:	d114      	bne.n	801d3b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d388:	f413 7f60 	tst.w	r3, #896	; 0x380
 801d38c:	d03c      	beq.n	801d408 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801d38e:	fa1f fa8a 	uxth.w	sl, sl
 801d392:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801d396:	4658      	mov	r0, fp
 801d398:	eba1 010a 	sub.w	r1, r1, sl
 801d39c:	b209      	sxth	r1, r1
 801d39e:	f7ff fefb 	bl	801d198 <_ZN8touchgfx9GlyphNode6setTopEs>
 801d3a2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801d3a6:	1b86      	subs	r6, r0, r6
 801d3a8:	eba6 0a0a 	sub.w	sl, r6, sl
 801d3ac:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801d3b0:	e7b9      	b.n	801d326 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d3b2:	2100      	movs	r1, #0
 801d3b4:	f104 001a 	add.w	r0, r4, #26
 801d3b8:	f7ff ff8e 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d3bc:	f640 6333 	movw	r3, #3635	; 0xe33
 801d3c0:	4601      	mov	r1, r0
 801d3c2:	4298      	cmp	r0, r3
 801d3c4:	d10a      	bne.n	801d3dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801d3c6:	f8d8 3000 	ldr.w	r3, [r8]
 801d3ca:	4640      	mov	r0, r8
 801d3cc:	68db      	ldr	r3, [r3, #12]
 801d3ce:	4798      	blx	r3
 801d3d0:	7b41      	ldrb	r1, [r0, #13]
 801d3d2:	7a00      	ldrb	r0, [r0, #8]
 801d3d4:	f7ff fed2 	bl	801d17c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d3d8:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d3dc:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801d3e0:	4658      	mov	r0, fp
 801d3e2:	4431      	add	r1, r6
 801d3e4:	4451      	add	r1, sl
 801d3e6:	b209      	sxth	r1, r1
 801d3e8:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801d3ec:	f7ff fed4 	bl	801d198 <_ZN8touchgfx9GlyphNode6setTopEs>
 801d3f0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801d3f4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801d3f8:	1a9b      	subs	r3, r3, r2
 801d3fa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801d3fe:	e792      	b.n	801d326 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d400:	f640 631b 	movw	r3, #3611	; 0xe1b
 801d404:	429a      	cmp	r2, r3
 801d406:	d005      	beq.n	801d414 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801d408:	f022 0302 	bic.w	r3, r2, #2
 801d40c:	f640 611d 	movw	r1, #3613	; 0xe1d
 801d410:	428b      	cmp	r3, r1
 801d412:	d119      	bne.n	801d448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801d414:	1e53      	subs	r3, r2, #1
 801d416:	4629      	mov	r1, r5
 801d418:	4642      	mov	r2, r8
 801d41a:	4620      	mov	r0, r4
 801d41c:	b29b      	uxth	r3, r3
 801d41e:	f7ff ff18 	bl	801d252 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d422:	7b41      	ldrb	r1, [r0, #13]
 801d424:	7a00      	ldrb	r0, [r0, #8]
 801d426:	f7ff fea9 	bl	801d17c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d42a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801d42e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d432:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d436:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801d43a:	4313      	orrs	r3, r2
 801d43c:	115a      	asrs	r2, r3, #5
 801d43e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d442:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801d446:	e02e      	b.n	801d4a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d448:	4639      	mov	r1, r7
 801d44a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801d44e:	f7ff fe95 	bl	801d17c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d452:	f640 6109 	movw	r1, #3593	; 0xe09
 801d456:	f022 0310 	bic.w	r3, r2, #16
 801d45a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801d45e:	428b      	cmp	r3, r1
 801d460:	d003      	beq.n	801d46a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801d462:	f640 6313 	movw	r3, #3603	; 0xe13
 801d466:	429a      	cmp	r2, r3
 801d468:	d127      	bne.n	801d4ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801d46a:	b27f      	sxtb	r7, r7
 801d46c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801d470:	4629      	mov	r1, r5
 801d472:	4620      	mov	r0, r4
 801d474:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801d478:	431f      	orrs	r7, r3
 801d47a:	f640 6313 	movw	r3, #3603	; 0xe13
 801d47e:	429a      	cmp	r2, r3
 801d480:	bf14      	ite	ne
 801d482:	f102 33ff 	addne.w	r3, r2, #4294967295
 801d486:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d48a:	4642      	mov	r2, r8
 801d48c:	bf18      	it	ne
 801d48e:	b29b      	uxthne	r3, r3
 801d490:	f7ff fedf 	bl	801d252 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d494:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801d498:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d49c:	7a83      	ldrb	r3, [r0, #10]
 801d49e:	4313      	orrs	r3, r2
 801d4a0:	1aff      	subs	r7, r7, r3
 801d4a2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801d4a6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801d4aa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801d4ae:	f7ff fe65 	bl	801d17c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801d4b2:	1b80      	subs	r0, r0, r6
 801d4b4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801d4b8:	e735      	b.n	801d326 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	e7c1      	b.n	801d442 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801d4be:	bf00      	nop
 801d4c0:	3fc00079 	.word	0x3fc00079

0801d4c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d4c4:	3a01      	subs	r2, #1
 801d4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4ca:	b292      	uxth	r2, r2
 801d4cc:	460c      	mov	r4, r1
 801d4ce:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d4d2:	42b2      	cmp	r2, r6
 801d4d4:	d018      	beq.n	801d508 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801d4d6:	8b01      	ldrh	r1, [r0, #24]
 801d4d8:	f834 5b02 	ldrh.w	r5, [r4], #2
 801d4dc:	4291      	cmp	r1, r2
 801d4de:	d805      	bhi.n	801d4ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801d4e0:	4b13      	ldr	r3, [pc, #76]	; (801d530 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801d4e2:	21d3      	movs	r1, #211	; 0xd3
 801d4e4:	4a13      	ldr	r2, [pc, #76]	; (801d534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801d4e6:	4814      	ldr	r0, [pc, #80]	; (801d538 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801d4e8:	f00a fd26 	bl	8027f38 <__assert_func>
 801d4ec:	8ac1      	ldrh	r1, [r0, #22]
 801d4ee:	4411      	add	r1, r2
 801d4f0:	3a01      	subs	r2, #1
 801d4f2:	f001 0101 	and.w	r1, r1, #1
 801d4f6:	b292      	uxth	r2, r2
 801d4f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d4fc:	8a49      	ldrh	r1, [r1, #18]
 801d4fe:	428d      	cmp	r5, r1
 801d500:	d0e7      	beq.n	801d4d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801d502:	2000      	movs	r0, #0
 801d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d508:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801d50c:	2600      	movs	r6, #0
 801d50e:	f100 051a 	add.w	r5, r0, #26
 801d512:	441f      	add	r7, r3
 801d514:	b2b1      	uxth	r1, r6
 801d516:	42b9      	cmp	r1, r7
 801d518:	da08      	bge.n	801d52c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801d51a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801d51e:	4628      	mov	r0, r5
 801d520:	f7ff feda 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d524:	3601      	adds	r6, #1
 801d526:	4540      	cmp	r0, r8
 801d528:	d0f4      	beq.n	801d514 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801d52a:	e7ea      	b.n	801d502 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801d52c:	2001      	movs	r0, #1
 801d52e:	e7e9      	b.n	801d504 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801d530:	0802c2b9 	.word	0x0802c2b9
 801d534:	0802c848 	.word	0x0802c848
 801d538:	0802c2c7 	.word	0x0802c2c7

0801d53c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801d53c:	b538      	push	{r3, r4, r5, lr}
 801d53e:	8ac3      	ldrh	r3, [r0, #22]
 801d540:	428b      	cmp	r3, r1
 801d542:	d205      	bcs.n	801d550 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801d544:	4b08      	ldr	r3, [pc, #32]	; (801d568 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801d546:	21d8      	movs	r1, #216	; 0xd8
 801d548:	4a08      	ldr	r2, [pc, #32]	; (801d56c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801d54a:	4809      	ldr	r0, [pc, #36]	; (801d570 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801d54c:	f00a fcf4 	bl	8027f38 <__assert_func>
 801d550:	8a82      	ldrh	r2, [r0, #20]
 801d552:	250a      	movs	r5, #10
 801d554:	1a5b      	subs	r3, r3, r1
 801d556:	440a      	add	r2, r1
 801d558:	82c3      	strh	r3, [r0, #22]
 801d55a:	fbb2 f4f5 	udiv	r4, r2, r5
 801d55e:	fb05 2214 	mls	r2, r5, r4, r2
 801d562:	8282      	strh	r2, [r0, #20]
 801d564:	bd38      	pop	{r3, r4, r5, pc}
 801d566:	bf00      	nop
 801d568:	0802c2ad 	.word	0x0802c2ad
 801d56c:	0802c664 	.word	0x0802c664
 801d570:	0802c2c7 	.word	0x0802c2c7

0801d574 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801d574:	b538      	push	{r3, r4, r5, lr}
 801d576:	8ac3      	ldrh	r3, [r0, #22]
 801d578:	2b09      	cmp	r3, #9
 801d57a:	d905      	bls.n	801d588 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801d57c:	4b08      	ldr	r3, [pc, #32]	; (801d5a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801d57e:	21f7      	movs	r1, #247	; 0xf7
 801d580:	4a08      	ldr	r2, [pc, #32]	; (801d5a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801d582:	4809      	ldr	r0, [pc, #36]	; (801d5a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801d584:	f00a fcd8 	bl	8027f38 <__assert_func>
 801d588:	8a82      	ldrh	r2, [r0, #20]
 801d58a:	250a      	movs	r5, #10
 801d58c:	441a      	add	r2, r3
 801d58e:	3301      	adds	r3, #1
 801d590:	fbb2 f4f5 	udiv	r4, r2, r5
 801d594:	fb05 2214 	mls	r2, r5, r4, r2
 801d598:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801d59c:	82c3      	strh	r3, [r0, #22]
 801d59e:	bd38      	pop	{r3, r4, r5, pc}
 801d5a0:	0802c2a1 	.word	0x0802c2a1
 801d5a4:	0802c5b5 	.word	0x0802c5b5
 801d5a8:	0802c2c7 	.word	0x0802c2c7

0801d5ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d5ac:	b538      	push	{r3, r4, r5, lr}
 801d5ae:	4604      	mov	r4, r0
 801d5b0:	f100 051a 	add.w	r5, r0, #26
 801d5b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d5b6:	2b0a      	cmp	r3, #10
 801d5b8:	d01c      	beq.n	801d5f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801d5ba:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801d5bc:	b962      	cbnz	r2, 801d5d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801d5be:	f104 051a 	add.w	r5, r4, #26
 801d5c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d5c4:	2b0a      	cmp	r3, #10
 801d5c6:	d015      	beq.n	801d5f4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801d5c8:	4620      	mov	r0, r4
 801d5ca:	f7ff fdf6 	bl	801d1ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d5ce:	4601      	mov	r1, r0
 801d5d0:	4628      	mov	r0, r5
 801d5d2:	f7ff ffcf 	bl	801d574 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801d5d6:	e7f4      	b.n	801d5c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801d5d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d5da:	3a01      	subs	r2, #1
 801d5dc:	4628      	mov	r0, r5
 801d5de:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801d5e2:	3301      	adds	r3, #1
 801d5e4:	f003 0301 	and.w	r3, r3, #1
 801d5e8:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801d5ea:	8722      	strh	r2, [r4, #56]	; 0x38
 801d5ec:	86e3      	strh	r3, [r4, #54]	; 0x36
 801d5ee:	f7ff ffc1 	bl	801d574 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801d5f2:	e7df      	b.n	801d5b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801d5f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d5f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801d5f8:	2300      	movs	r3, #0
 801d5fa:	b510      	push	{r4, lr}
 801d5fc:	6043      	str	r3, [r0, #4]
 801d5fe:	4604      	mov	r4, r0
 801d600:	60c3      	str	r3, [r0, #12]
 801d602:	7403      	strb	r3, [r0, #16]
 801d604:	8603      	strh	r3, [r0, #48]	; 0x30
 801d606:	8303      	strh	r3, [r0, #24]
 801d608:	8703      	strh	r3, [r0, #56]	; 0x38
 801d60a:	f7ff ffcf 	bl	801d5ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d60e:	4a0a      	ldr	r2, [pc, #40]	; (801d638 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801d610:	6813      	ldr	r3, [r2, #0]
 801d612:	4611      	mov	r1, r2
 801d614:	b913      	cbnz	r3, 801d61c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801d616:	6852      	ldr	r2, [r2, #4]
 801d618:	07d0      	lsls	r0, r2, #31
 801d61a:	d50b      	bpl.n	801d634 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801d61c:	6849      	ldr	r1, [r1, #4]
 801d61e:	104a      	asrs	r2, r1, #1
 801d620:	07c9      	lsls	r1, r1, #31
 801d622:	eb04 0002 	add.w	r0, r4, r2
 801d626:	bf48      	it	mi
 801d628:	58a2      	ldrmi	r2, [r4, r2]
 801d62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d62e:	bf48      	it	mi
 801d630:	58d3      	ldrmi	r3, [r2, r3]
 801d632:	4718      	bx	r3
 801d634:	bd10      	pop	{r4, pc}
 801d636:	bf00      	nop
 801d638:	200086e0 	.word	0x200086e0

0801d63c <_ZN8touchgfx12TextProviderC1Ev>:
 801d63c:	2300      	movs	r3, #0
 801d63e:	2201      	movs	r2, #1
 801d640:	b510      	push	{r4, lr}
 801d642:	4604      	mov	r4, r0
 801d644:	60c3      	str	r3, [r0, #12]
 801d646:	7403      	strb	r3, [r0, #16]
 801d648:	82c3      	strh	r3, [r0, #22]
 801d64a:	8303      	strh	r3, [r0, #24]
 801d64c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d64e:	8603      	strh	r3, [r0, #48]	; 0x30
 801d650:	86c3      	strh	r3, [r0, #54]	; 0x36
 801d652:	8703      	strh	r3, [r0, #56]	; 0x38
 801d654:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d656:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801d65a:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801d65e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801d662:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801d666:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801d66a:	e9c0 3300 	strd	r3, r3, [r0]
 801d66e:	f7ff ffc3 	bl	801d5f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d672:	4620      	mov	r0, r4
 801d674:	bd10      	pop	{r4, pc}

0801d676 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801d676:	b410      	push	{r4}
 801d678:	6082      	str	r2, [r0, #8]
 801d67a:	6001      	str	r1, [r0, #0]
 801d67c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d682:	f7ff bfb9 	b.w	801d5f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801d688 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801d688:	b508      	push	{r3, lr}
 801d68a:	88c2      	ldrh	r2, [r0, #6]
 801d68c:	440a      	add	r2, r1
 801d68e:	2a02      	cmp	r2, #2
 801d690:	dd05      	ble.n	801d69e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801d692:	4b06      	ldr	r3, [pc, #24]	; (801d6ac <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801d694:	21ec      	movs	r1, #236	; 0xec
 801d696:	4a06      	ldr	r2, [pc, #24]	; (801d6b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801d698:	4806      	ldr	r0, [pc, #24]	; (801d6b4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801d69a:	f00a fc4d 	bl	8027f38 <__assert_func>
 801d69e:	8883      	ldrh	r3, [r0, #4]
 801d6a0:	80c2      	strh	r2, [r0, #6]
 801d6a2:	1a59      	subs	r1, r3, r1
 801d6a4:	f001 0101 	and.w	r1, r1, #1
 801d6a8:	8081      	strh	r1, [r0, #4]
 801d6aa:	bd08      	pop	{r3, pc}
 801d6ac:	0802c2f3 	.word	0x0802c2f3
 801d6b0:	0802c7c1 	.word	0x0802c7c1
 801d6b4:	0802c2c7 	.word	0x0802c2c7

0801d6b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801d6b8:	b508      	push	{r3, lr}
 801d6ba:	88c3      	ldrh	r3, [r0, #6]
 801d6bc:	428b      	cmp	r3, r1
 801d6be:	d805      	bhi.n	801d6cc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801d6c0:	4b06      	ldr	r3, [pc, #24]	; (801d6dc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801d6c2:	21fd      	movs	r1, #253	; 0xfd
 801d6c4:	4a06      	ldr	r2, [pc, #24]	; (801d6e0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801d6c6:	4807      	ldr	r0, [pc, #28]	; (801d6e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801d6c8:	f00a fc36 	bl	8027f38 <__assert_func>
 801d6cc:	8883      	ldrh	r3, [r0, #4]
 801d6ce:	4419      	add	r1, r3
 801d6d0:	f001 0101 	and.w	r1, r1, #1
 801d6d4:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801d6d8:	bd08      	pop	{r3, pc}
 801d6da:	bf00      	nop
 801d6dc:	0802c2b9 	.word	0x0802c2b9
 801d6e0:	0802c919 	.word	0x0802c919
 801d6e4:	0802c2c7 	.word	0x0802c2c7

0801d6e8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d6e8:	b570      	push	{r4, r5, r6, lr}
 801d6ea:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801d6ec:	4604      	mov	r4, r0
 801d6ee:	b92a      	cbnz	r2, 801d6fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d6f0:	4b12      	ldr	r3, [pc, #72]	; (801d73c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801d6f2:	21de      	movs	r1, #222	; 0xde
 801d6f4:	4a12      	ldr	r2, [pc, #72]	; (801d740 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d6f6:	4813      	ldr	r0, [pc, #76]	; (801d744 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d6f8:	f00a fc1e 	bl	8027f38 <__assert_func>
 801d6fc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d6fe:	260a      	movs	r6, #10
 801d700:	3a01      	subs	r2, #1
 801d702:	3412      	adds	r4, #18
 801d704:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d708:	3301      	adds	r3, #1
 801d70a:	8b4d      	ldrh	r5, [r1, #26]
 801d70c:	8602      	strh	r2, [r0, #48]	; 0x30
 801d70e:	fbb3 f1f6 	udiv	r1, r3, r6
 801d712:	fb06 3311 	mls	r3, r6, r1, r3
 801d716:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d718:	f7ff ff48 	bl	801d5ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d71c:	88e3      	ldrh	r3, [r4, #6]
 801d71e:	2101      	movs	r1, #1
 801d720:	2b02      	cmp	r3, #2
 801d722:	bf04      	itt	eq
 801d724:	2301      	moveq	r3, #1
 801d726:	80e3      	strheq	r3, [r4, #6]
 801d728:	4620      	mov	r0, r4
 801d72a:	f7ff ffad 	bl	801d688 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801d72e:	4620      	mov	r0, r4
 801d730:	462a      	mov	r2, r5
 801d732:	2100      	movs	r1, #0
 801d734:	f7ff ffc0 	bl	801d6b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801d738:	4628      	mov	r0, r5
 801d73a:	bd70      	pop	{r4, r5, r6, pc}
 801d73c:	0802c298 	.word	0x0802c298
 801d740:	0802c50a 	.word	0x0802c50a
 801d744:	0802c2c7 	.word	0x0802c2c7

0801d748 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d748:	428a      	cmp	r2, r1
 801d74a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d74e:	4604      	mov	r4, r0
 801d750:	460e      	mov	r6, r1
 801d752:	4615      	mov	r5, r2
 801d754:	469a      	mov	sl, r3
 801d756:	d92b      	bls.n	801d7b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801d758:	1a57      	subs	r7, r2, r1
 801d75a:	f04f 0800 	mov.w	r8, #0
 801d75e:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801d762:	f04f 0b0a 	mov.w	fp, #10
 801d766:	b2bf      	uxth	r7, r7
 801d768:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d76a:	b92b      	cbnz	r3, 801d778 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801d76c:	4b24      	ldr	r3, [pc, #144]	; (801d800 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801d76e:	21e6      	movs	r1, #230	; 0xe6
 801d770:	4a24      	ldr	r2, [pc, #144]	; (801d804 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801d772:	4825      	ldr	r0, [pc, #148]	; (801d808 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801d774:	f00a fbe0 	bl	8027f38 <__assert_func>
 801d778:	3b01      	subs	r3, #1
 801d77a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801d77c:	2101      	movs	r1, #1
 801d77e:	4648      	mov	r0, r9
 801d780:	b29b      	uxth	r3, r3
 801d782:	f108 0801 	add.w	r8, r8, #1
 801d786:	441a      	add	r2, r3
 801d788:	8623      	strh	r3, [r4, #48]	; 0x30
 801d78a:	fbb2 f3fb 	udiv	r3, r2, fp
 801d78e:	fb0b 2313 	mls	r3, fp, r3, r2
 801d792:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d796:	8b5a      	ldrh	r2, [r3, #26]
 801d798:	9201      	str	r2, [sp, #4]
 801d79a:	f7ff ff75 	bl	801d688 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801d79e:	9a01      	ldr	r2, [sp, #4]
 801d7a0:	2100      	movs	r1, #0
 801d7a2:	4648      	mov	r0, r9
 801d7a4:	f7ff ff88 	bl	801d6b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801d7a8:	fa1f f388 	uxth.w	r3, r8
 801d7ac:	429f      	cmp	r7, r3
 801d7ae:	d8db      	bhi.n	801d768 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801d7b0:	f104 071a 	add.w	r7, r4, #26
 801d7b4:	4631      	mov	r1, r6
 801d7b6:	260a      	movs	r6, #10
 801d7b8:	4638      	mov	r0, r7
 801d7ba:	f7ff febf 	bl	801d53c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801d7be:	b1c5      	cbz	r5, 801d7f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d7c0:	3d01      	subs	r5, #1
 801d7c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801d7c4:	b2ad      	uxth	r5, r5
 801d7c6:	2b09      	cmp	r3, #9
 801d7c8:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801d7cc:	d903      	bls.n	801d7d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801d7ce:	4b0f      	ldr	r3, [pc, #60]	; (801d80c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801d7d0:	21ec      	movs	r1, #236	; 0xec
 801d7d2:	4a0f      	ldr	r2, [pc, #60]	; (801d810 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801d7d4:	e7cd      	b.n	801d772 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801d7d6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801d7d8:	3301      	adds	r3, #1
 801d7da:	3109      	adds	r1, #9
 801d7dc:	8623      	strh	r3, [r4, #48]	; 0x30
 801d7de:	fbb1 f0f6 	udiv	r0, r1, r6
 801d7e2:	fb06 1110 	mls	r1, r6, r0, r1
 801d7e6:	4638      	mov	r0, r7
 801d7e8:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801d7ea:	2100      	movs	r1, #0
 801d7ec:	f7ff fd5a 	bl	801d2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801d7f0:	e7e5      	b.n	801d7be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	b003      	add	sp, #12
 801d7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7fa:	f7ff bed7 	b.w	801d5ac <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d7fe:	bf00      	nop
 801d800:	0802c298 	.word	0x0802c298
 801d804:	0802c38e 	.word	0x0802c38e
 801d808:	0802c2c7 	.word	0x0802c2c7
 801d80c:	0802c2f3 	.word	0x0802c2f3
 801d810:	0802c306 	.word	0x0802c306

0801d814 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d818:	4605      	mov	r5, r0
 801d81a:	4616      	mov	r6, r2
 801d81c:	1c8c      	adds	r4, r1, #2
 801d81e:	8809      	ldrh	r1, [r1, #0]
 801d820:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d824:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d828:	42b3      	cmp	r3, r6
 801d82a:	d124      	bne.n	801d876 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d82c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d830:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d834:	f001 070f 	and.w	r7, r1, #15
 801d838:	4652      	mov	r2, sl
 801d83a:	f8cd 8000 	str.w	r8, [sp]
 801d83e:	464b      	mov	r3, r9
 801d840:	4621      	mov	r1, r4
 801d842:	4628      	mov	r0, r5
 801d844:	f7ff fe3e 	bl	801d4c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d848:	4683      	mov	fp, r0
 801d84a:	b168      	cbz	r0, 801d868 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d84c:	eb0a 0109 	add.w	r1, sl, r9
 801d850:	463a      	mov	r2, r7
 801d852:	4628      	mov	r0, r5
 801d854:	4441      	add	r1, r8
 801d856:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d85a:	4649      	mov	r1, r9
 801d85c:	f7ff ff74 	bl	801d748 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d860:	4658      	mov	r0, fp
 801d862:	b003      	add	sp, #12
 801d864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d868:	eb07 010a 	add.w	r1, r7, sl
 801d86c:	4449      	add	r1, r9
 801d86e:	4441      	add	r1, r8
 801d870:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d874:	e7d2      	b.n	801d81c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d876:	f04f 0b00 	mov.w	fp, #0
 801d87a:	e7f1      	b.n	801d860 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d87c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d880:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801d882:	4604      	mov	r4, r0
 801d884:	260b      	movs	r6, #11
 801d886:	f100 091a 	add.w	r9, r0, #26
 801d88a:	886f      	ldrh	r7, [r5, #2]
 801d88c:	087f      	lsrs	r7, r7, #1
 801d88e:	3e01      	subs	r6, #1
 801d890:	d013      	beq.n	801d8ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801d892:	2100      	movs	r1, #0
 801d894:	4648      	mov	r0, r9
 801d896:	f7ff fd1f 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d89a:	462a      	mov	r2, r5
 801d89c:	4680      	mov	r8, r0
 801d89e:	4603      	mov	r3, r0
 801d8a0:	4639      	mov	r1, r7
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	f7ff fce0 	bl	801d268 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d8a8:	b138      	cbz	r0, 801d8ba <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801d8aa:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d8ae:	4642      	mov	r2, r8
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	f7ff ffaf 	bl	801d814 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d8b6:	2800      	cmp	r0, #0
 801d8b8:	d1e9      	bne.n	801d88e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801d8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801d8c0:	4b1e      	ldr	r3, [pc, #120]	; (801d93c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801d8c2:	b570      	push	{r4, r5, r6, lr}
 801d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c8:	4604      	mov	r4, r0
 801d8ca:	f003 0501 	and.w	r5, r3, #1
 801d8ce:	b902      	cbnz	r2, 801d8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801d8d0:	b165      	cbz	r5, 801d8ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801d8d2:	105b      	asrs	r3, r3, #1
 801d8d4:	f104 061a 	add.w	r6, r4, #26
 801d8d8:	18e0      	adds	r0, r4, r3
 801d8da:	b10d      	cbz	r5, 801d8e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801d8dc:	58e3      	ldr	r3, [r4, r3]
 801d8de:	589a      	ldr	r2, [r3, r2]
 801d8e0:	4790      	blx	r2
 801d8e2:	2100      	movs	r1, #0
 801d8e4:	4602      	mov	r2, r0
 801d8e6:	4630      	mov	r0, r6
 801d8e8:	f7ff fcdc 	bl	801d2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801d8ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d8ee:	b303      	cbz	r3, 801d932 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801d8f0:	f104 051a 	add.w	r5, r4, #26
 801d8f4:	2100      	movs	r1, #0
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	f7ff fcee 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d8fc:	b1c8      	cbz	r0, 801d932 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801d8fe:	4620      	mov	r0, r4
 801d900:	f7ff ffbc 	bl	801d87c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801d904:	2101      	movs	r1, #1
 801d906:	4628      	mov	r0, r5
 801d908:	f7ff fce6 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d90c:	f640 133f 	movw	r3, #2367	; 0x93f
 801d910:	4606      	mov	r6, r0
 801d912:	4298      	cmp	r0, r3
 801d914:	d10d      	bne.n	801d932 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801d916:	2100      	movs	r1, #0
 801d918:	4628      	mov	r0, r5
 801d91a:	f7ff fcdd 	bl	801d2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801d91e:	2101      	movs	r1, #1
 801d920:	4602      	mov	r2, r0
 801d922:	4628      	mov	r0, r5
 801d924:	f7ff fcbe 	bl	801d2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801d928:	4632      	mov	r2, r6
 801d92a:	2100      	movs	r1, #0
 801d92c:	4628      	mov	r0, r5
 801d92e:	f7ff fcb9 	bl	801d2a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801d932:	4620      	mov	r0, r4
 801d934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d938:	f7ff bed6 	b.w	801d6e8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d93c:	200086e8 	.word	0x200086e8

0801d940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d942:	4617      	mov	r7, r2
 801d944:	461e      	mov	r6, r3
 801d946:	4605      	mov	r5, r0
 801d948:	f7ff ffba 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d94c:	683b      	ldr	r3, [r7, #0]
 801d94e:	4604      	mov	r4, r0
 801d950:	4601      	mov	r1, r0
 801d952:	4638      	mov	r0, r7
 801d954:	68db      	ldr	r3, [r3, #12]
 801d956:	4798      	blx	r3
 801d958:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801d95c:	4602      	mov	r2, r0
 801d95e:	6030      	str	r0, [r6, #0]
 801d960:	b29b      	uxth	r3, r3
 801d962:	2b7f      	cmp	r3, #127	; 0x7f
 801d964:	d813      	bhi.n	801d98e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801d966:	4639      	mov	r1, r7
 801d968:	4628      	mov	r0, r5
 801d96a:	f7ff fccf 	bl	801d30c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d96e:	6030      	str	r0, [r6, #0]
 801d970:	6833      	ldr	r3, [r6, #0]
 801d972:	b143      	cbz	r3, 801d986 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d974:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801d978:	7a9b      	ldrb	r3, [r3, #10]
 801d97a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d97e:	4313      	orrs	r3, r2
 801d980:	bf0c      	ite	eq
 801d982:	2301      	moveq	r3, #1
 801d984:	2300      	movne	r3, #0
 801d986:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d98a:	4620      	mov	r0, r4
 801d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d98e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801d992:	2b00      	cmp	r3, #0
 801d994:	d0ec      	beq.n	801d970 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801d996:	f640 1302 	movw	r3, #2306	; 0x902
 801d99a:	429c      	cmp	r4, r3
 801d99c:	d1e8      	bne.n	801d970 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801d99e:	4601      	mov	r1, r0
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	f7ff fc32 	bl	801d20a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d9a6:	e7e2      	b.n	801d96e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801d9a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ac:	4617      	mov	r7, r2
 801d9ae:	461e      	mov	r6, r3
 801d9b0:	4605      	mov	r5, r0
 801d9b2:	f7ff ff85 	bl	801d8c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	4604      	mov	r4, r0
 801d9ba:	4601      	mov	r1, r0
 801d9bc:	4638      	mov	r0, r7
 801d9be:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801d9c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d9c6:	47c0      	blx	r8
 801d9c8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801d9cc:	4602      	mov	r2, r0
 801d9ce:	6030      	str	r0, [r6, #0]
 801d9d0:	b29b      	uxth	r3, r3
 801d9d2:	2b7f      	cmp	r3, #127	; 0x7f
 801d9d4:	d814      	bhi.n	801da00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801d9d6:	4639      	mov	r1, r7
 801d9d8:	4628      	mov	r0, r5
 801d9da:	f7ff fc97 	bl	801d30c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d9de:	6030      	str	r0, [r6, #0]
 801d9e0:	6833      	ldr	r3, [r6, #0]
 801d9e2:	b143      	cbz	r3, 801d9f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d9e4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801d9e8:	7a9b      	ldrb	r3, [r3, #10]
 801d9ea:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d9ee:	4313      	orrs	r3, r2
 801d9f0:	bf0c      	ite	eq
 801d9f2:	2301      	moveq	r3, #1
 801d9f4:	2300      	movne	r3, #0
 801d9f6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da00:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801da04:	2b00      	cmp	r3, #0
 801da06:	d0eb      	beq.n	801d9e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801da08:	f640 1302 	movw	r3, #2306	; 0x902
 801da0c:	429c      	cmp	r4, r3
 801da0e:	d1e7      	bne.n	801d9e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801da10:	4601      	mov	r1, r0
 801da12:	4628      	mov	r0, r5
 801da14:	f7ff fbf9 	bl	801d20a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801da18:	e7e1      	b.n	801d9de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801da1a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801da1a:	4602      	mov	r2, r0
 801da1c:	b148      	cbz	r0, 801da32 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801da1e:	2300      	movs	r3, #0
 801da20:	b298      	uxth	r0, r3
 801da22:	3301      	adds	r3, #1
 801da24:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801da28:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801da2c:	2900      	cmp	r1, #0
 801da2e:	d1f7      	bne.n	801da20 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801da30:	4770      	bx	lr
 801da32:	4770      	bx	lr

0801da34 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801da34:	b140      	cbz	r0, 801da48 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801da36:	4602      	mov	r2, r0
 801da38:	1a13      	subs	r3, r2, r0
 801da3a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801da3e:	b29b      	uxth	r3, r3
 801da40:	2900      	cmp	r1, #0
 801da42:	d1f9      	bne.n	801da38 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801da44:	4618      	mov	r0, r3
 801da46:	4770      	bx	lr
 801da48:	4603      	mov	r3, r0
 801da4a:	e7fb      	b.n	801da44 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801da4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801da4c:	b530      	push	{r4, r5, lr}
 801da4e:	4604      	mov	r4, r0
 801da50:	b159      	cbz	r1, 801da6a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801da52:	b148      	cbz	r0, 801da68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801da54:	2300      	movs	r3, #0
 801da56:	b298      	uxth	r0, r3
 801da58:	4282      	cmp	r2, r0
 801da5a:	d905      	bls.n	801da68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801da5c:	5ccd      	ldrb	r5, [r1, r3]
 801da5e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801da62:	3301      	adds	r3, #1
 801da64:	2d00      	cmp	r5, #0
 801da66:	d1f6      	bne.n	801da56 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801da68:	bd30      	pop	{r4, r5, pc}
 801da6a:	4608      	mov	r0, r1
 801da6c:	e7fc      	b.n	801da68 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801da6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801da6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da70:	468c      	mov	ip, r1
 801da72:	b08b      	sub	sp, #44	; 0x2c
 801da74:	2100      	movs	r1, #0
 801da76:	ae01      	add	r6, sp, #4
 801da78:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801da7c:	211f      	movs	r1, #31
 801da7e:	fbb0 f7f3 	udiv	r7, r0, r3
 801da82:	fb03 0517 	mls	r5, r3, r7, r0
 801da86:	4638      	mov	r0, r7
 801da88:	b2ec      	uxtb	r4, r5
 801da8a:	2d09      	cmp	r5, #9
 801da8c:	bfd4      	ite	le
 801da8e:	3430      	addle	r4, #48	; 0x30
 801da90:	3457      	addgt	r4, #87	; 0x57
 801da92:	b2e4      	uxtb	r4, r4
 801da94:	558c      	strb	r4, [r1, r6]
 801da96:	1e4c      	subs	r4, r1, #1
 801da98:	b92f      	cbnz	r7, 801daa6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801da9a:	4431      	add	r1, r6
 801da9c:	4660      	mov	r0, ip
 801da9e:	f7ff ffd5 	bl	801da4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801daa2:	b00b      	add	sp, #44	; 0x2c
 801daa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801daa6:	4621      	mov	r1, r4
 801daa8:	e7e9      	b.n	801da7e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801daaa <_ZN8touchgfx7Unicode4itoaElPtti>:
 801daaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daac:	4607      	mov	r7, r0
 801daae:	b08b      	sub	sp, #44	; 0x2c
 801dab0:	4608      	mov	r0, r1
 801dab2:	b341      	cbz	r1, 801db06 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801dab4:	1e99      	subs	r1, r3, #2
 801dab6:	290e      	cmp	r1, #14
 801dab8:	d825      	bhi.n	801db06 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801daba:	2100      	movs	r1, #0
 801dabc:	463c      	mov	r4, r7
 801dabe:	261f      	movs	r6, #31
 801dac0:	f10d 0c04 	add.w	ip, sp, #4
 801dac4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801dac8:	1e71      	subs	r1, r6, #1
 801daca:	fb94 fef3 	sdiv	lr, r4, r3
 801dace:	fb03 441e 	mls	r4, r3, lr, r4
 801dad2:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801dad6:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801dada:	b2ec      	uxtb	r4, r5
 801dadc:	2d09      	cmp	r5, #9
 801dade:	bfd4      	ite	le
 801dae0:	3430      	addle	r4, #48	; 0x30
 801dae2:	3457      	addgt	r4, #87	; 0x57
 801dae4:	b2e4      	uxtb	r4, r4
 801dae6:	f80c 4006 	strb.w	r4, [ip, r6]
 801daea:	4674      	mov	r4, lr
 801daec:	b96c      	cbnz	r4, 801db0a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801daee:	2f00      	cmp	r7, #0
 801daf0:	da05      	bge.n	801dafe <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801daf2:	ab0a      	add	r3, sp, #40	; 0x28
 801daf4:	4419      	add	r1, r3
 801daf6:	232d      	movs	r3, #45	; 0x2d
 801daf8:	f801 3c24 	strb.w	r3, [r1, #-36]
 801dafc:	1eb1      	subs	r1, r6, #2
 801dafe:	3101      	adds	r1, #1
 801db00:	4461      	add	r1, ip
 801db02:	f7ff ffa3 	bl	801da4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801db06:	b00b      	add	sp, #44	; 0x2c
 801db08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db0a:	460e      	mov	r6, r1
 801db0c:	e7dc      	b.n	801dac8 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801db0e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801db0e:	b510      	push	{r4, lr}
 801db10:	b158      	cbz	r0, 801db2a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801db12:	1e82      	subs	r2, r0, #2
 801db14:	210a      	movs	r1, #10
 801db16:	2000      	movs	r0, #0
 801db18:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801db1c:	3b30      	subs	r3, #48	; 0x30
 801db1e:	b29c      	uxth	r4, r3
 801db20:	2c09      	cmp	r4, #9
 801db22:	d802      	bhi.n	801db2a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801db24:	fb01 3000 	mla	r0, r1, r0, r3
 801db28:	e7f6      	b.n	801db18 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801db2a:	bd10      	pop	{r4, pc}

0801db2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db30:	b085      	sub	sp, #20
 801db32:	f8d0 8000 	ldr.w	r8, [r0]
 801db36:	468a      	mov	sl, r1
 801db38:	461c      	mov	r4, r3
 801db3a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801db3e:	4681      	mov	r9, r0
 801db40:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801db44:	4640      	mov	r0, r8
 801db46:	9203      	str	r2, [sp, #12]
 801db48:	9102      	str	r1, [sp, #8]
 801db4a:	9301      	str	r3, [sp, #4]
 801db4c:	f7ff ff65 	bl	801da1a <_ZN8touchgfx7Unicode6strlenEPKt>
 801db50:	9a03      	ldr	r2, [sp, #12]
 801db52:	f1ba 0f00 	cmp.w	sl, #0
 801db56:	bf0c      	ite	eq
 801db58:	4684      	moveq	ip, r0
 801db5a:	f100 0c01 	addne.w	ip, r0, #1
 801db5e:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801db62:	8812      	ldrh	r2, [r2, #0]
 801db64:	fa1f fc8c 	uxth.w	ip, ip
 801db68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801db6a:	2a69      	cmp	r2, #105	; 0x69
 801db6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801db6e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801db70:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801db74:	d004      	beq.n	801db80 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801db76:	d844      	bhi.n	801dc02 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801db78:	2a58      	cmp	r2, #88	; 0x58
 801db7a:	d001      	beq.n	801db80 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801db7c:	2a64      	cmp	r2, #100	; 0x64
 801db7e:	d14b      	bne.n	801dc18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801db80:	b1a4      	cbz	r4, 801dbac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801db82:	b956      	cbnz	r6, 801db9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801db84:	2801      	cmp	r0, #1
 801db86:	d108      	bne.n	801db9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801db88:	f8b8 2000 	ldrh.w	r2, [r8]
 801db8c:	2a30      	cmp	r2, #48	; 0x30
 801db8e:	bf02      	ittt	eq
 801db90:	f108 0202 	addeq.w	r2, r8, #2
 801db94:	4630      	moveq	r0, r6
 801db96:	f8c9 2000 	streq.w	r2, [r9]
 801db9a:	45b4      	cmp	ip, r6
 801db9c:	da3e      	bge.n	801dc1c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801db9e:	b2b6      	uxth	r6, r6
 801dba0:	eba6 040c 	sub.w	r4, r6, ip
 801dba4:	46b4      	mov	ip, r6
 801dba6:	b2a4      	uxth	r4, r4
 801dba8:	f04f 0b00 	mov.w	fp, #0
 801dbac:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801dbb0:	3a01      	subs	r2, #1
 801dbb2:	b169      	cbz	r1, 801dbd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801dbb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dbb6:	458c      	cmp	ip, r1
 801dbb8:	da09      	bge.n	801dbce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801dbba:	eba1 010c 	sub.w	r1, r1, ip
 801dbbe:	b289      	uxth	r1, r1
 801dbc0:	b933      	cbnz	r3, 801dbd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801dbc2:	f1bb 0f00 	cmp.w	fp, #0
 801dbc6:	d02b      	beq.n	801dc20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801dbc8:	b350      	cbz	r0, 801dc20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801dbca:	440c      	add	r4, r1
 801dbcc:	b2a4      	uxth	r4, r4
 801dbce:	2100      	movs	r1, #0
 801dbd0:	682b      	ldr	r3, [r5, #0]
 801dbd2:	4293      	cmp	r3, r2
 801dbd4:	da07      	bge.n	801dbe6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801dbd6:	f1ba 0f00 	cmp.w	sl, #0
 801dbda:	d004      	beq.n	801dbe6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801dbdc:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801dbe0:	682b      	ldr	r3, [r5, #0]
 801dbe2:	3301      	adds	r3, #1
 801dbe4:	602b      	str	r3, [r5, #0]
 801dbe6:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801dbea:	b354      	cbz	r4, 801dc42 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801dbec:	682e      	ldr	r6, [r5, #0]
 801dbee:	3c01      	subs	r4, #1
 801dbf0:	42b2      	cmp	r2, r6
 801dbf2:	b2a4      	uxth	r4, r4
 801dbf4:	dd25      	ble.n	801dc42 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801dbf6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801dbfa:	682b      	ldr	r3, [r5, #0]
 801dbfc:	3301      	adds	r3, #1
 801dbfe:	602b      	str	r3, [r5, #0]
 801dc00:	e7f3      	b.n	801dbea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801dc02:	2a73      	cmp	r2, #115	; 0x73
 801dc04:	d003      	beq.n	801dc0e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801dc06:	2a78      	cmp	r2, #120	; 0x78
 801dc08:	d0ba      	beq.n	801db80 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801dc0a:	2a6f      	cmp	r2, #111	; 0x6f
 801dc0c:	e7b7      	b.n	801db7e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801dc0e:	2c00      	cmp	r4, #0
 801dc10:	d0cc      	beq.n	801dbac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801dc12:	42b0      	cmp	r0, r6
 801dc14:	dd00      	ble.n	801dc18 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801dc16:	b2b0      	uxth	r0, r6
 801dc18:	2400      	movs	r4, #0
 801dc1a:	e7c7      	b.n	801dbac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801dc1c:	2400      	movs	r4, #0
 801dc1e:	e7c3      	b.n	801dba8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801dc20:	2900      	cmp	r1, #0
 801dc22:	d0d5      	beq.n	801dbd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801dc24:	f04f 0c20 	mov.w	ip, #32
 801dc28:	682e      	ldr	r6, [r5, #0]
 801dc2a:	2900      	cmp	r1, #0
 801dc2c:	d0d0      	beq.n	801dbd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801dc2e:	3901      	subs	r1, #1
 801dc30:	4296      	cmp	r6, r2
 801dc32:	b289      	uxth	r1, r1
 801dc34:	dacb      	bge.n	801dbce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801dc36:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801dc3a:	682b      	ldr	r3, [r5, #0]
 801dc3c:	3301      	adds	r3, #1
 801dc3e:	602b      	str	r3, [r5, #0]
 801dc40:	e7f2      	b.n	801dc28 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801dc42:	b198      	cbz	r0, 801dc6c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801dc44:	f8d9 3000 	ldr.w	r3, [r9]
 801dc48:	881c      	ldrh	r4, [r3, #0]
 801dc4a:	b17c      	cbz	r4, 801dc6c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801dc4c:	682c      	ldr	r4, [r5, #0]
 801dc4e:	3801      	subs	r0, #1
 801dc50:	42a2      	cmp	r2, r4
 801dc52:	b280      	uxth	r0, r0
 801dc54:	dd0a      	ble.n	801dc6c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801dc56:	1c9c      	adds	r4, r3, #2
 801dc58:	f8c9 4000 	str.w	r4, [r9]
 801dc5c:	881c      	ldrh	r4, [r3, #0]
 801dc5e:	682b      	ldr	r3, [r5, #0]
 801dc60:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801dc64:	682b      	ldr	r3, [r5, #0]
 801dc66:	3301      	adds	r3, #1
 801dc68:	602b      	str	r3, [r5, #0]
 801dc6a:	e7ea      	b.n	801dc42 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801dc6c:	2620      	movs	r6, #32
 801dc6e:	b151      	cbz	r1, 801dc86 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801dc70:	6828      	ldr	r0, [r5, #0]
 801dc72:	3901      	subs	r1, #1
 801dc74:	4282      	cmp	r2, r0
 801dc76:	b289      	uxth	r1, r1
 801dc78:	dd05      	ble.n	801dc86 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801dc7a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801dc7e:	682b      	ldr	r3, [r5, #0]
 801dc80:	3301      	adds	r3, #1
 801dc82:	602b      	str	r3, [r5, #0]
 801dc84:	e7f3      	b.n	801dc6e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801dc86:	b005      	add	sp, #20
 801dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801dc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dc92:	4604      	mov	r4, r0
 801dc94:	f04f 0801 	mov.w	r8, #1
 801dc98:	2000      	movs	r0, #0
 801dc9a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801dc9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801dca2:	8008      	strh	r0, [r1, #0]
 801dca4:	7010      	strb	r0, [r2, #0]
 801dca6:	7018      	strb	r0, [r3, #0]
 801dca8:	f88c 0000 	strb.w	r0, [ip]
 801dcac:	f88e 0000 	strb.w	r0, [lr]
 801dcb0:	7030      	strb	r0, [r6, #0]
 801dcb2:	6820      	ldr	r0, [r4, #0]
 801dcb4:	8800      	ldrh	r0, [r0, #0]
 801dcb6:	b190      	cbz	r0, 801dcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801dcb8:	282b      	cmp	r0, #43	; 0x2b
 801dcba:	d001      	beq.n	801dcc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801dcbc:	2820      	cmp	r0, #32
 801dcbe:	d104      	bne.n	801dcca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801dcc0:	8008      	strh	r0, [r1, #0]
 801dcc2:	6820      	ldr	r0, [r4, #0]
 801dcc4:	3002      	adds	r0, #2
 801dcc6:	6020      	str	r0, [r4, #0]
 801dcc8:	e7f3      	b.n	801dcb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801dcca:	282d      	cmp	r0, #45	; 0x2d
 801dccc:	d102      	bne.n	801dcd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801dcce:	f882 8000 	strb.w	r8, [r2]
 801dcd2:	e7f6      	b.n	801dcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801dcd4:	2823      	cmp	r0, #35	; 0x23
 801dcd6:	d102      	bne.n	801dcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801dcd8:	f883 8000 	strb.w	r8, [r3]
 801dcdc:	e7f1      	b.n	801dcc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801dcde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801dce2:	2b09      	cmp	r3, #9
 801dce4:	d901      	bls.n	801dcea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801dce6:	282a      	cmp	r0, #42	; 0x2a
 801dce8:	d114      	bne.n	801dd14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801dcea:	2201      	movs	r2, #1
 801dcec:	f88e 2000 	strb.w	r2, [lr]
 801dcf0:	6823      	ldr	r3, [r4, #0]
 801dcf2:	8819      	ldrh	r1, [r3, #0]
 801dcf4:	2930      	cmp	r1, #48	; 0x30
 801dcf6:	bf02      	ittt	eq
 801dcf8:	3302      	addeq	r3, #2
 801dcfa:	6023      	streq	r3, [r4, #0]
 801dcfc:	f88c 2000 	strbeq.w	r2, [ip]
 801dd00:	6820      	ldr	r0, [r4, #0]
 801dd02:	8803      	ldrh	r3, [r0, #0]
 801dd04:	2b2a      	cmp	r3, #42	; 0x2a
 801dd06:	d11e      	bne.n	801dd46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801dd08:	f04f 33ff 	mov.w	r3, #4294967295
 801dd0c:	603b      	str	r3, [r7, #0]
 801dd0e:	6823      	ldr	r3, [r4, #0]
 801dd10:	3302      	adds	r3, #2
 801dd12:	6023      	str	r3, [r4, #0]
 801dd14:	6823      	ldr	r3, [r4, #0]
 801dd16:	881b      	ldrh	r3, [r3, #0]
 801dd18:	2b2e      	cmp	r3, #46	; 0x2e
 801dd1a:	d112      	bne.n	801dd42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801dd1c:	2301      	movs	r3, #1
 801dd1e:	7033      	strb	r3, [r6, #0]
 801dd20:	6823      	ldr	r3, [r4, #0]
 801dd22:	1c98      	adds	r0, r3, #2
 801dd24:	6020      	str	r0, [r4, #0]
 801dd26:	885b      	ldrh	r3, [r3, #2]
 801dd28:	2b2a      	cmp	r3, #42	; 0x2a
 801dd2a:	d117      	bne.n	801dd5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801dd2c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd30:	602b      	str	r3, [r5, #0]
 801dd32:	6823      	ldr	r3, [r4, #0]
 801dd34:	3302      	adds	r3, #2
 801dd36:	6023      	str	r3, [r4, #0]
 801dd38:	682b      	ldr	r3, [r5, #0]
 801dd3a:	2b06      	cmp	r3, #6
 801dd3c:	bfa8      	it	ge
 801dd3e:	2306      	movge	r3, #6
 801dd40:	602b      	str	r3, [r5, #0]
 801dd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd46:	f7ff fee2 	bl	801db0e <_ZN8touchgfx7Unicode4atoiEPKt>
 801dd4a:	6038      	str	r0, [r7, #0]
 801dd4c:	6823      	ldr	r3, [r4, #0]
 801dd4e:	881a      	ldrh	r2, [r3, #0]
 801dd50:	3a30      	subs	r2, #48	; 0x30
 801dd52:	2a09      	cmp	r2, #9
 801dd54:	d8de      	bhi.n	801dd14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801dd56:	3302      	adds	r3, #2
 801dd58:	6023      	str	r3, [r4, #0]
 801dd5a:	e7f7      	b.n	801dd4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801dd5c:	f7ff fed7 	bl	801db0e <_ZN8touchgfx7Unicode4atoiEPKt>
 801dd60:	6028      	str	r0, [r5, #0]
 801dd62:	6823      	ldr	r3, [r4, #0]
 801dd64:	881a      	ldrh	r2, [r3, #0]
 801dd66:	3a30      	subs	r2, #48	; 0x30
 801dd68:	2a09      	cmp	r2, #9
 801dd6a:	d8e5      	bhi.n	801dd38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801dd6c:	3302      	adds	r3, #2
 801dd6e:	6023      	str	r3, [r4, #0]
 801dd70:	e7f7      	b.n	801dd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801dd72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801dd72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd76:	b0a2      	sub	sp, #136	; 0x88
 801dd78:	2500      	movs	r5, #0
 801dd7a:	4606      	mov	r6, r0
 801dd7c:	460f      	mov	r7, r1
 801dd7e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801dd82:	9209      	str	r2, [sp, #36]	; 0x24
 801dd84:	4629      	mov	r1, r5
 801dd86:	2242      	movs	r2, #66	; 0x42
 801dd88:	4640      	mov	r0, r8
 801dd8a:	461c      	mov	r4, r3
 801dd8c:	950d      	str	r5, [sp, #52]	; 0x34
 801dd8e:	f7fe fdec 	bl	801c96a <_ZN8touchgfx6memsetEPvhm>
 801dd92:	b30e      	cbz	r6, 801ddd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801dd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd96:	b1f3      	cbz	r3, 801ddd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801dd98:	f107 3aff 	add.w	sl, r7, #4294967295
 801dd9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dda0:	8812      	ldrh	r2, [r2, #0]
 801dda2:	2a00      	cmp	r2, #0
 801dda4:	f000 80b3 	beq.w	801df0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801dda8:	459a      	cmp	sl, r3
 801ddaa:	f340 80b0 	ble.w	801df0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801ddae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ddb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddb4:	f8b9 2000 	ldrh.w	r2, [r9]
 801ddb8:	2a00      	cmp	r2, #0
 801ddba:	d0ef      	beq.n	801dd9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ddbc:	2a25      	cmp	r2, #37	; 0x25
 801ddbe:	f000 80aa 	beq.w	801df16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801ddc2:	459a      	cmp	sl, r3
 801ddc4:	ddea      	ble.n	801dd9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ddc6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ddca:	f109 0202 	add.w	r2, r9, #2
 801ddce:	3301      	adds	r3, #1
 801ddd0:	9209      	str	r2, [sp, #36]	; 0x24
 801ddd2:	930d      	str	r3, [sp, #52]	; 0x34
 801ddd4:	e7eb      	b.n	801ddae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801ddd6:	8033      	strh	r3, [r6, #0]
 801ddd8:	4630      	mov	r0, r6
 801ddda:	b022      	add	sp, #136	; 0x88
 801dddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dde0:	3b63      	subs	r3, #99	; 0x63
 801dde2:	2b01      	cmp	r3, #1
 801dde4:	f200 80df 	bhi.w	801dfa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801dde8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801ddec:	8813      	ldrh	r3, [r2, #0]
 801ddee:	2b69      	cmp	r3, #105	; 0x69
 801ddf0:	d058      	beq.n	801dea4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ddf2:	d81b      	bhi.n	801de2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801ddf4:	2b63      	cmp	r3, #99	; 0x63
 801ddf6:	d02e      	beq.n	801de56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801ddf8:	2b64      	cmp	r3, #100	; 0x64
 801ddfa:	d053      	beq.n	801dea4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ddfc:	2b58      	cmp	r3, #88	; 0x58
 801ddfe:	d06f      	beq.n	801dee0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801de00:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801de04:	46a1      	mov	r9, r4
 801de06:	e02d      	b.n	801de64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801de08:	2b73      	cmp	r3, #115	; 0x73
 801de0a:	d0ed      	beq.n	801dde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801de0c:	d803      	bhi.n	801de16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801de0e:	2b6f      	cmp	r3, #111	; 0x6f
 801de10:	f040 80c9 	bne.w	801dfa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801de14:	e7e8      	b.n	801dde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801de16:	2b75      	cmp	r3, #117	; 0x75
 801de18:	d0e6      	beq.n	801dde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801de1a:	2b78      	cmp	r3, #120	; 0x78
 801de1c:	e7f8      	b.n	801de10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801de1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de20:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801de24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de26:	3302      	adds	r3, #2
 801de28:	9309      	str	r3, [sp, #36]	; 0x24
 801de2a:	e7b7      	b.n	801dd9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801de2c:	2b73      	cmp	r3, #115	; 0x73
 801de2e:	d034      	beq.n	801de9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801de30:	d807      	bhi.n	801de42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801de32:	2b6f      	cmp	r3, #111	; 0x6f
 801de34:	d1e4      	bne.n	801de00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801de36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de38:	f104 0904 	add.w	r9, r4, #4
 801de3c:	2308      	movs	r3, #8
 801de3e:	1aba      	subs	r2, r7, r2
 801de40:	e048      	b.n	801ded4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801de42:	2b75      	cmp	r3, #117	; 0x75
 801de44:	d041      	beq.n	801deca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801de46:	2b78      	cmp	r3, #120	; 0x78
 801de48:	d1da      	bne.n	801de00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801de4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de4c:	f104 0904 	add.w	r9, r4, #4
 801de50:	2310      	movs	r3, #16
 801de52:	1aba      	subs	r2, r7, r2
 801de54:	e03e      	b.n	801ded4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801de56:	7823      	ldrb	r3, [r4, #0]
 801de58:	f104 0904 	add.w	r9, r4, #4
 801de5c:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801de60:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801de64:	aa0d      	add	r2, sp, #52	; 0x34
 801de66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801de6a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801de6e:	a810      	add	r0, sp, #64	; 0x40
 801de70:	9205      	str	r2, [sp, #20]
 801de72:	464c      	mov	r4, r9
 801de74:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801de78:	9204      	str	r2, [sp, #16]
 801de7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de7c:	9203      	str	r2, [sp, #12]
 801de7e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801de82:	9202      	str	r2, [sp, #8]
 801de84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de86:	9201      	str	r2, [sp, #4]
 801de88:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801de8c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801de90:	9200      	str	r2, [sp, #0]
 801de92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de94:	f7ff fe4a 	bl	801db2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801de98:	e7c4      	b.n	801de24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801de9a:	f104 0904 	add.w	r9, r4, #4
 801de9e:	6823      	ldr	r3, [r4, #0]
 801dea0:	9310      	str	r3, [sp, #64]	; 0x40
 801dea2:	e7df      	b.n	801de64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801dea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dea6:	230a      	movs	r3, #10
 801dea8:	4641      	mov	r1, r8
 801deaa:	6820      	ldr	r0, [r4, #0]
 801deac:	1aba      	subs	r2, r7, r2
 801deae:	f104 0904 	add.w	r9, r4, #4
 801deb2:	b292      	uxth	r2, r2
 801deb4:	f7ff fdf9 	bl	801daaa <_ZN8touchgfx7Unicode4itoaElPtti>
 801deb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801debc:	2b2d      	cmp	r3, #45	; 0x2d
 801debe:	d1d1      	bne.n	801de64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801dec0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801dec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dec6:	3302      	adds	r3, #2
 801dec8:	e7ea      	b.n	801dea0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801deca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801decc:	f104 0904 	add.w	r9, r4, #4
 801ded0:	230a      	movs	r3, #10
 801ded2:	1aba      	subs	r2, r7, r2
 801ded4:	b292      	uxth	r2, r2
 801ded6:	4641      	mov	r1, r8
 801ded8:	6820      	ldr	r0, [r4, #0]
 801deda:	f7ff fdc8 	bl	801da6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801dede:	e7c1      	b.n	801de64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801dee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dee2:	2310      	movs	r3, #16
 801dee4:	4641      	mov	r1, r8
 801dee6:	6820      	ldr	r0, [r4, #0]
 801dee8:	1aba      	subs	r2, r7, r2
 801deea:	f104 0904 	add.w	r9, r4, #4
 801deee:	b292      	uxth	r2, r2
 801def0:	f7ff fdbd 	bl	801da6e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801def4:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801def8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801defc:	2b00      	cmp	r3, #0
 801defe:	d0b1      	beq.n	801de64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801df00:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801df04:	2919      	cmp	r1, #25
 801df06:	d8f7      	bhi.n	801def8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801df08:	3b20      	subs	r3, #32
 801df0a:	8013      	strh	r3, [r2, #0]
 801df0c:	e7f4      	b.n	801def8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801df0e:	2200      	movs	r2, #0
 801df10:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801df14:	e760      	b.n	801ddd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801df16:	459a      	cmp	sl, r3
 801df18:	f77f af40 	ble.w	801dd9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801df1c:	f109 0302 	add.w	r3, r9, #2
 801df20:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801df24:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801df28:	a809      	add	r0, sp, #36	; 0x24
 801df2a:	9309      	str	r3, [sp, #36]	; 0x24
 801df2c:	ab0f      	add	r3, sp, #60	; 0x3c
 801df2e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801df32:	9304      	str	r3, [sp, #16]
 801df34:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801df38:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801df3c:	9303      	str	r3, [sp, #12]
 801df3e:	ab0e      	add	r3, sp, #56	; 0x38
 801df40:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801df44:	9302      	str	r3, [sp, #8]
 801df46:	ab0c      	add	r3, sp, #48	; 0x30
 801df48:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801df4c:	9301      	str	r3, [sp, #4]
 801df4e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801df52:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801df56:	9300      	str	r3, [sp, #0]
 801df58:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801df5c:	950e      	str	r5, [sp, #56]	; 0x38
 801df5e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801df62:	950f      	str	r5, [sp, #60]	; 0x3c
 801df64:	f7ff fe92 	bl	801dc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801df68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	bfbf      	itttt	lt
 801df70:	6823      	ldrlt	r3, [r4, #0]
 801df72:	3404      	addlt	r4, #4
 801df74:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801df78:	930e      	strlt	r3, [sp, #56]	; 0x38
 801df7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	bfbf      	itttt	lt
 801df80:	6823      	ldrlt	r3, [r4, #0]
 801df82:	3404      	addlt	r4, #4
 801df84:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801df88:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801df8a:	8813      	ldrh	r3, [r2, #0]
 801df8c:	2b69      	cmp	r3, #105	; 0x69
 801df8e:	f43f af2b 	beq.w	801dde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801df92:	f63f af39 	bhi.w	801de08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801df96:	2b58      	cmp	r3, #88	; 0x58
 801df98:	f43f af26 	beq.w	801dde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801df9c:	f63f af20 	bhi.w	801dde0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801dfa0:	2b25      	cmp	r3, #37	; 0x25
 801dfa2:	f43f af3c 	beq.w	801de1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801dfa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dfa8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801dfac:	f8b9 2000 	ldrh.w	r2, [r9]
 801dfb0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801dfb4:	3301      	adds	r3, #1
 801dfb6:	930d      	str	r3, [sp, #52]	; 0x34
 801dfb8:	e734      	b.n	801de24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801dfbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801dfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfbe:	4605      	mov	r5, r0
 801dfc0:	b0a1      	sub	sp, #132	; 0x84
 801dfc2:	4610      	mov	r0, r2
 801dfc4:	460e      	mov	r6, r1
 801dfc6:	4614      	mov	r4, r2
 801dfc8:	461f      	mov	r7, r3
 801dfca:	f7ff fd33 	bl	801da34 <_ZN8touchgfx7Unicode6strlenEPKc>
 801dfce:	283f      	cmp	r0, #63	; 0x3f
 801dfd0:	d906      	bls.n	801dfe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801dfd2:	4b0a      	ldr	r3, [pc, #40]	; (801dffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801dfd4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801dfd8:	4a09      	ldr	r2, [pc, #36]	; (801e000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801dfda:	480a      	ldr	r0, [pc, #40]	; (801e004 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801dfdc:	f009 ffac 	bl	8027f38 <__assert_func>
 801dfe0:	4621      	mov	r1, r4
 801dfe2:	2240      	movs	r2, #64	; 0x40
 801dfe4:	4668      	mov	r0, sp
 801dfe6:	f7ff fd31 	bl	801da4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dfea:	463b      	mov	r3, r7
 801dfec:	466a      	mov	r2, sp
 801dfee:	4631      	mov	r1, r6
 801dff0:	4628      	mov	r0, r5
 801dff2:	f7ff febe 	bl	801dd72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801dff6:	b021      	add	sp, #132	; 0x84
 801dff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dffa:	bf00      	nop
 801dffc:	0802c9f1 	.word	0x0802c9f1
 801e000:	0802cac3 	.word	0x0802cac3
 801e004:	0802ca0e 	.word	0x0802ca0e

0801e008 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e008:	b40c      	push	{r2, r3}
 801e00a:	b507      	push	{r0, r1, r2, lr}
 801e00c:	ab04      	add	r3, sp, #16
 801e00e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e012:	9301      	str	r3, [sp, #4]
 801e014:	f7ff ffd2 	bl	801dfbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e018:	b003      	add	sp, #12
 801e01a:	f85d eb04 	ldr.w	lr, [sp], #4
 801e01e:	b002      	add	sp, #8
 801e020:	4770      	bx	lr
	...

0801e024 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801e024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e028:	b0c3      	sub	sp, #268	; 0x10c
 801e02a:	2400      	movs	r4, #0
 801e02c:	4606      	mov	r6, r0
 801e02e:	4689      	mov	r9, r1
 801e030:	af10      	add	r7, sp, #64	; 0x40
 801e032:	9209      	str	r2, [sp, #36]	; 0x24
 801e034:	4621      	mov	r1, r4
 801e036:	22c8      	movs	r2, #200	; 0xc8
 801e038:	4638      	mov	r0, r7
 801e03a:	469a      	mov	sl, r3
 801e03c:	940c      	str	r4, [sp, #48]	; 0x30
 801e03e:	f7fe fc94 	bl	801c96a <_ZN8touchgfx6memsetEPvhm>
 801e042:	b116      	cbz	r6, 801e04a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e046:	b923      	cbnz	r3, 801e052 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801e048:	8033      	strh	r3, [r6, #0]
 801e04a:	4630      	mov	r0, r6
 801e04c:	b043      	add	sp, #268	; 0x10c
 801e04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e052:	f109 3bff 	add.w	fp, r9, #4294967295
 801e056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e05a:	8812      	ldrh	r2, [r2, #0]
 801e05c:	2a00      	cmp	r2, #0
 801e05e:	f000 80d1 	beq.w	801e204 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e062:	459b      	cmp	fp, r3
 801e064:	f340 80ce 	ble.w	801e204 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801e068:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e06c:	882a      	ldrh	r2, [r5, #0]
 801e06e:	2a00      	cmp	r2, #0
 801e070:	d0f1      	beq.n	801e056 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e072:	2a25      	cmp	r2, #37	; 0x25
 801e074:	f000 80ca 	beq.w	801e20c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801e078:	459b      	cmp	fp, r3
 801e07a:	ddec      	ble.n	801e056 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e07c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e080:	3502      	adds	r5, #2
 801e082:	3301      	adds	r3, #1
 801e084:	9509      	str	r5, [sp, #36]	; 0x24
 801e086:	930c      	str	r3, [sp, #48]	; 0x30
 801e088:	e7ee      	b.n	801e068 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801e08a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e08e:	3202      	adds	r2, #2
 801e090:	920c      	str	r2, [sp, #48]	; 0x30
 801e092:	e0ac      	b.n	801e1ee <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801e094:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e098:	970f      	str	r7, [sp, #60]	; 0x3c
 801e09a:	3401      	adds	r4, #1
 801e09c:	edd3 7a00 	vldr	s15, [r3]
 801e0a0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e0a4:	b923      	cbnz	r3, 801e0b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801e0a6:	2301      	movs	r3, #1
 801e0a8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e0ac:	2303      	movs	r3, #3
 801e0ae:	930e      	str	r3, [sp, #56]	; 0x38
 801e0b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e0b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0b6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801e0ba:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e2b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801e0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c2:	bf42      	ittt	mi
 801e0c4:	232d      	movmi	r3, #45	; 0x2d
 801e0c6:	eef1 7a67 	vnegmi.f32	s15, s15
 801e0ca:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801e0ce:	2300      	movs	r3, #0
 801e0d0:	4298      	cmp	r0, r3
 801e0d2:	dd03      	ble.n	801e0dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801e0d4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e0d8:	3301      	adds	r3, #1
 801e0da:	e7f9      	b.n	801e0d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801e0dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0e4:	eeb0 7a67 	vmov.f32	s14, s15
 801e0e8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f0:	da26      	bge.n	801e140 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801e0f2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801e0f6:	eba9 0202 	sub.w	r2, r9, r2
 801e0fa:	2100      	movs	r1, #0
 801e0fc:	eef4 6ae5 	vcmpe.f32	s13, s11
 801e100:	b28d      	uxth	r5, r1
 801e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e106:	db21      	blt.n	801e14c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e108:	1a53      	subs	r3, r2, r1
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	dd1e      	ble.n	801e14c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801e10e:	2963      	cmp	r1, #99	; 0x63
 801e110:	d01b      	beq.n	801e14a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801e112:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e116:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801e11a:	ee17 3a10 	vmov	r3, s14
 801e11e:	2b09      	cmp	r3, #9
 801e120:	bfa8      	it	ge
 801e122:	2309      	movge	r3, #9
 801e124:	ee07 3a10 	vmov	s14, r3
 801e128:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801e12c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e130:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801e134:	3101      	adds	r1, #1
 801e136:	eee7 7a66 	vfms.f32	s15, s14, s13
 801e13a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801e13e:	e7dd      	b.n	801e0fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801e140:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e144:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801e148:	e7ce      	b.n	801e0e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801e14a:	460d      	mov	r5, r1
 801e14c:	2a63      	cmp	r2, #99	; 0x63
 801e14e:	bfd4      	ite	le
 801e150:	ebc5 0202 	rsble	r2, r5, r2
 801e154:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801e158:	2a00      	cmp	r2, #0
 801e15a:	dd4e      	ble.n	801e1fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801e15c:	4603      	mov	r3, r0
 801e15e:	f04f 0801 	mov.w	r8, #1
 801e162:	2b00      	cmp	r3, #0
 801e164:	dd0e      	ble.n	801e184 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801e166:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e16a:	210a      	movs	r1, #10
 801e16c:	3b01      	subs	r3, #1
 801e16e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e172:	ee17 ca10 	vmov	ip, s14
 801e176:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e17a:	fb01 c808 	mla	r8, r1, r8, ip
 801e17e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e182:	e7ee      	b.n	801e162 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801e184:	2800      	cmp	r0, #0
 801e186:	f100 33ff 	add.w	r3, r0, #4294967295
 801e18a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801e18e:	bfac      	ite	ge
 801e190:	1a18      	subge	r0, r3, r0
 801e192:	4618      	movlt	r0, r3
 801e194:	b292      	uxth	r2, r2
 801e196:	230a      	movs	r3, #10
 801e198:	900e      	str	r0, [sp, #56]	; 0x38
 801e19a:	1979      	adds	r1, r7, r5
 801e19c:	4640      	mov	r0, r8
 801e19e:	f7ff fc84 	bl	801daaa <_ZN8touchgfx7Unicode4itoaElPtti>
 801e1a2:	f1b8 0f01 	cmp.w	r8, #1
 801e1a6:	dc26      	bgt.n	801e1f6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801e1a8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	bf0c      	ite	eq
 801e1b0:	2300      	moveq	r3, #0
 801e1b2:	232e      	movne	r3, #46	; 0x2e
 801e1b4:	aa42      	add	r2, sp, #264	; 0x108
 801e1b6:	4415      	add	r5, r2
 801e1b8:	aa0c      	add	r2, sp, #48	; 0x30
 801e1ba:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801e1be:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e1c2:	a80f      	add	r0, sp, #60	; 0x3c
 801e1c4:	9205      	str	r2, [sp, #20]
 801e1c6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801e1ca:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801e1ce:	9204      	str	r2, [sp, #16]
 801e1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e1d2:	9203      	str	r2, [sp, #12]
 801e1d4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801e1d8:	9202      	str	r2, [sp, #8]
 801e1da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1dc:	9201      	str	r2, [sp, #4]
 801e1de:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801e1e2:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801e1e6:	9200      	str	r2, [sp, #0]
 801e1e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1ea:	f7ff fc9f 	bl	801db2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801e1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1f0:	3302      	adds	r3, #2
 801e1f2:	9309      	str	r3, [sp, #36]	; 0x24
 801e1f4:	e72f      	b.n	801e056 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e1f6:	232e      	movs	r3, #46	; 0x2e
 801e1f8:	e7dc      	b.n	801e1b4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801e1fa:	ab42      	add	r3, sp, #264	; 0x108
 801e1fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801e200:	2300      	movs	r3, #0
 801e202:	e7d9      	b.n	801e1b8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801e204:	2200      	movs	r2, #0
 801e206:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801e20a:	e71e      	b.n	801e04a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801e20c:	459b      	cmp	fp, r3
 801e20e:	f77f af22 	ble.w	801e056 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801e212:	2300      	movs	r3, #0
 801e214:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801e218:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801e21c:	a809      	add	r0, sp, #36	; 0x24
 801e21e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e22a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801e22e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801e232:	930d      	str	r3, [sp, #52]	; 0x34
 801e234:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801e238:	930e      	str	r3, [sp, #56]	; 0x38
 801e23a:	1cab      	adds	r3, r5, #2
 801e23c:	9309      	str	r3, [sp, #36]	; 0x24
 801e23e:	ab0e      	add	r3, sp, #56	; 0x38
 801e240:	9304      	str	r3, [sp, #16]
 801e242:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e246:	9303      	str	r3, [sp, #12]
 801e248:	ab0d      	add	r3, sp, #52	; 0x34
 801e24a:	9302      	str	r3, [sp, #8]
 801e24c:	ab0b      	add	r3, sp, #44	; 0x2c
 801e24e:	9301      	str	r3, [sp, #4]
 801e250:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e254:	9300      	str	r3, [sp, #0]
 801e256:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e25a:	f7ff fd17 	bl	801dc8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801e25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e260:	2b00      	cmp	r3, #0
 801e262:	da0b      	bge.n	801e27c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801e264:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e268:	3401      	adds	r4, #1
 801e26a:	edd3 7a00 	vldr	s15, [r3]
 801e26e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e272:	ee17 3a90 	vmov	r3, s15
 801e276:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e27a:	930d      	str	r3, [sp, #52]	; 0x34
 801e27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e27e:	2b00      	cmp	r3, #0
 801e280:	da0b      	bge.n	801e29a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801e282:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801e286:	3401      	adds	r4, #1
 801e288:	edd3 7a00 	vldr	s15, [r3]
 801e28c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e290:	ee17 3a90 	vmov	r3, s15
 801e294:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e298:	930e      	str	r3, [sp, #56]	; 0x38
 801e29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e29e:	881b      	ldrh	r3, [r3, #0]
 801e2a0:	2b25      	cmp	r3, #37	; 0x25
 801e2a2:	f43f aef2 	beq.w	801e08a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801e2a6:	2b66      	cmp	r3, #102	; 0x66
 801e2a8:	f43f aef4 	beq.w	801e094 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801e2ac:	9509      	str	r5, [sp, #36]	; 0x24
 801e2ae:	882b      	ldrh	r3, [r5, #0]
 801e2b0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801e2b4:	3201      	adds	r2, #1
 801e2b6:	e6eb      	b.n	801e090 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801e2b8:	3f000002 	.word	0x3f000002

0801e2bc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2be:	4605      	mov	r5, r0
 801e2c0:	b0a1      	sub	sp, #132	; 0x84
 801e2c2:	4610      	mov	r0, r2
 801e2c4:	460e      	mov	r6, r1
 801e2c6:	4614      	mov	r4, r2
 801e2c8:	461f      	mov	r7, r3
 801e2ca:	f7ff fbb3 	bl	801da34 <_ZN8touchgfx7Unicode6strlenEPKc>
 801e2ce:	283f      	cmp	r0, #63	; 0x3f
 801e2d0:	d906      	bls.n	801e2e0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801e2d2:	4b0a      	ldr	r3, [pc, #40]	; (801e2fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801e2d4:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801e2d8:	4a09      	ldr	r2, [pc, #36]	; (801e300 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801e2da:	480a      	ldr	r0, [pc, #40]	; (801e304 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801e2dc:	f009 fe2c 	bl	8027f38 <__assert_func>
 801e2e0:	4621      	mov	r1, r4
 801e2e2:	2240      	movs	r2, #64	; 0x40
 801e2e4:	4668      	mov	r0, sp
 801e2e6:	f7ff fbb1 	bl	801da4c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e2ea:	463b      	mov	r3, r7
 801e2ec:	466a      	mov	r2, sp
 801e2ee:	4631      	mov	r1, r6
 801e2f0:	4628      	mov	r0, r5
 801e2f2:	f7ff fe97 	bl	801e024 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801e2f6:	b021      	add	sp, #132	; 0x84
 801e2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2fa:	bf00      	nop
 801e2fc:	0802c9f1 	.word	0x0802c9f1
 801e300:	0802ca34 	.word	0x0802ca34
 801e304:	0802ca0e 	.word	0x0802ca0e

0801e308 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e308:	4b01      	ldr	r3, [pc, #4]	; (801e310 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e30a:	6018      	str	r0, [r3, #0]
 801e30c:	4770      	bx	lr
 801e30e:	bf00      	nop
 801e310:	2000bf8c 	.word	0x2000bf8c

0801e314 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e314:	4b07      	ldr	r3, [pc, #28]	; (801e334 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801e316:	881a      	ldrh	r2, [r3, #0]
 801e318:	4282      	cmp	r2, r0
 801e31a:	d809      	bhi.n	801e330 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e31c:	4b06      	ldr	r3, [pc, #24]	; (801e338 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801e31e:	881b      	ldrh	r3, [r3, #0]
 801e320:	4413      	add	r3, r2
 801e322:	4298      	cmp	r0, r3
 801e324:	da04      	bge.n	801e330 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801e326:	4b05      	ldr	r3, [pc, #20]	; (801e33c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801e32e:	4770      	bx	lr
 801e330:	2000      	movs	r0, #0
 801e332:	4770      	bx	lr
 801e334:	2000bfac 	.word	0x2000bfac
 801e338:	2000bfb0 	.word	0x2000bfb0
 801e33c:	2000bf90 	.word	0x2000bf90

0801e340 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e344:	4d26      	ldr	r5, [pc, #152]	; (801e3e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e346:	682b      	ldr	r3, [r5, #0]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d046      	beq.n	801e3da <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801e34c:	4a25      	ldr	r2, [pc, #148]	; (801e3e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e34e:	4f26      	ldr	r7, [pc, #152]	; (801e3e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e350:	8810      	ldrh	r0, [r2, #0]
 801e352:	883c      	ldrh	r4, [r7, #0]
 801e354:	4e25      	ldr	r6, [pc, #148]	; (801e3ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e356:	4420      	add	r0, r4
 801e358:	1c42      	adds	r2, r0, #1
 801e35a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801e35e:	f022 0201 	bic.w	r2, r2, #1
 801e362:	0412      	lsls	r2, r2, #16
 801e364:	0c12      	lsrs	r2, r2, #16
 801e366:	0051      	lsls	r1, r2, #1
 801e368:	220e      	movs	r2, #14
 801e36a:	eb08 0e01 	add.w	lr, r8, r1
 801e36e:	fb02 fc04 	mul.w	ip, r2, r4
 801e372:	eb03 0208 	add.w	r2, r3, r8
 801e376:	4c1e      	ldr	r4, [pc, #120]	; (801e3f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e378:	6022      	str	r2, [r4, #0]
 801e37a:	eb03 020e 	add.w	r2, r3, lr
 801e37e:	44e6      	add	lr, ip
 801e380:	6032      	str	r2, [r6, #0]
 801e382:	4473      	add	r3, lr
 801e384:	4a1b      	ldr	r2, [pc, #108]	; (801e3f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e386:	6013      	str	r3, [r2, #0]
 801e388:	2300      	movs	r3, #0
 801e38a:	4a1b      	ldr	r2, [pc, #108]	; (801e3f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e38c:	8013      	strh	r3, [r2, #0]
 801e38e:	4a1b      	ldr	r2, [pc, #108]	; (801e3fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e390:	6812      	ldr	r2, [r2, #0]
 801e392:	eba2 0208 	sub.w	r2, r2, r8
 801e396:	1a52      	subs	r2, r2, r1
 801e398:	4919      	ldr	r1, [pc, #100]	; (801e400 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e39a:	eba2 020c 	sub.w	r2, r2, ip
 801e39e:	469c      	mov	ip, r3
 801e3a0:	600a      	str	r2, [r1, #0]
 801e3a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e3a6:	4a17      	ldr	r2, [pc, #92]	; (801e404 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e3a8:	8013      	strh	r3, [r2, #0]
 801e3aa:	4283      	cmp	r3, r0
 801e3ac:	d10d      	bne.n	801e3ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801e3ae:	883d      	ldrh	r5, [r7, #0]
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	6830      	ldr	r0, [r6, #0]
 801e3b4:	240e      	movs	r4, #14
 801e3b6:	429d      	cmp	r5, r3
 801e3b8:	d90f      	bls.n	801e3da <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801e3ba:	fb04 0203 	mla	r2, r4, r3, r0
 801e3be:	3301      	adds	r3, #1
 801e3c0:	7b11      	ldrb	r1, [r2, #12]
 801e3c2:	f36f 1145 	bfc	r1, #5, #1
 801e3c6:	7311      	strb	r1, [r2, #12]
 801e3c8:	e7f5      	b.n	801e3b6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801e3ca:	682a      	ldr	r2, [r5, #0]
 801e3cc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e3d0:	6822      	ldr	r2, [r4, #0]
 801e3d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e3d6:	3301      	adds	r3, #1
 801e3d8:	e7e7      	b.n	801e3aa <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801e3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3de:	bf00      	nop
 801e3e0:	2000bf90 	.word	0x2000bf90
 801e3e4:	2000bfac 	.word	0x2000bfac
 801e3e8:	2000bfb0 	.word	0x2000bfb0
 801e3ec:	2000bf94 	.word	0x2000bf94
 801e3f0:	2000bfa4 	.word	0x2000bfa4
 801e3f4:	2000bf9c 	.word	0x2000bf9c
 801e3f8:	2000bfae 	.word	0x2000bfae
 801e3fc:	2000bf98 	.word	0x2000bf98
 801e400:	2000bfa8 	.word	0x2000bfa8
 801e404:	2000bfa0 	.word	0x2000bfa0

0801e408 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e408:	4b10      	ldr	r3, [pc, #64]	; (801e44c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e40a:	b510      	push	{r4, lr}
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	b9db      	cbnz	r3, 801e448 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e410:	b1d1      	cbz	r1, 801e448 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e412:	4b0f      	ldr	r3, [pc, #60]	; (801e450 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e414:	240e      	movs	r4, #14
 801e416:	801a      	strh	r2, [r3, #0]
 801e418:	b292      	uxth	r2, r2
 801e41a:	4b0e      	ldr	r3, [pc, #56]	; (801e454 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e41c:	881b      	ldrh	r3, [r3, #0]
 801e41e:	4413      	add	r3, r2
 801e420:	4362      	muls	r2, r4
 801e422:	2406      	movs	r4, #6
 801e424:	fb04 2203 	mla	r2, r4, r3, r2
 801e428:	428a      	cmp	r2, r1
 801e42a:	d305      	bcc.n	801e438 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e42c:	4b0a      	ldr	r3, [pc, #40]	; (801e458 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e42e:	2137      	movs	r1, #55	; 0x37
 801e430:	4a0a      	ldr	r2, [pc, #40]	; (801e45c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e432:	480b      	ldr	r0, [pc, #44]	; (801e460 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e434:	f009 fd80 	bl	8027f38 <__assert_func>
 801e438:	4b0a      	ldr	r3, [pc, #40]	; (801e464 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e43a:	6019      	str	r1, [r3, #0]
 801e43c:	4b0a      	ldr	r3, [pc, #40]	; (801e468 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e43e:	6018      	str	r0, [r3, #0]
 801e440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e444:	f7ff bf7c 	b.w	801e340 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e448:	bd10      	pop	{r4, pc}
 801e44a:	bf00      	nop
 801e44c:	2000bf9c 	.word	0x2000bf9c
 801e450:	2000bfb0 	.word	0x2000bfb0
 801e454:	2000bfac 	.word	0x2000bfac
 801e458:	0802cba5 	.word	0x0802cba5
 801e45c:	0802cbfe 	.word	0x0802cbfe
 801e460:	0802cb80 	.word	0x0802cb80
 801e464:	2000bf98 	.word	0x2000bf98
 801e468:	2000bf90 	.word	0x2000bf90

0801e46c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e46c:	b470      	push	{r4, r5, r6}
 801e46e:	4c07      	ldr	r4, [pc, #28]	; (801e48c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e470:	4605      	mov	r5, r0
 801e472:	4610      	mov	r0, r2
 801e474:	9a03      	ldr	r2, [sp, #12]
 801e476:	6826      	ldr	r6, [r4, #0]
 801e478:	b936      	cbnz	r6, 801e488 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e47a:	6025      	str	r5, [r4, #0]
 801e47c:	4c04      	ldr	r4, [pc, #16]	; (801e490 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e47e:	8021      	strh	r1, [r4, #0]
 801e480:	4619      	mov	r1, r3
 801e482:	bc70      	pop	{r4, r5, r6}
 801e484:	f7ff bfc0 	b.w	801e408 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e488:	bc70      	pop	{r4, r5, r6}
 801e48a:	4770      	bx	lr
 801e48c:	2000bfb4 	.word	0x2000bfb4
 801e490:	2000bfac 	.word	0x2000bfac

0801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e494:	b508      	push	{r3, lr}
 801e496:	4b14      	ldr	r3, [pc, #80]	; (801e4e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e498:	6819      	ldr	r1, [r3, #0]
 801e49a:	b931      	cbnz	r1, 801e4aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e49c:	4b13      	ldr	r3, [pc, #76]	; (801e4ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e49e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801e4a2:	4a13      	ldr	r2, [pc, #76]	; (801e4f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e4a4:	4813      	ldr	r0, [pc, #76]	; (801e4f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e4a6:	f009 fd47 	bl	8027f38 <__assert_func>
 801e4aa:	4a13      	ldr	r2, [pc, #76]	; (801e4f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e4ac:	8803      	ldrh	r3, [r0, #0]
 801e4ae:	8812      	ldrh	r2, [r2, #0]
 801e4b0:	4293      	cmp	r3, r2
 801e4b2:	d204      	bcs.n	801e4be <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e4b4:	2214      	movs	r2, #20
 801e4b6:	fb02 1303 	mla	r3, r2, r3, r1
 801e4ba:	8918      	ldrh	r0, [r3, #8]
 801e4bc:	bd08      	pop	{r3, pc}
 801e4be:	490f      	ldr	r1, [pc, #60]	; (801e4fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e4c0:	8809      	ldrh	r1, [r1, #0]
 801e4c2:	4411      	add	r1, r2
 801e4c4:	428b      	cmp	r3, r1
 801e4c6:	da06      	bge.n	801e4d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e4c8:	1a9b      	subs	r3, r3, r2
 801e4ca:	4a0d      	ldr	r2, [pc, #52]	; (801e500 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e4cc:	210e      	movs	r1, #14
 801e4ce:	6812      	ldr	r2, [r2, #0]
 801e4d0:	fb01 2303 	mla	r3, r1, r3, r2
 801e4d4:	e7f1      	b.n	801e4ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e4d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e4da:	4293      	cmp	r3, r2
 801e4dc:	bf0a      	itet	eq
 801e4de:	4b09      	ldreq	r3, [pc, #36]	; (801e504 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e4e0:	2000      	movne	r0, #0
 801e4e2:	8818      	ldrheq	r0, [r3, #0]
 801e4e4:	e7ea      	b.n	801e4bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e4e6:	bf00      	nop
 801e4e8:	2000bfb4 	.word	0x2000bfb4
 801e4ec:	0802aa80 	.word	0x0802aa80
 801e4f0:	0802ccab 	.word	0x0802ccab
 801e4f4:	0802cb80 	.word	0x0802cb80
 801e4f8:	2000bfac 	.word	0x2000bfac
 801e4fc:	2000bfb0 	.word	0x2000bfb0
 801e500:	2000bf94 	.word	0x2000bf94
 801e504:	2000bede 	.word	0x2000bede

0801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e508:	b508      	push	{r3, lr}
 801e50a:	4b14      	ldr	r3, [pc, #80]	; (801e55c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e50c:	6819      	ldr	r1, [r3, #0]
 801e50e:	b931      	cbnz	r1, 801e51e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e510:	4b13      	ldr	r3, [pc, #76]	; (801e560 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e512:	f240 21fa 	movw	r1, #762	; 0x2fa
 801e516:	4a13      	ldr	r2, [pc, #76]	; (801e564 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e518:	4813      	ldr	r0, [pc, #76]	; (801e568 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e51a:	f009 fd0d 	bl	8027f38 <__assert_func>
 801e51e:	4a13      	ldr	r2, [pc, #76]	; (801e56c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e520:	8803      	ldrh	r3, [r0, #0]
 801e522:	8812      	ldrh	r2, [r2, #0]
 801e524:	4293      	cmp	r3, r2
 801e526:	d204      	bcs.n	801e532 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e528:	2214      	movs	r2, #20
 801e52a:	fb02 1303 	mla	r3, r2, r3, r1
 801e52e:	8958      	ldrh	r0, [r3, #10]
 801e530:	bd08      	pop	{r3, pc}
 801e532:	490f      	ldr	r1, [pc, #60]	; (801e570 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e534:	8809      	ldrh	r1, [r1, #0]
 801e536:	4411      	add	r1, r2
 801e538:	428b      	cmp	r3, r1
 801e53a:	da06      	bge.n	801e54a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e53c:	1a9b      	subs	r3, r3, r2
 801e53e:	4a0d      	ldr	r2, [pc, #52]	; (801e574 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e540:	210e      	movs	r1, #14
 801e542:	6812      	ldr	r2, [r2, #0]
 801e544:	fb01 2303 	mla	r3, r1, r3, r2
 801e548:	e7f1      	b.n	801e52e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e54a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e54e:	4293      	cmp	r3, r2
 801e550:	bf0a      	itet	eq
 801e552:	4b09      	ldreq	r3, [pc, #36]	; (801e578 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e554:	2000      	movne	r0, #0
 801e556:	8818      	ldrheq	r0, [r3, #0]
 801e558:	e7ea      	b.n	801e530 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e55a:	bf00      	nop
 801e55c:	2000bfb4 	.word	0x2000bfb4
 801e560:	0802aa80 	.word	0x0802aa80
 801e564:	0802ccd7 	.word	0x0802ccd7
 801e568:	0802cb80 	.word	0x0802cb80
 801e56c:	2000bfac 	.word	0x2000bfac
 801e570:	2000bfb0 	.word	0x2000bfb0
 801e574:	2000bf94 	.word	0x2000bf94
 801e578:	2000bee0 	.word	0x2000bee0

0801e57c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e57c:	4b23      	ldr	r3, [pc, #140]	; (801e60c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e57e:	b510      	push	{r4, lr}
 801e580:	681c      	ldr	r4, [r3, #0]
 801e582:	b934      	cbnz	r4, 801e592 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e584:	4b22      	ldr	r3, [pc, #136]	; (801e610 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e586:	f240 310e 	movw	r1, #782	; 0x30e
 801e58a:	4a22      	ldr	r2, [pc, #136]	; (801e614 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e58c:	4822      	ldr	r0, [pc, #136]	; (801e618 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e58e:	f009 fcd3 	bl	8027f38 <__assert_func>
 801e592:	4a22      	ldr	r2, [pc, #136]	; (801e61c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e594:	880b      	ldrh	r3, [r1, #0]
 801e596:	8812      	ldrh	r2, [r2, #0]
 801e598:	4293      	cmp	r3, r2
 801e59a:	d211      	bcs.n	801e5c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e59c:	2214      	movs	r2, #20
 801e59e:	fb02 4303 	mla	r3, r2, r3, r4
 801e5a2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e5a6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e5aa:	8a1a      	ldrh	r2, [r3, #16]
 801e5ac:	8a5b      	ldrh	r3, [r3, #18]
 801e5ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e5b2:	8004      	strh	r4, [r0, #0]
 801e5b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5b8:	8041      	strh	r1, [r0, #2]
 801e5ba:	8082      	strh	r2, [r0, #4]
 801e5bc:	80c3      	strh	r3, [r0, #6]
 801e5be:	e00e      	b.n	801e5de <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e5c0:	4917      	ldr	r1, [pc, #92]	; (801e620 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e5c2:	8809      	ldrh	r1, [r1, #0]
 801e5c4:	4411      	add	r1, r2
 801e5c6:	428b      	cmp	r3, r1
 801e5c8:	da0a      	bge.n	801e5e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e5ca:	1a9b      	subs	r3, r3, r2
 801e5cc:	4a15      	ldr	r2, [pc, #84]	; (801e624 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e5ce:	210e      	movs	r1, #14
 801e5d0:	6812      	ldr	r2, [r2, #0]
 801e5d2:	fb01 2303 	mla	r3, r1, r3, r2
 801e5d6:	681a      	ldr	r2, [r3, #0]
 801e5d8:	6002      	str	r2, [r0, #0]
 801e5da:	685a      	ldr	r2, [r3, #4]
 801e5dc:	6042      	str	r2, [r0, #4]
 801e5de:	bd10      	pop	{r4, pc}
 801e5e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e5e4:	4293      	cmp	r3, r2
 801e5e6:	d10b      	bne.n	801e600 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e5e8:	4b0f      	ldr	r3, [pc, #60]	; (801e628 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e5ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e5ee:	4b0f      	ldr	r3, [pc, #60]	; (801e62c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e5f0:	8081      	strh	r1, [r0, #4]
 801e5f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e5f6:	2300      	movs	r3, #0
 801e5f8:	80c2      	strh	r2, [r0, #6]
 801e5fa:	8003      	strh	r3, [r0, #0]
 801e5fc:	8043      	strh	r3, [r0, #2]
 801e5fe:	e7ee      	b.n	801e5de <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e600:	2300      	movs	r3, #0
 801e602:	8003      	strh	r3, [r0, #0]
 801e604:	8043      	strh	r3, [r0, #2]
 801e606:	8083      	strh	r3, [r0, #4]
 801e608:	e7d8      	b.n	801e5bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e60a:	bf00      	nop
 801e60c:	2000bfb4 	.word	0x2000bfb4
 801e610:	0802aa80 	.word	0x0802aa80
 801e614:	0802cc44 	.word	0x0802cc44
 801e618:	0802cb80 	.word	0x0802cb80
 801e61c:	2000bfac 	.word	0x2000bfac
 801e620:	2000bfb0 	.word	0x2000bfb0
 801e624:	2000bf94 	.word	0x2000bf94
 801e628:	2000bede 	.word	0x2000bede
 801e62c:	2000bee0 	.word	0x2000bee0

0801e630 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e630:	4b18      	ldr	r3, [pc, #96]	; (801e694 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	b34b      	cbz	r3, 801e68a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e636:	4a18      	ldr	r2, [pc, #96]	; (801e698 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e638:	8800      	ldrh	r0, [r0, #0]
 801e63a:	8812      	ldrh	r2, [r2, #0]
 801e63c:	4290      	cmp	r0, r2
 801e63e:	d211      	bcs.n	801e664 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e640:	2214      	movs	r2, #20
 801e642:	fb02 3300 	mla	r3, r2, r0, r3
 801e646:	8a1a      	ldrh	r2, [r3, #16]
 801e648:	8919      	ldrh	r1, [r3, #8]
 801e64a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e64e:	428a      	cmp	r2, r1
 801e650:	db1d      	blt.n	801e68e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e652:	8a58      	ldrh	r0, [r3, #18]
 801e654:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e658:	895b      	ldrh	r3, [r3, #10]
 801e65a:	4298      	cmp	r0, r3
 801e65c:	bfac      	ite	ge
 801e65e:	2000      	movge	r0, #0
 801e660:	2001      	movlt	r0, #1
 801e662:	4770      	bx	lr
 801e664:	4b0d      	ldr	r3, [pc, #52]	; (801e69c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e666:	881b      	ldrh	r3, [r3, #0]
 801e668:	4413      	add	r3, r2
 801e66a:	4298      	cmp	r0, r3
 801e66c:	da0d      	bge.n	801e68a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e66e:	4b0c      	ldr	r3, [pc, #48]	; (801e6a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e670:	1a80      	subs	r0, r0, r2
 801e672:	220e      	movs	r2, #14
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	fb02 3300 	mla	r3, r2, r0, r3
 801e67a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e67e:	891a      	ldrh	r2, [r3, #8]
 801e680:	4291      	cmp	r1, r2
 801e682:	db04      	blt.n	801e68e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e684:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e688:	e7e6      	b.n	801e658 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e68a:	2000      	movs	r0, #0
 801e68c:	4770      	bx	lr
 801e68e:	2001      	movs	r0, #1
 801e690:	4770      	bx	lr
 801e692:	bf00      	nop
 801e694:	2000bfb4 	.word	0x2000bfb4
 801e698:	2000bfac 	.word	0x2000bfac
 801e69c:	2000bfb0 	.word	0x2000bfb0
 801e6a0:	2000bf94 	.word	0x2000bf94

0801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e6a4:	b508      	push	{r3, lr}
 801e6a6:	4b12      	ldr	r3, [pc, #72]	; (801e6f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e6a8:	6819      	ldr	r1, [r3, #0]
 801e6aa:	b931      	cbnz	r1, 801e6ba <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e6ac:	4b11      	ldr	r3, [pc, #68]	; (801e6f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e6ae:	f240 3132 	movw	r1, #818	; 0x332
 801e6b2:	4a11      	ldr	r2, [pc, #68]	; (801e6f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e6b4:	4811      	ldr	r0, [pc, #68]	; (801e6fc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e6b6:	f009 fc3f 	bl	8027f38 <__assert_func>
 801e6ba:	8803      	ldrh	r3, [r0, #0]
 801e6bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e6c0:	4293      	cmp	r3, r2
 801e6c2:	d012      	beq.n	801e6ea <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e6c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e6c8:	4293      	cmp	r3, r2
 801e6ca:	d103      	bne.n	801e6d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e6cc:	4b0c      	ldr	r3, [pc, #48]	; (801e700 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e6d2:	bd08      	pop	{r3, pc}
 801e6d4:	4a0b      	ldr	r2, [pc, #44]	; (801e704 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e6d6:	6812      	ldr	r2, [r2, #0]
 801e6d8:	b11a      	cbz	r2, 801e6e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e6da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e6de:	2800      	cmp	r0, #0
 801e6e0:	d1f7      	bne.n	801e6d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e6e2:	2214      	movs	r2, #20
 801e6e4:	4353      	muls	r3, r2
 801e6e6:	58c8      	ldr	r0, [r1, r3]
 801e6e8:	e7f3      	b.n	801e6d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e6ea:	2000      	movs	r0, #0
 801e6ec:	e7f1      	b.n	801e6d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e6ee:	bf00      	nop
 801e6f0:	2000bfb4 	.word	0x2000bfb4
 801e6f4:	0802aa80 	.word	0x0802aa80
 801e6f8:	0802cc7a 	.word	0x0802cc7a
 801e6fc:	0802cb80 	.word	0x0802cb80
 801e700:	2000beec 	.word	0x2000beec
 801e704:	2000bf90 	.word	0x2000bf90

0801e708 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e708:	8802      	ldrh	r2, [r0, #0]
 801e70a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e70e:	429a      	cmp	r2, r3
 801e710:	d840      	bhi.n	801e794 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801e712:	4b21      	ldr	r3, [pc, #132]	; (801e798 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801e714:	881b      	ldrh	r3, [r3, #0]
 801e716:	429a      	cmp	r2, r3
 801e718:	d220      	bcs.n	801e75c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801e71a:	4b20      	ldr	r3, [pc, #128]	; (801e79c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e71c:	6819      	ldr	r1, [r3, #0]
 801e71e:	2314      	movs	r3, #20
 801e720:	fb03 1302 	mla	r3, r3, r2, r1
 801e724:	6858      	ldr	r0, [r3, #4]
 801e726:	2800      	cmp	r0, #0
 801e728:	d035      	beq.n	801e796 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e72a:	491d      	ldr	r1, [pc, #116]	; (801e7a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e72c:	6809      	ldr	r1, [r1, #0]
 801e72e:	2900      	cmp	r1, #0
 801e730:	d031      	beq.n	801e796 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e732:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e736:	b371      	cbz	r1, 801e796 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e738:	895a      	ldrh	r2, [r3, #10]
 801e73a:	8918      	ldrh	r0, [r3, #8]
 801e73c:	4350      	muls	r0, r2
 801e73e:	7c5a      	ldrb	r2, [r3, #17]
 801e740:	7cdb      	ldrb	r3, [r3, #19]
 801e742:	0952      	lsrs	r2, r2, #5
 801e744:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e748:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e74c:	2b0b      	cmp	r3, #11
 801e74e:	bf18      	it	ne
 801e750:	0040      	lslne	r0, r0, #1
 801e752:	3003      	adds	r0, #3
 801e754:	f020 0003 	bic.w	r0, r0, #3
 801e758:	4408      	add	r0, r1
 801e75a:	4770      	bx	lr
 801e75c:	4911      	ldr	r1, [pc, #68]	; (801e7a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e75e:	8809      	ldrh	r1, [r1, #0]
 801e760:	4419      	add	r1, r3
 801e762:	428a      	cmp	r2, r1
 801e764:	da16      	bge.n	801e794 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801e766:	4910      	ldr	r1, [pc, #64]	; (801e7a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e768:	1ad3      	subs	r3, r2, r3
 801e76a:	200e      	movs	r0, #14
 801e76c:	6809      	ldr	r1, [r1, #0]
 801e76e:	fb00 1303 	mla	r3, r0, r3, r1
 801e772:	7b19      	ldrb	r1, [r3, #12]
 801e774:	f001 011f 	and.w	r1, r1, #31
 801e778:	290b      	cmp	r1, #11
 801e77a:	d10b      	bne.n	801e794 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801e77c:	8919      	ldrh	r1, [r3, #8]
 801e77e:	8958      	ldrh	r0, [r3, #10]
 801e780:	4b07      	ldr	r3, [pc, #28]	; (801e7a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e782:	4348      	muls	r0, r1
 801e784:	6819      	ldr	r1, [r3, #0]
 801e786:	3003      	adds	r0, #3
 801e788:	f020 0303 	bic.w	r3, r0, #3
 801e78c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e790:	4418      	add	r0, r3
 801e792:	4770      	bx	lr
 801e794:	2000      	movs	r0, #0
 801e796:	4770      	bx	lr
 801e798:	2000bfac 	.word	0x2000bfac
 801e79c:	2000bfb4 	.word	0x2000bfb4
 801e7a0:	2000bf90 	.word	0x2000bf90
 801e7a4:	2000bfb0 	.word	0x2000bfb0
 801e7a8:	2000bf94 	.word	0x2000bf94

0801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e7ac:	4b19      	ldr	r3, [pc, #100]	; (801e814 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e7ae:	6819      	ldr	r1, [r3, #0]
 801e7b0:	8803      	ldrh	r3, [r0, #0]
 801e7b2:	b1e9      	cbz	r1, 801e7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e7b4:	4a18      	ldr	r2, [pc, #96]	; (801e818 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e7b6:	8812      	ldrh	r2, [r2, #0]
 801e7b8:	429a      	cmp	r2, r3
 801e7ba:	d90a      	bls.n	801e7d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e7bc:	2214      	movs	r2, #20
 801e7be:	fb02 1303 	mla	r3, r2, r3, r1
 801e7c2:	7c58      	ldrb	r0, [r3, #17]
 801e7c4:	0942      	lsrs	r2, r0, #5
 801e7c6:	7cd8      	ldrb	r0, [r3, #19]
 801e7c8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e7cc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e7d0:	4770      	bx	lr
 801e7d2:	4912      	ldr	r1, [pc, #72]	; (801e81c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801e7d4:	8809      	ldrh	r1, [r1, #0]
 801e7d6:	4411      	add	r1, r2
 801e7d8:	428b      	cmp	r3, r1
 801e7da:	da09      	bge.n	801e7f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e7dc:	1a9b      	subs	r3, r3, r2
 801e7de:	4a10      	ldr	r2, [pc, #64]	; (801e820 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801e7e0:	210e      	movs	r1, #14
 801e7e2:	6812      	ldr	r2, [r2, #0]
 801e7e4:	fb01 2303 	mla	r3, r1, r3, r2
 801e7e8:	7b18      	ldrb	r0, [r3, #12]
 801e7ea:	f000 001f 	and.w	r0, r0, #31
 801e7ee:	4770      	bx	lr
 801e7f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e7f4:	4293      	cmp	r3, r2
 801e7f6:	d10a      	bne.n	801e80e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801e7f8:	4b0a      	ldr	r3, [pc, #40]	; (801e824 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801e800:	b10a      	cbz	r2, 801e806 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801e802:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801e804:	b900      	cbnz	r0, 801e808 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e806:	6898      	ldr	r0, [r3, #8]
 801e808:	6803      	ldr	r3, [r0, #0]
 801e80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e80c:	4718      	bx	r3
 801e80e:	2000      	movs	r0, #0
 801e810:	4770      	bx	lr
 801e812:	bf00      	nop
 801e814:	2000bfb4 	.word	0x2000bfb4
 801e818:	2000bfac 	.word	0x2000bfac
 801e81c:	2000bfb0 	.word	0x2000bfb0
 801e820:	2000bf94 	.word	0x2000bf94
 801e824:	2000beec 	.word	0x2000beec

0801e828 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801e828:	2018      	movs	r0, #24
 801e82a:	4770      	bx	lr

0801e82c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801e82c:	2001      	movs	r0, #1
 801e82e:	4770      	bx	lr

0801e830 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801e830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801e834:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801e838:	4770      	bx	lr

0801e83a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801e83a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801e83e:	4770      	bx	lr

0801e840 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801e840:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801e844:	4770      	bx	lr

0801e846 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801e846:	b2c8      	uxtb	r0, r1
 801e848:	4770      	bx	lr

0801e84a <_ZN8touchgfx8LCD24bpp4initEv>:
 801e84a:	4770      	bx	lr

0801e84c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e850:	b085      	sub	sp, #20
 801e852:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801e854:	9203      	str	r2, [sp, #12]
 801e856:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e85a:	6878      	ldr	r0, [r7, #4]
 801e85c:	9201      	str	r2, [sp, #4]
 801e85e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801e860:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801e864:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801e868:	fa1f fc84 	uxth.w	ip, r4
 801e86c:	43e4      	mvns	r4, r4
 801e86e:	9100      	str	r1, [sp, #0]
 801e870:	b2e4      	uxtb	r4, r4
 801e872:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e876:	fb00 2505 	mla	r5, r0, r5, r2
 801e87a:	683a      	ldr	r2, [r7, #0]
 801e87c:	6877      	ldr	r7, [r6, #4]
 801e87e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e882:	3704      	adds	r7, #4
 801e884:	4415      	add	r5, r2
 801e886:	6832      	ldr	r2, [r6, #0]
 801e888:	9202      	str	r2, [sp, #8]
 801e88a:	9a00      	ldr	r2, [sp, #0]
 801e88c:	2a00      	cmp	r2, #0
 801e88e:	dc03      	bgt.n	801e898 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801e890:	9a03      	ldr	r2, [sp, #12]
 801e892:	2a00      	cmp	r2, #0
 801e894:	f340 8116 	ble.w	801eac4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e89a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e89e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	dd0f      	ble.n	801e8c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e8a8:	1406      	asrs	r6, r0, #16
 801e8aa:	d406      	bmi.n	801e8ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e8ac:	4546      	cmp	r6, r8
 801e8ae:	da04      	bge.n	801e8ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e8b0:	1416      	asrs	r6, r2, #16
 801e8b2:	d402      	bmi.n	801e8ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e8b4:	9901      	ldr	r1, [sp, #4]
 801e8b6:	428e      	cmp	r6, r1
 801e8b8:	db07      	blt.n	801e8ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e8ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e8bc:	3b01      	subs	r3, #1
 801e8be:	3503      	adds	r5, #3
 801e8c0:	4408      	add	r0, r1
 801e8c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8c4:	440a      	add	r2, r1
 801e8c6:	e7ed      	b.n	801e8a4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801e8c8:	d011      	beq.n	801e8ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801e8ca:	1e5e      	subs	r6, r3, #1
 801e8cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e8ce:	fb01 0e06 	mla	lr, r1, r6, r0
 801e8d2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e8d6:	d548      	bpl.n	801e96a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801e8d8:	4699      	mov	r9, r3
 801e8da:	462e      	mov	r6, r5
 801e8dc:	f1b9 0f00 	cmp.w	r9, #0
 801e8e0:	f300 809e 	bgt.w	801ea20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801e8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8ec:	441d      	add	r5, r3
 801e8ee:	9b00      	ldr	r3, [sp, #0]
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	f340 80e7 	ble.w	801eac4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e8f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e900:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e904:	eef0 6a62 	vmov.f32	s13, s5
 801e908:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e90c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e910:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e914:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e918:	eef0 6a43 	vmov.f32	s13, s6
 801e91c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e920:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e924:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e928:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e92c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e930:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e934:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e938:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e93c:	ee12 2a90 	vmov	r2, s5
 801e940:	eef0 2a47 	vmov.f32	s5, s14
 801e944:	fb92 f3f3 	sdiv	r3, r2, r3
 801e948:	ee13 2a10 	vmov	r2, s6
 801e94c:	9311      	str	r3, [sp, #68]	; 0x44
 801e94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e950:	eeb0 3a67 	vmov.f32	s6, s15
 801e954:	fb92 f3f3 	sdiv	r3, r2, r3
 801e958:	9312      	str	r3, [sp, #72]	; 0x48
 801e95a:	9b00      	ldr	r3, [sp, #0]
 801e95c:	9a03      	ldr	r2, [sp, #12]
 801e95e:	3b01      	subs	r3, #1
 801e960:	9300      	str	r3, [sp, #0]
 801e962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e964:	bf08      	it	eq
 801e966:	4613      	moveq	r3, r2
 801e968:	e78f      	b.n	801e88a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801e96a:	45c6      	cmp	lr, r8
 801e96c:	dab4      	bge.n	801e8d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801e96e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e970:	fb01 2606 	mla	r6, r1, r6, r2
 801e974:	1436      	asrs	r6, r6, #16
 801e976:	d4af      	bmi.n	801e8d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801e978:	9901      	ldr	r1, [sp, #4]
 801e97a:	428e      	cmp	r6, r1
 801e97c:	daac      	bge.n	801e8d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801e97e:	1cee      	adds	r6, r5, #3
 801e980:	4699      	mov	r9, r3
 801e982:	f1b9 0f00 	cmp.w	r9, #0
 801e986:	f106 0603 	add.w	r6, r6, #3
 801e98a:	ddab      	ble.n	801e8e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801e98c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801e990:	9902      	ldr	r1, [sp, #8]
 801e992:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801e996:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801e99a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801e99e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e9a0:	fb1b fb04 	smulbb	fp, fp, r4
 801e9a4:	f109 39ff 	add.w	r9, r9, #4294967295
 801e9a8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801e9ac:	4408      	add	r0, r1
 801e9ae:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e9b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e9b4:	440a      	add	r2, r1
 801e9b6:	eb07 0a0e 	add.w	sl, r7, lr
 801e9ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e9be:	fb0e be0c 	mla	lr, lr, ip, fp
 801e9c2:	fa1f fe8e 	uxth.w	lr, lr
 801e9c6:	f10e 0b01 	add.w	fp, lr, #1
 801e9ca:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e9ce:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801e9d2:	fb1b fb04 	smulbb	fp, fp, r4
 801e9d6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e9da:	f806 ec06 	strb.w	lr, [r6, #-6]
 801e9de:	f89a e001 	ldrb.w	lr, [sl, #1]
 801e9e2:	fb0e be0c 	mla	lr, lr, ip, fp
 801e9e6:	fa1f fe8e 	uxth.w	lr, lr
 801e9ea:	f10e 0b01 	add.w	fp, lr, #1
 801e9ee:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e9f2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e9f6:	f806 ec05 	strb.w	lr, [r6, #-5]
 801e9fa:	f89a e002 	ldrb.w	lr, [sl, #2]
 801e9fe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ea02:	fb1a fa04 	smulbb	sl, sl, r4
 801ea06:	fb0e ae0c 	mla	lr, lr, ip, sl
 801ea0a:	fa1f fe8e 	uxth.w	lr, lr
 801ea0e:	f10e 0a01 	add.w	sl, lr, #1
 801ea12:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801ea16:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea1a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801ea1e:	e7b0      	b.n	801e982 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801ea20:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ea24:	d446      	bmi.n	801eab4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ea26:	45c2      	cmp	sl, r8
 801ea28:	da44      	bge.n	801eab4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ea2a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801ea2e:	d441      	bmi.n	801eab4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ea30:	9901      	ldr	r1, [sp, #4]
 801ea32:	458e      	cmp	lr, r1
 801ea34:	da3e      	bge.n	801eab4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801ea36:	9902      	ldr	r1, [sp, #8]
 801ea38:	f896 b000 	ldrb.w	fp, [r6]
 801ea3c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801ea40:	fb1b fb04 	smulbb	fp, fp, r4
 801ea44:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801ea48:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea4c:	eb07 0a0e 	add.w	sl, r7, lr
 801ea50:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ea54:	fb0e be0c 	mla	lr, lr, ip, fp
 801ea58:	fa1f fe8e 	uxth.w	lr, lr
 801ea5c:	f10e 0b01 	add.w	fp, lr, #1
 801ea60:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ea64:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ea68:	fb1b fb04 	smulbb	fp, fp, r4
 801ea6c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea70:	f886 e000 	strb.w	lr, [r6]
 801ea74:	f89a e001 	ldrb.w	lr, [sl, #1]
 801ea78:	fb0e be0c 	mla	lr, lr, ip, fp
 801ea7c:	fa1f fe8e 	uxth.w	lr, lr
 801ea80:	f10e 0b01 	add.w	fp, lr, #1
 801ea84:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ea88:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea8c:	f886 e001 	strb.w	lr, [r6, #1]
 801ea90:	f89a e002 	ldrb.w	lr, [sl, #2]
 801ea94:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ea98:	fb1a fa04 	smulbb	sl, sl, r4
 801ea9c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801eaa0:	fa1f fe8e 	uxth.w	lr, lr
 801eaa4:	f10e 0a01 	add.w	sl, lr, #1
 801eaa8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801eaac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eab0:	f886 e002 	strb.w	lr, [r6, #2]
 801eab4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801eab6:	3603      	adds	r6, #3
 801eab8:	f109 39ff 	add.w	r9, r9, #4294967295
 801eabc:	4408      	add	r0, r1
 801eabe:	9912      	ldr	r1, [sp, #72]	; 0x48
 801eac0:	440a      	add	r2, r1
 801eac2:	e70b      	b.n	801e8dc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801eac4:	b005      	add	sp, #20
 801eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eaca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801eaca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eace:	b085      	sub	sp, #20
 801ead0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ead4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ead6:	9203      	str	r2, [sp, #12]
 801ead8:	6870      	ldr	r0, [r6, #4]
 801eada:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801eadc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801eae0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801eae4:	9101      	str	r1, [sp, #4]
 801eae6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801eaea:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801eaee:	fb00 2404 	mla	r4, r0, r4, r2
 801eaf2:	6832      	ldr	r2, [r6, #0]
 801eaf4:	686e      	ldr	r6, [r5, #4]
 801eaf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eafa:	3604      	adds	r6, #4
 801eafc:	4414      	add	r4, r2
 801eafe:	682a      	ldr	r2, [r5, #0]
 801eb00:	9202      	str	r2, [sp, #8]
 801eb02:	9a01      	ldr	r2, [sp, #4]
 801eb04:	2a00      	cmp	r2, #0
 801eb06:	dc03      	bgt.n	801eb10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801eb08:	9a03      	ldr	r2, [sp, #12]
 801eb0a:	2a00      	cmp	r2, #0
 801eb0c:	f340 80b2 	ble.w	801ec74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801eb10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb12:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	dd0c      	ble.n	801eb3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801eb20:	1405      	asrs	r5, r0, #16
 801eb22:	d405      	bmi.n	801eb30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801eb24:	4575      	cmp	r5, lr
 801eb26:	da03      	bge.n	801eb30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801eb28:	1415      	asrs	r5, r2, #16
 801eb2a:	d401      	bmi.n	801eb30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801eb2c:	4545      	cmp	r5, r8
 801eb2e:	db05      	blt.n	801eb3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801eb30:	4460      	add	r0, ip
 801eb32:	443a      	add	r2, r7
 801eb34:	3b01      	subs	r3, #1
 801eb36:	3403      	adds	r4, #3
 801eb38:	e7f0      	b.n	801eb1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801eb3a:	d03d      	beq.n	801ebb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801eb3c:	1e5d      	subs	r5, r3, #1
 801eb3e:	fb0c 0905 	mla	r9, ip, r5, r0
 801eb42:	ea5f 4929 	movs.w	r9, r9, asr #16
 801eb46:	d42c      	bmi.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801eb48:	45f1      	cmp	r9, lr
 801eb4a:	da2a      	bge.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801eb4c:	fb07 2505 	mla	r5, r7, r5, r2
 801eb50:	142d      	asrs	r5, r5, #16
 801eb52:	d426      	bmi.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801eb54:	4545      	cmp	r5, r8
 801eb56:	da24      	bge.n	801eba2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801eb58:	1ce5      	adds	r5, r4, #3
 801eb5a:	469a      	mov	sl, r3
 801eb5c:	f1ba 0f00 	cmp.w	sl, #0
 801eb60:	f105 0503 	add.w	r5, r5, #3
 801eb64:	dd23      	ble.n	801ebae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801eb66:	ea4f 4922 	mov.w	r9, r2, asr #16
 801eb6a:	9902      	ldr	r1, [sp, #8]
 801eb6c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801eb70:	443a      	add	r2, r7
 801eb72:	fb0e 1909 	mla	r9, lr, r9, r1
 801eb76:	4460      	add	r0, ip
 801eb78:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eb7c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801eb80:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801eb84:	eb06 0b09 	add.w	fp, r6, r9
 801eb88:	f816 9009 	ldrb.w	r9, [r6, r9]
 801eb8c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801eb90:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801eb94:	f805 9c05 	strb.w	r9, [r5, #-5]
 801eb98:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801eb9c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801eba0:	e7dc      	b.n	801eb5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801eba2:	2500      	movs	r5, #0
 801eba4:	eba3 0905 	sub.w	r9, r3, r5
 801eba8:	f1b9 0f00 	cmp.w	r9, #0
 801ebac:	dc3c      	bgt.n	801ec28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801ebae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ebb6:	441c      	add	r4, r3
 801ebb8:	9b01      	ldr	r3, [sp, #4]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	dd5a      	ble.n	801ec74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801ebbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebc8:	eeb0 6a62 	vmov.f32	s12, s5
 801ebcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebd8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ebdc:	eeb0 6a43 	vmov.f32	s12, s6
 801ebe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebe4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ebe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebf0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebf4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ebf8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebfc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec00:	ee12 2a90 	vmov	r2, s5
 801ec04:	eef0 2a47 	vmov.f32	s5, s14
 801ec08:	fb92 fcf3 	sdiv	ip, r2, r3
 801ec0c:	ee13 2a10 	vmov	r2, s6
 801ec10:	eeb0 3a67 	vmov.f32	s6, s15
 801ec14:	fb92 f7f3 	sdiv	r7, r2, r3
 801ec18:	9b01      	ldr	r3, [sp, #4]
 801ec1a:	9a03      	ldr	r2, [sp, #12]
 801ec1c:	3b01      	subs	r3, #1
 801ec1e:	9301      	str	r3, [sp, #4]
 801ec20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec22:	bf08      	it	eq
 801ec24:	4613      	moveq	r3, r2
 801ec26:	e76c      	b.n	801eb02 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801ec28:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801ec2c:	d41e      	bmi.n	801ec6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ec2e:	45f2      	cmp	sl, lr
 801ec30:	da1c      	bge.n	801ec6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ec32:	ea5f 4922 	movs.w	r9, r2, asr #16
 801ec36:	d419      	bmi.n	801ec6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ec38:	45c1      	cmp	r9, r8
 801ec3a:	da17      	bge.n	801ec6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801ec3c:	9902      	ldr	r1, [sp, #8]
 801ec3e:	fb0e 1909 	mla	r9, lr, r9, r1
 801ec42:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ec46:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ec4a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801ec4e:	eb06 0a09 	add.w	sl, r6, r9
 801ec52:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801ec56:	f804 b009 	strb.w	fp, [r4, r9]
 801ec5a:	44a1      	add	r9, r4
 801ec5c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801ec60:	f889 b001 	strb.w	fp, [r9, #1]
 801ec64:	f89a a002 	ldrb.w	sl, [sl, #2]
 801ec68:	f889 a002 	strb.w	sl, [r9, #2]
 801ec6c:	4460      	add	r0, ip
 801ec6e:	443a      	add	r2, r7
 801ec70:	3501      	adds	r5, #1
 801ec72:	e797      	b.n	801eba4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801ec74:	b005      	add	sp, #20
 801ec76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ec7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec7e:	b087      	sub	sp, #28
 801ec80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec84:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ec86:	9204      	str	r2, [sp, #16]
 801ec88:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ec8c:	6870      	ldr	r0, [r6, #4]
 801ec8e:	9205      	str	r2, [sp, #20]
 801ec90:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ec92:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ec96:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ec9a:	9101      	str	r1, [sp, #4]
 801ec9c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801eca0:	fb00 2505 	mla	r5, r0, r5, r2
 801eca4:	6832      	ldr	r2, [r6, #0]
 801eca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ecaa:	4415      	add	r5, r2
 801ecac:	6822      	ldr	r2, [r4, #0]
 801ecae:	9202      	str	r2, [sp, #8]
 801ecb0:	6862      	ldr	r2, [r4, #4]
 801ecb2:	3204      	adds	r2, #4
 801ecb4:	9203      	str	r2, [sp, #12]
 801ecb6:	9a01      	ldr	r2, [sp, #4]
 801ecb8:	2a00      	cmp	r2, #0
 801ecba:	dc03      	bgt.n	801ecc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801ecbc:	9a04      	ldr	r2, [sp, #16]
 801ecbe:	2a00      	cmp	r2, #0
 801ecc0:	f340 8124 	ble.w	801ef0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ecc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ecc6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ecca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eccc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	dd0e      	ble.n	801ecf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ecd4:	1422      	asrs	r2, r4, #16
 801ecd6:	d405      	bmi.n	801ece4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ecd8:	4572      	cmp	r2, lr
 801ecda:	da03      	bge.n	801ece4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ecdc:	1402      	asrs	r2, r0, #16
 801ecde:	d401      	bmi.n	801ece4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ece0:	4542      	cmp	r2, r8
 801ece2:	db07      	blt.n	801ecf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ece4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ece6:	3b01      	subs	r3, #1
 801ece8:	3503      	adds	r5, #3
 801ecea:	4414      	add	r4, r2
 801ecec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ecee:	4410      	add	r0, r2
 801ecf0:	e7ee      	b.n	801ecd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801ecf2:	d010      	beq.n	801ed16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ecf4:	1e5a      	subs	r2, r3, #1
 801ecf6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ecf8:	fb06 4602 	mla	r6, r6, r2, r4
 801ecfc:	1436      	asrs	r6, r6, #16
 801ecfe:	d546      	bpl.n	801ed8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801ed00:	4699      	mov	r9, r3
 801ed02:	462f      	mov	r7, r5
 801ed04:	f1b9 0f00 	cmp.w	r9, #0
 801ed08:	f300 80a5 	bgt.w	801ee56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ed0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed14:	441d      	add	r5, r3
 801ed16:	9b01      	ldr	r3, [sp, #4]
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	f340 80f7 	ble.w	801ef0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ed1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed28:	eeb0 6a62 	vmov.f32	s12, s5
 801ed2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed30:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed38:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ed3c:	eeb0 6a43 	vmov.f32	s12, s6
 801ed40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed44:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ed48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed50:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed60:	ee12 2a90 	vmov	r2, s5
 801ed64:	eef0 2a47 	vmov.f32	s5, s14
 801ed68:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed6c:	ee13 2a10 	vmov	r2, s6
 801ed70:	9313      	str	r3, [sp, #76]	; 0x4c
 801ed72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed74:	eeb0 3a67 	vmov.f32	s6, s15
 801ed78:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed7c:	9314      	str	r3, [sp, #80]	; 0x50
 801ed7e:	9b01      	ldr	r3, [sp, #4]
 801ed80:	9a04      	ldr	r2, [sp, #16]
 801ed82:	3b01      	subs	r3, #1
 801ed84:	9301      	str	r3, [sp, #4]
 801ed86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed88:	bf08      	it	eq
 801ed8a:	4613      	moveq	r3, r2
 801ed8c:	e793      	b.n	801ecb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ed8e:	4576      	cmp	r6, lr
 801ed90:	dab6      	bge.n	801ed00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801ed92:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ed94:	fb06 0202 	mla	r2, r6, r2, r0
 801ed98:	1412      	asrs	r2, r2, #16
 801ed9a:	d4b1      	bmi.n	801ed00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801ed9c:	4542      	cmp	r2, r8
 801ed9e:	daaf      	bge.n	801ed00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801eda0:	1cef      	adds	r7, r5, #3
 801eda2:	4699      	mov	r9, r3
 801eda4:	f1b9 0f00 	cmp.w	r9, #0
 801eda8:	ddb0      	ble.n	801ed0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801edaa:	9902      	ldr	r1, [sp, #8]
 801edac:	1402      	asrs	r2, r0, #16
 801edae:	1426      	asrs	r6, r4, #16
 801edb0:	fb0e 1202 	mla	r2, lr, r2, r1
 801edb4:	9903      	ldr	r1, [sp, #12]
 801edb6:	5d92      	ldrb	r2, [r2, r6]
 801edb8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801edbc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801edc0:	d041      	beq.n	801ee46 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801edc2:	9a05      	ldr	r2, [sp, #20]
 801edc4:	fa5f fb86 	uxtb.w	fp, r6
 801edc8:	fb02 fc0c 	mul.w	ip, r2, ip
 801edcc:	f10c 0201 	add.w	r2, ip, #1
 801edd0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801edd4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801edd8:	1212      	asrs	r2, r2, #8
 801edda:	fa1f fa82 	uxth.w	sl, r2
 801edde:	43d2      	mvns	r2, r2
 801ede0:	fb1b fb0a 	smulbb	fp, fp, sl
 801ede4:	b2d2      	uxtb	r2, r2
 801ede6:	fb0c bc02 	mla	ip, ip, r2, fp
 801edea:	fa1f fc8c 	uxth.w	ip, ip
 801edee:	f10c 0b01 	add.w	fp, ip, #1
 801edf2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801edf6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801edfa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801edfe:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee02:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee06:	fb16 fa0a 	smulbb	sl, r6, sl
 801ee0a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ee0e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801ee12:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801ee16:	fb06 aa02 	mla	sl, r6, r2, sl
 801ee1a:	fb0c bc02 	mla	ip, ip, r2, fp
 801ee1e:	fa1f fa8a 	uxth.w	sl, sl
 801ee22:	fa1f fc8c 	uxth.w	ip, ip
 801ee26:	f10a 0601 	add.w	r6, sl, #1
 801ee2a:	f10c 0b01 	add.w	fp, ip, #1
 801ee2e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ee32:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ee36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee3a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee3e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ee42:	f807 cc02 	strb.w	ip, [r7, #-2]
 801ee46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee48:	3703      	adds	r7, #3
 801ee4a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee4e:	4414      	add	r4, r2
 801ee50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee52:	4410      	add	r0, r2
 801ee54:	e7a6      	b.n	801eda4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801ee56:	1426      	asrs	r6, r4, #16
 801ee58:	d450      	bmi.n	801eefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ee5a:	4576      	cmp	r6, lr
 801ee5c:	da4e      	bge.n	801eefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ee5e:	1402      	asrs	r2, r0, #16
 801ee60:	d44c      	bmi.n	801eefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ee62:	4542      	cmp	r2, r8
 801ee64:	da4a      	bge.n	801eefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ee66:	9902      	ldr	r1, [sp, #8]
 801ee68:	fb0e 1202 	mla	r2, lr, r2, r1
 801ee6c:	9903      	ldr	r1, [sp, #12]
 801ee6e:	5d92      	ldrb	r2, [r2, r6]
 801ee70:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801ee74:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801ee78:	d040      	beq.n	801eefc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801ee7a:	9a05      	ldr	r2, [sp, #20]
 801ee7c:	fa5f fb86 	uxtb.w	fp, r6
 801ee80:	fb02 fc0c 	mul.w	ip, r2, ip
 801ee84:	f10c 0201 	add.w	r2, ip, #1
 801ee88:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801ee8c:	f897 c000 	ldrb.w	ip, [r7]
 801ee90:	1212      	asrs	r2, r2, #8
 801ee92:	fa1f fa82 	uxth.w	sl, r2
 801ee96:	43d2      	mvns	r2, r2
 801ee98:	fb1b fb0a 	smulbb	fp, fp, sl
 801ee9c:	b2d2      	uxtb	r2, r2
 801ee9e:	fb0c bc02 	mla	ip, ip, r2, fp
 801eea2:	fa1f fc8c 	uxth.w	ip, ip
 801eea6:	f10c 0b01 	add.w	fp, ip, #1
 801eeaa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801eeae:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801eeb2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801eeb6:	fb1b fb0a 	smulbb	fp, fp, sl
 801eeba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eebe:	fb16 fa0a 	smulbb	sl, r6, sl
 801eec2:	78be      	ldrb	r6, [r7, #2]
 801eec4:	f887 c000 	strb.w	ip, [r7]
 801eec8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801eecc:	fb06 aa02 	mla	sl, r6, r2, sl
 801eed0:	fb0c bc02 	mla	ip, ip, r2, fp
 801eed4:	fa1f fa8a 	uxth.w	sl, sl
 801eed8:	fa1f fc8c 	uxth.w	ip, ip
 801eedc:	f10a 0601 	add.w	r6, sl, #1
 801eee0:	f10c 0b01 	add.w	fp, ip, #1
 801eee4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801eee8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801eeec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eef0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eef4:	f887 a002 	strb.w	sl, [r7, #2]
 801eef8:	f887 c001 	strb.w	ip, [r7, #1]
 801eefc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eefe:	3703      	adds	r7, #3
 801ef00:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef04:	4414      	add	r4, r2
 801ef06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ef08:	4410      	add	r0, r2
 801ef0a:	e6fb      	b.n	801ed04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ef0c:	b007      	add	sp, #28
 801ef0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ef12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef16:	b085      	sub	sp, #20
 801ef18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef1c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef1e:	9203      	str	r2, [sp, #12]
 801ef20:	6870      	ldr	r0, [r6, #4]
 801ef22:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ef24:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ef28:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801ef2c:	9100      	str	r1, [sp, #0]
 801ef2e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef32:	fb00 2404 	mla	r4, r0, r4, r2
 801ef36:	6832      	ldr	r2, [r6, #0]
 801ef38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ef3c:	4414      	add	r4, r2
 801ef3e:	682a      	ldr	r2, [r5, #0]
 801ef40:	9201      	str	r2, [sp, #4]
 801ef42:	686a      	ldr	r2, [r5, #4]
 801ef44:	3204      	adds	r2, #4
 801ef46:	9202      	str	r2, [sp, #8]
 801ef48:	9a00      	ldr	r2, [sp, #0]
 801ef4a:	2a00      	cmp	r2, #0
 801ef4c:	dc03      	bgt.n	801ef56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801ef4e:	9a03      	ldr	r2, [sp, #12]
 801ef50:	2a00      	cmp	r2, #0
 801ef52:	f340 8131 	ble.w	801f1b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801ef56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef58:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef5e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	dd0e      	ble.n	801ef84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801ef66:	1405      	asrs	r5, r0, #16
 801ef68:	d405      	bmi.n	801ef76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ef6a:	4575      	cmp	r5, lr
 801ef6c:	da03      	bge.n	801ef76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ef6e:	1415      	asrs	r5, r2, #16
 801ef70:	d401      	bmi.n	801ef76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ef72:	4545      	cmp	r5, r8
 801ef74:	db07      	blt.n	801ef86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801ef76:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ef78:	3b01      	subs	r3, #1
 801ef7a:	3403      	adds	r4, #3
 801ef7c:	4428      	add	r0, r5
 801ef7e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ef80:	442a      	add	r2, r5
 801ef82:	e7ee      	b.n	801ef62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801ef84:	d06f      	beq.n	801f066 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801ef86:	1e5d      	subs	r5, r3, #1
 801ef88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ef8a:	fb06 0605 	mla	r6, r6, r5, r0
 801ef8e:	1436      	asrs	r6, r6, #16
 801ef90:	d460      	bmi.n	801f054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ef92:	4576      	cmp	r6, lr
 801ef94:	da5e      	bge.n	801f054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ef96:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ef98:	fb06 2505 	mla	r5, r6, r5, r2
 801ef9c:	142d      	asrs	r5, r5, #16
 801ef9e:	d459      	bmi.n	801f054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801efa0:	4545      	cmp	r5, r8
 801efa2:	da57      	bge.n	801f054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801efa4:	1ce5      	adds	r5, r4, #3
 801efa6:	469a      	mov	sl, r3
 801efa8:	f1ba 0f00 	cmp.w	sl, #0
 801efac:	dd56      	ble.n	801f05c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801efae:	9901      	ldr	r1, [sp, #4]
 801efb0:	1416      	asrs	r6, r2, #16
 801efb2:	1407      	asrs	r7, r0, #16
 801efb4:	fb0e 1606 	mla	r6, lr, r6, r1
 801efb8:	9902      	ldr	r1, [sp, #8]
 801efba:	5df6      	ldrb	r6, [r6, r7]
 801efbc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801efc0:	0e37      	lsrs	r7, r6, #24
 801efc2:	2fff      	cmp	r7, #255	; 0xff
 801efc4:	f000 80ef 	beq.w	801f1a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801efc8:	fa5f fc87 	uxtb.w	ip, r7
 801efcc:	b3d7      	cbz	r7, 801f044 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801efce:	fa1f f78c 	uxth.w	r7, ip
 801efd2:	ea6f 0c0c 	mvn.w	ip, ip
 801efd6:	fa5f fb86 	uxtb.w	fp, r6
 801efda:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801efde:	fa5f fc8c 	uxtb.w	ip, ip
 801efe2:	fb1b fb07 	smulbb	fp, fp, r7
 801efe6:	fb09 b90c 	mla	r9, r9, ip, fp
 801efea:	fa1f f989 	uxth.w	r9, r9
 801efee:	f109 0b01 	add.w	fp, r9, #1
 801eff2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eff6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801effa:	fb1b fb0c 	smulbb	fp, fp, ip
 801effe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f002:	f805 9c03 	strb.w	r9, [r5, #-3]
 801f006:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801f00a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f00e:	fb09 b907 	mla	r9, r9, r7, fp
 801f012:	fa1f f989 	uxth.w	r9, r9
 801f016:	f109 0b01 	add.w	fp, r9, #1
 801f01a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f01e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f022:	f805 9c02 	strb.w	r9, [r5, #-2]
 801f026:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801f02a:	fb19 fc0c 	smulbb	ip, r9, ip
 801f02e:	fb06 c607 	mla	r6, r6, r7, ip
 801f032:	b2b6      	uxth	r6, r6
 801f034:	f106 0c01 	add.w	ip, r6, #1
 801f038:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801f03c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f040:	f805 cc01 	strb.w	ip, [r5, #-1]
 801f044:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f046:	3503      	adds	r5, #3
 801f048:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f04c:	4408      	add	r0, r1
 801f04e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f050:	440a      	add	r2, r1
 801f052:	e7a9      	b.n	801efa8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801f054:	2600      	movs	r6, #0
 801f056:	1b9d      	subs	r5, r3, r6
 801f058:	2d00      	cmp	r5, #0
 801f05a:	dc40      	bgt.n	801f0de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801f05c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f064:	441c      	add	r4, r3
 801f066:	9b00      	ldr	r3, [sp, #0]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	f340 80a5 	ble.w	801f1b8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801f06e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f074:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f078:	eeb0 6a62 	vmov.f32	s12, s5
 801f07c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f080:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f084:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f088:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f08c:	eeb0 6a43 	vmov.f32	s12, s6
 801f090:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f094:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f098:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f09c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0b0:	ee12 2a90 	vmov	r2, s5
 801f0b4:	eef0 2a47 	vmov.f32	s5, s14
 801f0b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0bc:	ee13 2a10 	vmov	r2, s6
 801f0c0:	9311      	str	r3, [sp, #68]	; 0x44
 801f0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0c4:	eeb0 3a67 	vmov.f32	s6, s15
 801f0c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0cc:	9312      	str	r3, [sp, #72]	; 0x48
 801f0ce:	9b00      	ldr	r3, [sp, #0]
 801f0d0:	9a03      	ldr	r2, [sp, #12]
 801f0d2:	3b01      	subs	r3, #1
 801f0d4:	9300      	str	r3, [sp, #0]
 801f0d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f0d8:	bf08      	it	eq
 801f0da:	4613      	moveq	r3, r2
 801f0dc:	e734      	b.n	801ef48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f0de:	1407      	asrs	r7, r0, #16
 801f0e0:	d450      	bmi.n	801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f0e2:	4577      	cmp	r7, lr
 801f0e4:	da4e      	bge.n	801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f0e6:	1415      	asrs	r5, r2, #16
 801f0e8:	d44c      	bmi.n	801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f0ea:	4545      	cmp	r5, r8
 801f0ec:	da4a      	bge.n	801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f0ee:	9901      	ldr	r1, [sp, #4]
 801f0f0:	fb0e 1505 	mla	r5, lr, r5, r1
 801f0f4:	9902      	ldr	r1, [sp, #8]
 801f0f6:	5ded      	ldrb	r5, [r5, r7]
 801f0f8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801f0fc:	0e2f      	lsrs	r7, r5, #24
 801f0fe:	2fff      	cmp	r7, #255	; 0xff
 801f100:	d046      	beq.n	801f190 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801f102:	fa5f f987 	uxtb.w	r9, r7
 801f106:	b3ef      	cbz	r7, 801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f108:	fa1f fc89 	uxth.w	ip, r9
 801f10c:	ea6f 0909 	mvn.w	r9, r9
 801f110:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f114:	fa5f fb85 	uxtb.w	fp, r5
 801f118:	f814 a007 	ldrb.w	sl, [r4, r7]
 801f11c:	fa5f f989 	uxtb.w	r9, r9
 801f120:	fb1b fb0c 	smulbb	fp, fp, ip
 801f124:	fb0a ba09 	mla	sl, sl, r9, fp
 801f128:	fa1f fa8a 	uxth.w	sl, sl
 801f12c:	f10a 0b01 	add.w	fp, sl, #1
 801f130:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f134:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f138:	f804 a007 	strb.w	sl, [r4, r7]
 801f13c:	4427      	add	r7, r4
 801f13e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f142:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801f146:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f14a:	fb1b fb09 	smulbb	fp, fp, r9
 801f14e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801f152:	fa1f fa8a 	uxth.w	sl, sl
 801f156:	f10a 0b01 	add.w	fp, sl, #1
 801f15a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801f15e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f162:	f887 a001 	strb.w	sl, [r7, #1]
 801f166:	f897 a002 	ldrb.w	sl, [r7, #2]
 801f16a:	fb1a f909 	smulbb	r9, sl, r9
 801f16e:	fb05 950c 	mla	r5, r5, ip, r9
 801f172:	b2ad      	uxth	r5, r5
 801f174:	f105 0901 	add.w	r9, r5, #1
 801f178:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801f17c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f180:	f887 9002 	strb.w	r9, [r7, #2]
 801f184:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f186:	3601      	adds	r6, #1
 801f188:	4408      	add	r0, r1
 801f18a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f18c:	440a      	add	r2, r1
 801f18e:	e762      	b.n	801f056 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f190:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801f194:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801f198:	55e5      	strb	r5, [r4, r7]
 801f19a:	4427      	add	r7, r4
 801f19c:	0c2d      	lsrs	r5, r5, #16
 801f19e:	f887 c001 	strb.w	ip, [r7, #1]
 801f1a2:	70bd      	strb	r5, [r7, #2]
 801f1a4:	e7ee      	b.n	801f184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f1a6:	0a37      	lsrs	r7, r6, #8
 801f1a8:	f805 6c03 	strb.w	r6, [r5, #-3]
 801f1ac:	0c36      	lsrs	r6, r6, #16
 801f1ae:	f805 7c02 	strb.w	r7, [r5, #-2]
 801f1b2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f1b6:	e745      	b.n	801f044 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801f1b8:	b005      	add	sp, #20
 801f1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1be <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f1be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f1c4:	9201      	str	r2, [sp, #4]
 801f1c6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801f1ca:	6870      	ldr	r0, [r6, #4]
 801f1cc:	9200      	str	r2, [sp, #0]
 801f1ce:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801f1d2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801f1d6:	fa1f fc85 	uxth.w	ip, r5
 801f1da:	43ed      	mvns	r5, r5
 801f1dc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f1e0:	b2ed      	uxtb	r5, r5
 801f1e2:	fb00 2404 	mla	r4, r0, r4, r2
 801f1e6:	6832      	ldr	r2, [r6, #0]
 801f1e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f1ec:	4414      	add	r4, r2
 801f1ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f1f0:	f8d2 8000 	ldr.w	r8, [r2]
 801f1f4:	2900      	cmp	r1, #0
 801f1f6:	dc03      	bgt.n	801f200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801f1f8:	9a01      	ldr	r2, [sp, #4]
 801f1fa:	2a00      	cmp	r2, #0
 801f1fc:	f340 8104 	ble.w	801f408 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f202:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f208:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f20c:	2b00      	cmp	r3, #0
 801f20e:	dd0f      	ble.n	801f230 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f210:	1406      	asrs	r6, r0, #16
 801f212:	d406      	bmi.n	801f222 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f214:	4576      	cmp	r6, lr
 801f216:	da04      	bge.n	801f222 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f218:	1416      	asrs	r6, r2, #16
 801f21a:	d402      	bmi.n	801f222 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f21c:	9f00      	ldr	r7, [sp, #0]
 801f21e:	42be      	cmp	r6, r7
 801f220:	db07      	blt.n	801f232 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801f222:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f224:	3b01      	subs	r3, #1
 801f226:	3403      	adds	r4, #3
 801f228:	4430      	add	r0, r6
 801f22a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f22c:	4432      	add	r2, r6
 801f22e:	e7ed      	b.n	801f20c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801f230:	d05f      	beq.n	801f2f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801f232:	1e5e      	subs	r6, r3, #1
 801f234:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f236:	fb07 0706 	mla	r7, r7, r6, r0
 801f23a:	143f      	asrs	r7, r7, #16
 801f23c:	d450      	bmi.n	801f2e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f23e:	4577      	cmp	r7, lr
 801f240:	da4e      	bge.n	801f2e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f242:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f244:	fb07 2606 	mla	r6, r7, r6, r2
 801f248:	1436      	asrs	r6, r6, #16
 801f24a:	d449      	bmi.n	801f2e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f24c:	9f00      	ldr	r7, [sp, #0]
 801f24e:	42be      	cmp	r6, r7
 801f250:	da46      	bge.n	801f2e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801f252:	1ce6      	adds	r6, r4, #3
 801f254:	4699      	mov	r9, r3
 801f256:	f1b9 0f00 	cmp.w	r9, #0
 801f25a:	f106 0603 	add.w	r6, r6, #3
 801f25e:	dd43      	ble.n	801f2e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801f260:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f264:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801f268:	1417      	asrs	r7, r2, #16
 801f26a:	f109 39ff 	add.w	r9, r9, #4294967295
 801f26e:	fb1b fb05 	smulbb	fp, fp, r5
 801f272:	fb0e a707 	mla	r7, lr, r7, sl
 801f276:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f27a:	eb08 0a07 	add.w	sl, r8, r7
 801f27e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801f282:	fb07 b70c 	mla	r7, r7, ip, fp
 801f286:	b2bf      	uxth	r7, r7
 801f288:	f107 0b01 	add.w	fp, r7, #1
 801f28c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f290:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801f294:	fb1b fb05 	smulbb	fp, fp, r5
 801f298:	123f      	asrs	r7, r7, #8
 801f29a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801f29e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801f2a2:	fb07 b70c 	mla	r7, r7, ip, fp
 801f2a6:	b2bf      	uxth	r7, r7
 801f2a8:	f107 0b01 	add.w	fp, r7, #1
 801f2ac:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801f2b0:	123f      	asrs	r7, r7, #8
 801f2b2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801f2b6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801f2ba:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801f2be:	fb1a fa05 	smulbb	sl, sl, r5
 801f2c2:	fb07 a70c 	mla	r7, r7, ip, sl
 801f2c6:	b2bf      	uxth	r7, r7
 801f2c8:	f107 0a01 	add.w	sl, r7, #1
 801f2cc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801f2d0:	123f      	asrs	r7, r7, #8
 801f2d2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801f2d6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f2d8:	4438      	add	r0, r7
 801f2da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f2dc:	443a      	add	r2, r7
 801f2de:	e7ba      	b.n	801f256 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f2e0:	2700      	movs	r7, #0
 801f2e2:	1bde      	subs	r6, r3, r7
 801f2e4:	2e00      	cmp	r6, #0
 801f2e6:	dc3f      	bgt.n	801f368 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801f2e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2f0:	441c      	add	r4, r3
 801f2f2:	2900      	cmp	r1, #0
 801f2f4:	f340 8088 	ble.w	801f408 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f2f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f302:	3901      	subs	r1, #1
 801f304:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f308:	eef0 6a62 	vmov.f32	s13, s5
 801f30c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f310:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f314:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f318:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801f31c:	eef0 6a43 	vmov.f32	s13, s6
 801f320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f324:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801f328:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f32c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f330:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f334:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f338:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f33c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f340:	ee12 2a90 	vmov	r2, s5
 801f344:	eef0 2a47 	vmov.f32	s5, s14
 801f348:	fb92 f3f3 	sdiv	r3, r2, r3
 801f34c:	ee13 2a10 	vmov	r2, s6
 801f350:	930f      	str	r3, [sp, #60]	; 0x3c
 801f352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f354:	eeb0 3a67 	vmov.f32	s6, s15
 801f358:	fb92 f3f3 	sdiv	r3, r2, r3
 801f35c:	9a01      	ldr	r2, [sp, #4]
 801f35e:	9310      	str	r3, [sp, #64]	; 0x40
 801f360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f362:	bf08      	it	eq
 801f364:	4613      	moveq	r3, r2
 801f366:	e745      	b.n	801f1f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801f368:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f36c:	d446      	bmi.n	801f3fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f36e:	45f2      	cmp	sl, lr
 801f370:	da44      	bge.n	801f3fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f372:	ea5f 4922 	movs.w	r9, r2, asr #16
 801f376:	d441      	bmi.n	801f3fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f378:	9e00      	ldr	r6, [sp, #0]
 801f37a:	45b1      	cmp	r9, r6
 801f37c:	da3e      	bge.n	801f3fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801f37e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801f382:	fb0e a909 	mla	r9, lr, r9, sl
 801f386:	f814 b006 	ldrb.w	fp, [r4, r6]
 801f38a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801f38e:	fb1b fb05 	smulbb	fp, fp, r5
 801f392:	eb08 0a09 	add.w	sl, r8, r9
 801f396:	f818 9009 	ldrb.w	r9, [r8, r9]
 801f39a:	fb09 b90c 	mla	r9, r9, ip, fp
 801f39e:	fa1f f989 	uxth.w	r9, r9
 801f3a2:	f109 0b01 	add.w	fp, r9, #1
 801f3a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f3aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3ae:	f804 9006 	strb.w	r9, [r4, r6]
 801f3b2:	4426      	add	r6, r4
 801f3b4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801f3b8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f3bc:	fb1b fb05 	smulbb	fp, fp, r5
 801f3c0:	fb09 b90c 	mla	r9, r9, ip, fp
 801f3c4:	fa1f f989 	uxth.w	r9, r9
 801f3c8:	f109 0b01 	add.w	fp, r9, #1
 801f3cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f3d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3d4:	f886 9001 	strb.w	r9, [r6, #1]
 801f3d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801f3dc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801f3e0:	fb1a fa05 	smulbb	sl, sl, r5
 801f3e4:	fb09 a90c 	mla	r9, r9, ip, sl
 801f3e8:	fa1f f989 	uxth.w	r9, r9
 801f3ec:	f109 0a01 	add.w	sl, r9, #1
 801f3f0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f3f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f3f8:	f886 9002 	strb.w	r9, [r6, #2]
 801f3fc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f3fe:	3701      	adds	r7, #1
 801f400:	4430      	add	r0, r6
 801f402:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801f404:	4432      	add	r2, r6
 801f406:	e76c      	b.n	801f2e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801f408:	b003      	add	sp, #12
 801f40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f40e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f40e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f412:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f418:	9201      	str	r2, [sp, #4]
 801f41a:	6868      	ldr	r0, [r5, #4]
 801f41c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801f420:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801f424:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f428:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801f42c:	fb00 2404 	mla	r4, r0, r4, r2
 801f430:	682a      	ldr	r2, [r5, #0]
 801f432:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f436:	4414      	add	r4, r2
 801f438:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f43a:	f8d2 9000 	ldr.w	r9, [r2]
 801f43e:	2900      	cmp	r1, #0
 801f440:	dc03      	bgt.n	801f44a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f442:	9a01      	ldr	r2, [sp, #4]
 801f444:	2a00      	cmp	r2, #0
 801f446:	f340 80a8 	ble.w	801f59a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f44a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f44c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f452:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f456:	2b00      	cmp	r3, #0
 801f458:	dd0c      	ble.n	801f474 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801f45a:	1405      	asrs	r5, r0, #16
 801f45c:	d405      	bmi.n	801f46a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f45e:	4565      	cmp	r5, ip
 801f460:	da03      	bge.n	801f46a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f462:	1415      	asrs	r5, r2, #16
 801f464:	d401      	bmi.n	801f46a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801f466:	4575      	cmp	r5, lr
 801f468:	db05      	blt.n	801f476 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f46a:	4438      	add	r0, r7
 801f46c:	4432      	add	r2, r6
 801f46e:	3b01      	subs	r3, #1
 801f470:	3403      	adds	r4, #3
 801f472:	e7f0      	b.n	801f456 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801f474:	d03a      	beq.n	801f4ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801f476:	1e5d      	subs	r5, r3, #1
 801f478:	fb07 0805 	mla	r8, r7, r5, r0
 801f47c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801f480:	d429      	bmi.n	801f4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f482:	45e0      	cmp	r8, ip
 801f484:	da27      	bge.n	801f4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f486:	fb06 2505 	mla	r5, r6, r5, r2
 801f48a:	142d      	asrs	r5, r5, #16
 801f48c:	d423      	bmi.n	801f4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f48e:	4575      	cmp	r5, lr
 801f490:	da21      	bge.n	801f4d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f492:	f104 0803 	add.w	r8, r4, #3
 801f496:	469a      	mov	sl, r3
 801f498:	f1ba 0f00 	cmp.w	sl, #0
 801f49c:	f108 0803 	add.w	r8, r8, #3
 801f4a0:	dd1f      	ble.n	801f4e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f4a2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801f4a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f4aa:	1415      	asrs	r5, r2, #16
 801f4ac:	4438      	add	r0, r7
 801f4ae:	4432      	add	r2, r6
 801f4b0:	fb0c b505 	mla	r5, ip, r5, fp
 801f4b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f4b8:	eb09 0b05 	add.w	fp, r9, r5
 801f4bc:	f819 5005 	ldrb.w	r5, [r9, r5]
 801f4c0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801f4c4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801f4c8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801f4cc:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801f4d0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801f4d4:	e7e0      	b.n	801f498 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801f4d6:	2500      	movs	r5, #0
 801f4d8:	eba3 0805 	sub.w	r8, r3, r5
 801f4dc:	f1b8 0f00 	cmp.w	r8, #0
 801f4e0:	dc38      	bgt.n	801f554 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801f4e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4ea:	441c      	add	r4, r3
 801f4ec:	2900      	cmp	r1, #0
 801f4ee:	dd54      	ble.n	801f59a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f4f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4fa:	3901      	subs	r1, #1
 801f4fc:	eeb0 6a62 	vmov.f32	s12, s5
 801f500:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f504:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f508:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f50c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f510:	eeb0 6a43 	vmov.f32	s12, s6
 801f514:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f518:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f51c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f520:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f524:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f528:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f52c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f530:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f534:	ee12 2a90 	vmov	r2, s5
 801f538:	eef0 2a47 	vmov.f32	s5, s14
 801f53c:	fb92 f7f3 	sdiv	r7, r2, r3
 801f540:	ee13 2a10 	vmov	r2, s6
 801f544:	eeb0 3a67 	vmov.f32	s6, s15
 801f548:	fb92 f6f3 	sdiv	r6, r2, r3
 801f54c:	9a01      	ldr	r2, [sp, #4]
 801f54e:	bf08      	it	eq
 801f550:	4613      	moveq	r3, r2
 801f552:	e774      	b.n	801f43e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801f554:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801f558:	d41b      	bmi.n	801f592 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f55a:	45e2      	cmp	sl, ip
 801f55c:	da19      	bge.n	801f592 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f55e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f562:	d416      	bmi.n	801f592 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f564:	45f0      	cmp	r8, lr
 801f566:	da14      	bge.n	801f592 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801f568:	fb0c a808 	mla	r8, ip, r8, sl
 801f56c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f570:	f819 b008 	ldrb.w	fp, [r9, r8]
 801f574:	eb09 0a08 	add.w	sl, r9, r8
 801f578:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801f57c:	f804 b008 	strb.w	fp, [r4, r8]
 801f580:	44a0      	add	r8, r4
 801f582:	f89a b001 	ldrb.w	fp, [sl, #1]
 801f586:	f888 b001 	strb.w	fp, [r8, #1]
 801f58a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801f58e:	f888 a002 	strb.w	sl, [r8, #2]
 801f592:	4438      	add	r0, r7
 801f594:	4432      	add	r2, r6
 801f596:	3501      	adds	r5, #1
 801f598:	e79e      	b.n	801f4d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801f59a:	b003      	add	sp, #12
 801f59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5a4:	b085      	sub	sp, #20
 801f5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f5ac:	9202      	str	r2, [sp, #8]
 801f5ae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f5b2:	6860      	ldr	r0, [r4, #4]
 801f5b4:	9203      	str	r2, [sp, #12]
 801f5b6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f5ba:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801f5be:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801f5c2:	fb00 2505 	mla	r5, r0, r5, r2
 801f5c6:	6822      	ldr	r2, [r4, #0]
 801f5c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5cc:	4415      	add	r5, r2
 801f5ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f5d0:	6812      	ldr	r2, [r2, #0]
 801f5d2:	9201      	str	r2, [sp, #4]
 801f5d4:	2900      	cmp	r1, #0
 801f5d6:	dc03      	bgt.n	801f5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801f5d8:	9a02      	ldr	r2, [sp, #8]
 801f5da:	2a00      	cmp	r2, #0
 801f5dc:	f340 811c 	ble.w	801f818 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f5e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5e2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f5e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	dd0e      	ble.n	801f60e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f5f0:	1422      	asrs	r2, r4, #16
 801f5f2:	d405      	bmi.n	801f600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f5f4:	4572      	cmp	r2, lr
 801f5f6:	da03      	bge.n	801f600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f5f8:	1402      	asrs	r2, r0, #16
 801f5fa:	d401      	bmi.n	801f600 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f5fc:	4542      	cmp	r2, r8
 801f5fe:	db07      	blt.n	801f610 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f600:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f602:	3b01      	subs	r3, #1
 801f604:	3503      	adds	r5, #3
 801f606:	4414      	add	r4, r2
 801f608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f60a:	4410      	add	r0, r2
 801f60c:	e7ee      	b.n	801f5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801f60e:	d072      	beq.n	801f6f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801f610:	1e5a      	subs	r2, r3, #1
 801f612:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f614:	fb06 4602 	mla	r6, r6, r2, r4
 801f618:	1436      	asrs	r6, r6, #16
 801f61a:	d461      	bmi.n	801f6e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f61c:	4576      	cmp	r6, lr
 801f61e:	da5f      	bge.n	801f6e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f620:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f622:	fb06 0202 	mla	r2, r6, r2, r0
 801f626:	1412      	asrs	r2, r2, #16
 801f628:	d45a      	bmi.n	801f6e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f62a:	4542      	cmp	r2, r8
 801f62c:	da58      	bge.n	801f6e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801f62e:	1cef      	adds	r7, r5, #3
 801f630:	4699      	mov	r9, r3
 801f632:	f1b9 0f00 	cmp.w	r9, #0
 801f636:	dd59      	ble.n	801f6ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801f638:	1426      	asrs	r6, r4, #16
 801f63a:	1402      	asrs	r2, r0, #16
 801f63c:	fb0e 6202 	mla	r2, lr, r2, r6
 801f640:	9e01      	ldr	r6, [sp, #4]
 801f642:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801f646:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801f64a:	d041      	beq.n	801f6d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801f64c:	9a03      	ldr	r2, [sp, #12]
 801f64e:	fa5f fb86 	uxtb.w	fp, r6
 801f652:	fb02 fc0c 	mul.w	ip, r2, ip
 801f656:	f10c 0201 	add.w	r2, ip, #1
 801f65a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801f65e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801f662:	1212      	asrs	r2, r2, #8
 801f664:	fa1f fa82 	uxth.w	sl, r2
 801f668:	43d2      	mvns	r2, r2
 801f66a:	fb1b fb0a 	smulbb	fp, fp, sl
 801f66e:	b2d2      	uxtb	r2, r2
 801f670:	fb0c bc02 	mla	ip, ip, r2, fp
 801f674:	fa1f fc8c 	uxth.w	ip, ip
 801f678:	f10c 0b01 	add.w	fp, ip, #1
 801f67c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f680:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801f684:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801f688:	fb1b fb0a 	smulbb	fp, fp, sl
 801f68c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f690:	fb16 fa0a 	smulbb	sl, r6, sl
 801f694:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801f698:	f807 cc03 	strb.w	ip, [r7, #-3]
 801f69c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801f6a0:	fb06 aa02 	mla	sl, r6, r2, sl
 801f6a4:	fb0c bc02 	mla	ip, ip, r2, fp
 801f6a8:	fa1f fa8a 	uxth.w	sl, sl
 801f6ac:	fa1f fc8c 	uxth.w	ip, ip
 801f6b0:	f10a 0601 	add.w	r6, sl, #1
 801f6b4:	f10c 0b01 	add.w	fp, ip, #1
 801f6b8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801f6bc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f6c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f6c4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f6c8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801f6cc:	f807 cc02 	strb.w	ip, [r7, #-2]
 801f6d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f6d2:	3703      	adds	r7, #3
 801f6d4:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6d8:	4414      	add	r4, r2
 801f6da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6dc:	4410      	add	r0, r2
 801f6de:	e7a8      	b.n	801f632 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f6e0:	f04f 0c00 	mov.w	ip, #0
 801f6e4:	eba3 020c 	sub.w	r2, r3, ip
 801f6e8:	2a00      	cmp	r2, #0
 801f6ea:	dc3d      	bgt.n	801f768 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801f6ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f6f4:	441d      	add	r5, r3
 801f6f6:	2900      	cmp	r1, #0
 801f6f8:	f340 808e 	ble.w	801f818 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801f6fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f702:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f706:	3901      	subs	r1, #1
 801f708:	eeb0 6a62 	vmov.f32	s12, s5
 801f70c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f710:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f714:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f718:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f71c:	eeb0 6a43 	vmov.f32	s12, s6
 801f720:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f724:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f728:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f72c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f730:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f734:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f738:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f73c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f740:	ee12 2a90 	vmov	r2, s5
 801f744:	eef0 2a47 	vmov.f32	s5, s14
 801f748:	fb92 f3f3 	sdiv	r3, r2, r3
 801f74c:	ee13 2a10 	vmov	r2, s6
 801f750:	9311      	str	r3, [sp, #68]	; 0x44
 801f752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f754:	eeb0 3a67 	vmov.f32	s6, s15
 801f758:	fb92 f3f3 	sdiv	r3, r2, r3
 801f75c:	9a02      	ldr	r2, [sp, #8]
 801f75e:	9312      	str	r3, [sp, #72]	; 0x48
 801f760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f762:	bf08      	it	eq
 801f764:	4613      	moveq	r3, r2
 801f766:	e735      	b.n	801f5d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801f768:	1426      	asrs	r6, r4, #16
 801f76a:	d44e      	bmi.n	801f80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801f76c:	4576      	cmp	r6, lr
 801f76e:	da4c      	bge.n	801f80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801f770:	1402      	asrs	r2, r0, #16
 801f772:	d44a      	bmi.n	801f80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801f774:	4542      	cmp	r2, r8
 801f776:	da48      	bge.n	801f80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801f778:	fb0e 6202 	mla	r2, lr, r2, r6
 801f77c:	9e01      	ldr	r6, [sp, #4]
 801f77e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801f782:	0e3a      	lsrs	r2, r7, #24
 801f784:	d041      	beq.n	801f80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801f786:	9e03      	ldr	r6, [sp, #12]
 801f788:	fa5f fb87 	uxtb.w	fp, r7
 801f78c:	4372      	muls	r2, r6
 801f78e:	1c56      	adds	r6, r2, #1
 801f790:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f794:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801f798:	1212      	asrs	r2, r2, #8
 801f79a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801f79e:	fa1f fa82 	uxth.w	sl, r2
 801f7a2:	43d2      	mvns	r2, r2
 801f7a4:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7a8:	b2d2      	uxtb	r2, r2
 801f7aa:	fb09 b902 	mla	r9, r9, r2, fp
 801f7ae:	fa1f f989 	uxth.w	r9, r9
 801f7b2:	f109 0b01 	add.w	fp, r9, #1
 801f7b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f7ba:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801f7be:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801f7c2:	fb1b fb0a 	smulbb	fp, fp, sl
 801f7c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7ca:	fb17 fa0a 	smulbb	sl, r7, sl
 801f7ce:	f805 9006 	strb.w	r9, [r5, r6]
 801f7d2:	442e      	add	r6, r5
 801f7d4:	78b7      	ldrb	r7, [r6, #2]
 801f7d6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f7da:	fb07 aa02 	mla	sl, r7, r2, sl
 801f7de:	fb09 b902 	mla	r9, r9, r2, fp
 801f7e2:	fa1f fa8a 	uxth.w	sl, sl
 801f7e6:	fa1f f989 	uxth.w	r9, r9
 801f7ea:	f10a 0701 	add.w	r7, sl, #1
 801f7ee:	f109 0b01 	add.w	fp, r9, #1
 801f7f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801f7fa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f802:	f886 a002 	strb.w	sl, [r6, #2]
 801f806:	f886 9001 	strb.w	r9, [r6, #1]
 801f80a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f80c:	f10c 0c01 	add.w	ip, ip, #1
 801f810:	4414      	add	r4, r2
 801f812:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f814:	4410      	add	r0, r2
 801f816:	e765      	b.n	801f6e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801f818:	b005      	add	sp, #20
 801f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f81e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f81e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f822:	b085      	sub	sp, #20
 801f824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f828:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f82a:	9203      	str	r2, [sp, #12]
 801f82c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801f830:	6860      	ldr	r0, [r4, #4]
 801f832:	9201      	str	r2, [sp, #4]
 801f834:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f838:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801f83c:	fb00 2505 	mla	r5, r0, r5, r2
 801f840:	6822      	ldr	r2, [r4, #0]
 801f842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f846:	4415      	add	r5, r2
 801f848:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f84a:	6812      	ldr	r2, [r2, #0]
 801f84c:	9202      	str	r2, [sp, #8]
 801f84e:	2900      	cmp	r1, #0
 801f850:	dc03      	bgt.n	801f85a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801f852:	9a03      	ldr	r2, [sp, #12]
 801f854:	2a00      	cmp	r2, #0
 801f856:	f340 8122 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801f85a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f85c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801f860:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f862:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f866:	2b00      	cmp	r3, #0
 801f868:	dd0f      	ble.n	801f88a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801f86a:	1422      	asrs	r2, r4, #16
 801f86c:	d406      	bmi.n	801f87c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801f86e:	4572      	cmp	r2, lr
 801f870:	da04      	bge.n	801f87c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801f872:	1402      	asrs	r2, r0, #16
 801f874:	d402      	bmi.n	801f87c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801f876:	9e01      	ldr	r6, [sp, #4]
 801f878:	42b2      	cmp	r2, r6
 801f87a:	db07      	blt.n	801f88c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f87c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f87e:	3b01      	subs	r3, #1
 801f880:	3503      	adds	r5, #3
 801f882:	4414      	add	r4, r2
 801f884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f886:	4410      	add	r0, r2
 801f888:	e7ed      	b.n	801f866 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801f88a:	d06e      	beq.n	801f96a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801f88c:	1e5a      	subs	r2, r3, #1
 801f88e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f890:	fb06 4602 	mla	r6, r6, r2, r4
 801f894:	1436      	asrs	r6, r6, #16
 801f896:	d45d      	bmi.n	801f954 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f898:	4576      	cmp	r6, lr
 801f89a:	da5b      	bge.n	801f954 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f89c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f89e:	fb06 0202 	mla	r2, r6, r2, r0
 801f8a2:	1412      	asrs	r2, r2, #16
 801f8a4:	d456      	bmi.n	801f954 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f8a6:	9e01      	ldr	r6, [sp, #4]
 801f8a8:	42b2      	cmp	r2, r6
 801f8aa:	da53      	bge.n	801f954 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801f8ac:	1cee      	adds	r6, r5, #3
 801f8ae:	469a      	mov	sl, r3
 801f8b0:	f1ba 0f00 	cmp.w	sl, #0
 801f8b4:	dd54      	ble.n	801f960 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801f8b6:	1427      	asrs	r7, r4, #16
 801f8b8:	1402      	asrs	r2, r0, #16
 801f8ba:	fb0e 7202 	mla	r2, lr, r2, r7
 801f8be:	9f02      	ldr	r7, [sp, #8]
 801f8c0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801f8c4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801f8c8:	d03c      	beq.n	801f944 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801f8ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f8ce:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801f8d2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801f8d6:	fa5f f28c 	uxtb.w	r2, ip
 801f8da:	b2ff      	uxtb	r7, r7
 801f8dc:	f000 80d8 	beq.w	801fa90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801f8e0:	fa1f f882 	uxth.w	r8, r2
 801f8e4:	43d2      	mvns	r2, r2
 801f8e6:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801f8ea:	fb17 f708 	smulbb	r7, r7, r8
 801f8ee:	b2d2      	uxtb	r2, r2
 801f8f0:	fb19 f908 	smulbb	r9, r9, r8
 801f8f4:	fb0c 7702 	mla	r7, ip, r2, r7
 801f8f8:	fb1b f808 	smulbb	r8, fp, r8
 801f8fc:	b2bf      	uxth	r7, r7
 801f8fe:	f107 0c01 	add.w	ip, r7, #1
 801f902:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f906:	123f      	asrs	r7, r7, #8
 801f908:	f806 7c03 	strb.w	r7, [r6, #-3]
 801f90c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801f910:	fb07 9902 	mla	r9, r7, r2, r9
 801f914:	fa1f f989 	uxth.w	r9, r9
 801f918:	f109 0701 	add.w	r7, r9, #1
 801f91c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f920:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801f924:	fb07 8802 	mla	r8, r7, r2, r8
 801f928:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f92c:	fa1f f888 	uxth.w	r8, r8
 801f930:	f806 9c02 	strb.w	r9, [r6, #-2]
 801f934:	f108 0201 	add.w	r2, r8, #1
 801f938:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f93c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f940:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f944:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f946:	3603      	adds	r6, #3
 801f948:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f94c:	4414      	add	r4, r2
 801f94e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f950:	4410      	add	r0, r2
 801f952:	e7ad      	b.n	801f8b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801f954:	f04f 0c00 	mov.w	ip, #0
 801f958:	eba3 020c 	sub.w	r2, r3, ip
 801f95c:	2a00      	cmp	r2, #0
 801f95e:	dc3d      	bgt.n	801f9dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801f960:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f968:	441d      	add	r5, r3
 801f96a:	2900      	cmp	r1, #0
 801f96c:	f340 8097 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801f970:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f976:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f97a:	3901      	subs	r1, #1
 801f97c:	eeb0 6a62 	vmov.f32	s12, s5
 801f980:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f984:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f988:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f98c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f990:	eeb0 6a43 	vmov.f32	s12, s6
 801f994:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f998:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f99c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9b4:	ee12 2a90 	vmov	r2, s5
 801f9b8:	eef0 2a47 	vmov.f32	s5, s14
 801f9bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9c0:	ee13 2a10 	vmov	r2, s6
 801f9c4:	9311      	str	r3, [sp, #68]	; 0x44
 801f9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9c8:	eeb0 3a67 	vmov.f32	s6, s15
 801f9cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9d0:	9a03      	ldr	r2, [sp, #12]
 801f9d2:	9312      	str	r3, [sp, #72]	; 0x48
 801f9d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9d6:	bf08      	it	eq
 801f9d8:	4613      	moveq	r3, r2
 801f9da:	e738      	b.n	801f84e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801f9dc:	1426      	asrs	r6, r4, #16
 801f9de:	d448      	bmi.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801f9e0:	4576      	cmp	r6, lr
 801f9e2:	da46      	bge.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801f9e4:	1402      	asrs	r2, r0, #16
 801f9e6:	d444      	bmi.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801f9e8:	9f01      	ldr	r7, [sp, #4]
 801f9ea:	42ba      	cmp	r2, r7
 801f9ec:	da41      	bge.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801f9ee:	fb0e 6202 	mla	r2, lr, r2, r6
 801f9f2:	9e02      	ldr	r6, [sp, #8]
 801f9f4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801f9f8:	0e3a      	lsrs	r2, r7, #24
 801f9fa:	d03a      	beq.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801f9fc:	2aff      	cmp	r2, #255	; 0xff
 801f9fe:	b2d6      	uxtb	r6, r2
 801fa00:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fa04:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801fa08:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801fa0c:	b2ff      	uxtb	r7, r7
 801fa0e:	d037      	beq.n	801fa80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801fa10:	fa1f f986 	uxth.w	r9, r6
 801fa14:	4462      	add	r2, ip
 801fa16:	43f6      	mvns	r6, r6
 801fa18:	f815 8002 	ldrb.w	r8, [r5, r2]
 801fa1c:	fb17 f709 	smulbb	r7, r7, r9
 801fa20:	fb1a fa09 	smulbb	sl, sl, r9
 801fa24:	b2f6      	uxtb	r6, r6
 801fa26:	fb1b f909 	smulbb	r9, fp, r9
 801fa2a:	fb08 7706 	mla	r7, r8, r6, r7
 801fa2e:	b2bf      	uxth	r7, r7
 801fa30:	f107 0801 	add.w	r8, r7, #1
 801fa34:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801fa38:	123f      	asrs	r7, r7, #8
 801fa3a:	54af      	strb	r7, [r5, r2]
 801fa3c:	442a      	add	r2, r5
 801fa3e:	7857      	ldrb	r7, [r2, #1]
 801fa40:	fb07 aa06 	mla	sl, r7, r6, sl
 801fa44:	fa1f fa8a 	uxth.w	sl, sl
 801fa48:	f10a 0701 	add.w	r7, sl, #1
 801fa4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa50:	7897      	ldrb	r7, [r2, #2]
 801fa52:	fb07 9906 	mla	r9, r7, r6, r9
 801fa56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fa5a:	fa1f f989 	uxth.w	r9, r9
 801fa5e:	f882 a001 	strb.w	sl, [r2, #1]
 801fa62:	f109 0601 	add.w	r6, r9, #1
 801fa66:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fa6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fa6e:	f882 9002 	strb.w	r9, [r2, #2]
 801fa72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa74:	f10c 0c01 	add.w	ip, ip, #1
 801fa78:	4414      	add	r4, r2
 801fa7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa7c:	4410      	add	r0, r2
 801fa7e:	e76b      	b.n	801f958 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801fa80:	4462      	add	r2, ip
 801fa82:	54af      	strb	r7, [r5, r2]
 801fa84:	442a      	add	r2, r5
 801fa86:	f882 a001 	strb.w	sl, [r2, #1]
 801fa8a:	f882 b002 	strb.w	fp, [r2, #2]
 801fa8e:	e7f0      	b.n	801fa72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801fa90:	f806 7c03 	strb.w	r7, [r6, #-3]
 801fa94:	f806 9c02 	strb.w	r9, [r6, #-2]
 801fa98:	f806 bc01 	strb.w	fp, [r6, #-1]
 801fa9c:	e752      	b.n	801f944 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801fa9e:	b005      	add	sp, #20
 801faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faa4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa8:	b087      	sub	sp, #28
 801faaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801faae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fab0:	9204      	str	r2, [sp, #16]
 801fab2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801fab6:	6860      	ldr	r0, [r4, #4]
 801fab8:	9205      	str	r2, [sp, #20]
 801faba:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801fabe:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801fac2:	9101      	str	r1, [sp, #4]
 801fac4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801fac8:	fb00 2505 	mla	r5, r0, r5, r2
 801facc:	6822      	ldr	r2, [r4, #0]
 801face:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fad2:	4415      	add	r5, r2
 801fad4:	f10e 0201 	add.w	r2, lr, #1
 801fad8:	f022 0201 	bic.w	r2, r2, #1
 801fadc:	9202      	str	r2, [sp, #8]
 801fade:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fae0:	6812      	ldr	r2, [r2, #0]
 801fae2:	9203      	str	r2, [sp, #12]
 801fae4:	9a01      	ldr	r2, [sp, #4]
 801fae6:	2a00      	cmp	r2, #0
 801fae8:	dc03      	bgt.n	801faf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801faea:	9a04      	ldr	r2, [sp, #16]
 801faec:	2a00      	cmp	r2, #0
 801faee:	f340 8132 	ble.w	801fd56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801faf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801faf4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801faf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fafa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	dd0e      	ble.n	801fb20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801fb02:	1422      	asrs	r2, r4, #16
 801fb04:	d405      	bmi.n	801fb12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb06:	4596      	cmp	lr, r2
 801fb08:	dd03      	ble.n	801fb12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb0a:	1402      	asrs	r2, r0, #16
 801fb0c:	d401      	bmi.n	801fb12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801fb0e:	4542      	cmp	r2, r8
 801fb10:	db07      	blt.n	801fb22 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801fb12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb14:	3b01      	subs	r3, #1
 801fb16:	3503      	adds	r5, #3
 801fb18:	4414      	add	r4, r2
 801fb1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb1c:	4410      	add	r0, r2
 801fb1e:	e7ee      	b.n	801fafe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801fb20:	d010      	beq.n	801fb44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801fb22:	1e5a      	subs	r2, r3, #1
 801fb24:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fb26:	fb06 4602 	mla	r6, r6, r2, r4
 801fb2a:	1436      	asrs	r6, r6, #16
 801fb2c:	d546      	bpl.n	801fbbc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801fb2e:	4699      	mov	r9, r3
 801fb30:	462e      	mov	r6, r5
 801fb32:	f1b9 0f00 	cmp.w	r9, #0
 801fb36:	f300 80ac 	bgt.w	801fc92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801fb3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb42:	441d      	add	r5, r3
 801fb44:	9b01      	ldr	r3, [sp, #4]
 801fb46:	2b00      	cmp	r3, #0
 801fb48:	f340 8105 	ble.w	801fd56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801fb4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb56:	eeb0 6a62 	vmov.f32	s12, s5
 801fb5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fb5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb66:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fb6a:	eeb0 6a43 	vmov.f32	s12, s6
 801fb6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb72:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fb76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb8e:	ee12 2a90 	vmov	r2, s5
 801fb92:	eef0 2a47 	vmov.f32	s5, s14
 801fb96:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb9a:	ee13 2a10 	vmov	r2, s6
 801fb9e:	9313      	str	r3, [sp, #76]	; 0x4c
 801fba0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fba2:	eeb0 3a67 	vmov.f32	s6, s15
 801fba6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbaa:	9314      	str	r3, [sp, #80]	; 0x50
 801fbac:	9b01      	ldr	r3, [sp, #4]
 801fbae:	9a04      	ldr	r2, [sp, #16]
 801fbb0:	3b01      	subs	r3, #1
 801fbb2:	9301      	str	r3, [sp, #4]
 801fbb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbb6:	bf08      	it	eq
 801fbb8:	4613      	moveq	r3, r2
 801fbba:	e793      	b.n	801fae4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801fbbc:	45b6      	cmp	lr, r6
 801fbbe:	ddb6      	ble.n	801fb2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fbc0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801fbc2:	fb06 0202 	mla	r2, r6, r2, r0
 801fbc6:	1412      	asrs	r2, r2, #16
 801fbc8:	d4b1      	bmi.n	801fb2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fbca:	4542      	cmp	r2, r8
 801fbcc:	daaf      	bge.n	801fb2e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801fbce:	1cee      	adds	r6, r5, #3
 801fbd0:	4699      	mov	r9, r3
 801fbd2:	f1b9 0f00 	cmp.w	r9, #0
 801fbd6:	ddb0      	ble.n	801fb3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801fbd8:	1422      	asrs	r2, r4, #16
 801fbda:	9902      	ldr	r1, [sp, #8]
 801fbdc:	1407      	asrs	r7, r0, #16
 801fbde:	fb01 2707 	mla	r7, r1, r7, r2
 801fbe2:	9903      	ldr	r1, [sp, #12]
 801fbe4:	087a      	lsrs	r2, r7, #1
 801fbe6:	5c8a      	ldrb	r2, [r1, r2]
 801fbe8:	07f9      	lsls	r1, r7, #31
 801fbea:	bf54      	ite	pl
 801fbec:	f002 020f 	andpl.w	r2, r2, #15
 801fbf0:	1112      	asrmi	r2, r2, #4
 801fbf2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fbf6:	b2d2      	uxtb	r2, r2
 801fbf8:	2a00      	cmp	r2, #0
 801fbfa:	d042      	beq.n	801fc82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801fbfc:	4957      	ldr	r1, [pc, #348]	; (801fd5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801fbfe:	680f      	ldr	r7, [r1, #0]
 801fc00:	9905      	ldr	r1, [sp, #20]
 801fc02:	fa5f fb87 	uxtb.w	fp, r7
 801fc06:	434a      	muls	r2, r1
 801fc08:	f102 0c01 	add.w	ip, r2, #1
 801fc0c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801fc10:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801fc14:	1212      	asrs	r2, r2, #8
 801fc16:	fa1f fa82 	uxth.w	sl, r2
 801fc1a:	43d2      	mvns	r2, r2
 801fc1c:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc20:	b2d2      	uxtb	r2, r2
 801fc22:	fb0c bc02 	mla	ip, ip, r2, fp
 801fc26:	fa1f fc8c 	uxth.w	ip, ip
 801fc2a:	f10c 0b01 	add.w	fp, ip, #1
 801fc2e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fc32:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fc36:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fc3a:	fb1b fb0a 	smulbb	fp, fp, sl
 801fc3e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc42:	fb17 fa0a 	smulbb	sl, r7, sl
 801fc46:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801fc4a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801fc4e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801fc52:	fb07 aa02 	mla	sl, r7, r2, sl
 801fc56:	fb0c bc02 	mla	ip, ip, r2, fp
 801fc5a:	fa1f fa8a 	uxth.w	sl, sl
 801fc5e:	fa1f fc8c 	uxth.w	ip, ip
 801fc62:	f10a 0701 	add.w	r7, sl, #1
 801fc66:	f10c 0b01 	add.w	fp, ip, #1
 801fc6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fc6e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fc72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fc76:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc7a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801fc7e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801fc82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc84:	3603      	adds	r6, #3
 801fc86:	f109 39ff 	add.w	r9, r9, #4294967295
 801fc8a:	4414      	add	r4, r2
 801fc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc8e:	4410      	add	r0, r2
 801fc90:	e79f      	b.n	801fbd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801fc92:	1422      	asrs	r2, r4, #16
 801fc94:	d457      	bmi.n	801fd46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801fc96:	4596      	cmp	lr, r2
 801fc98:	dd55      	ble.n	801fd46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801fc9a:	1407      	asrs	r7, r0, #16
 801fc9c:	d453      	bmi.n	801fd46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801fc9e:	4547      	cmp	r7, r8
 801fca0:	da51      	bge.n	801fd46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801fca2:	9902      	ldr	r1, [sp, #8]
 801fca4:	fb07 2701 	mla	r7, r7, r1, r2
 801fca8:	9903      	ldr	r1, [sp, #12]
 801fcaa:	087a      	lsrs	r2, r7, #1
 801fcac:	07ff      	lsls	r7, r7, #31
 801fcae:	5c8a      	ldrb	r2, [r1, r2]
 801fcb0:	bf54      	ite	pl
 801fcb2:	f002 020f 	andpl.w	r2, r2, #15
 801fcb6:	1112      	asrmi	r2, r2, #4
 801fcb8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fcbc:	b2d2      	uxtb	r2, r2
 801fcbe:	2a00      	cmp	r2, #0
 801fcc0:	d041      	beq.n	801fd46 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801fcc2:	4926      	ldr	r1, [pc, #152]	; (801fd5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801fcc4:	680f      	ldr	r7, [r1, #0]
 801fcc6:	9905      	ldr	r1, [sp, #20]
 801fcc8:	fa5f fb87 	uxtb.w	fp, r7
 801fccc:	434a      	muls	r2, r1
 801fcce:	f102 0c01 	add.w	ip, r2, #1
 801fcd2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801fcd6:	f896 c000 	ldrb.w	ip, [r6]
 801fcda:	1212      	asrs	r2, r2, #8
 801fcdc:	fa1f fa82 	uxth.w	sl, r2
 801fce0:	43d2      	mvns	r2, r2
 801fce2:	fb1b fb0a 	smulbb	fp, fp, sl
 801fce6:	b2d2      	uxtb	r2, r2
 801fce8:	fb0c bc02 	mla	ip, ip, r2, fp
 801fcec:	fa1f fc8c 	uxth.w	ip, ip
 801fcf0:	f10c 0b01 	add.w	fp, ip, #1
 801fcf4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fcf8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801fcfc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801fd00:	fb1b fb0a 	smulbb	fp, fp, sl
 801fd04:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd08:	fb17 fa0a 	smulbb	sl, r7, sl
 801fd0c:	78b7      	ldrb	r7, [r6, #2]
 801fd0e:	f886 c000 	strb.w	ip, [r6]
 801fd12:	f896 c001 	ldrb.w	ip, [r6, #1]
 801fd16:	fb07 aa02 	mla	sl, r7, r2, sl
 801fd1a:	fb0c bc02 	mla	ip, ip, r2, fp
 801fd1e:	fa1f fa8a 	uxth.w	sl, sl
 801fd22:	fa1f fc8c 	uxth.w	ip, ip
 801fd26:	f10a 0701 	add.w	r7, sl, #1
 801fd2a:	f10c 0b01 	add.w	fp, ip, #1
 801fd2e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fd32:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801fd36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd3a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd3e:	f886 a002 	strb.w	sl, [r6, #2]
 801fd42:	f886 c001 	strb.w	ip, [r6, #1]
 801fd46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd48:	3603      	adds	r6, #3
 801fd4a:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd4e:	4414      	add	r4, r2
 801fd50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd52:	4410      	add	r0, r2
 801fd54:	e6ed      	b.n	801fb32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801fd56:	b007      	add	sp, #28
 801fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd5c:	2000bf14 	.word	0x2000bf14

0801fd60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd64:	b087      	sub	sp, #28
 801fd66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd6a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fd6c:	9205      	str	r2, [sp, #20]
 801fd6e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801fd72:	6860      	ldr	r0, [r4, #4]
 801fd74:	9202      	str	r2, [sp, #8]
 801fd76:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801fd7a:	9101      	str	r1, [sp, #4]
 801fd7c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801fd80:	fb00 2606 	mla	r6, r0, r6, r2
 801fd84:	6822      	ldr	r2, [r4, #0]
 801fd86:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fd8a:	4416      	add	r6, r2
 801fd8c:	f108 0201 	add.w	r2, r8, #1
 801fd90:	f022 0201 	bic.w	r2, r2, #1
 801fd94:	9203      	str	r2, [sp, #12]
 801fd96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fd98:	6812      	ldr	r2, [r2, #0]
 801fd9a:	9204      	str	r2, [sp, #16]
 801fd9c:	9a01      	ldr	r2, [sp, #4]
 801fd9e:	2a00      	cmp	r2, #0
 801fda0:	dc03      	bgt.n	801fdaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801fda2:	9a05      	ldr	r2, [sp, #20]
 801fda4:	2a00      	cmp	r2, #0
 801fda6:	f340 813a 	ble.w	802001e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801fdaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fdac:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801fdb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdb2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	dd0f      	ble.n	801fdda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801fdba:	142a      	asrs	r2, r5, #16
 801fdbc:	d406      	bmi.n	801fdcc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fdbe:	4590      	cmp	r8, r2
 801fdc0:	dd04      	ble.n	801fdcc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fdc2:	1422      	asrs	r2, r4, #16
 801fdc4:	d402      	bmi.n	801fdcc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801fdc6:	9802      	ldr	r0, [sp, #8]
 801fdc8:	4282      	cmp	r2, r0
 801fdca:	db07      	blt.n	801fddc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801fdcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fdce:	3b01      	subs	r3, #1
 801fdd0:	3603      	adds	r6, #3
 801fdd2:	4415      	add	r5, r2
 801fdd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fdd6:	4414      	add	r4, r2
 801fdd8:	e7ed      	b.n	801fdb6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801fdda:	d073      	beq.n	801fec4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801fddc:	1e5a      	subs	r2, r3, #1
 801fdde:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fde0:	fb00 5002 	mla	r0, r0, r2, r5
 801fde4:	1400      	asrs	r0, r0, #16
 801fde6:	d464      	bmi.n	801feb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801fde8:	4580      	cmp	r8, r0
 801fdea:	dd62      	ble.n	801feb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801fdec:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fdee:	fb00 4202 	mla	r2, r0, r2, r4
 801fdf2:	1412      	asrs	r2, r2, #16
 801fdf4:	d45d      	bmi.n	801feb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801fdf6:	9802      	ldr	r0, [sp, #8]
 801fdf8:	4282      	cmp	r2, r0
 801fdfa:	da5a      	bge.n	801feb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801fdfc:	1cf0      	adds	r0, r6, #3
 801fdfe:	469a      	mov	sl, r3
 801fe00:	f1ba 0f00 	cmp.w	sl, #0
 801fe04:	dd59      	ble.n	801feba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801fe06:	142a      	asrs	r2, r5, #16
 801fe08:	9903      	ldr	r1, [sp, #12]
 801fe0a:	1427      	asrs	r7, r4, #16
 801fe0c:	fb01 2707 	mla	r7, r1, r7, r2
 801fe10:	9904      	ldr	r1, [sp, #16]
 801fe12:	087a      	lsrs	r2, r7, #1
 801fe14:	5c8a      	ldrb	r2, [r1, r2]
 801fe16:	07f9      	lsls	r1, r7, #31
 801fe18:	bf54      	ite	pl
 801fe1a:	f002 020f 	andpl.w	r2, r2, #15
 801fe1e:	1112      	asrmi	r2, r2, #4
 801fe20:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fe24:	b2d2      	uxtb	r2, r2
 801fe26:	2a00      	cmp	r2, #0
 801fe28:	d03b      	beq.n	801fea2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801fe2a:	497e      	ldr	r1, [pc, #504]	; (8020024 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801fe2c:	2aff      	cmp	r2, #255	; 0xff
 801fe2e:	680f      	ldr	r7, [r1, #0]
 801fe30:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801fe34:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801fe38:	b2ff      	uxtb	r7, r7
 801fe3a:	f000 80e9 	beq.w	8020010 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801fe3e:	fa1f fe82 	uxth.w	lr, r2
 801fe42:	43d2      	mvns	r2, r2
 801fe44:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801fe48:	fb17 f70e 	smulbb	r7, r7, lr
 801fe4c:	b2d2      	uxtb	r2, r2
 801fe4e:	fb19 f90e 	smulbb	r9, r9, lr
 801fe52:	fb0c 7702 	mla	r7, ip, r2, r7
 801fe56:	fb1b fe0e 	smulbb	lr, fp, lr
 801fe5a:	b2bf      	uxth	r7, r7
 801fe5c:	f107 0c01 	add.w	ip, r7, #1
 801fe60:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801fe64:	123f      	asrs	r7, r7, #8
 801fe66:	f800 7c03 	strb.w	r7, [r0, #-3]
 801fe6a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801fe6e:	fb07 9902 	mla	r9, r7, r2, r9
 801fe72:	fa1f f989 	uxth.w	r9, r9
 801fe76:	f109 0701 	add.w	r7, r9, #1
 801fe7a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801fe7e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801fe82:	fb07 ee02 	mla	lr, r7, r2, lr
 801fe86:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fe8a:	fa1f fe8e 	uxth.w	lr, lr
 801fe8e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801fe92:	f10e 0201 	add.w	r2, lr, #1
 801fe96:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fe9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fe9e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801fea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fea4:	3003      	adds	r0, #3
 801fea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801feaa:	4415      	add	r5, r2
 801feac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801feae:	4414      	add	r4, r2
 801feb0:	e7a6      	b.n	801fe00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801feb2:	2700      	movs	r7, #0
 801feb4:	1bda      	subs	r2, r3, r7
 801feb6:	2a00      	cmp	r2, #0
 801feb8:	dc40      	bgt.n	801ff3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801feba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801febe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fec2:	441e      	add	r6, r3
 801fec4:	9b01      	ldr	r3, [sp, #4]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	f340 80a9 	ble.w	802001e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801fecc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fed0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fed2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fed6:	eeb0 6a62 	vmov.f32	s12, s5
 801feda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fede:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fee2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fee6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801feea:	eeb0 6a43 	vmov.f32	s12, s6
 801feee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fef2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fef6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fefa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fefe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff02:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff0a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff0e:	ee12 2a90 	vmov	r2, s5
 801ff12:	eef0 2a47 	vmov.f32	s5, s14
 801ff16:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff1a:	ee13 2a10 	vmov	r2, s6
 801ff1e:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff22:	eeb0 3a67 	vmov.f32	s6, s15
 801ff26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff2a:	9314      	str	r3, [sp, #80]	; 0x50
 801ff2c:	9b01      	ldr	r3, [sp, #4]
 801ff2e:	9a05      	ldr	r2, [sp, #20]
 801ff30:	3b01      	subs	r3, #1
 801ff32:	9301      	str	r3, [sp, #4]
 801ff34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff36:	bf08      	it	eq
 801ff38:	4613      	moveq	r3, r2
 801ff3a:	e72f      	b.n	801fd9c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801ff3c:	142a      	asrs	r2, r5, #16
 801ff3e:	d458      	bmi.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ff40:	4590      	cmp	r8, r2
 801ff42:	dd56      	ble.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ff44:	1420      	asrs	r0, r4, #16
 801ff46:	d454      	bmi.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ff48:	9902      	ldr	r1, [sp, #8]
 801ff4a:	4288      	cmp	r0, r1
 801ff4c:	da51      	bge.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ff4e:	9903      	ldr	r1, [sp, #12]
 801ff50:	fb00 2001 	mla	r0, r0, r1, r2
 801ff54:	9904      	ldr	r1, [sp, #16]
 801ff56:	0842      	lsrs	r2, r0, #1
 801ff58:	07c0      	lsls	r0, r0, #31
 801ff5a:	5c8a      	ldrb	r2, [r1, r2]
 801ff5c:	bf54      	ite	pl
 801ff5e:	f002 020f 	andpl.w	r2, r2, #15
 801ff62:	1112      	asrmi	r2, r2, #4
 801ff64:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff68:	b2d2      	uxtb	r2, r2
 801ff6a:	2a00      	cmp	r2, #0
 801ff6c:	d041      	beq.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ff6e:	492d      	ldr	r1, [pc, #180]	; (8020024 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801ff70:	2aff      	cmp	r2, #255	; 0xff
 801ff72:	6808      	ldr	r0, [r1, #0]
 801ff74:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801ff78:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ff7c:	fa5f fc80 	uxtb.w	ip, r0
 801ff80:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ff84:	d03b      	beq.n	801fffe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801ff86:	fa1f f982 	uxth.w	r9, r2
 801ff8a:	4438      	add	r0, r7
 801ff8c:	43d2      	mvns	r2, r2
 801ff8e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ff92:	fb1c fc09 	smulbb	ip, ip, r9
 801ff96:	fb1a fa09 	smulbb	sl, sl, r9
 801ff9a:	b2d2      	uxtb	r2, r2
 801ff9c:	fb1b f909 	smulbb	r9, fp, r9
 801ffa0:	fb0e cc02 	mla	ip, lr, r2, ip
 801ffa4:	fa1f fc8c 	uxth.w	ip, ip
 801ffa8:	f10c 0e01 	add.w	lr, ip, #1
 801ffac:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ffb0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffb4:	f806 c000 	strb.w	ip, [r6, r0]
 801ffb8:	4430      	add	r0, r6
 801ffba:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ffbe:	fb0c aa02 	mla	sl, ip, r2, sl
 801ffc2:	fa1f fa8a 	uxth.w	sl, sl
 801ffc6:	f10a 0c01 	add.w	ip, sl, #1
 801ffca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ffce:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ffd2:	fb0c 9902 	mla	r9, ip, r2, r9
 801ffd6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ffda:	fa1f f989 	uxth.w	r9, r9
 801ffde:	f880 a001 	strb.w	sl, [r0, #1]
 801ffe2:	f109 0201 	add.w	r2, r9, #1
 801ffe6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ffea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ffee:	f880 9002 	strb.w	r9, [r0, #2]
 801fff2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fff4:	3701      	adds	r7, #1
 801fff6:	4415      	add	r5, r2
 801fff8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fffa:	4414      	add	r4, r2
 801fffc:	e75a      	b.n	801feb4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801fffe:	4438      	add	r0, r7
 8020000:	f806 c000 	strb.w	ip, [r6, r0]
 8020004:	4430      	add	r0, r6
 8020006:	f880 a001 	strb.w	sl, [r0, #1]
 802000a:	f880 b002 	strb.w	fp, [r0, #2]
 802000e:	e7f0      	b.n	801fff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020010:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020014:	f800 9c02 	strb.w	r9, [r0, #-2]
 8020018:	f800 bc01 	strb.w	fp, [r0, #-1]
 802001c:	e741      	b.n	801fea2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 802001e:	b007      	add	sp, #28
 8020020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020024:	2000bf14 	.word	0x2000bf14

08020028 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020028:	4770      	bx	lr

0802002a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802002a:	4770      	bx	lr

0802002c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 802002c:	4770      	bx	lr

0802002e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802002e:	4770      	bx	lr

08020030 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020030:	4770      	bx	lr

08020032 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020032:	4770      	bx	lr

08020034 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020034:	4770      	bx	lr

08020036 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020036:	4770      	bx	lr

08020038 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020038:	4770      	bx	lr

0802003a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802003a:	4770      	bx	lr

0802003c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802003c:	4770      	bx	lr

0802003e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802003e:	4770      	bx	lr

08020040 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020040:	4770      	bx	lr

08020042 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020042:	4770      	bx	lr

08020044 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020044:	4770      	bx	lr

08020046 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020046:	4770      	bx	lr

08020048 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020048:	4770      	bx	lr

0802004a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802004a:	4770      	bx	lr

0802004c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802004c:	4770      	bx	lr

0802004e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802004e:	4770      	bx	lr

08020050 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020050:	2bff      	cmp	r3, #255	; 0xff
 8020052:	b508      	push	{r3, lr}
 8020054:	d04f      	beq.n	80200f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8020056:	2a2c      	cmp	r2, #44	; 0x2c
 8020058:	d032      	beq.n	80200c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 802005a:	d80f      	bhi.n	802007c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 802005c:	2a08      	cmp	r2, #8
 802005e:	d046      	beq.n	80200ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020060:	d805      	bhi.n	802006e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8020062:	2a04      	cmp	r2, #4
 8020064:	d041      	beq.n	80200ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8020066:	2a05      	cmp	r2, #5
 8020068:	d03d      	beq.n	80200e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 802006a:	2000      	movs	r0, #0
 802006c:	e027      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802006e:	2a0a      	cmp	r2, #10
 8020070:	d03d      	beq.n	80200ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020072:	d301      	bcc.n	8020078 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8020074:	2a0b      	cmp	r2, #11
 8020076:	d1f8      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020078:	6c00      	ldr	r0, [r0, #64]	; 0x40
 802007a:	e020      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802007c:	2a30      	cmp	r2, #48	; 0x30
 802007e:	d038      	beq.n	80200f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020080:	d808      	bhi.n	8020094 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8020082:	2a2e      	cmp	r2, #46	; 0x2e
 8020084:	684b      	ldr	r3, [r1, #4]
 8020086:	d029      	beq.n	80200dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8020088:	d90b      	bls.n	80200a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 802008a:	781b      	ldrb	r3, [r3, #0]
 802008c:	2b00      	cmp	r3, #0
 802008e:	d1ec      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020090:	6a00      	ldr	r0, [r0, #32]
 8020092:	e014      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020094:	2a32      	cmp	r2, #50	; 0x32
 8020096:	d02c      	beq.n	80200f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8020098:	d301      	bcc.n	802009e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 802009a:	2a33      	cmp	r2, #51	; 0x33
 802009c:	d1e5      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802009e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80200a0:	e00d      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200a2:	781b      	ldrb	r3, [r3, #0]
 80200a4:	2b01      	cmp	r3, #1
 80200a6:	d009      	beq.n	80200bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80200a8:	d3f2      	bcc.n	8020090 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80200aa:	2b02      	cmp	r3, #2
 80200ac:	d1dd      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80200ae:	4b39      	ldr	r3, [pc, #228]	; (8020194 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80200b0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80200b4:	4a38      	ldr	r2, [pc, #224]	; (8020198 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80200b6:	4839      	ldr	r0, [pc, #228]	; (802019c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80200b8:	f007 ff3e 	bl	8027f38 <__assert_func>
 80200bc:	6900      	ldr	r0, [r0, #16]
 80200be:	bd08      	pop	{r3, pc}
 80200c0:	684b      	ldr	r3, [r1, #4]
 80200c2:	781b      	ldrb	r3, [r3, #0]
 80200c4:	2b01      	cmp	r3, #1
 80200c6:	d007      	beq.n	80200d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80200c8:	d30b      	bcc.n	80200e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80200ca:	2b02      	cmp	r3, #2
 80200cc:	d1cd      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80200ce:	4b31      	ldr	r3, [pc, #196]	; (8020194 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80200d0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80200d4:	4a30      	ldr	r2, [pc, #192]	; (8020198 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80200d6:	e7ee      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80200d8:	6880      	ldr	r0, [r0, #8]
 80200da:	e7f0      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200dc:	781b      	ldrb	r3, [r3, #0]
 80200de:	2b00      	cmp	r3, #0
 80200e0:	d1c3      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80200e2:	6980      	ldr	r0, [r0, #24]
 80200e4:	e7eb      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80200e8:	e7e9      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80200ec:	e7e7      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80200f0:	e7e5      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80200f4:	e7e3      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200f6:	2a2c      	cmp	r2, #44	; 0x2c
 80200f8:	d030      	beq.n	802015c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80200fa:	d80f      	bhi.n	802011c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80200fc:	2a08      	cmp	r2, #8
 80200fe:	d044      	beq.n	802018a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020100:	d805      	bhi.n	802010e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8020102:	2a04      	cmp	r2, #4
 8020104:	d03f      	beq.n	8020186 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8020106:	2a05      	cmp	r2, #5
 8020108:	d1af      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802010a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 802010c:	e7d7      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802010e:	2a0a      	cmp	r2, #10
 8020110:	d03b      	beq.n	802018a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020112:	d301      	bcc.n	8020118 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8020114:	2a0b      	cmp	r2, #11
 8020116:	d1a8      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020118:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802011a:	e7d0      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802011c:	2a30      	cmp	r2, #48	; 0x30
 802011e:	d036      	beq.n	802018e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020120:	d808      	bhi.n	8020134 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8020122:	2a2e      	cmp	r2, #46	; 0x2e
 8020124:	684b      	ldr	r3, [r1, #4]
 8020126:	d028      	beq.n	802017a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8020128:	d90b      	bls.n	8020142 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 802012a:	781b      	ldrb	r3, [r3, #0]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d19c      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020130:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020132:	e7c4      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020134:	2a32      	cmp	r2, #50	; 0x32
 8020136:	d02a      	beq.n	802018e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020138:	d301      	bcc.n	802013e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 802013a:	2a33      	cmp	r2, #51	; 0x33
 802013c:	d195      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802013e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8020140:	e7bd      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020142:	781b      	ldrb	r3, [r3, #0]
 8020144:	2b01      	cmp	r3, #1
 8020146:	d007      	beq.n	8020158 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8020148:	d3f2      	bcc.n	8020130 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 802014a:	2b02      	cmp	r3, #2
 802014c:	d18d      	bne.n	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802014e:	4b11      	ldr	r3, [pc, #68]	; (8020194 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8020150:	f240 31e1 	movw	r1, #993	; 0x3e1
 8020154:	4a10      	ldr	r2, [pc, #64]	; (8020198 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020156:	e7ae      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020158:	6940      	ldr	r0, [r0, #20]
 802015a:	e7b0      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802015c:	684b      	ldr	r3, [r1, #4]
 802015e:	781b      	ldrb	r3, [r3, #0]
 8020160:	2b01      	cmp	r3, #1
 8020162:	d008      	beq.n	8020176 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8020164:	d30d      	bcc.n	8020182 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020166:	2b02      	cmp	r3, #2
 8020168:	f47f af7f 	bne.w	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802016c:	4b09      	ldr	r3, [pc, #36]	; (8020194 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 802016e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 8020172:	4a09      	ldr	r2, [pc, #36]	; (8020198 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8020174:	e79f      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8020176:	68c0      	ldr	r0, [r0, #12]
 8020178:	e7a1      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802017a:	781b      	ldrb	r3, [r3, #0]
 802017c:	2b00      	cmp	r3, #0
 802017e:	f47f af74 	bne.w	802006a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020182:	69c0      	ldr	r0, [r0, #28]
 8020184:	e79b      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020186:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020188:	e799      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802018a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802018c:	e797      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802018e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8020190:	e795      	b.n	80200be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8020192:	bf00      	nop
 8020194:	0802ce93 	.word	0x0802ce93
 8020198:	0802d647 	.word	0x0802d647
 802019c:	0802cedf 	.word	0x0802cedf

080201a0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80201a0:	b508      	push	{r3, lr}
 80201a2:	4b06      	ldr	r3, [pc, #24]	; (80201bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80201a4:	8818      	ldrh	r0, [r3, #0]
 80201a6:	b928      	cbnz	r0, 80201b4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80201a8:	4b05      	ldr	r3, [pc, #20]	; (80201c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80201aa:	21d7      	movs	r1, #215	; 0xd7
 80201ac:	4a05      	ldr	r2, [pc, #20]	; (80201c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80201ae:	4806      	ldr	r0, [pc, #24]	; (80201c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80201b0:	f007 fec2 	bl	8027f38 <__assert_func>
 80201b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80201b8:	b280      	uxth	r0, r0
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	2000bee4 	.word	0x2000bee4
 80201c0:	0802d12e 	.word	0x0802d12e
 80201c4:	0802d60c 	.word	0x0802d60c
 80201c8:	0802d170 	.word	0x0802d170

080201cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80201cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201d0:	4616      	mov	r6, r2
 80201d2:	b087      	sub	sp, #28
 80201d4:	461f      	mov	r7, r3
 80201d6:	b33b      	cbz	r3, 8020228 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80201d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80201dc:	b323      	cbz	r3, 8020228 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80201de:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80201e2:	b30b      	cbz	r3, 8020228 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80201e4:	6808      	ldr	r0, [r1, #0]
 80201e6:	ab04      	add	r3, sp, #16
 80201e8:	6849      	ldr	r1, [r1, #4]
 80201ea:	4c5a      	ldr	r4, [pc, #360]	; (8020354 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 80201ec:	c303      	stmia	r3!, {r0, r1}
 80201ee:	a804      	add	r0, sp, #16
 80201f0:	f7fb fd34 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201f4:	6820      	ldr	r0, [r4, #0]
 80201f6:	6803      	ldr	r3, [r0, #0]
 80201f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80201fa:	4798      	blx	r3
 80201fc:	2fff      	cmp	r7, #255	; 0xff
 80201fe:	4623      	mov	r3, r4
 8020200:	d015      	beq.n	802022e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020202:	f010 0f08 	tst.w	r0, #8
 8020206:	d015      	beq.n	8020234 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8020208:	6818      	ldr	r0, [r3, #0]
 802020a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802020e:	6801      	ldr	r1, [r0, #0]
 8020210:	9401      	str	r4, [sp, #4]
 8020212:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020216:	9702      	str	r7, [sp, #8]
 8020218:	9400      	str	r4, [sp, #0]
 802021a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802021e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8020220:	4631      	mov	r1, r6
 8020222:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020226:	47a0      	blx	r4
 8020228:	b007      	add	sp, #28
 802022a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802022e:	f010 0f02 	tst.w	r0, #2
 8020232:	e7e8      	b.n	8020206 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8020234:	6818      	ldr	r0, [r3, #0]
 8020236:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 802023a:	6803      	ldr	r3, [r0, #0]
 802023c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020240:	6a1b      	ldr	r3, [r3, #32]
 8020242:	4798      	blx	r3
 8020244:	4944      	ldr	r1, [pc, #272]	; (8020358 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8020246:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802024a:	2fff      	cmp	r7, #255	; 0xff
 802024c:	f8b1 c000 	ldrh.w	ip, [r1]
 8020250:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8020254:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020258:	4688      	mov	r8, r1
 802025a:	fb0c 2303 	mla	r3, ip, r3, r2
 802025e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8020262:	b2f2      	uxtb	r2, r6
 8020264:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8020268:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802026c:	4418      	add	r0, r3
 802026e:	d112      	bne.n	8020296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 8020270:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020274:	2100      	movs	r1, #0
 8020276:	42a9      	cmp	r1, r5
 8020278:	da66      	bge.n	8020348 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 802027a:	4603      	mov	r3, r0
 802027c:	2700      	movs	r7, #0
 802027e:	42a7      	cmp	r7, r4
 8020280:	f103 0303 	add.w	r3, r3, #3
 8020284:	da57      	bge.n	8020336 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8020286:	f803 2c03 	strb.w	r2, [r3, #-3]
 802028a:	3701      	adds	r7, #1
 802028c:	f803 ec02 	strb.w	lr, [r3, #-2]
 8020290:	f803 cc01 	strb.w	ip, [r3, #-1]
 8020294:	e7f3      	b.n	802027e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8020296:	b2bb      	uxth	r3, r7
 8020298:	f04f 0800 	mov.w	r8, #0
 802029c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80202a0:	fb0c fc03 	mul.w	ip, ip, r3
 80202a4:	fb0e fe03 	mul.w	lr, lr, r3
 80202a8:	435a      	muls	r2, r3
 80202aa:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 80202ae:	460f      	mov	r7, r1
 80202b0:	b29b      	uxth	r3, r3
 80202b2:	45a8      	cmp	r8, r5
 80202b4:	da48      	bge.n	8020348 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 80202b6:	4601      	mov	r1, r0
 80202b8:	f04f 0a00 	mov.w	sl, #0
 80202bc:	45a2      	cmp	sl, r4
 80202be:	f101 0103 	add.w	r1, r1, #3
 80202c2:	da2f      	bge.n	8020324 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 80202c4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 80202c8:	f10a 0a01 	add.w	sl, sl, #1
 80202cc:	fb19 f903 	smulbb	r9, r9, r3
 80202d0:	4491      	add	r9, r2
 80202d2:	fa1f f989 	uxth.w	r9, r9
 80202d6:	f109 0b01 	add.w	fp, r9, #1
 80202da:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80202de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80202e2:	f801 9c03 	strb.w	r9, [r1, #-3]
 80202e6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 80202ea:	fb19 f903 	smulbb	r9, r9, r3
 80202ee:	44f1      	add	r9, lr
 80202f0:	fa1f f989 	uxth.w	r9, r9
 80202f4:	f109 0b01 	add.w	fp, r9, #1
 80202f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80202fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020300:	f801 9c02 	strb.w	r9, [r1, #-2]
 8020304:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8020308:	fb19 f903 	smulbb	r9, r9, r3
 802030c:	44e1      	add	r9, ip
 802030e:	fa1f f989 	uxth.w	r9, r9
 8020312:	f109 0b01 	add.w	fp, r9, #1
 8020316:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802031a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802031e:	f801 9c01 	strb.w	r9, [r1, #-1]
 8020322:	e7cb      	b.n	80202bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8020324:	8839      	ldrh	r1, [r7, #0]
 8020326:	f108 0801 	add.w	r8, r8, #1
 802032a:	1b09      	subs	r1, r1, r4
 802032c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020330:	4431      	add	r1, r6
 8020332:	4408      	add	r0, r1
 8020334:	e7bd      	b.n	80202b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8020336:	f8b8 3000 	ldrh.w	r3, [r8]
 802033a:	3101      	adds	r1, #1
 802033c:	1b1b      	subs	r3, r3, r4
 802033e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020342:	4433      	add	r3, r6
 8020344:	4418      	add	r0, r3
 8020346:	e796      	b.n	8020276 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8020348:	4b02      	ldr	r3, [pc, #8]	; (8020354 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 802034a:	6818      	ldr	r0, [r3, #0]
 802034c:	6803      	ldr	r3, [r0, #0]
 802034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020350:	4798      	blx	r3
 8020352:	e769      	b.n	8020228 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020354:	2000beec 	.word	0x2000beec
 8020358:	2000bee4 	.word	0x2000bee4

0802035c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 802035c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020360:	b08d      	sub	sp, #52	; 0x34
 8020362:	460c      	mov	r4, r1
 8020364:	4617      	mov	r7, r2
 8020366:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 802036a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802036e:	2e00      	cmp	r6, #0
 8020370:	d04a      	beq.n	8020408 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020372:	6810      	ldr	r0, [r2, #0]
 8020374:	ad08      	add	r5, sp, #32
 8020376:	6851      	ldr	r1, [r2, #4]
 8020378:	c503      	stmia	r5!, {r0, r1}
 802037a:	6818      	ldr	r0, [r3, #0]
 802037c:	ad0a      	add	r5, sp, #40	; 0x28
 802037e:	6859      	ldr	r1, [r3, #4]
 8020380:	c503      	stmia	r5!, {r0, r1}
 8020382:	a808      	add	r0, sp, #32
 8020384:	f7fb fc6a 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020388:	4639      	mov	r1, r7
 802038a:	a80a      	add	r0, sp, #40	; 0x28
 802038c:	4f59      	ldr	r7, [pc, #356]	; (80204f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 802038e:	f7fb fc4d 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020392:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020396:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 802039a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802039e:	6838      	ldr	r0, [r7, #0]
 80203a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80203a4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 80203a8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 80203ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80203b0:	440c      	add	r4, r1
 80203b2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80203b6:	440a      	add	r2, r1
 80203b8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80203bc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80203c0:	4413      	add	r3, r2
 80203c2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80203c6:	6803      	ldr	r3, [r0, #0]
 80203c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80203ca:	4798      	blx	r3
 80203cc:	2eff      	cmp	r6, #255	; 0xff
 80203ce:	f000 8089 	beq.w	80204e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 80203d2:	0743      	lsls	r3, r0, #29
 80203d4:	d405      	bmi.n	80203e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 80203d6:	f1b9 0f00 	cmp.w	r9, #0
 80203da:	d018      	beq.n	802040e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80203dc:	f010 0f10 	tst.w	r0, #16
 80203e0:	d015      	beq.n	802040e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80203e2:	6838      	ldr	r0, [r7, #0]
 80203e4:	b2ad      	uxth	r5, r5
 80203e6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80203ea:	6801      	ldr	r1, [r0, #0]
 80203ec:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80203f0:	9500      	str	r5, [sp, #0]
 80203f2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 80203f6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80203fa:	9602      	str	r6, [sp, #8]
 80203fc:	fa1f f688 	uxth.w	r6, r8
 8020400:	9601      	str	r6, [sp, #4]
 8020402:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8020404:	4621      	mov	r1, r4
 8020406:	47a8      	blx	r5
 8020408:	b00d      	add	sp, #52	; 0x34
 802040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802040e:	6838      	ldr	r0, [r7, #0]
 8020410:	6803      	ldr	r3, [r0, #0]
 8020412:	6a1b      	ldr	r3, [r3, #32]
 8020414:	4798      	blx	r3
 8020416:	4a38      	ldr	r2, [pc, #224]	; (80204f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8020418:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802041c:	2eff      	cmp	r6, #255	; 0xff
 802041e:	8813      	ldrh	r3, [r2, #0]
 8020420:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8020424:	fb0c 1303 	mla	r3, ip, r3, r1
 8020428:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 802042c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020430:	4418      	add	r0, r3
 8020432:	d032      	beq.n	802049a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8020434:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8020438:	f04f 0c00 	mov.w	ip, #0
 802043c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8020440:	9306      	str	r3, [sp, #24]
 8020442:	45c4      	cmp	ip, r8
 8020444:	da49      	bge.n	80204da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8020446:	4686      	mov	lr, r0
 8020448:	46a1      	mov	r9, r4
 802044a:	eba9 0304 	sub.w	r3, r9, r4
 802044e:	428b      	cmp	r3, r1
 8020450:	da13      	bge.n	802047a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8020452:	f819 3b01 	ldrb.w	r3, [r9], #1
 8020456:	f89e b000 	ldrb.w	fp, [lr]
 802045a:	9307      	str	r3, [sp, #28]
 802045c:	9b06      	ldr	r3, [sp, #24]
 802045e:	fb1b fb03 	smulbb	fp, fp, r3
 8020462:	9b07      	ldr	r3, [sp, #28]
 8020464:	fb03 b306 	mla	r3, r3, r6, fp
 8020468:	b29b      	uxth	r3, r3
 802046a:	f103 0b01 	add.w	fp, r3, #1
 802046e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8020472:	121b      	asrs	r3, r3, #8
 8020474:	f80e 3b01 	strb.w	r3, [lr], #1
 8020478:	e7e7      	b.n	802044a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 802047a:	8813      	ldrh	r3, [r2, #0]
 802047c:	f10c 0c01 	add.w	ip, ip, #1
 8020480:	1b5b      	subs	r3, r3, r5
 8020482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020486:	4453      	add	r3, sl
 8020488:	4418      	add	r0, r3
 802048a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802048e:	1b5b      	subs	r3, r3, r5
 8020490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020494:	4453      	add	r3, sl
 8020496:	441c      	add	r4, r3
 8020498:	e7d3      	b.n	8020442 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 802049a:	2600      	movs	r6, #0
 802049c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 80204a0:	4546      	cmp	r6, r8
 80204a2:	da1a      	bge.n	80204da <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 80204a4:	f100 3eff 	add.w	lr, r0, #4294967295
 80204a8:	4623      	mov	r3, r4
 80204aa:	eba3 0904 	sub.w	r9, r3, r4
 80204ae:	4589      	cmp	r9, r1
 80204b0:	da04      	bge.n	80204bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 80204b2:	f813 9b01 	ldrb.w	r9, [r3], #1
 80204b6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 80204ba:	e7f6      	b.n	80204aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 80204bc:	8813      	ldrh	r3, [r2, #0]
 80204be:	3601      	adds	r6, #1
 80204c0:	1b5b      	subs	r3, r3, r5
 80204c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204c6:	4463      	add	r3, ip
 80204c8:	4418      	add	r0, r3
 80204ca:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80204ce:	1b5b      	subs	r3, r3, r5
 80204d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204d4:	4463      	add	r3, ip
 80204d6:	441c      	add	r4, r3
 80204d8:	e7e2      	b.n	80204a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 80204da:	6838      	ldr	r0, [r7, #0]
 80204dc:	6803      	ldr	r3, [r0, #0]
 80204de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204e0:	4798      	blx	r3
 80204e2:	e791      	b.n	8020408 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80204e4:	f1b9 0f00 	cmp.w	r9, #0
 80204e8:	f47f af78 	bne.w	80203dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 80204ec:	f010 0f01 	tst.w	r0, #1
 80204f0:	e776      	b.n	80203e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 80204f2:	bf00      	nop
 80204f4:	2000beec 	.word	0x2000beec
 80204f8:	2000bee4 	.word	0x2000bee4

080204fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80204fc:	b510      	push	{r4, lr}
 80204fe:	4604      	mov	r4, r0
 8020500:	2104      	movs	r1, #4
 8020502:	f007 fcee 	bl	8027ee2 <_ZdlPvj>
 8020506:	4620      	mov	r0, r4
 8020508:	bd10      	pop	{r4, pc}

0802050a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802050a:	b510      	push	{r4, lr}
 802050c:	4604      	mov	r4, r0
 802050e:	2104      	movs	r1, #4
 8020510:	f007 fce7 	bl	8027ee2 <_ZdlPvj>
 8020514:	4620      	mov	r0, r4
 8020516:	bd10      	pop	{r4, pc}

08020518 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020518:	b510      	push	{r4, lr}
 802051a:	4604      	mov	r4, r0
 802051c:	2104      	movs	r1, #4
 802051e:	f007 fce0 	bl	8027ee2 <_ZdlPvj>
 8020522:	4620      	mov	r0, r4
 8020524:	bd10      	pop	{r4, pc}

08020526 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020526:	b510      	push	{r4, lr}
 8020528:	4604      	mov	r4, r0
 802052a:	2104      	movs	r1, #4
 802052c:	f007 fcd9 	bl	8027ee2 <_ZdlPvj>
 8020530:	4620      	mov	r0, r4
 8020532:	bd10      	pop	{r4, pc}

08020534 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020534:	b510      	push	{r4, lr}
 8020536:	4604      	mov	r4, r0
 8020538:	2104      	movs	r1, #4
 802053a:	f007 fcd2 	bl	8027ee2 <_ZdlPvj>
 802053e:	4620      	mov	r0, r4
 8020540:	bd10      	pop	{r4, pc}

08020542 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020542:	b510      	push	{r4, lr}
 8020544:	4604      	mov	r4, r0
 8020546:	2104      	movs	r1, #4
 8020548:	f007 fccb 	bl	8027ee2 <_ZdlPvj>
 802054c:	4620      	mov	r0, r4
 802054e:	bd10      	pop	{r4, pc}

08020550 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020550:	b510      	push	{r4, lr}
 8020552:	4604      	mov	r4, r0
 8020554:	2104      	movs	r1, #4
 8020556:	f007 fcc4 	bl	8027ee2 <_ZdlPvj>
 802055a:	4620      	mov	r0, r4
 802055c:	bd10      	pop	{r4, pc}

0802055e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802055e:	b510      	push	{r4, lr}
 8020560:	4604      	mov	r4, r0
 8020562:	2104      	movs	r1, #4
 8020564:	f007 fcbd 	bl	8027ee2 <_ZdlPvj>
 8020568:	4620      	mov	r0, r4
 802056a:	bd10      	pop	{r4, pc}

0802056c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802056c:	b510      	push	{r4, lr}
 802056e:	4604      	mov	r4, r0
 8020570:	2104      	movs	r1, #4
 8020572:	f007 fcb6 	bl	8027ee2 <_ZdlPvj>
 8020576:	4620      	mov	r0, r4
 8020578:	bd10      	pop	{r4, pc}

0802057a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802057a:	b510      	push	{r4, lr}
 802057c:	4604      	mov	r4, r0
 802057e:	2104      	movs	r1, #4
 8020580:	f007 fcaf 	bl	8027ee2 <_ZdlPvj>
 8020584:	4620      	mov	r0, r4
 8020586:	bd10      	pop	{r4, pc}

08020588 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020588:	b510      	push	{r4, lr}
 802058a:	4604      	mov	r4, r0
 802058c:	2104      	movs	r1, #4
 802058e:	f007 fca8 	bl	8027ee2 <_ZdlPvj>
 8020592:	4620      	mov	r0, r4
 8020594:	bd10      	pop	{r4, pc}

08020596 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020596:	b510      	push	{r4, lr}
 8020598:	4604      	mov	r4, r0
 802059a:	2104      	movs	r1, #4
 802059c:	f007 fca1 	bl	8027ee2 <_ZdlPvj>
 80205a0:	4620      	mov	r0, r4
 80205a2:	bd10      	pop	{r4, pc}

080205a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80205a4:	b510      	push	{r4, lr}
 80205a6:	4604      	mov	r4, r0
 80205a8:	2104      	movs	r1, #4
 80205aa:	f007 fc9a 	bl	8027ee2 <_ZdlPvj>
 80205ae:	4620      	mov	r0, r4
 80205b0:	bd10      	pop	{r4, pc}

080205b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80205b2:	b510      	push	{r4, lr}
 80205b4:	4604      	mov	r4, r0
 80205b6:	2104      	movs	r1, #4
 80205b8:	f007 fc93 	bl	8027ee2 <_ZdlPvj>
 80205bc:	4620      	mov	r0, r4
 80205be:	bd10      	pop	{r4, pc}

080205c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80205c0:	b510      	push	{r4, lr}
 80205c2:	4604      	mov	r4, r0
 80205c4:	2104      	movs	r1, #4
 80205c6:	f007 fc8c 	bl	8027ee2 <_ZdlPvj>
 80205ca:	4620      	mov	r0, r4
 80205cc:	bd10      	pop	{r4, pc}

080205ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80205ce:	b510      	push	{r4, lr}
 80205d0:	4604      	mov	r4, r0
 80205d2:	2104      	movs	r1, #4
 80205d4:	f007 fc85 	bl	8027ee2 <_ZdlPvj>
 80205d8:	4620      	mov	r0, r4
 80205da:	bd10      	pop	{r4, pc}

080205dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80205dc:	b510      	push	{r4, lr}
 80205de:	4604      	mov	r4, r0
 80205e0:	2104      	movs	r1, #4
 80205e2:	f007 fc7e 	bl	8027ee2 <_ZdlPvj>
 80205e6:	4620      	mov	r0, r4
 80205e8:	bd10      	pop	{r4, pc}

080205ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80205ea:	b510      	push	{r4, lr}
 80205ec:	4604      	mov	r4, r0
 80205ee:	2104      	movs	r1, #4
 80205f0:	f007 fc77 	bl	8027ee2 <_ZdlPvj>
 80205f4:	4620      	mov	r0, r4
 80205f6:	bd10      	pop	{r4, pc}

080205f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80205f8:	b510      	push	{r4, lr}
 80205fa:	4604      	mov	r4, r0
 80205fc:	2104      	movs	r1, #4
 80205fe:	f007 fc70 	bl	8027ee2 <_ZdlPvj>
 8020602:	4620      	mov	r0, r4
 8020604:	bd10      	pop	{r4, pc}

08020606 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020606:	b510      	push	{r4, lr}
 8020608:	4604      	mov	r4, r0
 802060a:	2104      	movs	r1, #4
 802060c:	f007 fc69 	bl	8027ee2 <_ZdlPvj>
 8020610:	4620      	mov	r0, r4
 8020612:	bd10      	pop	{r4, pc}

08020614 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020618:	4d9e      	ldr	r5, [pc, #632]	; (8020894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802061a:	4690      	mov	r8, r2
 802061c:	b08f      	sub	sp, #60	; 0x3c
 802061e:	4604      	mov	r4, r0
 8020620:	682a      	ldr	r2, [r5, #0]
 8020622:	4689      	mov	r9, r1
 8020624:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020628:	2a02      	cmp	r2, #2
 802062a:	d106      	bne.n	802063a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 802062c:	4b9a      	ldr	r3, [pc, #616]	; (8020898 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 802062e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8020632:	4a9a      	ldr	r2, [pc, #616]	; (802089c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020634:	489a      	ldr	r0, [pc, #616]	; (80208a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8020636:	f007 fc7f 	bl	8027f38 <__assert_func>
 802063a:	ae0e      	add	r6, sp, #56	; 0x38
 802063c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8020640:	4630      	mov	r0, r6
 8020642:	f7fe f8b3 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020646:	6823      	ldr	r3, [r4, #0]
 8020648:	4607      	mov	r7, r0
 802064a:	4620      	mov	r0, r4
 802064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802064e:	4798      	blx	r3
 8020650:	4287      	cmp	r7, r0
 8020652:	d004      	beq.n	802065e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020654:	4b93      	ldr	r3, [pc, #588]	; (80208a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8020656:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 802065a:	4a90      	ldr	r2, [pc, #576]	; (802089c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 802065c:	e7ea      	b.n	8020634 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802065e:	4630      	mov	r0, r6
 8020660:	f7fe f820 	bl	801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020664:	4607      	mov	r7, r0
 8020666:	b920      	cbnz	r0, 8020672 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020668:	4b8f      	ldr	r3, [pc, #572]	; (80208a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 802066a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 802066e:	4a8b      	ldr	r2, [pc, #556]	; (802089c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020670:	e7e0      	b.n	8020634 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020672:	f8d8 0000 	ldr.w	r0, [r8]
 8020676:	ab06      	add	r3, sp, #24
 8020678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802067c:	f9b8 a000 	ldrsh.w	sl, [r8]
 8020680:	c303      	stmia	r3!, {r0, r1}
 8020682:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020686:	ab08      	add	r3, sp, #32
 8020688:	f8d9 0000 	ldr.w	r0, [r9]
 802068c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8020690:	c303      	stmia	r3!, {r0, r1}
 8020692:	4630      	mov	r0, r6
 8020694:	f7fd fefe 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020698:	4680      	mov	r8, r0
 802069a:	4630      	mov	r0, r6
 802069c:	4e83      	ldr	r6, [pc, #524]	; (80208ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 802069e:	f7fd ff33 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80206a2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80206a6:	f10d 0920 	add.w	r9, sp, #32
 80206aa:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80206ae:	a806      	add	r0, sp, #24
 80206b0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80206b4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 80206b8:	f7fb fad0 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206bc:	4648      	mov	r0, r9
 80206be:	f7fb facd 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206c2:	a80a      	add	r0, sp, #40	; 0x28
 80206c4:	f7fb faca 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206c8:	4b79      	ldr	r3, [pc, #484]	; (80208b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80206ca:	2100      	movs	r1, #0
 80206cc:	f9b6 2000 	ldrsh.w	r2, [r6]
 80206d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80206d4:	4648      	mov	r0, r9
 80206d6:	910c      	str	r1, [sp, #48]	; 0x30
 80206d8:	a90c      	add	r1, sp, #48	; 0x30
 80206da:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80206de:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80206e2:	f7f8 f961 	bl	80189a8 <_ZN8touchgfx4RectaNERKS0_>
 80206e6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 80206ea:	9602      	str	r6, [sp, #8]
 80206ec:	f1bc 0f00 	cmp.w	ip, #0
 80206f0:	f000 80a4 	beq.w	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80206f4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 80206f8:	2e00      	cmp	r6, #0
 80206fa:	f000 809f 	beq.w	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80206fe:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020702:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020706:	4288      	cmp	r0, r1
 8020708:	db36      	blt.n	8020778 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 802070a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 802070e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020712:	429a      	cmp	r2, r3
 8020714:	db30      	blt.n	8020778 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020716:	4460      	add	r0, ip
 8020718:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 802071c:	4461      	add	r1, ip
 802071e:	b200      	sxth	r0, r0
 8020720:	b209      	sxth	r1, r1
 8020722:	4288      	cmp	r0, r1
 8020724:	dc28      	bgt.n	8020778 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020726:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802072a:	4432      	add	r2, r6
 802072c:	440b      	add	r3, r1
 802072e:	b212      	sxth	r2, r2
 8020730:	b21b      	sxth	r3, r3
 8020732:	429a      	cmp	r2, r3
 8020734:	dc20      	bgt.n	8020778 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8020736:	6823      	ldr	r3, [r4, #0]
 8020738:	4620      	mov	r0, r4
 802073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802073c:	4798      	blx	r3
 802073e:	4682      	mov	sl, r0
 8020740:	6828      	ldr	r0, [r5, #0]
 8020742:	6803      	ldr	r3, [r0, #0]
 8020744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020746:	4798      	blx	r3
 8020748:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802074c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020750:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8020754:	9303      	str	r3, [sp, #12]
 8020756:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802075a:	1a9b      	subs	r3, r3, r2
 802075c:	b29b      	uxth	r3, r3
 802075e:	b21c      	sxth	r4, r3
 8020760:	2c00      	cmp	r4, #0
 8020762:	dc0e      	bgt.n	8020782 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8020764:	b134      	cbz	r4, 8020774 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8020766:	f8ad 2020 	strh.w	r2, [sp, #32]
 802076a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802076e:	4413      	add	r3, r2
 8020770:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020774:	463c      	mov	r4, r7
 8020776:	e00b      	b.n	8020790 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8020778:	4b4e      	ldr	r3, [pc, #312]	; (80208b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 802077a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802077e:	4a47      	ldr	r2, [pc, #284]	; (802089c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8020780:	e758      	b.n	8020634 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020782:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020786:	ebab 0303 	sub.w	r3, fp, r3
 802078a:	443c      	add	r4, r7
 802078c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020790:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020794:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020798:	1a9b      	subs	r3, r3, r2
 802079a:	b29b      	uxth	r3, r3
 802079c:	b219      	sxth	r1, r3
 802079e:	2900      	cmp	r1, #0
 80207a0:	dd50      	ble.n	8020844 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 80207a2:	9a03      	ldr	r2, [sp, #12]
 80207a4:	fb02 4401 	mla	r4, r2, r1, r4
 80207a8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80207ac:	1ad3      	subs	r3, r2, r3
 80207ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80207b2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80207b6:	f1bc 0f00 	cmp.w	ip, #0
 80207ba:	dd3f      	ble.n	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80207bc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80207c0:	2e00      	cmp	r6, #0
 80207c2:	dd3b      	ble.n	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80207c4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80207c8:	2203      	movs	r2, #3
 80207ca:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80207ce:	fb0a f801 	mul.w	r8, sl, r1
 80207d2:	fb13 8802 	smlabb	r8, r3, r2, r8
 80207d6:	9a02      	ldr	r2, [sp, #8]
 80207d8:	4480      	add	r8, r0
 80207da:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80207de:	8812      	ldrh	r2, [r2, #0]
 80207e0:	4584      	cmp	ip, r0
 80207e2:	eba2 0303 	sub.w	r3, r2, r3
 80207e6:	bfa8      	it	ge
 80207e8:	4684      	movge	ip, r0
 80207ea:	459c      	cmp	ip, r3
 80207ec:	bfa8      	it	ge
 80207ee:	469c      	movge	ip, r3
 80207f0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80207f4:	429e      	cmp	r6, r3
 80207f6:	bfa8      	it	ge
 80207f8:	461e      	movge	r6, r3
 80207fa:	4b2d      	ldr	r3, [pc, #180]	; (80208b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 80207fc:	881b      	ldrh	r3, [r3, #0]
 80207fe:	1a59      	subs	r1, r3, r1
 8020800:	4633      	mov	r3, r6
 8020802:	428e      	cmp	r6, r1
 8020804:	bfa8      	it	ge
 8020806:	460b      	movge	r3, r1
 8020808:	4562      	cmp	r2, ip
 802080a:	9302      	str	r3, [sp, #8]
 802080c:	d12d      	bne.n	802086a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 802080e:	455a      	cmp	r2, fp
 8020810:	d12b      	bne.n	802086a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8020812:	6828      	ldr	r0, [r5, #0]
 8020814:	6803      	ldr	r3, [r0, #0]
 8020816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020818:	4798      	blx	r3
 802081a:	07c3      	lsls	r3, r0, #31
 802081c:	d51b      	bpl.n	8020856 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 802081e:	6828      	ldr	r0, [r5, #0]
 8020820:	9b02      	ldr	r3, [sp, #8]
 8020822:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8020826:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 802082a:	6803      	ldr	r3, [r0, #0]
 802082c:	f8cd b000 	str.w	fp, [sp]
 8020830:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8020832:	4623      	mov	r3, r4
 8020834:	e899 0006 	ldmia.w	r9, {r1, r2}
 8020838:	47a8      	blx	r5
 802083a:	4607      	mov	r7, r0
 802083c:	4638      	mov	r0, r7
 802083e:	b00f      	add	sp, #60	; 0x3c
 8020840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020844:	bf1f      	itttt	ne
 8020846:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 802084a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 802084e:	189b      	addne	r3, r3, r2
 8020850:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020854:	e7ad      	b.n	80207b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 8020856:	6828      	ldr	r0, [r5, #0]
 8020858:	4642      	mov	r2, r8
 802085a:	4621      	mov	r1, r4
 802085c:	6803      	ldr	r3, [r0, #0]
 802085e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8020860:	9b02      	ldr	r3, [sp, #8]
 8020862:	fb03 f30a 	mul.w	r3, r3, sl
 8020866:	47a8      	blx	r5
 8020868:	e7e8      	b.n	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802086a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 802086e:	f04f 0900 	mov.w	r9, #0
 8020872:	9b02      	ldr	r3, [sp, #8]
 8020874:	454b      	cmp	r3, r9
 8020876:	dde1      	ble.n	802083c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020878:	6828      	ldr	r0, [r5, #0]
 802087a:	4642      	mov	r2, r8
 802087c:	4621      	mov	r1, r4
 802087e:	44d0      	add	r8, sl
 8020880:	6803      	ldr	r3, [r0, #0]
 8020882:	f109 0901 	add.w	r9, r9, #1
 8020886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020888:	461e      	mov	r6, r3
 802088a:	465b      	mov	r3, fp
 802088c:	47b0      	blx	r6
 802088e:	9b03      	ldr	r3, [sp, #12]
 8020890:	441c      	add	r4, r3
 8020892:	e7ee      	b.n	8020872 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020894:	2000beec 	.word	0x2000beec
 8020898:	0802cf11 	.word	0x0802cf11
 802089c:	0802d6f1 	.word	0x0802d6f1
 80208a0:	0802cedf 	.word	0x0802cedf
 80208a4:	0802cfc5 	.word	0x0802cfc5
 80208a8:	0802d01a 	.word	0x0802d01a
 80208ac:	2000bee4 	.word	0x2000bee4
 80208b0:	2000bee6 	.word	0x2000bee6
 80208b4:	0802d058 	.word	0x0802d058

080208b8 <_ZN8touchgfx8LCD24bppC1Ev>:
 80208b8:	4a0b      	ldr	r2, [pc, #44]	; (80208e8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 80208ba:	6002      	str	r2, [r0, #0]
 80208bc:	2200      	movs	r2, #0
 80208be:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80208c2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80208c6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80208ca:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80208ce:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80208d2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80208d6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80208da:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80208de:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80208e2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80208e6:	4770      	bx	lr
 80208e8:	0802d33c 	.word	0x0802d33c

080208ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80208ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f0:	b093      	sub	sp, #76	; 0x4c
 80208f2:	880c      	ldrh	r4, [r1, #0]
 80208f4:	4605      	mov	r5, r0
 80208f6:	460f      	mov	r7, r1
 80208f8:	4691      	mov	r9, r2
 80208fa:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80208fe:	b12c      	cbz	r4, 802090c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8020900:	4b71      	ldr	r3, [pc, #452]	; (8020ac8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020902:	2167      	movs	r1, #103	; 0x67
 8020904:	4a71      	ldr	r2, [pc, #452]	; (8020acc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8020906:	4872      	ldr	r0, [pc, #456]	; (8020ad0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8020908:	f007 fb16 	bl	8027f38 <__assert_func>
 802090c:	6810      	ldr	r0, [r2, #0]
 802090e:	ae0e      	add	r6, sp, #56	; 0x38
 8020910:	6851      	ldr	r1, [r2, #4]
 8020912:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8020ad8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 8020916:	c603      	stmia	r6!, {r0, r1}
 8020918:	6818      	ldr	r0, [r3, #0]
 802091a:	ae10      	add	r6, sp, #64	; 0x40
 802091c:	6859      	ldr	r1, [r3, #4]
 802091e:	c603      	stmia	r6!, {r0, r1}
 8020920:	a80e      	add	r0, sp, #56	; 0x38
 8020922:	f7fb f99b 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020926:	4649      	mov	r1, r9
 8020928:	a810      	add	r0, sp, #64	; 0x40
 802092a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8020ad4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802092e:	f7fb f97d 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020932:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020936:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802093a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802093e:	f8d9 0000 	ldr.w	r0, [r9]
 8020942:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020946:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 802094a:	440d      	add	r5, r1
 802094c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020950:	440a      	add	r2, r1
 8020952:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020956:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802095a:	4413      	add	r3, r2
 802095c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020960:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8020964:	930b      	str	r3, [sp, #44]	; 0x2c
 8020966:	6803      	ldr	r3, [r0, #0]
 8020968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802096c:	4798      	blx	r3
 802096e:	2801      	cmp	r0, #1
 8020970:	d11e      	bne.n	80209b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8020972:	220b      	movs	r2, #11
 8020974:	9008      	str	r0, [sp, #32]
 8020976:	b2b6      	uxth	r6, r6
 8020978:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802097c:	9207      	str	r2, [sp, #28]
 802097e:	4629      	mov	r1, r5
 8020980:	f8ba 2000 	ldrh.w	r2, [sl]
 8020984:	f8cd 8010 	str.w	r8, [sp, #16]
 8020988:	9601      	str	r6, [sp, #4]
 802098a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802098e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020992:	9203      	str	r2, [sp, #12]
 8020994:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8020998:	9202      	str	r2, [sp, #8]
 802099a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802099e:	9200      	str	r2, [sp, #0]
 80209a0:	463a      	mov	r2, r7
 80209a2:	f8d9 0000 	ldr.w	r0, [r9]
 80209a6:	f7f8 fc4d 	bl	8019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80209aa:	b013      	add	sp, #76	; 0x4c
 80209ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209b0:	f8d9 0000 	ldr.w	r0, [r9]
 80209b4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 80209b8:	6803      	ldr	r3, [r0, #0]
 80209ba:	6a1b      	ldr	r3, [r3, #32]
 80209bc:	4798      	blx	r3
 80209be:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80209c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80209c6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80209ca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80209ce:	fb01 2303 	mla	r3, r1, r3, r2
 80209d2:	4621      	mov	r1, r4
 80209d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209d8:	4418      	add	r0, r3
 80209da:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80209de:	930c      	str	r3, [sp, #48]	; 0x30
 80209e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209e2:	4299      	cmp	r1, r3
 80209e4:	da6a      	bge.n	8020abc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 80209e6:	1cc2      	adds	r2, r0, #3
 80209e8:	46aa      	mov	sl, r5
 80209ea:	ebaa 0305 	sub.w	r3, sl, r5
 80209ee:	429e      	cmp	r6, r3
 80209f0:	dd55      	ble.n	8020a9e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 80209f2:	2404      	movs	r4, #4
 80209f4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80209f8:	fb14 4303 	smlabb	r3, r4, r3, r4
 80209fc:	eb07 0e03 	add.w	lr, r7, r3
 8020a00:	f89e 4003 	ldrb.w	r4, [lr, #3]
 8020a04:	b184      	cbz	r4, 8020a28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020a06:	2cff      	cmp	r4, #255	; 0xff
 8020a08:	f817 b003 	ldrb.w	fp, [r7, r3]
 8020a0c:	d10e      	bne.n	8020a2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020a0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020a12:	d10b      	bne.n	8020a2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8020a14:	f802 bc03 	strb.w	fp, [r2, #-3]
 8020a18:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8020a1c:	f802 3c02 	strb.w	r3, [r2, #-2]
 8020a20:	f89e 3002 	ldrb.w	r3, [lr, #2]
 8020a24:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020a28:	3203      	adds	r2, #3
 8020a2a:	e7de      	b.n	80209ea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020a2c:	fb08 f404 	mul.w	r4, r8, r4
 8020a30:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8020a34:	1c63      	adds	r3, r4, #1
 8020a36:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8020a3a:	121b      	asrs	r3, r3, #8
 8020a3c:	b29c      	uxth	r4, r3
 8020a3e:	43db      	mvns	r3, r3
 8020a40:	fb1b fb04 	smulbb	fp, fp, r4
 8020a44:	b2db      	uxtb	r3, r3
 8020a46:	fb0c bc03 	mla	ip, ip, r3, fp
 8020a4a:	fa1f fc8c 	uxth.w	ip, ip
 8020a4e:	f10c 0b01 	add.w	fp, ip, #1
 8020a52:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020a56:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 8020a5a:	fb1b fb03 	smulbb	fp, fp, r3
 8020a5e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a62:	f802 cc03 	strb.w	ip, [r2, #-3]
 8020a66:	f89e c001 	ldrb.w	ip, [lr, #1]
 8020a6a:	fb0c bc04 	mla	ip, ip, r4, fp
 8020a6e:	fa1f fc8c 	uxth.w	ip, ip
 8020a72:	f10c 0b01 	add.w	fp, ip, #1
 8020a76:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020a7a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a7e:	f802 cc02 	strb.w	ip, [r2, #-2]
 8020a82:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8020a86:	f89e e002 	ldrb.w	lr, [lr, #2]
 8020a8a:	fb1c f303 	smulbb	r3, ip, r3
 8020a8e:	fb0e 3304 	mla	r3, lr, r4, r3
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	1c5c      	adds	r4, r3, #1
 8020a96:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020a9a:	121b      	asrs	r3, r3, #8
 8020a9c:	e7c2      	b.n	8020a24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8020a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aa0:	3101      	adds	r1, #1
 8020aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020aa4:	881b      	ldrh	r3, [r3, #0]
 8020aa6:	1b9b      	subs	r3, r3, r6
 8020aa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020aac:	4413      	add	r3, r2
 8020aae:	4418      	add	r0, r3
 8020ab0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020ab4:	1b9b      	subs	r3, r3, r6
 8020ab6:	444b      	add	r3, r9
 8020ab8:	441d      	add	r5, r3
 8020aba:	e791      	b.n	80209e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8020abc:	4b05      	ldr	r3, [pc, #20]	; (8020ad4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8020abe:	6818      	ldr	r0, [r3, #0]
 8020ac0:	6803      	ldr	r3, [r0, #0]
 8020ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ac4:	4798      	blx	r3
 8020ac6:	e770      	b.n	80209aa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8020ac8:	0802ce43 	.word	0x0802ce43
 8020acc:	0802d513 	.word	0x0802d513
 8020ad0:	0802cedf 	.word	0x0802cedf
 8020ad4:	2000beec 	.word	0x2000beec
 8020ad8:	2000bee4 	.word	0x2000bee4

08020adc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae0:	4614      	mov	r4, r2
 8020ae2:	880a      	ldrh	r2, [r1, #0]
 8020ae4:	b091      	sub	sp, #68	; 0x44
 8020ae6:	4680      	mov	r8, r0
 8020ae8:	2a01      	cmp	r2, #1
 8020aea:	460e      	mov	r6, r1
 8020aec:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020af0:	d005      	beq.n	8020afe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8020af2:	4b6d      	ldr	r3, [pc, #436]	; (8020ca8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8020af4:	21b5      	movs	r1, #181	; 0xb5
 8020af6:	4a6d      	ldr	r2, [pc, #436]	; (8020cac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8020af8:	486d      	ldr	r0, [pc, #436]	; (8020cb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8020afa:	f007 fa1d 	bl	8027f38 <__assert_func>
 8020afe:	6820      	ldr	r0, [r4, #0]
 8020b00:	ad0c      	add	r5, sp, #48	; 0x30
 8020b02:	6861      	ldr	r1, [r4, #4]
 8020b04:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8020cb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8020b08:	c503      	stmia	r5!, {r0, r1}
 8020b0a:	6818      	ldr	r0, [r3, #0]
 8020b0c:	ad0e      	add	r5, sp, #56	; 0x38
 8020b0e:	6859      	ldr	r1, [r3, #4]
 8020b10:	c503      	stmia	r5!, {r0, r1}
 8020b12:	a80c      	add	r0, sp, #48	; 0x30
 8020b14:	f7fb f8a2 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b18:	4621      	mov	r1, r4
 8020b1a:	a80e      	add	r0, sp, #56	; 0x38
 8020b1c:	f7fb f886 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b20:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020b24:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020b28:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020b2c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8020b30:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020b34:	eb08 0401 	add.w	r4, r8, r1
 8020b38:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020b3c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8020cb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8020b40:	440a      	add	r2, r1
 8020b42:	f8d8 0000 	ldr.w	r0, [r8]
 8020b46:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020b4a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020b4e:	4413      	add	r3, r2
 8020b50:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020b54:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8020b58:	930a      	str	r3, [sp, #40]	; 0x28
 8020b5a:	6803      	ldr	r3, [r0, #0]
 8020b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020b60:	4798      	blx	r3
 8020b62:	2801      	cmp	r0, #1
 8020b64:	d11e      	bne.n	8020ba4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8020b66:	220b      	movs	r2, #11
 8020b68:	9008      	str	r0, [sp, #32]
 8020b6a:	b2ad      	uxth	r5, r5
 8020b6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020b70:	9207      	str	r2, [sp, #28]
 8020b72:	4621      	mov	r1, r4
 8020b74:	f8b9 2000 	ldrh.w	r2, [r9]
 8020b78:	9501      	str	r5, [sp, #4]
 8020b7a:	9206      	str	r2, [sp, #24]
 8020b7c:	2200      	movs	r2, #0
 8020b7e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8020b82:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020b86:	9203      	str	r2, [sp, #12]
 8020b88:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020b8c:	9202      	str	r2, [sp, #8]
 8020b8e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020b92:	9200      	str	r2, [sp, #0]
 8020b94:	4632      	mov	r2, r6
 8020b96:	f8d8 0000 	ldr.w	r0, [r8]
 8020b9a:	f7f8 fb53 	bl	8019244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020b9e:	b011      	add	sp, #68	; 0x44
 8020ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ba4:	f8d8 0000 	ldr.w	r0, [r8]
 8020ba8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 8020bac:	6803      	ldr	r3, [r0, #0]
 8020bae:	6a1b      	ldr	r3, [r3, #32]
 8020bb0:	4798      	blx	r3
 8020bb2:	f8b9 3000 	ldrh.w	r3, [r9]
 8020bb6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8020bba:	f04f 0e00 	mov.w	lr, #0
 8020bbe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020bc2:	fa1f f987 	uxth.w	r9, r7
 8020bc6:	fb01 2303 	mla	r3, r1, r3, r2
 8020bca:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8020bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bd2:	b289      	uxth	r1, r1
 8020bd4:	4418      	add	r0, r3
 8020bd6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8020bda:	930b      	str	r3, [sp, #44]	; 0x2c
 8020bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020bde:	459e      	cmp	lr, r3
 8020be0:	da5c      	bge.n	8020c9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8020be2:	1cc3      	adds	r3, r0, #3
 8020be4:	46a2      	mov	sl, r4
 8020be6:	ebaa 0204 	sub.w	r2, sl, r4
 8020bea:	4295      	cmp	r5, r2
 8020bec:	dd46      	ble.n	8020c7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8020bee:	f04f 0c03 	mov.w	ip, #3
 8020bf2:	f04f 0b04 	mov.w	fp, #4
 8020bf6:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8020bfa:	2fff      	cmp	r7, #255	; 0xff
 8020bfc:	fb1c b202 	smlabb	r2, ip, r2, fp
 8020c00:	eb06 0c02 	add.w	ip, r6, r2
 8020c04:	f816 b002 	ldrb.w	fp, [r6, r2]
 8020c08:	d02f      	beq.n	8020c6a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8020c0a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8020c0e:	fb12 f201 	smulbb	r2, r2, r1
 8020c12:	fb0b 2209 	mla	r2, fp, r9, r2
 8020c16:	b292      	uxth	r2, r2
 8020c18:	f102 0b01 	add.w	fp, r2, #1
 8020c1c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020c20:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 8020c24:	fb1b fb01 	smulbb	fp, fp, r1
 8020c28:	1212      	asrs	r2, r2, #8
 8020c2a:	f803 2c03 	strb.w	r2, [r3, #-3]
 8020c2e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020c32:	fb02 b209 	mla	r2, r2, r9, fp
 8020c36:	b292      	uxth	r2, r2
 8020c38:	f102 0b01 	add.w	fp, r2, #1
 8020c3c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8020c40:	1212      	asrs	r2, r2, #8
 8020c42:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020c46:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020c4a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8020c4e:	fb1c fc01 	smulbb	ip, ip, r1
 8020c52:	fb02 c209 	mla	r2, r2, r9, ip
 8020c56:	b292      	uxth	r2, r2
 8020c58:	f102 0c01 	add.w	ip, r2, #1
 8020c5c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020c60:	1212      	asrs	r2, r2, #8
 8020c62:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020c66:	3303      	adds	r3, #3
 8020c68:	e7bd      	b.n	8020be6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 8020c6a:	f803 bc03 	strb.w	fp, [r3, #-3]
 8020c6e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020c72:	f803 2c02 	strb.w	r2, [r3, #-2]
 8020c76:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8020c7a:	e7f2      	b.n	8020c62 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 8020c7c:	4b0d      	ldr	r3, [pc, #52]	; (8020cb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8020c7e:	f10e 0e01 	add.w	lr, lr, #1
 8020c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020c84:	881b      	ldrh	r3, [r3, #0]
 8020c86:	1b5b      	subs	r3, r3, r5
 8020c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c8c:	4413      	add	r3, r2
 8020c8e:	4418      	add	r0, r3
 8020c90:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020c94:	1b5b      	subs	r3, r3, r5
 8020c96:	4443      	add	r3, r8
 8020c98:	441c      	add	r4, r3
 8020c9a:	e79f      	b.n	8020bdc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 8020c9c:	4b06      	ldr	r3, [pc, #24]	; (8020cb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8020c9e:	6818      	ldr	r0, [r3, #0]
 8020ca0:	6803      	ldr	r3, [r0, #0]
 8020ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ca4:	4798      	blx	r3
 8020ca6:	e77a      	b.n	8020b9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8020ca8:	0802cd4f 	.word	0x0802cd4f
 8020cac:	0802d406 	.word	0x0802d406
 8020cb0:	0802cedf 	.word	0x0802cedf
 8020cb4:	2000bee4 	.word	0x2000bee4
 8020cb8:	2000beec 	.word	0x2000beec

08020cbc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020cbc:	b570      	push	{r4, r5, r6, lr}
 8020cbe:	780d      	ldrb	r5, [r1, #0]
 8020cc0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8020cc4:	2d01      	cmp	r5, #1
 8020cc6:	d00d      	beq.n	8020ce4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8020cc8:	d307      	bcc.n	8020cda <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8020cca:	2d02      	cmp	r5, #2
 8020ccc:	d10f      	bne.n	8020cee <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8020cce:	4b08      	ldr	r3, [pc, #32]	; (8020cf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8020cd0:	215a      	movs	r1, #90	; 0x5a
 8020cd2:	4a08      	ldr	r2, [pc, #32]	; (8020cf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8020cd4:	4808      	ldr	r0, [pc, #32]	; (8020cf8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8020cd6:	f007 f92f 	bl	8027f38 <__assert_func>
 8020cda:	9404      	str	r4, [sp, #16]
 8020cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020ce0:	f7ff be04 	b.w	80208ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020ce4:	9404      	str	r4, [sp, #16]
 8020ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020cea:	f7ff bef7 	b.w	8020adc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020cee:	bd70      	pop	{r4, r5, r6, pc}
 8020cf0:	0802cd04 	.word	0x0802cd04
 8020cf4:	0802d384 	.word	0x0802d384
 8020cf8:	0802cedf 	.word	0x0802cedf

08020cfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d00:	b08b      	sub	sp, #44	; 0x2c
 8020d02:	460c      	mov	r4, r1
 8020d04:	4680      	mov	r8, r0
 8020d06:	469a      	mov	sl, r3
 8020d08:	6808      	ldr	r0, [r1, #0]
 8020d0a:	ab06      	add	r3, sp, #24
 8020d0c:	6849      	ldr	r1, [r1, #4]
 8020d0e:	c303      	stmia	r3!, {r0, r1}
 8020d10:	6810      	ldr	r0, [r2, #0]
 8020d12:	ab08      	add	r3, sp, #32
 8020d14:	6851      	ldr	r1, [r2, #4]
 8020d16:	c303      	stmia	r3!, {r0, r1}
 8020d18:	a806      	add	r0, sp, #24
 8020d1a:	f7fa ff9f 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d1e:	4621      	mov	r1, r4
 8020d20:	a808      	add	r0, sp, #32
 8020d22:	4c61      	ldr	r4, [pc, #388]	; (8020ea8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8020d24:	f7fa ff82 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d28:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8020d2c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020d30:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8020d34:	6820      	ldr	r0, [r4, #0]
 8020d36:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020d3a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8020d3e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8020d42:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8020d46:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020d4a:	440a      	add	r2, r1
 8020d4c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020d50:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020d54:	4413      	add	r3, r2
 8020d56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020d5a:	6803      	ldr	r3, [r0, #0]
 8020d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d5e:	4798      	blx	r3
 8020d60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020d64:	d118      	bne.n	8020d98 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8020d66:	f010 0f20 	tst.w	r0, #32
 8020d6a:	6820      	ldr	r0, [r4, #0]
 8020d6c:	d017      	beq.n	8020d9e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8020d6e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020d72:	b2bf      	uxth	r7, r7
 8020d74:	6801      	ldr	r1, [r0, #0]
 8020d76:	9402      	str	r4, [sp, #8]
 8020d78:	fa1f f489 	uxth.w	r4, r9
 8020d7c:	f8cd a00c 	str.w	sl, [sp, #12]
 8020d80:	9401      	str	r4, [sp, #4]
 8020d82:	9700      	str	r7, [sp, #0]
 8020d84:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020d88:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020d8a:	4641      	mov	r1, r8
 8020d8c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020d90:	47a0      	blx	r4
 8020d92:	b00b      	add	sp, #44	; 0x2c
 8020d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020d9c:	e7e5      	b.n	8020d6a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020d9e:	6803      	ldr	r3, [r0, #0]
 8020da0:	6a1b      	ldr	r3, [r3, #32]
 8020da2:	4798      	blx	r3
 8020da4:	4b41      	ldr	r3, [pc, #260]	; (8020eac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8020da6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020daa:	f04f 0c00 	mov.w	ip, #0
 8020dae:	881a      	ldrh	r2, [r3, #0]
 8020db0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020db4:	fb04 1202 	mla	r2, r4, r2, r1
 8020db8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020dbc:	4410      	add	r0, r2
 8020dbe:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8020dc2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8020dc6:	0092      	lsls	r2, r2, #2
 8020dc8:	9105      	str	r1, [sp, #20]
 8020dca:	9204      	str	r2, [sp, #16]
 8020dcc:	45cc      	cmp	ip, r9
 8020dce:	da65      	bge.n	8020e9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8020dd0:	1cc4      	adds	r4, r0, #3
 8020dd2:	f108 0504 	add.w	r5, r8, #4
 8020dd6:	f04f 0e00 	mov.w	lr, #0
 8020dda:	45be      	cmp	lr, r7
 8020ddc:	da4d      	bge.n	8020e7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8020dde:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020de2:	b181      	cbz	r1, 8020e06 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8020de4:	29ff      	cmp	r1, #255	; 0xff
 8020de6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8020dea:	d111      	bne.n	8020e10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8020dec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020df0:	d10e      	bne.n	8020e10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8020df2:	f804 bc03 	strb.w	fp, [r4, #-3]
 8020df6:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8020dfa:	f804 2c02 	strb.w	r2, [r4, #-2]
 8020dfe:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8020e02:	f804 2c01 	strb.w	r2, [r4, #-1]
 8020e06:	f10e 0e01 	add.w	lr, lr, #1
 8020e0a:	3403      	adds	r4, #3
 8020e0c:	3504      	adds	r5, #4
 8020e0e:	e7e4      	b.n	8020dda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8020e10:	fb0a f101 	mul.w	r1, sl, r1
 8020e14:	1c4a      	adds	r2, r1, #1
 8020e16:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020e1a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8020e1e:	1212      	asrs	r2, r2, #8
 8020e20:	b296      	uxth	r6, r2
 8020e22:	43d2      	mvns	r2, r2
 8020e24:	fb1b fb06 	smulbb	fp, fp, r6
 8020e28:	b2d2      	uxtb	r2, r2
 8020e2a:	fb01 b102 	mla	r1, r1, r2, fp
 8020e2e:	b289      	uxth	r1, r1
 8020e30:	f101 0b01 	add.w	fp, r1, #1
 8020e34:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020e38:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8020e3c:	fb1b fb02 	smulbb	fp, fp, r2
 8020e40:	1209      	asrs	r1, r1, #8
 8020e42:	f804 1c03 	strb.w	r1, [r4, #-3]
 8020e46:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8020e4a:	fb01 b106 	mla	r1, r1, r6, fp
 8020e4e:	b289      	uxth	r1, r1
 8020e50:	f101 0b01 	add.w	fp, r1, #1
 8020e54:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8020e58:	1209      	asrs	r1, r1, #8
 8020e5a:	f804 1c02 	strb.w	r1, [r4, #-2]
 8020e5e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8020e62:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8020e66:	fb11 f202 	smulbb	r2, r1, r2
 8020e6a:	fb0b 2206 	mla	r2, fp, r6, r2
 8020e6e:	b292      	uxth	r2, r2
 8020e70:	1c56      	adds	r6, r2, #1
 8020e72:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8020e76:	1212      	asrs	r2, r2, #8
 8020e78:	e7c3      	b.n	8020e02 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 8020e7a:	881a      	ldrh	r2, [r3, #0]
 8020e7c:	f10c 0c01 	add.w	ip, ip, #1
 8020e80:	9905      	ldr	r1, [sp, #20]
 8020e82:	1bd2      	subs	r2, r2, r7
 8020e84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020e88:	440a      	add	r2, r1
 8020e8a:	9904      	ldr	r1, [sp, #16]
 8020e8c:	4410      	add	r0, r2
 8020e8e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8020e92:	1bd2      	subs	r2, r2, r7
 8020e94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8020e98:	4490      	add	r8, r2
 8020e9a:	e797      	b.n	8020dcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 8020e9c:	4b02      	ldr	r3, [pc, #8]	; (8020ea8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 8020e9e:	6818      	ldr	r0, [r3, #0]
 8020ea0:	6803      	ldr	r3, [r0, #0]
 8020ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ea4:	4798      	blx	r3
 8020ea6:	e774      	b.n	8020d92 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8020ea8:	2000beec 	.word	0x2000beec
 8020eac:	2000bee4 	.word	0x2000bee4

08020eb0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020eb4:	b085      	sub	sp, #20
 8020eb6:	4606      	mov	r6, r0
 8020eb8:	460c      	mov	r4, r1
 8020eba:	4691      	mov	r9, r2
 8020ebc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020ec0:	4698      	mov	r8, r3
 8020ec2:	b385      	cbz	r5, 8020f26 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8020ec4:	4608      	mov	r0, r1
 8020ec6:	f7fd fae5 	bl	801e494 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020eca:	4607      	mov	r7, r0
 8020ecc:	4620      	mov	r0, r4
 8020ece:	f7fd fb1b 	bl	801e508 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020ed2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020ed6:	4620      	mov	r0, r4
 8020ed8:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020edc:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020ee0:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020ee4:	f7fd fc62 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020ee8:	2801      	cmp	r0, #1
 8020eea:	d00f      	beq.n	8020f0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020eec:	4620      	mov	r0, r4
 8020eee:	f7fd fc5d 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020ef2:	2802      	cmp	r0, #2
 8020ef4:	d00a      	beq.n	8020f0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020ef6:	4620      	mov	r0, r4
 8020ef8:	f7fd fc58 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020efc:	280b      	cmp	r0, #11
 8020efe:	d005      	beq.n	8020f0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020f00:	4b1b      	ldr	r3, [pc, #108]	; (8020f70 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 8020f02:	2142      	movs	r1, #66	; 0x42
 8020f04:	4a1b      	ldr	r2, [pc, #108]	; (8020f74 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 8020f06:	481c      	ldr	r0, [pc, #112]	; (8020f78 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8020f08:	f007 f816 	bl	8027f38 <__assert_func>
 8020f0c:	4620      	mov	r0, r4
 8020f0e:	f7fd fc4d 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f12:	2802      	cmp	r0, #2
 8020f14:	4620      	mov	r0, r4
 8020f16:	d109      	bne.n	8020f2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8020f18:	f7fd fbc4 	bl	801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f1c:	462b      	mov	r3, r5
 8020f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f20:	a902      	add	r1, sp, #8
 8020f22:	f7ff feeb 	bl	8020cfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020f26:	b005      	add	sp, #20
 8020f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020f2c:	f7fd fc3e 	bl	801e7ac <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020f30:	280b      	cmp	r0, #11
 8020f32:	d10e      	bne.n	8020f52 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8020f34:	4620      	mov	r0, r4
 8020f36:	f7fd fbb5 	bl	801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f3a:	4606      	mov	r6, r0
 8020f3c:	4620      	mov	r0, r4
 8020f3e:	f7fd fbe3 	bl	801e708 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020f42:	9500      	str	r5, [sp, #0]
 8020f44:	4601      	mov	r1, r0
 8020f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f48:	aa02      	add	r2, sp, #8
 8020f4a:	4630      	mov	r0, r6
 8020f4c:	f7ff feb6 	bl	8020cbc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020f50:	e7e9      	b.n	8020f26 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8020f52:	6833      	ldr	r3, [r6, #0]
 8020f54:	4620      	mov	r0, r4
 8020f56:	691f      	ldr	r7, [r3, #16]
 8020f58:	f7fd fba4 	bl	801e6a4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	4601      	mov	r1, r0
 8020f60:	aa02      	add	r2, sp, #8
 8020f62:	4630      	mov	r0, r6
 8020f64:	e9cd 5300 	strd	r5, r3, [sp]
 8020f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f6a:	47b8      	blx	r7
 8020f6c:	e7db      	b.n	8020f26 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8020f6e:	bf00      	nop
 8020f70:	0802cd9d 	.word	0x0802cd9d
 8020f74:	0802d48f 	.word	0x0802d48f
 8020f78:	0802cedf 	.word	0x0802cedf

08020f7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8020f7c:	b570      	push	{r4, r5, r6, lr}
 8020f7e:	9d04      	ldr	r5, [sp, #16]
 8020f80:	460c      	mov	r4, r1
 8020f82:	4619      	mov	r1, r3
 8020f84:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020f88:	2a0c      	cmp	r2, #12
 8020f8a:	d826      	bhi.n	8020fda <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8020f8c:	e8df f002 	tbb	[pc, r2]
 8020f90:	200e1407 	.word	0x200e1407
 8020f94:	20202020 	.word	0x20202020
 8020f98:	20202020 	.word	0x20202020
 8020f9c:	20          	.byte	0x20
 8020f9d:	00          	.byte	0x00
 8020f9e:	4b0f      	ldr	r3, [pc, #60]	; (8020fdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8020fa0:	f240 117f 	movw	r1, #383	; 0x17f
 8020fa4:	4a0e      	ldr	r2, [pc, #56]	; (8020fe0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8020fa6:	480f      	ldr	r0, [pc, #60]	; (8020fe4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8020fa8:	f006 ffc6 	bl	8027f38 <__assert_func>
 8020fac:	462a      	mov	r2, r5
 8020fae:	4620      	mov	r0, r4
 8020fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020fb4:	f7ff bea2 	b.w	8020cfc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020fb8:	6802      	ldr	r2, [r0, #0]
 8020fba:	2600      	movs	r6, #0
 8020fbc:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8020fc0:	6916      	ldr	r6, [r2, #16]
 8020fc2:	462b      	mov	r3, r5
 8020fc4:	460a      	mov	r2, r1
 8020fc6:	4621      	mov	r1, r4
 8020fc8:	46b4      	mov	ip, r6
 8020fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020fce:	4760      	bx	ip
 8020fd0:	4b05      	ldr	r3, [pc, #20]	; (8020fe8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8020fd2:	f240 1191 	movw	r1, #401	; 0x191
 8020fd6:	4a02      	ldr	r2, [pc, #8]	; (8020fe0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8020fd8:	e7e5      	b.n	8020fa6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8020fda:	bd70      	pop	{r4, r5, r6, pc}
 8020fdc:	0802d0b8 	.word	0x0802d0b8
 8020fe0:	0802d777 	.word	0x0802d777
 8020fe4:	0802cedf 	.word	0x0802cedf
 8020fe8:	0802d0f9 	.word	0x0802d0f9

08020fec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8020fec:	b158      	cbz	r0, 8021006 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8020fee:	2902      	cmp	r1, #2
 8020ff0:	d00f      	beq.n	8021012 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8020ff2:	2903      	cmp	r1, #3
 8020ff4:	d010      	beq.n	8021018 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8020ff6:	2901      	cmp	r1, #1
 8020ff8:	d101      	bne.n	8020ffe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020ffa:	2001      	movs	r0, #1
 8020ffc:	4770      	bx	lr
 8020ffe:	4b08      	ldr	r3, [pc, #32]	; (8021020 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021000:	8819      	ldrh	r1, [r3, #0]
 8021002:	4248      	negs	r0, r1
 8021004:	4770      	bx	lr
 8021006:	2902      	cmp	r1, #2
 8021008:	d006      	beq.n	8021018 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802100a:	2903      	cmp	r1, #3
 802100c:	d0f7      	beq.n	8020ffe <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802100e:	2901      	cmp	r1, #1
 8021010:	d1f3      	bne.n	8020ffa <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8021012:	4b03      	ldr	r3, [pc, #12]	; (8021020 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021014:	8818      	ldrh	r0, [r3, #0]
 8021016:	4770      	bx	lr
 8021018:	f04f 30ff 	mov.w	r0, #4294967295
 802101c:	4770      	bx	lr
 802101e:	bf00      	nop
 8021020:	2000bee4 	.word	0x2000bee4

08021024 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8021024:	b170      	cbz	r0, 8021044 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8021026:	2902      	cmp	r1, #2
 8021028:	d012      	beq.n	8021050 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 802102a:	2903      	cmp	r1, #3
 802102c:	d006      	beq.n	802103c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 802102e:	2901      	cmp	r1, #1
 8021030:	d001      	beq.n	8021036 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8021032:	2001      	movs	r0, #1
 8021034:	4770      	bx	lr
 8021036:	4b08      	ldr	r3, [pc, #32]	; (8021058 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021038:	8818      	ldrh	r0, [r3, #0]
 802103a:	4770      	bx	lr
 802103c:	4b06      	ldr	r3, [pc, #24]	; (8021058 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 802103e:	8818      	ldrh	r0, [r3, #0]
 8021040:	4240      	negs	r0, r0
 8021042:	4770      	bx	lr
 8021044:	2902      	cmp	r1, #2
 8021046:	d0f9      	beq.n	802103c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8021048:	2903      	cmp	r1, #3
 802104a:	d0f2      	beq.n	8021032 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 802104c:	2901      	cmp	r1, #1
 802104e:	d1f2      	bne.n	8021036 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8021050:	f04f 30ff 	mov.w	r0, #4294967295
 8021054:	4770      	bx	lr
 8021056:	bf00      	nop
 8021058:	2000bee4 	.word	0x2000bee4

0802105c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021060:	b095      	sub	sp, #84	; 0x54
 8021062:	9109      	str	r1, [sp, #36]	; 0x24
 8021064:	a910      	add	r1, sp, #64	; 0x40
 8021066:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 802106a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 802106e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8021072:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8021076:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 802107a:	e881 000c 	stmia.w	r1, {r2, r3}
 802107e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8021082:	9306      	str	r3, [sp, #24]
 8021084:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8021088:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 802108c:	930e      	str	r3, [sp, #56]	; 0x38
 802108e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8021092:	798f      	ldrb	r7, [r1, #6]
 8021094:	930a      	str	r3, [sp, #40]	; 0x28
 8021096:	7b4b      	ldrb	r3, [r1, #13]
 8021098:	0158      	lsls	r0, r3, #5
 802109a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 802109e:	4338      	orrs	r0, r7
 80210a0:	9008      	str	r0, [sp, #32]
 80210a2:	f000 8174 	beq.w	802138e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80210a6:	011b      	lsls	r3, r3, #4
 80210a8:	79c8      	ldrb	r0, [r1, #7]
 80210aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80210ae:	4303      	orrs	r3, r0
 80210b0:	9307      	str	r3, [sp, #28]
 80210b2:	f000 816c 	beq.w	802138e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80210b6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80210ba:	b29b      	uxth	r3, r3
 80210bc:	2e00      	cmp	r6, #0
 80210be:	f000 8112 	beq.w	80212e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 80210c2:	1af6      	subs	r6, r6, r3
 80210c4:	b2b6      	uxth	r6, r6
 80210c6:	0433      	lsls	r3, r6, #16
 80210c8:	d502      	bpl.n	80210d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80210ca:	1bad      	subs	r5, r5, r6
 80210cc:	2600      	movs	r6, #0
 80210ce:	b22d      	sxth	r5, r5
 80210d0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80210d4:	a810      	add	r0, sp, #64	; 0x40
 80210d6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80210da:	428d      	cmp	r5, r1
 80210dc:	b28b      	uxth	r3, r1
 80210de:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 80210e2:	bfbf      	itttt	lt
 80210e4:	18f6      	addlt	r6, r6, r3
 80210e6:	1b75      	sublt	r5, r6, r5
 80210e8:	b2ae      	uxthlt	r6, r5
 80210ea:	460d      	movlt	r5, r1
 80210ec:	8891      	ldrh	r1, [r2, #4]
 80210ee:	440b      	add	r3, r1
 80210f0:	4629      	mov	r1, r5
 80210f2:	b21b      	sxth	r3, r3
 80210f4:	930d      	str	r3, [sp, #52]	; 0x34
 80210f6:	88d3      	ldrh	r3, [r2, #6]
 80210f8:	9a06      	ldr	r2, [sp, #24]
 80210fa:	449a      	add	sl, r3
 80210fc:	fa0f f38a 	sxth.w	r3, sl
 8021100:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8021104:	930c      	str	r3, [sp, #48]	; 0x30
 8021106:	4bb8      	ldr	r3, [pc, #736]	; (80213e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8021108:	f893 b000 	ldrb.w	fp, [r3]
 802110c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021110:	f1dc 0300 	rsbs	r3, ip, #0
 8021114:	eb43 030c 	adc.w	r3, r3, ip
 8021118:	930b      	str	r3, [sp, #44]	; 0x2c
 802111a:	464b      	mov	r3, r9
 802111c:	f7fa fc78 	bl	801ba10 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021120:	4629      	mov	r1, r5
 8021122:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8021126:	464b      	mov	r3, r9
 8021128:	9a06      	ldr	r2, [sp, #24]
 802112a:	a810      	add	r0, sp, #64	; 0x40
 802112c:	f7fa fc88 	bl	801ba40 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021130:	a914      	add	r1, sp, #80	; 0x50
 8021132:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021136:	a813      	add	r0, sp, #76	; 0x4c
 8021138:	f7fa fd62 	bl	801bc00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802113c:	f1b9 0f00 	cmp.w	r9, #0
 8021140:	f040 80d4 	bne.w	80212ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 8021144:	f1bb 0f01 	cmp.w	fp, #1
 8021148:	f040 80d8 	bne.w	80212fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 802114c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802114e:	2b00      	cmp	r3, #0
 8021150:	f040 8122 	bne.w	8021398 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 8021154:	4ba5      	ldr	r3, [pc, #660]	; (80213ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8021156:	6818      	ldr	r0, [r3, #0]
 8021158:	6803      	ldr	r3, [r0, #0]
 802115a:	6a1b      	ldr	r3, [r3, #32]
 802115c:	4798      	blx	r3
 802115e:	4aa4      	ldr	r2, [pc, #656]	; (80213f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8021160:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021164:	8811      	ldrh	r1, [r2, #0]
 8021166:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802116a:	fb01 2303 	mla	r3, r1, r3, r2
 802116e:	2201      	movs	r2, #1
 8021170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021174:	4590      	cmp	r8, r2
 8021176:	4403      	add	r3, r0
 8021178:	9307      	str	r3, [sp, #28]
 802117a:	fa02 f308 	lsl.w	r3, r2, r8
 802117e:	f103 33ff 	add.w	r3, r3, #4294967295
 8021182:	b2db      	uxtb	r3, r3
 8021184:	930f      	str	r3, [sp, #60]	; 0x3c
 8021186:	f000 8109 	beq.w	802139c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 802118a:	f1b8 0f02 	cmp.w	r8, #2
 802118e:	f000 813e 	beq.w	802140e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 8021192:	f1b8 0f04 	cmp.w	r8, #4
 8021196:	f000 8132 	beq.w	80213fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 802119a:	b906      	cbnz	r6, 802119e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 802119c:	b174      	cbz	r4, 80211bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 802119e:	fb17 6304 	smlabb	r3, r7, r4, r6
 80211a2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80211a4:	ebaa 0a04 	sub.w	sl, sl, r4
 80211a8:	fb13 f308 	smulbb	r3, r3, r8
 80211ac:	fa1f fa8a 	uxth.w	sl, sl
 80211b0:	b29b      	uxth	r3, r3
 80211b2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 80211b6:	f003 0407 	and.w	r4, r3, #7
 80211ba:	9124      	str	r1, [sp, #144]	; 0x90
 80211bc:	4649      	mov	r1, r9
 80211be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80211c0:	f7ff ff14 	bl	8020fec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80211c4:	4649      	mov	r1, r9
 80211c6:	4683      	mov	fp, r0
 80211c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80211ca:	f7ff ff2b 	bl	8021024 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80211ce:	9906      	ldr	r1, [sp, #24]
 80211d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80211d2:	1bad      	subs	r5, r5, r6
 80211d4:	1a5b      	subs	r3, r3, r1
 80211d6:	459a      	cmp	sl, r3
 80211d8:	bfa8      	it	ge
 80211da:	469a      	movge	sl, r3
 80211dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211de:	1b5d      	subs	r5, r3, r5
 80211e0:	9b08      	ldr	r3, [sp, #32]
 80211e2:	429d      	cmp	r5, r3
 80211e4:	bfd4      	ite	le
 80211e6:	ebc6 0605 	rsble	r6, r6, r5
 80211ea:	ebc6 0603 	rsbgt	r6, r6, r3
 80211ee:	1bbf      	subs	r7, r7, r6
 80211f0:	fb0b 0016 	mls	r0, fp, r6, r0
 80211f4:	fb08 f307 	mul.w	r3, r8, r7
 80211f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80211fc:	9308      	str	r3, [sp, #32]
 80211fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021200:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8021204:	930b      	str	r3, [sp, #44]	; 0x2c
 8021206:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021208:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802120c:	930c      	str	r3, [sp, #48]	; 0x30
 802120e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021210:	b2db      	uxtb	r3, r3
 8021212:	930d      	str	r3, [sp, #52]	; 0x34
 8021214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021216:	7819      	ldrb	r1, [r3, #0]
 8021218:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802121c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 8021220:	4121      	asrs	r1, r4
 8021222:	9306      	str	r3, [sp, #24]
 8021224:	fb03 0b0b 	mla	fp, r3, fp, r0
 8021228:	b2c9      	uxtb	r1, r1
 802122a:	f1ba 0f00 	cmp.w	sl, #0
 802122e:	f340 80d1 	ble.w	80213d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8021232:	46b6      	mov	lr, r6
 8021234:	9807      	ldr	r0, [sp, #28]
 8021236:	f1be 0f00 	cmp.w	lr, #0
 802123a:	f340 80b8 	ble.w	80213ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 802123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021240:	400b      	ands	r3, r1
 8021242:	d03e      	beq.n	80212c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8021244:	fb13 f302 	smulbb	r3, r3, r2
 8021248:	2bfe      	cmp	r3, #254	; 0xfe
 802124a:	dd03      	ble.n	8021254 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 802124c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802124e:	2dff      	cmp	r5, #255	; 0xff
 8021250:	f000 80a6 	beq.w	80213a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8021254:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021256:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8021258:	fb15 f303 	smulbb	r3, r5, r3
 802125c:	b29b      	uxth	r3, r3
 802125e:	1c5d      	adds	r5, r3, #1
 8021260:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8021264:	7805      	ldrb	r5, [r0, #0]
 8021266:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802126a:	fa1f fc83 	uxth.w	ip, r3
 802126e:	43db      	mvns	r3, r3
 8021270:	fb17 f90c 	smulbb	r9, r7, ip
 8021274:	b2db      	uxtb	r3, r3
 8021276:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021278:	fb05 9503 	mla	r5, r5, r3, r9
 802127c:	b2ad      	uxth	r5, r5
 802127e:	f105 0901 	add.w	r9, r5, #1
 8021282:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8021286:	fb17 f90c 	smulbb	r9, r7, ip
 802128a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802128c:	122d      	asrs	r5, r5, #8
 802128e:	fb17 fc0c 	smulbb	ip, r7, ip
 8021292:	7005      	strb	r5, [r0, #0]
 8021294:	7845      	ldrb	r5, [r0, #1]
 8021296:	fb05 9503 	mla	r5, r5, r3, r9
 802129a:	b2ad      	uxth	r5, r5
 802129c:	f105 0901 	add.w	r9, r5, #1
 80212a0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80212a4:	122d      	asrs	r5, r5, #8
 80212a6:	7045      	strb	r5, [r0, #1]
 80212a8:	7885      	ldrb	r5, [r0, #2]
 80212aa:	fb05 cc03 	mla	ip, r5, r3, ip
 80212ae:	fa1f fc8c 	uxth.w	ip, ip
 80212b2:	f10c 0301 	add.w	r3, ip, #1
 80212b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80212ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80212be:	f880 c002 	strb.w	ip, [r0, #2]
 80212c2:	4444      	add	r4, r8
 80212c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80212c8:	b2a4      	uxth	r4, r4
 80212ca:	2c07      	cmp	r4, #7
 80212cc:	bf89      	itett	hi
 80212ce:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 80212d0:	fa41 f108 	asrls.w	r1, r1, r8
 80212d4:	2400      	movhi	r4, #0
 80212d6:	7859      	ldrbhi	r1, [r3, #1]
 80212d8:	bf8a      	itet	hi
 80212da:	3301      	addhi	r3, #1
 80212dc:	b2c9      	uxtbls	r1, r1
 80212de:	9324      	strhi	r3, [sp, #144]	; 0x90
 80212e0:	9b06      	ldr	r3, [sp, #24]
 80212e2:	4418      	add	r0, r3
 80212e4:	e7a7      	b.n	8021236 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 80212e6:	441d      	add	r5, r3
 80212e8:	b22d      	sxth	r5, r5
 80212ea:	e6f1      	b.n	80210d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80212ec:	f1b9 0f01 	cmp.w	r9, #1
 80212f0:	f47f af2c 	bne.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80212f4:	f1bb 0f01 	cmp.w	fp, #1
 80212f8:	f47f af28 	bne.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80212fc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80213ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8021300:	f8db 0000 	ldr.w	r0, [fp]
 8021304:	6803      	ldr	r3, [r0, #0]
 8021306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021308:	4798      	blx	r3
 802130a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 802130e:	465a      	mov	r2, fp
 8021310:	d006      	beq.n	8021320 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021312:	f1b8 0f04 	cmp.w	r8, #4
 8021316:	d13d      	bne.n	8021394 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8021318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802131a:	3300      	adds	r3, #0
 802131c:	bf18      	it	ne
 802131e:	2301      	movne	r3, #1
 8021320:	05c0      	lsls	r0, r0, #23
 8021322:	d567      	bpl.n	80213f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8021324:	f1b8 0f08 	cmp.w	r8, #8
 8021328:	d164      	bne.n	80213f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 802132a:	2b00      	cmp	r3, #0
 802132c:	bf0c      	ite	eq
 802132e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8021332:	2180      	movne	r1, #128	; 0x80
 8021334:	2e00      	cmp	r6, #0
 8021336:	f47f af09 	bne.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802133a:	2c00      	cmp	r4, #0
 802133c:	f47f af06 	bne.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8021340:	9b08      	ldr	r3, [sp, #32]
 8021342:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021344:	442b      	add	r3, r5
 8021346:	4283      	cmp	r3, r0
 8021348:	f73f af00 	bgt.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802134c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8021350:	4403      	add	r3, r0
 8021352:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021354:	4283      	cmp	r3, r0
 8021356:	f73f aef9 	bgt.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802135a:	f1b8 0f08 	cmp.w	r8, #8
 802135e:	6810      	ldr	r0, [r2, #0]
 8021360:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8021364:	bf18      	it	ne
 8021366:	3701      	addne	r7, #1
 8021368:	6804      	ldr	r4, [r0, #0]
 802136a:	9105      	str	r1, [sp, #20]
 802136c:	bf18      	it	ne
 802136e:	f027 0701 	bicne.w	r7, r7, #1
 8021372:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021374:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8021378:	bf18      	it	ne
 802137a:	b2bf      	uxthne	r7, r7
 802137c:	9104      	str	r1, [sp, #16]
 802137e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021380:	e9cd 7a00 	strd	r7, sl, [sp]
 8021384:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8021388:	9924      	ldr	r1, [sp, #144]	; 0x90
 802138a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 802138c:	47a0      	blx	r4
 802138e:	b015      	add	sp, #84	; 0x54
 8021390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021394:	2300      	movs	r3, #0
 8021396:	e7c3      	b.n	8021320 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8021398:	9809      	ldr	r0, [sp, #36]	; 0x24
 802139a:	e6e0      	b.n	802115e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 802139c:	22ff      	movs	r2, #255	; 0xff
 802139e:	e6fc      	b.n	802119a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 80213a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213a2:	7003      	strb	r3, [r0, #0]
 80213a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213a6:	7043      	strb	r3, [r0, #1]
 80213a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213aa:	7083      	strb	r3, [r0, #2]
 80213ac:	e789      	b.n	80212c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 80213ae:	9b08      	ldr	r3, [sp, #32]
 80213b0:	b153      	cbz	r3, 80213c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 80213b2:	441c      	add	r4, r3
 80213b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213b6:	b2a4      	uxth	r4, r4
 80213b8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80213bc:	f004 0407 	and.w	r4, r4, #7
 80213c0:	7819      	ldrb	r1, [r3, #0]
 80213c2:	9324      	str	r3, [sp, #144]	; 0x90
 80213c4:	4121      	asrs	r1, r4
 80213c6:	b2c9      	uxtb	r1, r1
 80213c8:	9b07      	ldr	r3, [sp, #28]
 80213ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213ce:	445b      	add	r3, fp
 80213d0:	9307      	str	r3, [sp, #28]
 80213d2:	e72a      	b.n	802122a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 80213d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d1d9      	bne.n	802138e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80213da:	4b04      	ldr	r3, [pc, #16]	; (80213ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 80213dc:	6818      	ldr	r0, [r3, #0]
 80213de:	6803      	ldr	r3, [r0, #0]
 80213e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213e2:	4798      	blx	r3
 80213e4:	e7d3      	b.n	802138e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80213e6:	bf00      	nop
 80213e8:	2000bee2 	.word	0x2000bee2
 80213ec:	2000beec 	.word	0x2000beec
 80213f0:	2000bee4 	.word	0x2000bee4
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f43f aea9 	beq.w	802114c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80213fa:	2180      	movs	r1, #128	; 0x80
 80213fc:	e79a      	b.n	8021334 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 80213fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021400:	b11b      	cbz	r3, 802140a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021402:	07fb      	lsls	r3, r7, #31
 8021404:	d501      	bpl.n	802140a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8021406:	3701      	adds	r7, #1
 8021408:	b2bf      	uxth	r7, r7
 802140a:	2211      	movs	r2, #17
 802140c:	e6c5      	b.n	802119a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 802140e:	2255      	movs	r2, #85	; 0x55
 8021410:	e6c3      	b.n	802119a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8021412:	bf00      	nop

08021414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8021414:	b538      	push	{r3, r4, r5, lr}
 8021416:	4c15      	ldr	r4, [pc, #84]	; (802146c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021418:	4605      	mov	r5, r0
 802141a:	7823      	ldrb	r3, [r4, #0]
 802141c:	f3bf 8f5b 	dmb	ish
 8021420:	07da      	lsls	r2, r3, #31
 8021422:	d40b      	bmi.n	802143c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021424:	4620      	mov	r0, r4
 8021426:	f006 fd5e 	bl	8027ee6 <__cxa_guard_acquire>
 802142a:	b138      	cbz	r0, 802143c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802142c:	4620      	mov	r0, r4
 802142e:	f006 fd66 	bl	8027efe <__cxa_guard_release>
 8021432:	4a0f      	ldr	r2, [pc, #60]	; (8021470 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021434:	490f      	ldr	r1, [pc, #60]	; (8021474 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8021436:	4810      	ldr	r0, [pc, #64]	; (8021478 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021438:	f006 fd4b 	bl	8027ed2 <__aeabi_atexit>
 802143c:	4c0f      	ldr	r4, [pc, #60]	; (802147c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802143e:	7823      	ldrb	r3, [r4, #0]
 8021440:	f3bf 8f5b 	dmb	ish
 8021444:	07db      	lsls	r3, r3, #31
 8021446:	d40b      	bmi.n	8021460 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021448:	4620      	mov	r0, r4
 802144a:	f006 fd4c 	bl	8027ee6 <__cxa_guard_acquire>
 802144e:	b138      	cbz	r0, 8021460 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021450:	4620      	mov	r0, r4
 8021452:	f006 fd54 	bl	8027efe <__cxa_guard_release>
 8021456:	4a06      	ldr	r2, [pc, #24]	; (8021470 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021458:	4909      	ldr	r1, [pc, #36]	; (8021480 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802145a:	480a      	ldr	r0, [pc, #40]	; (8021484 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802145c:	f006 fd39 	bl	8027ed2 <__aeabi_atexit>
 8021460:	4b05      	ldr	r3, [pc, #20]	; (8021478 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021462:	612b      	str	r3, [r5, #16]
 8021464:	4b07      	ldr	r3, [pc, #28]	; (8021484 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021466:	616b      	str	r3, [r5, #20]
 8021468:	bd38      	pop	{r3, r4, r5, pc}
 802146a:	bf00      	nop
 802146c:	2000bff8 	.word	0x2000bff8
 8021470:	20000000 	.word	0x20000000
 8021474:	0802004b 	.word	0x0802004b
 8021478:	200000c4 	.word	0x200000c4
 802147c:	2000bffc 	.word	0x2000bffc
 8021480:	08020049 	.word	0x08020049
 8021484:	200000c8 	.word	0x200000c8

08021488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021488:	b538      	push	{r3, r4, r5, lr}
 802148a:	4c15      	ldr	r4, [pc, #84]	; (80214e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802148c:	4605      	mov	r5, r0
 802148e:	7823      	ldrb	r3, [r4, #0]
 8021490:	f3bf 8f5b 	dmb	ish
 8021494:	07da      	lsls	r2, r3, #31
 8021496:	d40b      	bmi.n	80214b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021498:	4620      	mov	r0, r4
 802149a:	f006 fd24 	bl	8027ee6 <__cxa_guard_acquire>
 802149e:	b138      	cbz	r0, 80214b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80214a0:	4620      	mov	r0, r4
 80214a2:	f006 fd2c 	bl	8027efe <__cxa_guard_release>
 80214a6:	4a0f      	ldr	r2, [pc, #60]	; (80214e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80214a8:	490f      	ldr	r1, [pc, #60]	; (80214e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80214aa:	4810      	ldr	r0, [pc, #64]	; (80214ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80214ac:	f006 fd11 	bl	8027ed2 <__aeabi_atexit>
 80214b0:	4c0f      	ldr	r4, [pc, #60]	; (80214f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80214b2:	7823      	ldrb	r3, [r4, #0]
 80214b4:	f3bf 8f5b 	dmb	ish
 80214b8:	07db      	lsls	r3, r3, #31
 80214ba:	d40b      	bmi.n	80214d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80214bc:	4620      	mov	r0, r4
 80214be:	f006 fd12 	bl	8027ee6 <__cxa_guard_acquire>
 80214c2:	b138      	cbz	r0, 80214d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80214c4:	4620      	mov	r0, r4
 80214c6:	f006 fd1a 	bl	8027efe <__cxa_guard_release>
 80214ca:	4a06      	ldr	r2, [pc, #24]	; (80214e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80214cc:	4909      	ldr	r1, [pc, #36]	; (80214f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80214ce:	480a      	ldr	r0, [pc, #40]	; (80214f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214d0:	f006 fcff 	bl	8027ed2 <__aeabi_atexit>
 80214d4:	4b05      	ldr	r3, [pc, #20]	; (80214ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80214d6:	60ab      	str	r3, [r5, #8]
 80214d8:	4b07      	ldr	r3, [pc, #28]	; (80214f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214da:	60eb      	str	r3, [r5, #12]
 80214dc:	bd38      	pop	{r3, r4, r5, pc}
 80214de:	bf00      	nop
 80214e0:	2000bfd8 	.word	0x2000bfd8
 80214e4:	20000000 	.word	0x20000000
 80214e8:	0802004f 	.word	0x0802004f
 80214ec:	200000a4 	.word	0x200000a4
 80214f0:	2000bfdc 	.word	0x2000bfdc
 80214f4:	0802004d 	.word	0x0802004d
 80214f8:	200000a8 	.word	0x200000a8

080214fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80214fc:	b510      	push	{r4, lr}
 80214fe:	4604      	mov	r4, r0
 8021500:	f7ff ff88 	bl	8021414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8021504:	4620      	mov	r0, r4
 8021506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802150a:	f7ff bfbd 	b.w	8021488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021510:	b538      	push	{r3, r4, r5, lr}
 8021512:	4c15      	ldr	r4, [pc, #84]	; (8021568 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8021514:	4605      	mov	r5, r0
 8021516:	7823      	ldrb	r3, [r4, #0]
 8021518:	f3bf 8f5b 	dmb	ish
 802151c:	07da      	lsls	r2, r3, #31
 802151e:	d40b      	bmi.n	8021538 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021520:	4620      	mov	r0, r4
 8021522:	f006 fce0 	bl	8027ee6 <__cxa_guard_acquire>
 8021526:	b138      	cbz	r0, 8021538 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021528:	4620      	mov	r0, r4
 802152a:	f006 fce8 	bl	8027efe <__cxa_guard_release>
 802152e:	4a0f      	ldr	r2, [pc, #60]	; (802156c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021530:	490f      	ldr	r1, [pc, #60]	; (8021570 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8021532:	4810      	ldr	r0, [pc, #64]	; (8021574 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8021534:	f006 fccd 	bl	8027ed2 <__aeabi_atexit>
 8021538:	4c0f      	ldr	r4, [pc, #60]	; (8021578 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802153a:	7823      	ldrb	r3, [r4, #0]
 802153c:	f3bf 8f5b 	dmb	ish
 8021540:	07db      	lsls	r3, r3, #31
 8021542:	d40b      	bmi.n	802155c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8021544:	4620      	mov	r0, r4
 8021546:	f006 fcce 	bl	8027ee6 <__cxa_guard_acquire>
 802154a:	b138      	cbz	r0, 802155c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802154c:	4620      	mov	r0, r4
 802154e:	f006 fcd6 	bl	8027efe <__cxa_guard_release>
 8021552:	4a06      	ldr	r2, [pc, #24]	; (802156c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021554:	4909      	ldr	r1, [pc, #36]	; (802157c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8021556:	480a      	ldr	r0, [pc, #40]	; (8021580 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021558:	f006 fcbb 	bl	8027ed2 <__aeabi_atexit>
 802155c:	4b05      	ldr	r3, [pc, #20]	; (8021574 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802155e:	622b      	str	r3, [r5, #32]
 8021560:	4b07      	ldr	r3, [pc, #28]	; (8021580 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8021562:	626b      	str	r3, [r5, #36]	; 0x24
 8021564:	bd38      	pop	{r3, r4, r5, pc}
 8021566:	bf00      	nop
 8021568:	2000c000 	.word	0x2000c000
 802156c:	20000000 	.word	0x20000000
 8021570:	08020043 	.word	0x08020043
 8021574:	200000cc 	.word	0x200000cc
 8021578:	2000c004 	.word	0x2000c004
 802157c:	08020041 	.word	0x08020041
 8021580:	200000d0 	.word	0x200000d0

08021584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021584:	b538      	push	{r3, r4, r5, lr}
 8021586:	4c15      	ldr	r4, [pc, #84]	; (80215dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8021588:	4605      	mov	r5, r0
 802158a:	7823      	ldrb	r3, [r4, #0]
 802158c:	f3bf 8f5b 	dmb	ish
 8021590:	07da      	lsls	r2, r3, #31
 8021592:	d40b      	bmi.n	80215ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021594:	4620      	mov	r0, r4
 8021596:	f006 fca6 	bl	8027ee6 <__cxa_guard_acquire>
 802159a:	b138      	cbz	r0, 80215ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802159c:	4620      	mov	r0, r4
 802159e:	f006 fcae 	bl	8027efe <__cxa_guard_release>
 80215a2:	4a0f      	ldr	r2, [pc, #60]	; (80215e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80215a4:	490f      	ldr	r1, [pc, #60]	; (80215e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80215a6:	4810      	ldr	r0, [pc, #64]	; (80215e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80215a8:	f006 fc93 	bl	8027ed2 <__aeabi_atexit>
 80215ac:	4c0f      	ldr	r4, [pc, #60]	; (80215ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80215ae:	7823      	ldrb	r3, [r4, #0]
 80215b0:	f3bf 8f5b 	dmb	ish
 80215b4:	07db      	lsls	r3, r3, #31
 80215b6:	d40b      	bmi.n	80215d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80215b8:	4620      	mov	r0, r4
 80215ba:	f006 fc94 	bl	8027ee6 <__cxa_guard_acquire>
 80215be:	b138      	cbz	r0, 80215d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80215c0:	4620      	mov	r0, r4
 80215c2:	f006 fc9c 	bl	8027efe <__cxa_guard_release>
 80215c6:	4a06      	ldr	r2, [pc, #24]	; (80215e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80215c8:	4909      	ldr	r1, [pc, #36]	; (80215f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80215ca:	480a      	ldr	r0, [pc, #40]	; (80215f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80215cc:	f006 fc81 	bl	8027ed2 <__aeabi_atexit>
 80215d0:	4b05      	ldr	r3, [pc, #20]	; (80215e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80215d2:	61ab      	str	r3, [r5, #24]
 80215d4:	4b07      	ldr	r3, [pc, #28]	; (80215f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80215d6:	61eb      	str	r3, [r5, #28]
 80215d8:	bd38      	pop	{r3, r4, r5, pc}
 80215da:	bf00      	nop
 80215dc:	2000bfe0 	.word	0x2000bfe0
 80215e0:	20000000 	.word	0x20000000
 80215e4:	08020047 	.word	0x08020047
 80215e8:	200000ac 	.word	0x200000ac
 80215ec:	2000bfe4 	.word	0x2000bfe4
 80215f0:	08020045 	.word	0x08020045
 80215f4:	200000b0 	.word	0x200000b0

080215f8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80215f8:	b510      	push	{r4, lr}
 80215fa:	4604      	mov	r4, r0
 80215fc:	f7ff ff88 	bl	8021510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021600:	4620      	mov	r0, r4
 8021602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021606:	f7ff bfbd 	b.w	8021584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802160c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802160c:	b538      	push	{r3, r4, r5, lr}
 802160e:	4c15      	ldr	r4, [pc, #84]	; (8021664 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021610:	4605      	mov	r5, r0
 8021612:	7823      	ldrb	r3, [r4, #0]
 8021614:	f3bf 8f5b 	dmb	ish
 8021618:	07da      	lsls	r2, r3, #31
 802161a:	d40b      	bmi.n	8021634 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802161c:	4620      	mov	r0, r4
 802161e:	f006 fc62 	bl	8027ee6 <__cxa_guard_acquire>
 8021622:	b138      	cbz	r0, 8021634 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021624:	4620      	mov	r0, r4
 8021626:	f006 fc6a 	bl	8027efe <__cxa_guard_release>
 802162a:	4a0f      	ldr	r2, [pc, #60]	; (8021668 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802162c:	490f      	ldr	r1, [pc, #60]	; (802166c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802162e:	4810      	ldr	r0, [pc, #64]	; (8021670 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8021630:	f006 fc4f 	bl	8027ed2 <__aeabi_atexit>
 8021634:	4c0f      	ldr	r4, [pc, #60]	; (8021674 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8021636:	7823      	ldrb	r3, [r4, #0]
 8021638:	f3bf 8f5b 	dmb	ish
 802163c:	07db      	lsls	r3, r3, #31
 802163e:	d40b      	bmi.n	8021658 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021640:	4620      	mov	r0, r4
 8021642:	f006 fc50 	bl	8027ee6 <__cxa_guard_acquire>
 8021646:	b138      	cbz	r0, 8021658 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8021648:	4620      	mov	r0, r4
 802164a:	f006 fc58 	bl	8027efe <__cxa_guard_release>
 802164e:	4a06      	ldr	r2, [pc, #24]	; (8021668 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8021650:	4909      	ldr	r1, [pc, #36]	; (8021678 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8021652:	480a      	ldr	r0, [pc, #40]	; (802167c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8021654:	f006 fc3d 	bl	8027ed2 <__aeabi_atexit>
 8021658:	4b05      	ldr	r3, [pc, #20]	; (8021670 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802165a:	632b      	str	r3, [r5, #48]	; 0x30
 802165c:	4b07      	ldr	r3, [pc, #28]	; (802167c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802165e:	636b      	str	r3, [r5, #52]	; 0x34
 8021660:	bd38      	pop	{r3, r4, r5, pc}
 8021662:	bf00      	nop
 8021664:	2000bfe8 	.word	0x2000bfe8
 8021668:	20000000 	.word	0x20000000
 802166c:	0802003b 	.word	0x0802003b
 8021670:	200000b4 	.word	0x200000b4
 8021674:	2000bfec 	.word	0x2000bfec
 8021678:	08020039 	.word	0x08020039
 802167c:	200000b8 	.word	0x200000b8

08021680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8021680:	b538      	push	{r3, r4, r5, lr}
 8021682:	4c15      	ldr	r4, [pc, #84]	; (80216d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8021684:	4605      	mov	r5, r0
 8021686:	7823      	ldrb	r3, [r4, #0]
 8021688:	f3bf 8f5b 	dmb	ish
 802168c:	07da      	lsls	r2, r3, #31
 802168e:	d40b      	bmi.n	80216a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021690:	4620      	mov	r0, r4
 8021692:	f006 fc28 	bl	8027ee6 <__cxa_guard_acquire>
 8021696:	b138      	cbz	r0, 80216a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021698:	4620      	mov	r0, r4
 802169a:	f006 fc30 	bl	8027efe <__cxa_guard_release>
 802169e:	4a0f      	ldr	r2, [pc, #60]	; (80216dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80216a0:	490f      	ldr	r1, [pc, #60]	; (80216e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80216a2:	4810      	ldr	r0, [pc, #64]	; (80216e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80216a4:	f006 fc15 	bl	8027ed2 <__aeabi_atexit>
 80216a8:	4c0f      	ldr	r4, [pc, #60]	; (80216e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80216aa:	7823      	ldrb	r3, [r4, #0]
 80216ac:	f3bf 8f5b 	dmb	ish
 80216b0:	07db      	lsls	r3, r3, #31
 80216b2:	d40b      	bmi.n	80216cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80216b4:	4620      	mov	r0, r4
 80216b6:	f006 fc16 	bl	8027ee6 <__cxa_guard_acquire>
 80216ba:	b138      	cbz	r0, 80216cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80216bc:	4620      	mov	r0, r4
 80216be:	f006 fc1e 	bl	8027efe <__cxa_guard_release>
 80216c2:	4a06      	ldr	r2, [pc, #24]	; (80216dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80216c4:	4909      	ldr	r1, [pc, #36]	; (80216ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80216c6:	480a      	ldr	r0, [pc, #40]	; (80216f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80216c8:	f006 fc03 	bl	8027ed2 <__aeabi_atexit>
 80216cc:	4b05      	ldr	r3, [pc, #20]	; (80216e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80216ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80216d0:	4b07      	ldr	r3, [pc, #28]	; (80216f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80216d2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80216d4:	bd38      	pop	{r3, r4, r5, pc}
 80216d6:	bf00      	nop
 80216d8:	2000bfc0 	.word	0x2000bfc0
 80216dc:	20000000 	.word	0x20000000
 80216e0:	0802003f 	.word	0x0802003f
 80216e4:	2000008c 	.word	0x2000008c
 80216e8:	2000bfc4 	.word	0x2000bfc4
 80216ec:	0802003d 	.word	0x0802003d
 80216f0:	20000090 	.word	0x20000090

080216f4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80216f4:	b510      	push	{r4, lr}
 80216f6:	4604      	mov	r4, r0
 80216f8:	f7ff ff88 	bl	802160c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80216fc:	4620      	mov	r0, r4
 80216fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021702:	f7ff bfbd 	b.w	8021680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021708:	b538      	push	{r3, r4, r5, lr}
 802170a:	4c15      	ldr	r4, [pc, #84]	; (8021760 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802170c:	4605      	mov	r5, r0
 802170e:	7823      	ldrb	r3, [r4, #0]
 8021710:	f3bf 8f5b 	dmb	ish
 8021714:	07da      	lsls	r2, r3, #31
 8021716:	d40b      	bmi.n	8021730 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021718:	4620      	mov	r0, r4
 802171a:	f006 fbe4 	bl	8027ee6 <__cxa_guard_acquire>
 802171e:	b138      	cbz	r0, 8021730 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021720:	4620      	mov	r0, r4
 8021722:	f006 fbec 	bl	8027efe <__cxa_guard_release>
 8021726:	4a0f      	ldr	r2, [pc, #60]	; (8021764 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021728:	490f      	ldr	r1, [pc, #60]	; (8021768 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802172a:	4810      	ldr	r0, [pc, #64]	; (802176c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802172c:	f006 fbd1 	bl	8027ed2 <__aeabi_atexit>
 8021730:	4c0f      	ldr	r4, [pc, #60]	; (8021770 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8021732:	7823      	ldrb	r3, [r4, #0]
 8021734:	f3bf 8f5b 	dmb	ish
 8021738:	07db      	lsls	r3, r3, #31
 802173a:	d40b      	bmi.n	8021754 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802173c:	4620      	mov	r0, r4
 802173e:	f006 fbd2 	bl	8027ee6 <__cxa_guard_acquire>
 8021742:	b138      	cbz	r0, 8021754 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021744:	4620      	mov	r0, r4
 8021746:	f006 fbda 	bl	8027efe <__cxa_guard_release>
 802174a:	4a06      	ldr	r2, [pc, #24]	; (8021764 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802174c:	4909      	ldr	r1, [pc, #36]	; (8021774 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802174e:	480a      	ldr	r0, [pc, #40]	; (8021778 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021750:	f006 fbbf 	bl	8027ed2 <__aeabi_atexit>
 8021754:	4b05      	ldr	r3, [pc, #20]	; (802176c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021756:	642b      	str	r3, [r5, #64]	; 0x40
 8021758:	4b07      	ldr	r3, [pc, #28]	; (8021778 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802175a:	646b      	str	r3, [r5, #68]	; 0x44
 802175c:	bd38      	pop	{r3, r4, r5, pc}
 802175e:	bf00      	nop
 8021760:	2000bff0 	.word	0x2000bff0
 8021764:	20000000 	.word	0x20000000
 8021768:	08020033 	.word	0x08020033
 802176c:	200000bc 	.word	0x200000bc
 8021770:	2000bff4 	.word	0x2000bff4
 8021774:	08020031 	.word	0x08020031
 8021778:	200000c0 	.word	0x200000c0

0802177c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802177c:	b538      	push	{r3, r4, r5, lr}
 802177e:	4c15      	ldr	r4, [pc, #84]	; (80217d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8021780:	4605      	mov	r5, r0
 8021782:	7823      	ldrb	r3, [r4, #0]
 8021784:	f3bf 8f5b 	dmb	ish
 8021788:	07da      	lsls	r2, r3, #31
 802178a:	d40b      	bmi.n	80217a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802178c:	4620      	mov	r0, r4
 802178e:	f006 fbaa 	bl	8027ee6 <__cxa_guard_acquire>
 8021792:	b138      	cbz	r0, 80217a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021794:	4620      	mov	r0, r4
 8021796:	f006 fbb2 	bl	8027efe <__cxa_guard_release>
 802179a:	4a0f      	ldr	r2, [pc, #60]	; (80217d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802179c:	490f      	ldr	r1, [pc, #60]	; (80217dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802179e:	4810      	ldr	r0, [pc, #64]	; (80217e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80217a0:	f006 fb97 	bl	8027ed2 <__aeabi_atexit>
 80217a4:	4c0f      	ldr	r4, [pc, #60]	; (80217e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80217a6:	7823      	ldrb	r3, [r4, #0]
 80217a8:	f3bf 8f5b 	dmb	ish
 80217ac:	07db      	lsls	r3, r3, #31
 80217ae:	d40b      	bmi.n	80217c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80217b0:	4620      	mov	r0, r4
 80217b2:	f006 fb98 	bl	8027ee6 <__cxa_guard_acquire>
 80217b6:	b138      	cbz	r0, 80217c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80217b8:	4620      	mov	r0, r4
 80217ba:	f006 fba0 	bl	8027efe <__cxa_guard_release>
 80217be:	4a06      	ldr	r2, [pc, #24]	; (80217d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80217c0:	4909      	ldr	r1, [pc, #36]	; (80217e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80217c2:	480a      	ldr	r0, [pc, #40]	; (80217ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80217c4:	f006 fb85 	bl	8027ed2 <__aeabi_atexit>
 80217c8:	4b05      	ldr	r3, [pc, #20]	; (80217e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80217ca:	63ab      	str	r3, [r5, #56]	; 0x38
 80217cc:	4b07      	ldr	r3, [pc, #28]	; (80217ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80217ce:	63eb      	str	r3, [r5, #60]	; 0x3c
 80217d0:	bd38      	pop	{r3, r4, r5, pc}
 80217d2:	bf00      	nop
 80217d4:	2000bfd0 	.word	0x2000bfd0
 80217d8:	20000000 	.word	0x20000000
 80217dc:	08020037 	.word	0x08020037
 80217e0:	2000009c 	.word	0x2000009c
 80217e4:	2000bfd4 	.word	0x2000bfd4
 80217e8:	08020035 	.word	0x08020035
 80217ec:	200000a0 	.word	0x200000a0

080217f0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80217f0:	b510      	push	{r4, lr}
 80217f2:	4604      	mov	r4, r0
 80217f4:	f7ff ff88 	bl	8021708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80217f8:	4620      	mov	r0, r4
 80217fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217fe:	f7ff bfbd 	b.w	802177c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021804:	b538      	push	{r3, r4, r5, lr}
 8021806:	4c15      	ldr	r4, [pc, #84]	; (802185c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021808:	4605      	mov	r5, r0
 802180a:	7823      	ldrb	r3, [r4, #0]
 802180c:	f3bf 8f5b 	dmb	ish
 8021810:	07da      	lsls	r2, r3, #31
 8021812:	d40b      	bmi.n	802182c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021814:	4620      	mov	r0, r4
 8021816:	f006 fb66 	bl	8027ee6 <__cxa_guard_acquire>
 802181a:	b138      	cbz	r0, 802182c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802181c:	4620      	mov	r0, r4
 802181e:	f006 fb6e 	bl	8027efe <__cxa_guard_release>
 8021822:	4a0f      	ldr	r2, [pc, #60]	; (8021860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021824:	490f      	ldr	r1, [pc, #60]	; (8021864 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021826:	4810      	ldr	r0, [pc, #64]	; (8021868 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021828:	f006 fb53 	bl	8027ed2 <__aeabi_atexit>
 802182c:	4c0f      	ldr	r4, [pc, #60]	; (802186c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802182e:	7823      	ldrb	r3, [r4, #0]
 8021830:	f3bf 8f5b 	dmb	ish
 8021834:	07db      	lsls	r3, r3, #31
 8021836:	d40b      	bmi.n	8021850 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021838:	4620      	mov	r0, r4
 802183a:	f006 fb54 	bl	8027ee6 <__cxa_guard_acquire>
 802183e:	b138      	cbz	r0, 8021850 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021840:	4620      	mov	r0, r4
 8021842:	f006 fb5c 	bl	8027efe <__cxa_guard_release>
 8021846:	4a06      	ldr	r2, [pc, #24]	; (8021860 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021848:	4909      	ldr	r1, [pc, #36]	; (8021870 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802184a:	480a      	ldr	r0, [pc, #40]	; (8021874 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802184c:	f006 fb41 	bl	8027ed2 <__aeabi_atexit>
 8021850:	4b05      	ldr	r3, [pc, #20]	; (8021868 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021852:	652b      	str	r3, [r5, #80]	; 0x50
 8021854:	4b07      	ldr	r3, [pc, #28]	; (8021874 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021856:	656b      	str	r3, [r5, #84]	; 0x54
 8021858:	bd38      	pop	{r3, r4, r5, pc}
 802185a:	bf00      	nop
 802185c:	2000bfc8 	.word	0x2000bfc8
 8021860:	20000000 	.word	0x20000000
 8021864:	0802002b 	.word	0x0802002b
 8021868:	20000094 	.word	0x20000094
 802186c:	2000bfcc 	.word	0x2000bfcc
 8021870:	08020029 	.word	0x08020029
 8021874:	20000098 	.word	0x20000098

08021878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021878:	b538      	push	{r3, r4, r5, lr}
 802187a:	4c15      	ldr	r4, [pc, #84]	; (80218d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802187c:	4605      	mov	r5, r0
 802187e:	7823      	ldrb	r3, [r4, #0]
 8021880:	f3bf 8f5b 	dmb	ish
 8021884:	07da      	lsls	r2, r3, #31
 8021886:	d40b      	bmi.n	80218a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021888:	4620      	mov	r0, r4
 802188a:	f006 fb2c 	bl	8027ee6 <__cxa_guard_acquire>
 802188e:	b138      	cbz	r0, 80218a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021890:	4620      	mov	r0, r4
 8021892:	f006 fb34 	bl	8027efe <__cxa_guard_release>
 8021896:	4a0f      	ldr	r2, [pc, #60]	; (80218d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021898:	490f      	ldr	r1, [pc, #60]	; (80218d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802189a:	4810      	ldr	r0, [pc, #64]	; (80218dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802189c:	f006 fb19 	bl	8027ed2 <__aeabi_atexit>
 80218a0:	4c0f      	ldr	r4, [pc, #60]	; (80218e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80218a2:	7823      	ldrb	r3, [r4, #0]
 80218a4:	f3bf 8f5b 	dmb	ish
 80218a8:	07db      	lsls	r3, r3, #31
 80218aa:	d40b      	bmi.n	80218c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80218ac:	4620      	mov	r0, r4
 80218ae:	f006 fb1a 	bl	8027ee6 <__cxa_guard_acquire>
 80218b2:	b138      	cbz	r0, 80218c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80218b4:	4620      	mov	r0, r4
 80218b6:	f006 fb22 	bl	8027efe <__cxa_guard_release>
 80218ba:	4a06      	ldr	r2, [pc, #24]	; (80218d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80218bc:	4909      	ldr	r1, [pc, #36]	; (80218e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80218be:	480a      	ldr	r0, [pc, #40]	; (80218e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80218c0:	f006 fb07 	bl	8027ed2 <__aeabi_atexit>
 80218c4:	4b05      	ldr	r3, [pc, #20]	; (80218dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80218c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80218c8:	4b07      	ldr	r3, [pc, #28]	; (80218e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80218ca:	64eb      	str	r3, [r5, #76]	; 0x4c
 80218cc:	bd38      	pop	{r3, r4, r5, pc}
 80218ce:	bf00      	nop
 80218d0:	2000bfb8 	.word	0x2000bfb8
 80218d4:	20000000 	.word	0x20000000
 80218d8:	0802002f 	.word	0x0802002f
 80218dc:	20000084 	.word	0x20000084
 80218e0:	2000bfbc 	.word	0x2000bfbc
 80218e4:	0802002d 	.word	0x0802002d
 80218e8:	20000088 	.word	0x20000088

080218ec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80218ec:	b510      	push	{r4, lr}
 80218ee:	4604      	mov	r4, r0
 80218f0:	f7ff ff88 	bl	8021804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80218f4:	4620      	mov	r0, r4
 80218f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218fa:	f7ff bfbd 	b.w	8021878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080218fe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80218fe:	b510      	push	{r4, lr}
 8021900:	4604      	mov	r4, r0
 8021902:	f7ff fff3 	bl	80218ec <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8021906:	4620      	mov	r0, r4
 8021908:	f7ff ff72 	bl	80217f0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 802190c:	4620      	mov	r0, r4
 802190e:	f7ff fe73 	bl	80215f8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8021912:	4620      	mov	r0, r4
 8021914:	f7ff fdf2 	bl	80214fc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8021918:	4620      	mov	r0, r4
 802191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802191e:	f7ff bee9 	b.w	80216f4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08021924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8021924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021928:	b087      	sub	sp, #28
 802192a:	7888      	ldrb	r0, [r1, #2]
 802192c:	4616      	mov	r6, r2
 802192e:	9001      	str	r0, [sp, #4]
 8021930:	7848      	ldrb	r0, [r1, #1]
 8021932:	9100      	str	r1, [sp, #0]
 8021934:	9002      	str	r0, [sp, #8]
 8021936:	7808      	ldrb	r0, [r1, #0]
 8021938:	9901      	ldr	r1, [sp, #4]
 802193a:	9003      	str	r0, [sp, #12]
 802193c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021940:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8021944:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8021948:	9902      	ldr	r1, [sp, #8]
 802194a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 802194e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8021952:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8021956:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802195a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802195e:	9005      	str	r0, [sp, #20]
 8021960:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8021964:	fb05 ca0e 	mla	sl, r5, lr, ip
 8021968:	2d00      	cmp	r5, #0
 802196a:	eb06 080a 	add.w	r8, r6, sl
 802196e:	db4a      	blt.n	8021a06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021970:	45a9      	cmp	r9, r5
 8021972:	dd48      	ble.n	8021a06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8021974:	f1bc 0f00 	cmp.w	ip, #0
 8021978:	db43      	blt.n	8021a02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802197a:	45e6      	cmp	lr, ip
 802197c:	dd41      	ble.n	8021a02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802197e:	f816 600a 	ldrb.w	r6, [r6, sl]
 8021982:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021986:	441e      	add	r6, r3
 8021988:	f11c 0001 	adds.w	r0, ip, #1
 802198c:	d43e      	bmi.n	8021a0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802198e:	4586      	cmp	lr, r0
 8021990:	dd3c      	ble.n	8021a0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021992:	2a00      	cmp	r2, #0
 8021994:	d03a      	beq.n	8021a0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8021996:	f898 0001 	ldrb.w	r0, [r8, #1]
 802199a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802199e:	4418      	add	r0, r3
 80219a0:	3501      	adds	r5, #1
 80219a2:	d437      	bmi.n	8021a14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80219a4:	45a9      	cmp	r9, r5
 80219a6:	dd35      	ble.n	8021a14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80219a8:	b3a4      	cbz	r4, 8021a14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80219aa:	f1bc 0f00 	cmp.w	ip, #0
 80219ae:	db2f      	blt.n	8021a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80219b0:	45e6      	cmp	lr, ip
 80219b2:	dd2d      	ble.n	8021a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80219b4:	f818 500e 	ldrb.w	r5, [r8, lr]
 80219b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80219bc:	441d      	add	r5, r3
 80219be:	f11c 0c01 	adds.w	ip, ip, #1
 80219c2:	d42a      	bmi.n	8021a1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80219c4:	45e6      	cmp	lr, ip
 80219c6:	dd28      	ble.n	8021a1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80219c8:	b33a      	cbz	r2, 8021a1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 80219ca:	44c6      	add	lr, r8
 80219cc:	f89e c001 	ldrb.w	ip, [lr, #1]
 80219d0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80219d4:	4463      	add	r3, ip
 80219d6:	ea6f 0c07 	mvn.w	ip, r7
 80219da:	2a0f      	cmp	r2, #15
 80219dc:	f896 a000 	ldrb.w	sl, [r6]
 80219e0:	fa5f fc8c 	uxtb.w	ip, ip
 80219e4:	f890 b000 	ldrb.w	fp, [r0]
 80219e8:	f895 9000 	ldrb.w	r9, [r5]
 80219ec:	7819      	ldrb	r1, [r3, #0]
 80219ee:	d801      	bhi.n	80219f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80219f0:	2c0f      	cmp	r4, #15
 80219f2:	d914      	bls.n	8021a1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80219f4:	4b40      	ldr	r3, [pc, #256]	; (8021af8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80219f6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80219fa:	4a40      	ldr	r2, [pc, #256]	; (8021afc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80219fc:	4840      	ldr	r0, [pc, #256]	; (8021b00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80219fe:	f006 fa9b 	bl	8027f38 <__assert_func>
 8021a02:	ae05      	add	r6, sp, #20
 8021a04:	e7c0      	b.n	8021988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 8021a06:	a805      	add	r0, sp, #20
 8021a08:	4606      	mov	r6, r0
 8021a0a:	e7c9      	b.n	80219a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021a0c:	a805      	add	r0, sp, #20
 8021a0e:	e7c7      	b.n	80219a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8021a10:	ad05      	add	r5, sp, #20
 8021a12:	e7d4      	b.n	80219be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 8021a14:	ab05      	add	r3, sp, #20
 8021a16:	461d      	mov	r5, r3
 8021a18:	e7dd      	b.n	80219d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021a1a:	ab05      	add	r3, sp, #20
 8021a1c:	e7db      	b.n	80219d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8021a1e:	b292      	uxth	r2, r2
 8021a20:	b2a4      	uxth	r4, r4
 8021a22:	fa1f fc8c 	uxth.w	ip, ip
 8021a26:	fb02 f804 	mul.w	r8, r2, r4
 8021a2a:	0112      	lsls	r2, r2, #4
 8021a2c:	b2bf      	uxth	r7, r7
 8021a2e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8021a32:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8021a36:	eba2 0208 	sub.w	r2, r2, r8
 8021a3a:	b2a4      	uxth	r4, r4
 8021a3c:	b292      	uxth	r2, r2
 8021a3e:	ebae 0e04 	sub.w	lr, lr, r4
 8021a42:	fb02 fb0b 	mul.w	fp, r2, fp
 8021a46:	fa1f fe8e 	uxth.w	lr, lr
 8021a4a:	fb0e ba0a 	mla	sl, lr, sl, fp
 8021a4e:	fb04 aa09 	mla	sl, r4, r9, sl
 8021a52:	fb08 aa01 	mla	sl, r8, r1, sl
 8021a56:	9903      	ldr	r1, [sp, #12]
 8021a58:	fb11 f90c 	smulbb	r9, r1, ip
 8021a5c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021a60:	9900      	ldr	r1, [sp, #0]
 8021a62:	fb0a 9a07 	mla	sl, sl, r7, r9
 8021a66:	fa1f fa8a 	uxth.w	sl, sl
 8021a6a:	f10a 0901 	add.w	r9, sl, #1
 8021a6e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8021a72:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a76:	f881 a000 	strb.w	sl, [r1]
 8021a7a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8021a7e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8021a82:	fb02 fa0a 	mul.w	sl, r2, sl
 8021a86:	9902      	ldr	r1, [sp, #8]
 8021a88:	fb0e aa09 	mla	sl, lr, r9, sl
 8021a8c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8021a90:	fb04 aa09 	mla	sl, r4, r9, sl
 8021a94:	f893 9001 	ldrb.w	r9, [r3, #1]
 8021a98:	fb08 a909 	mla	r9, r8, r9, sl
 8021a9c:	fb11 fa0c 	smulbb	sl, r1, ip
 8021aa0:	9900      	ldr	r1, [sp, #0]
 8021aa2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021aa6:	fb09 a907 	mla	r9, r9, r7, sl
 8021aaa:	fa1f f989 	uxth.w	r9, r9
 8021aae:	f109 0a01 	add.w	sl, r9, #1
 8021ab2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021ab6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021aba:	f881 9001 	strb.w	r9, [r1, #1]
 8021abe:	7880      	ldrb	r0, [r0, #2]
 8021ac0:	78b6      	ldrb	r6, [r6, #2]
 8021ac2:	4342      	muls	r2, r0
 8021ac4:	78a8      	ldrb	r0, [r5, #2]
 8021ac6:	789b      	ldrb	r3, [r3, #2]
 8021ac8:	fb0e 2206 	mla	r2, lr, r6, r2
 8021acc:	fb04 2400 	mla	r4, r4, r0, r2
 8021ad0:	fb08 4803 	mla	r8, r8, r3, r4
 8021ad4:	9b01      	ldr	r3, [sp, #4]
 8021ad6:	fb13 fc0c 	smulbb	ip, r3, ip
 8021ada:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021ade:	fb08 c707 	mla	r7, r8, r7, ip
 8021ae2:	b2bf      	uxth	r7, r7
 8021ae4:	f107 0c01 	add.w	ip, r7, #1
 8021ae8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8021aec:	123f      	asrs	r7, r7, #8
 8021aee:	708f      	strb	r7, [r1, #2]
 8021af0:	b007      	add	sp, #28
 8021af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021af6:	bf00      	nop
 8021af8:	0802d0a7 	.word	0x0802d0a7
 8021afc:	0802d59e 	.word	0x0802d59e
 8021b00:	0802d170 	.word	0x0802d170

08021b04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b08:	ed2d 8b08 	vpush	{d8-d11}
 8021b0c:	b095      	sub	sp, #84	; 0x54
 8021b0e:	eeb0 aa40 	vmov.f32	s20, s0
 8021b12:	eef0 9a60 	vmov.f32	s19, s1
 8021b16:	930a      	str	r3, [sp, #40]	; 0x28
 8021b18:	eeb0 9a41 	vmov.f32	s18, s2
 8021b1c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8021b20:	eeb0 8a62 	vmov.f32	s16, s5
 8021b24:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8021b26:	eef0 8a43 	vmov.f32	s17, s6
 8021b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8021b2c:	eef0 ba44 	vmov.f32	s23, s8
 8021b30:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8021b34:	eeb0 ba64 	vmov.f32	s22, s9
 8021b38:	9013      	str	r0, [sp, #76]	; 0x4c
 8021b3a:	eef0 aa45 	vmov.f32	s21, s10
 8021b3e:	9310      	str	r3, [sp, #64]	; 0x40
 8021b40:	6860      	ldr	r0, [r4, #4]
 8021b42:	910f      	str	r1, [sp, #60]	; 0x3c
 8021b44:	9212      	str	r2, [sp, #72]	; 0x48
 8021b46:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021b48:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8021b4c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021b50:	fb00 1303 	mla	r3, r0, r3, r1
 8021b54:	6821      	ldr	r1, [r4, #0]
 8021b56:	6854      	ldr	r4, [r2, #4]
 8021b58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b5c:	18cb      	adds	r3, r1, r3
 8021b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021b60:	6813      	ldr	r3, [r2, #0]
 8021b62:	930e      	str	r3, [sp, #56]	; 0x38
 8021b64:	1d23      	adds	r3, r4, #4
 8021b66:	9309      	str	r3, [sp, #36]	; 0x24
 8021b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b6a:	43db      	mvns	r3, r3
 8021b6c:	b2db      	uxtb	r3, r3
 8021b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8021b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	dc03      	bgt.n	8021b7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021b76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	f340 823c 	ble.w	8021ff6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8021b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	f340 8115 	ble.w	8021db0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8021b86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021b88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021b8a:	1412      	asrs	r2, r2, #16
 8021b8c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021b90:	d431      	bmi.n	8021bf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8021b92:	1c51      	adds	r1, r2, #1
 8021b94:	428d      	cmp	r5, r1
 8021b96:	dd31      	ble.n	8021bfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	db2f      	blt.n	8021bfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021b9c:	1c59      	adds	r1, r3, #1
 8021b9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021ba0:	4288      	cmp	r0, r1
 8021ba2:	dd2b      	ble.n	8021bfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ba6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ba8:	3b01      	subs	r3, #1
 8021baa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8021bac:	fb02 1203 	mla	r2, r2, r3, r1
 8021bb0:	1412      	asrs	r2, r2, #16
 8021bb2:	d42d      	bmi.n	8021c10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021bb4:	3201      	adds	r2, #1
 8021bb6:	4295      	cmp	r5, r2
 8021bb8:	dd2a      	ble.n	8021c10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021bba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021bbc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021bbe:	fb02 1303 	mla	r3, r2, r3, r1
 8021bc2:	141b      	asrs	r3, r3, #16
 8021bc4:	d424      	bmi.n	8021c10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021bc6:	3301      	adds	r3, #1
 8021bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021bca:	429a      	cmp	r2, r3
 8021bcc:	dd20      	ble.n	8021c10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8021bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021bd0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8021bd4:	f103 0c03 	add.w	ip, r3, #3
 8021bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021bda:	9311      	str	r3, [sp, #68]	; 0x44
 8021bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	f300 814f 	bgt.w	8021e82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8021be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021be6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021be8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bf0:	441a      	add	r2, r3
 8021bf2:	920b      	str	r2, [sp, #44]	; 0x2c
 8021bf4:	e0de      	b.n	8021db4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8021bf6:	1c51      	adds	r1, r2, #1
 8021bf8:	f040 80cb 	bne.w	8021d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021bfc:	42aa      	cmp	r2, r5
 8021bfe:	f280 80c8 	bge.w	8021d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021c02:	1c5f      	adds	r7, r3, #1
 8021c04:	f2c0 80c5 	blt.w	8021d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021c0a:	4293      	cmp	r3, r2
 8021c0c:	f280 80c1 	bge.w	8021d92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021c14:	9311      	str	r3, [sp, #68]	; 0x44
 8021c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	dde3      	ble.n	8021be4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021c1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c1e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021c20:	141a      	asrs	r2, r3, #16
 8021c22:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021c24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c26:	1400      	asrs	r0, r0, #16
 8021c28:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8021c2c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021c30:	f100 810e 	bmi.w	8021e50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021c34:	1c46      	adds	r6, r0, #1
 8021c36:	42b5      	cmp	r5, r6
 8021c38:	f340 810c 	ble.w	8021e54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8021c3c:	2a00      	cmp	r2, #0
 8021c3e:	f2c0 8109 	blt.w	8021e54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8021c42:	1c56      	adds	r6, r2, #1
 8021c44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021c46:	42b4      	cmp	r4, r6
 8021c48:	f340 8104 	ble.w	8021e54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8021c4c:	fb02 0005 	mla	r0, r2, r5, r0
 8021c50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c54:	f814 e000 	ldrb.w	lr, [r4, r0]
 8021c58:	4402      	add	r2, r0
 8021c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021c5c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021c60:	eb00 080e 	add.w	r8, r0, lr
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	f000 80e4 	beq.w	8021e32 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 8021c6a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021c6e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021c72:	4484      	add	ip, r0
 8021c74:	2900      	cmp	r1, #0
 8021c76:	f000 80e5 	beq.w	8021e44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 8021c7a:	1950      	adds	r0, r2, r5
 8021c7c:	5d52      	ldrb	r2, [r2, r5]
 8021c7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021c80:	7840      	ldrb	r0, [r0, #1]
 8021c82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c8a:	4422      	add	r2, r4
 8021c8c:	4420      	add	r0, r4
 8021c8e:	b29b      	uxth	r3, r3
 8021c90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021c92:	b289      	uxth	r1, r1
 8021c94:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8021c98:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8021c9c:	fb03 fa01 	mul.w	sl, r3, r1
 8021ca0:	011b      	lsls	r3, r3, #4
 8021ca2:	f89c e000 	ldrb.w	lr, [ip]
 8021ca6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8021caa:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8021cae:	eba3 030a 	sub.w	r3, r3, sl
 8021cb2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021cb4:	b289      	uxth	r1, r1
 8021cb6:	b29b      	uxth	r3, r3
 8021cb8:	eba9 0901 	sub.w	r9, r9, r1
 8021cbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8021cc0:	fa1f f989 	uxth.w	r9, r9
 8021cc4:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021cc8:	f892 b000 	ldrb.w	fp, [r2]
 8021ccc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021cd0:	f890 b000 	ldrb.w	fp, [r0]
 8021cd4:	fb0a ee0b 	mla	lr, sl, fp, lr
 8021cd8:	f897 b000 	ldrb.w	fp, [r7]
 8021cdc:	fb1b fb04 	smulbb	fp, fp, r4
 8021ce0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021ce4:	fb0e be06 	mla	lr, lr, r6, fp
 8021ce8:	fa1f fe8e 	uxth.w	lr, lr
 8021cec:	f10e 0b01 	add.w	fp, lr, #1
 8021cf0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8021cf4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8021cf8:	f887 b000 	strb.w	fp, [r7]
 8021cfc:	f89c e001 	ldrb.w	lr, [ip, #1]
 8021d00:	f898 b001 	ldrb.w	fp, [r8, #1]
 8021d04:	fb03 fe0e 	mul.w	lr, r3, lr
 8021d08:	fb09 ee0b 	mla	lr, r9, fp, lr
 8021d0c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021d10:	fb01 ee0b 	mla	lr, r1, fp, lr
 8021d14:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021d18:	fb0a ee0b 	mla	lr, sl, fp, lr
 8021d1c:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021d20:	fb1b fb04 	smulbb	fp, fp, r4
 8021d24:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8021d28:	fb0e be06 	mla	lr, lr, r6, fp
 8021d2c:	fa1f fe8e 	uxth.w	lr, lr
 8021d30:	f10e 0b01 	add.w	fp, lr, #1
 8021d34:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021d38:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021d3c:	f887 e001 	strb.w	lr, [r7, #1]
 8021d40:	f89c c002 	ldrb.w	ip, [ip, #2]
 8021d44:	f898 e002 	ldrb.w	lr, [r8, #2]
 8021d48:	fb03 f30c 	mul.w	r3, r3, ip
 8021d4c:	fb09 330e 	mla	r3, r9, lr, r3
 8021d50:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021d54:	7882      	ldrb	r2, [r0, #2]
 8021d56:	fb01 310e 	mla	r1, r1, lr, r3
 8021d5a:	fb0a 1a02 	mla	sl, sl, r2, r1
 8021d5e:	78b9      	ldrb	r1, [r7, #2]
 8021d60:	fb11 f104 	smulbb	r1, r1, r4
 8021d64:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8021d68:	fb0a 1606 	mla	r6, sl, r6, r1
 8021d6c:	b2b6      	uxth	r6, r6
 8021d6e:	1c73      	adds	r3, r6, #1
 8021d70:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8021d74:	1236      	asrs	r6, r6, #8
 8021d76:	70be      	strb	r6, [r7, #2]
 8021d78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021d7a:	3703      	adds	r7, #3
 8021d7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021d7e:	4413      	add	r3, r2
 8021d80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021d82:	9327      	str	r3, [sp, #156]	; 0x9c
 8021d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d86:	4413      	add	r3, r2
 8021d88:	9328      	str	r3, [sp, #160]	; 0xa0
 8021d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021d8c:	3b01      	subs	r3, #1
 8021d8e:	9311      	str	r3, [sp, #68]	; 0x44
 8021d90:	e741      	b.n	8021c16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8021d92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021d94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021d96:	4413      	add	r3, r2
 8021d98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021d9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8021d9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d9e:	4413      	add	r3, r2
 8021da0:	9328      	str	r3, [sp, #160]	; 0xa0
 8021da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021da4:	3b01      	subs	r3, #1
 8021da6:	930a      	str	r3, [sp, #40]	; 0x28
 8021da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021daa:	3303      	adds	r3, #3
 8021dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8021dae:	e6e6      	b.n	8021b7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8021db0:	f47f aef8 	bne.w	8021ba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8021db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	f340 811d 	ble.w	8021ff6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8021dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021dc2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021dc6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021dca:	eef0 6a48 	vmov.f32	s13, s16
 8021dce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021dd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021dd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dda:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8021dde:	eef0 6a68 	vmov.f32	s13, s17
 8021de2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021de6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8021dea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021dee:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021df2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021df6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021dfa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021dfe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e02:	ee18 2a10 	vmov	r2, s16
 8021e06:	eeb0 8a47 	vmov.f32	s16, s14
 8021e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e0e:	ee18 2a90 	vmov	r2, s17
 8021e12:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e16:	eef0 8a67 	vmov.f32	s17, s15
 8021e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e1e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e24:	3b01      	subs	r3, #1
 8021e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e2a:	bf08      	it	eq
 8021e2c:	4613      	moveq	r3, r2
 8021e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8021e30:	e69e      	b.n	8021b70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021e32:	b151      	cbz	r1, 8021e4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8021e34:	5d52      	ldrb	r2, [r2, r5]
 8021e36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021e3c:	4402      	add	r2, r0
 8021e3e:	4640      	mov	r0, r8
 8021e40:	46c4      	mov	ip, r8
 8021e42:	e724      	b.n	8021c8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8021e44:	4640      	mov	r0, r8
 8021e46:	4642      	mov	r2, r8
 8021e48:	e721      	b.n	8021c8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8021e4a:	4640      	mov	r0, r8
 8021e4c:	4642      	mov	r2, r8
 8021e4e:	e7f7      	b.n	8021e40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8021e50:	1c46      	adds	r6, r0, #1
 8021e52:	d191      	bne.n	8021d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021e54:	4285      	cmp	r5, r0
 8021e56:	dd8f      	ble.n	8021d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021e58:	1c54      	adds	r4, r2, #1
 8021e5a:	db8d      	blt.n	8021d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021e5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021e5e:	4294      	cmp	r4, r2
 8021e60:	dd8a      	ble.n	8021d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021e62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021e64:	9002      	str	r0, [sp, #8]
 8021e66:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021e68:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8021e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021e70:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021e74:	e9cd 5300 	strd	r5, r3, [sp]
 8021e78:	4639      	mov	r1, r7
 8021e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e7c:	f7ff fd52 	bl	8021924 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8021e80:	e77a      	b.n	8021d78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8021e82:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021e84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021e86:	1410      	asrs	r0, r2, #16
 8021e88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021e8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021e8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021e90:	1412      	asrs	r2, r2, #16
 8021e92:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021e96:	fb05 2000 	mla	r0, r5, r0, r2
 8021e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021e9c:	f814 8000 	ldrb.w	r8, [r4, r0]
 8021ea0:	4402      	add	r2, r0
 8021ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ea4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021ea8:	eb00 0708 	add.w	r7, r0, r8
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	f000 8093 	beq.w	8021fd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8021eb2:	7856      	ldrb	r6, [r2, #1]
 8021eb4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021eb8:	4406      	add	r6, r0
 8021eba:	2900      	cmp	r1, #0
 8021ebc:	f000 8095 	beq.w	8021fea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8021ec0:	1950      	adds	r0, r2, r5
 8021ec2:	5d52      	ldrb	r2, [r2, r5]
 8021ec4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ec6:	7840      	ldrb	r0, [r0, #1]
 8021ec8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ecc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021ed0:	4422      	add	r2, r4
 8021ed2:	4420      	add	r0, r4
 8021ed4:	b29b      	uxth	r3, r3
 8021ed6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021ed8:	b289      	uxth	r1, r1
 8021eda:	f10c 0c03 	add.w	ip, ip, #3
 8021ede:	f814 b008 	ldrb.w	fp, [r4, r8]
 8021ee2:	fb03 f901 	mul.w	r9, r3, r1
 8021ee6:	011b      	lsls	r3, r3, #4
 8021ee8:	f896 8000 	ldrb.w	r8, [r6]
 8021eec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021ef0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021ef4:	eba3 0309 	sub.w	r3, r3, r9
 8021ef8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021efa:	b289      	uxth	r1, r1
 8021efc:	b29b      	uxth	r3, r3
 8021efe:	ebae 0e01 	sub.w	lr, lr, r1
 8021f02:	fb03 f808 	mul.w	r8, r3, r8
 8021f06:	fa1f fe8e 	uxth.w	lr, lr
 8021f0a:	fb0e 880b 	mla	r8, lr, fp, r8
 8021f0e:	f892 b000 	ldrb.w	fp, [r2]
 8021f12:	fb01 880b 	mla	r8, r1, fp, r8
 8021f16:	f890 b000 	ldrb.w	fp, [r0]
 8021f1a:	fb09 880b 	mla	r8, r9, fp, r8
 8021f1e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 8021f22:	fb1b fb04 	smulbb	fp, fp, r4
 8021f26:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021f2a:	fb08 b80a 	mla	r8, r8, sl, fp
 8021f2e:	fa1f f888 	uxth.w	r8, r8
 8021f32:	f108 0b01 	add.w	fp, r8, #1
 8021f36:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021f3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021f3e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8021f42:	f896 8001 	ldrb.w	r8, [r6, #1]
 8021f46:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021f4a:	fb03 f808 	mul.w	r8, r3, r8
 8021f4e:	fb0e 880b 	mla	r8, lr, fp, r8
 8021f52:	f892 b001 	ldrb.w	fp, [r2, #1]
 8021f56:	fb01 880b 	mla	r8, r1, fp, r8
 8021f5a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8021f5e:	fb09 880b 	mla	r8, r9, fp, r8
 8021f62:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8021f66:	fb1b fb04 	smulbb	fp, fp, r4
 8021f6a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8021f6e:	fb08 b80a 	mla	r8, r8, sl, fp
 8021f72:	fa1f f888 	uxth.w	r8, r8
 8021f76:	f108 0b01 	add.w	fp, r8, #1
 8021f7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021f7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021f82:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8021f86:	78b6      	ldrb	r6, [r6, #2]
 8021f88:	78bf      	ldrb	r7, [r7, #2]
 8021f8a:	4373      	muls	r3, r6
 8021f8c:	7896      	ldrb	r6, [r2, #2]
 8021f8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021f90:	fb0e 3307 	mla	r3, lr, r7, r3
 8021f94:	fb01 3306 	mla	r3, r1, r6, r3
 8021f98:	7886      	ldrb	r6, [r0, #2]
 8021f9a:	fb09 3906 	mla	r9, r9, r6, r3
 8021f9e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8021fa2:	fb13 f304 	smulbb	r3, r3, r4
 8021fa6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021faa:	fb09 390a 	mla	r9, r9, sl, r3
 8021fae:	fa1f f989 	uxth.w	r9, r9
 8021fb2:	f109 0301 	add.w	r3, r9, #1
 8021fb6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021fba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021fbc:	4413      	add	r3, r2
 8021fbe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021fc0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fc4:	9327      	str	r3, [sp, #156]	; 0x9c
 8021fc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021fc8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8021fcc:	4413      	add	r3, r2
 8021fce:	9328      	str	r3, [sp, #160]	; 0xa0
 8021fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fd2:	3b01      	subs	r3, #1
 8021fd4:	9311      	str	r3, [sp, #68]	; 0x44
 8021fd6:	e601      	b.n	8021bdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021fd8:	b151      	cbz	r1, 8021ff0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8021fda:	5d52      	ldrb	r2, [r2, r5]
 8021fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021fde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021fe2:	4402      	add	r2, r0
 8021fe4:	4638      	mov	r0, r7
 8021fe6:	463e      	mov	r6, r7
 8021fe8:	e774      	b.n	8021ed4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8021fea:	4638      	mov	r0, r7
 8021fec:	463a      	mov	r2, r7
 8021fee:	e771      	b.n	8021ed4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8021ff0:	4638      	mov	r0, r7
 8021ff2:	463a      	mov	r2, r7
 8021ff4:	e7f7      	b.n	8021fe6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8021ff6:	b015      	add	sp, #84	; 0x54
 8021ff8:	ecbd 8b08 	vpop	{d8-d11}
 8021ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8022000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022004:	780d      	ldrb	r5, [r1, #0]
 8022006:	f891 9002 	ldrb.w	r9, [r1, #2]
 802200a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 802200e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8022012:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8022016:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 802201a:	f891 9001 	ldrb.w	r9, [r1, #1]
 802201e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8022022:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8022026:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802202a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 802202e:	9501      	str	r5, [sp, #4]
 8022030:	fb06 470c 	mla	r7, r6, ip, r4
 8022034:	2e00      	cmp	r6, #0
 8022036:	eb02 0e07 	add.w	lr, r2, r7
 802203a:	db46      	blt.n	80220ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 802203c:	45b0      	cmp	r8, r6
 802203e:	dd44      	ble.n	80220ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8022040:	2c00      	cmp	r4, #0
 8022042:	db40      	blt.n	80220c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8022044:	45a4      	cmp	ip, r4
 8022046:	dd3e      	ble.n	80220c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8022048:	5dd7      	ldrb	r7, [r2, r7]
 802204a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802204e:	441f      	add	r7, r3
 8022050:	1c62      	adds	r2, r4, #1
 8022052:	d43d      	bmi.n	80220d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022054:	4594      	cmp	ip, r2
 8022056:	dd3b      	ble.n	80220d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8022058:	f1ba 0f00 	cmp.w	sl, #0
 802205c:	d038      	beq.n	80220d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802205e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8022062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022066:	441d      	add	r5, r3
 8022068:	3601      	adds	r6, #1
 802206a:	d435      	bmi.n	80220d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 802206c:	45b0      	cmp	r8, r6
 802206e:	dd33      	ble.n	80220d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8022070:	b390      	cbz	r0, 80220d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8022072:	2c00      	cmp	r4, #0
 8022074:	db2e      	blt.n	80220d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8022076:	45a4      	cmp	ip, r4
 8022078:	dd2c      	ble.n	80220d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 802207a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 802207e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022082:	441e      	add	r6, r3
 8022084:	1c62      	adds	r2, r4, #1
 8022086:	d42a      	bmi.n	80220de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022088:	4594      	cmp	ip, r2
 802208a:	dd28      	ble.n	80220de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 802208c:	f1ba 0f00 	cmp.w	sl, #0
 8022090:	d025      	beq.n	80220de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8022092:	44f4      	add	ip, lr
 8022094:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802209c:	4413      	add	r3, r2
 802209e:	f1ba 0f0f 	cmp.w	sl, #15
 80220a2:	f897 8000 	ldrb.w	r8, [r7]
 80220a6:	f895 9000 	ldrb.w	r9, [r5]
 80220aa:	f896 e000 	ldrb.w	lr, [r6]
 80220ae:	f893 c000 	ldrb.w	ip, [r3]
 80220b2:	d801      	bhi.n	80220b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 80220b4:	280f      	cmp	r0, #15
 80220b6:	d914      	bls.n	80220e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 80220b8:	4b29      	ldr	r3, [pc, #164]	; (8022160 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 80220ba:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80220be:	4a29      	ldr	r2, [pc, #164]	; (8022164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 80220c0:	4829      	ldr	r0, [pc, #164]	; (8022168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 80220c2:	f005 ff39 	bl	8027f38 <__assert_func>
 80220c6:	af01      	add	r7, sp, #4
 80220c8:	e7c2      	b.n	8022050 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80220ca:	ad01      	add	r5, sp, #4
 80220cc:	462f      	mov	r7, r5
 80220ce:	e7cb      	b.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80220d0:	ad01      	add	r5, sp, #4
 80220d2:	e7c9      	b.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80220d4:	ae01      	add	r6, sp, #4
 80220d6:	e7d5      	b.n	8022084 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 80220d8:	ab01      	add	r3, sp, #4
 80220da:	461e      	mov	r6, r3
 80220dc:	e7df      	b.n	802209e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80220de:	ab01      	add	r3, sp, #4
 80220e0:	e7dd      	b.n	802209e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 80220e2:	fa1f f48a 	uxth.w	r4, sl
 80220e6:	b280      	uxth	r0, r0
 80220e8:	fb04 fa00 	mul.w	sl, r4, r0
 80220ec:	0124      	lsls	r4, r4, #4
 80220ee:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80220f2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80220f6:	b282      	uxth	r2, r0
 80220f8:	eba4 000a 	sub.w	r0, r4, sl
 80220fc:	ebab 0b02 	sub.w	fp, fp, r2
 8022100:	b280      	uxth	r0, r0
 8022102:	fa1f fb8b 	uxth.w	fp, fp
 8022106:	fb00 f909 	mul.w	r9, r0, r9
 802210a:	fb0b 9808 	mla	r8, fp, r8, r9
 802210e:	fb02 8e0e 	mla	lr, r2, lr, r8
 8022112:	fb0a ec0c 	mla	ip, sl, ip, lr
 8022116:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802211a:	f881 c000 	strb.w	ip, [r1]
 802211e:	786c      	ldrb	r4, [r5, #1]
 8022120:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022124:	4344      	muls	r4, r0
 8022126:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802212a:	7874      	ldrb	r4, [r6, #1]
 802212c:	fb02 cc04 	mla	ip, r2, r4, ip
 8022130:	785c      	ldrb	r4, [r3, #1]
 8022132:	fb0a c404 	mla	r4, sl, r4, ip
 8022136:	1224      	asrs	r4, r4, #8
 8022138:	704c      	strb	r4, [r1, #1]
 802213a:	78ad      	ldrb	r5, [r5, #2]
 802213c:	78bc      	ldrb	r4, [r7, #2]
 802213e:	4368      	muls	r0, r5
 8022140:	fb0b 0b04 	mla	fp, fp, r4, r0
 8022144:	78b0      	ldrb	r0, [r6, #2]
 8022146:	fb02 b000 	mla	r0, r2, r0, fp
 802214a:	789a      	ldrb	r2, [r3, #2]
 802214c:	fb0a 0a02 	mla	sl, sl, r2, r0
 8022150:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022154:	f881 a002 	strb.w	sl, [r1, #2]
 8022158:	b003      	add	sp, #12
 802215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802215e:	bf00      	nop
 8022160:	0802d0a7 	.word	0x0802d0a7
 8022164:	0802d59e 	.word	0x0802d59e
 8022168:	0802d170 	.word	0x0802d170

0802216c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022170:	ed2d 8b0a 	vpush	{d8-d12}
 8022174:	b08f      	sub	sp, #60	; 0x3c
 8022176:	eeb0 aa40 	vmov.f32	s20, s0
 802217a:	eef0 9a60 	vmov.f32	s19, s1
 802217e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8022180:	eeb0 9a41 	vmov.f32	s18, s2
 8022184:	9307      	str	r3, [sp, #28]
 8022186:	eeb0 8a62 	vmov.f32	s16, s5
 802218a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 802218e:	eef0 8a43 	vmov.f32	s17, s6
 8022192:	900d      	str	r0, [sp, #52]	; 0x34
 8022194:	eeb0 ca44 	vmov.f32	s24, s8
 8022198:	6860      	ldr	r0, [r4, #4]
 802219a:	eef0 ba64 	vmov.f32	s23, s9
 802219e:	9309      	str	r3, [sp, #36]	; 0x24
 80221a0:	eeb0 ba45 	vmov.f32	s22, s10
 80221a4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80221a8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80221ac:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80221b0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80221b4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80221b6:	fb00 1303 	mla	r3, r0, r3, r1
 80221ba:	6821      	ldr	r1, [r4, #0]
 80221bc:	6854      	ldr	r4, [r2, #4]
 80221be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221c2:	3404      	adds	r4, #4
 80221c4:	18cb      	adds	r3, r1, r3
 80221c6:	9308      	str	r3, [sp, #32]
 80221c8:	6813      	ldr	r3, [r2, #0]
 80221ca:	930a      	str	r3, [sp, #40]	; 0x28
 80221cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	dc03      	bgt.n	80221da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80221d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	f340 81d2 	ble.w	802257e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80221da:	9b07      	ldr	r3, [sp, #28]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	f340 80e3 	ble.w	80223a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 80221e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80221e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80221e6:	1412      	asrs	r2, r2, #16
 80221e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80221ec:	d42f      	bmi.n	802224e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80221ee:	1c51      	adds	r1, r2, #1
 80221f0:	428d      	cmp	r5, r1
 80221f2:	dd2f      	ble.n	8022254 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	db2d      	blt.n	8022254 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 80221f8:	1c59      	adds	r1, r3, #1
 80221fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80221fc:	4288      	cmp	r0, r1
 80221fe:	dd29      	ble.n	8022254 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8022200:	9b07      	ldr	r3, [sp, #28]
 8022202:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022204:	3b01      	subs	r3, #1
 8022206:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022208:	fb02 1203 	mla	r2, r2, r3, r1
 802220c:	1412      	asrs	r2, r2, #16
 802220e:	d42b      	bmi.n	8022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022210:	3201      	adds	r2, #1
 8022212:	4295      	cmp	r5, r2
 8022214:	dd28      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022216:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022218:	9924      	ldr	r1, [sp, #144]	; 0x90
 802221a:	fb02 1303 	mla	r3, r2, r3, r1
 802221e:	141b      	asrs	r3, r3, #16
 8022220:	d422      	bmi.n	8022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022222:	3301      	adds	r3, #1
 8022224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022226:	429a      	cmp	r2, r3
 8022228:	dd1e      	ble.n	8022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802222a:	9b08      	ldr	r3, [sp, #32]
 802222c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8022230:	f103 0803 	add.w	r8, r3, #3
 8022234:	f1ba 0f00 	cmp.w	sl, #0
 8022238:	f300 8119 	bgt.w	802246e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 802223c:	9b07      	ldr	r3, [sp, #28]
 802223e:	9a08      	ldr	r2, [sp, #32]
 8022240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022244:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022248:	441a      	add	r2, r3
 802224a:	9208      	str	r2, [sp, #32]
 802224c:	e0ae      	b.n	80223ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 802224e:	1c51      	adds	r1, r2, #1
 8022250:	f040 809b 	bne.w	802238a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022254:	42aa      	cmp	r2, r5
 8022256:	f280 8098 	bge.w	802238a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 802225a:	1c5a      	adds	r2, r3, #1
 802225c:	f2c0 8095 	blt.w	802238a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022262:	4293      	cmp	r3, r2
 8022264:	f280 8091 	bge.w	802238a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8022268:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 802226c:	f1bb 0f00 	cmp.w	fp, #0
 8022270:	dde4      	ble.n	802223c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8022272:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022274:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022276:	141a      	asrs	r2, r3, #16
 8022278:	9924      	ldr	r1, [sp, #144]	; 0x90
 802227a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802227c:	1400      	asrs	r0, r0, #16
 802227e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8022282:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022286:	f100 80dc 	bmi.w	8022442 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 802228a:	1c47      	adds	r7, r0, #1
 802228c:	42bd      	cmp	r5, r7
 802228e:	f340 80da 	ble.w	8022446 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022292:	2a00      	cmp	r2, #0
 8022294:	f2c0 80d7 	blt.w	8022446 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8022298:	f102 0c01 	add.w	ip, r2, #1
 802229c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802229e:	4567      	cmp	r7, ip
 80222a0:	f340 80d1 	ble.w	8022446 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 80222a4:	fb02 0005 	mla	r0, r2, r5, r0
 80222a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80222aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80222ac:	f817 8000 	ldrb.w	r8, [r7, r0]
 80222b0:	4402      	add	r2, r0
 80222b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80222b6:	eb04 0c08 	add.w	ip, r4, r8
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	f000 80b3 	beq.w	8022426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 80222c0:	7857      	ldrb	r7, [r2, #1]
 80222c2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80222c6:	4427      	add	r7, r4
 80222c8:	2900      	cmp	r1, #0
 80222ca:	f000 80b4 	beq.w	8022436 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 80222ce:	1950      	adds	r0, r2, r5
 80222d0:	5d52      	ldrb	r2, [r2, r5]
 80222d2:	7840      	ldrb	r0, [r0, #1]
 80222d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80222dc:	4422      	add	r2, r4
 80222de:	4420      	add	r0, r4
 80222e0:	b29b      	uxth	r3, r3
 80222e2:	f814 a008 	ldrb.w	sl, [r4, r8]
 80222e6:	b289      	uxth	r1, r1
 80222e8:	f897 8000 	ldrb.w	r8, [r7]
 80222ec:	fb03 f901 	mul.w	r9, r3, r1
 80222f0:	011b      	lsls	r3, r3, #4
 80222f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80222f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80222fa:	eba3 0309 	sub.w	r3, r3, r9
 80222fe:	b289      	uxth	r1, r1
 8022300:	b29b      	uxth	r3, r3
 8022302:	ebae 0e01 	sub.w	lr, lr, r1
 8022306:	fb03 f808 	mul.w	r8, r3, r8
 802230a:	fa1f fe8e 	uxth.w	lr, lr
 802230e:	fb0e 880a 	mla	r8, lr, sl, r8
 8022312:	f892 a000 	ldrb.w	sl, [r2]
 8022316:	fb01 880a 	mla	r8, r1, sl, r8
 802231a:	f890 a000 	ldrb.w	sl, [r0]
 802231e:	fb09 880a 	mla	r8, r9, sl, r8
 8022322:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022326:	f886 8000 	strb.w	r8, [r6]
 802232a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802232e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8022332:	fb03 f808 	mul.w	r8, r3, r8
 8022336:	fb0e 880a 	mla	r8, lr, sl, r8
 802233a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802233e:	fb01 880a 	mla	r8, r1, sl, r8
 8022342:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022346:	fb09 880a 	mla	r8, r9, sl, r8
 802234a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802234e:	f886 8001 	strb.w	r8, [r6, #1]
 8022352:	78bf      	ldrb	r7, [r7, #2]
 8022354:	f89c c002 	ldrb.w	ip, [ip, #2]
 8022358:	437b      	muls	r3, r7
 802235a:	7892      	ldrb	r2, [r2, #2]
 802235c:	fb0e 330c 	mla	r3, lr, ip, r3
 8022360:	fb01 3102 	mla	r1, r1, r2, r3
 8022364:	7882      	ldrb	r2, [r0, #2]
 8022366:	fb09 1902 	mla	r9, r9, r2, r1
 802236a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802236e:	f886 9002 	strb.w	r9, [r6, #2]
 8022372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022374:	3603      	adds	r6, #3
 8022376:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022378:	f10b 3bff 	add.w	fp, fp, #4294967295
 802237c:	4413      	add	r3, r2
 802237e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022380:	9323      	str	r3, [sp, #140]	; 0x8c
 8022382:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022384:	4413      	add	r3, r2
 8022386:	9324      	str	r3, [sp, #144]	; 0x90
 8022388:	e770      	b.n	802226c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802238a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802238c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802238e:	4413      	add	r3, r2
 8022390:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022392:	9323      	str	r3, [sp, #140]	; 0x8c
 8022394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022396:	4413      	add	r3, r2
 8022398:	9324      	str	r3, [sp, #144]	; 0x90
 802239a:	9b07      	ldr	r3, [sp, #28]
 802239c:	3b01      	subs	r3, #1
 802239e:	9307      	str	r3, [sp, #28]
 80223a0:	9b08      	ldr	r3, [sp, #32]
 80223a2:	3303      	adds	r3, #3
 80223a4:	9308      	str	r3, [sp, #32]
 80223a6:	e718      	b.n	80221da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80223a8:	f47f af2a 	bne.w	8022200 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80223ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	f340 80e5 	ble.w	802257e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 80223b4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80223b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80223ba:	ee79 9aab 	vadd.f32	s19, s19, s23
 80223be:	eef0 6a48 	vmov.f32	s13, s16
 80223c2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80223c6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80223ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80223d2:	eef0 6a68 	vmov.f32	s13, s17
 80223d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80223da:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 80223de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80223e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80223e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80223ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80223ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80223f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80223f6:	ee18 2a10 	vmov	r2, s16
 80223fa:	eeb0 8a47 	vmov.f32	s16, s14
 80223fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8022402:	ee18 2a90 	vmov	r2, s17
 8022406:	9325      	str	r3, [sp, #148]	; 0x94
 8022408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802240a:	eef0 8a67 	vmov.f32	s17, s15
 802240e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022412:	9326      	str	r3, [sp, #152]	; 0x98
 8022414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022418:	3b01      	subs	r3, #1
 802241a:	930b      	str	r3, [sp, #44]	; 0x2c
 802241c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802241e:	bf08      	it	eq
 8022420:	4613      	moveq	r3, r2
 8022422:	9307      	str	r3, [sp, #28]
 8022424:	e6d2      	b.n	80221cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8022426:	b149      	cbz	r1, 802243c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022428:	5d52      	ldrb	r2, [r2, r5]
 802242a:	4660      	mov	r0, ip
 802242c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022430:	4422      	add	r2, r4
 8022432:	4667      	mov	r7, ip
 8022434:	e754      	b.n	80222e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8022436:	4660      	mov	r0, ip
 8022438:	4662      	mov	r2, ip
 802243a:	e751      	b.n	80222e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802243c:	4660      	mov	r0, ip
 802243e:	4662      	mov	r2, ip
 8022440:	e7f7      	b.n	8022432 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8022442:	1c47      	adds	r7, r0, #1
 8022444:	d195      	bne.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022446:	4285      	cmp	r5, r0
 8022448:	dd93      	ble.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802244a:	1c57      	adds	r7, r2, #1
 802244c:	db91      	blt.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802244e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022450:	4297      	cmp	r7, r2
 8022452:	dd8e      	ble.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022454:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022458:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802245c:	e9cd 5700 	strd	r5, r7, [sp]
 8022460:	4623      	mov	r3, r4
 8022462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022464:	4631      	mov	r1, r6
 8022466:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022468:	f7ff fdca 	bl	8022000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 802246c:	e781      	b.n	8022372 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802246e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022470:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022472:	1410      	asrs	r0, r2, #16
 8022474:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022478:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802247a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802247c:	1412      	asrs	r2, r2, #16
 802247e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022482:	fb05 2000 	mla	r0, r5, r0, r2
 8022486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022488:	f816 e000 	ldrb.w	lr, [r6, r0]
 802248c:	4402      	add	r2, r0
 802248e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022492:	eb04 070e 	add.w	r7, r4, lr
 8022496:	2b00      	cmp	r3, #0
 8022498:	d063      	beq.n	8022562 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 802249a:	7856      	ldrb	r6, [r2, #1]
 802249c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80224a0:	4426      	add	r6, r4
 80224a2:	2900      	cmp	r1, #0
 80224a4:	d065      	beq.n	8022572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 80224a6:	1950      	adds	r0, r2, r5
 80224a8:	5d52      	ldrb	r2, [r2, r5]
 80224aa:	7840      	ldrb	r0, [r0, #1]
 80224ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80224b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80224b4:	4422      	add	r2, r4
 80224b6:	4420      	add	r0, r4
 80224b8:	b29b      	uxth	r3, r3
 80224ba:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80224be:	b289      	uxth	r1, r1
 80224c0:	f896 e000 	ldrb.w	lr, [r6]
 80224c4:	f108 0803 	add.w	r8, r8, #3
 80224c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80224cc:	fb03 f901 	mul.w	r9, r3, r1
 80224d0:	011b      	lsls	r3, r3, #4
 80224d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80224d6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80224da:	eba3 0309 	sub.w	r3, r3, r9
 80224de:	b289      	uxth	r1, r1
 80224e0:	b29b      	uxth	r3, r3
 80224e2:	ebac 0c01 	sub.w	ip, ip, r1
 80224e6:	fb03 fe0e 	mul.w	lr, r3, lr
 80224ea:	fa1f fc8c 	uxth.w	ip, ip
 80224ee:	fb0c ee0b 	mla	lr, ip, fp, lr
 80224f2:	f892 b000 	ldrb.w	fp, [r2]
 80224f6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80224fa:	f890 b000 	ldrb.w	fp, [r0]
 80224fe:	fb09 ee0b 	mla	lr, r9, fp, lr
 8022502:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022506:	f808 ec06 	strb.w	lr, [r8, #-6]
 802250a:	f896 e001 	ldrb.w	lr, [r6, #1]
 802250e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8022512:	fb03 fe0e 	mul.w	lr, r3, lr
 8022516:	fb0c ee0b 	mla	lr, ip, fp, lr
 802251a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802251e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8022522:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022526:	fb09 ee0b 	mla	lr, r9, fp, lr
 802252a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802252e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8022532:	78b6      	ldrb	r6, [r6, #2]
 8022534:	78bf      	ldrb	r7, [r7, #2]
 8022536:	4373      	muls	r3, r6
 8022538:	7896      	ldrb	r6, [r2, #2]
 802253a:	7882      	ldrb	r2, [r0, #2]
 802253c:	fb0c 3307 	mla	r3, ip, r7, r3
 8022540:	fb01 3306 	mla	r3, r1, r6, r3
 8022544:	fb09 3902 	mla	r9, r9, r2, r3
 8022548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802254a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802254c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022550:	4413      	add	r3, r2
 8022552:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022554:	f808 9c04 	strb.w	r9, [r8, #-4]
 8022558:	9323      	str	r3, [sp, #140]	; 0x8c
 802255a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802255c:	4413      	add	r3, r2
 802255e:	9324      	str	r3, [sp, #144]	; 0x90
 8022560:	e668      	b.n	8022234 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8022562:	b149      	cbz	r1, 8022578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8022564:	5d52      	ldrb	r2, [r2, r5]
 8022566:	4638      	mov	r0, r7
 8022568:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802256c:	4422      	add	r2, r4
 802256e:	463e      	mov	r6, r7
 8022570:	e7a2      	b.n	80224b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022572:	4638      	mov	r0, r7
 8022574:	463a      	mov	r2, r7
 8022576:	e79f      	b.n	80224b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8022578:	4638      	mov	r0, r7
 802257a:	463a      	mov	r2, r7
 802257c:	e7f7      	b.n	802256e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802257e:	b00f      	add	sp, #60	; 0x3c
 8022580:	ecbd 8b0a 	vpop	{d8-d12}
 8022584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022588 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8022588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802258c:	b087      	sub	sp, #28
 802258e:	7888      	ldrb	r0, [r1, #2]
 8022590:	9002      	str	r0, [sp, #8]
 8022592:	7848      	ldrb	r0, [r1, #1]
 8022594:	9e02      	ldr	r6, [sp, #8]
 8022596:	9003      	str	r0, [sp, #12]
 8022598:	7808      	ldrb	r0, [r1, #0]
 802259a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802259e:	9004      	str	r0, [sp, #16]
 80225a0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80225a4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80225a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80225ac:	9e03      	ldr	r6, [sp, #12]
 80225ae:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 80225b2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80225b6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80225ba:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 80225be:	fb04 7508 	mla	r5, r4, r8, r7
 80225c2:	2c00      	cmp	r4, #0
 80225c4:	eb02 0905 	add.w	r9, r2, r5
 80225c8:	db45      	blt.n	8022656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80225ca:	45a2      	cmp	sl, r4
 80225cc:	dd43      	ble.n	8022656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 80225ce:	2f00      	cmp	r7, #0
 80225d0:	db3f      	blt.n	8022652 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80225d2:	45b8      	cmp	r8, r7
 80225d4:	dd3d      	ble.n	8022652 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80225d6:	5d52      	ldrb	r2, [r2, r5]
 80225d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80225dc:	1c7a      	adds	r2, r7, #1
 80225de:	d43d      	bmi.n	802265c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80225e0:	4590      	cmp	r8, r2
 80225e2:	dd3b      	ble.n	802265c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80225e4:	f1bc 0f00 	cmp.w	ip, #0
 80225e8:	d038      	beq.n	802265c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80225ea:	f899 2001 	ldrb.w	r2, [r9, #1]
 80225ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80225f2:	3401      	adds	r4, #1
 80225f4:	d436      	bmi.n	8022664 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80225f6:	45a2      	cmp	sl, r4
 80225f8:	dd34      	ble.n	8022664 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80225fa:	f1be 0f00 	cmp.w	lr, #0
 80225fe:	d031      	beq.n	8022664 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8022600:	2f00      	cmp	r7, #0
 8022602:	db2d      	blt.n	8022660 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022604:	45b8      	cmp	r8, r7
 8022606:	dd2b      	ble.n	8022660 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8022608:	f819 2008 	ldrb.w	r2, [r9, r8]
 802260c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022610:	3701      	adds	r7, #1
 8022612:	d409      	bmi.n	8022628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022614:	45b8      	cmp	r8, r7
 8022616:	dd07      	ble.n	8022628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022618:	f1bc 0f00 	cmp.w	ip, #0
 802261c:	d004      	beq.n	8022628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 802261e:	44c8      	add	r8, r9
 8022620:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022624:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022628:	f1bc 0f0f 	cmp.w	ip, #15
 802262c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8022630:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8022634:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022638:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802263c:	d802      	bhi.n	8022644 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 802263e:	f1be 0f0f 	cmp.w	lr, #15
 8022642:	d911      	bls.n	8022668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8022644:	4b77      	ldr	r3, [pc, #476]	; (8022824 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8022646:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802264a:	4a77      	ldr	r2, [pc, #476]	; (8022828 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 802264c:	4877      	ldr	r0, [pc, #476]	; (802282c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 802264e:	f005 fc73 	bl	8027f38 <__assert_func>
 8022652:	4606      	mov	r6, r0
 8022654:	e7c2      	b.n	80225dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8022656:	4605      	mov	r5, r0
 8022658:	4606      	mov	r6, r0
 802265a:	e7ca      	b.n	80225f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 802265c:	4605      	mov	r5, r0
 802265e:	e7c8      	b.n	80225f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8022660:	4604      	mov	r4, r0
 8022662:	e7d5      	b.n	8022610 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8022664:	4604      	mov	r4, r0
 8022666:	e7df      	b.n	8022628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8022668:	fa1f fc8c 	uxth.w	ip, ip
 802266c:	fa1f f28e 	uxth.w	r2, lr
 8022670:	fb02 fe0c 	mul.w	lr, r2, ip
 8022674:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022678:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 802267c:	ebac 070e 	sub.w	r7, ip, lr
 8022680:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022684:	b292      	uxth	r2, r2
 8022686:	b2bf      	uxth	r7, r7
 8022688:	1a9b      	subs	r3, r3, r2
 802268a:	fb07 fc0a 	mul.w	ip, r7, sl
 802268e:	b29b      	uxth	r3, r3
 8022690:	fb03 cc0b 	mla	ip, r3, fp, ip
 8022694:	9301      	str	r3, [sp, #4]
 8022696:	fb02 cc09 	mla	ip, r2, r9, ip
 802269a:	fb0e cc08 	mla	ip, lr, r8, ip
 802269e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80226a2:	9305      	str	r3, [sp, #20]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	f000 80b9 	beq.w	802281c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 80226aa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80226ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80226b2:	fb0b fc0c 	mul.w	ip, fp, ip
 80226b6:	fb0b f606 	mul.w	r6, fp, r6
 80226ba:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80226be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80226c2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80226c6:	44dc      	add	ip, fp
 80226c8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80226cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80226d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226d4:	fb0a fb0b 	mul.w	fp, sl, fp
 80226d8:	fb0a fa05 	mul.w	sl, sl, r5
 80226dc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80226e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80226e4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 80226e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80226ec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80226f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80226f4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 80226f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226fc:	0a36      	lsrs	r6, r6, #8
 80226fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022702:	44dc      	add	ip, fp
 8022704:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022708:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802270c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022710:	fb09 fb0b 	mul.w	fp, r9, fp
 8022714:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022718:	fb09 f904 	mul.w	r9, r9, r4
 802271c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022720:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8022724:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022728:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802272c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022730:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022734:	fb0c fc07 	mul.w	ip, ip, r7
 8022738:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802273c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8022740:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022744:	445d      	add	r5, fp
 8022746:	fb08 f404 	mul.w	r4, r8, r4
 802274a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802274e:	fb08 f800 	mul.w	r8, r8, r0
 8022752:	0a2d      	lsrs	r5, r5, #8
 8022754:	0a20      	lsrs	r0, r4, #8
 8022756:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802275a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802275e:	fb07 f70a 	mul.w	r7, r7, sl
 8022762:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022766:	4404      	add	r4, r0
 8022768:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802276c:	0a24      	lsrs	r4, r4, #8
 802276e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8022772:	9801      	ldr	r0, [sp, #4]
 8022774:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022778:	fb03 cc00 	mla	ip, r3, r0, ip
 802277c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022780:	fb00 7606 	mla	r6, r0, r6, r7
 8022784:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8022788:	fb04 cc0e 	mla	ip, r4, lr, ip
 802278c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022790:	b280      	uxth	r0, r0
 8022792:	9c04      	ldr	r4, [sp, #16]
 8022794:	fb05 cc02 	mla	ip, r5, r2, ip
 8022798:	fb0e 6e08 	mla	lr, lr, r8, r6
 802279c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227a0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80227a4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 80227a8:	fb02 ec0c 	mla	ip, r2, ip, lr
 80227ac:	9a05      	ldr	r2, [sp, #20]
 80227ae:	4342      	muls	r2, r0
 80227b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227b4:	1c53      	adds	r3, r2, #1
 80227b6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80227ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80227be:	ea45 0c0c 	orr.w	ip, r5, ip
 80227c2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80227c6:	fa5f f28c 	uxtb.w	r2, ip
 80227ca:	b2db      	uxtb	r3, r3
 80227cc:	fb14 f403 	smulbb	r4, r4, r3
 80227d0:	fb02 4200 	mla	r2, r2, r0, r4
 80227d4:	b292      	uxth	r2, r2
 80227d6:	1c54      	adds	r4, r2, #1
 80227d8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80227dc:	9c03      	ldr	r4, [sp, #12]
 80227de:	fb14 f403 	smulbb	r4, r4, r3
 80227e2:	1212      	asrs	r2, r2, #8
 80227e4:	700a      	strb	r2, [r1, #0]
 80227e6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80227ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80227ee:	fb02 4200 	mla	r2, r2, r0, r4
 80227f2:	b292      	uxth	r2, r2
 80227f4:	1c54      	adds	r4, r2, #1
 80227f6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80227fa:	1212      	asrs	r2, r2, #8
 80227fc:	704a      	strb	r2, [r1, #1]
 80227fe:	9a02      	ldr	r2, [sp, #8]
 8022800:	fb12 f303 	smulbb	r3, r2, r3
 8022804:	fb0c 3c00 	mla	ip, ip, r0, r3
 8022808:	fa1f fc8c 	uxth.w	ip, ip
 802280c:	f10c 0301 	add.w	r3, ip, #1
 8022810:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022814:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022818:	f881 c002 	strb.w	ip, [r1, #2]
 802281c:	b007      	add	sp, #28
 802281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022822:	bf00      	nop
 8022824:	0802d0a7 	.word	0x0802d0a7
 8022828:	0802d59e 	.word	0x0802d59e
 802282c:	0802d170 	.word	0x0802d170

08022830 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022834:	ed2d 8b08 	vpush	{d8-d11}
 8022838:	b09b      	sub	sp, #108	; 0x6c
 802283a:	eeb0 aa40 	vmov.f32	s20, s0
 802283e:	eef0 9a60 	vmov.f32	s19, s1
 8022842:	930a      	str	r3, [sp, #40]	; 0x28
 8022844:	eeb0 9a41 	vmov.f32	s18, s2
 8022848:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802284c:	eeb0 8a62 	vmov.f32	s16, s5
 8022850:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8022852:	eef0 8a43 	vmov.f32	s17, s6
 8022856:	9312      	str	r3, [sp, #72]	; 0x48
 8022858:	eef0 ba44 	vmov.f32	s23, s8
 802285c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022860:	eeb0 ba64 	vmov.f32	s22, s9
 8022864:	9019      	str	r0, [sp, #100]	; 0x64
 8022866:	eef0 aa45 	vmov.f32	s21, s10
 802286a:	9114      	str	r1, [sp, #80]	; 0x50
 802286c:	9317      	str	r3, [sp, #92]	; 0x5c
 802286e:	6868      	ldr	r0, [r5, #4]
 8022870:	9218      	str	r2, [sp, #96]	; 0x60
 8022872:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8022874:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8022878:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802287c:	fb00 1303 	mla	r3, r0, r3, r1
 8022880:	6829      	ldr	r1, [r5, #0]
 8022882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022886:	18cb      	adds	r3, r1, r3
 8022888:	930d      	str	r3, [sp, #52]	; 0x34
 802288a:	6813      	ldr	r3, [r2, #0]
 802288c:	9313      	str	r3, [sp, #76]	; 0x4c
 802288e:	6853      	ldr	r3, [r2, #4]
 8022890:	3304      	adds	r3, #4
 8022892:	9309      	str	r3, [sp, #36]	; 0x24
 8022894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022896:	2b00      	cmp	r3, #0
 8022898:	dc03      	bgt.n	80228a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802289a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802289c:	2b00      	cmp	r3, #0
 802289e:	f340 8352 	ble.w	8022f46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80228a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	f340 81a2 	ble.w	8022bee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 80228aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80228ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80228ae:	1412      	asrs	r2, r2, #16
 80228b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80228b4:	d431      	bmi.n	802291a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80228b6:	1c51      	adds	r1, r2, #1
 80228b8:	428c      	cmp	r4, r1
 80228ba:	dd31      	ble.n	8022920 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80228bc:	2b00      	cmp	r3, #0
 80228be:	db2f      	blt.n	8022920 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80228c0:	1c59      	adds	r1, r3, #1
 80228c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80228c4:	4288      	cmp	r0, r1
 80228c6:	dd2b      	ble.n	8022920 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 80228c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228ca:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80228cc:	3b01      	subs	r3, #1
 80228ce:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80228d0:	fb02 1203 	mla	r2, r2, r3, r1
 80228d4:	1412      	asrs	r2, r2, #16
 80228d6:	d42d      	bmi.n	8022934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228d8:	3201      	adds	r2, #1
 80228da:	4294      	cmp	r4, r2
 80228dc:	dd2a      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228de:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80228e0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80228e2:	fb02 1303 	mla	r3, r2, r3, r1
 80228e6:	141b      	asrs	r3, r3, #16
 80228e8:	d424      	bmi.n	8022934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228ea:	3301      	adds	r3, #1
 80228ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80228ee:	429a      	cmp	r2, r3
 80228f0:	dd20      	ble.n	8022934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228f4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80228f8:	f103 0e03 	add.w	lr, r3, #3
 80228fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228fe:	9315      	str	r3, [sp, #84]	; 0x54
 8022900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022902:	2b00      	cmp	r3, #0
 8022904:	f300 81de 	bgt.w	8022cc4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8022908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802290a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802290c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022914:	441a      	add	r2, r3
 8022916:	920d      	str	r2, [sp, #52]	; 0x34
 8022918:	e16b      	b.n	8022bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 802291a:	1c51      	adds	r1, r2, #1
 802291c:	f040 8158 	bne.w	8022bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022920:	42a2      	cmp	r2, r4
 8022922:	f280 8155 	bge.w	8022bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022926:	1c5a      	adds	r2, r3, #1
 8022928:	f2c0 8152 	blt.w	8022bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 802292c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802292e:	4293      	cmp	r3, r2
 8022930:	f280 814e 	bge.w	8022bd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8022934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022936:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8022938:	9316      	str	r3, [sp, #88]	; 0x58
 802293a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 802293e:	9315      	str	r3, [sp, #84]	; 0x54
 8022940:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022942:	2b00      	cmp	r3, #0
 8022944:	dde0      	ble.n	8022908 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022946:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022948:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802294a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802294e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8022950:	141b      	asrs	r3, r3, #16
 8022952:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022956:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022958:	1412      	asrs	r2, r2, #16
 802295a:	f100 819a 	bmi.w	8022c92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802295e:	1c55      	adds	r5, r2, #1
 8022960:	42ac      	cmp	r4, r5
 8022962:	f340 8198 	ble.w	8022c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022966:	2b00      	cmp	r3, #0
 8022968:	f2c0 8195 	blt.w	8022c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802296c:	1c5d      	adds	r5, r3, #1
 802296e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022970:	42af      	cmp	r7, r5
 8022972:	f340 8190 	ble.w	8022c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8022976:	fb03 2304 	mla	r3, r3, r4, r2
 802297a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802297c:	18d5      	adds	r5, r2, r3
 802297e:	5cd3      	ldrb	r3, [r2, r3]
 8022980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022986:	0e1f      	lsrs	r7, r3, #24
 8022988:	2800      	cmp	r0, #0
 802298a:	f000 8171 	beq.w	8022c70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802298e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8022992:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8022996:	920e      	str	r2, [sp, #56]	; 0x38
 8022998:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802299c:	2900      	cmp	r1, #0
 802299e:	f000 8172 	beq.w	8022c86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80229a2:	eb05 0c04 	add.w	ip, r5, r4
 80229a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229a8:	5d2d      	ldrb	r5, [r5, r4]
 80229aa:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80229ae:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80229b2:	950b      	str	r5, [sp, #44]	; 0x2c
 80229b4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80229b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80229ba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80229be:	0e15      	lsrs	r5, r2, #24
 80229c0:	920f      	str	r2, [sp, #60]	; 0x3c
 80229c2:	b280      	uxth	r0, r0
 80229c4:	b289      	uxth	r1, r1
 80229c6:	fb00 fa01 	mul.w	sl, r0, r1
 80229ca:	0100      	lsls	r0, r0, #4
 80229cc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80229d0:	eba0 080a 	sub.w	r8, r0, sl
 80229d4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80229d8:	b289      	uxth	r1, r1
 80229da:	fa1f f888 	uxth.w	r8, r8
 80229de:	1a52      	subs	r2, r2, r1
 80229e0:	fb08 f00e 	mul.w	r0, r8, lr
 80229e4:	b292      	uxth	r2, r2
 80229e6:	fb02 0007 	mla	r0, r2, r7, r0
 80229ea:	fb01 0009 	mla	r0, r1, r9, r0
 80229ee:	fb0a 0005 	mla	r0, sl, r5, r0
 80229f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80229f6:	2800      	cmp	r0, #0
 80229f8:	f000 80dd 	beq.w	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80229fc:	2fff      	cmp	r7, #255	; 0xff
 80229fe:	d01a      	beq.n	8022a36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8022a00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a08:	fb07 fc0c 	mul.w	ip, r7, ip
 8022a0c:	435f      	muls	r7, r3
 8022a0e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8022a12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022a16:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8022a1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a1e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8022a22:	4463      	add	r3, ip
 8022a24:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022a28:	0a1b      	lsrs	r3, r3, #8
 8022a2a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022a2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a32:	ea43 030b 	orr.w	r3, r3, fp
 8022a36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022a3a:	d01e      	beq.n	8022a7a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8022a3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022a3e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8022a42:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a46:	fb0e fb0b 	mul.w	fp, lr, fp
 8022a4a:	fb0e fe07 	mul.w	lr, lr, r7
 8022a4e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8022a52:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022a56:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8022a5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a5e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022a62:	44dc      	add	ip, fp
 8022a64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a6c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022a70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a74:	ea4c 070e 	orr.w	r7, ip, lr
 8022a78:	970e      	str	r7, [sp, #56]	; 0x38
 8022a7a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a7e:	d01e      	beq.n	8022abe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022a80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022a82:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022a86:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a8a:	fb09 fe0e 	mul.w	lr, r9, lr
 8022a8e:	fb09 f907 	mul.w	r9, r9, r7
 8022a92:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022a96:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022a9a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022a9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022aa2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022aa6:	44f4      	add	ip, lr
 8022aa8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022aac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ab0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022ab4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ab8:	ea4c 0709 	orr.w	r7, ip, r9
 8022abc:	970b      	str	r7, [sp, #44]	; 0x2c
 8022abe:	2dff      	cmp	r5, #255	; 0xff
 8022ac0:	d01c      	beq.n	8022afc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8022ac2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022ac4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022ac8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022acc:	fb05 fe0e 	mul.w	lr, r5, lr
 8022ad0:	437d      	muls	r5, r7
 8022ad2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022ad6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022ada:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8022ade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ae2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022ae6:	44f4      	add	ip, lr
 8022ae8:	0a2d      	lsrs	r5, r5, #8
 8022aea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022aee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022af2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022af6:	ea4c 0505 	orr.w	r5, ip, r5
 8022afa:	950f      	str	r5, [sp, #60]	; 0x3c
 8022afc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022afe:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b06:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022b0a:	fb08 f505 	mul.w	r5, r8, r5
 8022b0e:	fb02 5507 	mla	r5, r2, r7, r5
 8022b12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022b14:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b18:	fb01 5507 	mla	r5, r1, r7, r5
 8022b1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022b1e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b22:	fb0a 5507 	mla	r5, sl, r7, r5
 8022b26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022b28:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022b2c:	0a2d      	lsrs	r5, r5, #8
 8022b2e:	fb08 f807 	mul.w	r8, r8, r7
 8022b32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022b36:	fb02 8303 	mla	r3, r2, r3, r8
 8022b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b3c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b42:	fb01 330c 	mla	r3, r1, ip, r3
 8022b46:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8022b4a:	fb0a 3a01 	mla	sl, sl, r1, r3
 8022b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022b50:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022b52:	4343      	muls	r3, r0
 8022b54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b58:	1c58      	adds	r0, r3, #1
 8022b5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b5e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022b62:	ea45 050a 	orr.w	r5, r5, sl
 8022b66:	7833      	ldrb	r3, [r6, #0]
 8022b68:	b2ea      	uxtb	r2, r5
 8022b6a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022b6e:	fb12 f201 	smulbb	r2, r2, r1
 8022b72:	b2c0      	uxtb	r0, r0
 8022b74:	fb03 2300 	mla	r3, r3, r0, r2
 8022b78:	b29b      	uxth	r3, r3
 8022b7a:	1c5a      	adds	r2, r3, #1
 8022b7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b80:	7872      	ldrb	r2, [r6, #1]
 8022b82:	fb12 f200 	smulbb	r2, r2, r0
 8022b86:	121b      	asrs	r3, r3, #8
 8022b88:	7033      	strb	r3, [r6, #0]
 8022b8a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022b8e:	0c2d      	lsrs	r5, r5, #16
 8022b90:	fb03 2301 	mla	r3, r3, r1, r2
 8022b94:	b29b      	uxth	r3, r3
 8022b96:	1c5a      	adds	r2, r3, #1
 8022b98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b9c:	121b      	asrs	r3, r3, #8
 8022b9e:	7073      	strb	r3, [r6, #1]
 8022ba0:	78b3      	ldrb	r3, [r6, #2]
 8022ba2:	fb13 f000 	smulbb	r0, r3, r0
 8022ba6:	fb05 0501 	mla	r5, r5, r1, r0
 8022baa:	b2ad      	uxth	r5, r5
 8022bac:	1c6b      	adds	r3, r5, #1
 8022bae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022bb2:	122d      	asrs	r5, r5, #8
 8022bb4:	70b5      	strb	r5, [r6, #2]
 8022bb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022bb8:	3603      	adds	r6, #3
 8022bba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022bbc:	4413      	add	r3, r2
 8022bbe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022bc0:	932d      	str	r3, [sp, #180]	; 0xb4
 8022bc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022bc4:	4413      	add	r3, r2
 8022bc6:	932e      	str	r3, [sp, #184]	; 0xb8
 8022bc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022bca:	3b01      	subs	r3, #1
 8022bcc:	9316      	str	r3, [sp, #88]	; 0x58
 8022bce:	e6b7      	b.n	8022940 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022bd0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022bd2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022bd4:	4413      	add	r3, r2
 8022bd6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022bd8:	932d      	str	r3, [sp, #180]	; 0xb4
 8022bda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022bdc:	4413      	add	r3, r2
 8022bde:	932e      	str	r3, [sp, #184]	; 0xb8
 8022be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022be2:	3b01      	subs	r3, #1
 8022be4:	930a      	str	r3, [sp, #40]	; 0x28
 8022be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022be8:	3303      	adds	r3, #3
 8022bea:	930d      	str	r3, [sp, #52]	; 0x34
 8022bec:	e659      	b.n	80228a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022bee:	f47f ae6b 	bne.w	80228c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	f340 81a6 	ble.w	8022f46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8022bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022bfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c00:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022c04:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022c08:	eef0 6a48 	vmov.f32	s13, s16
 8022c0c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022c10:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022c14:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c18:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8022c1c:	eef0 6a68 	vmov.f32	s13, s17
 8022c20:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c24:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8022c28:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022c2c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022c30:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022c34:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022c38:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022c3c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022c40:	ee18 2a10 	vmov	r2, s16
 8022c44:	eeb0 8a47 	vmov.f32	s16, s14
 8022c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c4c:	ee18 2a90 	vmov	r2, s17
 8022c50:	932f      	str	r3, [sp, #188]	; 0xbc
 8022c52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c54:	eef0 8a67 	vmov.f32	s17, s15
 8022c58:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c5c:	9330      	str	r3, [sp, #192]	; 0xc0
 8022c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022c60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022c62:	3b01      	subs	r3, #1
 8022c64:	9314      	str	r3, [sp, #80]	; 0x50
 8022c66:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022c68:	bf08      	it	eq
 8022c6a:	4613      	moveq	r3, r2
 8022c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8022c6e:	e611      	b.n	8022894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8022c70:	b161      	cbz	r1, 8022c8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8022c72:	5d2a      	ldrb	r2, [r5, r4]
 8022c74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022c76:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022c7a:	25ff      	movs	r5, #255	; 0xff
 8022c7c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022c80:	920b      	str	r2, [sp, #44]	; 0x2c
 8022c82:	46ae      	mov	lr, r5
 8022c84:	e69d      	b.n	80229c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8022c86:	25ff      	movs	r5, #255	; 0xff
 8022c88:	46a9      	mov	r9, r5
 8022c8a:	e69a      	b.n	80229c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8022c8c:	25ff      	movs	r5, #255	; 0xff
 8022c8e:	46a9      	mov	r9, r5
 8022c90:	e7f7      	b.n	8022c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8022c92:	1c57      	adds	r7, r2, #1
 8022c94:	d18f      	bne.n	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022c96:	4294      	cmp	r4, r2
 8022c98:	dd8d      	ble.n	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022c9a:	1c5d      	adds	r5, r3, #1
 8022c9c:	db8b      	blt.n	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022c9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022ca0:	429d      	cmp	r5, r3
 8022ca2:	dd88      	ble.n	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022ca4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8022ca6:	9202      	str	r2, [sp, #8]
 8022ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022caa:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8022cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cb0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022cb2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022cb6:	e9cd 4300 	strd	r4, r3, [sp]
 8022cba:	4631      	mov	r1, r6
 8022cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cbe:	f7ff fc63 	bl	8022588 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8022cc2:	e778      	b.n	8022bb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8022cc4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022cc6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8022cc8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8022ccc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022cce:	1412      	asrs	r2, r2, #16
 8022cd0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022cd4:	141b      	asrs	r3, r3, #16
 8022cd6:	fb04 2303 	mla	r3, r4, r3, r2
 8022cda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022cdc:	18d5      	adds	r5, r2, r3
 8022cde:	5cd3      	ldrb	r3, [r2, r3]
 8022ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022ce6:	0e1e      	lsrs	r6, r3, #24
 8022ce8:	2900      	cmp	r1, #0
 8022cea:	f000 811b 	beq.w	8022f24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8022cee:	786a      	ldrb	r2, [r5, #1]
 8022cf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022cf2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022cf6:	9210      	str	r2, [sp, #64]	; 0x40
 8022cf8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	f000 811c 	beq.w	8022f3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 8022d02:	192a      	adds	r2, r5, r4
 8022d04:	5d2d      	ldrb	r5, [r5, r4]
 8022d06:	7852      	ldrb	r2, [r2, #1]
 8022d08:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8022d0c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022d10:	950c      	str	r5, [sp, #48]	; 0x30
 8022d12:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8022d16:	0e15      	lsrs	r5, r2, #24
 8022d18:	9211      	str	r2, [sp, #68]	; 0x44
 8022d1a:	b289      	uxth	r1, r1
 8022d1c:	b280      	uxth	r0, r0
 8022d1e:	fb01 fa00 	mul.w	sl, r1, r0
 8022d22:	0109      	lsls	r1, r1, #4
 8022d24:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022d28:	eba1 080a 	sub.w	r8, r1, sl
 8022d2c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022d30:	b280      	uxth	r0, r0
 8022d32:	fa1f f888 	uxth.w	r8, r8
 8022d36:	1a12      	subs	r2, r2, r0
 8022d38:	fb08 f10c 	mul.w	r1, r8, ip
 8022d3c:	b292      	uxth	r2, r2
 8022d3e:	fb02 1106 	mla	r1, r2, r6, r1
 8022d42:	fb00 1109 	mla	r1, r0, r9, r1
 8022d46:	fb0a 1105 	mla	r1, sl, r5, r1
 8022d4a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022d4e:	2900      	cmp	r1, #0
 8022d50:	f000 80da 	beq.w	8022f08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8022d54:	2eff      	cmp	r6, #255	; 0xff
 8022d56:	d016      	beq.n	8022d86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8022d58:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022d5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022d60:	4377      	muls	r7, r6
 8022d62:	435e      	muls	r6, r3
 8022d64:	0a3b      	lsrs	r3, r7, #8
 8022d66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022d6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d6e:	443b      	add	r3, r7
 8022d70:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022d74:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8022d78:	0a1b      	lsrs	r3, r3, #8
 8022d7a:	0a3f      	lsrs	r7, r7, #8
 8022d7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022d80:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022d84:	433b      	orrs	r3, r7
 8022d86:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022d8a:	d01d      	beq.n	8022dc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 8022d8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022d8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022d90:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022d94:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022d98:	fb0c f606 	mul.w	r6, ip, r6
 8022d9c:	fb0c fc07 	mul.w	ip, ip, r7
 8022da0:	0a37      	lsrs	r7, r6, #8
 8022da2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022da6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022daa:	4437      	add	r7, r6
 8022dac:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8022db0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8022db4:	0a3f      	lsrs	r7, r7, #8
 8022db6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022dbe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022dc2:	ea47 060c 	orr.w	r6, r7, ip
 8022dc6:	9610      	str	r6, [sp, #64]	; 0x40
 8022dc8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dcc:	d01d      	beq.n	8022e0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8022dce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022dd0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022dd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022dd8:	fb09 fc0c 	mul.w	ip, r9, ip
 8022ddc:	fb09 f906 	mul.w	r9, r9, r6
 8022de0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022de4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022de8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8022dec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022df0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022df4:	4467      	add	r7, ip
 8022df6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022dfa:	0a3f      	lsrs	r7, r7, #8
 8022dfc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022e00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e04:	ea47 0609 	orr.w	r6, r7, r9
 8022e08:	960c      	str	r6, [sp, #48]	; 0x30
 8022e0a:	2dff      	cmp	r5, #255	; 0xff
 8022e0c:	d01a      	beq.n	8022e44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8022e0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022e10:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8022e14:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e18:	fb05 fc0c 	mul.w	ip, r5, ip
 8022e1c:	4375      	muls	r5, r6
 8022e1e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8022e22:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e26:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022e2a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e2e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022e32:	4467      	add	r7, ip
 8022e34:	0a2d      	lsrs	r5, r5, #8
 8022e36:	0a3f      	lsrs	r7, r7, #8
 8022e38:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022e3c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022e40:	433d      	orrs	r5, r7
 8022e42:	9511      	str	r5, [sp, #68]	; 0x44
 8022e44:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022e46:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e4e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e52:	fb08 f505 	mul.w	r5, r8, r5
 8022e56:	fb02 5506 	mla	r5, r2, r6, r5
 8022e5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022e5c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e60:	fb00 5506 	mla	r5, r0, r6, r5
 8022e64:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022e66:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022e6a:	fb0a 5506 	mla	r5, sl, r6, r5
 8022e6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022e70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e74:	0a2d      	lsrs	r5, r5, #8
 8022e76:	fb08 f806 	mul.w	r8, r8, r6
 8022e7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022e7e:	fb02 8303 	mla	r3, r2, r3, r8
 8022e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022e84:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022e8a:	fb00 3307 	mla	r3, r0, r7, r3
 8022e8e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022e92:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8022e96:	fb01 f30b 	mul.w	r3, r1, fp
 8022e9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e9e:	1c59      	adds	r1, r3, #1
 8022ea0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022ea4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022ea8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022eac:	ea45 050c 	orr.w	r5, r5, ip
 8022eb0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022eb4:	b2ea      	uxtb	r2, r5
 8022eb6:	b2c9      	uxtb	r1, r1
 8022eb8:	fb12 f20b 	smulbb	r2, r2, fp
 8022ebc:	fb03 2301 	mla	r3, r3, r1, r2
 8022ec0:	b29b      	uxth	r3, r3
 8022ec2:	1c5a      	adds	r2, r3, #1
 8022ec4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ec8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022ecc:	fb12 f201 	smulbb	r2, r2, r1
 8022ed0:	121b      	asrs	r3, r3, #8
 8022ed2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022ed6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8022eda:	0c2d      	lsrs	r5, r5, #16
 8022edc:	fb03 230b 	mla	r3, r3, fp, r2
 8022ee0:	b29b      	uxth	r3, r3
 8022ee2:	1c5a      	adds	r2, r3, #1
 8022ee4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022ee8:	121b      	asrs	r3, r3, #8
 8022eea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022eee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022ef2:	fb13 f101 	smulbb	r1, r3, r1
 8022ef6:	fb05 150b 	mla	r5, r5, fp, r1
 8022efa:	b2ad      	uxth	r5, r5
 8022efc:	1c69      	adds	r1, r5, #1
 8022efe:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022f02:	122d      	asrs	r5, r5, #8
 8022f04:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022f08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f0a:	f10e 0e03 	add.w	lr, lr, #3
 8022f0e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022f10:	4413      	add	r3, r2
 8022f12:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022f14:	932d      	str	r3, [sp, #180]	; 0xb4
 8022f16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f18:	4413      	add	r3, r2
 8022f1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8022f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f1e:	3b01      	subs	r3, #1
 8022f20:	9315      	str	r3, [sp, #84]	; 0x54
 8022f22:	e4ed      	b.n	8022900 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8022f24:	b160      	cbz	r0, 8022f40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8022f26:	5d2a      	ldrb	r2, [r5, r4]
 8022f28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022f2a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022f2e:	25ff      	movs	r5, #255	; 0xff
 8022f30:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8022f34:	920c      	str	r2, [sp, #48]	; 0x30
 8022f36:	46ac      	mov	ip, r5
 8022f38:	e6ef      	b.n	8022d1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8022f3a:	25ff      	movs	r5, #255	; 0xff
 8022f3c:	46a9      	mov	r9, r5
 8022f3e:	e6ec      	b.n	8022d1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8022f40:	25ff      	movs	r5, #255	; 0xff
 8022f42:	46a9      	mov	r9, r5
 8022f44:	e7f7      	b.n	8022f36 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8022f46:	b01b      	add	sp, #108	; 0x6c
 8022f48:	ecbd 8b08 	vpop	{d8-d11}
 8022f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8022f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f54:	b085      	sub	sp, #20
 8022f56:	7888      	ldrb	r0, [r1, #2]
 8022f58:	4692      	mov	sl, r2
 8022f5a:	4698      	mov	r8, r3
 8022f5c:	9000      	str	r0, [sp, #0]
 8022f5e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022f62:	7848      	ldrb	r0, [r1, #1]
 8022f64:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022f68:	9001      	str	r0, [sp, #4]
 8022f6a:	7808      	ldrb	r0, [r1, #0]
 8022f6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8022f70:	9002      	str	r0, [sp, #8]
 8022f72:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022f76:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8022f7a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8022f7e:	fb04 560c 	mla	r6, r4, ip, r5
 8022f82:	2c00      	cmp	r4, #0
 8022f84:	eb02 0e06 	add.w	lr, r2, r6
 8022f88:	9a00      	ldr	r2, [sp, #0]
 8022f8a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8022f8e:	9a01      	ldr	r2, [sp, #4]
 8022f90:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8022f94:	db3e      	blt.n	8023014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8022f96:	45a1      	cmp	r9, r4
 8022f98:	dd3c      	ble.n	8023014 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8022f9a:	2d00      	cmp	r5, #0
 8022f9c:	db38      	blt.n	8023010 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8022f9e:	45ac      	cmp	ip, r5
 8022fa0:	dd36      	ble.n	8023010 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8022fa2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8022fa6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8022faa:	1c6e      	adds	r6, r5, #1
 8022fac:	d435      	bmi.n	802301a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022fae:	45b4      	cmp	ip, r6
 8022fb0:	dd33      	ble.n	802301a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022fb2:	b393      	cbz	r3, 802301a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8022fb4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022fb8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8022fbc:	3401      	adds	r4, #1
 8022fbe:	d430      	bmi.n	8023022 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022fc0:	45a1      	cmp	r9, r4
 8022fc2:	dd2e      	ble.n	8023022 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022fc4:	b36f      	cbz	r7, 8023022 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8022fc6:	2d00      	cmp	r5, #0
 8022fc8:	db29      	blt.n	802301e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8022fca:	45ac      	cmp	ip, r5
 8022fcc:	dd27      	ble.n	802301e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8022fce:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8022fd2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8022fd6:	3501      	adds	r5, #1
 8022fd8:	d407      	bmi.n	8022fea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8022fda:	45ac      	cmp	ip, r5
 8022fdc:	dd05      	ble.n	8022fea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8022fde:	b123      	cbz	r3, 8022fea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8022fe0:	44f4      	add	ip, lr
 8022fe2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022fe6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8022fea:	2b0f      	cmp	r3, #15
 8022fec:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022ff0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022ff4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022ff8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8022ffc:	d801      	bhi.n	8023002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8022ffe:	2f0f      	cmp	r7, #15
 8023000:	d911      	bls.n	8023026 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8023002:	4b76      	ldr	r3, [pc, #472]	; (80231dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8023004:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023008:	4a75      	ldr	r2, [pc, #468]	; (80231e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 802300a:	4876      	ldr	r0, [pc, #472]	; (80231e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 802300c:	f004 ff94 	bl	8027f38 <__assert_func>
 8023010:	4602      	mov	r2, r0
 8023012:	e7ca      	b.n	8022faa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8023014:	4606      	mov	r6, r0
 8023016:	4602      	mov	r2, r0
 8023018:	e7d0      	b.n	8022fbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802301a:	4606      	mov	r6, r0
 802301c:	e7ce      	b.n	8022fbc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 802301e:	4604      	mov	r4, r0
 8023020:	e7d9      	b.n	8022fd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8023022:	4604      	mov	r4, r0
 8023024:	e7e1      	b.n	8022fea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8023026:	b29b      	uxth	r3, r3
 8023028:	b2bf      	uxth	r7, r7
 802302a:	fb07 fe03 	mul.w	lr, r7, r3
 802302e:	011b      	lsls	r3, r3, #4
 8023030:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023034:	eba3 0c0e 	sub.w	ip, r3, lr
 8023038:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802303c:	b2bf      	uxth	r7, r7
 802303e:	fa1f fc8c 	uxth.w	ip, ip
 8023042:	1bed      	subs	r5, r5, r7
 8023044:	fb0c f30a 	mul.w	r3, ip, sl
 8023048:	b2ad      	uxth	r5, r5
 802304a:	fb05 330b 	mla	r3, r5, fp, r3
 802304e:	fb07 3309 	mla	r3, r7, r9, r3
 8023052:	fb0e 3308 	mla	r3, lr, r8, r3
 8023056:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802305a:	9303      	str	r3, [sp, #12]
 802305c:	2b00      	cmp	r3, #0
 802305e:	f000 80b9 	beq.w	80231d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8023062:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023066:	d018      	beq.n	802309a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8023068:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802306c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023070:	fb0b f303 	mul.w	r3, fp, r3
 8023074:	fb0b fb02 	mul.w	fp, fp, r2
 8023078:	0a1a      	lsrs	r2, r3, #8
 802307a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802307e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023082:	441a      	add	r2, r3
 8023084:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023088:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 802308c:	0a12      	lsrs	r2, r2, #8
 802308e:	0a1b      	lsrs	r3, r3, #8
 8023090:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023098:	431a      	orrs	r2, r3
 802309a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802309e:	d019      	beq.n	80230d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 80230a0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80230a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80230a8:	fb0a fb0b 	mul.w	fp, sl, fp
 80230ac:	fb0a fa06 	mul.w	sl, sl, r6
 80230b0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80230b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230b8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80230bc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80230c0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80230c4:	445e      	add	r6, fp
 80230c6:	0a1b      	lsrs	r3, r3, #8
 80230c8:	0a36      	lsrs	r6, r6, #8
 80230ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80230ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80230d2:	431e      	orrs	r6, r3
 80230d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80230d8:	d019      	beq.n	802310e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 80230da:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80230de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80230e2:	fb09 fa0a 	mul.w	sl, r9, sl
 80230e6:	fb09 f904 	mul.w	r9, r9, r4
 80230ea:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80230ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80230f2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80230f6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80230fa:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80230fe:	4454      	add	r4, sl
 8023100:	0a1b      	lsrs	r3, r3, #8
 8023102:	0a24      	lsrs	r4, r4, #8
 8023104:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023108:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802310c:	431c      	orrs	r4, r3
 802310e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023112:	d019      	beq.n	8023148 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8023114:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023118:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802311c:	fb08 f909 	mul.w	r9, r8, r9
 8023120:	fb08 f800 	mul.w	r8, r8, r0
 8023124:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023128:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802312c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023130:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023134:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023138:	4448      	add	r0, r9
 802313a:	0a1b      	lsrs	r3, r3, #8
 802313c:	0a00      	lsrs	r0, r0, #8
 802313e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023142:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023146:	4318      	orrs	r0, r3
 8023148:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802314c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023150:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023154:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023158:	fb0c f808 	mul.w	r8, ip, r8
 802315c:	fb0c f606 	mul.w	r6, ip, r6
 8023160:	fb05 8803 	mla	r8, r5, r3, r8
 8023164:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023168:	fb05 6202 	mla	r2, r5, r2, r6
 802316c:	fb07 8803 	mla	r8, r7, r3, r8
 8023170:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023174:	fb0e 8303 	mla	r3, lr, r3, r8
 8023178:	0a1b      	lsrs	r3, r3, #8
 802317a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802317e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8023182:	9c02      	ldr	r4, [sp, #8]
 8023184:	fb07 2703 	mla	r7, r7, r3, r2
 8023188:	9a03      	ldr	r2, [sp, #12]
 802318a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802318e:	43d2      	mvns	r2, r2
 8023190:	fb0e 7303 	mla	r3, lr, r3, r7
 8023194:	b2d2      	uxtb	r2, r2
 8023196:	0a1b      	lsrs	r3, r3, #8
 8023198:	4354      	muls	r4, r2
 802319a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802319e:	1c60      	adds	r0, r4, #1
 80231a0:	ea48 0303 	orr.w	r3, r8, r3
 80231a4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80231a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80231ac:	7008      	strb	r0, [r1, #0]
 80231ae:	9801      	ldr	r0, [sp, #4]
 80231b0:	4350      	muls	r0, r2
 80231b2:	1c44      	adds	r4, r0, #1
 80231b4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 80231b8:	0a18      	lsrs	r0, r3, #8
 80231ba:	0c1b      	lsrs	r3, r3, #16
 80231bc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80231c0:	7048      	strb	r0, [r1, #1]
 80231c2:	9800      	ldr	r0, [sp, #0]
 80231c4:	4350      	muls	r0, r2
 80231c6:	4602      	mov	r2, r0
 80231c8:	3001      	adds	r0, #1
 80231ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80231ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80231d2:	708b      	strb	r3, [r1, #2]
 80231d4:	b005      	add	sp, #20
 80231d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231da:	bf00      	nop
 80231dc:	0802d0a7 	.word	0x0802d0a7
 80231e0:	0802d59e 	.word	0x0802d59e
 80231e4:	0802d170 	.word	0x0802d170

080231e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80231e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231ec:	ed2d 8b08 	vpush	{d8-d11}
 80231f0:	b097      	sub	sp, #92	; 0x5c
 80231f2:	eeb0 aa40 	vmov.f32	s20, s0
 80231f6:	eef0 9a60 	vmov.f32	s19, s1
 80231fa:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 80231fc:	eeb0 9a41 	vmov.f32	s18, s2
 8023200:	9308      	str	r3, [sp, #32]
 8023202:	eeb0 8a62 	vmov.f32	s16, s5
 8023206:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 802320a:	eef0 8a43 	vmov.f32	s17, s6
 802320e:	9015      	str	r0, [sp, #84]	; 0x54
 8023210:	eef0 ba44 	vmov.f32	s23, s8
 8023214:	6868      	ldr	r0, [r5, #4]
 8023216:	eeb0 ba64 	vmov.f32	s22, s9
 802321a:	9112      	str	r1, [sp, #72]	; 0x48
 802321c:	eef0 aa45 	vmov.f32	s21, s10
 8023220:	9310      	str	r3, [sp, #64]	; 0x40
 8023222:	9214      	str	r2, [sp, #80]	; 0x50
 8023224:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023226:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 802322a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802322e:	fb00 1303 	mla	r3, r0, r3, r1
 8023232:	6829      	ldr	r1, [r5, #0]
 8023234:	6855      	ldr	r5, [r2, #4]
 8023236:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802323a:	3504      	adds	r5, #4
 802323c:	18cb      	adds	r3, r1, r3
 802323e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023240:	6813      	ldr	r3, [r2, #0]
 8023242:	9311      	str	r3, [sp, #68]	; 0x44
 8023244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023246:	2b00      	cmp	r3, #0
 8023248:	dc03      	bgt.n	8023252 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802324a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802324c:	2b00      	cmp	r3, #0
 802324e:	f340 8333 	ble.w	80238b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023252:	9b08      	ldr	r3, [sp, #32]
 8023254:	2b00      	cmp	r3, #0
 8023256:	f340 8190 	ble.w	802357a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802325a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802325c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802325e:	1412      	asrs	r2, r2, #16
 8023260:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023264:	d42f      	bmi.n	80232c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8023266:	1c51      	adds	r1, r2, #1
 8023268:	428c      	cmp	r4, r1
 802326a:	dd2f      	ble.n	80232cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 802326c:	2b00      	cmp	r3, #0
 802326e:	db2d      	blt.n	80232cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023270:	1c59      	adds	r1, r3, #1
 8023272:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023274:	4288      	cmp	r0, r1
 8023276:	dd29      	ble.n	80232cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8023278:	9b08      	ldr	r3, [sp, #32]
 802327a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802327c:	3b01      	subs	r3, #1
 802327e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023280:	fb02 1203 	mla	r2, r2, r3, r1
 8023284:	1412      	asrs	r2, r2, #16
 8023286:	d42b      	bmi.n	80232e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023288:	3201      	adds	r2, #1
 802328a:	4294      	cmp	r4, r2
 802328c:	dd28      	ble.n	80232e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802328e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023290:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023292:	fb02 1303 	mla	r3, r2, r3, r1
 8023296:	141b      	asrs	r3, r3, #16
 8023298:	d422      	bmi.n	80232e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802329a:	3301      	adds	r3, #1
 802329c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802329e:	429a      	cmp	r2, r3
 80232a0:	dd1e      	ble.n	80232e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80232a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80232a4:	f103 0803 	add.w	r8, r3, #3
 80232a8:	9b08      	ldr	r3, [sp, #32]
 80232aa:	9307      	str	r3, [sp, #28]
 80232ac:	9b07      	ldr	r3, [sp, #28]
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	f300 81ca 	bgt.w	8023648 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 80232b4:	9b08      	ldr	r3, [sp, #32]
 80232b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80232b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80232bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232c0:	441a      	add	r2, r3
 80232c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80232c4:	e15b      	b.n	802357e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80232c6:	1c51      	adds	r1, r2, #1
 80232c8:	f040 8148 	bne.w	802355c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80232cc:	42a2      	cmp	r2, r4
 80232ce:	f280 8145 	bge.w	802355c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80232d2:	1c5a      	adds	r2, r3, #1
 80232d4:	f2c0 8142 	blt.w	802355c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80232d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80232da:	4293      	cmp	r3, r2
 80232dc:	f280 813e 	bge.w	802355c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 80232e0:	9b08      	ldr	r3, [sp, #32]
 80232e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80232e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80232e6:	9307      	str	r3, [sp, #28]
 80232e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	dde2      	ble.n	80232b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 80232ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80232f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80232f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80232f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80232f8:	141b      	asrs	r3, r3, #16
 80232fa:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80232fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023300:	1412      	asrs	r2, r2, #16
 8023302:	f100 818b 	bmi.w	802361c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8023306:	1c56      	adds	r6, r2, #1
 8023308:	42b4      	cmp	r4, r6
 802330a:	f340 8189 	ble.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802330e:	2b00      	cmp	r3, #0
 8023310:	f2c0 8186 	blt.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8023314:	1c5e      	adds	r6, r3, #1
 8023316:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023318:	42b7      	cmp	r7, r6
 802331a:	f340 8181 	ble.w	8023620 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802331e:	fb03 2304 	mla	r3, r3, r4, r2
 8023322:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023324:	18d6      	adds	r6, r2, r3
 8023326:	5cd3      	ldrb	r3, [r2, r3]
 8023328:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802332c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023330:	2900      	cmp	r1, #0
 8023332:	f000 8163 	beq.w	80235fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8023336:	7872      	ldrb	r2, [r6, #1]
 8023338:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802333c:	920c      	str	r2, [sp, #48]	; 0x30
 802333e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023342:	2800      	cmp	r0, #0
 8023344:	f000 8164 	beq.w	8023610 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8023348:	1932      	adds	r2, r6, r4
 802334a:	5d36      	ldrb	r6, [r6, r4]
 802334c:	7852      	ldrb	r2, [r2, #1]
 802334e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8023352:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023356:	9609      	str	r6, [sp, #36]	; 0x24
 8023358:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802335c:	0e16      	lsrs	r6, r2, #24
 802335e:	920d      	str	r2, [sp, #52]	; 0x34
 8023360:	b289      	uxth	r1, r1
 8023362:	b280      	uxth	r0, r0
 8023364:	fb01 fb00 	mul.w	fp, r1, r0
 8023368:	0109      	lsls	r1, r1, #4
 802336a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802336e:	eba1 090b 	sub.w	r9, r1, fp
 8023372:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8023376:	b280      	uxth	r0, r0
 8023378:	fa1f f989 	uxth.w	r9, r9
 802337c:	1a12      	subs	r2, r2, r0
 802337e:	fb09 f108 	mul.w	r1, r9, r8
 8023382:	b292      	uxth	r2, r2
 8023384:	fb02 110c 	mla	r1, r2, ip, r1
 8023388:	fb00 110a 	mla	r1, r0, sl, r1
 802338c:	fb0b 1106 	mla	r1, fp, r6, r1
 8023390:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023394:	2900      	cmp	r1, #0
 8023396:	f000 80d2 	beq.w	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802339a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802339e:	d01b      	beq.n	80233d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 80233a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80233a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233a8:	fb0c fe0e 	mul.w	lr, ip, lr
 80233ac:	fb0c fc03 	mul.w	ip, ip, r3
 80233b0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80233b4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80233b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233bc:	4473      	add	r3, lr
 80233be:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80233c2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80233c6:	0a1b      	lsrs	r3, r3, #8
 80233c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80233d4:	ea43 030e 	orr.w	r3, r3, lr
 80233d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80233dc:	d01e      	beq.n	802341c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80233de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80233e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80233e4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80233e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80233ec:	fb08 f80e 	mul.w	r8, r8, lr
 80233f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80233f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80233f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80233fc:	44e6      	add	lr, ip
 80233fe:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023402:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023406:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802340a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802340e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023412:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023416:	ea4e 0708 	orr.w	r7, lr, r8
 802341a:	970c      	str	r7, [sp, #48]	; 0x30
 802341c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023420:	d01e      	beq.n	8023460 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8023422:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023424:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023428:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802342c:	fb0a f808 	mul.w	r8, sl, r8
 8023430:	fb0a fa0c 	mul.w	sl, sl, ip
 8023434:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023438:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802343c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023440:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023444:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023448:	44c6      	add	lr, r8
 802344a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802344e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023452:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023456:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802345a:	ea4e 070a 	orr.w	r7, lr, sl
 802345e:	9709      	str	r7, [sp, #36]	; 0x24
 8023460:	2eff      	cmp	r6, #255	; 0xff
 8023462:	d01d      	beq.n	80234a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8023464:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023466:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802346a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802346e:	fb06 f808 	mul.w	r8, r6, r8
 8023472:	fb06 f60c 	mul.w	r6, r6, ip
 8023476:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802347a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802347e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8023482:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023486:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802348a:	44c6      	add	lr, r8
 802348c:	0a36      	lsrs	r6, r6, #8
 802348e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023492:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023496:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802349a:	ea4e 0606 	orr.w	r6, lr, r6
 802349e:	960d      	str	r6, [sp, #52]	; 0x34
 80234a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80234a2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80234a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80234a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234b0:	43c9      	mvns	r1, r1
 80234b2:	fb09 f606 	mul.w	r6, r9, r6
 80234b6:	b2c9      	uxtb	r1, r1
 80234b8:	fb02 660c 	mla	r6, r2, ip, r6
 80234bc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80234c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80234c2:	fb00 660c 	mla	r6, r0, ip, r6
 80234c6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80234ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80234cc:	fb0b 660c 	mla	r6, fp, ip, r6
 80234d0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80234d4:	fb09 f90c 	mul.w	r9, r9, ip
 80234d8:	0a36      	lsrs	r6, r6, #8
 80234da:	fb02 9303 	mla	r3, r2, r3, r9
 80234de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80234e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80234e4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80234e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80234ea:	fb00 330e 	mla	r3, r0, lr, r3
 80234ee:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80234f2:	fb0b 3b00 	mla	fp, fp, r0, r3
 80234f6:	9b07      	ldr	r3, [sp, #28]
 80234f8:	781b      	ldrb	r3, [r3, #0]
 80234fa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80234fe:	fb03 f201 	mul.w	r2, r3, r1
 8023502:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023506:	1c53      	adds	r3, r2, #1
 8023508:	ea46 060b 	orr.w	r6, r6, fp
 802350c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023510:	9a07      	ldr	r2, [sp, #28]
 8023512:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023516:	7013      	strb	r3, [r2, #0]
 8023518:	7853      	ldrb	r3, [r2, #1]
 802351a:	434b      	muls	r3, r1
 802351c:	1c5a      	adds	r2, r3, #1
 802351e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023522:	0a33      	lsrs	r3, r6, #8
 8023524:	0c36      	lsrs	r6, r6, #16
 8023526:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802352a:	9a07      	ldr	r2, [sp, #28]
 802352c:	7053      	strb	r3, [r2, #1]
 802352e:	7893      	ldrb	r3, [r2, #2]
 8023530:	4359      	muls	r1, r3
 8023532:	1c4b      	adds	r3, r1, #1
 8023534:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8023538:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802353c:	7096      	strb	r6, [r2, #2]
 802353e:	9b07      	ldr	r3, [sp, #28]
 8023540:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023542:	3303      	adds	r3, #3
 8023544:	9307      	str	r3, [sp, #28]
 8023546:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023548:	4413      	add	r3, r2
 802354a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802354c:	9329      	str	r3, [sp, #164]	; 0xa4
 802354e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023550:	4413      	add	r3, r2
 8023552:	932a      	str	r3, [sp, #168]	; 0xa8
 8023554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023556:	3b01      	subs	r3, #1
 8023558:	9313      	str	r3, [sp, #76]	; 0x4c
 802355a:	e6c5      	b.n	80232e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802355c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802355e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023560:	4413      	add	r3, r2
 8023562:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023564:	9329      	str	r3, [sp, #164]	; 0xa4
 8023566:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023568:	4413      	add	r3, r2
 802356a:	932a      	str	r3, [sp, #168]	; 0xa8
 802356c:	9b08      	ldr	r3, [sp, #32]
 802356e:	3b01      	subs	r3, #1
 8023570:	9308      	str	r3, [sp, #32]
 8023572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023574:	3303      	adds	r3, #3
 8023576:	930b      	str	r3, [sp, #44]	; 0x2c
 8023578:	e66b      	b.n	8023252 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802357a:	f47f ae7d 	bne.w	8023278 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802357e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023580:	2b00      	cmp	r3, #0
 8023582:	f340 8199 	ble.w	80238b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8023586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802358a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802358c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023590:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023594:	eef0 6a48 	vmov.f32	s13, s16
 8023598:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802359c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80235a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235a4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80235a8:	eef0 6a68 	vmov.f32	s13, s17
 80235ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80235b0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80235b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80235b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80235bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80235c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80235c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80235c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80235cc:	ee18 2a10 	vmov	r2, s16
 80235d0:	eeb0 8a47 	vmov.f32	s16, s14
 80235d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80235d8:	ee18 2a90 	vmov	r2, s17
 80235dc:	932b      	str	r3, [sp, #172]	; 0xac
 80235de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235e0:	eef0 8a67 	vmov.f32	s17, s15
 80235e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80235e8:	932c      	str	r3, [sp, #176]	; 0xb0
 80235ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80235ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80235ee:	3b01      	subs	r3, #1
 80235f0:	9312      	str	r3, [sp, #72]	; 0x48
 80235f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80235f4:	bf08      	it	eq
 80235f6:	4613      	moveq	r3, r2
 80235f8:	9308      	str	r3, [sp, #32]
 80235fa:	e623      	b.n	8023244 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80235fc:	b158      	cbz	r0, 8023616 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80235fe:	5d32      	ldrb	r2, [r6, r4]
 8023600:	26ff      	movs	r6, #255	; 0xff
 8023602:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8023606:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802360a:	9209      	str	r2, [sp, #36]	; 0x24
 802360c:	46b0      	mov	r8, r6
 802360e:	e6a7      	b.n	8023360 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023610:	26ff      	movs	r6, #255	; 0xff
 8023612:	46b2      	mov	sl, r6
 8023614:	e6a4      	b.n	8023360 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8023616:	26ff      	movs	r6, #255	; 0xff
 8023618:	46b2      	mov	sl, r6
 802361a:	e7f7      	b.n	802360c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802361c:	1c57      	adds	r7, r2, #1
 802361e:	d18e      	bne.n	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023620:	4294      	cmp	r4, r2
 8023622:	dd8c      	ble.n	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023624:	1c5e      	adds	r6, r3, #1
 8023626:	db8a      	blt.n	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023628:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802362a:	429e      	cmp	r6, r3
 802362c:	dd87      	ble.n	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802362e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8023632:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023636:	e9cd 4600 	strd	r4, r6, [sp]
 802363a:	462b      	mov	r3, r5
 802363c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802363e:	9907      	ldr	r1, [sp, #28]
 8023640:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023642:	f7ff fc85 	bl	8022f50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8023646:	e77a      	b.n	802353e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8023648:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802364a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802364c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023650:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023652:	1409      	asrs	r1, r1, #16
 8023654:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8023658:	141b      	asrs	r3, r3, #16
 802365a:	fb04 1303 	mla	r3, r4, r3, r1
 802365e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023660:	18ce      	adds	r6, r1, r3
 8023662:	5ccb      	ldrb	r3, [r1, r3]
 8023664:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023668:	0e1f      	lsrs	r7, r3, #24
 802366a:	2a00      	cmp	r2, #0
 802366c:	f000 8114 	beq.w	8023898 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8023670:	7871      	ldrb	r1, [r6, #1]
 8023672:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023676:	910e      	str	r1, [sp, #56]	; 0x38
 8023678:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802367c:	2800      	cmp	r0, #0
 802367e:	f000 8115 	beq.w	80238ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8023682:	1931      	adds	r1, r6, r4
 8023684:	5d36      	ldrb	r6, [r6, r4]
 8023686:	7849      	ldrb	r1, [r1, #1]
 8023688:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802368c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8023690:	960a      	str	r6, [sp, #40]	; 0x28
 8023692:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023696:	0e0e      	lsrs	r6, r1, #24
 8023698:	910f      	str	r1, [sp, #60]	; 0x3c
 802369a:	b292      	uxth	r2, r2
 802369c:	b280      	uxth	r0, r0
 802369e:	fb02 fb00 	mul.w	fp, r2, r0
 80236a2:	0112      	lsls	r2, r2, #4
 80236a4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80236a8:	eba2 090b 	sub.w	r9, r2, fp
 80236ac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80236b0:	b280      	uxth	r0, r0
 80236b2:	fa1f f989 	uxth.w	r9, r9
 80236b6:	1a09      	subs	r1, r1, r0
 80236b8:	fb09 f20e 	mul.w	r2, r9, lr
 80236bc:	b289      	uxth	r1, r1
 80236be:	fb01 2207 	mla	r2, r1, r7, r2
 80236c2:	fb00 220a 	mla	r2, r0, sl, r2
 80236c6:	fb0b 2206 	mla	r2, fp, r6, r2
 80236ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80236ce:	9213      	str	r2, [sp, #76]	; 0x4c
 80236d0:	2a00      	cmp	r2, #0
 80236d2:	f000 80d4 	beq.w	802387e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80236d6:	2fff      	cmp	r7, #255	; 0xff
 80236d8:	d01a      	beq.n	8023710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80236da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80236de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80236e2:	fb07 fc0c 	mul.w	ip, r7, ip
 80236e6:	435f      	muls	r7, r3
 80236e8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80236ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80236f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80236f4:	4463      	add	r3, ip
 80236f6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80236fa:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80236fe:	0a1b      	lsrs	r3, r3, #8
 8023700:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023704:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023708:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802370c:	ea43 030c 	orr.w	r3, r3, ip
 8023710:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023714:	d01f      	beq.n	8023756 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8023716:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8023718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802371a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802371e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023722:	fb0e f707 	mul.w	r7, lr, r7
 8023726:	fb0e fe0c 	mul.w	lr, lr, ip
 802372a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802372e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023732:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023736:	44bc      	add	ip, r7
 8023738:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802373c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023740:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023744:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023748:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802374c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023750:	ea4c 020e 	orr.w	r2, ip, lr
 8023754:	920e      	str	r2, [sp, #56]	; 0x38
 8023756:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802375a:	d01e      	beq.n	802379a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802375c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802375e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8023762:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023766:	fb0a fe0e 	mul.w	lr, sl, lr
 802376a:	fb0a fa07 	mul.w	sl, sl, r7
 802376e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023772:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023776:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802377a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802377e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023782:	44f4      	add	ip, lr
 8023784:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802378c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023794:	ea4c 020a 	orr.w	r2, ip, sl
 8023798:	920a      	str	r2, [sp, #40]	; 0x28
 802379a:	2eff      	cmp	r6, #255	; 0xff
 802379c:	d01c      	beq.n	80237d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802379e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80237a0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80237a4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80237a8:	fb06 fe0e 	mul.w	lr, r6, lr
 80237ac:	437e      	muls	r6, r7
 80237ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80237b2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80237b6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80237ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237be:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80237c2:	44f4      	add	ip, lr
 80237c4:	0a36      	lsrs	r6, r6, #8
 80237c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80237ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80237ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80237d2:	ea4c 0206 	orr.w	r2, ip, r6
 80237d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80237d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237da:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80237de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237e2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80237e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80237e8:	fb09 f606 	mul.w	r6, r9, r6
 80237ec:	fb01 6607 	mla	r6, r1, r7, r6
 80237f0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80237f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80237f6:	fb00 6607 	mla	r6, r0, r7, r6
 80237fa:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80237fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023800:	fb0b 6607 	mla	r6, fp, r7, r6
 8023804:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802380a:	fb09 f907 	mul.w	r9, r9, r7
 802380e:	0a36      	lsrs	r6, r6, #8
 8023810:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8023814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023816:	fb01 9303 	mla	r3, r1, r3, r9
 802381a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802381e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023822:	fb00 330c 	mla	r3, r0, ip, r3
 8023826:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802382a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802382c:	43da      	mvns	r2, r3
 802382e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8023832:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023836:	b2d2      	uxtb	r2, r2
 8023838:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802383c:	fb03 f102 	mul.w	r1, r3, r2
 8023840:	ea46 060e 	orr.w	r6, r6, lr
 8023844:	1c4b      	adds	r3, r1, #1
 8023846:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802384a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802384e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8023852:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8023856:	4353      	muls	r3, r2
 8023858:	1c59      	adds	r1, r3, #1
 802385a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802385e:	0a33      	lsrs	r3, r6, #8
 8023860:	0c36      	lsrs	r6, r6, #16
 8023862:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023866:	f808 3c02 	strb.w	r3, [r8, #-2]
 802386a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802386e:	435a      	muls	r2, r3
 8023870:	1c53      	adds	r3, r2, #1
 8023872:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023876:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802387a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802387e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023880:	f108 0803 	add.w	r8, r8, #3
 8023884:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023886:	4413      	add	r3, r2
 8023888:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802388a:	9329      	str	r3, [sp, #164]	; 0xa4
 802388c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802388e:	4413      	add	r3, r2
 8023890:	932a      	str	r3, [sp, #168]	; 0xa8
 8023892:	9b07      	ldr	r3, [sp, #28]
 8023894:	3b01      	subs	r3, #1
 8023896:	e508      	b.n	80232aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8023898:	b158      	cbz	r0, 80238b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802389a:	5d31      	ldrb	r1, [r6, r4]
 802389c:	26ff      	movs	r6, #255	; 0xff
 802389e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80238a2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80238a6:	910a      	str	r1, [sp, #40]	; 0x28
 80238a8:	46b6      	mov	lr, r6
 80238aa:	e6f6      	b.n	802369a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80238ac:	26ff      	movs	r6, #255	; 0xff
 80238ae:	46b2      	mov	sl, r6
 80238b0:	e6f3      	b.n	802369a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80238b2:	26ff      	movs	r6, #255	; 0xff
 80238b4:	46b2      	mov	sl, r6
 80238b6:	e7f7      	b.n	80238a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 80238b8:	b017      	add	sp, #92	; 0x5c
 80238ba:	ecbd 8b08 	vpop	{d8-d11}
 80238be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080238c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80238c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238c8:	b08d      	sub	sp, #52	; 0x34
 80238ca:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80238ce:	9103      	str	r1, [sp, #12]
 80238d0:	fb07 5803 	mla	r8, r7, r3, r5
 80238d4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80238d8:	9803      	ldr	r0, [sp, #12]
 80238da:	2f00      	cmp	r7, #0
 80238dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80238de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80238e2:	9903      	ldr	r1, [sp, #12]
 80238e4:	9c03      	ldr	r4, [sp, #12]
 80238e6:	eb02 0608 	add.w	r6, r2, r8
 80238ea:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80238ee:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80238f2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80238f6:	7809      	ldrb	r1, [r1, #0]
 80238f8:	7840      	ldrb	r0, [r0, #1]
 80238fa:	78a4      	ldrb	r4, [r4, #2]
 80238fc:	db51      	blt.n	80239a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80238fe:	45be      	cmp	lr, r7
 8023900:	dd4f      	ble.n	80239a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8023902:	2d00      	cmp	r5, #0
 8023904:	db49      	blt.n	802399a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8023906:	42ab      	cmp	r3, r5
 8023908:	dd47      	ble.n	802399a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802390a:	f812 2008 	ldrb.w	r2, [r2, r8]
 802390e:	9204      	str	r2, [sp, #16]
 8023910:	7872      	ldrb	r2, [r6, #1]
 8023912:	9205      	str	r2, [sp, #20]
 8023914:	78b2      	ldrb	r2, [r6, #2]
 8023916:	9206      	str	r2, [sp, #24]
 8023918:	1c6a      	adds	r2, r5, #1
 802391a:	d449      	bmi.n	80239b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802391c:	4293      	cmp	r3, r2
 802391e:	dd47      	ble.n	80239b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023920:	f1bc 0f00 	cmp.w	ip, #0
 8023924:	d044      	beq.n	80239b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8023926:	7972      	ldrb	r2, [r6, #5]
 8023928:	f896 b003 	ldrb.w	fp, [r6, #3]
 802392c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8023930:	9201      	str	r2, [sp, #4]
 8023932:	3701      	adds	r7, #1
 8023934:	d444      	bmi.n	80239c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8023936:	45be      	cmp	lr, r7
 8023938:	dd42      	ble.n	80239c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802393a:	f1b9 0f00 	cmp.w	r9, #0
 802393e:	f000 80c1 	beq.w	8023ac4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8023942:	2d00      	cmp	r5, #0
 8023944:	db38      	blt.n	80239b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8023946:	42ab      	cmp	r3, r5
 8023948:	dd36      	ble.n	80239b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802394a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802394e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8023952:	2203      	movs	r2, #3
 8023954:	fb03 6702 	mla	r7, r3, r2, r6
 8023958:	fb03 6202 	mla	r2, r3, r2, r6
 802395c:	787f      	ldrb	r7, [r7, #1]
 802395e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023962:	9702      	str	r7, [sp, #8]
 8023964:	3501      	adds	r5, #1
 8023966:	d432      	bmi.n	80239ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8023968:	42ab      	cmp	r3, r5
 802396a:	dd30      	ble.n	80239ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802396c:	f1bc 0f00 	cmp.w	ip, #0
 8023970:	d031      	beq.n	80239d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8023972:	2703      	movs	r7, #3
 8023974:	fb13 7207 	smlabb	r2, r3, r7, r7
 8023978:	5cb5      	ldrb	r5, [r6, r2]
 802397a:	fb03 6207 	mla	r2, r3, r7, r6
 802397e:	fb03 6307 	mla	r3, r3, r7, r6
 8023982:	7912      	ldrb	r2, [r2, #4]
 8023984:	795e      	ldrb	r6, [r3, #5]
 8023986:	f1bc 0f0f 	cmp.w	ip, #15
 802398a:	d927      	bls.n	80239dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802398c:	4b53      	ldr	r3, [pc, #332]	; (8023adc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802398e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023992:	4a53      	ldr	r2, [pc, #332]	; (8023ae0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8023994:	4853      	ldr	r0, [pc, #332]	; (8023ae4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8023996:	f004 facf 	bl	8027f38 <__assert_func>
 802399a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802399e:	9104      	str	r1, [sp, #16]
 80239a0:	e7ba      	b.n	8023918 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80239a2:	9401      	str	r4, [sp, #4]
 80239a4:	4682      	mov	sl, r0
 80239a6:	468b      	mov	fp, r1
 80239a8:	9104      	str	r1, [sp, #16]
 80239aa:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80239ae:	e7c0      	b.n	8023932 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80239b0:	9401      	str	r4, [sp, #4]
 80239b2:	4682      	mov	sl, r0
 80239b4:	468b      	mov	fp, r1
 80239b6:	e7bc      	b.n	8023932 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80239b8:	46a6      	mov	lr, r4
 80239ba:	9002      	str	r0, [sp, #8]
 80239bc:	4688      	mov	r8, r1
 80239be:	e7d1      	b.n	8023964 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80239c0:	4626      	mov	r6, r4
 80239c2:	4602      	mov	r2, r0
 80239c4:	460d      	mov	r5, r1
 80239c6:	46a6      	mov	lr, r4
 80239c8:	9002      	str	r0, [sp, #8]
 80239ca:	4688      	mov	r8, r1
 80239cc:	e7db      	b.n	8023986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80239ce:	4626      	mov	r6, r4
 80239d0:	4602      	mov	r2, r0
 80239d2:	460d      	mov	r5, r1
 80239d4:	e7d7      	b.n	8023986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80239d6:	4626      	mov	r6, r4
 80239d8:	4602      	mov	r2, r0
 80239da:	460d      	mov	r5, r1
 80239dc:	f1b9 0f0f 	cmp.w	r9, #15
 80239e0:	d8d4      	bhi.n	802398c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80239e2:	fa1f f38c 	uxth.w	r3, ip
 80239e6:	fa1f fc89 	uxth.w	ip, r9
 80239ea:	fb03 f70c 	mul.w	r7, r3, ip
 80239ee:	011b      	lsls	r3, r3, #4
 80239f0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80239f4:	9707      	str	r7, [sp, #28]
 80239f6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80239fa:	fa1f fc8c 	uxth.w	ip, ip
 80239fe:	eba7 070c 	sub.w	r7, r7, ip
 8023a02:	b2bf      	uxth	r7, r7
 8023a04:	9709      	str	r7, [sp, #36]	; 0x24
 8023a06:	9f07      	ldr	r7, [sp, #28]
 8023a08:	1bdb      	subs	r3, r3, r7
 8023a0a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8023a0e:	b29b      	uxth	r3, r3
 8023a10:	9708      	str	r7, [sp, #32]
 8023a12:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023a14:	930a      	str	r3, [sp, #40]	; 0x28
 8023a16:	ea6f 0907 	mvn.w	r9, r7
 8023a1a:	fb03 fb0b 	mul.w	fp, r3, fp
 8023a1e:	9f04      	ldr	r7, [sp, #16]
 8023a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a22:	fa5f f989 	uxtb.w	r9, r9
 8023a26:	fb03 bb07 	mla	fp, r3, r7, fp
 8023a2a:	9f07      	ldr	r7, [sp, #28]
 8023a2c:	fb11 f109 	smulbb	r1, r1, r9
 8023a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a32:	fb0c b808 	mla	r8, ip, r8, fp
 8023a36:	fb10 f009 	smulbb	r0, r0, r9
 8023a3a:	fb14 f409 	smulbb	r4, r4, r9
 8023a3e:	fb07 8805 	mla	r8, r7, r5, r8
 8023a42:	9d08      	ldr	r5, [sp, #32]
 8023a44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023a46:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023a4a:	fb08 1805 	mla	r8, r8, r5, r1
 8023a4e:	9d05      	ldr	r5, [sp, #20]
 8023a50:	fa1f f888 	uxth.w	r8, r8
 8023a54:	f108 0101 	add.w	r1, r8, #1
 8023a58:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023a5c:	9903      	ldr	r1, [sp, #12]
 8023a5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023a62:	f881 8000 	strb.w	r8, [r1]
 8023a66:	fb03 f10a 	mul.w	r1, r3, sl
 8023a6a:	fb07 1105 	mla	r1, r7, r5, r1
 8023a6e:	9d02      	ldr	r5, [sp, #8]
 8023a70:	fb0c 1105 	mla	r1, ip, r5, r1
 8023a74:	9d07      	ldr	r5, [sp, #28]
 8023a76:	fb05 1102 	mla	r1, r5, r2, r1
 8023a7a:	9a08      	ldr	r2, [sp, #32]
 8023a7c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023a80:	fb01 0102 	mla	r1, r1, r2, r0
 8023a84:	9a03      	ldr	r2, [sp, #12]
 8023a86:	b289      	uxth	r1, r1
 8023a88:	1c48      	adds	r0, r1, #1
 8023a8a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023a8e:	1209      	asrs	r1, r1, #8
 8023a90:	7051      	strb	r1, [r2, #1]
 8023a92:	9a01      	ldr	r2, [sp, #4]
 8023a94:	4353      	muls	r3, r2
 8023a96:	9a06      	ldr	r2, [sp, #24]
 8023a98:	fb07 3702 	mla	r7, r7, r2, r3
 8023a9c:	9b08      	ldr	r3, [sp, #32]
 8023a9e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8023aa2:	fb05 c606 	mla	r6, r5, r6, ip
 8023aa6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023aaa:	fb06 4603 	mla	r6, r6, r3, r4
 8023aae:	9b03      	ldr	r3, [sp, #12]
 8023ab0:	b2b6      	uxth	r6, r6
 8023ab2:	f106 0e01 	add.w	lr, r6, #1
 8023ab6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8023aba:	1236      	asrs	r6, r6, #8
 8023abc:	709e      	strb	r6, [r3, #2]
 8023abe:	b00d      	add	sp, #52	; 0x34
 8023ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ac4:	f1bc 0f0f 	cmp.w	ip, #15
 8023ac8:	f63f af60 	bhi.w	802398c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8023acc:	4626      	mov	r6, r4
 8023ace:	4602      	mov	r2, r0
 8023ad0:	460d      	mov	r5, r1
 8023ad2:	46a6      	mov	lr, r4
 8023ad4:	9002      	str	r0, [sp, #8]
 8023ad6:	4688      	mov	r8, r1
 8023ad8:	e783      	b.n	80239e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8023ada:	bf00      	nop
 8023adc:	0802d0a7 	.word	0x0802d0a7
 8023ae0:	0802d59e 	.word	0x0802d59e
 8023ae4:	0802d170 	.word	0x0802d170

08023ae8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aec:	ed2d 8b08 	vpush	{d8-d11}
 8023af0:	b0a1      	sub	sp, #132	; 0x84
 8023af2:	eeb0 aa40 	vmov.f32	s20, s0
 8023af6:	eef0 9a60 	vmov.f32	s19, s1
 8023afa:	9307      	str	r3, [sp, #28]
 8023afc:	eeb0 9a41 	vmov.f32	s18, s2
 8023b00:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8023b04:	eeb0 8a62 	vmov.f32	s16, s5
 8023b08:	9210      	str	r2, [sp, #64]	; 0x40
 8023b0a:	eef0 8a43 	vmov.f32	s17, s6
 8023b0e:	9308      	str	r3, [sp, #32]
 8023b10:	eef0 ba44 	vmov.f32	s23, s8
 8023b14:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8023b18:	eeb0 ba64 	vmov.f32	s22, s9
 8023b1c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8023b1e:	eef0 aa45 	vmov.f32	s21, s10
 8023b22:	930a      	str	r3, [sp, #40]	; 0x28
 8023b24:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8023b28:	901f      	str	r0, [sp, #124]	; 0x7c
 8023b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8023b2c:	6850      	ldr	r0, [r2, #4]
 8023b2e:	910e      	str	r1, [sp, #56]	; 0x38
 8023b30:	6812      	ldr	r2, [r2, #0]
 8023b32:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8023b36:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8023b3a:	fb00 1303 	mla	r3, r0, r3, r1
 8023b3e:	9908      	ldr	r1, [sp, #32]
 8023b40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b44:	18d3      	adds	r3, r2, r3
 8023b46:	2203      	movs	r2, #3
 8023b48:	9309      	str	r3, [sp, #36]	; 0x24
 8023b4a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8023b50:	f06f 0304 	mvn.w	r3, #4
 8023b54:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023b58:	930d      	str	r3, [sp, #52]	; 0x34
 8023b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b5c:	43db      	mvns	r3, r3
 8023b5e:	b2db      	uxtb	r3, r3
 8023b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	dc03      	bgt.n	8023b70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8023b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	f340 81df 	ble.w	8023f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023b70:	9b07      	ldr	r3, [sp, #28]
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	f340 80f2 	ble.w	8023d5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023b78:	ea5f 4228 	movs.w	r2, r8, asr #16
 8023b7c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8023b80:	d430      	bmi.n	8023be4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023b82:	1c51      	adds	r1, r2, #1
 8023b84:	9808      	ldr	r0, [sp, #32]
 8023b86:	4281      	cmp	r1, r0
 8023b88:	da2f      	bge.n	8023bea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023b8a:	2b00      	cmp	r3, #0
 8023b8c:	db2d      	blt.n	8023bea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023b8e:	1c59      	adds	r1, r3, #1
 8023b90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023b92:	4288      	cmp	r0, r1
 8023b94:	dd29      	ble.n	8023bea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023b96:	9b07      	ldr	r3, [sp, #28]
 8023b98:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8023b9a:	3b01      	subs	r3, #1
 8023b9c:	fb02 8203 	mla	r2, r2, r3, r8
 8023ba0:	1412      	asrs	r2, r2, #16
 8023ba2:	d42d      	bmi.n	8023c00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023ba4:	3201      	adds	r2, #1
 8023ba6:	9908      	ldr	r1, [sp, #32]
 8023ba8:	4291      	cmp	r1, r2
 8023baa:	dd29      	ble.n	8023c00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023bac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8023bae:	fb02 b303 	mla	r3, r2, r3, fp
 8023bb2:	141b      	asrs	r3, r3, #16
 8023bb4:	d424      	bmi.n	8023c00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023bb6:	3301      	adds	r3, #1
 8023bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023bba:	429a      	cmp	r2, r3
 8023bbc:	dd20      	ble.n	8023c00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8023bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bc0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023bc4:	1cde      	adds	r6, r3, #3
 8023bc6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8023bca:	f1bc 0f00 	cmp.w	ip, #0
 8023bce:	f300 811f 	bgt.w	8023e10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8023bd2:	9b07      	ldr	r3, [sp, #28]
 8023bd4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023bde:	4423      	add	r3, r4
 8023be0:	9309      	str	r3, [sp, #36]	; 0x24
 8023be2:	e0bd      	b.n	8023d60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8023be4:	1c57      	adds	r7, r2, #1
 8023be6:	f040 80ae 	bne.w	8023d46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023bea:	9908      	ldr	r1, [sp, #32]
 8023bec:	428a      	cmp	r2, r1
 8023bee:	f280 80aa 	bge.w	8023d46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023bf2:	1c5e      	adds	r6, r3, #1
 8023bf4:	f2c0 80a7 	blt.w	8023d46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023bfa:	4293      	cmp	r3, r2
 8023bfc:	f280 80a3 	bge.w	8023d46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8023c00:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8023c04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023c06:	f1ba 0f00 	cmp.w	sl, #0
 8023c0a:	dde2      	ble.n	8023bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8023c0c:	ea5f 4028 	movs.w	r0, r8, asr #16
 8023c10:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8023c14:	ea4f 412b 	mov.w	r1, fp, asr #16
 8023c18:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8023c1c:	f100 80df 	bmi.w	8023dde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8023c20:	1c45      	adds	r5, r0, #1
 8023c22:	9f08      	ldr	r7, [sp, #32]
 8023c24:	42af      	cmp	r7, r5
 8023c26:	f340 80dc 	ble.w	8023de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8023c2a:	2900      	cmp	r1, #0
 8023c2c:	f2c0 80d9 	blt.w	8023de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8023c30:	1c4d      	adds	r5, r1, #1
 8023c32:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023c34:	42af      	cmp	r7, r5
 8023c36:	f340 80d4 	ble.w	8023de2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8023c3a:	9d08      	ldr	r5, [sp, #32]
 8023c3c:	fb05 0101 	mla	r1, r5, r1, r0
 8023c40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023c42:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023c46:	1845      	adds	r5, r0, r1
 8023c48:	5c40      	ldrb	r0, [r0, r1]
 8023c4a:	792f      	ldrb	r7, [r5, #4]
 8023c4c:	7869      	ldrb	r1, [r5, #1]
 8023c4e:	9711      	str	r7, [sp, #68]	; 0x44
 8023c50:	796f      	ldrb	r7, [r5, #5]
 8023c52:	f895 e002 	ldrb.w	lr, [r5, #2]
 8023c56:	f895 9003 	ldrb.w	r9, [r5, #3]
 8023c5a:	9712      	str	r7, [sp, #72]	; 0x48
 8023c5c:	b17a      	cbz	r2, 8023c7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 8023c5e:	3505      	adds	r5, #5
 8023c60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023c62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023c64:	19ef      	adds	r7, r5, r7
 8023c66:	5d2d      	ldrb	r5, [r5, r4]
 8023c68:	787c      	ldrb	r4, [r7, #1]
 8023c6a:	9513      	str	r5, [sp, #76]	; 0x4c
 8023c6c:	9415      	str	r4, [sp, #84]	; 0x54
 8023c6e:	78bc      	ldrb	r4, [r7, #2]
 8023c70:	9417      	str	r4, [sp, #92]	; 0x5c
 8023c72:	78fc      	ldrb	r4, [r7, #3]
 8023c74:	9414      	str	r4, [sp, #80]	; 0x50
 8023c76:	793c      	ldrb	r4, [r7, #4]
 8023c78:	9416      	str	r4, [sp, #88]	; 0x58
 8023c7a:	797c      	ldrb	r4, [r7, #5]
 8023c7c:	9418      	str	r4, [sp, #96]	; 0x60
 8023c7e:	b29b      	uxth	r3, r3
 8023c80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c82:	b292      	uxth	r2, r2
 8023c84:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8023c88:	fb03 f702 	mul.w	r7, r3, r2
 8023c8c:	011b      	lsls	r3, r3, #4
 8023c8e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8023c92:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8023c96:	1bdb      	subs	r3, r3, r7
 8023c98:	b292      	uxth	r2, r2
 8023c9a:	b29b      	uxth	r3, r3
 8023c9c:	ebac 0c02 	sub.w	ip, ip, r2
 8023ca0:	fb03 f909 	mul.w	r9, r3, r9
 8023ca4:	fa1f fc8c 	uxth.w	ip, ip
 8023ca8:	fb0c 9000 	mla	r0, ip, r0, r9
 8023cac:	f896 9000 	ldrb.w	r9, [r6]
 8023cb0:	fb02 0004 	mla	r0, r2, r4, r0
 8023cb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023cb6:	fb07 0004 	mla	r0, r7, r4, r0
 8023cba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023cbc:	fb19 f904 	smulbb	r9, r9, r4
 8023cc0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023cc4:	fb00 9005 	mla	r0, r0, r5, r9
 8023cc8:	b280      	uxth	r0, r0
 8023cca:	f100 0901 	add.w	r9, r0, #1
 8023cce:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8023cd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023cd4:	4358      	muls	r0, r3
 8023cd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023cda:	fb0c 0101 	mla	r1, ip, r1, r0
 8023cde:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023ce0:	f886 9000 	strb.w	r9, [r6]
 8023ce4:	fb02 1100 	mla	r1, r2, r0, r1
 8023ce8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023cea:	fb07 1100 	mla	r1, r7, r0, r1
 8023cee:	7870      	ldrb	r0, [r6, #1]
 8023cf0:	fb10 f004 	smulbb	r0, r0, r4
 8023cf4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023cf8:	fb01 0105 	mla	r1, r1, r5, r0
 8023cfc:	b289      	uxth	r1, r1
 8023cfe:	1c48      	adds	r0, r1, #1
 8023d00:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8023d04:	1209      	asrs	r1, r1, #8
 8023d06:	7071      	strb	r1, [r6, #1]
 8023d08:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023d0a:	434b      	muls	r3, r1
 8023d0c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023d0e:	fb0c 330e 	mla	r3, ip, lr, r3
 8023d12:	fb02 3201 	mla	r2, r2, r1, r3
 8023d16:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023d18:	fb07 2703 	mla	r7, r7, r3, r2
 8023d1c:	78b2      	ldrb	r2, [r6, #2]
 8023d1e:	fb12 f204 	smulbb	r2, r2, r4
 8023d22:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023d26:	fb07 2505 	mla	r5, r7, r5, r2
 8023d2a:	b2ad      	uxth	r5, r5
 8023d2c:	1c6f      	adds	r7, r5, #1
 8023d2e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8023d32:	122d      	asrs	r5, r5, #8
 8023d34:	70b5      	strb	r5, [r6, #2]
 8023d36:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023d38:	3603      	adds	r6, #3
 8023d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023d3e:	4498      	add	r8, r3
 8023d40:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023d42:	449b      	add	fp, r3
 8023d44:	e75f      	b.n	8023c06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8023d46:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023d48:	4498      	add	r8, r3
 8023d4a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023d4c:	449b      	add	fp, r3
 8023d4e:	9b07      	ldr	r3, [sp, #28]
 8023d50:	3b01      	subs	r3, #1
 8023d52:	9307      	str	r3, [sp, #28]
 8023d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d56:	3303      	adds	r3, #3
 8023d58:	9309      	str	r3, [sp, #36]	; 0x24
 8023d5a:	e709      	b.n	8023b70 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8023d5c:	f47f af1b 	bne.w	8023b96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8023d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	f340 80e3 	ble.w	8023f2e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8023d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d6c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023d6e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023d72:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023d76:	eef0 6a48 	vmov.f32	s13, s16
 8023d7a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d7e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d86:	ee16 8a90 	vmov	r8, s13
 8023d8a:	eef0 6a68 	vmov.f32	s13, s17
 8023d8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d92:	ee16 ba90 	vmov	fp, s13
 8023d96:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d9a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d9e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023da2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023da6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023daa:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023dae:	ee18 2a10 	vmov	r2, s16
 8023db2:	eeb0 8a47 	vmov.f32	s16, s14
 8023db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dba:	ee18 2a90 	vmov	r2, s17
 8023dbe:	9335      	str	r3, [sp, #212]	; 0xd4
 8023dc0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023dc2:	eef0 8a67 	vmov.f32	s17, s15
 8023dc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dca:	9336      	str	r3, [sp, #216]	; 0xd8
 8023dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023dce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023dd0:	3b01      	subs	r3, #1
 8023dd2:	930e      	str	r3, [sp, #56]	; 0x38
 8023dd4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023dd6:	bf08      	it	eq
 8023dd8:	4613      	moveq	r3, r2
 8023dda:	9307      	str	r3, [sp, #28]
 8023ddc:	e6c1      	b.n	8023b62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023dde:	1c45      	adds	r5, r0, #1
 8023de0:	d1a9      	bne.n	8023d36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023de2:	9c08      	ldr	r4, [sp, #32]
 8023de4:	42a0      	cmp	r0, r4
 8023de6:	daa6      	bge.n	8023d36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023de8:	1c4c      	adds	r4, r1, #1
 8023dea:	dba4      	blt.n	8023d36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023dec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023dee:	428c      	cmp	r4, r1
 8023df0:	dda1      	ble.n	8023d36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023df2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023df4:	9001      	str	r0, [sp, #4]
 8023df6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023df8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023dfe:	4631      	mov	r1, r6
 8023e00:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8023e04:	9300      	str	r3, [sp, #0]
 8023e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023e08:	9b08      	ldr	r3, [sp, #32]
 8023e0a:	f7ff fd5b 	bl	80238c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8023e0e:	e792      	b.n	8023d36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8023e10:	ea4f 4228 	mov.w	r2, r8, asr #16
 8023e14:	9c08      	ldr	r4, [sp, #32]
 8023e16:	ea4f 402b 	mov.w	r0, fp, asr #16
 8023e1a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8023e1e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8023e22:	fb04 2000 	mla	r0, r4, r0, r2
 8023e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023e28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023e2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e2e:	4402      	add	r2, r0
 8023e30:	5c25      	ldrb	r5, [r4, r0]
 8023e32:	7894      	ldrb	r4, [r2, #2]
 8023e34:	7850      	ldrb	r0, [r2, #1]
 8023e36:	9411      	str	r4, [sp, #68]	; 0x44
 8023e38:	7954      	ldrb	r4, [r2, #5]
 8023e3a:	f892 a003 	ldrb.w	sl, [r2, #3]
 8023e3e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8023e42:	9412      	str	r4, [sp, #72]	; 0x48
 8023e44:	b171      	cbz	r1, 8023e64 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023e46:	3205      	adds	r2, #5
 8023e48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023e4a:	1917      	adds	r7, r2, r4
 8023e4c:	5d12      	ldrb	r2, [r2, r4]
 8023e4e:	9219      	str	r2, [sp, #100]	; 0x64
 8023e50:	787a      	ldrb	r2, [r7, #1]
 8023e52:	921b      	str	r2, [sp, #108]	; 0x6c
 8023e54:	78ba      	ldrb	r2, [r7, #2]
 8023e56:	921d      	str	r2, [sp, #116]	; 0x74
 8023e58:	78fa      	ldrb	r2, [r7, #3]
 8023e5a:	921a      	str	r2, [sp, #104]	; 0x68
 8023e5c:	793a      	ldrb	r2, [r7, #4]
 8023e5e:	921c      	str	r2, [sp, #112]	; 0x70
 8023e60:	797a      	ldrb	r2, [r7, #5]
 8023e62:	921e      	str	r2, [sp, #120]	; 0x78
 8023e64:	b29b      	uxth	r3, r3
 8023e66:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8023e68:	b289      	uxth	r1, r1
 8023e6a:	3603      	adds	r6, #3
 8023e6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023e70:	fb03 f201 	mul.w	r2, r3, r1
 8023e74:	011b      	lsls	r3, r3, #4
 8023e76:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8023e7a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8023e7e:	1a9b      	subs	r3, r3, r2
 8023e80:	b289      	uxth	r1, r1
 8023e82:	b29b      	uxth	r3, r3
 8023e84:	1a7f      	subs	r7, r7, r1
 8023e86:	fb03 fa0a 	mul.w	sl, r3, sl
 8023e8a:	b2bf      	uxth	r7, r7
 8023e8c:	fb03 f909 	mul.w	r9, r3, r9
 8023e90:	fb07 a505 	mla	r5, r7, r5, sl
 8023e94:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8023e98:	fb07 9000 	mla	r0, r7, r0, r9
 8023e9c:	fb01 5504 	mla	r5, r1, r4, r5
 8023ea0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8023ea2:	fb02 5504 	mla	r5, r2, r4, r5
 8023ea6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ea8:	fb1a fa04 	smulbb	sl, sl, r4
 8023eac:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023eb0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8023eb2:	fb05 a50e 	mla	r5, r5, lr, sl
 8023eb6:	fb01 0004 	mla	r0, r1, r4, r0
 8023eba:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023ebc:	b2ad      	uxth	r5, r5
 8023ebe:	fb02 0004 	mla	r0, r2, r4, r0
 8023ec2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023ec4:	f105 0a01 	add.w	sl, r5, #1
 8023ec8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023ecc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8023ed0:	122d      	asrs	r5, r5, #8
 8023ed2:	f806 5c06 	strb.w	r5, [r6, #-6]
 8023ed6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8023eda:	fb15 f504 	smulbb	r5, r5, r4
 8023ede:	fb00 500e 	mla	r0, r0, lr, r5
 8023ee2:	b280      	uxth	r0, r0
 8023ee4:	1c45      	adds	r5, r0, #1
 8023ee6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023eea:	1200      	asrs	r0, r0, #8
 8023eec:	f806 0c05 	strb.w	r0, [r6, #-5]
 8023ef0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023ef2:	4343      	muls	r3, r0
 8023ef4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023ef6:	fb07 3300 	mla	r3, r7, r0, r3
 8023efa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023efc:	fb01 3100 	mla	r1, r1, r0, r3
 8023f00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023f02:	fb02 1203 	mla	r2, r2, r3, r1
 8023f06:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8023f0a:	fb11 f104 	smulbb	r1, r1, r4
 8023f0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023f12:	fb02 120e 	mla	r2, r2, lr, r1
 8023f16:	b292      	uxth	r2, r2
 8023f18:	1c53      	adds	r3, r2, #1
 8023f1a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023f1e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8023f20:	1212      	asrs	r2, r2, #8
 8023f22:	4498      	add	r8, r3
 8023f24:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8023f26:	f806 2c04 	strb.w	r2, [r6, #-4]
 8023f2a:	449b      	add	fp, r3
 8023f2c:	e64d      	b.n	8023bca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8023f2e:	b021      	add	sp, #132	; 0x84
 8023f30:	ecbd 8b08 	vpop	{d8-d11}
 8023f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8023f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f3c:	b085      	sub	sp, #20
 8023f3e:	784d      	ldrb	r5, [r1, #1]
 8023f40:	788e      	ldrb	r6, [r1, #2]
 8023f42:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8023f46:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8023f4a:	9403      	str	r4, [sp, #12]
 8023f4c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023f50:	780c      	ldrb	r4, [r1, #0]
 8023f52:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8023f56:	fb07 ce03 	mla	lr, r7, r3, ip
 8023f5a:	2f00      	cmp	r7, #0
 8023f5c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023f60:	eb02 0b0e 	add.w	fp, r2, lr
 8023f64:	db56      	blt.n	8024014 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8023f66:	45b9      	cmp	r9, r7
 8023f68:	dd54      	ble.n	8024014 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8023f6a:	f1bc 0f00 	cmp.w	ip, #0
 8023f6e:	db4d      	blt.n	802400c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8023f70:	4563      	cmp	r3, ip
 8023f72:	dd4b      	ble.n	802400c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8023f74:	f812 200e 	ldrb.w	r2, [r2, lr]
 8023f78:	9200      	str	r2, [sp, #0]
 8023f7a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8023f7e:	9201      	str	r2, [sp, #4]
 8023f80:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8023f84:	9202      	str	r2, [sp, #8]
 8023f86:	f11c 0201 	adds.w	r2, ip, #1
 8023f8a:	d44a      	bmi.n	8024022 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023f8c:	4293      	cmp	r3, r2
 8023f8e:	dd48      	ble.n	8024022 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023f90:	2800      	cmp	r0, #0
 8023f92:	d046      	beq.n	8024022 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8023f94:	f89b e003 	ldrb.w	lr, [fp, #3]
 8023f98:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8023f9c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8023fa0:	3701      	adds	r7, #1
 8023fa2:	d446      	bmi.n	8024032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023fa4:	45b9      	cmp	r9, r7
 8023fa6:	dd44      	ble.n	8024032 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8023fa8:	9a03      	ldr	r2, [sp, #12]
 8023faa:	2a00      	cmp	r2, #0
 8023fac:	d045      	beq.n	802403a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8023fae:	f1bc 0f00 	cmp.w	ip, #0
 8023fb2:	db3a      	blt.n	802402a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023fb4:	4563      	cmp	r3, ip
 8023fb6:	dd38      	ble.n	802402a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8023fb8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8023fbc:	f04f 0903 	mov.w	r9, #3
 8023fc0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8023fc4:	fb03 b209 	mla	r2, r3, r9, fp
 8023fc8:	fb03 b909 	mla	r9, r3, r9, fp
 8023fcc:	7852      	ldrb	r2, [r2, #1]
 8023fce:	f899 9002 	ldrb.w	r9, [r9, #2]
 8023fd2:	f11c 0c01 	adds.w	ip, ip, #1
 8023fd6:	d40d      	bmi.n	8023ff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023fd8:	4563      	cmp	r3, ip
 8023fda:	dd0b      	ble.n	8023ff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8023fdc:	b160      	cbz	r0, 8023ff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8023fde:	2603      	movs	r6, #3
 8023fe0:	fb13 6406 	smlabb	r4, r3, r6, r6
 8023fe4:	fb03 b506 	mla	r5, r3, r6, fp
 8023fe8:	fb03 b306 	mla	r3, r3, r6, fp
 8023fec:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8023ff0:	792d      	ldrb	r5, [r5, #4]
 8023ff2:	795e      	ldrb	r6, [r3, #5]
 8023ff4:	280f      	cmp	r0, #15
 8023ff6:	d802      	bhi.n	8023ffe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8023ff8:	9b03      	ldr	r3, [sp, #12]
 8023ffa:	2b0f      	cmp	r3, #15
 8023ffc:	d922      	bls.n	8024044 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8023ffe:	4b2f      	ldr	r3, [pc, #188]	; (80240bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8024000:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024004:	4a2e      	ldr	r2, [pc, #184]	; (80240c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8024006:	482f      	ldr	r0, [pc, #188]	; (80240c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8024008:	f003 ff96 	bl	8027f38 <__assert_func>
 802400c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024010:	9400      	str	r4, [sp, #0]
 8024012:	e7b8      	b.n	8023f86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8024014:	46b2      	mov	sl, r6
 8024016:	46a8      	mov	r8, r5
 8024018:	46a6      	mov	lr, r4
 802401a:	9400      	str	r4, [sp, #0]
 802401c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024020:	e7be      	b.n	8023fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8024022:	46b2      	mov	sl, r6
 8024024:	46a8      	mov	r8, r5
 8024026:	46a6      	mov	lr, r4
 8024028:	e7ba      	b.n	8023fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802402a:	46b1      	mov	r9, r6
 802402c:	462a      	mov	r2, r5
 802402e:	4627      	mov	r7, r4
 8024030:	e7cf      	b.n	8023fd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8024032:	46b1      	mov	r9, r6
 8024034:	462a      	mov	r2, r5
 8024036:	4627      	mov	r7, r4
 8024038:	e7dc      	b.n	8023ff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 802403a:	280f      	cmp	r0, #15
 802403c:	d8df      	bhi.n	8023ffe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 802403e:	46b1      	mov	r9, r6
 8024040:	462a      	mov	r2, r5
 8024042:	4627      	mov	r7, r4
 8024044:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8024048:	b280      	uxth	r0, r0
 802404a:	fb00 f30b 	mul.w	r3, r0, fp
 802404e:	0100      	lsls	r0, r0, #4
 8024050:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8024054:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8024058:	1ac0      	subs	r0, r0, r3
 802405a:	fa1f fb8b 	uxth.w	fp, fp
 802405e:	b280      	uxth	r0, r0
 8024060:	ebac 0c0b 	sub.w	ip, ip, fp
 8024064:	9003      	str	r0, [sp, #12]
 8024066:	fa1f fc8c 	uxth.w	ip, ip
 802406a:	fb00 fe0e 	mul.w	lr, r0, lr
 802406e:	9800      	ldr	r0, [sp, #0]
 8024070:	fb0c ee00 	mla	lr, ip, r0, lr
 8024074:	9803      	ldr	r0, [sp, #12]
 8024076:	fb00 f808 	mul.w	r8, r0, r8
 802407a:	9801      	ldr	r0, [sp, #4]
 802407c:	fb0b ee07 	mla	lr, fp, r7, lr
 8024080:	fb0c 8800 	mla	r8, ip, r0, r8
 8024084:	fb03 ee04 	mla	lr, r3, r4, lr
 8024088:	fb0b 8202 	mla	r2, fp, r2, r8
 802408c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024090:	fb03 2505 	mla	r5, r3, r5, r2
 8024094:	9a03      	ldr	r2, [sp, #12]
 8024096:	f881 e000 	strb.w	lr, [r1]
 802409a:	fb02 f00a 	mul.w	r0, r2, sl
 802409e:	9a02      	ldr	r2, [sp, #8]
 80240a0:	122d      	asrs	r5, r5, #8
 80240a2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80240a6:	704d      	strb	r5, [r1, #1]
 80240a8:	fb0b c909 	mla	r9, fp, r9, ip
 80240ac:	fb03 9606 	mla	r6, r3, r6, r9
 80240b0:	1236      	asrs	r6, r6, #8
 80240b2:	708e      	strb	r6, [r1, #2]
 80240b4:	b005      	add	sp, #20
 80240b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240ba:	bf00      	nop
 80240bc:	0802d0a7 	.word	0x0802d0a7
 80240c0:	0802d59e 	.word	0x0802d59e
 80240c4:	0802d170 	.word	0x0802d170

080240c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80240c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240cc:	ed2d 8b0a 	vpush	{d8-d12}
 80240d0:	b09d      	sub	sp, #116	; 0x74
 80240d2:	eeb0 aa40 	vmov.f32	s20, s0
 80240d6:	eef0 9a60 	vmov.f32	s19, s1
 80240da:	9306      	str	r3, [sp, #24]
 80240dc:	eeb0 9a41 	vmov.f32	s18, s2
 80240e0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 80240e4:	eeb0 8a62 	vmov.f32	s16, s5
 80240e8:	901b      	str	r0, [sp, #108]	; 0x6c
 80240ea:	eef0 8a43 	vmov.f32	s17, s6
 80240ee:	9307      	str	r3, [sp, #28]
 80240f0:	eeb0 ca44 	vmov.f32	s24, s8
 80240f4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 80240f8:	eef0 ba64 	vmov.f32	s23, s9
 80240fc:	eeb0 ba45 	vmov.f32	s22, s10
 8024100:	9309      	str	r3, [sp, #36]	; 0x24
 8024102:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024106:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 802410a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802410c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024110:	6850      	ldr	r0, [r2, #4]
 8024112:	6812      	ldr	r2, [r2, #0]
 8024114:	fb00 1303 	mla	r3, r0, r3, r1
 8024118:	9907      	ldr	r1, [sp, #28]
 802411a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802411e:	18d3      	adds	r3, r2, r3
 8024120:	2203      	movs	r2, #3
 8024122:	9308      	str	r3, [sp, #32]
 8024124:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024126:	681b      	ldr	r3, [r3, #0]
 8024128:	930a      	str	r3, [sp, #40]	; 0x28
 802412a:	f06f 0304 	mvn.w	r3, #4
 802412e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8024132:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024136:	930b      	str	r3, [sp, #44]	; 0x2c
 8024138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802413a:	2b00      	cmp	r3, #0
 802413c:	dc03      	bgt.n	8024146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802413e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024140:	2b00      	cmp	r3, #0
 8024142:	f340 8193 	ble.w	802446c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8024146:	9b06      	ldr	r3, [sp, #24]
 8024148:	2b00      	cmp	r3, #0
 802414a:	f340 80d0 	ble.w	80242ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 802414e:	1432      	asrs	r2, r6, #16
 8024150:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024154:	d42f      	bmi.n	80241b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8024156:	1c51      	adds	r1, r2, #1
 8024158:	9807      	ldr	r0, [sp, #28]
 802415a:	4281      	cmp	r1, r0
 802415c:	da2e      	bge.n	80241bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802415e:	2b00      	cmp	r3, #0
 8024160:	db2c      	blt.n	80241bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024162:	1c59      	adds	r1, r3, #1
 8024164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024166:	4288      	cmp	r0, r1
 8024168:	dd28      	ble.n	80241bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802416a:	9b06      	ldr	r3, [sp, #24]
 802416c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802416e:	3b01      	subs	r3, #1
 8024170:	fb02 6203 	mla	r2, r2, r3, r6
 8024174:	1412      	asrs	r2, r2, #16
 8024176:	d42c      	bmi.n	80241d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024178:	3201      	adds	r2, #1
 802417a:	9907      	ldr	r1, [sp, #28]
 802417c:	4291      	cmp	r1, r2
 802417e:	dd28      	ble.n	80241d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024180:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8024182:	fb02 5303 	mla	r3, r2, r3, r5
 8024186:	141b      	asrs	r3, r3, #16
 8024188:	d423      	bmi.n	80241d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 802418a:	3301      	adds	r3, #1
 802418c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802418e:	429a      	cmp	r2, r3
 8024190:	dd1f      	ble.n	80241d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8024192:	9b08      	ldr	r3, [sp, #32]
 8024194:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024198:	f103 0c03 	add.w	ip, r3, #3
 802419c:	f1be 0f00 	cmp.w	lr, #0
 80241a0:	f300 80fa 	bgt.w	8024398 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80241a4:	9b06      	ldr	r3, [sp, #24]
 80241a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80241aa:	9b08      	ldr	r3, [sp, #32]
 80241ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80241b0:	4423      	add	r3, r4
 80241b2:	9308      	str	r3, [sp, #32]
 80241b4:	e09d      	b.n	80242f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80241b6:	1c51      	adds	r1, r2, #1
 80241b8:	f040 808e 	bne.w	80242d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80241bc:	9907      	ldr	r1, [sp, #28]
 80241be:	428a      	cmp	r2, r1
 80241c0:	f280 808a 	bge.w	80242d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80241c4:	1c5f      	adds	r7, r3, #1
 80241c6:	f2c0 8087 	blt.w	80242d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80241ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80241cc:	4293      	cmp	r3, r2
 80241ce:	f280 8083 	bge.w	80242d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80241d2:	9f06      	ldr	r7, [sp, #24]
 80241d4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80241d8:	2f00      	cmp	r7, #0
 80241da:	dde3      	ble.n	80241a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 80241dc:	1432      	asrs	r2, r6, #16
 80241de:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80241e2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80241e6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 80241ea:	f100 80bf 	bmi.w	802436c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 80241ee:	1c50      	adds	r0, r2, #1
 80241f0:	9c07      	ldr	r4, [sp, #28]
 80241f2:	4284      	cmp	r4, r0
 80241f4:	f340 80bc 	ble.w	8024370 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80241f8:	2b00      	cmp	r3, #0
 80241fa:	f2c0 80b9 	blt.w	8024370 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 80241fe:	1c58      	adds	r0, r3, #1
 8024200:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024202:	4284      	cmp	r4, r0
 8024204:	f340 80b4 	ble.w	8024370 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8024208:	9807      	ldr	r0, [sp, #28]
 802420a:	fb00 2303 	mla	r3, r0, r3, r2
 802420e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024210:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024216:	441a      	add	r2, r3
 8024218:	f810 c003 	ldrb.w	ip, [r0, r3]
 802421c:	7953      	ldrb	r3, [r2, #5]
 802421e:	7850      	ldrb	r0, [r2, #1]
 8024220:	f892 e002 	ldrb.w	lr, [r2, #2]
 8024224:	f892 9003 	ldrb.w	r9, [r2, #3]
 8024228:	f892 8004 	ldrb.w	r8, [r2, #4]
 802422c:	930e      	str	r3, [sp, #56]	; 0x38
 802422e:	f1bb 0f00 	cmp.w	fp, #0
 8024232:	d00f      	beq.n	8024254 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8024234:	3205      	adds	r2, #5
 8024236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024238:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802423a:	18d3      	adds	r3, r2, r3
 802423c:	5d12      	ldrb	r2, [r2, r4]
 802423e:	920f      	str	r2, [sp, #60]	; 0x3c
 8024240:	785a      	ldrb	r2, [r3, #1]
 8024242:	9211      	str	r2, [sp, #68]	; 0x44
 8024244:	789a      	ldrb	r2, [r3, #2]
 8024246:	9213      	str	r2, [sp, #76]	; 0x4c
 8024248:	78da      	ldrb	r2, [r3, #3]
 802424a:	9210      	str	r2, [sp, #64]	; 0x40
 802424c:	791a      	ldrb	r2, [r3, #4]
 802424e:	795b      	ldrb	r3, [r3, #5]
 8024250:	9212      	str	r2, [sp, #72]	; 0x48
 8024252:	9314      	str	r3, [sp, #80]	; 0x50
 8024254:	b28b      	uxth	r3, r1
 8024256:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024258:	fa1f f28b 	uxth.w	r2, fp
 802425c:	fb03 fb02 	mul.w	fp, r3, r2
 8024260:	011b      	lsls	r3, r3, #4
 8024262:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8024266:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 802426a:	eba3 030b 	sub.w	r3, r3, fp
 802426e:	b292      	uxth	r2, r2
 8024270:	b29b      	uxth	r3, r3
 8024272:	1a89      	subs	r1, r1, r2
 8024274:	fb03 f808 	mul.w	r8, r3, r8
 8024278:	b289      	uxth	r1, r1
 802427a:	fb03 f909 	mul.w	r9, r3, r9
 802427e:	fb01 8800 	mla	r8, r1, r0, r8
 8024282:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024284:	fb01 990c 	mla	r9, r1, ip, r9
 8024288:	fb02 8800 	mla	r8, r2, r0, r8
 802428c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802428e:	fb02 9904 	mla	r9, r2, r4, r9
 8024292:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024294:	fb0b 8800 	mla	r8, fp, r0, r8
 8024298:	980e      	ldr	r0, [sp, #56]	; 0x38
 802429a:	fb0b 9904 	mla	r9, fp, r4, r9
 802429e:	4343      	muls	r3, r0
 80242a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80242a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80242a8:	fb01 330e 	mla	r3, r1, lr, r3
 80242ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80242ae:	f88a 9000 	strb.w	r9, [sl]
 80242b2:	fb02 3201 	mla	r2, r2, r1, r3
 80242b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80242b8:	f88a 8001 	strb.w	r8, [sl, #1]
 80242bc:	fb0b 2b03 	mla	fp, fp, r3, r2
 80242c0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80242c4:	f88a b002 	strb.w	fp, [sl, #2]
 80242c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80242ca:	f10a 0a03 	add.w	sl, sl, #3
 80242ce:	3f01      	subs	r7, #1
 80242d0:	441e      	add	r6, r3
 80242d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242d4:	441d      	add	r5, r3
 80242d6:	e77f      	b.n	80241d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80242d8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80242da:	441e      	add	r6, r3
 80242dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80242de:	441d      	add	r5, r3
 80242e0:	9b06      	ldr	r3, [sp, #24]
 80242e2:	3b01      	subs	r3, #1
 80242e4:	9306      	str	r3, [sp, #24]
 80242e6:	9b08      	ldr	r3, [sp, #32]
 80242e8:	3303      	adds	r3, #3
 80242ea:	9308      	str	r3, [sp, #32]
 80242ec:	e72b      	b.n	8024146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80242ee:	f47f af3c 	bne.w	802416a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80242f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	f340 80b9 	ble.w	802446c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 80242fa:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80242fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024300:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024304:	eef0 6a48 	vmov.f32	s13, s16
 8024308:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802430c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024310:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024314:	ee16 6a90 	vmov	r6, s13
 8024318:	eef0 6a68 	vmov.f32	s13, s17
 802431c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024320:	ee16 5a90 	vmov	r5, s13
 8024324:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024328:	ee69 7a27 	vmul.f32	s15, s18, s15
 802432c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024330:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024334:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024338:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802433c:	ee18 2a10 	vmov	r2, s16
 8024340:	eeb0 8a47 	vmov.f32	s16, s14
 8024344:	fb92 f3f3 	sdiv	r3, r2, r3
 8024348:	ee18 2a90 	vmov	r2, s17
 802434c:	9333      	str	r3, [sp, #204]	; 0xcc
 802434e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024350:	eef0 8a67 	vmov.f32	s17, s15
 8024354:	fb92 f3f3 	sdiv	r3, r2, r3
 8024358:	9334      	str	r3, [sp, #208]	; 0xd0
 802435a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802435c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802435e:	3b01      	subs	r3, #1
 8024360:	930c      	str	r3, [sp, #48]	; 0x30
 8024362:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024364:	bf08      	it	eq
 8024366:	4613      	moveq	r3, r2
 8024368:	9306      	str	r3, [sp, #24]
 802436a:	e6e5      	b.n	8024138 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802436c:	1c54      	adds	r4, r2, #1
 802436e:	d1ab      	bne.n	80242c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024370:	9807      	ldr	r0, [sp, #28]
 8024372:	4282      	cmp	r2, r0
 8024374:	daa8      	bge.n	80242c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024376:	1c58      	adds	r0, r3, #1
 8024378:	dba6      	blt.n	80242c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802437a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802437c:	4298      	cmp	r0, r3
 802437e:	dda3      	ble.n	80242c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024380:	9000      	str	r0, [sp, #0]
 8024382:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024384:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024388:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 802438c:	9b07      	ldr	r3, [sp, #28]
 802438e:	4651      	mov	r1, sl
 8024390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024392:	f7ff fdd1 	bl	8023f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8024396:	e797      	b.n	80242c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8024398:	1431      	asrs	r1, r6, #16
 802439a:	9c07      	ldr	r4, [sp, #28]
 802439c:	1428      	asrs	r0, r5, #16
 802439e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80243a2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80243a6:	fb04 1000 	mla	r0, r4, r0, r1
 80243aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80243ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80243ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80243b2:	4401      	add	r1, r0
 80243b4:	5c20      	ldrb	r0, [r4, r0]
 80243b6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80243ba:	900e      	str	r0, [sp, #56]	; 0x38
 80243bc:	f891 a003 	ldrb.w	sl, [r1, #3]
 80243c0:	7848      	ldrb	r0, [r1, #1]
 80243c2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80243c6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80243ca:	b172      	cbz	r2, 80243ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80243cc:	3105      	adds	r1, #5
 80243ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80243d0:	190f      	adds	r7, r1, r4
 80243d2:	5d09      	ldrb	r1, [r1, r4]
 80243d4:	9115      	str	r1, [sp, #84]	; 0x54
 80243d6:	7879      	ldrb	r1, [r7, #1]
 80243d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80243da:	78b9      	ldrb	r1, [r7, #2]
 80243dc:	9119      	str	r1, [sp, #100]	; 0x64
 80243de:	78f9      	ldrb	r1, [r7, #3]
 80243e0:	9116      	str	r1, [sp, #88]	; 0x58
 80243e2:	7939      	ldrb	r1, [r7, #4]
 80243e4:	9118      	str	r1, [sp, #96]	; 0x60
 80243e6:	7979      	ldrb	r1, [r7, #5]
 80243e8:	911a      	str	r1, [sp, #104]	; 0x68
 80243ea:	b29b      	uxth	r3, r3
 80243ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80243ee:	b292      	uxth	r2, r2
 80243f0:	f10c 0c03 	add.w	ip, ip, #3
 80243f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80243f8:	fb03 f102 	mul.w	r1, r3, r2
 80243fc:	011b      	lsls	r3, r3, #4
 80243fe:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8024402:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8024406:	1a5b      	subs	r3, r3, r1
 8024408:	b292      	uxth	r2, r2
 802440a:	b29b      	uxth	r3, r3
 802440c:	1abf      	subs	r7, r7, r2
 802440e:	fb03 f909 	mul.w	r9, r3, r9
 8024412:	b2bf      	uxth	r7, r7
 8024414:	fb03 fa0a 	mul.w	sl, r3, sl
 8024418:	fb03 f30b 	mul.w	r3, r3, fp
 802441c:	fb07 9900 	mla	r9, r7, r0, r9
 8024420:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024422:	fb07 aa04 	mla	sl, r7, r4, sl
 8024426:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024428:	fb02 9900 	mla	r9, r2, r0, r9
 802442c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802442e:	fb07 3308 	mla	r3, r7, r8, r3
 8024432:	fb01 9900 	mla	r9, r1, r0, r9
 8024436:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024438:	fb02 aa04 	mla	sl, r2, r4, sl
 802443c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802443e:	fb02 3200 	mla	r2, r2, r0, r3
 8024442:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024444:	fb01 aa04 	mla	sl, r1, r4, sl
 8024448:	ea4f 2929 	mov.w	r9, r9, asr #8
 802444c:	fb01 2103 	mla	r1, r1, r3, r2
 8024450:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024452:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024456:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802445a:	1209      	asrs	r1, r1, #8
 802445c:	441e      	add	r6, r3
 802445e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024460:	f80c ac06 	strb.w	sl, [ip, #-6]
 8024464:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8024468:	441d      	add	r5, r3
 802446a:	e697      	b.n	802419c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802446c:	b01d      	add	sp, #116	; 0x74
 802446e:	ecbd 8b0a 	vpop	{d8-d12}
 8024472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8024478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802447c:	b085      	sub	sp, #20
 802447e:	7888      	ldrb	r0, [r1, #2]
 8024480:	4691      	mov	r9, r2
 8024482:	9000      	str	r0, [sp, #0]
 8024484:	7848      	ldrb	r0, [r1, #1]
 8024486:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802448a:	9001      	str	r0, [sp, #4]
 802448c:	7808      	ldrb	r0, [r1, #0]
 802448e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024492:	9002      	str	r0, [sp, #8]
 8024494:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024498:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802449c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80244a0:	fb04 c603 	mla	r6, r4, r3, ip
 80244a4:	2c00      	cmp	r4, #0
 80244a6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80244aa:	9a00      	ldr	r2, [sp, #0]
 80244ac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80244b0:	9a01      	ldr	r2, [sp, #4]
 80244b2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80244b6:	db3a      	blt.n	802452e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80244b8:	45a0      	cmp	r8, r4
 80244ba:	dd38      	ble.n	802452e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80244bc:	f1bc 0f00 	cmp.w	ip, #0
 80244c0:	db33      	blt.n	802452a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80244c2:	4563      	cmp	r3, ip
 80244c4:	dd31      	ble.n	802452a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80244c6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80244ca:	f11c 0601 	adds.w	r6, ip, #1
 80244ce:	d431      	bmi.n	8024534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80244d0:	42b3      	cmp	r3, r6
 80244d2:	dd2f      	ble.n	8024534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80244d4:	b375      	cbz	r5, 8024534 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80244d6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80244da:	3401      	adds	r4, #1
 80244dc:	d42e      	bmi.n	802453c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80244de:	45a0      	cmp	r8, r4
 80244e0:	dd2c      	ble.n	802453c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80244e2:	b35f      	cbz	r7, 802453c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80244e4:	f1bc 0f00 	cmp.w	ip, #0
 80244e8:	db26      	blt.n	8024538 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80244ea:	4563      	cmp	r3, ip
 80244ec:	dd24      	ble.n	8024538 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80244ee:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80244f2:	f11c 0c01 	adds.w	ip, ip, #1
 80244f6:	d405      	bmi.n	8024504 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80244f8:	4563      	cmp	r3, ip
 80244fa:	dd03      	ble.n	8024504 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80244fc:	b115      	cbz	r5, 8024504 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80244fe:	3301      	adds	r3, #1
 8024500:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024504:	2d0f      	cmp	r5, #15
 8024506:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802450a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802450e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024512:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024516:	d801      	bhi.n	802451c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8024518:	2f0f      	cmp	r7, #15
 802451a:	d911      	bls.n	8024540 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802451c:	4b80      	ldr	r3, [pc, #512]	; (8024720 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802451e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024522:	4a80      	ldr	r2, [pc, #512]	; (8024724 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8024524:	4880      	ldr	r0, [pc, #512]	; (8024728 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8024526:	f003 fd07 	bl	8027f38 <__assert_func>
 802452a:	4602      	mov	r2, r0
 802452c:	e7cd      	b.n	80244ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802452e:	4606      	mov	r6, r0
 8024530:	4602      	mov	r2, r0
 8024532:	e7d2      	b.n	80244da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024534:	4606      	mov	r6, r0
 8024536:	e7d0      	b.n	80244da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8024538:	4604      	mov	r4, r0
 802453a:	e7da      	b.n	80244f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802453c:	4604      	mov	r4, r0
 802453e:	e7e1      	b.n	8024504 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8024540:	b2ab      	uxth	r3, r5
 8024542:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024546:	b2bf      	uxth	r7, r7
 8024548:	fb03 fe07 	mul.w	lr, r3, r7
 802454c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8024550:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024554:	eba3 0c0e 	sub.w	ip, r3, lr
 8024558:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802455c:	b2bf      	uxth	r7, r7
 802455e:	fa1f fc8c 	uxth.w	ip, ip
 8024562:	eba5 0507 	sub.w	r5, r5, r7
 8024566:	fb0c f30a 	mul.w	r3, ip, sl
 802456a:	b2ad      	uxth	r5, r5
 802456c:	fb05 330b 	mla	r3, r5, fp, r3
 8024570:	fb07 3309 	mla	r3, r7, r9, r3
 8024574:	fb0e 3308 	mla	r3, lr, r8, r3
 8024578:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802457c:	9303      	str	r3, [sp, #12]
 802457e:	d018      	beq.n	80245b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8024580:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024584:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024588:	fb0b f303 	mul.w	r3, fp, r3
 802458c:	fb0b fb02 	mul.w	fp, fp, r2
 8024590:	0a1a      	lsrs	r2, r3, #8
 8024592:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024596:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802459a:	441a      	add	r2, r3
 802459c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80245a0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80245a4:	0a12      	lsrs	r2, r2, #8
 80245a6:	0a1b      	lsrs	r3, r3, #8
 80245a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80245ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245b0:	431a      	orrs	r2, r3
 80245b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80245b6:	d019      	beq.n	80245ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80245b8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80245bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80245c0:	fb0a fb0b 	mul.w	fp, sl, fp
 80245c4:	fb0a fa06 	mul.w	sl, sl, r6
 80245c8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80245cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245d0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80245d4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245d8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80245dc:	445e      	add	r6, fp
 80245de:	0a1b      	lsrs	r3, r3, #8
 80245e0:	0a36      	lsrs	r6, r6, #8
 80245e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245e6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80245ea:	431e      	orrs	r6, r3
 80245ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80245f0:	d019      	beq.n	8024626 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80245f2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80245f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80245fa:	fb09 fa0a 	mul.w	sl, r9, sl
 80245fe:	fb09 f904 	mul.w	r9, r9, r4
 8024602:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024606:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802460a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802460e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024612:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024616:	4454      	add	r4, sl
 8024618:	0a1b      	lsrs	r3, r3, #8
 802461a:	0a24      	lsrs	r4, r4, #8
 802461c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024620:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024624:	431c      	orrs	r4, r3
 8024626:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802462a:	d019      	beq.n	8024660 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802462c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024630:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024634:	fb08 f909 	mul.w	r9, r8, r9
 8024638:	fb08 f800 	mul.w	r8, r8, r0
 802463c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024640:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024644:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024648:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802464c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024650:	4448      	add	r0, r9
 8024652:	0a1b      	lsrs	r3, r3, #8
 8024654:	0a00      	lsrs	r0, r0, #8
 8024656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802465a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802465e:	4318      	orrs	r0, r3
 8024660:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024664:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024668:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802466c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024670:	fb0c f808 	mul.w	r8, ip, r8
 8024674:	fb0c f606 	mul.w	r6, ip, r6
 8024678:	fb05 8803 	mla	r8, r5, r3, r8
 802467c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024680:	fb05 6202 	mla	r2, r5, r2, r6
 8024684:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024688:	fb07 8803 	mla	r8, r7, r3, r8
 802468c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024690:	fb07 2704 	mla	r7, r7, r4, r2
 8024694:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024698:	fb0e 8303 	mla	r3, lr, r3, r8
 802469c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80246a0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80246a4:	9803      	ldr	r0, [sp, #12]
 80246a6:	b292      	uxth	r2, r2
 80246a8:	9c02      	ldr	r4, [sp, #8]
 80246aa:	0a1b      	lsrs	r3, r3, #8
 80246ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246b0:	4350      	muls	r0, r2
 80246b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80246b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80246ba:	ea43 0e0e 	orr.w	lr, r3, lr
 80246be:	1c43      	adds	r3, r0, #1
 80246c0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80246c4:	fa5f f08e 	uxtb.w	r0, lr
 80246c8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80246cc:	b2db      	uxtb	r3, r3
 80246ce:	fb14 f403 	smulbb	r4, r4, r3
 80246d2:	fb00 4002 	mla	r0, r0, r2, r4
 80246d6:	b280      	uxth	r0, r0
 80246d8:	1c44      	adds	r4, r0, #1
 80246da:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80246de:	9c01      	ldr	r4, [sp, #4]
 80246e0:	fb14 f403 	smulbb	r4, r4, r3
 80246e4:	1200      	asrs	r0, r0, #8
 80246e6:	7008      	strb	r0, [r1, #0]
 80246e8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80246ec:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80246f0:	fb00 4002 	mla	r0, r0, r2, r4
 80246f4:	b280      	uxth	r0, r0
 80246f6:	1c44      	adds	r4, r0, #1
 80246f8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80246fc:	1200      	asrs	r0, r0, #8
 80246fe:	7048      	strb	r0, [r1, #1]
 8024700:	9800      	ldr	r0, [sp, #0]
 8024702:	fb10 f303 	smulbb	r3, r0, r3
 8024706:	fb0e 3202 	mla	r2, lr, r2, r3
 802470a:	b292      	uxth	r2, r2
 802470c:	f102 0e01 	add.w	lr, r2, #1
 8024710:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8024714:	1212      	asrs	r2, r2, #8
 8024716:	708a      	strb	r2, [r1, #2]
 8024718:	b005      	add	sp, #20
 802471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802471e:	bf00      	nop
 8024720:	0802d0a7 	.word	0x0802d0a7
 8024724:	0802d59e 	.word	0x0802d59e
 8024728:	0802d170 	.word	0x0802d170

0802472c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024730:	ed2d 8b08 	vpush	{d8-d11}
 8024734:	b099      	sub	sp, #100	; 0x64
 8024736:	eeb0 aa40 	vmov.f32	s20, s0
 802473a:	eef0 9a60 	vmov.f32	s19, s1
 802473e:	9306      	str	r3, [sp, #24]
 8024740:	eeb0 9a41 	vmov.f32	s18, s2
 8024744:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8024748:	eeb0 8a62 	vmov.f32	s16, s5
 802474c:	9216      	str	r2, [sp, #88]	; 0x58
 802474e:	eef0 8a43 	vmov.f32	s17, s6
 8024752:	9307      	str	r3, [sp, #28]
 8024754:	eef0 ba44 	vmov.f32	s23, s8
 8024758:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802475c:	eeb0 ba64 	vmov.f32	s22, s9
 8024760:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024762:	eef0 aa45 	vmov.f32	s21, s10
 8024766:	9310      	str	r3, [sp, #64]	; 0x40
 8024768:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802476c:	9017      	str	r0, [sp, #92]	; 0x5c
 802476e:	9112      	str	r1, [sp, #72]	; 0x48
 8024770:	6850      	ldr	r0, [r2, #4]
 8024772:	9315      	str	r3, [sp, #84]	; 0x54
 8024774:	6812      	ldr	r2, [r2, #0]
 8024776:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8024778:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802477c:	fb00 1303 	mla	r3, r0, r3, r1
 8024780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024784:	18d3      	adds	r3, r2, r3
 8024786:	930a      	str	r3, [sp, #40]	; 0x28
 8024788:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	9311      	str	r3, [sp, #68]	; 0x44
 802478e:	9b07      	ldr	r3, [sp, #28]
 8024790:	009b      	lsls	r3, r3, #2
 8024792:	930e      	str	r3, [sp, #56]	; 0x38
 8024794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024796:	2b00      	cmp	r3, #0
 8024798:	dc03      	bgt.n	80247a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802479a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802479c:	2b00      	cmp	r3, #0
 802479e:	f340 833b 	ble.w	8024e18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80247a2:	9b06      	ldr	r3, [sp, #24]
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	f340 8197 	ble.w	8024ad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80247aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80247ac:	1423      	asrs	r3, r4, #16
 80247ae:	1412      	asrs	r2, r2, #16
 80247b0:	d432      	bmi.n	8024818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80247b2:	1c51      	adds	r1, r2, #1
 80247b4:	9807      	ldr	r0, [sp, #28]
 80247b6:	4288      	cmp	r0, r1
 80247b8:	dd31      	ble.n	802481e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	db2f      	blt.n	802481e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80247be:	1c59      	adds	r1, r3, #1
 80247c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80247c2:	4288      	cmp	r0, r1
 80247c4:	dd2b      	ble.n	802481e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80247c6:	9b06      	ldr	r3, [sp, #24]
 80247c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80247ca:	3b01      	subs	r3, #1
 80247cc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80247ce:	fb02 1203 	mla	r2, r2, r3, r1
 80247d2:	1412      	asrs	r2, r2, #16
 80247d4:	d42e      	bmi.n	8024834 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80247d6:	3201      	adds	r2, #1
 80247d8:	9907      	ldr	r1, [sp, #28]
 80247da:	4291      	cmp	r1, r2
 80247dc:	dd2a      	ble.n	8024834 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80247de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80247e0:	fb02 4303 	mla	r3, r2, r3, r4
 80247e4:	141b      	asrs	r3, r3, #16
 80247e6:	d425      	bmi.n	8024834 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80247e8:	3301      	adds	r3, #1
 80247ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80247ec:	429a      	cmp	r2, r3
 80247ee:	dd21      	ble.n	8024834 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80247f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80247f2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80247f6:	f103 0e03 	add.w	lr, r3, #3
 80247fa:	9b06      	ldr	r3, [sp, #24]
 80247fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80247fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024800:	2b00      	cmp	r3, #0
 8024802:	f300 81d2 	bgt.w	8024baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8024806:	9b06      	ldr	r3, [sp, #24]
 8024808:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802480c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802480e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024812:	4423      	add	r3, r4
 8024814:	930a      	str	r3, [sp, #40]	; 0x28
 8024816:	e161      	b.n	8024adc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8024818:	1c51      	adds	r1, r2, #1
 802481a:	f040 8150 	bne.w	8024abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802481e:	9907      	ldr	r1, [sp, #28]
 8024820:	428a      	cmp	r2, r1
 8024822:	f280 814c 	bge.w	8024abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024826:	1c5a      	adds	r2, r3, #1
 8024828:	f2c0 8149 	blt.w	8024abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802482c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802482e:	4293      	cmp	r3, r2
 8024830:	f280 8145 	bge.w	8024abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024834:	9b06      	ldr	r3, [sp, #24]
 8024836:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024838:	9314      	str	r3, [sp, #80]	; 0x50
 802483a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802483e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024842:	2b00      	cmp	r3, #0
 8024844:	dddf      	ble.n	8024806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8024846:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024848:	1423      	asrs	r3, r4, #16
 802484a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802484e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024852:	1412      	asrs	r2, r2, #16
 8024854:	f100 8190 	bmi.w	8024b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8024858:	1c55      	adds	r5, r2, #1
 802485a:	9f07      	ldr	r7, [sp, #28]
 802485c:	42af      	cmp	r7, r5
 802485e:	f340 818d 	ble.w	8024b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024862:	2b00      	cmp	r3, #0
 8024864:	f2c0 818a 	blt.w	8024b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024868:	1c5d      	adds	r5, r3, #1
 802486a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802486c:	42af      	cmp	r7, r5
 802486e:	f340 8185 	ble.w	8024b7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8024872:	9d07      	ldr	r5, [sp, #28]
 8024874:	fb03 2305 	mla	r3, r3, r5, r2
 8024878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802487a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024882:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024886:	2800      	cmp	r0, #0
 8024888:	f000 8167 	beq.w	8024b5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802488c:	686a      	ldr	r2, [r5, #4]
 802488e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024890:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024894:	2900      	cmp	r1, #0
 8024896:	f000 8169 	beq.w	8024b6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802489a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802489c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802489e:	18aa      	adds	r2, r5, r2
 80248a0:	59ed      	ldr	r5, [r5, r7]
 80248a2:	6852      	ldr	r2, [r2, #4]
 80248a4:	9508      	str	r5, [sp, #32]
 80248a6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80248aa:	0e15      	lsrs	r5, r2, #24
 80248ac:	920c      	str	r2, [sp, #48]	; 0x30
 80248ae:	b280      	uxth	r0, r0
 80248b0:	b289      	uxth	r1, r1
 80248b2:	fb00 fb01 	mul.w	fp, r0, r1
 80248b6:	0100      	lsls	r0, r0, #4
 80248b8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80248bc:	eba0 090b 	sub.w	r9, r0, fp
 80248c0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80248c4:	b289      	uxth	r1, r1
 80248c6:	fa1f f989 	uxth.w	r9, r9
 80248ca:	1a52      	subs	r2, r2, r1
 80248cc:	fb09 f008 	mul.w	r0, r9, r8
 80248d0:	b292      	uxth	r2, r2
 80248d2:	fb02 000c 	mla	r0, r2, ip, r0
 80248d6:	fb01 000a 	mla	r0, r1, sl, r0
 80248da:	fb0b 0005 	mla	r0, fp, r5, r0
 80248de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80248e2:	2800      	cmp	r0, #0
 80248e4:	f000 80e0 	beq.w	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80248e8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80248ec:	d01b      	beq.n	8024926 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80248ee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80248f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248f6:	fb0c fe0e 	mul.w	lr, ip, lr
 80248fa:	fb0c fc03 	mul.w	ip, ip, r3
 80248fe:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024902:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024906:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802490a:	4473      	add	r3, lr
 802490c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024910:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024914:	0a1b      	lsrs	r3, r3, #8
 8024916:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802491a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802491e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024922:	ea43 030e 	orr.w	r3, r3, lr
 8024926:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802492a:	d01e      	beq.n	802496a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802492c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802492e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024932:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8024936:	fb08 fc0c 	mul.w	ip, r8, ip
 802493a:	fb08 f80e 	mul.w	r8, r8, lr
 802493e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024942:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802494a:	44e6      	add	lr, ip
 802494c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024950:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8024954:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024958:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802495c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024960:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024964:	ea4e 0708 	orr.w	r7, lr, r8
 8024968:	970b      	str	r7, [sp, #44]	; 0x2c
 802496a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802496e:	d01e      	beq.n	80249ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024970:	9f08      	ldr	r7, [sp, #32]
 8024972:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024976:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802497a:	fb0a f808 	mul.w	r8, sl, r8
 802497e:	fb0a fa0c 	mul.w	sl, sl, ip
 8024982:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024986:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802498a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802498e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024992:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024996:	44c6      	add	lr, r8
 8024998:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802499c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80249a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80249a8:	ea4e 070a 	orr.w	r7, lr, sl
 80249ac:	9708      	str	r7, [sp, #32]
 80249ae:	2dff      	cmp	r5, #255	; 0xff
 80249b0:	d01d      	beq.n	80249ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80249b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80249b4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80249b8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80249bc:	fb05 f808 	mul.w	r8, r5, r8
 80249c0:	fb05 f50c 	mul.w	r5, r5, ip
 80249c4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80249c8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80249cc:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80249d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80249d4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80249d8:	44c6      	add	lr, r8
 80249da:	0a2d      	lsrs	r5, r5, #8
 80249dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80249e0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80249e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80249e8:	ea4e 0505 	orr.w	r5, lr, r5
 80249ec:	950c      	str	r5, [sp, #48]	; 0x30
 80249ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80249f0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80249f4:	9f08      	ldr	r7, [sp, #32]
 80249f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80249fe:	fb09 f505 	mul.w	r5, r9, r5
 8024a02:	fb02 550c 	mla	r5, r2, ip, r5
 8024a06:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024a0a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024a0c:	fb01 550c 	mla	r5, r1, ip, r5
 8024a10:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024a14:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024a16:	fb0b 550c 	mla	r5, fp, ip, r5
 8024a1a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024a1e:	fb09 f90c 	mul.w	r9, r9, ip
 8024a22:	0a2d      	lsrs	r5, r5, #8
 8024a24:	fb02 9303 	mla	r3, r2, r3, r9
 8024a28:	9a08      	ldr	r2, [sp, #32]
 8024a2a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024a2e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024a34:	fb01 330e 	mla	r3, r1, lr, r3
 8024a38:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024a3c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8024a40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024a42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024a44:	4343      	muls	r3, r0
 8024a46:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024a4a:	1c58      	adds	r0, r3, #1
 8024a4c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024a50:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024a54:	ea45 050b 	orr.w	r5, r5, fp
 8024a58:	7833      	ldrb	r3, [r6, #0]
 8024a5a:	b2ea      	uxtb	r2, r5
 8024a5c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024a60:	fb12 f201 	smulbb	r2, r2, r1
 8024a64:	b2c0      	uxtb	r0, r0
 8024a66:	fb03 2300 	mla	r3, r3, r0, r2
 8024a6a:	b29b      	uxth	r3, r3
 8024a6c:	1c5a      	adds	r2, r3, #1
 8024a6e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a72:	7872      	ldrb	r2, [r6, #1]
 8024a74:	fb12 f200 	smulbb	r2, r2, r0
 8024a78:	121b      	asrs	r3, r3, #8
 8024a7a:	7033      	strb	r3, [r6, #0]
 8024a7c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024a80:	0c2d      	lsrs	r5, r5, #16
 8024a82:	fb03 2301 	mla	r3, r3, r1, r2
 8024a86:	b29b      	uxth	r3, r3
 8024a88:	1c5a      	adds	r2, r3, #1
 8024a8a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024a8e:	121b      	asrs	r3, r3, #8
 8024a90:	7073      	strb	r3, [r6, #1]
 8024a92:	78b3      	ldrb	r3, [r6, #2]
 8024a94:	fb13 f000 	smulbb	r0, r3, r0
 8024a98:	fb05 0501 	mla	r5, r5, r1, r0
 8024a9c:	b2ad      	uxth	r5, r5
 8024a9e:	1c6b      	adds	r3, r5, #1
 8024aa0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024aa4:	122d      	asrs	r5, r5, #8
 8024aa6:	70b5      	strb	r5, [r6, #2]
 8024aa8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024aaa:	3603      	adds	r6, #3
 8024aac:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024aae:	4413      	add	r3, r2
 8024ab0:	932b      	str	r3, [sp, #172]	; 0xac
 8024ab2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ab4:	441c      	add	r4, r3
 8024ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024ab8:	3b01      	subs	r3, #1
 8024aba:	9314      	str	r3, [sp, #80]	; 0x50
 8024abc:	e6c0      	b.n	8024840 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8024abe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ac0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024ac2:	4413      	add	r3, r2
 8024ac4:	932b      	str	r3, [sp, #172]	; 0xac
 8024ac6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ac8:	441c      	add	r4, r3
 8024aca:	9b06      	ldr	r3, [sp, #24]
 8024acc:	3b01      	subs	r3, #1
 8024ace:	9306      	str	r3, [sp, #24]
 8024ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ad2:	3303      	adds	r3, #3
 8024ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8024ad6:	e664      	b.n	80247a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8024ad8:	f47f ae75 	bne.w	80247c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8024adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	f340 819a 	ble.w	8024e18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8024ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024ae8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024aea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024aee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024af2:	eef0 6a48 	vmov.f32	s13, s16
 8024af6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024afa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024afe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b02:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8024b06:	eef0 6a68 	vmov.f32	s13, s17
 8024b0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024b0e:	ee16 4a90 	vmov	r4, s13
 8024b12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024b16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024b1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024b1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024b22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024b26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024b2a:	ee18 2a10 	vmov	r2, s16
 8024b2e:	eeb0 8a47 	vmov.f32	s16, s14
 8024b32:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b36:	ee18 2a90 	vmov	r2, s17
 8024b3a:	932d      	str	r3, [sp, #180]	; 0xb4
 8024b3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b3e:	eef0 8a67 	vmov.f32	s17, s15
 8024b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8024b46:	932e      	str	r3, [sp, #184]	; 0xb8
 8024b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024b4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8024b4c:	3b01      	subs	r3, #1
 8024b4e:	9312      	str	r3, [sp, #72]	; 0x48
 8024b50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b52:	bf08      	it	eq
 8024b54:	4613      	moveq	r3, r2
 8024b56:	9306      	str	r3, [sp, #24]
 8024b58:	e61c      	b.n	8024794 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024b5a:	b151      	cbz	r1, 8024b72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8024b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024b5e:	58aa      	ldr	r2, [r5, r2]
 8024b60:	25ff      	movs	r5, #255	; 0xff
 8024b62:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8024b66:	9208      	str	r2, [sp, #32]
 8024b68:	46a8      	mov	r8, r5
 8024b6a:	e6a0      	b.n	80248ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8024b6c:	25ff      	movs	r5, #255	; 0xff
 8024b6e:	46aa      	mov	sl, r5
 8024b70:	e69d      	b.n	80248ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8024b72:	25ff      	movs	r5, #255	; 0xff
 8024b74:	46aa      	mov	sl, r5
 8024b76:	e7f7      	b.n	8024b68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8024b78:	1c57      	adds	r7, r2, #1
 8024b7a:	d195      	bne.n	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024b7c:	9d07      	ldr	r5, [sp, #28]
 8024b7e:	4295      	cmp	r5, r2
 8024b80:	dd92      	ble.n	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024b82:	1c5d      	adds	r5, r3, #1
 8024b84:	db90      	blt.n	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024b86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024b88:	429d      	cmp	r5, r3
 8024b8a:	dd8d      	ble.n	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024b8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024b8e:	9201      	str	r2, [sp, #4]
 8024b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024b92:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8024b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024b98:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024b9a:	9300      	str	r3, [sp, #0]
 8024b9c:	9b07      	ldr	r3, [sp, #28]
 8024b9e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8024ba2:	4631      	mov	r1, r6
 8024ba4:	f7ff fc68 	bl	8024478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8024ba8:	e77e      	b.n	8024aa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8024baa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024bac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024bb0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024bb2:	9d07      	ldr	r5, [sp, #28]
 8024bb4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024bb8:	1412      	asrs	r2, r2, #16
 8024bba:	1423      	asrs	r3, r4, #16
 8024bbc:	fb05 2303 	mla	r3, r5, r3, r2
 8024bc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024bc2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8024bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bca:	0e1e      	lsrs	r6, r3, #24
 8024bcc:	2900      	cmp	r1, #0
 8024bce:	f000 8114 	beq.w	8024dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8024bd2:	686a      	ldr	r2, [r5, #4]
 8024bd4:	920d      	str	r2, [sp, #52]	; 0x34
 8024bd6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8024bda:	2800      	cmp	r0, #0
 8024bdc:	f000 8116 	beq.w	8024e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8024be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024be2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024be4:	18aa      	adds	r2, r5, r2
 8024be6:	59ed      	ldr	r5, [r5, r7]
 8024be8:	6852      	ldr	r2, [r2, #4]
 8024bea:	9509      	str	r5, [sp, #36]	; 0x24
 8024bec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024bf0:	0e15      	lsrs	r5, r2, #24
 8024bf2:	920f      	str	r2, [sp, #60]	; 0x3c
 8024bf4:	b289      	uxth	r1, r1
 8024bf6:	b280      	uxth	r0, r0
 8024bf8:	fb01 fa00 	mul.w	sl, r1, r0
 8024bfc:	0109      	lsls	r1, r1, #4
 8024bfe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024c02:	eba1 080a 	sub.w	r8, r1, sl
 8024c06:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8024c0a:	b280      	uxth	r0, r0
 8024c0c:	fa1f f888 	uxth.w	r8, r8
 8024c10:	1a12      	subs	r2, r2, r0
 8024c12:	fb08 f10c 	mul.w	r1, r8, ip
 8024c16:	b292      	uxth	r2, r2
 8024c18:	fb02 1106 	mla	r1, r2, r6, r1
 8024c1c:	fb00 1109 	mla	r1, r0, r9, r1
 8024c20:	fb0a 1105 	mla	r1, sl, r5, r1
 8024c24:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024c28:	2900      	cmp	r1, #0
 8024c2a:	f000 80da 	beq.w	8024de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8024c2e:	2eff      	cmp	r6, #255	; 0xff
 8024c30:	d016      	beq.n	8024c60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8024c32:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8024c36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c3a:	4377      	muls	r7, r6
 8024c3c:	435e      	muls	r6, r3
 8024c3e:	0a3b      	lsrs	r3, r7, #8
 8024c40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c48:	443b      	add	r3, r7
 8024c4a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024c4e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024c52:	0a1b      	lsrs	r3, r3, #8
 8024c54:	0a3f      	lsrs	r7, r7, #8
 8024c56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024c5a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024c5e:	433b      	orrs	r3, r7
 8024c60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c64:	d01d      	beq.n	8024ca2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8024c66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024c68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024c6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024c6e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024c72:	fb0c f606 	mul.w	r6, ip, r6
 8024c76:	fb0c fc07 	mul.w	ip, ip, r7
 8024c7a:	0a37      	lsrs	r7, r6, #8
 8024c7c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024c80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024c84:	4437      	add	r7, r6
 8024c86:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8024c8a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8024c8e:	0a3f      	lsrs	r7, r7, #8
 8024c90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c94:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024c98:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024c9c:	ea47 060c 	orr.w	r6, r7, ip
 8024ca0:	960d      	str	r6, [sp, #52]	; 0x34
 8024ca2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024ca6:	d01d      	beq.n	8024ce4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8024ca8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024caa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024cae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024cb2:	fb09 fc0c 	mul.w	ip, r9, ip
 8024cb6:	fb09 f906 	mul.w	r9, r9, r6
 8024cba:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8024cbe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024cc2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8024cc6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024cca:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8024cce:	4467      	add	r7, ip
 8024cd0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024cd4:	0a3f      	lsrs	r7, r7, #8
 8024cd6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024cda:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024cde:	ea47 0609 	orr.w	r6, r7, r9
 8024ce2:	9609      	str	r6, [sp, #36]	; 0x24
 8024ce4:	2dff      	cmp	r5, #255	; 0xff
 8024ce6:	d01a      	beq.n	8024d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8024ce8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024cea:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024cee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024cf2:	fb05 fc0c 	mul.w	ip, r5, ip
 8024cf6:	4375      	muls	r5, r6
 8024cf8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8024cfc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024d00:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8024d04:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d08:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8024d0c:	4467      	add	r7, ip
 8024d0e:	0a2d      	lsrs	r5, r5, #8
 8024d10:	0a3f      	lsrs	r7, r7, #8
 8024d12:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024d16:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024d1a:	433d      	orrs	r5, r7
 8024d1c:	950f      	str	r5, [sp, #60]	; 0x3c
 8024d1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024d20:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8024d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d28:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024d2c:	fb08 f505 	mul.w	r5, r8, r5
 8024d30:	fb02 5506 	mla	r5, r2, r6, r5
 8024d34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024d36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024d3a:	fb00 5506 	mla	r5, r0, r6, r5
 8024d3e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8024d40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024d44:	fb0a 5506 	mla	r5, sl, r6, r5
 8024d48:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024d4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024d4e:	0a2d      	lsrs	r5, r5, #8
 8024d50:	fb08 f806 	mul.w	r8, r8, r6
 8024d54:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024d58:	fb02 8303 	mla	r3, r2, r3, r8
 8024d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d5e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8024d62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024d64:	fb00 3307 	mla	r3, r0, r7, r3
 8024d68:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024d6c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8024d70:	fb01 f30b 	mul.w	r3, r1, fp
 8024d74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d78:	1c59      	adds	r1, r3, #1
 8024d7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d7e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024d82:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8024d86:	ea45 050c 	orr.w	r5, r5, ip
 8024d8a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024d8e:	b2ea      	uxtb	r2, r5
 8024d90:	b2c9      	uxtb	r1, r1
 8024d92:	fb12 f20b 	smulbb	r2, r2, fp
 8024d96:	fb03 2301 	mla	r3, r3, r1, r2
 8024d9a:	b29b      	uxth	r3, r3
 8024d9c:	1c5a      	adds	r2, r3, #1
 8024d9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024da2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8024da6:	fb12 f201 	smulbb	r2, r2, r1
 8024daa:	121b      	asrs	r3, r3, #8
 8024dac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024db0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8024db4:	0c2d      	lsrs	r5, r5, #16
 8024db6:	fb03 230b 	mla	r3, r3, fp, r2
 8024dba:	b29b      	uxth	r3, r3
 8024dbc:	1c5a      	adds	r2, r3, #1
 8024dbe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024dc2:	121b      	asrs	r3, r3, #8
 8024dc4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8024dc8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024dcc:	fb13 f101 	smulbb	r1, r3, r1
 8024dd0:	fb05 150b 	mla	r5, r5, fp, r1
 8024dd4:	b2ad      	uxth	r5, r5
 8024dd6:	1c69      	adds	r1, r5, #1
 8024dd8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8024ddc:	122d      	asrs	r5, r5, #8
 8024dde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024de2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024de4:	f10e 0e03 	add.w	lr, lr, #3
 8024de8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024dea:	4413      	add	r3, r2
 8024dec:	932b      	str	r3, [sp, #172]	; 0xac
 8024dee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024df0:	441c      	add	r4, r3
 8024df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024df4:	3b01      	subs	r3, #1
 8024df6:	9313      	str	r3, [sp, #76]	; 0x4c
 8024df8:	e501      	b.n	80247fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8024dfa:	b150      	cbz	r0, 8024e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8024dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024dfe:	58aa      	ldr	r2, [r5, r2]
 8024e00:	25ff      	movs	r5, #255	; 0xff
 8024e02:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8024e06:	9209      	str	r2, [sp, #36]	; 0x24
 8024e08:	46ac      	mov	ip, r5
 8024e0a:	e6f3      	b.n	8024bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8024e0c:	25ff      	movs	r5, #255	; 0xff
 8024e0e:	46a9      	mov	r9, r5
 8024e10:	e6f0      	b.n	8024bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8024e12:	25ff      	movs	r5, #255	; 0xff
 8024e14:	46a9      	mov	r9, r5
 8024e16:	e7f7      	b.n	8024e08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8024e18:	b019      	add	sp, #100	; 0x64
 8024e1a:	ecbd 8b08 	vpop	{d8-d11}
 8024e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024e24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8024e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e28:	b085      	sub	sp, #20
 8024e2a:	7888      	ldrb	r0, [r1, #2]
 8024e2c:	4691      	mov	r9, r2
 8024e2e:	9000      	str	r0, [sp, #0]
 8024e30:	7848      	ldrb	r0, [r1, #1]
 8024e32:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8024e36:	9001      	str	r0, [sp, #4]
 8024e38:	7808      	ldrb	r0, [r1, #0]
 8024e3a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8024e3e:	9002      	str	r0, [sp, #8]
 8024e40:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024e44:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8024e48:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8024e4c:	fb04 c603 	mla	r6, r4, r3, ip
 8024e50:	2c00      	cmp	r4, #0
 8024e52:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8024e56:	9a00      	ldr	r2, [sp, #0]
 8024e58:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024e5c:	9a01      	ldr	r2, [sp, #4]
 8024e5e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024e62:	db3a      	blt.n	8024eda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8024e64:	45a0      	cmp	r8, r4
 8024e66:	dd38      	ble.n	8024eda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8024e68:	f1bc 0f00 	cmp.w	ip, #0
 8024e6c:	db33      	blt.n	8024ed6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8024e6e:	4563      	cmp	r3, ip
 8024e70:	dd31      	ble.n	8024ed6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8024e72:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8024e76:	f11c 0601 	adds.w	r6, ip, #1
 8024e7a:	d431      	bmi.n	8024ee0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8024e7c:	42b3      	cmp	r3, r6
 8024e7e:	dd2f      	ble.n	8024ee0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8024e80:	b375      	cbz	r5, 8024ee0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8024e82:	f8de 6004 	ldr.w	r6, [lr, #4]
 8024e86:	3401      	adds	r4, #1
 8024e88:	d42e      	bmi.n	8024ee8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024e8a:	45a0      	cmp	r8, r4
 8024e8c:	dd2c      	ble.n	8024ee8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024e8e:	b35f      	cbz	r7, 8024ee8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8024e90:	f1bc 0f00 	cmp.w	ip, #0
 8024e94:	db26      	blt.n	8024ee4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8024e96:	4563      	cmp	r3, ip
 8024e98:	dd24      	ble.n	8024ee4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8024e9a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8024e9e:	f11c 0c01 	adds.w	ip, ip, #1
 8024ea2:	d405      	bmi.n	8024eb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024ea4:	4563      	cmp	r3, ip
 8024ea6:	dd03      	ble.n	8024eb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024ea8:	b115      	cbz	r5, 8024eb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024eaa:	3301      	adds	r3, #1
 8024eac:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8024eb0:	2d0f      	cmp	r5, #15
 8024eb2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024eb6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024eba:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024ebe:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024ec2:	d801      	bhi.n	8024ec8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8024ec4:	2f0f      	cmp	r7, #15
 8024ec6:	d911      	bls.n	8024eec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8024ec8:	4b77      	ldr	r3, [pc, #476]	; (80250a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8024eca:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024ece:	4a77      	ldr	r2, [pc, #476]	; (80250ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8024ed0:	4877      	ldr	r0, [pc, #476]	; (80250b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8024ed2:	f003 f831 	bl	8027f38 <__assert_func>
 8024ed6:	4602      	mov	r2, r0
 8024ed8:	e7cd      	b.n	8024e76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8024eda:	4606      	mov	r6, r0
 8024edc:	4602      	mov	r2, r0
 8024ede:	e7d2      	b.n	8024e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8024ee0:	4606      	mov	r6, r0
 8024ee2:	e7d0      	b.n	8024e86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8024ee4:	4604      	mov	r4, r0
 8024ee6:	e7da      	b.n	8024e9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8024ee8:	4604      	mov	r4, r0
 8024eea:	e7e1      	b.n	8024eb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8024eec:	b2ab      	uxth	r3, r5
 8024eee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024ef2:	b2bf      	uxth	r7, r7
 8024ef4:	fb03 fe07 	mul.w	lr, r3, r7
 8024ef8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8024efc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024f00:	eba3 0c0e 	sub.w	ip, r3, lr
 8024f04:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024f08:	b2bf      	uxth	r7, r7
 8024f0a:	fa1f fc8c 	uxth.w	ip, ip
 8024f0e:	eba5 0507 	sub.w	r5, r5, r7
 8024f12:	fb0c f30a 	mul.w	r3, ip, sl
 8024f16:	b2ad      	uxth	r5, r5
 8024f18:	fb05 330b 	mla	r3, r5, fp, r3
 8024f1c:	fb07 3309 	mla	r3, r7, r9, r3
 8024f20:	fb0e 3308 	mla	r3, lr, r8, r3
 8024f24:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024f28:	9303      	str	r3, [sp, #12]
 8024f2a:	d018      	beq.n	8024f5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8024f2c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024f30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f34:	fb0b f303 	mul.w	r3, fp, r3
 8024f38:	fb0b fb02 	mul.w	fp, fp, r2
 8024f3c:	0a1a      	lsrs	r2, r3, #8
 8024f3e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024f42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f46:	441a      	add	r2, r3
 8024f48:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024f4c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024f50:	0a12      	lsrs	r2, r2, #8
 8024f52:	0a1b      	lsrs	r3, r3, #8
 8024f54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f5c:	431a      	orrs	r2, r3
 8024f5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024f62:	d019      	beq.n	8024f98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8024f64:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024f68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024f6c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024f70:	fb0a fa06 	mul.w	sl, sl, r6
 8024f74:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024f78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f7c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024f80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f84:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024f88:	445e      	add	r6, fp
 8024f8a:	0a1b      	lsrs	r3, r3, #8
 8024f8c:	0a36      	lsrs	r6, r6, #8
 8024f8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f96:	431e      	orrs	r6, r3
 8024f98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024f9c:	d019      	beq.n	8024fd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8024f9e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024fa2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024fa6:	fb09 fa0a 	mul.w	sl, r9, sl
 8024faa:	fb09 f904 	mul.w	r9, r9, r4
 8024fae:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024fb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fb6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024fba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024fbe:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024fc2:	4454      	add	r4, sl
 8024fc4:	0a1b      	lsrs	r3, r3, #8
 8024fc6:	0a24      	lsrs	r4, r4, #8
 8024fc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fcc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024fd0:	431c      	orrs	r4, r3
 8024fd2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024fd6:	d019      	beq.n	802500c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8024fd8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024fdc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024fe0:	fb08 f909 	mul.w	r9, r8, r9
 8024fe4:	fb08 f800 	mul.w	r8, r8, r0
 8024fe8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024fec:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024ff0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024ff4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024ff8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024ffc:	4448      	add	r0, r9
 8024ffe:	0a1b      	lsrs	r3, r3, #8
 8025000:	0a00      	lsrs	r0, r0, #8
 8025002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025006:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802500a:	4318      	orrs	r0, r3
 802500c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025010:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025014:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025018:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802501c:	fb0c f808 	mul.w	r8, ip, r8
 8025020:	fb0c f606 	mul.w	r6, ip, r6
 8025024:	fb05 8803 	mla	r8, r5, r3, r8
 8025028:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 802502c:	fb05 6202 	mla	r2, r5, r2, r6
 8025030:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025034:	fb07 8803 	mla	r8, r7, r3, r8
 8025038:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802503c:	fb07 2704 	mla	r7, r7, r4, r2
 8025040:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025044:	fb0e 8303 	mla	r3, lr, r3, r8
 8025048:	fb0e 7e00 	mla	lr, lr, r0, r7
 802504c:	9802      	ldr	r0, [sp, #8]
 802504e:	0a1b      	lsrs	r3, r3, #8
 8025050:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025054:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025058:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802505c:	ea43 0e0e 	orr.w	lr, r3, lr
 8025060:	9b03      	ldr	r3, [sp, #12]
 8025062:	43db      	mvns	r3, r3
 8025064:	b2db      	uxtb	r3, r3
 8025066:	4358      	muls	r0, r3
 8025068:	1c42      	adds	r2, r0, #1
 802506a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802506e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8025072:	700a      	strb	r2, [r1, #0]
 8025074:	9a01      	ldr	r2, [sp, #4]
 8025076:	435a      	muls	r2, r3
 8025078:	1c50      	adds	r0, r2, #1
 802507a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802507e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8025082:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8025086:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802508a:	704a      	strb	r2, [r1, #1]
 802508c:	9a00      	ldr	r2, [sp, #0]
 802508e:	435a      	muls	r2, r3
 8025090:	4613      	mov	r3, r2
 8025092:	3201      	adds	r2, #1
 8025094:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025098:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 802509c:	f881 e002 	strb.w	lr, [r1, #2]
 80250a0:	b005      	add	sp, #20
 80250a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250a6:	bf00      	nop
 80250a8:	0802d0a7 	.word	0x0802d0a7
 80250ac:	0802d59e 	.word	0x0802d59e
 80250b0:	0802d170 	.word	0x0802d170

080250b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80250b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250b8:	ed2d 8b08 	vpush	{d8-d11}
 80250bc:	b097      	sub	sp, #92	; 0x5c
 80250be:	eeb0 aa40 	vmov.f32	s20, s0
 80250c2:	eef0 9a60 	vmov.f32	s19, s1
 80250c6:	9306      	str	r3, [sp, #24]
 80250c8:	eeb0 9a41 	vmov.f32	s18, s2
 80250cc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80250d0:	eeb0 8a62 	vmov.f32	s16, s5
 80250d4:	9214      	str	r2, [sp, #80]	; 0x50
 80250d6:	eef0 8a43 	vmov.f32	s17, s6
 80250da:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80250dc:	eef0 ba44 	vmov.f32	s23, s8
 80250e0:	9307      	str	r3, [sp, #28]
 80250e2:	eeb0 ba64 	vmov.f32	s22, s9
 80250e6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80250ea:	eef0 aa45 	vmov.f32	s21, s10
 80250ee:	9015      	str	r0, [sp, #84]	; 0x54
 80250f0:	9112      	str	r1, [sp, #72]	; 0x48
 80250f2:	6850      	ldr	r0, [r2, #4]
 80250f4:	9310      	str	r3, [sp, #64]	; 0x40
 80250f6:	6812      	ldr	r2, [r2, #0]
 80250f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80250fa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80250fe:	fb00 1303 	mla	r3, r0, r3, r1
 8025102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025106:	18d3      	adds	r3, r2, r3
 8025108:	930a      	str	r3, [sp, #40]	; 0x28
 802510a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802510c:	681b      	ldr	r3, [r3, #0]
 802510e:	9311      	str	r3, [sp, #68]	; 0x44
 8025110:	9b07      	ldr	r3, [sp, #28]
 8025112:	009b      	lsls	r3, r3, #2
 8025114:	930e      	str	r3, [sp, #56]	; 0x38
 8025116:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025118:	2b00      	cmp	r3, #0
 802511a:	dc03      	bgt.n	8025124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802511c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802511e:	2b00      	cmp	r3, #0
 8025120:	f340 832e 	ble.w	8025780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8025124:	9b06      	ldr	r3, [sp, #24]
 8025126:	2b00      	cmp	r3, #0
 8025128:	f340 8186 	ble.w	8025438 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 802512c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802512e:	1423      	asrs	r3, r4, #16
 8025130:	1412      	asrs	r2, r2, #16
 8025132:	d42f      	bmi.n	8025194 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8025134:	1c51      	adds	r1, r2, #1
 8025136:	9807      	ldr	r0, [sp, #28]
 8025138:	4288      	cmp	r0, r1
 802513a:	dd2e      	ble.n	802519a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802513c:	2b00      	cmp	r3, #0
 802513e:	db2c      	blt.n	802519a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025140:	1c59      	adds	r1, r3, #1
 8025142:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025144:	4288      	cmp	r0, r1
 8025146:	dd28      	ble.n	802519a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8025148:	9b06      	ldr	r3, [sp, #24]
 802514a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802514c:	3b01      	subs	r3, #1
 802514e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025150:	fb02 1203 	mla	r2, r2, r3, r1
 8025154:	1412      	asrs	r2, r2, #16
 8025156:	d42b      	bmi.n	80251b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025158:	3201      	adds	r2, #1
 802515a:	9907      	ldr	r1, [sp, #28]
 802515c:	4291      	cmp	r1, r2
 802515e:	dd27      	ble.n	80251b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025160:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025162:	fb02 4303 	mla	r3, r2, r3, r4
 8025166:	141b      	asrs	r3, r3, #16
 8025168:	d422      	bmi.n	80251b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802516a:	3301      	adds	r3, #1
 802516c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802516e:	429a      	cmp	r2, r3
 8025170:	dd1e      	ble.n	80251b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025174:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025178:	1cdd      	adds	r5, r3, #3
 802517a:	f1bb 0f00 	cmp.w	fp, #0
 802517e:	f300 81c4 	bgt.w	802550a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8025182:	9b06      	ldr	r3, [sp, #24]
 8025184:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802518a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802518e:	4423      	add	r3, r4
 8025190:	930a      	str	r3, [sp, #40]	; 0x28
 8025192:	e153      	b.n	802543c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8025194:	1c51      	adds	r1, r2, #1
 8025196:	f040 8142 	bne.w	802541e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802519a:	9907      	ldr	r1, [sp, #28]
 802519c:	428a      	cmp	r2, r1
 802519e:	f280 813e 	bge.w	802541e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80251a2:	1c5a      	adds	r2, r3, #1
 80251a4:	f2c0 813b 	blt.w	802541e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80251a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80251aa:	4293      	cmp	r3, r2
 80251ac:	f280 8137 	bge.w	802541e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80251b0:	9b06      	ldr	r3, [sp, #24]
 80251b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80251b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80251b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	dde2      	ble.n	8025182 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 80251bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80251be:	1423      	asrs	r3, r4, #16
 80251c0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80251c2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80251c6:	1409      	asrs	r1, r1, #16
 80251c8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80251cc:	f100 8187 	bmi.w	80254de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 80251d0:	1c4e      	adds	r6, r1, #1
 80251d2:	9f07      	ldr	r7, [sp, #28]
 80251d4:	42b7      	cmp	r7, r6
 80251d6:	f340 8184 	ble.w	80254e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80251da:	2b00      	cmp	r3, #0
 80251dc:	f2c0 8181 	blt.w	80254e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80251e0:	1c5e      	adds	r6, r3, #1
 80251e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80251e4:	42b7      	cmp	r7, r6
 80251e6:	f340 817c 	ble.w	80254e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80251ea:	9e07      	ldr	r6, [sp, #28]
 80251ec:	fb03 1306 	mla	r3, r3, r6, r1
 80251f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80251f2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80251f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80251fa:	0e1f      	lsrs	r7, r3, #24
 80251fc:	2a00      	cmp	r2, #0
 80251fe:	f000 815c 	beq.w	80254ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8025202:	6871      	ldr	r1, [r6, #4]
 8025204:	910b      	str	r1, [sp, #44]	; 0x2c
 8025206:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802520a:	2800      	cmp	r0, #0
 802520c:	f000 815e 	beq.w	80254cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8025210:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025212:	eb06 0c01 	add.w	ip, r6, r1
 8025216:	5876      	ldr	r6, [r6, r1]
 8025218:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802521c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025220:	9608      	str	r6, [sp, #32]
 8025222:	0e0e      	lsrs	r6, r1, #24
 8025224:	910c      	str	r1, [sp, #48]	; 0x30
 8025226:	b292      	uxth	r2, r2
 8025228:	b280      	uxth	r0, r0
 802522a:	fb02 fa00 	mul.w	sl, r2, r0
 802522e:	0112      	lsls	r2, r2, #4
 8025230:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025234:	eba2 080a 	sub.w	r8, r2, sl
 8025238:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802523c:	b280      	uxth	r0, r0
 802523e:	fa1f f888 	uxth.w	r8, r8
 8025242:	1a09      	subs	r1, r1, r0
 8025244:	fb08 f20e 	mul.w	r2, r8, lr
 8025248:	b289      	uxth	r1, r1
 802524a:	fb01 2207 	mla	r2, r1, r7, r2
 802524e:	fb00 2209 	mla	r2, r0, r9, r2
 8025252:	fb0a 2206 	mla	r2, sl, r6, r2
 8025256:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802525a:	2a00      	cmp	r2, #0
 802525c:	f000 80d4 	beq.w	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8025260:	2fff      	cmp	r7, #255	; 0xff
 8025262:	d01a      	beq.n	802529a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8025264:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802526c:	fb07 fc0c 	mul.w	ip, r7, ip
 8025270:	435f      	muls	r7, r3
 8025272:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025276:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802527a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 802527e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025282:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8025286:	4463      	add	r3, ip
 8025288:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802528c:	0a1b      	lsrs	r3, r3, #8
 802528e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025292:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025296:	ea43 030b 	orr.w	r3, r3, fp
 802529a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802529e:	d01e      	beq.n	80252de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80252a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80252a2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80252a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252aa:	fb0e fb0b 	mul.w	fp, lr, fp
 80252ae:	fb0e fe07 	mul.w	lr, lr, r7
 80252b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80252b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80252ba:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80252be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252c2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80252c6:	44dc      	add	ip, fp
 80252c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80252d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252d8:	ea4c 070e 	orr.w	r7, ip, lr
 80252dc:	970b      	str	r7, [sp, #44]	; 0x2c
 80252de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80252e2:	d01e      	beq.n	8025322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80252e4:	9f08      	ldr	r7, [sp, #32]
 80252e6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80252ea:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252ee:	fb09 fe0e 	mul.w	lr, r9, lr
 80252f2:	fb09 f907 	mul.w	r9, r9, r7
 80252f6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80252fa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80252fe:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025306:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802530a:	44f4      	add	ip, lr
 802530c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025314:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802531c:	ea4c 0709 	orr.w	r7, ip, r9
 8025320:	9708      	str	r7, [sp, #32]
 8025322:	2eff      	cmp	r6, #255	; 0xff
 8025324:	d01c      	beq.n	8025360 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8025326:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025328:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802532c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025330:	fb06 fe0e 	mul.w	lr, r6, lr
 8025334:	437e      	muls	r6, r7
 8025336:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802533a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802533e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025342:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025346:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802534a:	44f4      	add	ip, lr
 802534c:	0a36      	lsrs	r6, r6, #8
 802534e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025352:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025356:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802535a:	ea4c 0606 	orr.w	r6, ip, r6
 802535e:	960c      	str	r6, [sp, #48]	; 0x30
 8025360:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8025362:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8025366:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802536a:	2aff      	cmp	r2, #255	; 0xff
 802536c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025370:	fb08 f606 	mul.w	r6, r8, r6
 8025374:	fb01 6607 	mla	r6, r1, r7, r6
 8025378:	9f08      	ldr	r7, [sp, #32]
 802537a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802537e:	fb00 6607 	mla	r6, r0, r7, r6
 8025382:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025384:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025388:	fb0a 6607 	mla	r6, sl, r7, r6
 802538c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802538e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025392:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8025396:	fb08 f807 	mul.w	r8, r8, r7
 802539a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802539e:	fb01 8303 	mla	r3, r1, r3, r8
 80253a2:	9908      	ldr	r1, [sp, #32]
 80253a4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80253a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80253aa:	fb00 330c 	mla	r3, r0, ip, r3
 80253ae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80253b2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80253b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80253be:	ea46 060a 	orr.w	r6, r6, sl
 80253c2:	b2f0      	uxtb	r0, r6
 80253c4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80253c8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80253cc:	f000 8084 	beq.w	80254d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80253d0:	43d2      	mvns	r2, r2
 80253d2:	782b      	ldrb	r3, [r5, #0]
 80253d4:	b2d2      	uxtb	r2, r2
 80253d6:	fb03 f702 	mul.w	r7, r3, r2
 80253da:	1c7b      	adds	r3, r7, #1
 80253dc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80253e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80253e4:	702b      	strb	r3, [r5, #0]
 80253e6:	786b      	ldrb	r3, [r5, #1]
 80253e8:	fb03 f002 	mul.w	r0, r3, r2
 80253ec:	1c43      	adds	r3, r0, #1
 80253ee:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80253f2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80253f6:	706b      	strb	r3, [r5, #1]
 80253f8:	78ab      	ldrb	r3, [r5, #2]
 80253fa:	4353      	muls	r3, r2
 80253fc:	1c5a      	adds	r2, r3, #1
 80253fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025402:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025406:	70ae      	strb	r6, [r5, #2]
 8025408:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802540a:	3503      	adds	r5, #3
 802540c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802540e:	4413      	add	r3, r2
 8025410:	9329      	str	r3, [sp, #164]	; 0xa4
 8025412:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025414:	441c      	add	r4, r3
 8025416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025418:	3b01      	subs	r3, #1
 802541a:	9313      	str	r3, [sp, #76]	; 0x4c
 802541c:	e6cb      	b.n	80251b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802541e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025420:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025422:	4413      	add	r3, r2
 8025424:	9329      	str	r3, [sp, #164]	; 0xa4
 8025426:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025428:	441c      	add	r4, r3
 802542a:	9b06      	ldr	r3, [sp, #24]
 802542c:	3b01      	subs	r3, #1
 802542e:	9306      	str	r3, [sp, #24]
 8025430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025432:	3303      	adds	r3, #3
 8025434:	930a      	str	r3, [sp, #40]	; 0x28
 8025436:	e675      	b.n	8025124 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025438:	f47f ae86 	bne.w	8025148 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802543c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802543e:	2b00      	cmp	r3, #0
 8025440:	f340 819e 	ble.w	8025780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8025444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025448:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802544a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802544e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025452:	eef0 6a48 	vmov.f32	s13, s16
 8025456:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802545a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802545e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025462:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025466:	eef0 6a68 	vmov.f32	s13, s17
 802546a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802546e:	ee16 4a90 	vmov	r4, s13
 8025472:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025476:	ee69 7a27 	vmul.f32	s15, s18, s15
 802547a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802547e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025482:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025486:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802548a:	ee18 2a10 	vmov	r2, s16
 802548e:	eeb0 8a47 	vmov.f32	s16, s14
 8025492:	fb92 f3f3 	sdiv	r3, r2, r3
 8025496:	ee18 2a90 	vmov	r2, s17
 802549a:	932b      	str	r3, [sp, #172]	; 0xac
 802549c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802549e:	eef0 8a67 	vmov.f32	s17, s15
 80254a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80254a6:	932c      	str	r3, [sp, #176]	; 0xb0
 80254a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80254aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80254ac:	3b01      	subs	r3, #1
 80254ae:	9312      	str	r3, [sp, #72]	; 0x48
 80254b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80254b2:	bf08      	it	eq
 80254b4:	4613      	moveq	r3, r2
 80254b6:	9306      	str	r3, [sp, #24]
 80254b8:	e62d      	b.n	8025116 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80254ba:	b150      	cbz	r0, 80254d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80254bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80254be:	5871      	ldr	r1, [r6, r1]
 80254c0:	26ff      	movs	r6, #255	; 0xff
 80254c2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80254c6:	9108      	str	r1, [sp, #32]
 80254c8:	46b6      	mov	lr, r6
 80254ca:	e6ac      	b.n	8025226 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80254cc:	26ff      	movs	r6, #255	; 0xff
 80254ce:	46b1      	mov	r9, r6
 80254d0:	e6a9      	b.n	8025226 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80254d2:	26ff      	movs	r6, #255	; 0xff
 80254d4:	46b1      	mov	r9, r6
 80254d6:	e7f7      	b.n	80254c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80254d8:	7028      	strb	r0, [r5, #0]
 80254da:	7069      	strb	r1, [r5, #1]
 80254dc:	e793      	b.n	8025406 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80254de:	1c4f      	adds	r7, r1, #1
 80254e0:	d192      	bne.n	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80254e2:	9e07      	ldr	r6, [sp, #28]
 80254e4:	428e      	cmp	r6, r1
 80254e6:	dd8f      	ble.n	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80254e8:	1c5e      	adds	r6, r3, #1
 80254ea:	db8d      	blt.n	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80254ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80254ee:	429e      	cmp	r6, r3
 80254f0:	dd8a      	ble.n	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80254f2:	9600      	str	r6, [sp, #0]
 80254f4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80254f8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80254fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80254fe:	4629      	mov	r1, r5
 8025500:	9b07      	ldr	r3, [sp, #28]
 8025502:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025504:	f7ff fc8e 	bl	8024e24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8025508:	e77e      	b.n	8025408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802550a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802550c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025510:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025512:	9e07      	ldr	r6, [sp, #28]
 8025514:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025518:	1409      	asrs	r1, r1, #16
 802551a:	1423      	asrs	r3, r4, #16
 802551c:	fb06 1303 	mla	r3, r6, r3, r1
 8025520:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025522:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8025526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802552a:	0e1f      	lsrs	r7, r3, #24
 802552c:	2a00      	cmp	r2, #0
 802552e:	f000 8113 	beq.w	8025758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8025532:	6871      	ldr	r1, [r6, #4]
 8025534:	910d      	str	r1, [sp, #52]	; 0x34
 8025536:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802553a:	2800      	cmp	r0, #0
 802553c:	f000 8115 	beq.w	802576a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8025540:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025542:	eb06 0c01 	add.w	ip, r6, r1
 8025546:	5876      	ldr	r6, [r6, r1]
 8025548:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802554c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8025550:	9609      	str	r6, [sp, #36]	; 0x24
 8025552:	0e0e      	lsrs	r6, r1, #24
 8025554:	910f      	str	r1, [sp, #60]	; 0x3c
 8025556:	b292      	uxth	r2, r2
 8025558:	b280      	uxth	r0, r0
 802555a:	fb02 fa00 	mul.w	sl, r2, r0
 802555e:	0112      	lsls	r2, r2, #4
 8025560:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025564:	eba2 080a 	sub.w	r8, r2, sl
 8025568:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802556c:	b280      	uxth	r0, r0
 802556e:	fa1f f888 	uxth.w	r8, r8
 8025572:	1a09      	subs	r1, r1, r0
 8025574:	fb08 f20e 	mul.w	r2, r8, lr
 8025578:	b289      	uxth	r1, r1
 802557a:	fb01 2207 	mla	r2, r1, r7, r2
 802557e:	fb00 2209 	mla	r2, r0, r9, r2
 8025582:	fb0a 2206 	mla	r2, sl, r6, r2
 8025586:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802558a:	2a00      	cmp	r2, #0
 802558c:	f000 80da 	beq.w	8025744 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8025590:	2fff      	cmp	r7, #255	; 0xff
 8025592:	d01a      	beq.n	80255ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8025594:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802559c:	fb07 fc0c 	mul.w	ip, r7, ip
 80255a0:	435f      	muls	r7, r3
 80255a2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80255a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80255aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255ae:	4463      	add	r3, ip
 80255b0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80255b4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80255b8:	0a1b      	lsrs	r3, r3, #8
 80255ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80255c6:	ea43 030c 	orr.w	r3, r3, ip
 80255ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80255ce:	d021      	beq.n	8025614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80255d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80255d2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80255d6:	fb0e f707 	mul.w	r7, lr, r7
 80255da:	9713      	str	r7, [sp, #76]	; 0x4c
 80255dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80255de:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80255e2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80255e4:	fb0e fe0c 	mul.w	lr, lr, ip
 80255e8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80255ec:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80255f4:	44bc      	add	ip, r7
 80255f6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80255fa:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80255fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025606:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802560a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802560e:	ea4c 070e 	orr.w	r7, ip, lr
 8025612:	970d      	str	r7, [sp, #52]	; 0x34
 8025614:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025618:	d01e      	beq.n	8025658 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802561a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802561c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025620:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025624:	fb09 fe0e 	mul.w	lr, r9, lr
 8025628:	fb09 f907 	mul.w	r9, r9, r7
 802562c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025630:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025634:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8025638:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802563c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8025640:	44f4      	add	ip, lr
 8025642:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025646:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802564a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802564e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025652:	ea4c 0709 	orr.w	r7, ip, r9
 8025656:	9709      	str	r7, [sp, #36]	; 0x24
 8025658:	2eff      	cmp	r6, #255	; 0xff
 802565a:	d01c      	beq.n	8025696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802565c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802565e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025662:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025666:	fb06 fe0e 	mul.w	lr, r6, lr
 802566a:	437e      	muls	r6, r7
 802566c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025670:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025674:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8025678:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802567c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025680:	44f4      	add	ip, lr
 8025682:	0a36      	lsrs	r6, r6, #8
 8025684:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025688:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802568c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025690:	ea4c 0606 	orr.w	r6, ip, r6
 8025694:	960f      	str	r6, [sp, #60]	; 0x3c
 8025696:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025698:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802569c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256a0:	2aff      	cmp	r2, #255	; 0xff
 80256a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80256a6:	fb08 f606 	mul.w	r6, r8, r6
 80256aa:	fb01 6607 	mla	r6, r1, r7, r6
 80256ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80256b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80256b4:	fb00 6607 	mla	r6, r0, r7, r6
 80256b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80256ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80256be:	fb0a 6607 	mla	r6, sl, r7, r6
 80256c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80256c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80256c8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80256cc:	fb08 f807 	mul.w	r8, r8, r7
 80256d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80256d4:	fb01 8303 	mla	r3, r1, r3, r8
 80256d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80256da:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80256de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80256e0:	fb00 330c 	mla	r3, r0, ip, r3
 80256e4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80256e8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80256ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80256f4:	ea46 060e 	orr.w	r6, r6, lr
 80256f8:	b2f0      	uxtb	r0, r6
 80256fa:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80256fe:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8025702:	d038      	beq.n	8025776 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8025704:	43d2      	mvns	r2, r2
 8025706:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802570a:	b2d2      	uxtb	r2, r2
 802570c:	4357      	muls	r7, r2
 802570e:	1c7b      	adds	r3, r7, #1
 8025710:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8025714:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8025718:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 802571c:	4350      	muls	r0, r2
 802571e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8025722:	1c43      	adds	r3, r0, #1
 8025724:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025728:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802572c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025730:	4353      	muls	r3, r2
 8025732:	f805 1c02 	strb.w	r1, [r5, #-2]
 8025736:	1c5a      	adds	r2, r3, #1
 8025738:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802573c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8025740:	f805 6c01 	strb.w	r6, [r5, #-1]
 8025744:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025746:	3503      	adds	r5, #3
 8025748:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802574a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802574e:	4413      	add	r3, r2
 8025750:	9329      	str	r3, [sp, #164]	; 0xa4
 8025752:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025754:	441c      	add	r4, r3
 8025756:	e510      	b.n	802517a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8025758:	b150      	cbz	r0, 8025770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802575a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802575c:	5871      	ldr	r1, [r6, r1]
 802575e:	26ff      	movs	r6, #255	; 0xff
 8025760:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8025764:	9109      	str	r1, [sp, #36]	; 0x24
 8025766:	46b6      	mov	lr, r6
 8025768:	e6f5      	b.n	8025556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802576a:	26ff      	movs	r6, #255	; 0xff
 802576c:	46b1      	mov	r9, r6
 802576e:	e6f2      	b.n	8025556 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8025770:	26ff      	movs	r6, #255	; 0xff
 8025772:	46b1      	mov	r9, r6
 8025774:	e7f7      	b.n	8025766 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8025776:	f805 0c03 	strb.w	r0, [r5, #-3]
 802577a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802577e:	e7df      	b.n	8025740 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8025780:	b017      	add	sp, #92	; 0x5c
 8025782:	ecbd 8b08 	vpop	{d8-d11}
 8025786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802578c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802578c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025790:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025794:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025798:	2800      	cmp	r0, #0
 802579a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802579e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80257a2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80257a6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80257aa:	db6b      	blt.n	8025884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80257ac:	4580      	cmp	r8, r0
 80257ae:	dd69      	ble.n	8025884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80257b0:	f1bc 0f00 	cmp.w	ip, #0
 80257b4:	db66      	blt.n	8025884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80257b6:	45e1      	cmp	r9, ip
 80257b8:	dd64      	ble.n	8025884 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80257ba:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80257be:	f01e 0f01 	tst.w	lr, #1
 80257c2:	5d16      	ldrb	r6, [r2, r4]
 80257c4:	bf0c      	ite	eq
 80257c6:	f006 060f 	andeq.w	r6, r6, #15
 80257ca:	1136      	asrne	r6, r6, #4
 80257cc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80257d0:	b2f6      	uxtb	r6, r6
 80257d2:	f110 0a01 	adds.w	sl, r0, #1
 80257d6:	d457      	bmi.n	8025888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80257d8:	45d0      	cmp	r8, sl
 80257da:	dd55      	ble.n	8025888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80257dc:	f1bc 0f00 	cmp.w	ip, #0
 80257e0:	db52      	blt.n	8025888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80257e2:	45e1      	cmp	r9, ip
 80257e4:	dd50      	ble.n	8025888 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80257e6:	2f00      	cmp	r7, #0
 80257e8:	f000 80ac 	beq.w	8025944 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80257ec:	f10e 0b01 	add.w	fp, lr, #1
 80257f0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80257f4:	f01b 0f01 	tst.w	fp, #1
 80257f8:	5d14      	ldrb	r4, [r2, r4]
 80257fa:	bf0c      	ite	eq
 80257fc:	f004 040f 	andeq.w	r4, r4, #15
 8025800:	1124      	asrne	r4, r4, #4
 8025802:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025806:	b2e4      	uxtb	r4, r4
 8025808:	2d00      	cmp	r5, #0
 802580a:	f000 8096 	beq.w	802593a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802580e:	2800      	cmp	r0, #0
 8025810:	f10c 0c01 	add.w	ip, ip, #1
 8025814:	db3c      	blt.n	8025890 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025816:	4580      	cmp	r8, r0
 8025818:	dd3a      	ble.n	8025890 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802581a:	f1bc 0f00 	cmp.w	ip, #0
 802581e:	db37      	blt.n	8025890 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025820:	45e1      	cmp	r9, ip
 8025822:	dd35      	ble.n	8025890 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8025824:	eb03 0b0e 	add.w	fp, r3, lr
 8025828:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802582c:	f01b 0f01 	tst.w	fp, #1
 8025830:	5c10      	ldrb	r0, [r2, r0]
 8025832:	bf0c      	ite	eq
 8025834:	f000 000f 	andeq.w	r0, r0, #15
 8025838:	1100      	asrne	r0, r0, #4
 802583a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802583e:	b2c0      	uxtb	r0, r0
 8025840:	f1ba 0f00 	cmp.w	sl, #0
 8025844:	db26      	blt.n	8025894 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025846:	45d0      	cmp	r8, sl
 8025848:	dd24      	ble.n	8025894 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802584a:	f1bc 0f00 	cmp.w	ip, #0
 802584e:	db21      	blt.n	8025894 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025850:	45e1      	cmp	r9, ip
 8025852:	dd1f      	ble.n	8025894 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8025854:	b307      	cbz	r7, 8025898 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8025856:	3301      	adds	r3, #1
 8025858:	449e      	add	lr, r3
 802585a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802585e:	f01e 0f01 	tst.w	lr, #1
 8025862:	5cd3      	ldrb	r3, [r2, r3]
 8025864:	bf0c      	ite	eq
 8025866:	f003 030f 	andeq.w	r3, r3, #15
 802586a:	111b      	asrne	r3, r3, #4
 802586c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025870:	b2db      	uxtb	r3, r3
 8025872:	2f0f      	cmp	r7, #15
 8025874:	d911      	bls.n	802589a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8025876:	4b35      	ldr	r3, [pc, #212]	; (802594c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8025878:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802587c:	4a34      	ldr	r2, [pc, #208]	; (8025950 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802587e:	4835      	ldr	r0, [pc, #212]	; (8025954 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8025880:	f002 fb5a 	bl	8027f38 <__assert_func>
 8025884:	2600      	movs	r6, #0
 8025886:	e7a4      	b.n	80257d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8025888:	2400      	movs	r4, #0
 802588a:	e7bd      	b.n	8025808 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802588c:	463c      	mov	r4, r7
 802588e:	e7be      	b.n	802580e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8025890:	2000      	movs	r0, #0
 8025892:	e7d5      	b.n	8025840 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8025894:	2300      	movs	r3, #0
 8025896:	e7ec      	b.n	8025872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8025898:	463b      	mov	r3, r7
 802589a:	2d0f      	cmp	r5, #15
 802589c:	d8eb      	bhi.n	8025876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802589e:	b2bf      	uxth	r7, r7
 80258a0:	b2ad      	uxth	r5, r5
 80258a2:	fb07 f205 	mul.w	r2, r7, r5
 80258a6:	013f      	lsls	r7, r7, #4
 80258a8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80258ac:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80258b0:	1abf      	subs	r7, r7, r2
 80258b2:	b2ad      	uxth	r5, r5
 80258b4:	b2bf      	uxth	r7, r7
 80258b6:	ebac 0c05 	sub.w	ip, ip, r5
 80258ba:	437c      	muls	r4, r7
 80258bc:	fa1f fc8c 	uxth.w	ip, ip
 80258c0:	fb06 440c 	mla	r4, r6, ip, r4
 80258c4:	fb05 4400 	mla	r4, r5, r0, r4
 80258c8:	fb02 4203 	mla	r2, r2, r3, r4
 80258cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80258d0:	b38a      	cbz	r2, 8025936 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80258d2:	4b21      	ldr	r3, [pc, #132]	; (8025958 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80258d4:	681c      	ldr	r4, [r3, #0]
 80258d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80258da:	b2e5      	uxtb	r5, r4
 80258dc:	4353      	muls	r3, r2
 80258de:	1c5a      	adds	r2, r3, #1
 80258e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80258e4:	1212      	asrs	r2, r2, #8
 80258e6:	b290      	uxth	r0, r2
 80258e8:	43d2      	mvns	r2, r2
 80258ea:	fb15 f500 	smulbb	r5, r5, r0
 80258ee:	b2d3      	uxtb	r3, r2
 80258f0:	780a      	ldrb	r2, [r1, #0]
 80258f2:	fb02 5203 	mla	r2, r2, r3, r5
 80258f6:	b292      	uxth	r2, r2
 80258f8:	1c55      	adds	r5, r2, #1
 80258fa:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80258fe:	784d      	ldrb	r5, [r1, #1]
 8025900:	fb15 f503 	smulbb	r5, r5, r3
 8025904:	1212      	asrs	r2, r2, #8
 8025906:	700a      	strb	r2, [r1, #0]
 8025908:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802590c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025910:	fb02 5200 	mla	r2, r2, r0, r5
 8025914:	b292      	uxth	r2, r2
 8025916:	1c55      	adds	r5, r2, #1
 8025918:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802591c:	1212      	asrs	r2, r2, #8
 802591e:	704a      	strb	r2, [r1, #1]
 8025920:	788a      	ldrb	r2, [r1, #2]
 8025922:	fb12 f303 	smulbb	r3, r2, r3
 8025926:	fb04 3300 	mla	r3, r4, r0, r3
 802592a:	b29b      	uxth	r3, r3
 802592c:	1c5a      	adds	r2, r3, #1
 802592e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025932:	121b      	asrs	r3, r3, #8
 8025934:	708b      	strb	r3, [r1, #2]
 8025936:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802593a:	2f0f      	cmp	r7, #15
 802593c:	d89b      	bhi.n	8025876 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802593e:	462b      	mov	r3, r5
 8025940:	4628      	mov	r0, r5
 8025942:	e7ac      	b.n	802589e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8025944:	2d00      	cmp	r5, #0
 8025946:	d1a1      	bne.n	802588c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8025948:	462c      	mov	r4, r5
 802594a:	e7f8      	b.n	802593e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802594c:	0802d0a7 	.word	0x0802d0a7
 8025950:	0802d59e 	.word	0x0802d59e
 8025954:	0802d170 	.word	0x0802d170
 8025958:	2000bf14 	.word	0x2000bf14

0802595c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025960:	ed2d 8b08 	vpush	{d8-d11}
 8025964:	b097      	sub	sp, #92	; 0x5c
 8025966:	eeb0 aa40 	vmov.f32	s20, s0
 802596a:	eef0 9a60 	vmov.f32	s19, s1
 802596e:	9308      	str	r3, [sp, #32]
 8025970:	eeb0 9a41 	vmov.f32	s18, s2
 8025974:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025978:	eeb0 8a62 	vmov.f32	s16, s5
 802597c:	9214      	str	r2, [sp, #80]	; 0x50
 802597e:	eef0 8a43 	vmov.f32	s17, s6
 8025982:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025984:	eef0 ba44 	vmov.f32	s23, s8
 8025988:	9309      	str	r3, [sp, #36]	; 0x24
 802598a:	eeb0 ba64 	vmov.f32	s22, s9
 802598e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8025992:	eef0 aa45 	vmov.f32	s21, s10
 8025996:	9015      	str	r0, [sp, #84]	; 0x54
 8025998:	910c      	str	r1, [sp, #48]	; 0x30
 802599a:	930e      	str	r3, [sp, #56]	; 0x38
 802599c:	6850      	ldr	r0, [r2, #4]
 802599e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80259a2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80259a6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80259aa:	fb00 1803 	mla	r8, r0, r3, r1
 80259ae:	6813      	ldr	r3, [r2, #0]
 80259b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80259b4:	4498      	add	r8, r3
 80259b6:	f10b 0301 	add.w	r3, fp, #1
 80259ba:	f023 0301 	bic.w	r3, r3, #1
 80259be:	930f      	str	r3, [sp, #60]	; 0x3c
 80259c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80259c2:	681f      	ldr	r7, [r3, #0]
 80259c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	dc03      	bgt.n	80259d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80259ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	f340 8238 	ble.w	8025e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80259d2:	9b08      	ldr	r3, [sp, #32]
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	f340 810c 	ble.w	8025bf2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80259da:	142a      	asrs	r2, r5, #16
 80259dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80259e0:	d42c      	bmi.n	8025a3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80259e2:	1c51      	adds	r1, r2, #1
 80259e4:	458b      	cmp	fp, r1
 80259e6:	dd2c      	ble.n	8025a42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	db2a      	blt.n	8025a42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80259ec:	1c59      	adds	r1, r3, #1
 80259ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80259f0:	4288      	cmp	r0, r1
 80259f2:	dd26      	ble.n	8025a42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80259f4:	9b08      	ldr	r3, [sp, #32]
 80259f6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80259f8:	3b01      	subs	r3, #1
 80259fa:	fb02 5203 	mla	r2, r2, r3, r5
 80259fe:	1412      	asrs	r2, r2, #16
 8025a00:	d429      	bmi.n	8025a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025a02:	3201      	adds	r2, #1
 8025a04:	4593      	cmp	fp, r2
 8025a06:	dd26      	ble.n	8025a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025a08:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025a0a:	fb02 6303 	mla	r3, r2, r3, r6
 8025a0e:	141b      	asrs	r3, r3, #16
 8025a10:	d421      	bmi.n	8025a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025a12:	3301      	adds	r3, #1
 8025a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a16:	429a      	cmp	r2, r3
 8025a18:	dd1d      	ble.n	8025a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8025a1a:	f108 0e03 	add.w	lr, r8, #3
 8025a1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025a22:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025a26:	f1b9 0f00 	cmp.w	r9, #0
 8025a2a:	f300 814f 	bgt.w	8025ccc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8025a2e:	9b08      	ldr	r3, [sp, #32]
 8025a30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025a34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025a38:	44a0      	add	r8, r4
 8025a3a:	e0dc      	b.n	8025bf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8025a3c:	1c51      	adds	r1, r2, #1
 8025a3e:	f040 80ce 	bne.w	8025bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025a42:	4593      	cmp	fp, r2
 8025a44:	f340 80cb 	ble.w	8025bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025a48:	1c5a      	adds	r2, r3, #1
 8025a4a:	f2c0 80c8 	blt.w	8025bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a50:	4293      	cmp	r3, r2
 8025a52:	f280 80c4 	bge.w	8025bde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8025a56:	9b08      	ldr	r3, [sp, #32]
 8025a58:	46c1      	mov	r9, r8
 8025a5a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8025a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8025a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025a62:	2b00      	cmp	r3, #0
 8025a64:	dde3      	ble.n	8025a2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8025a66:	1428      	asrs	r0, r5, #16
 8025a68:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025a6c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025a70:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025a74:	f100 8111 	bmi.w	8025c9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8025a78:	f100 0c01 	add.w	ip, r0, #1
 8025a7c:	45e3      	cmp	fp, ip
 8025a7e:	f340 810e 	ble.w	8025c9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025a82:	2b00      	cmp	r3, #0
 8025a84:	f2c0 810b 	blt.w	8025c9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025a88:	f103 0c01 	add.w	ip, r3, #1
 8025a8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025a8e:	4564      	cmp	r4, ip
 8025a90:	f340 8105 	ble.w	8025c9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8025a94:	fb03 030a 	mla	r3, r3, sl, r0
 8025a98:	0858      	lsrs	r0, r3, #1
 8025a9a:	07dc      	lsls	r4, r3, #31
 8025a9c:	5c38      	ldrb	r0, [r7, r0]
 8025a9e:	bf54      	ite	pl
 8025aa0:	f000 000f 	andpl.w	r0, r0, #15
 8025aa4:	1100      	asrmi	r0, r0, #4
 8025aa6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025aaa:	b2c0      	uxtb	r0, r0
 8025aac:	2a00      	cmp	r2, #0
 8025aae:	f000 80e1 	beq.w	8025c74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8025ab2:	f103 0e01 	add.w	lr, r3, #1
 8025ab6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8025aba:	f01e 0f01 	tst.w	lr, #1
 8025abe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025ac2:	bf0c      	ite	eq
 8025ac4:	f00c 0c0f 	andeq.w	ip, ip, #15
 8025ac8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8025acc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025ad0:	fa5f f48c 	uxtb.w	r4, ip
 8025ad4:	9410      	str	r4, [sp, #64]	; 0x40
 8025ad6:	b1f9      	cbz	r1, 8025b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025ad8:	4453      	add	r3, sl
 8025ada:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025ade:	07dc      	lsls	r4, r3, #31
 8025ae0:	f103 0301 	add.w	r3, r3, #1
 8025ae4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025ae8:	bf54      	ite	pl
 8025aea:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025aee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025af2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025af6:	fa5f f48c 	uxtb.w	r4, ip
 8025afa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025afe:	940a      	str	r4, [sp, #40]	; 0x28
 8025b00:	07dc      	lsls	r4, r3, #31
 8025b02:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025b06:	bf54      	ite	pl
 8025b08:	f00c 030f 	andpl.w	r3, ip, #15
 8025b0c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025b10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025b14:	b2db      	uxtb	r3, r3
 8025b16:	9311      	str	r3, [sp, #68]	; 0x44
 8025b18:	b292      	uxth	r2, r2
 8025b1a:	b289      	uxth	r1, r1
 8025b1c:	0113      	lsls	r3, r2, #4
 8025b1e:	fb02 fc01 	mul.w	ip, r2, r1
 8025b22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b24:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025b28:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8025b2c:	eba3 030c 	sub.w	r3, r3, ip
 8025b30:	b289      	uxth	r1, r1
 8025b32:	b29b      	uxth	r3, r3
 8025b34:	ebae 0e01 	sub.w	lr, lr, r1
 8025b38:	4353      	muls	r3, r2
 8025b3a:	fa1f fe8e 	uxth.w	lr, lr
 8025b3e:	fb00 320e 	mla	r2, r0, lr, r3
 8025b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b44:	fb01 2203 	mla	r2, r1, r3, r2
 8025b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025b4a:	fb0c 2203 	mla	r2, ip, r3, r2
 8025b4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025b52:	2a00      	cmp	r2, #0
 8025b54:	d039      	beq.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025b56:	4bbd      	ldr	r3, [pc, #756]	; (8025e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025b58:	6819      	ldr	r1, [r3, #0]
 8025b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b5c:	fa5f fc81 	uxtb.w	ip, r1
 8025b60:	435a      	muls	r2, r3
 8025b62:	1c53      	adds	r3, r2, #1
 8025b64:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025b68:	1212      	asrs	r2, r2, #8
 8025b6a:	b290      	uxth	r0, r2
 8025b6c:	43d2      	mvns	r2, r2
 8025b6e:	fb1c fc00 	smulbb	ip, ip, r0
 8025b72:	b2d3      	uxtb	r3, r2
 8025b74:	f899 2000 	ldrb.w	r2, [r9]
 8025b78:	fb02 c203 	mla	r2, r2, r3, ip
 8025b7c:	b292      	uxth	r2, r2
 8025b7e:	f102 0c01 	add.w	ip, r2, #1
 8025b82:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025b86:	f899 c001 	ldrb.w	ip, [r9, #1]
 8025b8a:	fb1c fc03 	smulbb	ip, ip, r3
 8025b8e:	1212      	asrs	r2, r2, #8
 8025b90:	f889 2000 	strb.w	r2, [r9]
 8025b94:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8025b98:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8025b9c:	fb02 c200 	mla	r2, r2, r0, ip
 8025ba0:	b292      	uxth	r2, r2
 8025ba2:	f102 0c01 	add.w	ip, r2, #1
 8025ba6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025baa:	1212      	asrs	r2, r2, #8
 8025bac:	f889 2001 	strb.w	r2, [r9, #1]
 8025bb0:	f899 2002 	ldrb.w	r2, [r9, #2]
 8025bb4:	fb12 f303 	smulbb	r3, r2, r3
 8025bb8:	fb01 3300 	mla	r3, r1, r0, r3
 8025bbc:	b29b      	uxth	r3, r3
 8025bbe:	1c5a      	adds	r2, r3, #1
 8025bc0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025bc4:	121b      	asrs	r3, r3, #8
 8025bc6:	f889 3002 	strb.w	r3, [r9, #2]
 8025bca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025bcc:	f109 0903 	add.w	r9, r9, #3
 8025bd0:	441d      	add	r5, r3
 8025bd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025bd4:	441e      	add	r6, r3
 8025bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025bd8:	3b01      	subs	r3, #1
 8025bda:	930d      	str	r3, [sp, #52]	; 0x34
 8025bdc:	e740      	b.n	8025a60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025bde:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025be0:	f108 0803 	add.w	r8, r8, #3
 8025be4:	441d      	add	r5, r3
 8025be6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025be8:	441e      	add	r6, r3
 8025bea:	9b08      	ldr	r3, [sp, #32]
 8025bec:	3b01      	subs	r3, #1
 8025bee:	9308      	str	r3, [sp, #32]
 8025bf0:	e6ef      	b.n	80259d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8025bf2:	f47f aeff 	bne.w	80259f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8025bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bf8:	2b00      	cmp	r3, #0
 8025bfa:	f340 8122 	ble.w	8025e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8025bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025c04:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025c08:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025c0c:	eef0 6a48 	vmov.f32	s13, s16
 8025c10:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025c14:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025c18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c1c:	ee16 5a90 	vmov	r5, s13
 8025c20:	eef0 6a68 	vmov.f32	s13, s17
 8025c24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c28:	ee16 6a90 	vmov	r6, s13
 8025c2c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025c30:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025c34:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025c38:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025c3c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025c40:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025c44:	ee18 2a10 	vmov	r2, s16
 8025c48:	eeb0 8a47 	vmov.f32	s16, s14
 8025c4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c50:	ee18 2a90 	vmov	r2, s17
 8025c54:	932b      	str	r3, [sp, #172]	; 0xac
 8025c56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025c58:	eef0 8a67 	vmov.f32	s17, s15
 8025c5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c60:	932c      	str	r3, [sp, #176]	; 0xb0
 8025c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025c66:	3b01      	subs	r3, #1
 8025c68:	930c      	str	r3, [sp, #48]	; 0x30
 8025c6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025c6c:	bf08      	it	eq
 8025c6e:	4613      	moveq	r3, r2
 8025c70:	9308      	str	r3, [sp, #32]
 8025c72:	e6a7      	b.n	80259c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8025c74:	2900      	cmp	r1, #0
 8025c76:	f43f af4f 	beq.w	8025b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025c7a:	4453      	add	r3, sl
 8025c7c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025c80:	07db      	lsls	r3, r3, #31
 8025c82:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025c86:	bf54      	ite	pl
 8025c88:	f00c 030f 	andpl.w	r3, ip, #15
 8025c8c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8025c90:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025c94:	b2db      	uxtb	r3, r3
 8025c96:	930a      	str	r3, [sp, #40]	; 0x28
 8025c98:	e73e      	b.n	8025b18 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8025c9a:	1c44      	adds	r4, r0, #1
 8025c9c:	d195      	bne.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025c9e:	4583      	cmp	fp, r0
 8025ca0:	dd93      	ble.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025ca2:	1c5c      	adds	r4, r3, #1
 8025ca4:	db91      	blt.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025ca6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ca8:	429c      	cmp	r4, r3
 8025caa:	dd8e      	ble.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025cac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025cae:	9002      	str	r0, [sp, #8]
 8025cb0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025cb2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8025cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cb8:	463a      	mov	r2, r7
 8025cba:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025cbe:	e9cd b300 	strd	fp, r3, [sp]
 8025cc2:	4649      	mov	r1, r9
 8025cc4:	4653      	mov	r3, sl
 8025cc6:	f7ff fd61 	bl	802578c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8025cca:	e77e      	b.n	8025bca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8025ccc:	142a      	asrs	r2, r5, #16
 8025cce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025cd2:	1433      	asrs	r3, r6, #16
 8025cd4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025cd8:	fb0a 2303 	mla	r3, sl, r3, r2
 8025cdc:	085a      	lsrs	r2, r3, #1
 8025cde:	07dc      	lsls	r4, r3, #31
 8025ce0:	5cba      	ldrb	r2, [r7, r2]
 8025ce2:	bf54      	ite	pl
 8025ce4:	f002 020f 	andpl.w	r2, r2, #15
 8025ce8:	1112      	asrmi	r2, r2, #4
 8025cea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8025cee:	b2d2      	uxtb	r2, r2
 8025cf0:	2900      	cmp	r1, #0
 8025cf2:	f000 8093 	beq.w	8025e1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8025cf6:	1c5c      	adds	r4, r3, #1
 8025cf8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8025cfc:	07e4      	lsls	r4, r4, #31
 8025cfe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d02:	bf54      	ite	pl
 8025d04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d10:	fa5f f48c 	uxtb.w	r4, ip
 8025d14:	9412      	str	r4, [sp, #72]	; 0x48
 8025d16:	b300      	cbz	r0, 8025d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8025d18:	4453      	add	r3, sl
 8025d1a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d1e:	07dc      	lsls	r4, r3, #31
 8025d20:	f103 0301 	add.w	r3, r3, #1
 8025d24:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d28:	bf54      	ite	pl
 8025d2a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d2e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d32:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d36:	fa5f f48c 	uxtb.w	r4, ip
 8025d3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025d3e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025d40:	07dc      	lsls	r4, r3, #31
 8025d42:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025d46:	bf54      	ite	pl
 8025d48:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025d4c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025d50:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025d54:	fa5f f38c 	uxtb.w	r3, ip
 8025d58:	9313      	str	r3, [sp, #76]	; 0x4c
 8025d5a:	b289      	uxth	r1, r1
 8025d5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d5e:	b280      	uxth	r0, r0
 8025d60:	fb01 f300 	mul.w	r3, r1, r0
 8025d64:	0109      	lsls	r1, r1, #4
 8025d66:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8025d6a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8025d6e:	1ac9      	subs	r1, r1, r3
 8025d70:	b280      	uxth	r0, r0
 8025d72:	b289      	uxth	r1, r1
 8025d74:	ebac 0c00 	sub.w	ip, ip, r0
 8025d78:	4361      	muls	r1, r4
 8025d7a:	fa1f fc8c 	uxth.w	ip, ip
 8025d7e:	fb02 120c 	mla	r2, r2, ip, r1
 8025d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025d84:	fb00 2001 	mla	r0, r0, r1, r2
 8025d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025d8a:	fb03 0302 	mla	r3, r3, r2, r0
 8025d8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d039      	beq.n	8025e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8025d96:	4a2d      	ldr	r2, [pc, #180]	; (8025e4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8025d98:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8025d9c:	6810      	ldr	r0, [r2, #0]
 8025d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025da0:	fa5f fc80 	uxtb.w	ip, r0
 8025da4:	4353      	muls	r3, r2
 8025da6:	1c5a      	adds	r2, r3, #1
 8025da8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025dac:	121b      	asrs	r3, r3, #8
 8025dae:	b29a      	uxth	r2, r3
 8025db0:	43db      	mvns	r3, r3
 8025db2:	fb1c fc02 	smulbb	ip, ip, r2
 8025db6:	b2db      	uxtb	r3, r3
 8025db8:	fb01 c103 	mla	r1, r1, r3, ip
 8025dbc:	b289      	uxth	r1, r1
 8025dbe:	f101 0c01 	add.w	ip, r1, #1
 8025dc2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025dc6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8025dca:	fb1c fc03 	smulbb	ip, ip, r3
 8025dce:	1209      	asrs	r1, r1, #8
 8025dd0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025dd4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8025dd8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8025ddc:	fb01 c102 	mla	r1, r1, r2, ip
 8025de0:	b289      	uxth	r1, r1
 8025de2:	f101 0c01 	add.w	ip, r1, #1
 8025de6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8025dea:	1209      	asrs	r1, r1, #8
 8025dec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8025df0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8025df4:	fb11 f303 	smulbb	r3, r1, r3
 8025df8:	fb00 3002 	mla	r0, r0, r2, r3
 8025dfc:	b280      	uxth	r0, r0
 8025dfe:	1c42      	adds	r2, r0, #1
 8025e00:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025e04:	1200      	asrs	r0, r0, #8
 8025e06:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8025e0a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8025e0c:	f10e 0e03 	add.w	lr, lr, #3
 8025e10:	f109 39ff 	add.w	r9, r9, #4294967295
 8025e14:	441d      	add	r5, r3
 8025e16:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025e18:	441e      	add	r6, r3
 8025e1a:	e604      	b.n	8025a26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8025e1c:	2800      	cmp	r0, #0
 8025e1e:	d09c      	beq.n	8025d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8025e20:	4453      	add	r3, sl
 8025e22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8025e26:	07db      	lsls	r3, r3, #31
 8025e28:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8025e2c:	bf54      	ite	pl
 8025e2e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8025e32:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8025e36:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8025e3a:	fa5f f38c 	uxtb.w	r3, ip
 8025e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025e40:	e78b      	b.n	8025d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8025e42:	b017      	add	sp, #92	; 0x5c
 8025e44:	ecbd 8b08 	vpop	{d8-d11}
 8025e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e4c:	2000bf14 	.word	0x2000bf14

08025e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8025e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e54:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8025e58:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025e5c:	2800      	cmp	r0, #0
 8025e5e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8025e62:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025e66:	fb0c 0e03 	mla	lr, ip, r3, r0
 8025e6a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8025e6e:	db6b      	blt.n	8025f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025e70:	4580      	cmp	r8, r0
 8025e72:	dd69      	ble.n	8025f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025e74:	f1bc 0f00 	cmp.w	ip, #0
 8025e78:	db66      	blt.n	8025f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025e7a:	45e1      	cmp	r9, ip
 8025e7c:	dd64      	ble.n	8025f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8025e7e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8025e82:	f01e 0f01 	tst.w	lr, #1
 8025e86:	5d16      	ldrb	r6, [r2, r4]
 8025e88:	bf0c      	ite	eq
 8025e8a:	f006 060f 	andeq.w	r6, r6, #15
 8025e8e:	1136      	asrne	r6, r6, #4
 8025e90:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8025e94:	b2f6      	uxtb	r6, r6
 8025e96:	f110 0a01 	adds.w	sl, r0, #1
 8025e9a:	d457      	bmi.n	8025f4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025e9c:	45d0      	cmp	r8, sl
 8025e9e:	dd55      	ble.n	8025f4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025ea0:	f1bc 0f00 	cmp.w	ip, #0
 8025ea4:	db52      	blt.n	8025f4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025ea6:	45e1      	cmp	r9, ip
 8025ea8:	dd50      	ble.n	8025f4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8025eaa:	2f00      	cmp	r7, #0
 8025eac:	f000 80a5 	beq.w	8025ffa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8025eb0:	f10e 0b01 	add.w	fp, lr, #1
 8025eb4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8025eb8:	f01b 0f01 	tst.w	fp, #1
 8025ebc:	5d14      	ldrb	r4, [r2, r4]
 8025ebe:	bf0c      	ite	eq
 8025ec0:	f004 040f 	andeq.w	r4, r4, #15
 8025ec4:	1124      	asrne	r4, r4, #4
 8025ec6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8025eca:	b2e4      	uxtb	r4, r4
 8025ecc:	2d00      	cmp	r5, #0
 8025ece:	f000 808f 	beq.w	8025ff0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8025ed2:	2800      	cmp	r0, #0
 8025ed4:	f10c 0c01 	add.w	ip, ip, #1
 8025ed8:	db3c      	blt.n	8025f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025eda:	4580      	cmp	r8, r0
 8025edc:	dd3a      	ble.n	8025f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025ede:	f1bc 0f00 	cmp.w	ip, #0
 8025ee2:	db37      	blt.n	8025f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025ee4:	45e1      	cmp	r9, ip
 8025ee6:	dd35      	ble.n	8025f54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8025ee8:	eb03 0b0e 	add.w	fp, r3, lr
 8025eec:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8025ef0:	f01b 0f01 	tst.w	fp, #1
 8025ef4:	5c10      	ldrb	r0, [r2, r0]
 8025ef6:	bf0c      	ite	eq
 8025ef8:	f000 000f 	andeq.w	r0, r0, #15
 8025efc:	1100      	asrne	r0, r0, #4
 8025efe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8025f02:	b2c0      	uxtb	r0, r0
 8025f04:	f1ba 0f00 	cmp.w	sl, #0
 8025f08:	db26      	blt.n	8025f58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025f0a:	45d0      	cmp	r8, sl
 8025f0c:	dd24      	ble.n	8025f58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025f0e:	f1bc 0f00 	cmp.w	ip, #0
 8025f12:	db21      	blt.n	8025f58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025f14:	45e1      	cmp	r9, ip
 8025f16:	dd1f      	ble.n	8025f58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8025f18:	b307      	cbz	r7, 8025f5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8025f1a:	3301      	adds	r3, #1
 8025f1c:	449e      	add	lr, r3
 8025f1e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8025f22:	f01e 0f01 	tst.w	lr, #1
 8025f26:	5cd3      	ldrb	r3, [r2, r3]
 8025f28:	bf0c      	ite	eq
 8025f2a:	f003 030f 	andeq.w	r3, r3, #15
 8025f2e:	111b      	asrne	r3, r3, #4
 8025f30:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8025f34:	b2db      	uxtb	r3, r3
 8025f36:	2f0f      	cmp	r7, #15
 8025f38:	d911      	bls.n	8025f5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8025f3a:	4b32      	ldr	r3, [pc, #200]	; (8026004 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8025f3c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025f40:	4a31      	ldr	r2, [pc, #196]	; (8026008 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8025f42:	4832      	ldr	r0, [pc, #200]	; (802600c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8025f44:	f001 fff8 	bl	8027f38 <__assert_func>
 8025f48:	2600      	movs	r6, #0
 8025f4a:	e7a4      	b.n	8025e96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8025f4c:	2400      	movs	r4, #0
 8025f4e:	e7bd      	b.n	8025ecc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8025f50:	463c      	mov	r4, r7
 8025f52:	e7be      	b.n	8025ed2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8025f54:	2000      	movs	r0, #0
 8025f56:	e7d5      	b.n	8025f04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8025f58:	2300      	movs	r3, #0
 8025f5a:	e7ec      	b.n	8025f36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8025f5c:	463b      	mov	r3, r7
 8025f5e:	2d0f      	cmp	r5, #15
 8025f60:	d8eb      	bhi.n	8025f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8025f62:	b2bf      	uxth	r7, r7
 8025f64:	b2ad      	uxth	r5, r5
 8025f66:	fb07 f205 	mul.w	r2, r7, r5
 8025f6a:	013f      	lsls	r7, r7, #4
 8025f6c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8025f70:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8025f74:	1abf      	subs	r7, r7, r2
 8025f76:	b2ad      	uxth	r5, r5
 8025f78:	b2bf      	uxth	r7, r7
 8025f7a:	ebac 0c05 	sub.w	ip, ip, r5
 8025f7e:	437c      	muls	r4, r7
 8025f80:	fa1f fc8c 	uxth.w	ip, ip
 8025f84:	fb06 440c 	mla	r4, r6, ip, r4
 8025f88:	fb05 4400 	mla	r4, r5, r0, r4
 8025f8c:	fb02 4303 	mla	r3, r2, r3, r4
 8025f90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025f94:	b353      	cbz	r3, 8025fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8025f96:	4a1e      	ldr	r2, [pc, #120]	; (8026010 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8025f98:	7808      	ldrb	r0, [r1, #0]
 8025f9a:	6814      	ldr	r4, [r2, #0]
 8025f9c:	b29a      	uxth	r2, r3
 8025f9e:	43db      	mvns	r3, r3
 8025fa0:	b2e5      	uxtb	r5, r4
 8025fa2:	b2db      	uxtb	r3, r3
 8025fa4:	fb15 f502 	smulbb	r5, r5, r2
 8025fa8:	fb00 5003 	mla	r0, r0, r3, r5
 8025fac:	b280      	uxth	r0, r0
 8025fae:	1c45      	adds	r5, r0, #1
 8025fb0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025fb4:	784d      	ldrb	r5, [r1, #1]
 8025fb6:	fb15 f503 	smulbb	r5, r5, r3
 8025fba:	1200      	asrs	r0, r0, #8
 8025fbc:	7008      	strb	r0, [r1, #0]
 8025fbe:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8025fc2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8025fc6:	fb00 5002 	mla	r0, r0, r2, r5
 8025fca:	b280      	uxth	r0, r0
 8025fcc:	1c45      	adds	r5, r0, #1
 8025fce:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025fd2:	1200      	asrs	r0, r0, #8
 8025fd4:	7048      	strb	r0, [r1, #1]
 8025fd6:	7888      	ldrb	r0, [r1, #2]
 8025fd8:	fb10 f303 	smulbb	r3, r0, r3
 8025fdc:	fb04 3202 	mla	r2, r4, r2, r3
 8025fe0:	b292      	uxth	r2, r2
 8025fe2:	1c53      	adds	r3, r2, #1
 8025fe4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025fe8:	1212      	asrs	r2, r2, #8
 8025fea:	708a      	strb	r2, [r1, #2]
 8025fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ff0:	2f0f      	cmp	r7, #15
 8025ff2:	d8a2      	bhi.n	8025f3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8025ff4:	462b      	mov	r3, r5
 8025ff6:	4628      	mov	r0, r5
 8025ff8:	e7b3      	b.n	8025f62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8025ffa:	2d00      	cmp	r5, #0
 8025ffc:	d1a8      	bne.n	8025f50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8025ffe:	462c      	mov	r4, r5
 8026000:	e7f8      	b.n	8025ff4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8026002:	bf00      	nop
 8026004:	0802d0a7 	.word	0x0802d0a7
 8026008:	0802d59e 	.word	0x0802d59e
 802600c:	0802d170 	.word	0x0802d170
 8026010:	2000bf14 	.word	0x2000bf14

08026014 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026018:	ed2d 8b08 	vpush	{d8-d11}
 802601c:	b095      	sub	sp, #84	; 0x54
 802601e:	461c      	mov	r4, r3
 8026020:	eeb0 aa40 	vmov.f32	s20, s0
 8026024:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8026028:	eef0 9a60 	vmov.f32	s19, s1
 802602c:	920e      	str	r2, [sp, #56]	; 0x38
 802602e:	eeb0 9a41 	vmov.f32	s18, s2
 8026032:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026034:	eeb0 8a62 	vmov.f32	s16, s5
 8026038:	9307      	str	r3, [sp, #28]
 802603a:	eef0 8a43 	vmov.f32	s17, s6
 802603e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8026042:	eef0 ba44 	vmov.f32	s23, s8
 8026046:	9013      	str	r0, [sp, #76]	; 0x4c
 8026048:	eeb0 ba64 	vmov.f32	s22, s9
 802604c:	9109      	str	r1, [sp, #36]	; 0x24
 802604e:	eef0 aa45 	vmov.f32	s21, s10
 8026052:	9308      	str	r3, [sp, #32]
 8026054:	6850      	ldr	r0, [r2, #4]
 8026056:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802605a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 802605e:	fb00 1803 	mla	r8, r0, r3, r1
 8026062:	6813      	ldr	r3, [r2, #0]
 8026064:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026068:	4498      	add	r8, r3
 802606a:	9b07      	ldr	r3, [sp, #28]
 802606c:	3301      	adds	r3, #1
 802606e:	f023 0301 	bic.w	r3, r3, #1
 8026072:	930b      	str	r3, [sp, #44]	; 0x2c
 8026074:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026076:	681f      	ldr	r7, [r3, #0]
 8026078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802607a:	2b00      	cmp	r3, #0
 802607c:	dc03      	bgt.n	8026086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802607e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026080:	2b00      	cmp	r3, #0
 8026082:	f340 8238 	ble.w	80264f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8026086:	2c00      	cmp	r4, #0
 8026088:	f340 8109 	ble.w	802629e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 802608c:	142a      	asrs	r2, r5, #16
 802608e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026092:	d42b      	bmi.n	80260ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8026094:	1c51      	adds	r1, r2, #1
 8026096:	9807      	ldr	r0, [sp, #28]
 8026098:	4288      	cmp	r0, r1
 802609a:	dd2a      	ble.n	80260f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802609c:	2b00      	cmp	r3, #0
 802609e:	db28      	blt.n	80260f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80260a0:	1c59      	adds	r1, r3, #1
 80260a2:	9808      	ldr	r0, [sp, #32]
 80260a4:	4288      	cmp	r0, r1
 80260a6:	dd24      	ble.n	80260f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80260a8:	1e63      	subs	r3, r4, #1
 80260aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80260ac:	fb02 5203 	mla	r2, r2, r3, r5
 80260b0:	1412      	asrs	r2, r2, #16
 80260b2:	d429      	bmi.n	8026108 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80260b4:	3201      	adds	r2, #1
 80260b6:	9907      	ldr	r1, [sp, #28]
 80260b8:	4291      	cmp	r1, r2
 80260ba:	dd25      	ble.n	8026108 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80260bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80260be:	fb02 6303 	mla	r3, r2, r3, r6
 80260c2:	141b      	asrs	r3, r3, #16
 80260c4:	d420      	bmi.n	8026108 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80260c6:	3301      	adds	r3, #1
 80260c8:	9a08      	ldr	r2, [sp, #32]
 80260ca:	429a      	cmp	r2, r3
 80260cc:	dd1c      	ble.n	8026108 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80260ce:	f108 0e03 	add.w	lr, r8, #3
 80260d2:	46a1      	mov	r9, r4
 80260d4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80260d8:	f1b9 0f00 	cmp.w	r9, #0
 80260dc:	f300 8155 	bgt.w	802638a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 80260e0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80260e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80260e8:	44a0      	add	r8, r4
 80260ea:	e0da      	b.n	80262a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80260ec:	1c50      	adds	r0, r2, #1
 80260ee:	f040 80ce 	bne.w	802628e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80260f2:	9907      	ldr	r1, [sp, #28]
 80260f4:	4291      	cmp	r1, r2
 80260f6:	f340 80ca 	ble.w	802628e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 80260fa:	1c59      	adds	r1, r3, #1
 80260fc:	f2c0 80c7 	blt.w	802628e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026100:	9a08      	ldr	r2, [sp, #32]
 8026102:	4293      	cmp	r3, r2
 8026104:	f280 80c3 	bge.w	802628e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8026108:	46a3      	mov	fp, r4
 802610a:	46c1      	mov	r9, r8
 802610c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8026110:	f1bb 0f00 	cmp.w	fp, #0
 8026114:	dde4      	ble.n	80260e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8026116:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802611a:	1428      	asrs	r0, r5, #16
 802611c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026120:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026124:	920a      	str	r2, [sp, #40]	; 0x28
 8026126:	f100 8116 	bmi.w	8026356 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 802612a:	f100 0c01 	add.w	ip, r0, #1
 802612e:	9a07      	ldr	r2, [sp, #28]
 8026130:	4562      	cmp	r2, ip
 8026132:	f340 8112 	ble.w	802635a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026136:	2b00      	cmp	r3, #0
 8026138:	f2c0 810f 	blt.w	802635a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802613c:	f103 0c01 	add.w	ip, r3, #1
 8026140:	9a08      	ldr	r2, [sp, #32]
 8026142:	4562      	cmp	r2, ip
 8026144:	f340 8109 	ble.w	802635a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8026148:	fb03 030a 	mla	r3, r3, sl, r0
 802614c:	0858      	lsrs	r0, r3, #1
 802614e:	07da      	lsls	r2, r3, #31
 8026150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026152:	5c38      	ldrb	r0, [r7, r0]
 8026154:	bf54      	ite	pl
 8026156:	f000 000f 	andpl.w	r0, r0, #15
 802615a:	1100      	asrmi	r0, r0, #4
 802615c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8026160:	b2c0      	uxtb	r0, r0
 8026162:	2a00      	cmp	r2, #0
 8026164:	f000 80dd 	beq.w	8026322 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8026168:	f103 0e01 	add.w	lr, r3, #1
 802616c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8026170:	f01e 0f01 	tst.w	lr, #1
 8026174:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026178:	bf0c      	ite	eq
 802617a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802617e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8026182:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8026186:	fa5f fc8c 	uxtb.w	ip, ip
 802618a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 802618e:	b301      	cbz	r1, 80261d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026190:	4453      	add	r3, sl
 8026192:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8026196:	07da      	lsls	r2, r3, #31
 8026198:	f103 0301 	add.w	r3, r3, #1
 802619c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261a0:	bf54      	ite	pl
 80261a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80261a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80261aa:	07da      	lsls	r2, r3, #31
 80261ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80261b0:	fa5f fc8c 	uxtb.w	ip, ip
 80261b4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80261b8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80261bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80261c0:	bf54      	ite	pl
 80261c2:	f00c 030f 	andpl.w	r3, ip, #15
 80261c6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80261ca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80261ce:	b2db      	uxtb	r3, r3
 80261d0:	9310      	str	r3, [sp, #64]	; 0x40
 80261d2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80261d6:	b289      	uxth	r1, r1
 80261d8:	fb02 f301 	mul.w	r3, r2, r1
 80261dc:	0112      	lsls	r2, r2, #4
 80261de:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80261e2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80261e6:	1ad2      	subs	r2, r2, r3
 80261e8:	fa1f fe81 	uxth.w	lr, r1
 80261ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80261ee:	b292      	uxth	r2, r2
 80261f0:	ebac 0c0e 	sub.w	ip, ip, lr
 80261f4:	434a      	muls	r2, r1
 80261f6:	fa1f fc8c 	uxth.w	ip, ip
 80261fa:	fb00 200c 	mla	r0, r0, ip, r2
 80261fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026200:	fb0e 0002 	mla	r0, lr, r2, r0
 8026204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026206:	fb03 0002 	mla	r0, r3, r2, r0
 802620a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802620e:	b3a8      	cbz	r0, 802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026210:	4bbb      	ldr	r3, [pc, #748]	; (8026500 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8026212:	28ff      	cmp	r0, #255	; 0xff
 8026214:	681b      	ldr	r3, [r3, #0]
 8026216:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 802621a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802621e:	b2db      	uxtb	r3, r3
 8026220:	f000 8092 	beq.w	8026348 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8026224:	b282      	uxth	r2, r0
 8026226:	43c0      	mvns	r0, r0
 8026228:	f899 e000 	ldrb.w	lr, [r9]
 802622c:	fb13 f302 	smulbb	r3, r3, r2
 8026230:	b2c0      	uxtb	r0, r0
 8026232:	fb11 f102 	smulbb	r1, r1, r2
 8026236:	fb0e 3300 	mla	r3, lr, r0, r3
 802623a:	fb1c f202 	smulbb	r2, ip, r2
 802623e:	b29b      	uxth	r3, r3
 8026240:	f103 0e01 	add.w	lr, r3, #1
 8026244:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8026248:	121b      	asrs	r3, r3, #8
 802624a:	f889 3000 	strb.w	r3, [r9]
 802624e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026252:	fb03 1100 	mla	r1, r3, r0, r1
 8026256:	b289      	uxth	r1, r1
 8026258:	1c4b      	adds	r3, r1, #1
 802625a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802625e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8026262:	fb03 2000 	mla	r0, r3, r0, r2
 8026266:	1209      	asrs	r1, r1, #8
 8026268:	b280      	uxth	r0, r0
 802626a:	f889 1001 	strb.w	r1, [r9, #1]
 802626e:	f100 0c01 	add.w	ip, r0, #1
 8026272:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8026276:	1200      	asrs	r0, r0, #8
 8026278:	f889 0002 	strb.w	r0, [r9, #2]
 802627c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802627e:	f109 0903 	add.w	r9, r9, #3
 8026282:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026286:	441d      	add	r5, r3
 8026288:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802628a:	441e      	add	r6, r3
 802628c:	e740      	b.n	8026110 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 802628e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026290:	3c01      	subs	r4, #1
 8026292:	f108 0803 	add.w	r8, r8, #3
 8026296:	441d      	add	r5, r3
 8026298:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802629a:	441e      	add	r6, r3
 802629c:	e6f3      	b.n	8026086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802629e:	f47f af03 	bne.w	80260a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80262a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262a4:	2b00      	cmp	r3, #0
 80262a6:	f340 8126 	ble.w	80264f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80262aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80262ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80262b0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80262b4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80262b8:	eef0 6a48 	vmov.f32	s13, s16
 80262bc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80262c0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80262c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262c8:	ee16 5a90 	vmov	r5, s13
 80262cc:	eef0 6a68 	vmov.f32	s13, s17
 80262d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80262d4:	ee16 6a90 	vmov	r6, s13
 80262d8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80262dc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80262e0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80262e4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80262e8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80262ec:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80262f0:	ee18 2a10 	vmov	r2, s16
 80262f4:	eeb0 8a47 	vmov.f32	s16, s14
 80262f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80262fc:	ee18 2a90 	vmov	r2, s17
 8026300:	9329      	str	r3, [sp, #164]	; 0xa4
 8026302:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026304:	eef0 8a67 	vmov.f32	s17, s15
 8026308:	fb92 f3f3 	sdiv	r3, r2, r3
 802630c:	932a      	str	r3, [sp, #168]	; 0xa8
 802630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026312:	3b01      	subs	r3, #1
 8026314:	9309      	str	r3, [sp, #36]	; 0x24
 8026316:	bf08      	it	eq
 8026318:	4614      	moveq	r4, r2
 802631a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802631c:	bf18      	it	ne
 802631e:	461c      	movne	r4, r3
 8026320:	e6aa      	b.n	8026078 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8026322:	2900      	cmp	r1, #0
 8026324:	f43f af55 	beq.w	80261d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026328:	4453      	add	r3, sl
 802632a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802632e:	07db      	lsls	r3, r3, #31
 8026330:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8026334:	bf54      	ite	pl
 8026336:	f00c 030f 	andpl.w	r3, ip, #15
 802633a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802633e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8026342:	b2db      	uxtb	r3, r3
 8026344:	930c      	str	r3, [sp, #48]	; 0x30
 8026346:	e744      	b.n	80261d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8026348:	f889 3000 	strb.w	r3, [r9]
 802634c:	f889 1001 	strb.w	r1, [r9, #1]
 8026350:	f889 c002 	strb.w	ip, [r9, #2]
 8026354:	e792      	b.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026356:	1c42      	adds	r2, r0, #1
 8026358:	d190      	bne.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802635a:	9a07      	ldr	r2, [sp, #28]
 802635c:	4282      	cmp	r2, r0
 802635e:	dd8d      	ble.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026360:	1c5a      	adds	r2, r3, #1
 8026362:	db8b      	blt.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8026364:	9a08      	ldr	r2, [sp, #32]
 8026366:	429a      	cmp	r2, r3
 8026368:	dd88      	ble.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802636a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802636c:	9105      	str	r1, [sp, #20]
 802636e:	4649      	mov	r1, r9
 8026370:	9002      	str	r0, [sp, #8]
 8026372:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026374:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8026378:	9b08      	ldr	r3, [sp, #32]
 802637a:	463a      	mov	r2, r7
 802637c:	9301      	str	r3, [sp, #4]
 802637e:	9b07      	ldr	r3, [sp, #28]
 8026380:	9300      	str	r3, [sp, #0]
 8026382:	4653      	mov	r3, sl
 8026384:	f7ff fd64 	bl	8025e50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8026388:	e778      	b.n	802627c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802638a:	142a      	asrs	r2, r5, #16
 802638c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026390:	1433      	asrs	r3, r6, #16
 8026392:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026396:	fb0a 2303 	mla	r3, sl, r3, r2
 802639a:	085a      	lsrs	r2, r3, #1
 802639c:	07d9      	lsls	r1, r3, #31
 802639e:	5cba      	ldrb	r2, [r7, r2]
 80263a0:	bf54      	ite	pl
 80263a2:	f002 020f 	andpl.w	r2, r2, #15
 80263a6:	1112      	asrmi	r2, r2, #4
 80263a8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80263ac:	b2d2      	uxtb	r2, r2
 80263ae:	2800      	cmp	r0, #0
 80263b0:	f000 808a 	beq.w	80264c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80263b4:	f103 0b01 	add.w	fp, r3, #1
 80263b8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80263bc:	f01b 0f01 	tst.w	fp, #1
 80263c0:	5c79      	ldrb	r1, [r7, r1]
 80263c2:	bf0c      	ite	eq
 80263c4:	f001 010f 	andeq.w	r1, r1, #15
 80263c8:	1109      	asrne	r1, r1, #4
 80263ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80263ce:	b2c9      	uxtb	r1, r1
 80263d0:	9111      	str	r1, [sp, #68]	; 0x44
 80263d2:	f1bc 0f00 	cmp.w	ip, #0
 80263d6:	d019      	beq.n	802640c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80263d8:	4453      	add	r3, sl
 80263da:	0859      	lsrs	r1, r3, #1
 80263dc:	f013 0f01 	tst.w	r3, #1
 80263e0:	f103 0301 	add.w	r3, r3, #1
 80263e4:	5c79      	ldrb	r1, [r7, r1]
 80263e6:	bf0c      	ite	eq
 80263e8:	f001 010f 	andeq.w	r1, r1, #15
 80263ec:	1109      	asrne	r1, r1, #4
 80263ee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80263f2:	b2c9      	uxtb	r1, r1
 80263f4:	910d      	str	r1, [sp, #52]	; 0x34
 80263f6:	0859      	lsrs	r1, r3, #1
 80263f8:	07db      	lsls	r3, r3, #31
 80263fa:	5c79      	ldrb	r1, [r7, r1]
 80263fc:	bf54      	ite	pl
 80263fe:	f001 010f 	andpl.w	r1, r1, #15
 8026402:	1109      	asrmi	r1, r1, #4
 8026404:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8026408:	b2c9      	uxtb	r1, r1
 802640a:	9112      	str	r1, [sp, #72]	; 0x48
 802640c:	b280      	uxth	r0, r0
 802640e:	fa1f fc8c 	uxth.w	ip, ip
 8026412:	fb00 f30c 	mul.w	r3, r0, ip
 8026416:	0100      	lsls	r0, r0, #4
 8026418:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802641c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8026420:	1ac0      	subs	r0, r0, r3
 8026422:	fa1f fc8c 	uxth.w	ip, ip
 8026426:	b280      	uxth	r0, r0
 8026428:	eba1 010c 	sub.w	r1, r1, ip
 802642c:	fa1f fb81 	uxth.w	fp, r1
 8026430:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026432:	4348      	muls	r0, r1
 8026434:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026436:	fb02 020b 	mla	r2, r2, fp, r0
 802643a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802643e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026440:	fb03 c302 	mla	r3, r3, r2, ip
 8026444:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026448:	b3ab      	cbz	r3, 80264b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802644a:	4a2d      	ldr	r2, [pc, #180]	; (8026500 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802644c:	2bff      	cmp	r3, #255	; 0xff
 802644e:	6811      	ldr	r1, [r2, #0]
 8026450:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8026454:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8026458:	b2c9      	uxtb	r1, r1
 802645a:	d045      	beq.n	80264e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802645c:	b298      	uxth	r0, r3
 802645e:	43db      	mvns	r3, r3
 8026460:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8026464:	fb11 f100 	smulbb	r1, r1, r0
 8026468:	b2db      	uxtb	r3, r3
 802646a:	fb1c fc00 	smulbb	ip, ip, r0
 802646e:	fb02 1103 	mla	r1, r2, r3, r1
 8026472:	fb1b f000 	smulbb	r0, fp, r0
 8026476:	b289      	uxth	r1, r1
 8026478:	1c4a      	adds	r2, r1, #1
 802647a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802647e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026482:	fb02 cc03 	mla	ip, r2, r3, ip
 8026486:	1209      	asrs	r1, r1, #8
 8026488:	fa1f fc8c 	uxth.w	ip, ip
 802648c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8026490:	f10c 0201 	add.w	r2, ip, #1
 8026494:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8026498:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802649c:	fb02 0303 	mla	r3, r2, r3, r0
 80264a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80264a4:	b29b      	uxth	r3, r3
 80264a6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80264aa:	1c5a      	adds	r2, r3, #1
 80264ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80264b0:	121b      	asrs	r3, r3, #8
 80264b2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80264b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80264b8:	f10e 0e03 	add.w	lr, lr, #3
 80264bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80264c0:	441d      	add	r5, r3
 80264c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80264c4:	441e      	add	r6, r3
 80264c6:	e607      	b.n	80260d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80264c8:	f1bc 0f00 	cmp.w	ip, #0
 80264cc:	d09e      	beq.n	802640c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80264ce:	4453      	add	r3, sl
 80264d0:	0859      	lsrs	r1, r3, #1
 80264d2:	07db      	lsls	r3, r3, #31
 80264d4:	5c79      	ldrb	r1, [r7, r1]
 80264d6:	bf54      	ite	pl
 80264d8:	f001 010f 	andpl.w	r1, r1, #15
 80264dc:	1109      	asrmi	r1, r1, #4
 80264de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80264e2:	b2c9      	uxtb	r1, r1
 80264e4:	910d      	str	r1, [sp, #52]	; 0x34
 80264e6:	e791      	b.n	802640c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80264e8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80264ec:	f80e cc02 	strb.w	ip, [lr, #-2]
 80264f0:	f80e bc01 	strb.w	fp, [lr, #-1]
 80264f4:	e7df      	b.n	80264b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80264f6:	b015      	add	sp, #84	; 0x54
 80264f8:	ecbd 8b08 	vpop	{d8-d11}
 80264fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026500:	2000bf14 	.word	0x2000bf14

08026504 <CRC_Lock>:
 8026504:	4a1d      	ldr	r2, [pc, #116]	; (802657c <CRC_Lock+0x78>)
 8026506:	b530      	push	{r4, r5, lr}
 8026508:	6813      	ldr	r3, [r2, #0]
 802650a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802650e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8026512:	f023 0301 	bic.w	r3, r3, #1
 8026516:	6013      	str	r3, [r2, #0]
 8026518:	4b19      	ldr	r3, [pc, #100]	; (8026580 <CRC_Lock+0x7c>)
 802651a:	681a      	ldr	r2, [r3, #0]
 802651c:	4022      	ands	r2, r4
 802651e:	42aa      	cmp	r2, r5
 8026520:	d005      	beq.n	802652e <CRC_Lock+0x2a>
 8026522:	681b      	ldr	r3, [r3, #0]
 8026524:	f24c 2270 	movw	r2, #49776	; 0xc270
 8026528:	4023      	ands	r3, r4
 802652a:	4293      	cmp	r3, r2
 802652c:	d11d      	bne.n	802656a <CRC_Lock+0x66>
 802652e:	4b15      	ldr	r3, [pc, #84]	; (8026584 <CRC_Lock+0x80>)
 8026530:	681b      	ldr	r3, [r3, #0]
 8026532:	b9d3      	cbnz	r3, 802656a <CRC_Lock+0x66>
 8026534:	4a14      	ldr	r2, [pc, #80]	; (8026588 <CRC_Lock+0x84>)
 8026536:	6813      	ldr	r3, [r2, #0]
 8026538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802653c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8026540:	d006      	beq.n	8026550 <CRC_Lock+0x4c>
 8026542:	6813      	ldr	r3, [r2, #0]
 8026544:	f240 4283 	movw	r2, #1155	; 0x483
 8026548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802654c:	4293      	cmp	r3, r2
 802654e:	d10c      	bne.n	802656a <CRC_Lock+0x66>
 8026550:	4b0e      	ldr	r3, [pc, #56]	; (802658c <CRC_Lock+0x88>)
 8026552:	2201      	movs	r2, #1
 8026554:	601a      	str	r2, [r3, #0]
 8026556:	681a      	ldr	r2, [r3, #0]
 8026558:	2a00      	cmp	r2, #0
 802655a:	d1fc      	bne.n	8026556 <CRC_Lock+0x52>
 802655c:	4b0c      	ldr	r3, [pc, #48]	; (8026590 <CRC_Lock+0x8c>)
 802655e:	6018      	str	r0, [r3, #0]
 8026560:	6818      	ldr	r0, [r3, #0]
 8026562:	1a43      	subs	r3, r0, r1
 8026564:	4258      	negs	r0, r3
 8026566:	4158      	adcs	r0, r3
 8026568:	bd30      	pop	{r4, r5, pc}
 802656a:	4b0a      	ldr	r3, [pc, #40]	; (8026594 <CRC_Lock+0x90>)
 802656c:	2201      	movs	r2, #1
 802656e:	601a      	str	r2, [r3, #0]
 8026570:	681a      	ldr	r2, [r3, #0]
 8026572:	2a00      	cmp	r2, #0
 8026574:	d1fc      	bne.n	8026570 <CRC_Lock+0x6c>
 8026576:	4b08      	ldr	r3, [pc, #32]	; (8026598 <CRC_Lock+0x94>)
 8026578:	e7f1      	b.n	802655e <CRC_Lock+0x5a>
 802657a:	bf00      	nop
 802657c:	e0002000 	.word	0xe0002000
 8026580:	e000ed00 	.word	0xe000ed00
 8026584:	e0042000 	.word	0xe0042000
 8026588:	5c001000 	.word	0x5c001000
 802658c:	58024c08 	.word	0x58024c08
 8026590:	58024c00 	.word	0x58024c00
 8026594:	40023008 	.word	0x40023008
 8026598:	40023000 	.word	0x40023000

0802659c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802659c:	6101      	str	r1, [r0, #16]
 802659e:	4770      	bx	lr

080265a0 <_ZN8touchgfx8Gestures4tickEv>:
 80265a0:	7b83      	ldrb	r3, [r0, #14]
 80265a2:	b14b      	cbz	r3, 80265b8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80265a4:	8903      	ldrh	r3, [r0, #8]
 80265a6:	3301      	adds	r3, #1
 80265a8:	b29b      	uxth	r3, r3
 80265aa:	2b07      	cmp	r3, #7
 80265ac:	8103      	strh	r3, [r0, #8]
 80265ae:	bf81      	itttt	hi
 80265b0:	2300      	movhi	r3, #0
 80265b2:	8143      	strhhi	r3, [r0, #10]
 80265b4:	8183      	strhhi	r3, [r0, #12]
 80265b6:	7383      	strbhi	r3, [r0, #14]
 80265b8:	4770      	bx	lr
	...

080265bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80265bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80265c0:	4604      	mov	r4, r0
 80265c2:	4698      	mov	r8, r3
 80265c4:	8880      	ldrh	r0, [r0, #4]
 80265c6:	4617      	mov	r7, r2
 80265c8:	4b1d      	ldr	r3, [pc, #116]	; (8026640 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80265ca:	460e      	mov	r6, r1
 80265cc:	f8ad 0006 	strh.w	r0, [sp, #6]
 80265d0:	eba8 0000 	sub.w	r0, r8, r0
 80265d4:	9300      	str	r3, [sp, #0]
 80265d6:	2300      	movs	r3, #0
 80265d8:	b280      	uxth	r0, r0
 80265da:	8aa2      	ldrh	r2, [r4, #20]
 80265dc:	f88d 3004 	strb.w	r3, [sp, #4]
 80265e0:	b203      	sxth	r3, r0
 80265e2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80265e6:	88e1      	ldrh	r1, [r4, #6]
 80265e8:	2b00      	cmp	r3, #0
 80265ea:	f8ad 800a 	strh.w	r8, [sp, #10]
 80265ee:	f8ad 1008 	strh.w	r1, [sp, #8]
 80265f2:	bfb8      	it	lt
 80265f4:	4240      	neglt	r0, r0
 80265f6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80265fa:	bfb8      	it	lt
 80265fc:	b203      	sxthlt	r3, r0
 80265fe:	4293      	cmp	r3, r2
 8026600:	dc08      	bgt.n	8026614 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8026602:	1a69      	subs	r1, r5, r1
 8026604:	b289      	uxth	r1, r1
 8026606:	b20b      	sxth	r3, r1
 8026608:	2b00      	cmp	r3, #0
 802660a:	bfbc      	itt	lt
 802660c:	4249      	neglt	r1, r1
 802660e:	b20b      	sxthlt	r3, r1
 8026610:	429a      	cmp	r2, r3
 8026612:	da13      	bge.n	802663c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8026614:	6920      	ldr	r0, [r4, #16]
 8026616:	4669      	mov	r1, sp
 8026618:	eba8 0606 	sub.w	r6, r8, r6
 802661c:	1bef      	subs	r7, r5, r7
 802661e:	6803      	ldr	r3, [r0, #0]
 8026620:	685b      	ldr	r3, [r3, #4]
 8026622:	4798      	blx	r3
 8026624:	2300      	movs	r3, #0
 8026626:	2001      	movs	r0, #1
 8026628:	8166      	strh	r6, [r4, #10]
 802662a:	8123      	strh	r3, [r4, #8]
 802662c:	81a7      	strh	r7, [r4, #12]
 802662e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8026632:	80e5      	strh	r5, [r4, #6]
 8026634:	73a0      	strb	r0, [r4, #14]
 8026636:	b004      	add	sp, #16
 8026638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802663c:	2000      	movs	r0, #0
 802663e:	e7fa      	b.n	8026636 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8026640:	0802c244 	.word	0x0802c244

08026644 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8026644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026646:	461e      	mov	r6, r3
 8026648:	1e4b      	subs	r3, r1, #1
 802664a:	b085      	sub	sp, #20
 802664c:	4604      	mov	r4, r0
 802664e:	2b01      	cmp	r3, #1
 8026650:	460d      	mov	r5, r1
 8026652:	4617      	mov	r7, r2
 8026654:	d84b      	bhi.n	80266ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8026656:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802665a:	1cd3      	adds	r3, r2, #3
 802665c:	b29b      	uxth	r3, r3
 802665e:	2b06      	cmp	r3, #6
 8026660:	d916      	bls.n	8026690 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8026662:	f8df c098 	ldr.w	ip, [pc, #152]	; 80266fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8026666:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802666a:	f8cd c004 	str.w	ip, [sp, #4]
 802666e:	f04f 0c00 	mov.w	ip, #0
 8026672:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8026676:	6900      	ldr	r0, [r0, #16]
 8026678:	f8ad 100c 	strh.w	r1, [sp, #12]
 802667c:	a901      	add	r1, sp, #4
 802667e:	f88d c008 	strb.w	ip, [sp, #8]
 8026682:	f8ad 200a 	strh.w	r2, [sp, #10]
 8026686:	f8ad 300e 	strh.w	r3, [sp, #14]
 802668a:	6803      	ldr	r3, [r0, #0]
 802668c:	689b      	ldr	r3, [r3, #8]
 802668e:	4798      	blx	r3
 8026690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026694:	1cd3      	adds	r3, r2, #3
 8026696:	b29b      	uxth	r3, r3
 8026698:	2b06      	cmp	r3, #6
 802669a:	d916      	bls.n	80266ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802669c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80266fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80266a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80266a4:	f8cd c004 	str.w	ip, [sp, #4]
 80266a8:	f04f 0c01 	mov.w	ip, #1
 80266ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80266b0:	6920      	ldr	r0, [r4, #16]
 80266b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80266b6:	a901      	add	r1, sp, #4
 80266b8:	f88d c008 	strb.w	ip, [sp, #8]
 80266bc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80266c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80266c4:	6803      	ldr	r3, [r0, #0]
 80266c6:	689b      	ldr	r3, [r3, #8]
 80266c8:	4798      	blx	r3
 80266ca:	4b0b      	ldr	r3, [pc, #44]	; (80266f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80266cc:	a901      	add	r1, sp, #4
 80266ce:	6920      	ldr	r0, [r4, #16]
 80266d0:	9301      	str	r3, [sp, #4]
 80266d2:	2300      	movs	r3, #0
 80266d4:	f88d 5008 	strb.w	r5, [sp, #8]
 80266d8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80266dc:	f8ad 600c 	strh.w	r6, [sp, #12]
 80266e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80266e4:	6803      	ldr	r3, [r0, #0]
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	4798      	blx	r3
 80266ea:	b005      	add	sp, #20
 80266ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266ee:	2900      	cmp	r1, #0
 80266f0:	d1eb      	bne.n	80266ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80266f2:	80a2      	strh	r2, [r4, #4]
 80266f4:	80c6      	strh	r6, [r0, #6]
 80266f6:	e7e8      	b.n	80266ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80266f8:	0802c230 	.word	0x0802c230
 80266fc:	0802c258 	.word	0x0802c258

08026700 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8026700:	10c9      	asrs	r1, r1, #3
 8026702:	2900      	cmp	r1, #0
 8026704:	bfb8      	it	lt
 8026706:	4249      	neglt	r1, r1
 8026708:	2801      	cmp	r0, #1
 802670a:	d108      	bne.n	802671e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 802670c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8026710:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8026714:	4601      	mov	r1, r0
 8026716:	dd02      	ble.n	802671e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8026718:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802671c:	4770      	bx	lr
 802671e:	29ff      	cmp	r1, #255	; 0xff
 8026720:	bfa8      	it	ge
 8026722:	21ff      	movge	r1, #255	; 0xff
 8026724:	4608      	mov	r0, r1
 8026726:	4770      	bx	lr

08026728 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8026728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802672c:	688c      	ldr	r4, [r1, #8]
 802672e:	b087      	sub	sp, #28
 8026730:	4607      	mov	r7, r0
 8026732:	2c00      	cmp	r4, #0
 8026734:	db2b      	blt.n	802678e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8026736:	6803      	ldr	r3, [r0, #0]
 8026738:	68da      	ldr	r2, [r3, #12]
 802673a:	42a2      	cmp	r2, r4
 802673c:	dd27      	ble.n	802678e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802673e:	681a      	ldr	r2, [r3, #0]
 8026740:	691e      	ldr	r6, [r3, #16]
 8026742:	68cd      	ldr	r5, [r1, #12]
 8026744:	fb06 2604 	mla	r6, r6, r4, r2
 8026748:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802674c:	698a      	ldr	r2, [r1, #24]
 802674e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8026752:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8026756:	9205      	str	r2, [sp, #20]
 8026758:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802675c:	9b05      	ldr	r3, [sp, #20]
 802675e:	6839      	ldr	r1, [r7, #0]
 8026760:	eb03 0c02 	add.w	ip, r3, r2
 8026764:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8026768:	6889      	ldr	r1, [r1, #8]
 802676a:	1898      	adds	r0, r3, r2
 802676c:	4288      	cmp	r0, r1
 802676e:	db02      	blt.n	8026776 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8026770:	1a8b      	subs	r3, r1, r2
 8026772:	2b00      	cmp	r3, #0
 8026774:	dd09      	ble.n	802678a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8026776:	6878      	ldr	r0, [r7, #4]
 8026778:	6801      	ldr	r1, [r0, #0]
 802677a:	9400      	str	r4, [sp, #0]
 802677c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8026780:	4653      	mov	r3, sl
 8026782:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8026786:	4631      	mov	r1, r6
 8026788:	47d8      	blx	fp
 802678a:	3d01      	subs	r5, #1
 802678c:	d1e4      	bne.n	8026758 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802678e:	b007      	add	sp, #28
 8026790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026794 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8026794:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8026798:	b90b      	cbnz	r3, 802679e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802679a:	f001 b974 	b.w	8027a86 <_ZN8touchgfx7Outline6lineToEii>
 802679e:	4770      	bx	lr

080267a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80267a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267a4:	4604      	mov	r4, r0
 80267a6:	2600      	movs	r6, #0
 80267a8:	4b8e      	ldr	r3, [pc, #568]	; (80269e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80267aa:	f100 0518 	add.w	r5, r0, #24
 80267ae:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80267b2:	b086      	sub	sp, #24
 80267b4:	4690      	mov	r8, r2
 80267b6:	e9c0 3100 	strd	r3, r1, [r0]
 80267ba:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80267be:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80267c2:	4628      	mov	r0, r5
 80267c4:	f001 fb75 	bl	8027eb2 <_ZN8touchgfx15RenderingBufferC1Ev>
 80267c8:	4638      	mov	r0, r7
 80267ca:	f000 fb45 	bl	8026e58 <_ZN8touchgfx7OutlineC1Ev>
 80267ce:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80267d2:	f001 fb23 	bl	8027e1c <_ZN8touchgfx8ScanlineC1Ev>
 80267d6:	2301      	movs	r3, #1
 80267d8:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 80267dc:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 80267e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80267e4:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 80267e8:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 80267ec:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 80267f0:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 80267f4:	f7f4 fbac 	bl	801af50 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80267f8:	b928      	cbnz	r0, 8026806 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 80267fa:	4b7b      	ldr	r3, [pc, #492]	; (80269e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 80267fc:	2118      	movs	r1, #24
 80267fe:	4a7b      	ldr	r2, [pc, #492]	; (80269ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8026800:	487b      	ldr	r0, [pc, #492]	; (80269f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8026802:	f001 fb99 	bl	8027f38 <__assert_func>
 8026806:	f9b8 2000 	ldrsh.w	r2, [r8]
 802680a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802680e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8026812:	4410      	add	r0, r2
 8026814:	9602      	str	r6, [sp, #8]
 8026816:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802681a:	b280      	uxth	r0, r0
 802681c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8026820:	fa0f fa80 	sxth.w	sl, r0
 8026824:	f1ba 0f00 	cmp.w	sl, #0
 8026828:	dd70      	ble.n	802690c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802682a:	4591      	cmp	r9, r2
 802682c:	dd6e      	ble.n	802690c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802682e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8026832:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8026836:	440b      	add	r3, r1
 8026838:	b29b      	uxth	r3, r3
 802683a:	b21e      	sxth	r6, r3
 802683c:	2e00      	cmp	r6, #0
 802683e:	dd65      	ble.n	802690c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026840:	458e      	cmp	lr, r1
 8026842:	dd63      	ble.n	802690c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8026844:	45d1      	cmp	r9, sl
 8026846:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802684a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802684e:	bfb8      	it	lt
 8026850:	fa1f f089 	uxthlt.w	r0, r9
 8026854:	45b6      	cmp	lr, r6
 8026856:	f8ad 2008 	strh.w	r2, [sp, #8]
 802685a:	bfb8      	it	lt
 802685c:	fa1f f38e 	uxthlt.w	r3, lr
 8026860:	1a80      	subs	r0, r0, r2
 8026862:	f8ad 100a 	strh.w	r1, [sp, #10]
 8026866:	1a5b      	subs	r3, r3, r1
 8026868:	f8ad 000c 	strh.w	r0, [sp, #12]
 802686c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026870:	f10d 0808 	add.w	r8, sp, #8
 8026874:	ae04      	add	r6, sp, #16
 8026876:	e898 0003 	ldmia.w	r8, {r0, r1}
 802687a:	e886 0003 	stmia.w	r6, {r0, r1}
 802687e:	f8dc 3000 	ldr.w	r3, [ip]
 8026882:	4660      	mov	r0, ip
 8026884:	4631      	mov	r1, r6
 8026886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026888:	4798      	blx	r3
 802688a:	6861      	ldr	r1, [r4, #4]
 802688c:	4640      	mov	r0, r8
 802688e:	3104      	adds	r1, #4
 8026890:	f7f5 f9cc 	bl	801bc2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8026894:	4630      	mov	r0, r6
 8026896:	f7f5 f9e1 	bl	801bc5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802689a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802689e:	f7f4 fae7 	bl	801ae70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80268a2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 80268a6:	4638      	mov	r0, r7
 80268a8:	f000 fab2 	bl	8026e10 <_ZN8touchgfx7Outline5resetEv>
 80268ac:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80268b0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80268b4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80268b8:	015b      	lsls	r3, r3, #5
 80268ba:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 80268be:	0152      	lsls	r2, r2, #5
 80268c0:	60e3      	str	r3, [r4, #12]
 80268c2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80268c6:	60a2      	str	r2, [r4, #8]
 80268c8:	015b      	lsls	r3, r3, #5
 80268ca:	6123      	str	r3, [r4, #16]
 80268cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80268d0:	015b      	lsls	r3, r3, #5
 80268d2:	6163      	str	r3, [r4, #20]
 80268d4:	4b47      	ldr	r3, [pc, #284]	; (80269f4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80268d6:	6818      	ldr	r0, [r3, #0]
 80268d8:	6803      	ldr	r3, [r0, #0]
 80268da:	6a1b      	ldr	r3, [r3, #32]
 80268dc:	4798      	blx	r3
 80268de:	4606      	mov	r6, r0
 80268e0:	f7e9 fee6 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80268e4:	6803      	ldr	r3, [r0, #0]
 80268e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80268e8:	4798      	blx	r3
 80268ea:	4607      	mov	r7, r0
 80268ec:	f7e9 fee0 	bl	80106b0 <_ZN8touchgfx3HAL3lcdEv>
 80268f0:	6803      	ldr	r3, [r0, #0]
 80268f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80268f4:	4798      	blx	r3
 80268f6:	280c      	cmp	r0, #12
 80268f8:	d854      	bhi.n	80269a4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 80268fa:	e8df f000 	tbb	[pc, r0]
 80268fe:	554b      	.short	0x554b
 8026900:	2b6e0a66 	.word	0x2b6e0a66
 8026904:	5f5f5f3b 	.word	0x5f5f5f3b
 8026908:	5f5f      	.short	0x5f5f
 802690a:	6e          	.byte	0x6e
 802690b:	00          	.byte	0x00
 802690c:	2300      	movs	r3, #0
 802690e:	9303      	str	r3, [sp, #12]
 8026910:	e7ae      	b.n	8026870 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8026912:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026916:	2108      	movs	r1, #8
 8026918:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802691c:	fb92 f1f1 	sdiv	r1, r2, r1
 8026920:	fb07 1303 	mla	r3, r7, r3, r1
 8026924:	441e      	add	r6, r3
 8026926:	4253      	negs	r3, r2
 8026928:	f002 0207 	and.w	r2, r2, #7
 802692c:	f003 0307 	and.w	r3, r3, #7
 8026930:	bf58      	it	pl
 8026932:	425a      	negpl	r2, r3
 8026934:	b2d2      	uxtb	r2, r2
 8026936:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802693a:	4628      	mov	r0, r5
 802693c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8026940:	66e1      	str	r1, [r4, #108]	; 0x6c
 8026942:	e9cd 1700 	strd	r1, r7, [sp]
 8026946:	4631      	mov	r1, r6
 8026948:	f001 fabb 	bl	8027ec2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802694c:	4620      	mov	r0, r4
 802694e:	b006      	add	sp, #24
 8026950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026954:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026958:	2104      	movs	r1, #4
 802695a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802695e:	fb92 f1f1 	sdiv	r1, r2, r1
 8026962:	fb07 1303 	mla	r3, r7, r3, r1
 8026966:	441e      	add	r6, r3
 8026968:	4253      	negs	r3, r2
 802696a:	f002 0203 	and.w	r2, r2, #3
 802696e:	f003 0303 	and.w	r3, r3, #3
 8026972:	e7dd      	b.n	8026930 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8026974:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8026978:	2102      	movs	r1, #2
 802697a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802697e:	2a00      	cmp	r2, #0
 8026980:	fb92 f1f1 	sdiv	r1, r2, r1
 8026984:	f002 0201 	and.w	r2, r2, #1
 8026988:	fb07 1303 	mla	r3, r7, r3, r1
 802698c:	bfb8      	it	lt
 802698e:	4252      	neglt	r2, r2
 8026990:	441e      	add	r6, r3
 8026992:	e7cf      	b.n	8026934 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8026994:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8026998:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802699c:	437b      	muls	r3, r7
 802699e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80269a2:	441e      	add	r6, r3
 80269a4:	2200      	movs	r2, #0
 80269a6:	e7c6      	b.n	8026936 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80269a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80269ac:	2103      	movs	r1, #3
 80269ae:	fb07 f203 	mul.w	r2, r7, r3
 80269b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80269b6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80269ba:	e7f2      	b.n	80269a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80269bc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80269c0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80269c4:	fb07 2303 	mla	r3, r7, r3, r2
 80269c8:	e7eb      	b.n	80269a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80269ca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80269ce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80269d2:	437b      	muls	r3, r7
 80269d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80269d8:	e7e3      	b.n	80269a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80269da:	4b07      	ldr	r3, [pc, #28]	; (80269f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80269dc:	2156      	movs	r1, #86	; 0x56
 80269de:	4a03      	ldr	r2, [pc, #12]	; (80269ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80269e0:	e70e      	b.n	8026800 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 80269e2:	bf00      	nop
 80269e4:	0802d8c4 	.word	0x0802d8c4
 80269e8:	0802d80e 	.word	0x0802d80e
 80269ec:	0802d8cc 	.word	0x0802d8cc
 80269f0:	0802d86a 	.word	0x0802d86a
 80269f4:	2000beec 	.word	0x2000beec
 80269f8:	0802d89e 	.word	0x0802d89e

080269fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80269fc:	6812      	ldr	r2, [r2, #0]
 80269fe:	2a00      	cmp	r2, #0
 8026a00:	db0b      	blt.n	8026a1a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8026a02:	9800      	ldr	r0, [sp, #0]
 8026a04:	6800      	ldr	r0, [r0, #0]
 8026a06:	4290      	cmp	r0, r2
 8026a08:	bfd4      	ite	le
 8026a0a:	2002      	movle	r0, #2
 8026a0c:	2000      	movgt	r0, #0
 8026a0e:	680a      	ldr	r2, [r1, #0]
 8026a10:	2a00      	cmp	r2, #0
 8026a12:	da04      	bge.n	8026a1e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8026a14:	f040 0004 	orr.w	r0, r0, #4
 8026a18:	4770      	bx	lr
 8026a1a:	2001      	movs	r0, #1
 8026a1c:	e7f7      	b.n	8026a0e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	4293      	cmp	r3, r2
 8026a22:	bfd8      	it	le
 8026a24:	f040 0008 	orrle.w	r0, r0, #8
 8026a28:	4770      	bx	lr
	...

08026a2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8026a2c:	4b07      	ldr	r3, [pc, #28]	; (8026a4c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8026a2e:	b510      	push	{r4, lr}
 8026a30:	781b      	ldrb	r3, [r3, #0]
 8026a32:	2b01      	cmp	r3, #1
 8026a34:	d108      	bne.n	8026a48 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8026a36:	6843      	ldr	r3, [r0, #4]
 8026a38:	6814      	ldr	r4, [r2, #0]
 8026a3a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8026a3e:	680b      	ldr	r3, [r1, #0]
 8026a40:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8026a44:	6013      	str	r3, [r2, #0]
 8026a46:	600c      	str	r4, [r1, #0]
 8026a48:	bd10      	pop	{r4, pc}
 8026a4a:	bf00      	nop
 8026a4c:	2000bee2 	.word	0x2000bee2

08026a50 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8026a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026a52:	b085      	sub	sp, #20
 8026a54:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8026a58:	4604      	mov	r4, r0
 8026a5a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026a5e:	b33b      	cbz	r3, 8026ab0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8026a60:	aa02      	add	r2, sp, #8
 8026a62:	a903      	add	r1, sp, #12
 8026a64:	f7ff ffe2 	bl	8026a2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026a68:	68a3      	ldr	r3, [r4, #8]
 8026a6a:	9e03      	ldr	r6, [sp, #12]
 8026a6c:	aa02      	add	r2, sp, #8
 8026a6e:	9f02      	ldr	r7, [sp, #8]
 8026a70:	a903      	add	r1, sp, #12
 8026a72:	1af6      	subs	r6, r6, r3
 8026a74:	68e3      	ldr	r3, [r4, #12]
 8026a76:	4620      	mov	r0, r4
 8026a78:	1aff      	subs	r7, r7, r3
 8026a7a:	f104 0314 	add.w	r3, r4, #20
 8026a7e:	9603      	str	r6, [sp, #12]
 8026a80:	9300      	str	r3, [sp, #0]
 8026a82:	f104 0310 	add.w	r3, r4, #16
 8026a86:	9702      	str	r7, [sp, #8]
 8026a88:	f7ff ffb8 	bl	80269fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026a8c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8026a90:	4605      	mov	r5, r0
 8026a92:	b97b      	cbnz	r3, 8026ab4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8026a94:	463a      	mov	r2, r7
 8026a96:	4631      	mov	r1, r6
 8026a98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8026a9c:	f7ff fe7a 	bl	8026794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026aa0:	9b03      	ldr	r3, [sp, #12]
 8026aa2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8026aa6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8026aaa:	9b02      	ldr	r3, [sp, #8]
 8026aac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8026ab0:	b005      	add	sp, #20
 8026ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ab4:	b110      	cbz	r0, 8026abc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8026ab6:	ea13 0200 	ands.w	r2, r3, r0
 8026aba:	d11c      	bne.n	8026af6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8026abc:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8026ac0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8026ac4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8026ac8:	b188      	cbz	r0, 8026aee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8026aca:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8026ace:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8026ad2:	b913      	cbnz	r3, 8026ada <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8026ad4:	4630      	mov	r0, r6
 8026ad6:	f001 f806 	bl	8027ae6 <_ZN8touchgfx7Outline6moveToEii>
 8026ada:	2300      	movs	r3, #0
 8026adc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026ae0:	2301      	movs	r3, #1
 8026ae2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8026ae6:	4630      	mov	r0, r6
 8026ae8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8026aec:	e7d6      	b.n	8026a9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8026aee:	4630      	mov	r0, r6
 8026af0:	f7ff fe50 	bl	8026794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026af4:	e7f7      	b.n	8026ae6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8026af6:	4615      	mov	r5, r2
 8026af8:	e7d2      	b.n	8026aa0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08026afa <_ZN8touchgfx6Canvas5closeEv>:
 8026afa:	b538      	push	{r3, r4, r5, lr}
 8026afc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8026b00:	4604      	mov	r4, r0
 8026b02:	b993      	cbnz	r3, 8026b2a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026b04:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8026b08:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8026b0c:	4213      	tst	r3, r2
 8026b0e:	d10c      	bne.n	8026b2a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8026b10:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8026b14:	b123      	cbz	r3, 8026b20 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8026b16:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8026b1a:	4628      	mov	r0, r5
 8026b1c:	f7ff fe3a 	bl	8026794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026b20:	4628      	mov	r0, r5
 8026b22:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8026b26:	f7ff fe35 	bl	8026794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8026b2a:	2300      	movs	r3, #0
 8026b2c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026b30:	bd38      	pop	{r3, r4, r5, pc}

08026b32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8026b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b34:	b085      	sub	sp, #20
 8026b36:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8026b3a:	4604      	mov	r4, r0
 8026b3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8026b40:	b353      	cbz	r3, 8026b98 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8026b42:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8026b46:	b90b      	cbnz	r3, 8026b4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8026b48:	f7ff ffd7 	bl	8026afa <_ZN8touchgfx6Canvas5closeEv>
 8026b4c:	aa02      	add	r2, sp, #8
 8026b4e:	a903      	add	r1, sp, #12
 8026b50:	4620      	mov	r0, r4
 8026b52:	f7ff ff6b 	bl	8026a2c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8026b56:	68a3      	ldr	r3, [r4, #8]
 8026b58:	9d03      	ldr	r5, [sp, #12]
 8026b5a:	aa02      	add	r2, sp, #8
 8026b5c:	9e02      	ldr	r6, [sp, #8]
 8026b5e:	a903      	add	r1, sp, #12
 8026b60:	1aed      	subs	r5, r5, r3
 8026b62:	68e3      	ldr	r3, [r4, #12]
 8026b64:	4620      	mov	r0, r4
 8026b66:	1af6      	subs	r6, r6, r3
 8026b68:	f104 0314 	add.w	r3, r4, #20
 8026b6c:	9503      	str	r5, [sp, #12]
 8026b6e:	9300      	str	r3, [sp, #0]
 8026b70:	f104 0310 	add.w	r3, r4, #16
 8026b74:	9602      	str	r6, [sp, #8]
 8026b76:	f7ff ff41 	bl	80269fc <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8026b7a:	4607      	mov	r7, r0
 8026b7c:	b170      	cbz	r0, 8026b9c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8026b7e:	2301      	movs	r3, #1
 8026b80:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026b84:	9a03      	ldr	r2, [sp, #12]
 8026b86:	9b02      	ldr	r3, [sp, #8]
 8026b88:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8026b8c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8026b90:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8026b94:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8026b98:	b005      	add	sp, #20
 8026b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026b9c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8026ba0:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8026ba4:	b92b      	cbnz	r3, 8026bb2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8026ba6:	4632      	mov	r2, r6
 8026ba8:	4629      	mov	r1, r5
 8026baa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8026bae:	f000 ff9a 	bl	8027ae6 <_ZN8touchgfx7Outline6moveToEii>
 8026bb2:	2300      	movs	r3, #0
 8026bb4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8026bb8:	2301      	movs	r3, #1
 8026bba:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8026bbe:	e7e1      	b.n	8026b84 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08026bc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8026bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bc4:	4604      	mov	r4, r0
 8026bc6:	b087      	sub	sp, #28
 8026bc8:	9105      	str	r1, [sp, #20]
 8026bca:	f001 f8d0 	bl	8027d6e <_ZN8touchgfx7Outline8getCellsEv>
 8026bce:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8026bd2:	4605      	mov	r5, r0
 8026bd4:	f1b9 0f00 	cmp.w	r9, #0
 8026bd8:	d103      	bne.n	8026be2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8026bda:	2001      	movs	r0, #1
 8026bdc:	b007      	add	sp, #28
 8026bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026be2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8026be6:	2e00      	cmp	r6, #0
 8026be8:	d139      	bne.n	8026c5e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8026bea:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8026bee:	f105 0708 	add.w	r7, r5, #8
 8026bf2:	4640      	mov	r0, r8
 8026bf4:	f001 f8fd 	bl	8027df2 <_ZN8touchgfx8Scanline5resetEv>
 8026bf8:	f109 33ff 	add.w	r3, r9, #4294967295
 8026bfc:	9303      	str	r3, [sp, #12]
 8026bfe:	f9b5 b000 	ldrsh.w	fp, [r5]
 8026c02:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8026c06:	46da      	mov	sl, fp
 8026c08:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8026c0c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8026c10:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8026c14:	9b03      	ldr	r3, [sp, #12]
 8026c16:	4416      	add	r6, r2
 8026c18:	9504      	str	r5, [sp, #16]
 8026c1a:	463d      	mov	r5, r7
 8026c1c:	3b01      	subs	r3, #1
 8026c1e:	9303      	str	r3, [sp, #12]
 8026c20:	3301      	adds	r3, #1
 8026c22:	d01e      	beq.n	8026c62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8026c24:	3708      	adds	r7, #8
 8026c26:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8026c2a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8026c2e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8026c32:	4290      	cmp	r0, r2
 8026c34:	d11e      	bne.n	8026c74 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8026c36:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8026c3a:	4411      	add	r1, r2
 8026c3c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8026c40:	e7e8      	b.n	8026c14 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8026c42:	1c91      	adds	r1, r2, #2
 8026c44:	f04f 0301 	mov.w	r3, #1
 8026c48:	65e1      	str	r1, [r4, #92]	; 0x5c
 8026c4a:	8053      	strh	r3, [r2, #2]
 8026c4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8026c4e:	1c91      	adds	r1, r2, #2
 8026c50:	65a1      	str	r1, [r4, #88]	; 0x58
 8026c52:	f8a2 b002 	strh.w	fp, [r2, #2]
 8026c56:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8026c58:	3201      	adds	r2, #1
 8026c5a:	6562      	str	r2, [r4, #84]	; 0x54
 8026c5c:	e03a      	b.n	8026cd4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8026c5e:	2000      	movs	r0, #0
 8026c60:	e7bc      	b.n	8026bdc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8026c62:	b951      	cbnz	r1, 8026c7a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8026c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8026c66:	2b00      	cmp	r3, #0
 8026c68:	d0b7      	beq.n	8026bda <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8026c6a:	4641      	mov	r1, r8
 8026c6c:	9805      	ldr	r0, [sp, #20]
 8026c6e:	f7ff fd5b 	bl	8026728 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8026c72:	e7b2      	b.n	8026bda <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8026c74:	2900      	cmp	r1, #0
 8026c76:	d035      	beq.n	8026ce4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8026c78:	9504      	str	r5, [sp, #16]
 8026c7a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8026c7e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8026c82:	f7ff fd3d 	bl	8026700 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8026c86:	4605      	mov	r5, r0
 8026c88:	b330      	cbz	r0, 8026cd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026c8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8026c8c:	b182      	cbz	r2, 8026cb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8026c8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8026c90:	454a      	cmp	r2, r9
 8026c92:	d00d      	beq.n	8026cb0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8026c94:	4641      	mov	r1, r8
 8026c96:	9805      	ldr	r0, [sp, #20]
 8026c98:	f7ff fd46 	bl	8026728 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8026c9c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026ca0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8026ca2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026ca6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8026ca8:	2300      	movs	r3, #0
 8026caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026cac:	6563      	str	r3, [r4, #84]	; 0x54
 8026cae:	65a2      	str	r2, [r4, #88]	; 0x58
 8026cb0:	f1bb 0f00 	cmp.w	fp, #0
 8026cb4:	db10      	blt.n	8026cd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026cb6:	f7f4 f959 	bl	801af6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8026cba:	4583      	cmp	fp, r0
 8026cbc:	d20c      	bcs.n	8026cd8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8026cbe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8026cc0:	f802 500b 	strb.w	r5, [r2, fp]
 8026cc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8026cc6:	3201      	adds	r2, #1
 8026cc8:	455a      	cmp	r2, fp
 8026cca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8026ccc:	d1b9      	bne.n	8026c42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8026cce:	8811      	ldrh	r1, [r2, #0]
 8026cd0:	3101      	adds	r1, #1
 8026cd2:	8011      	strh	r1, [r2, #0]
 8026cd4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8026cd8:	9b03      	ldr	r3, [sp, #12]
 8026cda:	3301      	adds	r3, #1
 8026cdc:	d0c2      	beq.n	8026c64 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8026cde:	f10b 0a01 	add.w	sl, fp, #1
 8026ce2:	9d04      	ldr	r5, [sp, #16]
 8026ce4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026ce8:	4553      	cmp	r3, sl
 8026cea:	dd88      	ble.n	8026bfe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8026cec:	01b1      	lsls	r1, r6, #6
 8026cee:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8026cf2:	f7ff fd05 	bl	8026700 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8026cf6:	4683      	mov	fp, r0
 8026cf8:	2800      	cmp	r0, #0
 8026cfa:	d080      	beq.n	8026bfe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8026cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8026cfe:	b183      	cbz	r3, 8026d22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026d00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8026d02:	454b      	cmp	r3, r9
 8026d04:	d00d      	beq.n	8026d22 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8026d06:	4641      	mov	r1, r8
 8026d08:	9805      	ldr	r0, [sp, #20]
 8026d0a:	f7ff fd0d 	bl	8026728 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8026d0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026d12:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8026d16:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8026d18:	65e3      	str	r3, [r4, #92]	; 0x5c
 8026d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026d1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8026d1e:	2300      	movs	r3, #0
 8026d20:	6563      	str	r3, [r4, #84]	; 0x54
 8026d22:	f9b5 3000 	ldrsh.w	r3, [r5]
 8026d26:	464a      	mov	r2, r9
 8026d28:	f8cd b000 	str.w	fp, [sp]
 8026d2c:	4651      	mov	r1, sl
 8026d2e:	eba3 030a 	sub.w	r3, r3, sl
 8026d32:	4640      	mov	r0, r8
 8026d34:	f001 f884 	bl	8027e40 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8026d38:	e761      	b.n	8026bfe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08026d3a <_ZN8touchgfx6Canvas6renderEv>:
 8026d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026d3c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8026d40:	4604      	mov	r4, r0
 8026d42:	b913      	cbnz	r3, 8026d4a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8026d44:	2001      	movs	r0, #1
 8026d46:	b003      	add	sp, #12
 8026d48:	bd30      	pop	{r4, r5, pc}
 8026d4a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8026d4e:	2b00      	cmp	r3, #0
 8026d50:	d131      	bne.n	8026db6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8026d52:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	d0f4      	beq.n	8026d44 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8026d5a:	6840      	ldr	r0, [r0, #4]
 8026d5c:	6803      	ldr	r3, [r0, #0]
 8026d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026d60:	4798      	blx	r3
 8026d62:	2800      	cmp	r0, #0
 8026d64:	d0ee      	beq.n	8026d44 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8026d66:	4620      	mov	r0, r4
 8026d68:	f7ff fec7 	bl	8026afa <_ZN8touchgfx6Canvas5closeEv>
 8026d6c:	6860      	ldr	r0, [r4, #4]
 8026d6e:	6803      	ldr	r3, [r0, #0]
 8026d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026d72:	4798      	blx	r3
 8026d74:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8026d78:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8026d7c:	f7f2 ff61 	bl	8019c42 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8026d80:	6860      	ldr	r0, [r4, #4]
 8026d82:	6803      	ldr	r3, [r0, #0]
 8026d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026d86:	4798      	blx	r3
 8026d88:	4605      	mov	r5, r0
 8026d8a:	6860      	ldr	r0, [r4, #4]
 8026d8c:	6803      	ldr	r3, [r0, #0]
 8026d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026d90:	4798      	blx	r3
 8026d92:	4601      	mov	r1, r0
 8026d94:	4628      	mov	r0, r5
 8026d96:	f7f2 ff57 	bl	8019c48 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8026d9a:	6860      	ldr	r0, [r4, #4]
 8026d9c:	6803      	ldr	r3, [r0, #0]
 8026d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026da0:	4798      	blx	r3
 8026da2:	f104 0318 	add.w	r3, r4, #24
 8026da6:	4669      	mov	r1, sp
 8026da8:	e9cd 3000 	strd	r3, r0, [sp]
 8026dac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8026db0:	f7ff ff06 	bl	8026bc0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8026db4:	e7c7      	b.n	8026d46 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8026db6:	2000      	movs	r0, #0
 8026db8:	e7c5      	b.n	8026d46 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08026dbc <_ZN8touchgfx6CanvasD1Ev>:
 8026dbc:	b538      	push	{r3, r4, r5, lr}
 8026dbe:	4605      	mov	r5, r0
 8026dc0:	4b08      	ldr	r3, [pc, #32]	; (8026de4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8026dc2:	4604      	mov	r4, r0
 8026dc4:	f845 3b2c 	str.w	r3, [r5], #44
 8026dc8:	4b07      	ldr	r3, [pc, #28]	; (8026de8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8026dca:	6818      	ldr	r0, [r3, #0]
 8026dcc:	6803      	ldr	r3, [r0, #0]
 8026dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026dd0:	4798      	blx	r3
 8026dd2:	4628      	mov	r0, r5
 8026dd4:	f000 f814 	bl	8026e00 <_ZN8touchgfx7OutlineD1Ev>
 8026dd8:	f104 0018 	add.w	r0, r4, #24
 8026ddc:	f001 f870 	bl	8027ec0 <_ZN8touchgfx15RenderingBufferD1Ev>
 8026de0:	4620      	mov	r0, r4
 8026de2:	bd38      	pop	{r3, r4, r5, pc}
 8026de4:	0802d8c4 	.word	0x0802d8c4
 8026de8:	2000beec 	.word	0x2000beec

08026dec <_ZN8touchgfx6CanvasD0Ev>:
 8026dec:	b510      	push	{r4, lr}
 8026dee:	4604      	mov	r4, r0
 8026df0:	f7ff ffe4 	bl	8026dbc <_ZN8touchgfx6CanvasD1Ev>
 8026df4:	21b8      	movs	r1, #184	; 0xb8
 8026df6:	4620      	mov	r0, r4
 8026df8:	f001 f873 	bl	8027ee2 <_ZdlPvj>
 8026dfc:	4620      	mov	r0, r4
 8026dfe:	bd10      	pop	{r4, pc}

08026e00 <_ZN8touchgfx7OutlineD1Ev>:
 8026e00:	4770      	bx	lr

08026e02 <_ZN8touchgfx7OutlineD0Ev>:
 8026e02:	b510      	push	{r4, lr}
 8026e04:	4604      	mov	r4, r0
 8026e06:	2148      	movs	r1, #72	; 0x48
 8026e08:	f001 f86b 	bl	8027ee2 <_ZdlPvj>
 8026e0c:	4620      	mov	r0, r4
 8026e0e:	bd10      	pop	{r4, pc}

08026e10 <_ZN8touchgfx7Outline5resetEv>:
 8026e10:	b510      	push	{r4, lr}
 8026e12:	4604      	mov	r4, r0
 8026e14:	f7f4 f8c2 	bl	801af9c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8026e18:	60e0      	str	r0, [r4, #12]
 8026e1a:	f7f4 f8c5 	bl	801afa8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8026e1e:	68e3      	ldr	r3, [r4, #12]
 8026e20:	2200      	movs	r2, #0
 8026e22:	08c0      	lsrs	r0, r0, #3
 8026e24:	6123      	str	r3, [r4, #16]
 8026e26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8026e2a:	6060      	str	r0, [r4, #4]
 8026e2c:	82a3      	strh	r3, [r4, #20]
 8026e2e:	82e3      	strh	r3, [r4, #22]
 8026e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026e32:	60a2      	str	r2, [r4, #8]
 8026e34:	f023 0301 	bic.w	r3, r3, #1
 8026e38:	8322      	strh	r2, [r4, #24]
 8026e3a:	8362      	strh	r2, [r4, #26]
 8026e3c:	f043 0302 	orr.w	r3, r3, #2
 8026e40:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8026e44:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026e46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026e4a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8026e4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8026e52:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8026e56:	bd10      	pop	{r4, pc}

08026e58 <_ZN8touchgfx7OutlineC1Ev>:
 8026e58:	4b0f      	ldr	r3, [pc, #60]	; (8026e98 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8026e5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8026e5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8026e62:	b510      	push	{r4, lr}
 8026e64:	6003      	str	r3, [r0, #0]
 8026e66:	2300      	movs	r3, #0
 8026e68:	4604      	mov	r4, r0
 8026e6a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8026e6e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8026e72:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026e76:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8026e7a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8026e7e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8026e82:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8026e86:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8026e8a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8026e8e:	f7ff ffbf 	bl	8026e10 <_ZN8touchgfx7Outline5resetEv>
 8026e92:	4620      	mov	r0, r4
 8026e94:	bd10      	pop	{r4, pc}
 8026e96:	bf00      	nop
 8026e98:	0802d924 	.word	0x0802d924

08026e9c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8026e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ea0:	b093      	sub	sp, #76	; 0x4c
 8026ea2:	4604      	mov	r4, r0
 8026ea4:	1156      	asrs	r6, r2, #5
 8026ea6:	f002 0e1f 	and.w	lr, r2, #31
 8026eaa:	981c      	ldr	r0, [sp, #112]	; 0x70
 8026eac:	9305      	str	r3, [sp, #20]
 8026eae:	1143      	asrs	r3, r0, #5
 8026eb0:	1145      	asrs	r5, r0, #5
 8026eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8026eb4:	f000 031f 	and.w	r3, r0, #31
 8026eb8:	9303      	str	r3, [sp, #12]
 8026eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026ebc:	42b3      	cmp	r3, r6
 8026ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026ec0:	bfc8      	it	gt
 8026ec2:	6326      	strgt	r6, [r4, #48]	; 0x30
 8026ec4:	42b3      	cmp	r3, r6
 8026ec6:	bfdc      	itt	le
 8026ec8:	1c73      	addle	r3, r6, #1
 8026eca:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026ecc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026ece:	42ab      	cmp	r3, r5
 8026ed0:	bfc8      	it	gt
 8026ed2:	462b      	movgt	r3, r5
 8026ed4:	ea4f 1560 	mov.w	r5, r0, asr #5
 8026ed8:	bfc8      	it	gt
 8026eda:	6323      	strgt	r3, [r4, #48]	; 0x30
 8026edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026ede:	42ab      	cmp	r3, r5
 8026ee0:	bfd8      	it	le
 8026ee2:	462b      	movle	r3, r5
 8026ee4:	ea4f 1561 	mov.w	r5, r1, asr #5
 8026ee8:	bfdc      	itt	le
 8026eea:	3301      	addle	r3, #1
 8026eec:	63a3      	strle	r3, [r4, #56]	; 0x38
 8026eee:	9b05      	ldr	r3, [sp, #20]
 8026ef0:	eba3 0a01 	sub.w	sl, r3, r1
 8026ef4:	1143      	asrs	r3, r0, #5
 8026ef6:	429e      	cmp	r6, r3
 8026ef8:	f040 8119 	bne.w	802712e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8026efc:	9b05      	ldr	r3, [sp, #20]
 8026efe:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8026f02:	9b03      	ldr	r3, [sp, #12]
 8026f04:	459e      	cmp	lr, r3
 8026f06:	d12c      	bne.n	8026f62 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8026f08:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026f0c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8026f10:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8026f14:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8026f18:	4291      	cmp	r1, r2
 8026f1a:	d037      	beq.n	8026f8c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8026f1c:	8b61      	ldrh	r1, [r4, #26]
 8026f1e:	8b22      	ldrh	r2, [r4, #24]
 8026f20:	430a      	orrs	r2, r1
 8026f22:	d00b      	beq.n	8026f3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	db09      	blt.n	8026f3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026f28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8026f2a:	429a      	cmp	r2, r3
 8026f2c:	dd06      	ble.n	8026f3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026f2e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8026f32:	429a      	cmp	r2, r3
 8026f34:	d308      	bcc.n	8026f48 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8026f36:	2301      	movs	r3, #1
 8026f38:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8026f3c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8026f40:	82e6      	strh	r6, [r4, #22]
 8026f42:	2300      	movs	r3, #0
 8026f44:	8323      	strh	r3, [r4, #24]
 8026f46:	e0c6      	b.n	80270d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8026f48:	f104 0314 	add.w	r3, r4, #20
 8026f4c:	6922      	ldr	r2, [r4, #16]
 8026f4e:	cb03      	ldmia	r3!, {r0, r1}
 8026f50:	6010      	str	r0, [r2, #0]
 8026f52:	6051      	str	r1, [r2, #4]
 8026f54:	6923      	ldr	r3, [r4, #16]
 8026f56:	3308      	adds	r3, #8
 8026f58:	6123      	str	r3, [r4, #16]
 8026f5a:	68a3      	ldr	r3, [r4, #8]
 8026f5c:	3301      	adds	r3, #1
 8026f5e:	60a3      	str	r3, [r4, #8]
 8026f60:	e7ec      	b.n	8026f3c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8026f62:	9b05      	ldr	r3, [sp, #20]
 8026f64:	45ac      	cmp	ip, r5
 8026f66:	f001 011f 	and.w	r1, r1, #31
 8026f6a:	8b20      	ldrh	r0, [r4, #24]
 8026f6c:	f003 031f 	and.w	r3, r3, #31
 8026f70:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8026f74:	9304      	str	r3, [sp, #16]
 8026f76:	9b03      	ldr	r3, [sp, #12]
 8026f78:	eba3 020e 	sub.w	r2, r3, lr
 8026f7c:	d109      	bne.n	8026f92 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8026f7e:	9b04      	ldr	r3, [sp, #16]
 8026f80:	4410      	add	r0, r2
 8026f82:	4419      	add	r1, r3
 8026f84:	8320      	strh	r0, [r4, #24]
 8026f86:	fb02 8201 	mla	r2, r2, r1, r8
 8026f8a:	8362      	strh	r2, [r4, #26]
 8026f8c:	b013      	add	sp, #76	; 0x4c
 8026f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f92:	f1ba 0f00 	cmp.w	sl, #0
 8026f96:	f2c0 80a0 	blt.w	80270da <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8026f9a:	f1c1 0320 	rsb	r3, r1, #32
 8026f9e:	f04f 0b20 	mov.w	fp, #32
 8026fa2:	435a      	muls	r2, r3
 8026fa4:	2301      	movs	r3, #1
 8026fa6:	9302      	str	r3, [sp, #8]
 8026fa8:	4459      	add	r1, fp
 8026faa:	fb92 f7fa 	sdiv	r7, r2, sl
 8026fae:	fb0a 2217 	mls	r2, sl, r7, r2
 8026fb2:	2a00      	cmp	r2, #0
 8026fb4:	bfbc      	itt	lt
 8026fb6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8026fba:	4452      	addlt	r2, sl
 8026fbc:	fb07 8101 	mla	r1, r7, r1, r8
 8026fc0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8026fc4:	4438      	add	r0, r7
 8026fc6:	b20b      	sxth	r3, r1
 8026fc8:	9902      	ldr	r1, [sp, #8]
 8026fca:	b200      	sxth	r0, r0
 8026fcc:	9301      	str	r3, [sp, #4]
 8026fce:	8363      	strh	r3, [r4, #26]
 8026fd0:	186b      	adds	r3, r5, r1
 8026fd2:	0435      	lsls	r5, r6, #16
 8026fd4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026fd8:	8320      	strh	r0, [r4, #24]
 8026fda:	eb03 0905 	add.w	r9, r3, r5
 8026fde:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8026fe2:	9300      	str	r3, [sp, #0]
 8026fe4:	45c1      	cmp	r9, r8
 8026fe6:	9505      	str	r5, [sp, #20]
 8026fe8:	d014      	beq.n	8027014 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8026fea:	9b01      	ldr	r3, [sp, #4]
 8026fec:	4303      	orrs	r3, r0
 8026fee:	d00b      	beq.n	8027008 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026ff0:	2900      	cmp	r1, #0
 8026ff2:	db09      	blt.n	8027008 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026ff6:	428b      	cmp	r3, r1
 8026ff8:	dd06      	ble.n	8027008 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8026ffa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8026ffe:	4299      	cmp	r1, r3
 8027000:	d374      	bcc.n	80270ec <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8027002:	2301      	movs	r3, #1
 8027004:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027008:	9b00      	ldr	r3, [sp, #0]
 802700a:	82e6      	strh	r6, [r4, #22]
 802700c:	82a3      	strh	r3, [r4, #20]
 802700e:	2300      	movs	r3, #0
 8027010:	8323      	strh	r3, [r4, #24]
 8027012:	8363      	strh	r3, [r4, #26]
 8027014:	9900      	ldr	r1, [sp, #0]
 8027016:	eb0e 0307 	add.w	r3, lr, r7
 802701a:	458c      	cmp	ip, r1
 802701c:	d04e      	beq.n	80270bc <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802701e:	9903      	ldr	r1, [sp, #12]
 8027020:	eba2 020a 	sub.w	r2, r2, sl
 8027024:	1ac9      	subs	r1, r1, r3
 8027026:	9201      	str	r2, [sp, #4]
 8027028:	440f      	add	r7, r1
 802702a:	017f      	lsls	r7, r7, #5
 802702c:	fb97 fefa 	sdiv	lr, r7, sl
 8027030:	fb0a 771e 	mls	r7, sl, lr, r7
 8027034:	2f00      	cmp	r7, #0
 8027036:	bfbc      	itt	lt
 8027038:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802703c:	4457      	addlt	r7, sl
 802703e:	f10e 0101 	add.w	r1, lr, #1
 8027042:	9106      	str	r1, [sp, #24]
 8027044:	9a01      	ldr	r2, [sp, #4]
 8027046:	8b20      	ldrh	r0, [r4, #24]
 8027048:	19d2      	adds	r2, r2, r7
 802704a:	8b61      	ldrh	r1, [r4, #26]
 802704c:	9d02      	ldr	r5, [sp, #8]
 802704e:	9201      	str	r2, [sp, #4]
 8027050:	bf5b      	ittet	pl
 8027052:	eba2 020a 	subpl.w	r2, r2, sl
 8027056:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 802705a:	46f0      	movmi	r8, lr
 802705c:	9201      	strpl	r2, [sp, #4]
 802705e:	9a00      	ldr	r2, [sp, #0]
 8027060:	4440      	add	r0, r8
 8027062:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8027066:	4443      	add	r3, r8
 8027068:	442a      	add	r2, r5
 802706a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802706e:	9d05      	ldr	r5, [sp, #20]
 8027070:	b200      	sxth	r0, r0
 8027072:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027076:	b209      	sxth	r1, r1
 8027078:	4415      	add	r5, r2
 802707a:	8320      	strh	r0, [r4, #24]
 802707c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027080:	8361      	strh	r1, [r4, #26]
 8027082:	9200      	str	r2, [sp, #0]
 8027084:	454d      	cmp	r5, r9
 8027086:	d016      	beq.n	80270b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8027088:	4301      	orrs	r1, r0
 802708a:	d00d      	beq.n	80270a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802708c:	f1b8 0f00 	cmp.w	r8, #0
 8027090:	db0a      	blt.n	80270a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027094:	4541      	cmp	r1, r8
 8027096:	dd07      	ble.n	80270a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8027098:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802709c:	4288      	cmp	r0, r1
 802709e:	d335      	bcc.n	802710c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80270a0:	f04f 0101 	mov.w	r1, #1
 80270a4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80270a8:	9900      	ldr	r1, [sp, #0]
 80270aa:	82e6      	strh	r6, [r4, #22]
 80270ac:	82a1      	strh	r1, [r4, #20]
 80270ae:	f04f 0100 	mov.w	r1, #0
 80270b2:	8321      	strh	r1, [r4, #24]
 80270b4:	8361      	strh	r1, [r4, #26]
 80270b6:	9a00      	ldr	r2, [sp, #0]
 80270b8:	4594      	cmp	ip, r2
 80270ba:	d1c3      	bne.n	8027044 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 80270bc:	9a03      	ldr	r2, [sp, #12]
 80270be:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 80270c2:	1ad3      	subs	r3, r2, r3
 80270c4:	8b22      	ldrh	r2, [r4, #24]
 80270c6:	441a      	add	r2, r3
 80270c8:	8322      	strh	r2, [r4, #24]
 80270ca:	9a04      	ldr	r2, [sp, #16]
 80270cc:	3220      	adds	r2, #32
 80270ce:	eba2 020b 	sub.w	r2, r2, fp
 80270d2:	fb03 c302 	mla	r3, r3, r2, ip
 80270d6:	8363      	strh	r3, [r4, #26]
 80270d8:	e758      	b.n	8026f8c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80270da:	f04f 33ff 	mov.w	r3, #4294967295
 80270de:	434a      	muls	r2, r1
 80270e0:	f1ca 0a00 	rsb	sl, sl, #0
 80270e4:	f04f 0b00 	mov.w	fp, #0
 80270e8:	9302      	str	r3, [sp, #8]
 80270ea:	e75d      	b.n	8026fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 80270ec:	f104 0314 	add.w	r3, r4, #20
 80270f0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80270f4:	cb03      	ldmia	r3!, {r0, r1}
 80270f6:	f8c8 0000 	str.w	r0, [r8]
 80270fa:	f8c8 1004 	str.w	r1, [r8, #4]
 80270fe:	6923      	ldr	r3, [r4, #16]
 8027100:	3308      	adds	r3, #8
 8027102:	6123      	str	r3, [r4, #16]
 8027104:	68a3      	ldr	r3, [r4, #8]
 8027106:	3301      	adds	r3, #1
 8027108:	60a3      	str	r3, [r4, #8]
 802710a:	e77d      	b.n	8027008 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802710c:	f104 0814 	add.w	r8, r4, #20
 8027110:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027114:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027118:	f8c9 0000 	str.w	r0, [r9]
 802711c:	f8c9 1004 	str.w	r1, [r9, #4]
 8027120:	6921      	ldr	r1, [r4, #16]
 8027122:	3108      	adds	r1, #8
 8027124:	6121      	str	r1, [r4, #16]
 8027126:	68a1      	ldr	r1, [r4, #8]
 8027128:	3101      	adds	r1, #1
 802712a:	60a1      	str	r1, [r4, #8]
 802712c:	e7bc      	b.n	80270a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802712e:	1a83      	subs	r3, r0, r2
 8027130:	9301      	str	r3, [sp, #4]
 8027132:	f1ba 0f00 	cmp.w	sl, #0
 8027136:	f040 8094 	bne.w	8027262 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 802713a:	9a01      	ldr	r2, [sp, #4]
 802713c:	0049      	lsls	r1, r1, #1
 802713e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8027142:	2a00      	cmp	r2, #0
 8027144:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8027148:	8b62      	ldrh	r2, [r4, #26]
 802714a:	bfaa      	itet	ge
 802714c:	f04f 0a20 	movge.w	sl, #32
 8027150:	f04f 38ff 	movlt.w	r8, #4294967295
 8027154:	f04f 0801 	movge.w	r8, #1
 8027158:	8b21      	ldrh	r1, [r4, #24]
 802715a:	ebaa 0e0e 	sub.w	lr, sl, lr
 802715e:	4471      	add	r1, lr
 8027160:	fb0e 2e03 	mla	lr, lr, r3, r2
 8027164:	eb08 0206 	add.w	r2, r8, r6
 8027168:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 802716c:	b209      	sxth	r1, r1
 802716e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8027172:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8027176:	8321      	strh	r1, [r4, #24]
 8027178:	fa0f fe8e 	sxth.w	lr, lr
 802717c:	42b7      	cmp	r7, r6
 802717e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027182:	d013      	beq.n	80271ac <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8027184:	ea51 010e 	orrs.w	r1, r1, lr
 8027188:	d00b      	beq.n	80271a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802718a:	2800      	cmp	r0, #0
 802718c:	db09      	blt.n	80271a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802718e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027190:	4281      	cmp	r1, r0
 8027192:	dd06      	ble.n	80271a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8027194:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027198:	4288      	cmp	r0, r1
 802719a:	d339      	bcc.n	8027210 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 802719c:	2101      	movs	r1, #1
 802719e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80271a2:	2100      	movs	r1, #0
 80271a4:	82a5      	strh	r5, [r4, #20]
 80271a6:	82e2      	strh	r2, [r4, #22]
 80271a8:	8321      	strh	r1, [r4, #24]
 80271aa:	8361      	strh	r1, [r4, #26]
 80271ac:	f1aa 0610 	sub.w	r6, sl, #16
 80271b0:	f04f 0e00 	mov.w	lr, #0
 80271b4:	f04f 0b01 	mov.w	fp, #1
 80271b8:	0076      	lsls	r6, r6, #1
 80271ba:	fb06 f703 	mul.w	r7, r6, r3
 80271be:	b236      	sxth	r6, r6
 80271c0:	b23f      	sxth	r7, r7
 80271c2:	ea46 0107 	orr.w	r1, r6, r7
 80271c6:	9100      	str	r1, [sp, #0]
 80271c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80271ca:	428a      	cmp	r2, r1
 80271cc:	d03e      	beq.n	802724c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 80271ce:	4442      	add	r2, r8
 80271d0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80271d4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80271d8:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 80271dc:	8326      	strh	r6, [r4, #24]
 80271de:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 80271e2:	8367      	strh	r7, [r4, #26]
 80271e4:	4584      	cmp	ip, r0
 80271e6:	d0ef      	beq.n	80271c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 80271e8:	9800      	ldr	r0, [sp, #0]
 80271ea:	b150      	cbz	r0, 8027202 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80271ec:	2900      	cmp	r1, #0
 80271ee:	db08      	blt.n	8027202 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80271f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80271f2:	4288      	cmp	r0, r1
 80271f4:	dd05      	ble.n	8027202 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80271f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80271fa:	4288      	cmp	r0, r1
 80271fc:	d315      	bcc.n	802722a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 80271fe:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8027202:	82a5      	strh	r5, [r4, #20]
 8027204:	82e2      	strh	r2, [r4, #22]
 8027206:	f8a4 e018 	strh.w	lr, [r4, #24]
 802720a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802720e:	e7db      	b.n	80271c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8027210:	f104 0614 	add.w	r6, r4, #20
 8027214:	6927      	ldr	r7, [r4, #16]
 8027216:	ce03      	ldmia	r6!, {r0, r1}
 8027218:	6038      	str	r0, [r7, #0]
 802721a:	6079      	str	r1, [r7, #4]
 802721c:	6921      	ldr	r1, [r4, #16]
 802721e:	3108      	adds	r1, #8
 8027220:	6121      	str	r1, [r4, #16]
 8027222:	68a1      	ldr	r1, [r4, #8]
 8027224:	3101      	adds	r1, #1
 8027226:	60a1      	str	r1, [r4, #8]
 8027228:	e7bb      	b.n	80271a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 802722a:	f104 0c14 	add.w	ip, r4, #20
 802722e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027232:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8027236:	f8c9 0000 	str.w	r0, [r9]
 802723a:	f8c9 1004 	str.w	r1, [r9, #4]
 802723e:	6921      	ldr	r1, [r4, #16]
 8027240:	3108      	adds	r1, #8
 8027242:	6121      	str	r1, [r4, #16]
 8027244:	68a1      	ldr	r1, [r4, #8]
 8027246:	3101      	adds	r1, #1
 8027248:	60a1      	str	r1, [r4, #8]
 802724a:	e7da      	b.n	8027202 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802724c:	9a03      	ldr	r2, [sp, #12]
 802724e:	8b61      	ldrh	r1, [r4, #26]
 8027250:	f1a2 0c20 	sub.w	ip, r2, #32
 8027254:	8b22      	ldrh	r2, [r4, #24]
 8027256:	44d4      	add	ip, sl
 8027258:	4462      	add	r2, ip
 802725a:	fb0c 1303 	mla	r3, ip, r3, r1
 802725e:	8322      	strh	r2, [r4, #24]
 8027260:	e739      	b.n	80270d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8027262:	9b01      	ldr	r3, [sp, #4]
 8027264:	2b00      	cmp	r3, #0
 8027266:	db3f      	blt.n	80272e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8027268:	2201      	movs	r2, #1
 802726a:	f1ce 0320 	rsb	r3, lr, #32
 802726e:	920b      	str	r2, [sp, #44]	; 0x2c
 8027270:	2220      	movs	r2, #32
 8027272:	fb0a f303 	mul.w	r3, sl, r3
 8027276:	9202      	str	r2, [sp, #8]
 8027278:	9a01      	ldr	r2, [sp, #4]
 802727a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802727e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027282:	fb93 f7f2 	sdiv	r7, r3, r2
 8027286:	fb02 3317 	mls	r3, r2, r7, r3
 802728a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802728e:	2b00      	cmp	r3, #0
 8027290:	9308      	str	r3, [sp, #32]
 8027292:	bfbc      	itt	lt
 8027294:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8027298:	189b      	addlt	r3, r3, r2
 802729a:	eb07 0b01 	add.w	fp, r7, r1
 802729e:	bfb8      	it	lt
 80272a0:	9308      	strlt	r3, [sp, #32]
 80272a2:	ea4f 136b 	mov.w	r3, fp, asr #5
 80272a6:	9304      	str	r3, [sp, #16]
 80272a8:	9b02      	ldr	r3, [sp, #8]
 80272aa:	4573      	cmp	r3, lr
 80272ac:	d133      	bne.n	8027316 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 80272ae:	9b04      	ldr	r3, [sp, #16]
 80272b0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80272b4:	454b      	cmp	r3, r9
 80272b6:	d045      	beq.n	8027344 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80272b8:	8b62      	ldrh	r2, [r4, #26]
 80272ba:	8b23      	ldrh	r3, [r4, #24]
 80272bc:	4313      	orrs	r3, r2
 80272be:	d00c      	beq.n	80272da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80272c0:	f1b8 0f00 	cmp.w	r8, #0
 80272c4:	db09      	blt.n	80272da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80272c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80272c8:	4543      	cmp	r3, r8
 80272ca:	dd06      	ble.n	80272da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 80272cc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80272d0:	429a      	cmp	r2, r3
 80272d2:	d313      	bcc.n	80272fc <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 80272d4:	2301      	movs	r3, #1
 80272d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80272da:	9b04      	ldr	r3, [sp, #16]
 80272dc:	82e6      	strh	r6, [r4, #22]
 80272de:	82a3      	strh	r3, [r4, #20]
 80272e0:	2300      	movs	r3, #0
 80272e2:	8323      	strh	r3, [r4, #24]
 80272e4:	8363      	strh	r3, [r4, #26]
 80272e6:	e02d      	b.n	8027344 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 80272e8:	9a01      	ldr	r2, [sp, #4]
 80272ea:	fb0a f30e 	mul.w	r3, sl, lr
 80272ee:	4252      	negs	r2, r2
 80272f0:	9201      	str	r2, [sp, #4]
 80272f2:	f04f 32ff 	mov.w	r2, #4294967295
 80272f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80272f8:	2200      	movs	r2, #0
 80272fa:	e7bc      	b.n	8027276 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 80272fc:	f104 0314 	add.w	r3, r4, #20
 8027300:	6922      	ldr	r2, [r4, #16]
 8027302:	cb03      	ldmia	r3!, {r0, r1}
 8027304:	6010      	str	r0, [r2, #0]
 8027306:	6051      	str	r1, [r2, #4]
 8027308:	6923      	ldr	r3, [r4, #16]
 802730a:	3308      	adds	r3, #8
 802730c:	6123      	str	r3, [r4, #16]
 802730e:	68a3      	ldr	r3, [r4, #8]
 8027310:	3301      	adds	r3, #1
 8027312:	60a3      	str	r3, [r4, #8]
 8027314:	e7e1      	b.n	80272da <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8027316:	f00b 031f 	and.w	r3, fp, #31
 802731a:	f001 011f 	and.w	r1, r1, #31
 802731e:	8b20      	ldrh	r0, [r4, #24]
 8027320:	9309      	str	r3, [sp, #36]	; 0x24
 8027322:	9b02      	ldr	r3, [sp, #8]
 8027324:	eba3 020e 	sub.w	r2, r3, lr
 8027328:	8b63      	ldrh	r3, [r4, #26]
 802732a:	9300      	str	r3, [sp, #0]
 802732c:	9b04      	ldr	r3, [sp, #16]
 802732e:	42ab      	cmp	r3, r5
 8027330:	f040 80ef 	bne.w	8027512 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8027334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027336:	4410      	add	r0, r2
 8027338:	4419      	add	r1, r3
 802733a:	9b00      	ldr	r3, [sp, #0]
 802733c:	8320      	strh	r0, [r4, #24]
 802733e:	fb02 3101 	mla	r1, r2, r1, r3
 8027342:	8361      	strh	r1, [r4, #26]
 8027344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027346:	9904      	ldr	r1, [sp, #16]
 8027348:	4433      	add	r3, r6
 802734a:	9300      	str	r3, [sp, #0]
 802734c:	9a00      	ldr	r2, [sp, #0]
 802734e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027352:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8027356:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802735a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802735e:	4288      	cmp	r0, r1
 8027360:	d018      	beq.n	8027394 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8027362:	8b60      	ldrh	r0, [r4, #26]
 8027364:	8b21      	ldrh	r1, [r4, #24]
 8027366:	ea50 0201 	orrs.w	r2, r0, r1
 802736a:	d00c      	beq.n	8027386 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802736c:	2b00      	cmp	r3, #0
 802736e:	db0a      	blt.n	8027386 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027370:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027372:	4299      	cmp	r1, r3
 8027374:	dd07      	ble.n	8027386 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8027376:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802737a:	4299      	cmp	r1, r3
 802737c:	f0c0 818b 	bcc.w	8027696 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8027380:	2301      	movs	r3, #1
 8027382:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027386:	9b04      	ldr	r3, [sp, #16]
 8027388:	82a3      	strh	r3, [r4, #20]
 802738a:	9b00      	ldr	r3, [sp, #0]
 802738c:	82e3      	strh	r3, [r4, #22]
 802738e:	2300      	movs	r3, #0
 8027390:	8323      	strh	r3, [r4, #24]
 8027392:	8363      	strh	r3, [r4, #26]
 8027394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027396:	9a00      	ldr	r2, [sp, #0]
 8027398:	4293      	cmp	r3, r2
 802739a:	f000 808d 	beq.w	80274b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802739e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80273a2:	9901      	ldr	r1, [sp, #4]
 80273a4:	9801      	ldr	r0, [sp, #4]
 80273a6:	fb93 f1f1 	sdiv	r1, r3, r1
 80273aa:	fb00 3311 	mls	r3, r0, r1, r3
 80273ae:	9106      	str	r1, [sp, #24]
 80273b0:	2b00      	cmp	r3, #0
 80273b2:	9307      	str	r3, [sp, #28]
 80273b4:	da04      	bge.n	80273c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80273b6:	1e4b      	subs	r3, r1, #1
 80273b8:	9306      	str	r3, [sp, #24]
 80273ba:	9b07      	ldr	r3, [sp, #28]
 80273bc:	4403      	add	r3, r0
 80273be:	9307      	str	r3, [sp, #28]
 80273c0:	9b08      	ldr	r3, [sp, #32]
 80273c2:	f04f 0c00 	mov.w	ip, #0
 80273c6:	9901      	ldr	r1, [sp, #4]
 80273c8:	1a5b      	subs	r3, r3, r1
 80273ca:	4659      	mov	r1, fp
 80273cc:	9308      	str	r3, [sp, #32]
 80273ce:	9b02      	ldr	r3, [sp, #8]
 80273d0:	f1c3 0320 	rsb	r3, r3, #32
 80273d4:	930a      	str	r3, [sp, #40]	; 0x28
 80273d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80273d8:	9b02      	ldr	r3, [sp, #8]
 80273da:	1a1b      	subs	r3, r3, r0
 80273dc:	9309      	str	r3, [sp, #36]	; 0x24
 80273de:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 80273e2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 80273e6:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 80273ea:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 80273ee:	181b      	adds	r3, r3, r0
 80273f0:	bf58      	it	pl
 80273f2:	9801      	ldrpl	r0, [sp, #4]
 80273f4:	9308      	str	r3, [sp, #32]
 80273f6:	bf54      	ite	pl
 80273f8:	1a1b      	subpl	r3, r3, r0
 80273fa:	9d06      	ldrmi	r5, [sp, #24]
 80273fc:	9802      	ldr	r0, [sp, #8]
 80273fe:	bf5e      	ittt	pl
 8027400:	9308      	strpl	r3, [sp, #32]
 8027402:	9b06      	ldrpl	r3, [sp, #24]
 8027404:	1c5d      	addpl	r5, r3, #1
 8027406:	44ab      	add	fp, r5
 8027408:	ea4f 136b 	mov.w	r3, fp, asr #5
 802740c:	9304      	str	r3, [sp, #16]
 802740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027410:	4283      	cmp	r3, r0
 8027412:	f040 815a 	bne.w	80276ca <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8027416:	9b04      	ldr	r3, [sp, #16]
 8027418:	9a00      	ldr	r2, [sp, #0]
 802741a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802741e:	4543      	cmp	r3, r8
 8027420:	d01a      	beq.n	8027458 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027422:	8b61      	ldrh	r1, [r4, #26]
 8027424:	8b23      	ldrh	r3, [r4, #24]
 8027426:	430b      	orrs	r3, r1
 8027428:	d00e      	beq.n	8027448 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802742a:	f1be 0f00 	cmp.w	lr, #0
 802742e:	db0b      	blt.n	8027448 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027432:	4573      	cmp	r3, lr
 8027434:	dd08      	ble.n	8027448 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8027436:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802743a:	4299      	cmp	r1, r3
 802743c:	f0c0 8138 	bcc.w	80276b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8027440:	f04f 0301 	mov.w	r3, #1
 8027444:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027448:	9b04      	ldr	r3, [sp, #16]
 802744a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802744e:	82a3      	strh	r3, [r4, #20]
 8027450:	9b00      	ldr	r3, [sp, #0]
 8027452:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027456:	82e3      	strh	r3, [r4, #22]
 8027458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802745a:	9a00      	ldr	r2, [sp, #0]
 802745c:	441a      	add	r2, r3
 802745e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027462:	9200      	str	r2, [sp, #0]
 8027464:	9900      	ldr	r1, [sp, #0]
 8027466:	9a04      	ldr	r2, [sp, #16]
 8027468:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802746c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8027470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027474:	4288      	cmp	r0, r1
 8027476:	d01a      	beq.n	80274ae <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8027478:	8b60      	ldrh	r0, [r4, #26]
 802747a:	8b21      	ldrh	r1, [r4, #24]
 802747c:	ea50 0201 	orrs.w	r2, r0, r1
 8027480:	d00d      	beq.n	802749e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027482:	2b00      	cmp	r3, #0
 8027484:	db0b      	blt.n	802749e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8027486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027488:	4299      	cmp	r1, r3
 802748a:	dd08      	ble.n	802749e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802748c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027490:	4299      	cmp	r1, r3
 8027492:	f0c0 81f9 	bcc.w	8027888 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8027496:	f04f 0301 	mov.w	r3, #1
 802749a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802749e:	9b04      	ldr	r3, [sp, #16]
 80274a0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80274a4:	82a3      	strh	r3, [r4, #20]
 80274a6:	9b00      	ldr	r3, [sp, #0]
 80274a8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80274ac:	82e3      	strh	r3, [r4, #22]
 80274ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274b0:	4659      	mov	r1, fp
 80274b2:	9a00      	ldr	r2, [sp, #0]
 80274b4:	4293      	cmp	r3, r2
 80274b6:	d192      	bne.n	80273de <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80274b8:	9b02      	ldr	r3, [sp, #8]
 80274ba:	f1c3 0c20 	rsb	ip, r3, #32
 80274be:	9b05      	ldr	r3, [sp, #20]
 80274c0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80274c4:	9b03      	ldr	r3, [sp, #12]
 80274c6:	459c      	cmp	ip, r3
 80274c8:	f040 81f8 	bne.w	80278bc <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80274cc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80274d0:	9a00      	ldr	r2, [sp, #0]
 80274d2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80274d6:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80274da:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80274de:	4288      	cmp	r0, r1
 80274e0:	f43f ad54 	beq.w	8026f8c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80274e4:	8b60      	ldrh	r0, [r4, #26]
 80274e6:	8b21      	ldrh	r1, [r4, #24]
 80274e8:	ea50 0201 	orrs.w	r2, r0, r1
 80274ec:	d00c      	beq.n	8027508 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80274ee:	2b00      	cmp	r3, #0
 80274f0:	db0a      	blt.n	8027508 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80274f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80274f4:	4299      	cmp	r1, r3
 80274f6:	dd07      	ble.n	8027508 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80274f8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80274fc:	4299      	cmp	r1, r3
 80274fe:	f0c0 81d0 	bcc.w	80278a2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8027502:	2301      	movs	r3, #1
 8027504:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027508:	9b00      	ldr	r3, [sp, #0]
 802750a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802750e:	82e3      	strh	r3, [r4, #22]
 8027510:	e517      	b.n	8026f42 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8027512:	2f00      	cmp	r7, #0
 8027514:	f2c0 8097 	blt.w	8027646 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8027518:	2301      	movs	r3, #1
 802751a:	f1c1 0c20 	rsb	ip, r1, #32
 802751e:	9307      	str	r3, [sp, #28]
 8027520:	2320      	movs	r3, #32
 8027522:	fb02 f20c 	mul.w	r2, r2, ip
 8027526:	9306      	str	r3, [sp, #24]
 8027528:	9b06      	ldr	r3, [sp, #24]
 802752a:	fb92 fcf7 	sdiv	ip, r2, r7
 802752e:	fb07 221c 	mls	r2, r7, ip, r2
 8027532:	4419      	add	r1, r3
 8027534:	9b00      	ldr	r3, [sp, #0]
 8027536:	2a00      	cmp	r2, #0
 8027538:	bfbc      	itt	lt
 802753a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802753e:	19d2      	addlt	r2, r2, r7
 8027540:	fb0c 3101 	mla	r1, ip, r1, r3
 8027544:	9b07      	ldr	r3, [sp, #28]
 8027546:	4460      	add	r0, ip
 8027548:	441d      	add	r5, r3
 802754a:	0433      	lsls	r3, r6, #16
 802754c:	b200      	sxth	r0, r0
 802754e:	930a      	str	r3, [sp, #40]	; 0x28
 8027550:	18eb      	adds	r3, r5, r3
 8027552:	b209      	sxth	r1, r1
 8027554:	8320      	strh	r0, [r4, #24]
 8027556:	454b      	cmp	r3, r9
 8027558:	8361      	strh	r1, [r4, #26]
 802755a:	d014      	beq.n	8027586 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802755c:	ea50 0301 	orrs.w	r3, r0, r1
 8027560:	d00c      	beq.n	802757c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027562:	f1b8 0f00 	cmp.w	r8, #0
 8027566:	db09      	blt.n	802757c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802756a:	4543      	cmp	r3, r8
 802756c:	dd06      	ble.n	802757c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802756e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8027572:	4299      	cmp	r1, r3
 8027574:	d36e      	bcc.n	8027654 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8027576:	2301      	movs	r3, #1
 8027578:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802757c:	2300      	movs	r3, #0
 802757e:	82a5      	strh	r5, [r4, #20]
 8027580:	82e6      	strh	r6, [r4, #22]
 8027582:	8323      	strh	r3, [r4, #24]
 8027584:	8363      	strh	r3, [r4, #26]
 8027586:	9904      	ldr	r1, [sp, #16]
 8027588:	eb0e 030c 	add.w	r3, lr, ip
 802758c:	42a9      	cmp	r1, r5
 802758e:	d04d      	beq.n	802762c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8027590:	9902      	ldr	r1, [sp, #8]
 8027592:	1bd2      	subs	r2, r2, r7
 8027594:	1ac9      	subs	r1, r1, r3
 8027596:	9200      	str	r2, [sp, #0]
 8027598:	448c      	add	ip, r1
 802759a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802759e:	fb9c fef7 	sdiv	lr, ip, r7
 80275a2:	fb07 cc1e 	mls	ip, r7, lr, ip
 80275a6:	f1bc 0f00 	cmp.w	ip, #0
 80275aa:	bfbc      	itt	lt
 80275ac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80275b0:	44bc      	addlt	ip, r7
 80275b2:	f10e 0101 	add.w	r1, lr, #1
 80275b6:	910d      	str	r1, [sp, #52]	; 0x34
 80275b8:	9a00      	ldr	r2, [sp, #0]
 80275ba:	8b20      	ldrh	r0, [r4, #24]
 80275bc:	eb12 020c 	adds.w	r2, r2, ip
 80275c0:	8b61      	ldrh	r1, [r4, #26]
 80275c2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80275c6:	9200      	str	r2, [sp, #0]
 80275c8:	bf5b      	ittet	pl
 80275ca:	1bd2      	subpl	r2, r2, r7
 80275cc:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80275d0:	46f0      	movmi	r8, lr
 80275d2:	9200      	strpl	r2, [sp, #0]
 80275d4:	9a07      	ldr	r2, [sp, #28]
 80275d6:	4440      	add	r0, r8
 80275d8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80275dc:	4443      	add	r3, r8
 80275de:	4415      	add	r5, r2
 80275e0:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80275e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80275e6:	b200      	sxth	r0, r0
 80275e8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80275ec:	442a      	add	r2, r5
 80275ee:	b209      	sxth	r1, r1
 80275f0:	8320      	strh	r0, [r4, #24]
 80275f2:	454a      	cmp	r2, r9
 80275f4:	8361      	strh	r1, [r4, #26]
 80275f6:	d016      	beq.n	8027626 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 80275f8:	ea50 0201 	orrs.w	r2, r0, r1
 80275fc:	d00d      	beq.n	802761a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80275fe:	f1b8 0f00 	cmp.w	r8, #0
 8027602:	db0a      	blt.n	802761a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027604:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027606:	4541      	cmp	r1, r8
 8027608:	dd07      	ble.n	802761a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802760a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802760e:	4288      	cmp	r0, r1
 8027610:	d330      	bcc.n	8027674 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8027612:	f04f 0201 	mov.w	r2, #1
 8027616:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802761a:	f04f 0200 	mov.w	r2, #0
 802761e:	82a5      	strh	r5, [r4, #20]
 8027620:	82e6      	strh	r6, [r4, #22]
 8027622:	8322      	strh	r2, [r4, #24]
 8027624:	8362      	strh	r2, [r4, #26]
 8027626:	9904      	ldr	r1, [sp, #16]
 8027628:	42a9      	cmp	r1, r5
 802762a:	d1c5      	bne.n	80275b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802762c:	9a02      	ldr	r2, [sp, #8]
 802762e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027630:	1ad3      	subs	r3, r2, r3
 8027632:	8b22      	ldrh	r2, [r4, #24]
 8027634:	3120      	adds	r1, #32
 8027636:	441a      	add	r2, r3
 8027638:	8322      	strh	r2, [r4, #24]
 802763a:	9a06      	ldr	r2, [sp, #24]
 802763c:	1a89      	subs	r1, r1, r2
 802763e:	8b62      	ldrh	r2, [r4, #26]
 8027640:	fb03 2301 	mla	r3, r3, r1, r2
 8027644:	e64e      	b.n	80272e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8027646:	f04f 33ff 	mov.w	r3, #4294967295
 802764a:	434a      	muls	r2, r1
 802764c:	427f      	negs	r7, r7
 802764e:	9307      	str	r3, [sp, #28]
 8027650:	2300      	movs	r3, #0
 8027652:	e768      	b.n	8027526 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8027654:	f104 0314 	add.w	r3, r4, #20
 8027658:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802765c:	cb03      	ldmia	r3!, {r0, r1}
 802765e:	f8c8 0000 	str.w	r0, [r8]
 8027662:	f8c8 1004 	str.w	r1, [r8, #4]
 8027666:	6923      	ldr	r3, [r4, #16]
 8027668:	3308      	adds	r3, #8
 802766a:	6123      	str	r3, [r4, #16]
 802766c:	68a3      	ldr	r3, [r4, #8]
 802766e:	3301      	adds	r3, #1
 8027670:	60a3      	str	r3, [r4, #8]
 8027672:	e783      	b.n	802757c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8027674:	f104 0814 	add.w	r8, r4, #20
 8027678:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802767c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027680:	f8c9 0000 	str.w	r0, [r9]
 8027684:	f8c9 1004 	str.w	r1, [r9, #4]
 8027688:	6921      	ldr	r1, [r4, #16]
 802768a:	3108      	adds	r1, #8
 802768c:	6121      	str	r1, [r4, #16]
 802768e:	68a1      	ldr	r1, [r4, #8]
 8027690:	3101      	adds	r1, #1
 8027692:	60a1      	str	r1, [r4, #8]
 8027694:	e7c1      	b.n	802761a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8027696:	f104 0314 	add.w	r3, r4, #20
 802769a:	6925      	ldr	r5, [r4, #16]
 802769c:	cb03      	ldmia	r3!, {r0, r1}
 802769e:	6028      	str	r0, [r5, #0]
 80276a0:	6069      	str	r1, [r5, #4]
 80276a2:	6923      	ldr	r3, [r4, #16]
 80276a4:	3308      	adds	r3, #8
 80276a6:	6123      	str	r3, [r4, #16]
 80276a8:	68a3      	ldr	r3, [r4, #8]
 80276aa:	3301      	adds	r3, #1
 80276ac:	60a3      	str	r3, [r4, #8]
 80276ae:	e66a      	b.n	8027386 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80276b0:	f104 0314 	add.w	r3, r4, #20
 80276b4:	6925      	ldr	r5, [r4, #16]
 80276b6:	cb03      	ldmia	r3!, {r0, r1}
 80276b8:	6028      	str	r0, [r5, #0]
 80276ba:	6069      	str	r1, [r5, #4]
 80276bc:	6923      	ldr	r3, [r4, #16]
 80276be:	3308      	adds	r3, #8
 80276c0:	6123      	str	r3, [r4, #16]
 80276c2:	68a3      	ldr	r3, [r4, #8]
 80276c4:	3301      	adds	r3, #1
 80276c6:	60a3      	str	r3, [r4, #8]
 80276c8:	e6be      	b.n	8027448 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80276ca:	f00b 031f 	and.w	r3, fp, #31
 80276ce:	114f      	asrs	r7, r1, #5
 80276d0:	8b20      	ldrh	r0, [r4, #24]
 80276d2:	f001 011f 	and.w	r1, r1, #31
 80276d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80276d8:	9b04      	ldr	r3, [sp, #16]
 80276da:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80276de:	429f      	cmp	r7, r3
 80276e0:	d10a      	bne.n	80276f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 80276e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276e4:	4418      	add	r0, r3
 80276e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80276e8:	4419      	add	r1, r3
 80276ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276ec:	8320      	strh	r0, [r4, #24]
 80276ee:	fb03 9901 	mla	r9, r3, r1, r9
 80276f2:	f8a4 901a 	strh.w	r9, [r4, #26]
 80276f6:	e6af      	b.n	8027458 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80276f8:	2d00      	cmp	r5, #0
 80276fa:	f2c0 809b 	blt.w	8027834 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 80276fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8027700:	f1c1 0320 	rsb	r3, r1, #32
 8027704:	4373      	muls	r3, r6
 8027706:	2601      	movs	r6, #1
 8027708:	960e      	str	r6, [sp, #56]	; 0x38
 802770a:	2620      	movs	r6, #32
 802770c:	960d      	str	r6, [sp, #52]	; 0x34
 802770e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027710:	fb93 f6f5 	sdiv	r6, r3, r5
 8027714:	4411      	add	r1, r2
 8027716:	fb05 3316 	mls	r3, r5, r6, r3
 802771a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802771c:	2b00      	cmp	r3, #0
 802771e:	4417      	add	r7, r2
 8027720:	9a00      	ldr	r2, [sp, #0]
 8027722:	bfbc      	itt	lt
 8027724:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027728:	195b      	addlt	r3, r3, r5
 802772a:	0412      	lsls	r2, r2, #16
 802772c:	fb06 9101 	mla	r1, r6, r1, r9
 8027730:	4430      	add	r0, r6
 8027732:	eb07 0902 	add.w	r9, r7, r2
 8027736:	9210      	str	r2, [sp, #64]	; 0x40
 8027738:	b200      	sxth	r0, r0
 802773a:	b209      	sxth	r1, r1
 802773c:	45c1      	cmp	r9, r8
 802773e:	8320      	strh	r0, [r4, #24]
 8027740:	8361      	strh	r1, [r4, #26]
 8027742:	d017      	beq.n	8027774 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8027744:	ea50 0201 	orrs.w	r2, r0, r1
 8027748:	d00d      	beq.n	8027766 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802774a:	f1be 0f00 	cmp.w	lr, #0
 802774e:	db0a      	blt.n	8027766 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027750:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027752:	4571      	cmp	r1, lr
 8027754:	dd07      	ble.n	8027766 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027756:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802775a:	4288      	cmp	r0, r1
 802775c:	d372      	bcc.n	8027844 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802775e:	f04f 0201 	mov.w	r2, #1
 8027762:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027766:	9a00      	ldr	r2, [sp, #0]
 8027768:	82a7      	strh	r7, [r4, #20]
 802776a:	82e2      	strh	r2, [r4, #22]
 802776c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8027770:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027776:	eb02 0e06 	add.w	lr, r2, r6
 802777a:	9a04      	ldr	r2, [sp, #16]
 802777c:	42ba      	cmp	r2, r7
 802777e:	d049      	beq.n	8027814 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8027780:	9a02      	ldr	r2, [sp, #8]
 8027782:	1b5b      	subs	r3, r3, r5
 8027784:	eba2 010e 	sub.w	r1, r2, lr
 8027788:	440e      	add	r6, r1
 802778a:	0176      	lsls	r6, r6, #5
 802778c:	fb96 f8f5 	sdiv	r8, r6, r5
 8027790:	fb05 6618 	mls	r6, r5, r8, r6
 8027794:	2e00      	cmp	r6, #0
 8027796:	bfbc      	itt	lt
 8027798:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802779c:	1976      	addlt	r6, r6, r5
 802779e:	f108 0201 	add.w	r2, r8, #1
 80277a2:	9211      	str	r2, [sp, #68]	; 0x44
 80277a4:	199b      	adds	r3, r3, r6
 80277a6:	8b20      	ldrh	r0, [r4, #24]
 80277a8:	8b61      	ldrh	r1, [r4, #26]
 80277aa:	bf54      	ite	pl
 80277ac:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80277b0:	46c1      	movmi	r9, r8
 80277b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80277b4:	bf58      	it	pl
 80277b6:	1b5b      	subpl	r3, r3, r5
 80277b8:	4448      	add	r0, r9
 80277ba:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80277be:	4417      	add	r7, r2
 80277c0:	44ce      	add	lr, r9
 80277c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80277c4:	b200      	sxth	r0, r0
 80277c6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80277ca:	b209      	sxth	r1, r1
 80277cc:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80277d0:	443a      	add	r2, r7
 80277d2:	8320      	strh	r0, [r4, #24]
 80277d4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80277d8:	8361      	strh	r1, [r4, #26]
 80277da:	4552      	cmp	r2, sl
 80277dc:	d017      	beq.n	802780e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80277de:	ea50 0201 	orrs.w	r2, r0, r1
 80277e2:	d00d      	beq.n	8027800 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80277e4:	f1b9 0f00 	cmp.w	r9, #0
 80277e8:	db0a      	blt.n	8027800 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80277ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80277ec:	4549      	cmp	r1, r9
 80277ee:	dd07      	ble.n	8027800 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80277f0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80277f4:	4288      	cmp	r0, r1
 80277f6:	d336      	bcc.n	8027866 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 80277f8:	f04f 0201 	mov.w	r2, #1
 80277fc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8027800:	9a00      	ldr	r2, [sp, #0]
 8027802:	82a7      	strh	r7, [r4, #20]
 8027804:	82e2      	strh	r2, [r4, #22]
 8027806:	f8a4 c018 	strh.w	ip, [r4, #24]
 802780a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802780e:	9a04      	ldr	r2, [sp, #16]
 8027810:	42ba      	cmp	r2, r7
 8027812:	d1c7      	bne.n	80277a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8027814:	9b02      	ldr	r3, [sp, #8]
 8027816:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027818:	eba3 0e0e 	sub.w	lr, r3, lr
 802781c:	8b23      	ldrh	r3, [r4, #24]
 802781e:	3120      	adds	r1, #32
 8027820:	4473      	add	r3, lr
 8027822:	8323      	strh	r3, [r4, #24]
 8027824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027826:	1ac9      	subs	r1, r1, r3
 8027828:	8b63      	ldrh	r3, [r4, #26]
 802782a:	fb0e 3e01 	mla	lr, lr, r1, r3
 802782e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8027832:	e611      	b.n	8027458 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8027834:	f04f 36ff 	mov.w	r6, #4294967295
 8027838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802783a:	426d      	negs	r5, r5
 802783c:	960e      	str	r6, [sp, #56]	; 0x38
 802783e:	2600      	movs	r6, #0
 8027840:	434b      	muls	r3, r1
 8027842:	e763      	b.n	802770c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8027844:	f104 0e14 	add.w	lr, r4, #20
 8027848:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802784c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8027850:	f8c8 0000 	str.w	r0, [r8]
 8027854:	f8c8 1004 	str.w	r1, [r8, #4]
 8027858:	6921      	ldr	r1, [r4, #16]
 802785a:	3108      	adds	r1, #8
 802785c:	6121      	str	r1, [r4, #16]
 802785e:	68a1      	ldr	r1, [r4, #8]
 8027860:	3101      	adds	r1, #1
 8027862:	60a1      	str	r1, [r4, #8]
 8027864:	e77f      	b.n	8027766 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8027866:	f104 0914 	add.w	r9, r4, #20
 802786a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802786e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027872:	f8ca 0000 	str.w	r0, [sl]
 8027876:	f8ca 1004 	str.w	r1, [sl, #4]
 802787a:	6921      	ldr	r1, [r4, #16]
 802787c:	3108      	adds	r1, #8
 802787e:	6121      	str	r1, [r4, #16]
 8027880:	68a1      	ldr	r1, [r4, #8]
 8027882:	3101      	adds	r1, #1
 8027884:	60a1      	str	r1, [r4, #8]
 8027886:	e7bb      	b.n	8027800 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8027888:	f104 0314 	add.w	r3, r4, #20
 802788c:	6925      	ldr	r5, [r4, #16]
 802788e:	cb03      	ldmia	r3!, {r0, r1}
 8027890:	6028      	str	r0, [r5, #0]
 8027892:	6069      	str	r1, [r5, #4]
 8027894:	6923      	ldr	r3, [r4, #16]
 8027896:	3308      	adds	r3, #8
 8027898:	6123      	str	r3, [r4, #16]
 802789a:	68a3      	ldr	r3, [r4, #8]
 802789c:	3301      	adds	r3, #1
 802789e:	60a3      	str	r3, [r4, #8]
 80278a0:	e5fd      	b.n	802749e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80278a2:	f104 0314 	add.w	r3, r4, #20
 80278a6:	6925      	ldr	r5, [r4, #16]
 80278a8:	cb03      	ldmia	r3!, {r0, r1}
 80278aa:	6028      	str	r0, [r5, #0]
 80278ac:	6069      	str	r1, [r5, #4]
 80278ae:	6923      	ldr	r3, [r4, #16]
 80278b0:	3308      	adds	r3, #8
 80278b2:	6123      	str	r3, [r4, #16]
 80278b4:	68a3      	ldr	r3, [r4, #8]
 80278b6:	3301      	adds	r3, #1
 80278b8:	60a3      	str	r3, [r4, #8]
 80278ba:	e625      	b.n	8027508 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80278bc:	9b05      	ldr	r3, [sp, #20]
 80278be:	ea4f 176b 	mov.w	r7, fp, asr #5
 80278c2:	f00b 081f 	and.w	r8, fp, #31
 80278c6:	8b20      	ldrh	r0, [r4, #24]
 80278c8:	f003 031f 	and.w	r3, r3, #31
 80278cc:	4577      	cmp	r7, lr
 80278ce:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80278d2:	9302      	str	r3, [sp, #8]
 80278d4:	9b03      	ldr	r3, [sp, #12]
 80278d6:	eba3 050c 	sub.w	r5, r3, ip
 80278da:	d108      	bne.n	80278ee <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80278dc:	9b02      	ldr	r3, [sp, #8]
 80278de:	4428      	add	r0, r5
 80278e0:	4498      	add	r8, r3
 80278e2:	8320      	strh	r0, [r4, #24]
 80278e4:	fb05 9508 	mla	r5, r5, r8, r9
 80278e8:	8365      	strh	r5, [r4, #26]
 80278ea:	f7ff bb4f 	b.w	8026f8c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80278ee:	9b05      	ldr	r3, [sp, #20]
 80278f0:	ebb3 030b 	subs.w	r3, r3, fp
 80278f4:	f100 809c 	bmi.w	8027a30 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 80278f8:	f1c8 0120 	rsb	r1, r8, #32
 80278fc:	2201      	movs	r2, #1
 80278fe:	f04f 0b20 	mov.w	fp, #32
 8027902:	434d      	muls	r5, r1
 8027904:	9201      	str	r2, [sp, #4]
 8027906:	9a01      	ldr	r2, [sp, #4]
 8027908:	44d8      	add	r8, fp
 802790a:	fb95 f6f3 	sdiv	r6, r5, r3
 802790e:	fb03 5516 	mls	r5, r3, r6, r5
 8027912:	4417      	add	r7, r2
 8027914:	9a00      	ldr	r2, [sp, #0]
 8027916:	2d00      	cmp	r5, #0
 8027918:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802791c:	bfbc      	itt	lt
 802791e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8027922:	18ed      	addlt	r5, r5, r3
 8027924:	eb07 0a02 	add.w	sl, r7, r2
 8027928:	9204      	str	r2, [sp, #16]
 802792a:	fb06 9808 	mla	r8, r6, r8, r9
 802792e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8027932:	4430      	add	r0, r6
 8027934:	fa0f f188 	sxth.w	r1, r8
 8027938:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802793c:	b200      	sxth	r0, r0
 802793e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8027942:	8361      	strh	r1, [r4, #26]
 8027944:	8320      	strh	r0, [r4, #24]
 8027946:	45ca      	cmp	sl, r9
 8027948:	d015      	beq.n	8027976 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802794a:	ea50 0201 	orrs.w	r2, r0, r1
 802794e:	d00c      	beq.n	802796a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027950:	f1b8 0f00 	cmp.w	r8, #0
 8027954:	db09      	blt.n	802796a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8027958:	4541      	cmp	r1, r8
 802795a:	dd06      	ble.n	802796a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802795c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8027960:	4288      	cmp	r0, r1
 8027962:	d36e      	bcc.n	8027a42 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8027964:	2101      	movs	r1, #1
 8027966:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802796a:	2100      	movs	r1, #0
 802796c:	9a00      	ldr	r2, [sp, #0]
 802796e:	82a7      	strh	r7, [r4, #20]
 8027970:	82e2      	strh	r2, [r4, #22]
 8027972:	8321      	strh	r1, [r4, #24]
 8027974:	8361      	strh	r1, [r4, #26]
 8027976:	45be      	cmp	lr, r7
 8027978:	44b4      	add	ip, r6
 802797a:	d048      	beq.n	8027a0e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802797c:	9a03      	ldr	r2, [sp, #12]
 802797e:	1aed      	subs	r5, r5, r3
 8027980:	eba2 010c 	sub.w	r1, r2, ip
 8027984:	440e      	add	r6, r1
 8027986:	0176      	lsls	r6, r6, #5
 8027988:	fb96 f8f3 	sdiv	r8, r6, r3
 802798c:	fb03 6618 	mls	r6, r3, r8, r6
 8027990:	2e00      	cmp	r6, #0
 8027992:	bfbc      	itt	lt
 8027994:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8027998:	18f6      	addlt	r6, r6, r3
 802799a:	f108 0201 	add.w	r2, r8, #1
 802799e:	9205      	str	r2, [sp, #20]
 80279a0:	19ad      	adds	r5, r5, r6
 80279a2:	8b20      	ldrh	r0, [r4, #24]
 80279a4:	8b61      	ldrh	r1, [r4, #26]
 80279a6:	bf54      	ite	pl
 80279a8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 80279ac:	46c1      	movmi	r9, r8
 80279ae:	9a01      	ldr	r2, [sp, #4]
 80279b0:	bf58      	it	pl
 80279b2:	1aed      	subpl	r5, r5, r3
 80279b4:	4448      	add	r0, r9
 80279b6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80279ba:	4417      	add	r7, r2
 80279bc:	44cc      	add	ip, r9
 80279be:	9a04      	ldr	r2, [sp, #16]
 80279c0:	b200      	sxth	r0, r0
 80279c2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80279c6:	b209      	sxth	r1, r1
 80279c8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80279cc:	443a      	add	r2, r7
 80279ce:	8320      	strh	r0, [r4, #24]
 80279d0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80279d4:	8361      	strh	r1, [r4, #26]
 80279d6:	4552      	cmp	r2, sl
 80279d8:	d017      	beq.n	8027a0a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80279da:	ea50 0201 	orrs.w	r2, r0, r1
 80279de:	d00d      	beq.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80279e0:	f1b9 0f00 	cmp.w	r9, #0
 80279e4:	db0a      	blt.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80279e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80279e8:	4549      	cmp	r1, r9
 80279ea:	dd07      	ble.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 80279ec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80279f0:	4288      	cmp	r0, r1
 80279f2:	d337      	bcc.n	8027a64 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 80279f4:	f04f 0201 	mov.w	r2, #1
 80279f8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80279fc:	9a00      	ldr	r2, [sp, #0]
 80279fe:	82a7      	strh	r7, [r4, #20]
 8027a00:	82e2      	strh	r2, [r4, #22]
 8027a02:	f04f 0200 	mov.w	r2, #0
 8027a06:	8322      	strh	r2, [r4, #24]
 8027a08:	8362      	strh	r2, [r4, #26]
 8027a0a:	45be      	cmp	lr, r7
 8027a0c:	d1c8      	bne.n	80279a0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8027a0e:	9b03      	ldr	r3, [sp, #12]
 8027a10:	8b62      	ldrh	r2, [r4, #26]
 8027a12:	eba3 0c0c 	sub.w	ip, r3, ip
 8027a16:	8b23      	ldrh	r3, [r4, #24]
 8027a18:	4463      	add	r3, ip
 8027a1a:	8323      	strh	r3, [r4, #24]
 8027a1c:	9b02      	ldr	r3, [sp, #8]
 8027a1e:	3320      	adds	r3, #32
 8027a20:	eba3 030b 	sub.w	r3, r3, fp
 8027a24:	fb0c 2c03 	mla	ip, ip, r3, r2
 8027a28:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8027a2c:	f7ff baae 	b.w	8026f8c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8027a30:	f04f 32ff 	mov.w	r2, #4294967295
 8027a34:	fb05 f508 	mul.w	r5, r5, r8
 8027a38:	425b      	negs	r3, r3
 8027a3a:	f04f 0b00 	mov.w	fp, #0
 8027a3e:	9201      	str	r2, [sp, #4]
 8027a40:	e761      	b.n	8027906 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8027a42:	f104 0814 	add.w	r8, r4, #20
 8027a46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027a4a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8027a4e:	f8c9 0000 	str.w	r0, [r9]
 8027a52:	f8c9 1004 	str.w	r1, [r9, #4]
 8027a56:	6921      	ldr	r1, [r4, #16]
 8027a58:	3108      	adds	r1, #8
 8027a5a:	6121      	str	r1, [r4, #16]
 8027a5c:	68a1      	ldr	r1, [r4, #8]
 8027a5e:	3101      	adds	r1, #1
 8027a60:	60a1      	str	r1, [r4, #8]
 8027a62:	e782      	b.n	802796a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8027a64:	f104 0914 	add.w	r9, r4, #20
 8027a68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027a6c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8027a70:	f8ca 0000 	str.w	r0, [sl]
 8027a74:	f8ca 1004 	str.w	r1, [sl, #4]
 8027a78:	6921      	ldr	r1, [r4, #16]
 8027a7a:	3108      	adds	r1, #8
 8027a7c:	6121      	str	r1, [r4, #16]
 8027a7e:	68a1      	ldr	r1, [r4, #8]
 8027a80:	3101      	adds	r1, #1
 8027a82:	60a1      	str	r1, [r4, #8]
 8027a84:	e7ba      	b.n	80279fc <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08027a86 <_ZN8touchgfx7Outline6lineToEii>:
 8027a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027a88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027a8a:	4604      	mov	r4, r0
 8027a8c:	460d      	mov	r5, r1
 8027a8e:	4616      	mov	r6, r2
 8027a90:	079b      	lsls	r3, r3, #30
 8027a92:	d526      	bpl.n	8027ae2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027a94:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8027a98:	ea85 0001 	eor.w	r0, r5, r1
 8027a9c:	ea86 0302 	eor.w	r3, r6, r2
 8027aa0:	4303      	orrs	r3, r0
 8027aa2:	d01e      	beq.n	8027ae2 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8027aa4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027aa6:	114b      	asrs	r3, r1, #5
 8027aa8:	9600      	str	r6, [sp, #0]
 8027aaa:	4283      	cmp	r3, r0
 8027aac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027aae:	bfb8      	it	lt
 8027ab0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027ab2:	3301      	adds	r3, #1
 8027ab4:	4283      	cmp	r3, r0
 8027ab6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027ab8:	bfc8      	it	gt
 8027aba:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027abc:	116b      	asrs	r3, r5, #5
 8027abe:	4283      	cmp	r3, r0
 8027ac0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8027ac2:	bfb8      	it	lt
 8027ac4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8027ac6:	3301      	adds	r3, #1
 8027ac8:	4283      	cmp	r3, r0
 8027aca:	4620      	mov	r0, r4
 8027acc:	bfc8      	it	gt
 8027ace:	6363      	strgt	r3, [r4, #52]	; 0x34
 8027ad0:	462b      	mov	r3, r5
 8027ad2:	f7ff f9e3 	bl	8026e9c <_ZN8touchgfx7Outline10renderLineEiiii>
 8027ad6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027ad8:	f043 0301 	orr.w	r3, r3, #1
 8027adc:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8027ae0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027ae2:	b002      	add	sp, #8
 8027ae4:	bd70      	pop	{r4, r5, r6, pc}

08027ae6 <_ZN8touchgfx7Outline6moveToEii>:
 8027ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ae8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027aea:	4615      	mov	r5, r2
 8027aec:	4604      	mov	r4, r0
 8027aee:	460e      	mov	r6, r1
 8027af0:	079a      	lsls	r2, r3, #30
 8027af2:	d401      	bmi.n	8027af8 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8027af4:	f7ff f98c 	bl	8026e10 <_ZN8touchgfx7Outline5resetEv>
 8027af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027afa:	07db      	lsls	r3, r3, #31
 8027afc:	d504      	bpl.n	8027b08 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8027afe:	4620      	mov	r0, r4
 8027b00:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8027b04:	f7ff ffbf 	bl	8027a86 <_ZN8touchgfx7Outline6lineToEii>
 8027b08:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8027b0c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027b10:	116f      	asrs	r7, r5, #5
 8027b12:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8027b16:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8027b1a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8027b1e:	4291      	cmp	r1, r2
 8027b20:	d015      	beq.n	8027b4e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8027b22:	8b61      	ldrh	r1, [r4, #26]
 8027b24:	8b22      	ldrh	r2, [r4, #24]
 8027b26:	430a      	orrs	r2, r1
 8027b28:	d00b      	beq.n	8027b42 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027b2a:	2b00      	cmp	r3, #0
 8027b2c:	db09      	blt.n	8027b42 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027b30:	429a      	cmp	r2, r3
 8027b32:	dd06      	ble.n	8027b42 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8027b34:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8027b38:	429a      	cmp	r2, r3
 8027b3a:	d30d      	bcc.n	8027b58 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8027b3c:	2301      	movs	r3, #1
 8027b3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027b42:	2300      	movs	r3, #0
 8027b44:	f8a4 c014 	strh.w	ip, [r4, #20]
 8027b48:	82e7      	strh	r7, [r4, #22]
 8027b4a:	8323      	strh	r3, [r4, #24]
 8027b4c:	8363      	strh	r3, [r4, #26]
 8027b4e:	61e6      	str	r6, [r4, #28]
 8027b50:	62a5      	str	r5, [r4, #40]	; 0x28
 8027b52:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8027b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027b58:	f104 0314 	add.w	r3, r4, #20
 8027b5c:	6922      	ldr	r2, [r4, #16]
 8027b5e:	cb03      	ldmia	r3!, {r0, r1}
 8027b60:	6010      	str	r0, [r2, #0]
 8027b62:	6051      	str	r1, [r2, #4]
 8027b64:	6923      	ldr	r3, [r4, #16]
 8027b66:	3308      	adds	r3, #8
 8027b68:	6123      	str	r3, [r4, #16]
 8027b6a:	68a3      	ldr	r3, [r4, #8]
 8027b6c:	3301      	adds	r3, #1
 8027b6e:	60a3      	str	r3, [r4, #8]
 8027b70:	e7e7      	b.n	8027b42 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08027b72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8027b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b76:	b0d1      	sub	sp, #324	; 0x144
 8027b78:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8027b7c:	466c      	mov	r4, sp
 8027b7e:	1a0d      	subs	r5, r1, r0
 8027b80:	f100 0208 	add.w	r2, r0, #8
 8027b84:	2d48      	cmp	r5, #72	; 0x48
 8027b86:	f340 80ba 	ble.w	8027cfe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8027b8a:	112d      	asrs	r5, r5, #4
 8027b8c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8027b90:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8027b94:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8027b98:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8027b9c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8027ba0:	681e      	ldr	r6, [r3, #0]
 8027ba2:	6006      	str	r6, [r0, #0]
 8027ba4:	685e      	ldr	r6, [r3, #4]
 8027ba6:	6046      	str	r6, [r0, #4]
 8027ba8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8027bac:	f8a3 c004 	strh.w	ip, [r3, #4]
 8027bb0:	f8a3 e002 	strh.w	lr, [r3, #2]
 8027bb4:	80df      	strh	r7, [r3, #6]
 8027bb6:	f1a1 0308 	sub.w	r3, r1, #8
 8027bba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8027bbe:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8027bc2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027bc6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8027bca:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027bce:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8027bd2:	45ac      	cmp	ip, r5
 8027bd4:	dd0f      	ble.n	8027bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8027bd6:	681d      	ldr	r5, [r3, #0]
 8027bd8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8027bdc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8027be0:	6015      	str	r5, [r2, #0]
 8027be2:	685d      	ldr	r5, [r3, #4]
 8027be4:	6055      	str	r5, [r2, #4]
 8027be6:	f821 7c08 	strh.w	r7, [r1, #-8]
 8027bea:	f821 6c06 	strh.w	r6, [r1, #-6]
 8027bee:	f821 ec04 	strh.w	lr, [r1, #-4]
 8027bf2:	f821 cc02 	strh.w	ip, [r1, #-2]
 8027bf6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8027bfa:	f9b0 7000 	ldrsh.w	r7, [r0]
 8027bfe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8027c02:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8027c06:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8027c0a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027c0e:	4565      	cmp	r5, ip
 8027c10:	dd0d      	ble.n	8027c2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8027c12:	6815      	ldr	r5, [r2, #0]
 8027c14:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8027c18:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8027c1c:	6005      	str	r5, [r0, #0]
 8027c1e:	6855      	ldr	r5, [r2, #4]
 8027c20:	8107      	strh	r7, [r0, #8]
 8027c22:	6045      	str	r5, [r0, #4]
 8027c24:	8146      	strh	r6, [r0, #10]
 8027c26:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8027c2a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8027c2e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8027c32:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8027c36:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8027c3a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8027c3e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8027c42:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8027c46:	45ac      	cmp	ip, r5
 8027c48:	dd0f      	ble.n	8027c6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8027c4a:	681d      	ldr	r5, [r3, #0]
 8027c4c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8027c50:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8027c54:	6005      	str	r5, [r0, #0]
 8027c56:	685d      	ldr	r5, [r3, #4]
 8027c58:	6045      	str	r5, [r0, #4]
 8027c5a:	f821 7c08 	strh.w	r7, [r1, #-8]
 8027c5e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8027c62:	f821 ec04 	strh.w	lr, [r1, #-4]
 8027c66:	f821 cc02 	strh.w	ip, [r1, #-2]
 8027c6a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8027c6e:	f102 0508 	add.w	r5, r2, #8
 8027c72:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8027c76:	f9b0 e000 	ldrsh.w	lr, [r0]
 8027c7a:	462f      	mov	r7, r5
 8027c7c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8027c80:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8027c84:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8027c88:	45b2      	cmp	sl, r6
 8027c8a:	dc18      	bgt.n	8027cbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8027c8c:	3b08      	subs	r3, #8
 8027c8e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8027c92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8027c96:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8027c9a:	45b2      	cmp	sl, r6
 8027c9c:	dbf6      	blt.n	8027c8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8027c9e:	42ab      	cmp	r3, r5
 8027ca0:	681e      	ldr	r6, [r3, #0]
 8027ca2:	d30e      	bcc.n	8027cc2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8027ca4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8027ca8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8027cac:	602e      	str	r6, [r5, #0]
 8027cae:	685e      	ldr	r6, [r3, #4]
 8027cb0:	606e      	str	r6, [r5, #4]
 8027cb2:	f8a3 9000 	strh.w	r9, [r3]
 8027cb6:	f8a3 8002 	strh.w	r8, [r3, #2]
 8027cba:	809f      	strh	r7, [r3, #4]
 8027cbc:	80da      	strh	r2, [r3, #6]
 8027cbe:	462a      	mov	r2, r5
 8027cc0:	e7d3      	b.n	8027c6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8027cc2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8027cc6:	6006      	str	r6, [r0, #0]
 8027cc8:	685e      	ldr	r6, [r3, #4]
 8027cca:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8027cce:	6046      	str	r6, [r0, #4]
 8027cd0:	1a1e      	subs	r6, r3, r0
 8027cd2:	80da      	strh	r2, [r3, #6]
 8027cd4:	1b4a      	subs	r2, r1, r5
 8027cd6:	f8a3 e000 	strh.w	lr, [r3]
 8027cda:	10d2      	asrs	r2, r2, #3
 8027cdc:	f8a3 c002 	strh.w	ip, [r3, #2]
 8027ce0:	f8a3 8004 	strh.w	r8, [r3, #4]
 8027ce4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8027ce8:	bfb5      	itete	lt
 8027cea:	e9c4 0300 	strdlt	r0, r3, [r4]
 8027cee:	4607      	movge	r7, r0
 8027cf0:	460b      	movlt	r3, r1
 8027cf2:	e9c4 5100 	strdge	r5, r1, [r4]
 8027cf6:	4638      	mov	r0, r7
 8027cf8:	3408      	adds	r4, #8
 8027cfa:	4619      	mov	r1, r3
 8027cfc:	e73f      	b.n	8027b7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8027cfe:	4291      	cmp	r1, r2
 8027d00:	d925      	bls.n	8027d4e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8027d02:	f1a2 0310 	sub.w	r3, r2, #16
 8027d06:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8027d0a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8027d0e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8027d12:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8027d16:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8027d1a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8027d1e:	42b5      	cmp	r5, r6
 8027d20:	dd13      	ble.n	8027d4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8027d22:	461d      	mov	r5, r3
 8027d24:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8027d28:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8027d2c:	3b08      	subs	r3, #8
 8027d2e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8027d32:	619e      	str	r6, [r3, #24]
 8027d34:	42a8      	cmp	r0, r5
 8027d36:	686e      	ldr	r6, [r5, #4]
 8027d38:	f8a3 c010 	strh.w	ip, [r3, #16]
 8027d3c:	61de      	str	r6, [r3, #28]
 8027d3e:	825f      	strh	r7, [r3, #18]
 8027d40:	f8a3 8014 	strh.w	r8, [r3, #20]
 8027d44:	f8a3 e016 	strh.w	lr, [r3, #22]
 8027d48:	d1dd      	bne.n	8027d06 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8027d4a:	3208      	adds	r2, #8
 8027d4c:	e7d7      	b.n	8027cfe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8027d4e:	466b      	mov	r3, sp
 8027d50:	429c      	cmp	r4, r3
 8027d52:	d903      	bls.n	8027d5c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8027d54:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8027d58:	3c08      	subs	r4, #8
 8027d5a:	e710      	b.n	8027b7e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8027d5c:	b051      	add	sp, #324	; 0x144
 8027d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027d62 <_ZN8touchgfx7Outline9sortCellsEv>:
 8027d62:	6881      	ldr	r1, [r0, #8]
 8027d64:	b111      	cbz	r1, 8027d6c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8027d66:	68c0      	ldr	r0, [r0, #12]
 8027d68:	f7ff bf03 	b.w	8027b72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8027d6c:	4770      	bx	lr

08027d6e <_ZN8touchgfx7Outline8getCellsEv>:
 8027d6e:	b510      	push	{r4, lr}
 8027d70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8027d72:	4604      	mov	r4, r0
 8027d74:	07da      	lsls	r2, r3, #31
 8027d76:	d507      	bpl.n	8027d88 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8027d78:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8027d7c:	f7ff fe83 	bl	8027a86 <_ZN8touchgfx7Outline6lineToEii>
 8027d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027d82:	f023 0301 	bic.w	r3, r3, #1
 8027d86:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027d88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027d8a:	079b      	lsls	r3, r3, #30
 8027d8c:	d51a      	bpl.n	8027dc4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8027d8e:	8b62      	ldrh	r2, [r4, #26]
 8027d90:	8b23      	ldrh	r3, [r4, #24]
 8027d92:	4313      	orrs	r3, r2
 8027d94:	d00d      	beq.n	8027db2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027d96:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	db09      	blt.n	8027db2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8027da0:	4293      	cmp	r3, r2
 8027da2:	da06      	bge.n	8027db2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8027da4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8027da8:	429a      	cmp	r2, r3
 8027daa:	d80d      	bhi.n	8027dc8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8027dac:	2301      	movs	r3, #1
 8027dae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8027db2:	68a0      	ldr	r0, [r4, #8]
 8027db4:	b138      	cbz	r0, 8027dc6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8027db6:	4620      	mov	r0, r4
 8027db8:	f7ff ffd3 	bl	8027d62 <_ZN8touchgfx7Outline9sortCellsEv>
 8027dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027dbe:	f023 0302 	bic.w	r3, r3, #2
 8027dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8027dc4:	68e0      	ldr	r0, [r4, #12]
 8027dc6:	bd10      	pop	{r4, pc}
 8027dc8:	f104 0314 	add.w	r3, r4, #20
 8027dcc:	6922      	ldr	r2, [r4, #16]
 8027dce:	cb03      	ldmia	r3!, {r0, r1}
 8027dd0:	6010      	str	r0, [r2, #0]
 8027dd2:	6051      	str	r1, [r2, #4]
 8027dd4:	6923      	ldr	r3, [r4, #16]
 8027dd6:	3308      	adds	r3, #8
 8027dd8:	6123      	str	r3, [r4, #16]
 8027dda:	68a3      	ldr	r3, [r4, #8]
 8027ddc:	3301      	adds	r3, #1
 8027dde:	60a3      	str	r3, [r4, #8]
 8027de0:	e7e7      	b.n	8027db2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08027de2 <_ZN8touchgfx8ScanlineD1Ev>:
 8027de2:	4770      	bx	lr

08027de4 <_ZN8touchgfx8ScanlineD0Ev>:
 8027de4:	b510      	push	{r4, lr}
 8027de6:	4604      	mov	r4, r0
 8027de8:	2124      	movs	r1, #36	; 0x24
 8027dea:	f000 f87a 	bl	8027ee2 <_ZdlPvj>
 8027dee:	4620      	mov	r0, r4
 8027df0:	bd10      	pop	{r4, pc}

08027df2 <_ZN8touchgfx8Scanline5resetEv>:
 8027df2:	b510      	push	{r4, lr}
 8027df4:	4604      	mov	r4, r0
 8027df6:	f7f3 f8bf 	bl	801af78 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8027dfa:	61a0      	str	r0, [r4, #24]
 8027dfc:	f7f3 f8c2 	bl	801af84 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8027e00:	61e0      	str	r0, [r4, #28]
 8027e02:	f7f3 f8c5 	bl	801af90 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8027e06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027e0a:	6220      	str	r0, [r4, #32]
 8027e0c:	6160      	str	r0, [r4, #20]
 8027e0e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8027e12:	69e3      	ldr	r3, [r4, #28]
 8027e14:	6123      	str	r3, [r4, #16]
 8027e16:	2300      	movs	r3, #0
 8027e18:	60e3      	str	r3, [r4, #12]
 8027e1a:	bd10      	pop	{r4, pc}

08027e1c <_ZN8touchgfx8ScanlineC1Ev>:
 8027e1c:	4b07      	ldr	r3, [pc, #28]	; (8027e3c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8027e1e:	b510      	push	{r4, lr}
 8027e20:	6003      	str	r3, [r0, #0]
 8027e22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8027e26:	4604      	mov	r4, r0
 8027e28:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8027e2c:	2300      	movs	r3, #0
 8027e2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027e32:	6143      	str	r3, [r0, #20]
 8027e34:	f7ff ffdd 	bl	8027df2 <_ZN8touchgfx8Scanline5resetEv>
 8027e38:	4620      	mov	r0, r4
 8027e3a:	bd10      	pop	{r4, pc}
 8027e3c:	0802d934 	.word	0x0802d934

08027e40 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8027e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027e44:	1e0c      	subs	r4, r1, #0
 8027e46:	4605      	mov	r5, r0
 8027e48:	4617      	mov	r7, r2
 8027e4a:	461e      	mov	r6, r3
 8027e4c:	da03      	bge.n	8027e56 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8027e4e:	4426      	add	r6, r4
 8027e50:	2e01      	cmp	r6, #1
 8027e52:	d421      	bmi.n	8027e98 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8027e54:	2400      	movs	r4, #0
 8027e56:	f7f3 f889 	bl	801af6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027e5a:	42a0      	cmp	r0, r4
 8027e5c:	d91c      	bls.n	8027e98 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8027e5e:	eb04 0806 	add.w	r8, r4, r6
 8027e62:	f7f3 f883 	bl	801af6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027e66:	4580      	cmp	r8, r0
 8027e68:	d902      	bls.n	8027e70 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8027e6a:	f7f3 f87f 	bl	801af6c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8027e6e:	1b06      	subs	r6, r0, r4
 8027e70:	69a8      	ldr	r0, [r5, #24]
 8027e72:	4632      	mov	r2, r6
 8027e74:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8027e78:	4420      	add	r0, r4
 8027e7a:	f7f4 fd76 	bl	801c96a <_ZN8touchgfx6memsetEPvhm>
 8027e7e:	686b      	ldr	r3, [r5, #4]
 8027e80:	b2b2      	uxth	r2, r6
 8027e82:	3301      	adds	r3, #1
 8027e84:	42a3      	cmp	r3, r4
 8027e86:	696b      	ldr	r3, [r5, #20]
 8027e88:	d108      	bne.n	8027e9c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8027e8a:	8819      	ldrh	r1, [r3, #0]
 8027e8c:	440a      	add	r2, r1
 8027e8e:	801a      	strh	r2, [r3, #0]
 8027e90:	3c01      	subs	r4, #1
 8027e92:	4434      	add	r4, r6
 8027e94:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8027e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027e9c:	1c99      	adds	r1, r3, #2
 8027e9e:	6169      	str	r1, [r5, #20]
 8027ea0:	805a      	strh	r2, [r3, #2]
 8027ea2:	692b      	ldr	r3, [r5, #16]
 8027ea4:	1c9a      	adds	r2, r3, #2
 8027ea6:	612a      	str	r2, [r5, #16]
 8027ea8:	805c      	strh	r4, [r3, #2]
 8027eaa:	68eb      	ldr	r3, [r5, #12]
 8027eac:	3301      	adds	r3, #1
 8027eae:	60eb      	str	r3, [r5, #12]
 8027eb0:	e7ee      	b.n	8027e90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08027eb2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8027eb2:	2200      	movs	r2, #0
 8027eb4:	6002      	str	r2, [r0, #0]
 8027eb6:	7102      	strb	r2, [r0, #4]
 8027eb8:	6102      	str	r2, [r0, #16]
 8027eba:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8027ebe:	4770      	bx	lr

08027ec0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8027ec0:	4770      	bx	lr

08027ec2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8027ec2:	6083      	str	r3, [r0, #8]
 8027ec4:	9b00      	ldr	r3, [sp, #0]
 8027ec6:	6001      	str	r1, [r0, #0]
 8027ec8:	60c3      	str	r3, [r0, #12]
 8027eca:	9b01      	ldr	r3, [sp, #4]
 8027ecc:	7102      	strb	r2, [r0, #4]
 8027ece:	6103      	str	r3, [r0, #16]
 8027ed0:	4770      	bx	lr

08027ed2 <__aeabi_atexit>:
 8027ed2:	460b      	mov	r3, r1
 8027ed4:	4601      	mov	r1, r0
 8027ed6:	4618      	mov	r0, r3
 8027ed8:	f000 b852 	b.w	8027f80 <__cxa_atexit>

08027edc <__cxa_pure_virtual>:
 8027edc:	b508      	push	{r3, lr}
 8027ede:	f000 f81f 	bl	8027f20 <_ZSt9terminatev>

08027ee2 <_ZdlPvj>:
 8027ee2:	f000 b80f 	b.w	8027f04 <_ZdlPv>

08027ee6 <__cxa_guard_acquire>:
 8027ee6:	6803      	ldr	r3, [r0, #0]
 8027ee8:	07db      	lsls	r3, r3, #31
 8027eea:	d406      	bmi.n	8027efa <__cxa_guard_acquire+0x14>
 8027eec:	7843      	ldrb	r3, [r0, #1]
 8027eee:	b103      	cbz	r3, 8027ef2 <__cxa_guard_acquire+0xc>
 8027ef0:	deff      	udf	#255	; 0xff
 8027ef2:	2301      	movs	r3, #1
 8027ef4:	7043      	strb	r3, [r0, #1]
 8027ef6:	4618      	mov	r0, r3
 8027ef8:	4770      	bx	lr
 8027efa:	2000      	movs	r0, #0
 8027efc:	4770      	bx	lr

08027efe <__cxa_guard_release>:
 8027efe:	2301      	movs	r3, #1
 8027f00:	6003      	str	r3, [r0, #0]
 8027f02:	4770      	bx	lr

08027f04 <_ZdlPv>:
 8027f04:	f000 b88e 	b.w	8028024 <free>

08027f08 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8027f08:	b508      	push	{r3, lr}
 8027f0a:	4780      	blx	r0
 8027f0c:	f000 f80d 	bl	8027f2a <abort>

08027f10 <_ZSt13get_terminatev>:
 8027f10:	4b02      	ldr	r3, [pc, #8]	; (8027f1c <_ZSt13get_terminatev+0xc>)
 8027f12:	6818      	ldr	r0, [r3, #0]
 8027f14:	f3bf 8f5b 	dmb	ish
 8027f18:	4770      	bx	lr
 8027f1a:	bf00      	nop
 8027f1c:	200000d4 	.word	0x200000d4

08027f20 <_ZSt9terminatev>:
 8027f20:	b508      	push	{r3, lr}
 8027f22:	f7ff fff5 	bl	8027f10 <_ZSt13get_terminatev>
 8027f26:	f7ff ffef 	bl	8027f08 <_ZN10__cxxabiv111__terminateEPFvvE>

08027f2a <abort>:
 8027f2a:	b508      	push	{r3, lr}
 8027f2c:	2006      	movs	r0, #6
 8027f2e:	f000 fc3d 	bl	80287ac <raise>
 8027f32:	2001      	movs	r0, #1
 8027f34:	f7db fa86 	bl	8003444 <_exit>

08027f38 <__assert_func>:
 8027f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027f3a:	461c      	mov	r4, r3
 8027f3c:	4b09      	ldr	r3, [pc, #36]	; (8027f64 <__assert_func+0x2c>)
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	4605      	mov	r5, r0
 8027f42:	68d8      	ldr	r0, [r3, #12]
 8027f44:	b152      	cbz	r2, 8027f5c <__assert_func+0x24>
 8027f46:	4b08      	ldr	r3, [pc, #32]	; (8027f68 <__assert_func+0x30>)
 8027f48:	9100      	str	r1, [sp, #0]
 8027f4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8027f4e:	4907      	ldr	r1, [pc, #28]	; (8027f6c <__assert_func+0x34>)
 8027f50:	462b      	mov	r3, r5
 8027f52:	4622      	mov	r2, r4
 8027f54:	f000 f828 	bl	8027fa8 <fiprintf>
 8027f58:	f7ff ffe7 	bl	8027f2a <abort>
 8027f5c:	4b04      	ldr	r3, [pc, #16]	; (8027f70 <__assert_func+0x38>)
 8027f5e:	461a      	mov	r2, r3
 8027f60:	e7f2      	b.n	8027f48 <__assert_func+0x10>
 8027f62:	bf00      	nop
 8027f64:	200000d8 	.word	0x200000d8
 8027f68:	0802d93c 	.word	0x0802d93c
 8027f6c:	0802d949 	.word	0x0802d949
 8027f70:	0802d977 	.word	0x0802d977

08027f74 <atexit>:
 8027f74:	2300      	movs	r3, #0
 8027f76:	4601      	mov	r1, r0
 8027f78:	461a      	mov	r2, r3
 8027f7a:	4618      	mov	r0, r3
 8027f7c:	f000 bcf2 	b.w	8028964 <__register_exitproc>

08027f80 <__cxa_atexit>:
 8027f80:	b510      	push	{r4, lr}
 8027f82:	4c05      	ldr	r4, [pc, #20]	; (8027f98 <__cxa_atexit+0x18>)
 8027f84:	4613      	mov	r3, r2
 8027f86:	b12c      	cbz	r4, 8027f94 <__cxa_atexit+0x14>
 8027f88:	460a      	mov	r2, r1
 8027f8a:	4601      	mov	r1, r0
 8027f8c:	2002      	movs	r0, #2
 8027f8e:	f000 fce9 	bl	8028964 <__register_exitproc>
 8027f92:	bd10      	pop	{r4, pc}
 8027f94:	4620      	mov	r0, r4
 8027f96:	e7fc      	b.n	8027f92 <__cxa_atexit+0x12>
 8027f98:	08028965 	.word	0x08028965

08027f9c <__errno>:
 8027f9c:	4b01      	ldr	r3, [pc, #4]	; (8027fa4 <__errno+0x8>)
 8027f9e:	6818      	ldr	r0, [r3, #0]
 8027fa0:	4770      	bx	lr
 8027fa2:	bf00      	nop
 8027fa4:	200000d8 	.word	0x200000d8

08027fa8 <fiprintf>:
 8027fa8:	b40e      	push	{r1, r2, r3}
 8027faa:	b503      	push	{r0, r1, lr}
 8027fac:	4601      	mov	r1, r0
 8027fae:	ab03      	add	r3, sp, #12
 8027fb0:	4805      	ldr	r0, [pc, #20]	; (8027fc8 <fiprintf+0x20>)
 8027fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8027fb6:	6800      	ldr	r0, [r0, #0]
 8027fb8:	9301      	str	r3, [sp, #4]
 8027fba:	f000 f921 	bl	8028200 <_vfiprintf_r>
 8027fbe:	b002      	add	sp, #8
 8027fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8027fc4:	b003      	add	sp, #12
 8027fc6:	4770      	bx	lr
 8027fc8:	200000d8 	.word	0x200000d8

08027fcc <__libc_init_array>:
 8027fcc:	b570      	push	{r4, r5, r6, lr}
 8027fce:	4e0d      	ldr	r6, [pc, #52]	; (8028004 <__libc_init_array+0x38>)
 8027fd0:	4c0d      	ldr	r4, [pc, #52]	; (8028008 <__libc_init_array+0x3c>)
 8027fd2:	1ba4      	subs	r4, r4, r6
 8027fd4:	10a4      	asrs	r4, r4, #2
 8027fd6:	2500      	movs	r5, #0
 8027fd8:	42a5      	cmp	r5, r4
 8027fda:	d109      	bne.n	8027ff0 <__libc_init_array+0x24>
 8027fdc:	4e0b      	ldr	r6, [pc, #44]	; (802800c <__libc_init_array+0x40>)
 8027fde:	4c0c      	ldr	r4, [pc, #48]	; (8028010 <__libc_init_array+0x44>)
 8027fe0:	f000 ffb0 	bl	8028f44 <_init>
 8027fe4:	1ba4      	subs	r4, r4, r6
 8027fe6:	10a4      	asrs	r4, r4, #2
 8027fe8:	2500      	movs	r5, #0
 8027fea:	42a5      	cmp	r5, r4
 8027fec:	d105      	bne.n	8027ffa <__libc_init_array+0x2e>
 8027fee:	bd70      	pop	{r4, r5, r6, pc}
 8027ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027ff4:	4798      	blx	r3
 8027ff6:	3501      	adds	r5, #1
 8027ff8:	e7ee      	b.n	8027fd8 <__libc_init_array+0xc>
 8027ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027ffe:	4798      	blx	r3
 8028000:	3501      	adds	r5, #1
 8028002:	e7f2      	b.n	8027fea <__libc_init_array+0x1e>
 8028004:	08065070 	.word	0x08065070
 8028008:	08065070 	.word	0x08065070
 802800c:	08065070 	.word	0x08065070
 8028010:	08065084 	.word	0x08065084

08028014 <malloc>:
 8028014:	4b02      	ldr	r3, [pc, #8]	; (8028020 <malloc+0xc>)
 8028016:	4601      	mov	r1, r0
 8028018:	6818      	ldr	r0, [r3, #0]
 802801a:	f000 b86d 	b.w	80280f8 <_malloc_r>
 802801e:	bf00      	nop
 8028020:	200000d8 	.word	0x200000d8

08028024 <free>:
 8028024:	4b02      	ldr	r3, [pc, #8]	; (8028030 <free+0xc>)
 8028026:	4601      	mov	r1, r0
 8028028:	6818      	ldr	r0, [r3, #0]
 802802a:	f000 b817 	b.w	802805c <_free_r>
 802802e:	bf00      	nop
 8028030:	200000d8 	.word	0x200000d8

08028034 <memcpy>:
 8028034:	b510      	push	{r4, lr}
 8028036:	1e43      	subs	r3, r0, #1
 8028038:	440a      	add	r2, r1
 802803a:	4291      	cmp	r1, r2
 802803c:	d100      	bne.n	8028040 <memcpy+0xc>
 802803e:	bd10      	pop	{r4, pc}
 8028040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028048:	e7f7      	b.n	802803a <memcpy+0x6>

0802804a <memset>:
 802804a:	4402      	add	r2, r0
 802804c:	4603      	mov	r3, r0
 802804e:	4293      	cmp	r3, r2
 8028050:	d100      	bne.n	8028054 <memset+0xa>
 8028052:	4770      	bx	lr
 8028054:	f803 1b01 	strb.w	r1, [r3], #1
 8028058:	e7f9      	b.n	802804e <memset+0x4>
	...

0802805c <_free_r>:
 802805c:	b538      	push	{r3, r4, r5, lr}
 802805e:	4605      	mov	r5, r0
 8028060:	2900      	cmp	r1, #0
 8028062:	d045      	beq.n	80280f0 <_free_r+0x94>
 8028064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028068:	1f0c      	subs	r4, r1, #4
 802806a:	2b00      	cmp	r3, #0
 802806c:	bfb8      	it	lt
 802806e:	18e4      	addlt	r4, r4, r3
 8028070:	f000 feba 	bl	8028de8 <__malloc_lock>
 8028074:	4a1f      	ldr	r2, [pc, #124]	; (80280f4 <_free_r+0x98>)
 8028076:	6813      	ldr	r3, [r2, #0]
 8028078:	4610      	mov	r0, r2
 802807a:	b933      	cbnz	r3, 802808a <_free_r+0x2e>
 802807c:	6063      	str	r3, [r4, #4]
 802807e:	6014      	str	r4, [r2, #0]
 8028080:	4628      	mov	r0, r5
 8028082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028086:	f000 beb0 	b.w	8028dea <__malloc_unlock>
 802808a:	42a3      	cmp	r3, r4
 802808c:	d90c      	bls.n	80280a8 <_free_r+0x4c>
 802808e:	6821      	ldr	r1, [r4, #0]
 8028090:	1862      	adds	r2, r4, r1
 8028092:	4293      	cmp	r3, r2
 8028094:	bf04      	itt	eq
 8028096:	681a      	ldreq	r2, [r3, #0]
 8028098:	685b      	ldreq	r3, [r3, #4]
 802809a:	6063      	str	r3, [r4, #4]
 802809c:	bf04      	itt	eq
 802809e:	1852      	addeq	r2, r2, r1
 80280a0:	6022      	streq	r2, [r4, #0]
 80280a2:	6004      	str	r4, [r0, #0]
 80280a4:	e7ec      	b.n	8028080 <_free_r+0x24>
 80280a6:	4613      	mov	r3, r2
 80280a8:	685a      	ldr	r2, [r3, #4]
 80280aa:	b10a      	cbz	r2, 80280b0 <_free_r+0x54>
 80280ac:	42a2      	cmp	r2, r4
 80280ae:	d9fa      	bls.n	80280a6 <_free_r+0x4a>
 80280b0:	6819      	ldr	r1, [r3, #0]
 80280b2:	1858      	adds	r0, r3, r1
 80280b4:	42a0      	cmp	r0, r4
 80280b6:	d10b      	bne.n	80280d0 <_free_r+0x74>
 80280b8:	6820      	ldr	r0, [r4, #0]
 80280ba:	4401      	add	r1, r0
 80280bc:	1858      	adds	r0, r3, r1
 80280be:	4282      	cmp	r2, r0
 80280c0:	6019      	str	r1, [r3, #0]
 80280c2:	d1dd      	bne.n	8028080 <_free_r+0x24>
 80280c4:	6810      	ldr	r0, [r2, #0]
 80280c6:	6852      	ldr	r2, [r2, #4]
 80280c8:	605a      	str	r2, [r3, #4]
 80280ca:	4401      	add	r1, r0
 80280cc:	6019      	str	r1, [r3, #0]
 80280ce:	e7d7      	b.n	8028080 <_free_r+0x24>
 80280d0:	d902      	bls.n	80280d8 <_free_r+0x7c>
 80280d2:	230c      	movs	r3, #12
 80280d4:	602b      	str	r3, [r5, #0]
 80280d6:	e7d3      	b.n	8028080 <_free_r+0x24>
 80280d8:	6820      	ldr	r0, [r4, #0]
 80280da:	1821      	adds	r1, r4, r0
 80280dc:	428a      	cmp	r2, r1
 80280de:	bf04      	itt	eq
 80280e0:	6811      	ldreq	r1, [r2, #0]
 80280e2:	6852      	ldreq	r2, [r2, #4]
 80280e4:	6062      	str	r2, [r4, #4]
 80280e6:	bf04      	itt	eq
 80280e8:	1809      	addeq	r1, r1, r0
 80280ea:	6021      	streq	r1, [r4, #0]
 80280ec:	605c      	str	r4, [r3, #4]
 80280ee:	e7c7      	b.n	8028080 <_free_r+0x24>
 80280f0:	bd38      	pop	{r3, r4, r5, pc}
 80280f2:	bf00      	nop
 80280f4:	2000c008 	.word	0x2000c008

080280f8 <_malloc_r>:
 80280f8:	b570      	push	{r4, r5, r6, lr}
 80280fa:	1ccd      	adds	r5, r1, #3
 80280fc:	f025 0503 	bic.w	r5, r5, #3
 8028100:	3508      	adds	r5, #8
 8028102:	2d0c      	cmp	r5, #12
 8028104:	bf38      	it	cc
 8028106:	250c      	movcc	r5, #12
 8028108:	2d00      	cmp	r5, #0
 802810a:	4606      	mov	r6, r0
 802810c:	db01      	blt.n	8028112 <_malloc_r+0x1a>
 802810e:	42a9      	cmp	r1, r5
 8028110:	d903      	bls.n	802811a <_malloc_r+0x22>
 8028112:	230c      	movs	r3, #12
 8028114:	6033      	str	r3, [r6, #0]
 8028116:	2000      	movs	r0, #0
 8028118:	bd70      	pop	{r4, r5, r6, pc}
 802811a:	f000 fe65 	bl	8028de8 <__malloc_lock>
 802811e:	4a21      	ldr	r2, [pc, #132]	; (80281a4 <_malloc_r+0xac>)
 8028120:	6814      	ldr	r4, [r2, #0]
 8028122:	4621      	mov	r1, r4
 8028124:	b991      	cbnz	r1, 802814c <_malloc_r+0x54>
 8028126:	4c20      	ldr	r4, [pc, #128]	; (80281a8 <_malloc_r+0xb0>)
 8028128:	6823      	ldr	r3, [r4, #0]
 802812a:	b91b      	cbnz	r3, 8028134 <_malloc_r+0x3c>
 802812c:	4630      	mov	r0, r6
 802812e:	f000 fb05 	bl	802873c <_sbrk_r>
 8028132:	6020      	str	r0, [r4, #0]
 8028134:	4629      	mov	r1, r5
 8028136:	4630      	mov	r0, r6
 8028138:	f000 fb00 	bl	802873c <_sbrk_r>
 802813c:	1c43      	adds	r3, r0, #1
 802813e:	d124      	bne.n	802818a <_malloc_r+0x92>
 8028140:	230c      	movs	r3, #12
 8028142:	6033      	str	r3, [r6, #0]
 8028144:	4630      	mov	r0, r6
 8028146:	f000 fe50 	bl	8028dea <__malloc_unlock>
 802814a:	e7e4      	b.n	8028116 <_malloc_r+0x1e>
 802814c:	680b      	ldr	r3, [r1, #0]
 802814e:	1b5b      	subs	r3, r3, r5
 8028150:	d418      	bmi.n	8028184 <_malloc_r+0x8c>
 8028152:	2b0b      	cmp	r3, #11
 8028154:	d90f      	bls.n	8028176 <_malloc_r+0x7e>
 8028156:	600b      	str	r3, [r1, #0]
 8028158:	50cd      	str	r5, [r1, r3]
 802815a:	18cc      	adds	r4, r1, r3
 802815c:	4630      	mov	r0, r6
 802815e:	f000 fe44 	bl	8028dea <__malloc_unlock>
 8028162:	f104 000b 	add.w	r0, r4, #11
 8028166:	1d23      	adds	r3, r4, #4
 8028168:	f020 0007 	bic.w	r0, r0, #7
 802816c:	1ac3      	subs	r3, r0, r3
 802816e:	d0d3      	beq.n	8028118 <_malloc_r+0x20>
 8028170:	425a      	negs	r2, r3
 8028172:	50e2      	str	r2, [r4, r3]
 8028174:	e7d0      	b.n	8028118 <_malloc_r+0x20>
 8028176:	428c      	cmp	r4, r1
 8028178:	684b      	ldr	r3, [r1, #4]
 802817a:	bf16      	itet	ne
 802817c:	6063      	strne	r3, [r4, #4]
 802817e:	6013      	streq	r3, [r2, #0]
 8028180:	460c      	movne	r4, r1
 8028182:	e7eb      	b.n	802815c <_malloc_r+0x64>
 8028184:	460c      	mov	r4, r1
 8028186:	6849      	ldr	r1, [r1, #4]
 8028188:	e7cc      	b.n	8028124 <_malloc_r+0x2c>
 802818a:	1cc4      	adds	r4, r0, #3
 802818c:	f024 0403 	bic.w	r4, r4, #3
 8028190:	42a0      	cmp	r0, r4
 8028192:	d005      	beq.n	80281a0 <_malloc_r+0xa8>
 8028194:	1a21      	subs	r1, r4, r0
 8028196:	4630      	mov	r0, r6
 8028198:	f000 fad0 	bl	802873c <_sbrk_r>
 802819c:	3001      	adds	r0, #1
 802819e:	d0cf      	beq.n	8028140 <_malloc_r+0x48>
 80281a0:	6025      	str	r5, [r4, #0]
 80281a2:	e7db      	b.n	802815c <_malloc_r+0x64>
 80281a4:	2000c008 	.word	0x2000c008
 80281a8:	2000c00c 	.word	0x2000c00c

080281ac <__sfputc_r>:
 80281ac:	6893      	ldr	r3, [r2, #8]
 80281ae:	3b01      	subs	r3, #1
 80281b0:	2b00      	cmp	r3, #0
 80281b2:	b410      	push	{r4}
 80281b4:	6093      	str	r3, [r2, #8]
 80281b6:	da08      	bge.n	80281ca <__sfputc_r+0x1e>
 80281b8:	6994      	ldr	r4, [r2, #24]
 80281ba:	42a3      	cmp	r3, r4
 80281bc:	db01      	blt.n	80281c2 <__sfputc_r+0x16>
 80281be:	290a      	cmp	r1, #10
 80281c0:	d103      	bne.n	80281ca <__sfputc_r+0x1e>
 80281c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80281c6:	f000 bb0d 	b.w	80287e4 <__swbuf_r>
 80281ca:	6813      	ldr	r3, [r2, #0]
 80281cc:	1c58      	adds	r0, r3, #1
 80281ce:	6010      	str	r0, [r2, #0]
 80281d0:	7019      	strb	r1, [r3, #0]
 80281d2:	4608      	mov	r0, r1
 80281d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80281d8:	4770      	bx	lr

080281da <__sfputs_r>:
 80281da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281dc:	4606      	mov	r6, r0
 80281de:	460f      	mov	r7, r1
 80281e0:	4614      	mov	r4, r2
 80281e2:	18d5      	adds	r5, r2, r3
 80281e4:	42ac      	cmp	r4, r5
 80281e6:	d101      	bne.n	80281ec <__sfputs_r+0x12>
 80281e8:	2000      	movs	r0, #0
 80281ea:	e007      	b.n	80281fc <__sfputs_r+0x22>
 80281ec:	463a      	mov	r2, r7
 80281ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80281f2:	4630      	mov	r0, r6
 80281f4:	f7ff ffda 	bl	80281ac <__sfputc_r>
 80281f8:	1c43      	adds	r3, r0, #1
 80281fa:	d1f3      	bne.n	80281e4 <__sfputs_r+0xa>
 80281fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028200 <_vfiprintf_r>:
 8028200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028204:	460c      	mov	r4, r1
 8028206:	b09d      	sub	sp, #116	; 0x74
 8028208:	4617      	mov	r7, r2
 802820a:	461d      	mov	r5, r3
 802820c:	4606      	mov	r6, r0
 802820e:	b118      	cbz	r0, 8028218 <_vfiprintf_r+0x18>
 8028210:	6983      	ldr	r3, [r0, #24]
 8028212:	b90b      	cbnz	r3, 8028218 <_vfiprintf_r+0x18>
 8028214:	f000 fcfa 	bl	8028c0c <__sinit>
 8028218:	4b7c      	ldr	r3, [pc, #496]	; (802840c <_vfiprintf_r+0x20c>)
 802821a:	429c      	cmp	r4, r3
 802821c:	d158      	bne.n	80282d0 <_vfiprintf_r+0xd0>
 802821e:	6874      	ldr	r4, [r6, #4]
 8028220:	89a3      	ldrh	r3, [r4, #12]
 8028222:	0718      	lsls	r0, r3, #28
 8028224:	d55e      	bpl.n	80282e4 <_vfiprintf_r+0xe4>
 8028226:	6923      	ldr	r3, [r4, #16]
 8028228:	2b00      	cmp	r3, #0
 802822a:	d05b      	beq.n	80282e4 <_vfiprintf_r+0xe4>
 802822c:	2300      	movs	r3, #0
 802822e:	9309      	str	r3, [sp, #36]	; 0x24
 8028230:	2320      	movs	r3, #32
 8028232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028236:	2330      	movs	r3, #48	; 0x30
 8028238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802823c:	9503      	str	r5, [sp, #12]
 802823e:	f04f 0b01 	mov.w	fp, #1
 8028242:	46b8      	mov	r8, r7
 8028244:	4645      	mov	r5, r8
 8028246:	f815 3b01 	ldrb.w	r3, [r5], #1
 802824a:	b10b      	cbz	r3, 8028250 <_vfiprintf_r+0x50>
 802824c:	2b25      	cmp	r3, #37	; 0x25
 802824e:	d154      	bne.n	80282fa <_vfiprintf_r+0xfa>
 8028250:	ebb8 0a07 	subs.w	sl, r8, r7
 8028254:	d00b      	beq.n	802826e <_vfiprintf_r+0x6e>
 8028256:	4653      	mov	r3, sl
 8028258:	463a      	mov	r2, r7
 802825a:	4621      	mov	r1, r4
 802825c:	4630      	mov	r0, r6
 802825e:	f7ff ffbc 	bl	80281da <__sfputs_r>
 8028262:	3001      	adds	r0, #1
 8028264:	f000 80c2 	beq.w	80283ec <_vfiprintf_r+0x1ec>
 8028268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802826a:	4453      	add	r3, sl
 802826c:	9309      	str	r3, [sp, #36]	; 0x24
 802826e:	f898 3000 	ldrb.w	r3, [r8]
 8028272:	2b00      	cmp	r3, #0
 8028274:	f000 80ba 	beq.w	80283ec <_vfiprintf_r+0x1ec>
 8028278:	2300      	movs	r3, #0
 802827a:	f04f 32ff 	mov.w	r2, #4294967295
 802827e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028282:	9304      	str	r3, [sp, #16]
 8028284:	9307      	str	r3, [sp, #28]
 8028286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802828a:	931a      	str	r3, [sp, #104]	; 0x68
 802828c:	46a8      	mov	r8, r5
 802828e:	2205      	movs	r2, #5
 8028290:	f818 1b01 	ldrb.w	r1, [r8], #1
 8028294:	485e      	ldr	r0, [pc, #376]	; (8028410 <_vfiprintf_r+0x210>)
 8028296:	f7d7 ffbb 	bl	8000210 <memchr>
 802829a:	9b04      	ldr	r3, [sp, #16]
 802829c:	bb78      	cbnz	r0, 80282fe <_vfiprintf_r+0xfe>
 802829e:	06d9      	lsls	r1, r3, #27
 80282a0:	bf44      	itt	mi
 80282a2:	2220      	movmi	r2, #32
 80282a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80282a8:	071a      	lsls	r2, r3, #28
 80282aa:	bf44      	itt	mi
 80282ac:	222b      	movmi	r2, #43	; 0x2b
 80282ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80282b2:	782a      	ldrb	r2, [r5, #0]
 80282b4:	2a2a      	cmp	r2, #42	; 0x2a
 80282b6:	d02a      	beq.n	802830e <_vfiprintf_r+0x10e>
 80282b8:	9a07      	ldr	r2, [sp, #28]
 80282ba:	46a8      	mov	r8, r5
 80282bc:	2000      	movs	r0, #0
 80282be:	250a      	movs	r5, #10
 80282c0:	4641      	mov	r1, r8
 80282c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80282c6:	3b30      	subs	r3, #48	; 0x30
 80282c8:	2b09      	cmp	r3, #9
 80282ca:	d969      	bls.n	80283a0 <_vfiprintf_r+0x1a0>
 80282cc:	b360      	cbz	r0, 8028328 <_vfiprintf_r+0x128>
 80282ce:	e024      	b.n	802831a <_vfiprintf_r+0x11a>
 80282d0:	4b50      	ldr	r3, [pc, #320]	; (8028414 <_vfiprintf_r+0x214>)
 80282d2:	429c      	cmp	r4, r3
 80282d4:	d101      	bne.n	80282da <_vfiprintf_r+0xda>
 80282d6:	68b4      	ldr	r4, [r6, #8]
 80282d8:	e7a2      	b.n	8028220 <_vfiprintf_r+0x20>
 80282da:	4b4f      	ldr	r3, [pc, #316]	; (8028418 <_vfiprintf_r+0x218>)
 80282dc:	429c      	cmp	r4, r3
 80282de:	bf08      	it	eq
 80282e0:	68f4      	ldreq	r4, [r6, #12]
 80282e2:	e79d      	b.n	8028220 <_vfiprintf_r+0x20>
 80282e4:	4621      	mov	r1, r4
 80282e6:	4630      	mov	r0, r6
 80282e8:	f000 face 	bl	8028888 <__swsetup_r>
 80282ec:	2800      	cmp	r0, #0
 80282ee:	d09d      	beq.n	802822c <_vfiprintf_r+0x2c>
 80282f0:	f04f 30ff 	mov.w	r0, #4294967295
 80282f4:	b01d      	add	sp, #116	; 0x74
 80282f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282fa:	46a8      	mov	r8, r5
 80282fc:	e7a2      	b.n	8028244 <_vfiprintf_r+0x44>
 80282fe:	4a44      	ldr	r2, [pc, #272]	; (8028410 <_vfiprintf_r+0x210>)
 8028300:	1a80      	subs	r0, r0, r2
 8028302:	fa0b f000 	lsl.w	r0, fp, r0
 8028306:	4318      	orrs	r0, r3
 8028308:	9004      	str	r0, [sp, #16]
 802830a:	4645      	mov	r5, r8
 802830c:	e7be      	b.n	802828c <_vfiprintf_r+0x8c>
 802830e:	9a03      	ldr	r2, [sp, #12]
 8028310:	1d11      	adds	r1, r2, #4
 8028312:	6812      	ldr	r2, [r2, #0]
 8028314:	9103      	str	r1, [sp, #12]
 8028316:	2a00      	cmp	r2, #0
 8028318:	db01      	blt.n	802831e <_vfiprintf_r+0x11e>
 802831a:	9207      	str	r2, [sp, #28]
 802831c:	e004      	b.n	8028328 <_vfiprintf_r+0x128>
 802831e:	4252      	negs	r2, r2
 8028320:	f043 0302 	orr.w	r3, r3, #2
 8028324:	9207      	str	r2, [sp, #28]
 8028326:	9304      	str	r3, [sp, #16]
 8028328:	f898 3000 	ldrb.w	r3, [r8]
 802832c:	2b2e      	cmp	r3, #46	; 0x2e
 802832e:	d10e      	bne.n	802834e <_vfiprintf_r+0x14e>
 8028330:	f898 3001 	ldrb.w	r3, [r8, #1]
 8028334:	2b2a      	cmp	r3, #42	; 0x2a
 8028336:	d138      	bne.n	80283aa <_vfiprintf_r+0x1aa>
 8028338:	9b03      	ldr	r3, [sp, #12]
 802833a:	1d1a      	adds	r2, r3, #4
 802833c:	681b      	ldr	r3, [r3, #0]
 802833e:	9203      	str	r2, [sp, #12]
 8028340:	2b00      	cmp	r3, #0
 8028342:	bfb8      	it	lt
 8028344:	f04f 33ff 	movlt.w	r3, #4294967295
 8028348:	f108 0802 	add.w	r8, r8, #2
 802834c:	9305      	str	r3, [sp, #20]
 802834e:	4d33      	ldr	r5, [pc, #204]	; (802841c <_vfiprintf_r+0x21c>)
 8028350:	f898 1000 	ldrb.w	r1, [r8]
 8028354:	2203      	movs	r2, #3
 8028356:	4628      	mov	r0, r5
 8028358:	f7d7 ff5a 	bl	8000210 <memchr>
 802835c:	b140      	cbz	r0, 8028370 <_vfiprintf_r+0x170>
 802835e:	2340      	movs	r3, #64	; 0x40
 8028360:	1b40      	subs	r0, r0, r5
 8028362:	fa03 f000 	lsl.w	r0, r3, r0
 8028366:	9b04      	ldr	r3, [sp, #16]
 8028368:	4303      	orrs	r3, r0
 802836a:	f108 0801 	add.w	r8, r8, #1
 802836e:	9304      	str	r3, [sp, #16]
 8028370:	f898 1000 	ldrb.w	r1, [r8]
 8028374:	482a      	ldr	r0, [pc, #168]	; (8028420 <_vfiprintf_r+0x220>)
 8028376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802837a:	2206      	movs	r2, #6
 802837c:	f108 0701 	add.w	r7, r8, #1
 8028380:	f7d7 ff46 	bl	8000210 <memchr>
 8028384:	2800      	cmp	r0, #0
 8028386:	d037      	beq.n	80283f8 <_vfiprintf_r+0x1f8>
 8028388:	4b26      	ldr	r3, [pc, #152]	; (8028424 <_vfiprintf_r+0x224>)
 802838a:	bb1b      	cbnz	r3, 80283d4 <_vfiprintf_r+0x1d4>
 802838c:	9b03      	ldr	r3, [sp, #12]
 802838e:	3307      	adds	r3, #7
 8028390:	f023 0307 	bic.w	r3, r3, #7
 8028394:	3308      	adds	r3, #8
 8028396:	9303      	str	r3, [sp, #12]
 8028398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802839a:	444b      	add	r3, r9
 802839c:	9309      	str	r3, [sp, #36]	; 0x24
 802839e:	e750      	b.n	8028242 <_vfiprintf_r+0x42>
 80283a0:	fb05 3202 	mla	r2, r5, r2, r3
 80283a4:	2001      	movs	r0, #1
 80283a6:	4688      	mov	r8, r1
 80283a8:	e78a      	b.n	80282c0 <_vfiprintf_r+0xc0>
 80283aa:	2300      	movs	r3, #0
 80283ac:	f108 0801 	add.w	r8, r8, #1
 80283b0:	9305      	str	r3, [sp, #20]
 80283b2:	4619      	mov	r1, r3
 80283b4:	250a      	movs	r5, #10
 80283b6:	4640      	mov	r0, r8
 80283b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80283bc:	3a30      	subs	r2, #48	; 0x30
 80283be:	2a09      	cmp	r2, #9
 80283c0:	d903      	bls.n	80283ca <_vfiprintf_r+0x1ca>
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	d0c3      	beq.n	802834e <_vfiprintf_r+0x14e>
 80283c6:	9105      	str	r1, [sp, #20]
 80283c8:	e7c1      	b.n	802834e <_vfiprintf_r+0x14e>
 80283ca:	fb05 2101 	mla	r1, r5, r1, r2
 80283ce:	2301      	movs	r3, #1
 80283d0:	4680      	mov	r8, r0
 80283d2:	e7f0      	b.n	80283b6 <_vfiprintf_r+0x1b6>
 80283d4:	ab03      	add	r3, sp, #12
 80283d6:	9300      	str	r3, [sp, #0]
 80283d8:	4622      	mov	r2, r4
 80283da:	4b13      	ldr	r3, [pc, #76]	; (8028428 <_vfiprintf_r+0x228>)
 80283dc:	a904      	add	r1, sp, #16
 80283de:	4630      	mov	r0, r6
 80283e0:	f3af 8000 	nop.w
 80283e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80283e8:	4681      	mov	r9, r0
 80283ea:	d1d5      	bne.n	8028398 <_vfiprintf_r+0x198>
 80283ec:	89a3      	ldrh	r3, [r4, #12]
 80283ee:	065b      	lsls	r3, r3, #25
 80283f0:	f53f af7e 	bmi.w	80282f0 <_vfiprintf_r+0xf0>
 80283f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80283f6:	e77d      	b.n	80282f4 <_vfiprintf_r+0xf4>
 80283f8:	ab03      	add	r3, sp, #12
 80283fa:	9300      	str	r3, [sp, #0]
 80283fc:	4622      	mov	r2, r4
 80283fe:	4b0a      	ldr	r3, [pc, #40]	; (8028428 <_vfiprintf_r+0x228>)
 8028400:	a904      	add	r1, sp, #16
 8028402:	4630      	mov	r0, r6
 8028404:	f000 f888 	bl	8028518 <_printf_i>
 8028408:	e7ec      	b.n	80283e4 <_vfiprintf_r+0x1e4>
 802840a:	bf00      	nop
 802840c:	0802d9d4 	.word	0x0802d9d4
 8028410:	0802d97c 	.word	0x0802d97c
 8028414:	0802d9f4 	.word	0x0802d9f4
 8028418:	0802d9b4 	.word	0x0802d9b4
 802841c:	0802d982 	.word	0x0802d982
 8028420:	0802d986 	.word	0x0802d986
 8028424:	00000000 	.word	0x00000000
 8028428:	080281db 	.word	0x080281db

0802842c <_printf_common>:
 802842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028430:	4691      	mov	r9, r2
 8028432:	461f      	mov	r7, r3
 8028434:	688a      	ldr	r2, [r1, #8]
 8028436:	690b      	ldr	r3, [r1, #16]
 8028438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802843c:	4293      	cmp	r3, r2
 802843e:	bfb8      	it	lt
 8028440:	4613      	movlt	r3, r2
 8028442:	f8c9 3000 	str.w	r3, [r9]
 8028446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802844a:	4606      	mov	r6, r0
 802844c:	460c      	mov	r4, r1
 802844e:	b112      	cbz	r2, 8028456 <_printf_common+0x2a>
 8028450:	3301      	adds	r3, #1
 8028452:	f8c9 3000 	str.w	r3, [r9]
 8028456:	6823      	ldr	r3, [r4, #0]
 8028458:	0699      	lsls	r1, r3, #26
 802845a:	bf42      	ittt	mi
 802845c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8028460:	3302      	addmi	r3, #2
 8028462:	f8c9 3000 	strmi.w	r3, [r9]
 8028466:	6825      	ldr	r5, [r4, #0]
 8028468:	f015 0506 	ands.w	r5, r5, #6
 802846c:	d107      	bne.n	802847e <_printf_common+0x52>
 802846e:	f104 0a19 	add.w	sl, r4, #25
 8028472:	68e3      	ldr	r3, [r4, #12]
 8028474:	f8d9 2000 	ldr.w	r2, [r9]
 8028478:	1a9b      	subs	r3, r3, r2
 802847a:	42ab      	cmp	r3, r5
 802847c:	dc28      	bgt.n	80284d0 <_printf_common+0xa4>
 802847e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8028482:	6822      	ldr	r2, [r4, #0]
 8028484:	3300      	adds	r3, #0
 8028486:	bf18      	it	ne
 8028488:	2301      	movne	r3, #1
 802848a:	0692      	lsls	r2, r2, #26
 802848c:	d42d      	bmi.n	80284ea <_printf_common+0xbe>
 802848e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028492:	4639      	mov	r1, r7
 8028494:	4630      	mov	r0, r6
 8028496:	47c0      	blx	r8
 8028498:	3001      	adds	r0, #1
 802849a:	d020      	beq.n	80284de <_printf_common+0xb2>
 802849c:	6823      	ldr	r3, [r4, #0]
 802849e:	68e5      	ldr	r5, [r4, #12]
 80284a0:	f8d9 2000 	ldr.w	r2, [r9]
 80284a4:	f003 0306 	and.w	r3, r3, #6
 80284a8:	2b04      	cmp	r3, #4
 80284aa:	bf08      	it	eq
 80284ac:	1aad      	subeq	r5, r5, r2
 80284ae:	68a3      	ldr	r3, [r4, #8]
 80284b0:	6922      	ldr	r2, [r4, #16]
 80284b2:	bf0c      	ite	eq
 80284b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80284b8:	2500      	movne	r5, #0
 80284ba:	4293      	cmp	r3, r2
 80284bc:	bfc4      	itt	gt
 80284be:	1a9b      	subgt	r3, r3, r2
 80284c0:	18ed      	addgt	r5, r5, r3
 80284c2:	f04f 0900 	mov.w	r9, #0
 80284c6:	341a      	adds	r4, #26
 80284c8:	454d      	cmp	r5, r9
 80284ca:	d11a      	bne.n	8028502 <_printf_common+0xd6>
 80284cc:	2000      	movs	r0, #0
 80284ce:	e008      	b.n	80284e2 <_printf_common+0xb6>
 80284d0:	2301      	movs	r3, #1
 80284d2:	4652      	mov	r2, sl
 80284d4:	4639      	mov	r1, r7
 80284d6:	4630      	mov	r0, r6
 80284d8:	47c0      	blx	r8
 80284da:	3001      	adds	r0, #1
 80284dc:	d103      	bne.n	80284e6 <_printf_common+0xba>
 80284de:	f04f 30ff 	mov.w	r0, #4294967295
 80284e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284e6:	3501      	adds	r5, #1
 80284e8:	e7c3      	b.n	8028472 <_printf_common+0x46>
 80284ea:	18e1      	adds	r1, r4, r3
 80284ec:	1c5a      	adds	r2, r3, #1
 80284ee:	2030      	movs	r0, #48	; 0x30
 80284f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80284f4:	4422      	add	r2, r4
 80284f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80284fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80284fe:	3302      	adds	r3, #2
 8028500:	e7c5      	b.n	802848e <_printf_common+0x62>
 8028502:	2301      	movs	r3, #1
 8028504:	4622      	mov	r2, r4
 8028506:	4639      	mov	r1, r7
 8028508:	4630      	mov	r0, r6
 802850a:	47c0      	blx	r8
 802850c:	3001      	adds	r0, #1
 802850e:	d0e6      	beq.n	80284de <_printf_common+0xb2>
 8028510:	f109 0901 	add.w	r9, r9, #1
 8028514:	e7d8      	b.n	80284c8 <_printf_common+0x9c>
	...

08028518 <_printf_i>:
 8028518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802851c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8028520:	460c      	mov	r4, r1
 8028522:	7e09      	ldrb	r1, [r1, #24]
 8028524:	b085      	sub	sp, #20
 8028526:	296e      	cmp	r1, #110	; 0x6e
 8028528:	4617      	mov	r7, r2
 802852a:	4606      	mov	r6, r0
 802852c:	4698      	mov	r8, r3
 802852e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028530:	f000 80b3 	beq.w	802869a <_printf_i+0x182>
 8028534:	d822      	bhi.n	802857c <_printf_i+0x64>
 8028536:	2963      	cmp	r1, #99	; 0x63
 8028538:	d036      	beq.n	80285a8 <_printf_i+0x90>
 802853a:	d80a      	bhi.n	8028552 <_printf_i+0x3a>
 802853c:	2900      	cmp	r1, #0
 802853e:	f000 80b9 	beq.w	80286b4 <_printf_i+0x19c>
 8028542:	2958      	cmp	r1, #88	; 0x58
 8028544:	f000 8083 	beq.w	802864e <_printf_i+0x136>
 8028548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802854c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8028550:	e032      	b.n	80285b8 <_printf_i+0xa0>
 8028552:	2964      	cmp	r1, #100	; 0x64
 8028554:	d001      	beq.n	802855a <_printf_i+0x42>
 8028556:	2969      	cmp	r1, #105	; 0x69
 8028558:	d1f6      	bne.n	8028548 <_printf_i+0x30>
 802855a:	6820      	ldr	r0, [r4, #0]
 802855c:	6813      	ldr	r3, [r2, #0]
 802855e:	0605      	lsls	r5, r0, #24
 8028560:	f103 0104 	add.w	r1, r3, #4
 8028564:	d52a      	bpl.n	80285bc <_printf_i+0xa4>
 8028566:	681b      	ldr	r3, [r3, #0]
 8028568:	6011      	str	r1, [r2, #0]
 802856a:	2b00      	cmp	r3, #0
 802856c:	da03      	bge.n	8028576 <_printf_i+0x5e>
 802856e:	222d      	movs	r2, #45	; 0x2d
 8028570:	425b      	negs	r3, r3
 8028572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8028576:	486f      	ldr	r0, [pc, #444]	; (8028734 <_printf_i+0x21c>)
 8028578:	220a      	movs	r2, #10
 802857a:	e039      	b.n	80285f0 <_printf_i+0xd8>
 802857c:	2973      	cmp	r1, #115	; 0x73
 802857e:	f000 809d 	beq.w	80286bc <_printf_i+0x1a4>
 8028582:	d808      	bhi.n	8028596 <_printf_i+0x7e>
 8028584:	296f      	cmp	r1, #111	; 0x6f
 8028586:	d020      	beq.n	80285ca <_printf_i+0xb2>
 8028588:	2970      	cmp	r1, #112	; 0x70
 802858a:	d1dd      	bne.n	8028548 <_printf_i+0x30>
 802858c:	6823      	ldr	r3, [r4, #0]
 802858e:	f043 0320 	orr.w	r3, r3, #32
 8028592:	6023      	str	r3, [r4, #0]
 8028594:	e003      	b.n	802859e <_printf_i+0x86>
 8028596:	2975      	cmp	r1, #117	; 0x75
 8028598:	d017      	beq.n	80285ca <_printf_i+0xb2>
 802859a:	2978      	cmp	r1, #120	; 0x78
 802859c:	d1d4      	bne.n	8028548 <_printf_i+0x30>
 802859e:	2378      	movs	r3, #120	; 0x78
 80285a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80285a4:	4864      	ldr	r0, [pc, #400]	; (8028738 <_printf_i+0x220>)
 80285a6:	e055      	b.n	8028654 <_printf_i+0x13c>
 80285a8:	6813      	ldr	r3, [r2, #0]
 80285aa:	1d19      	adds	r1, r3, #4
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	6011      	str	r1, [r2, #0]
 80285b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80285b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80285b8:	2301      	movs	r3, #1
 80285ba:	e08c      	b.n	80286d6 <_printf_i+0x1be>
 80285bc:	681b      	ldr	r3, [r3, #0]
 80285be:	6011      	str	r1, [r2, #0]
 80285c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80285c4:	bf18      	it	ne
 80285c6:	b21b      	sxthne	r3, r3
 80285c8:	e7cf      	b.n	802856a <_printf_i+0x52>
 80285ca:	6813      	ldr	r3, [r2, #0]
 80285cc:	6825      	ldr	r5, [r4, #0]
 80285ce:	1d18      	adds	r0, r3, #4
 80285d0:	6010      	str	r0, [r2, #0]
 80285d2:	0628      	lsls	r0, r5, #24
 80285d4:	d501      	bpl.n	80285da <_printf_i+0xc2>
 80285d6:	681b      	ldr	r3, [r3, #0]
 80285d8:	e002      	b.n	80285e0 <_printf_i+0xc8>
 80285da:	0668      	lsls	r0, r5, #25
 80285dc:	d5fb      	bpl.n	80285d6 <_printf_i+0xbe>
 80285de:	881b      	ldrh	r3, [r3, #0]
 80285e0:	4854      	ldr	r0, [pc, #336]	; (8028734 <_printf_i+0x21c>)
 80285e2:	296f      	cmp	r1, #111	; 0x6f
 80285e4:	bf14      	ite	ne
 80285e6:	220a      	movne	r2, #10
 80285e8:	2208      	moveq	r2, #8
 80285ea:	2100      	movs	r1, #0
 80285ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80285f0:	6865      	ldr	r5, [r4, #4]
 80285f2:	60a5      	str	r5, [r4, #8]
 80285f4:	2d00      	cmp	r5, #0
 80285f6:	f2c0 8095 	blt.w	8028724 <_printf_i+0x20c>
 80285fa:	6821      	ldr	r1, [r4, #0]
 80285fc:	f021 0104 	bic.w	r1, r1, #4
 8028600:	6021      	str	r1, [r4, #0]
 8028602:	2b00      	cmp	r3, #0
 8028604:	d13d      	bne.n	8028682 <_printf_i+0x16a>
 8028606:	2d00      	cmp	r5, #0
 8028608:	f040 808e 	bne.w	8028728 <_printf_i+0x210>
 802860c:	4665      	mov	r5, ip
 802860e:	2a08      	cmp	r2, #8
 8028610:	d10b      	bne.n	802862a <_printf_i+0x112>
 8028612:	6823      	ldr	r3, [r4, #0]
 8028614:	07db      	lsls	r3, r3, #31
 8028616:	d508      	bpl.n	802862a <_printf_i+0x112>
 8028618:	6923      	ldr	r3, [r4, #16]
 802861a:	6862      	ldr	r2, [r4, #4]
 802861c:	429a      	cmp	r2, r3
 802861e:	bfde      	ittt	le
 8028620:	2330      	movle	r3, #48	; 0x30
 8028622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028626:	f105 35ff 	addle.w	r5, r5, #4294967295
 802862a:	ebac 0305 	sub.w	r3, ip, r5
 802862e:	6123      	str	r3, [r4, #16]
 8028630:	f8cd 8000 	str.w	r8, [sp]
 8028634:	463b      	mov	r3, r7
 8028636:	aa03      	add	r2, sp, #12
 8028638:	4621      	mov	r1, r4
 802863a:	4630      	mov	r0, r6
 802863c:	f7ff fef6 	bl	802842c <_printf_common>
 8028640:	3001      	adds	r0, #1
 8028642:	d14d      	bne.n	80286e0 <_printf_i+0x1c8>
 8028644:	f04f 30ff 	mov.w	r0, #4294967295
 8028648:	b005      	add	sp, #20
 802864a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802864e:	4839      	ldr	r0, [pc, #228]	; (8028734 <_printf_i+0x21c>)
 8028650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8028654:	6813      	ldr	r3, [r2, #0]
 8028656:	6821      	ldr	r1, [r4, #0]
 8028658:	1d1d      	adds	r5, r3, #4
 802865a:	681b      	ldr	r3, [r3, #0]
 802865c:	6015      	str	r5, [r2, #0]
 802865e:	060a      	lsls	r2, r1, #24
 8028660:	d50b      	bpl.n	802867a <_printf_i+0x162>
 8028662:	07ca      	lsls	r2, r1, #31
 8028664:	bf44      	itt	mi
 8028666:	f041 0120 	orrmi.w	r1, r1, #32
 802866a:	6021      	strmi	r1, [r4, #0]
 802866c:	b91b      	cbnz	r3, 8028676 <_printf_i+0x15e>
 802866e:	6822      	ldr	r2, [r4, #0]
 8028670:	f022 0220 	bic.w	r2, r2, #32
 8028674:	6022      	str	r2, [r4, #0]
 8028676:	2210      	movs	r2, #16
 8028678:	e7b7      	b.n	80285ea <_printf_i+0xd2>
 802867a:	064d      	lsls	r5, r1, #25
 802867c:	bf48      	it	mi
 802867e:	b29b      	uxthmi	r3, r3
 8028680:	e7ef      	b.n	8028662 <_printf_i+0x14a>
 8028682:	4665      	mov	r5, ip
 8028684:	fbb3 f1f2 	udiv	r1, r3, r2
 8028688:	fb02 3311 	mls	r3, r2, r1, r3
 802868c:	5cc3      	ldrb	r3, [r0, r3]
 802868e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8028692:	460b      	mov	r3, r1
 8028694:	2900      	cmp	r1, #0
 8028696:	d1f5      	bne.n	8028684 <_printf_i+0x16c>
 8028698:	e7b9      	b.n	802860e <_printf_i+0xf6>
 802869a:	6813      	ldr	r3, [r2, #0]
 802869c:	6825      	ldr	r5, [r4, #0]
 802869e:	6961      	ldr	r1, [r4, #20]
 80286a0:	1d18      	adds	r0, r3, #4
 80286a2:	6010      	str	r0, [r2, #0]
 80286a4:	0628      	lsls	r0, r5, #24
 80286a6:	681b      	ldr	r3, [r3, #0]
 80286a8:	d501      	bpl.n	80286ae <_printf_i+0x196>
 80286aa:	6019      	str	r1, [r3, #0]
 80286ac:	e002      	b.n	80286b4 <_printf_i+0x19c>
 80286ae:	066a      	lsls	r2, r5, #25
 80286b0:	d5fb      	bpl.n	80286aa <_printf_i+0x192>
 80286b2:	8019      	strh	r1, [r3, #0]
 80286b4:	2300      	movs	r3, #0
 80286b6:	6123      	str	r3, [r4, #16]
 80286b8:	4665      	mov	r5, ip
 80286ba:	e7b9      	b.n	8028630 <_printf_i+0x118>
 80286bc:	6813      	ldr	r3, [r2, #0]
 80286be:	1d19      	adds	r1, r3, #4
 80286c0:	6011      	str	r1, [r2, #0]
 80286c2:	681d      	ldr	r5, [r3, #0]
 80286c4:	6862      	ldr	r2, [r4, #4]
 80286c6:	2100      	movs	r1, #0
 80286c8:	4628      	mov	r0, r5
 80286ca:	f7d7 fda1 	bl	8000210 <memchr>
 80286ce:	b108      	cbz	r0, 80286d4 <_printf_i+0x1bc>
 80286d0:	1b40      	subs	r0, r0, r5
 80286d2:	6060      	str	r0, [r4, #4]
 80286d4:	6863      	ldr	r3, [r4, #4]
 80286d6:	6123      	str	r3, [r4, #16]
 80286d8:	2300      	movs	r3, #0
 80286da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80286de:	e7a7      	b.n	8028630 <_printf_i+0x118>
 80286e0:	6923      	ldr	r3, [r4, #16]
 80286e2:	462a      	mov	r2, r5
 80286e4:	4639      	mov	r1, r7
 80286e6:	4630      	mov	r0, r6
 80286e8:	47c0      	blx	r8
 80286ea:	3001      	adds	r0, #1
 80286ec:	d0aa      	beq.n	8028644 <_printf_i+0x12c>
 80286ee:	6823      	ldr	r3, [r4, #0]
 80286f0:	079b      	lsls	r3, r3, #30
 80286f2:	d413      	bmi.n	802871c <_printf_i+0x204>
 80286f4:	68e0      	ldr	r0, [r4, #12]
 80286f6:	9b03      	ldr	r3, [sp, #12]
 80286f8:	4298      	cmp	r0, r3
 80286fa:	bfb8      	it	lt
 80286fc:	4618      	movlt	r0, r3
 80286fe:	e7a3      	b.n	8028648 <_printf_i+0x130>
 8028700:	2301      	movs	r3, #1
 8028702:	464a      	mov	r2, r9
 8028704:	4639      	mov	r1, r7
 8028706:	4630      	mov	r0, r6
 8028708:	47c0      	blx	r8
 802870a:	3001      	adds	r0, #1
 802870c:	d09a      	beq.n	8028644 <_printf_i+0x12c>
 802870e:	3501      	adds	r5, #1
 8028710:	68e3      	ldr	r3, [r4, #12]
 8028712:	9a03      	ldr	r2, [sp, #12]
 8028714:	1a9b      	subs	r3, r3, r2
 8028716:	42ab      	cmp	r3, r5
 8028718:	dcf2      	bgt.n	8028700 <_printf_i+0x1e8>
 802871a:	e7eb      	b.n	80286f4 <_printf_i+0x1dc>
 802871c:	2500      	movs	r5, #0
 802871e:	f104 0919 	add.w	r9, r4, #25
 8028722:	e7f5      	b.n	8028710 <_printf_i+0x1f8>
 8028724:	2b00      	cmp	r3, #0
 8028726:	d1ac      	bne.n	8028682 <_printf_i+0x16a>
 8028728:	7803      	ldrb	r3, [r0, #0]
 802872a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802872e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028732:	e76c      	b.n	802860e <_printf_i+0xf6>
 8028734:	0802d98d 	.word	0x0802d98d
 8028738:	0802d99e 	.word	0x0802d99e

0802873c <_sbrk_r>:
 802873c:	b538      	push	{r3, r4, r5, lr}
 802873e:	4c06      	ldr	r4, [pc, #24]	; (8028758 <_sbrk_r+0x1c>)
 8028740:	2300      	movs	r3, #0
 8028742:	4605      	mov	r5, r0
 8028744:	4608      	mov	r0, r1
 8028746:	6023      	str	r3, [r4, #0]
 8028748:	f7da fef4 	bl	8003534 <_sbrk>
 802874c:	1c43      	adds	r3, r0, #1
 802874e:	d102      	bne.n	8028756 <_sbrk_r+0x1a>
 8028750:	6823      	ldr	r3, [r4, #0]
 8028752:	b103      	cbz	r3, 8028756 <_sbrk_r+0x1a>
 8028754:	602b      	str	r3, [r5, #0]
 8028756:	bd38      	pop	{r3, r4, r5, pc}
 8028758:	2000cd88 	.word	0x2000cd88

0802875c <_raise_r>:
 802875c:	291f      	cmp	r1, #31
 802875e:	b538      	push	{r3, r4, r5, lr}
 8028760:	4604      	mov	r4, r0
 8028762:	460d      	mov	r5, r1
 8028764:	d904      	bls.n	8028770 <_raise_r+0x14>
 8028766:	2316      	movs	r3, #22
 8028768:	6003      	str	r3, [r0, #0]
 802876a:	f04f 30ff 	mov.w	r0, #4294967295
 802876e:	bd38      	pop	{r3, r4, r5, pc}
 8028770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028772:	b112      	cbz	r2, 802877a <_raise_r+0x1e>
 8028774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028778:	b94b      	cbnz	r3, 802878e <_raise_r+0x32>
 802877a:	4620      	mov	r0, r4
 802877c:	f000 f830 	bl	80287e0 <_getpid_r>
 8028780:	462a      	mov	r2, r5
 8028782:	4601      	mov	r1, r0
 8028784:	4620      	mov	r0, r4
 8028786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802878a:	f000 b817 	b.w	80287bc <_kill_r>
 802878e:	2b01      	cmp	r3, #1
 8028790:	d00a      	beq.n	80287a8 <_raise_r+0x4c>
 8028792:	1c59      	adds	r1, r3, #1
 8028794:	d103      	bne.n	802879e <_raise_r+0x42>
 8028796:	2316      	movs	r3, #22
 8028798:	6003      	str	r3, [r0, #0]
 802879a:	2001      	movs	r0, #1
 802879c:	e7e7      	b.n	802876e <_raise_r+0x12>
 802879e:	2400      	movs	r4, #0
 80287a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80287a4:	4628      	mov	r0, r5
 80287a6:	4798      	blx	r3
 80287a8:	2000      	movs	r0, #0
 80287aa:	e7e0      	b.n	802876e <_raise_r+0x12>

080287ac <raise>:
 80287ac:	4b02      	ldr	r3, [pc, #8]	; (80287b8 <raise+0xc>)
 80287ae:	4601      	mov	r1, r0
 80287b0:	6818      	ldr	r0, [r3, #0]
 80287b2:	f7ff bfd3 	b.w	802875c <_raise_r>
 80287b6:	bf00      	nop
 80287b8:	200000d8 	.word	0x200000d8

080287bc <_kill_r>:
 80287bc:	b538      	push	{r3, r4, r5, lr}
 80287be:	4c07      	ldr	r4, [pc, #28]	; (80287dc <_kill_r+0x20>)
 80287c0:	2300      	movs	r3, #0
 80287c2:	4605      	mov	r5, r0
 80287c4:	4608      	mov	r0, r1
 80287c6:	4611      	mov	r1, r2
 80287c8:	6023      	str	r3, [r4, #0]
 80287ca:	f7da fe2b 	bl	8003424 <_kill>
 80287ce:	1c43      	adds	r3, r0, #1
 80287d0:	d102      	bne.n	80287d8 <_kill_r+0x1c>
 80287d2:	6823      	ldr	r3, [r4, #0]
 80287d4:	b103      	cbz	r3, 80287d8 <_kill_r+0x1c>
 80287d6:	602b      	str	r3, [r5, #0]
 80287d8:	bd38      	pop	{r3, r4, r5, pc}
 80287da:	bf00      	nop
 80287dc:	2000cd88 	.word	0x2000cd88

080287e0 <_getpid_r>:
 80287e0:	f7da be18 	b.w	8003414 <_getpid>

080287e4 <__swbuf_r>:
 80287e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287e6:	460e      	mov	r6, r1
 80287e8:	4614      	mov	r4, r2
 80287ea:	4605      	mov	r5, r0
 80287ec:	b118      	cbz	r0, 80287f6 <__swbuf_r+0x12>
 80287ee:	6983      	ldr	r3, [r0, #24]
 80287f0:	b90b      	cbnz	r3, 80287f6 <__swbuf_r+0x12>
 80287f2:	f000 fa0b 	bl	8028c0c <__sinit>
 80287f6:	4b21      	ldr	r3, [pc, #132]	; (802887c <__swbuf_r+0x98>)
 80287f8:	429c      	cmp	r4, r3
 80287fa:	d12a      	bne.n	8028852 <__swbuf_r+0x6e>
 80287fc:	686c      	ldr	r4, [r5, #4]
 80287fe:	69a3      	ldr	r3, [r4, #24]
 8028800:	60a3      	str	r3, [r4, #8]
 8028802:	89a3      	ldrh	r3, [r4, #12]
 8028804:	071a      	lsls	r2, r3, #28
 8028806:	d52e      	bpl.n	8028866 <__swbuf_r+0x82>
 8028808:	6923      	ldr	r3, [r4, #16]
 802880a:	b363      	cbz	r3, 8028866 <__swbuf_r+0x82>
 802880c:	6923      	ldr	r3, [r4, #16]
 802880e:	6820      	ldr	r0, [r4, #0]
 8028810:	1ac0      	subs	r0, r0, r3
 8028812:	6963      	ldr	r3, [r4, #20]
 8028814:	b2f6      	uxtb	r6, r6
 8028816:	4283      	cmp	r3, r0
 8028818:	4637      	mov	r7, r6
 802881a:	dc04      	bgt.n	8028826 <__swbuf_r+0x42>
 802881c:	4621      	mov	r1, r4
 802881e:	4628      	mov	r0, r5
 8028820:	f000 f98a 	bl	8028b38 <_fflush_r>
 8028824:	bb28      	cbnz	r0, 8028872 <__swbuf_r+0x8e>
 8028826:	68a3      	ldr	r3, [r4, #8]
 8028828:	3b01      	subs	r3, #1
 802882a:	60a3      	str	r3, [r4, #8]
 802882c:	6823      	ldr	r3, [r4, #0]
 802882e:	1c5a      	adds	r2, r3, #1
 8028830:	6022      	str	r2, [r4, #0]
 8028832:	701e      	strb	r6, [r3, #0]
 8028834:	6963      	ldr	r3, [r4, #20]
 8028836:	3001      	adds	r0, #1
 8028838:	4283      	cmp	r3, r0
 802883a:	d004      	beq.n	8028846 <__swbuf_r+0x62>
 802883c:	89a3      	ldrh	r3, [r4, #12]
 802883e:	07db      	lsls	r3, r3, #31
 8028840:	d519      	bpl.n	8028876 <__swbuf_r+0x92>
 8028842:	2e0a      	cmp	r6, #10
 8028844:	d117      	bne.n	8028876 <__swbuf_r+0x92>
 8028846:	4621      	mov	r1, r4
 8028848:	4628      	mov	r0, r5
 802884a:	f000 f975 	bl	8028b38 <_fflush_r>
 802884e:	b190      	cbz	r0, 8028876 <__swbuf_r+0x92>
 8028850:	e00f      	b.n	8028872 <__swbuf_r+0x8e>
 8028852:	4b0b      	ldr	r3, [pc, #44]	; (8028880 <__swbuf_r+0x9c>)
 8028854:	429c      	cmp	r4, r3
 8028856:	d101      	bne.n	802885c <__swbuf_r+0x78>
 8028858:	68ac      	ldr	r4, [r5, #8]
 802885a:	e7d0      	b.n	80287fe <__swbuf_r+0x1a>
 802885c:	4b09      	ldr	r3, [pc, #36]	; (8028884 <__swbuf_r+0xa0>)
 802885e:	429c      	cmp	r4, r3
 8028860:	bf08      	it	eq
 8028862:	68ec      	ldreq	r4, [r5, #12]
 8028864:	e7cb      	b.n	80287fe <__swbuf_r+0x1a>
 8028866:	4621      	mov	r1, r4
 8028868:	4628      	mov	r0, r5
 802886a:	f000 f80d 	bl	8028888 <__swsetup_r>
 802886e:	2800      	cmp	r0, #0
 8028870:	d0cc      	beq.n	802880c <__swbuf_r+0x28>
 8028872:	f04f 37ff 	mov.w	r7, #4294967295
 8028876:	4638      	mov	r0, r7
 8028878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802887a:	bf00      	nop
 802887c:	0802d9d4 	.word	0x0802d9d4
 8028880:	0802d9f4 	.word	0x0802d9f4
 8028884:	0802d9b4 	.word	0x0802d9b4

08028888 <__swsetup_r>:
 8028888:	4b32      	ldr	r3, [pc, #200]	; (8028954 <__swsetup_r+0xcc>)
 802888a:	b570      	push	{r4, r5, r6, lr}
 802888c:	681d      	ldr	r5, [r3, #0]
 802888e:	4606      	mov	r6, r0
 8028890:	460c      	mov	r4, r1
 8028892:	b125      	cbz	r5, 802889e <__swsetup_r+0x16>
 8028894:	69ab      	ldr	r3, [r5, #24]
 8028896:	b913      	cbnz	r3, 802889e <__swsetup_r+0x16>
 8028898:	4628      	mov	r0, r5
 802889a:	f000 f9b7 	bl	8028c0c <__sinit>
 802889e:	4b2e      	ldr	r3, [pc, #184]	; (8028958 <__swsetup_r+0xd0>)
 80288a0:	429c      	cmp	r4, r3
 80288a2:	d10f      	bne.n	80288c4 <__swsetup_r+0x3c>
 80288a4:	686c      	ldr	r4, [r5, #4]
 80288a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80288aa:	b29a      	uxth	r2, r3
 80288ac:	0715      	lsls	r5, r2, #28
 80288ae:	d42c      	bmi.n	802890a <__swsetup_r+0x82>
 80288b0:	06d0      	lsls	r0, r2, #27
 80288b2:	d411      	bmi.n	80288d8 <__swsetup_r+0x50>
 80288b4:	2209      	movs	r2, #9
 80288b6:	6032      	str	r2, [r6, #0]
 80288b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80288bc:	81a3      	strh	r3, [r4, #12]
 80288be:	f04f 30ff 	mov.w	r0, #4294967295
 80288c2:	e03e      	b.n	8028942 <__swsetup_r+0xba>
 80288c4:	4b25      	ldr	r3, [pc, #148]	; (802895c <__swsetup_r+0xd4>)
 80288c6:	429c      	cmp	r4, r3
 80288c8:	d101      	bne.n	80288ce <__swsetup_r+0x46>
 80288ca:	68ac      	ldr	r4, [r5, #8]
 80288cc:	e7eb      	b.n	80288a6 <__swsetup_r+0x1e>
 80288ce:	4b24      	ldr	r3, [pc, #144]	; (8028960 <__swsetup_r+0xd8>)
 80288d0:	429c      	cmp	r4, r3
 80288d2:	bf08      	it	eq
 80288d4:	68ec      	ldreq	r4, [r5, #12]
 80288d6:	e7e6      	b.n	80288a6 <__swsetup_r+0x1e>
 80288d8:	0751      	lsls	r1, r2, #29
 80288da:	d512      	bpl.n	8028902 <__swsetup_r+0x7a>
 80288dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80288de:	b141      	cbz	r1, 80288f2 <__swsetup_r+0x6a>
 80288e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80288e4:	4299      	cmp	r1, r3
 80288e6:	d002      	beq.n	80288ee <__swsetup_r+0x66>
 80288e8:	4630      	mov	r0, r6
 80288ea:	f7ff fbb7 	bl	802805c <_free_r>
 80288ee:	2300      	movs	r3, #0
 80288f0:	6363      	str	r3, [r4, #52]	; 0x34
 80288f2:	89a3      	ldrh	r3, [r4, #12]
 80288f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80288f8:	81a3      	strh	r3, [r4, #12]
 80288fa:	2300      	movs	r3, #0
 80288fc:	6063      	str	r3, [r4, #4]
 80288fe:	6923      	ldr	r3, [r4, #16]
 8028900:	6023      	str	r3, [r4, #0]
 8028902:	89a3      	ldrh	r3, [r4, #12]
 8028904:	f043 0308 	orr.w	r3, r3, #8
 8028908:	81a3      	strh	r3, [r4, #12]
 802890a:	6923      	ldr	r3, [r4, #16]
 802890c:	b94b      	cbnz	r3, 8028922 <__swsetup_r+0x9a>
 802890e:	89a3      	ldrh	r3, [r4, #12]
 8028910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028918:	d003      	beq.n	8028922 <__swsetup_r+0x9a>
 802891a:	4621      	mov	r1, r4
 802891c:	4630      	mov	r0, r6
 802891e:	f000 fa23 	bl	8028d68 <__smakebuf_r>
 8028922:	89a2      	ldrh	r2, [r4, #12]
 8028924:	f012 0301 	ands.w	r3, r2, #1
 8028928:	d00c      	beq.n	8028944 <__swsetup_r+0xbc>
 802892a:	2300      	movs	r3, #0
 802892c:	60a3      	str	r3, [r4, #8]
 802892e:	6963      	ldr	r3, [r4, #20]
 8028930:	425b      	negs	r3, r3
 8028932:	61a3      	str	r3, [r4, #24]
 8028934:	6923      	ldr	r3, [r4, #16]
 8028936:	b953      	cbnz	r3, 802894e <__swsetup_r+0xc6>
 8028938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802893c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8028940:	d1ba      	bne.n	80288b8 <__swsetup_r+0x30>
 8028942:	bd70      	pop	{r4, r5, r6, pc}
 8028944:	0792      	lsls	r2, r2, #30
 8028946:	bf58      	it	pl
 8028948:	6963      	ldrpl	r3, [r4, #20]
 802894a:	60a3      	str	r3, [r4, #8]
 802894c:	e7f2      	b.n	8028934 <__swsetup_r+0xac>
 802894e:	2000      	movs	r0, #0
 8028950:	e7f7      	b.n	8028942 <__swsetup_r+0xba>
 8028952:	bf00      	nop
 8028954:	200000d8 	.word	0x200000d8
 8028958:	0802d9d4 	.word	0x0802d9d4
 802895c:	0802d9f4 	.word	0x0802d9f4
 8028960:	0802d9b4 	.word	0x0802d9b4

08028964 <__register_exitproc>:
 8028964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028968:	4d2c      	ldr	r5, [pc, #176]	; (8028a1c <__register_exitproc+0xb8>)
 802896a:	682c      	ldr	r4, [r5, #0]
 802896c:	4607      	mov	r7, r0
 802896e:	460e      	mov	r6, r1
 8028970:	4691      	mov	r9, r2
 8028972:	4698      	mov	r8, r3
 8028974:	b934      	cbnz	r4, 8028984 <__register_exitproc+0x20>
 8028976:	4b2a      	ldr	r3, [pc, #168]	; (8028a20 <__register_exitproc+0xbc>)
 8028978:	4c2a      	ldr	r4, [pc, #168]	; (8028a24 <__register_exitproc+0xc0>)
 802897a:	602c      	str	r4, [r5, #0]
 802897c:	b113      	cbz	r3, 8028984 <__register_exitproc+0x20>
 802897e:	681b      	ldr	r3, [r3, #0]
 8028980:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8028984:	6863      	ldr	r3, [r4, #4]
 8028986:	2b1f      	cmp	r3, #31
 8028988:	dd3d      	ble.n	8028a06 <__register_exitproc+0xa2>
 802898a:	4b27      	ldr	r3, [pc, #156]	; (8028a28 <__register_exitproc+0xc4>)
 802898c:	b91b      	cbnz	r3, 8028996 <__register_exitproc+0x32>
 802898e:	f04f 30ff 	mov.w	r0, #4294967295
 8028992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028996:	208c      	movs	r0, #140	; 0x8c
 8028998:	f7ff fb3c 	bl	8028014 <malloc>
 802899c:	4604      	mov	r4, r0
 802899e:	2800      	cmp	r0, #0
 80289a0:	d0f5      	beq.n	802898e <__register_exitproc+0x2a>
 80289a2:	2300      	movs	r3, #0
 80289a4:	682a      	ldr	r2, [r5, #0]
 80289a6:	6002      	str	r2, [r0, #0]
 80289a8:	6043      	str	r3, [r0, #4]
 80289aa:	6028      	str	r0, [r5, #0]
 80289ac:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80289b0:	b30f      	cbz	r7, 80289f6 <__register_exitproc+0x92>
 80289b2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80289b6:	f7ff fb2d 	bl	8028014 <malloc>
 80289ba:	2800      	cmp	r0, #0
 80289bc:	d0e7      	beq.n	802898e <__register_exitproc+0x2a>
 80289be:	2300      	movs	r3, #0
 80289c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80289c4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80289c8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80289cc:	6862      	ldr	r2, [r4, #4]
 80289ce:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80289d2:	2301      	movs	r3, #1
 80289d4:	4093      	lsls	r3, r2
 80289d6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80289da:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80289de:	431a      	orrs	r2, r3
 80289e0:	2f02      	cmp	r7, #2
 80289e2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80289e6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80289ea:	bf02      	ittt	eq
 80289ec:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80289f0:	4313      	orreq	r3, r2
 80289f2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80289f6:	6863      	ldr	r3, [r4, #4]
 80289f8:	1c5a      	adds	r2, r3, #1
 80289fa:	3302      	adds	r3, #2
 80289fc:	6062      	str	r2, [r4, #4]
 80289fe:	2000      	movs	r0, #0
 8028a00:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8028a04:	e7c5      	b.n	8028992 <__register_exitproc+0x2e>
 8028a06:	2f00      	cmp	r7, #0
 8028a08:	d0f5      	beq.n	80289f6 <__register_exitproc+0x92>
 8028a0a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8028a0e:	2800      	cmp	r0, #0
 8028a10:	d1dc      	bne.n	80289cc <__register_exitproc+0x68>
 8028a12:	4b05      	ldr	r3, [pc, #20]	; (8028a28 <__register_exitproc+0xc4>)
 8028a14:	2b00      	cmp	r3, #0
 8028a16:	d0ba      	beq.n	802898e <__register_exitproc+0x2a>
 8028a18:	e7cb      	b.n	80289b2 <__register_exitproc+0x4e>
 8028a1a:	bf00      	nop
 8028a1c:	2000c1a4 	.word	0x2000c1a4
 8028a20:	0802d9b0 	.word	0x0802d9b0
 8028a24:	2000c118 	.word	0x2000c118
 8028a28:	08028015 	.word	0x08028015

08028a2c <__sflush_r>:
 8028a2c:	898a      	ldrh	r2, [r1, #12]
 8028a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a32:	4605      	mov	r5, r0
 8028a34:	0710      	lsls	r0, r2, #28
 8028a36:	460c      	mov	r4, r1
 8028a38:	d458      	bmi.n	8028aec <__sflush_r+0xc0>
 8028a3a:	684b      	ldr	r3, [r1, #4]
 8028a3c:	2b00      	cmp	r3, #0
 8028a3e:	dc05      	bgt.n	8028a4c <__sflush_r+0x20>
 8028a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028a42:	2b00      	cmp	r3, #0
 8028a44:	dc02      	bgt.n	8028a4c <__sflush_r+0x20>
 8028a46:	2000      	movs	r0, #0
 8028a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028a4e:	2e00      	cmp	r6, #0
 8028a50:	d0f9      	beq.n	8028a46 <__sflush_r+0x1a>
 8028a52:	2300      	movs	r3, #0
 8028a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028a58:	682f      	ldr	r7, [r5, #0]
 8028a5a:	6a21      	ldr	r1, [r4, #32]
 8028a5c:	602b      	str	r3, [r5, #0]
 8028a5e:	d032      	beq.n	8028ac6 <__sflush_r+0x9a>
 8028a60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028a62:	89a3      	ldrh	r3, [r4, #12]
 8028a64:	075a      	lsls	r2, r3, #29
 8028a66:	d505      	bpl.n	8028a74 <__sflush_r+0x48>
 8028a68:	6863      	ldr	r3, [r4, #4]
 8028a6a:	1ac0      	subs	r0, r0, r3
 8028a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028a6e:	b10b      	cbz	r3, 8028a74 <__sflush_r+0x48>
 8028a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028a72:	1ac0      	subs	r0, r0, r3
 8028a74:	2300      	movs	r3, #0
 8028a76:	4602      	mov	r2, r0
 8028a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028a7a:	6a21      	ldr	r1, [r4, #32]
 8028a7c:	4628      	mov	r0, r5
 8028a7e:	47b0      	blx	r6
 8028a80:	1c43      	adds	r3, r0, #1
 8028a82:	89a3      	ldrh	r3, [r4, #12]
 8028a84:	d106      	bne.n	8028a94 <__sflush_r+0x68>
 8028a86:	6829      	ldr	r1, [r5, #0]
 8028a88:	291d      	cmp	r1, #29
 8028a8a:	d848      	bhi.n	8028b1e <__sflush_r+0xf2>
 8028a8c:	4a29      	ldr	r2, [pc, #164]	; (8028b34 <__sflush_r+0x108>)
 8028a8e:	40ca      	lsrs	r2, r1
 8028a90:	07d6      	lsls	r6, r2, #31
 8028a92:	d544      	bpl.n	8028b1e <__sflush_r+0xf2>
 8028a94:	2200      	movs	r2, #0
 8028a96:	6062      	str	r2, [r4, #4]
 8028a98:	04d9      	lsls	r1, r3, #19
 8028a9a:	6922      	ldr	r2, [r4, #16]
 8028a9c:	6022      	str	r2, [r4, #0]
 8028a9e:	d504      	bpl.n	8028aaa <__sflush_r+0x7e>
 8028aa0:	1c42      	adds	r2, r0, #1
 8028aa2:	d101      	bne.n	8028aa8 <__sflush_r+0x7c>
 8028aa4:	682b      	ldr	r3, [r5, #0]
 8028aa6:	b903      	cbnz	r3, 8028aaa <__sflush_r+0x7e>
 8028aa8:	6560      	str	r0, [r4, #84]	; 0x54
 8028aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028aac:	602f      	str	r7, [r5, #0]
 8028aae:	2900      	cmp	r1, #0
 8028ab0:	d0c9      	beq.n	8028a46 <__sflush_r+0x1a>
 8028ab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028ab6:	4299      	cmp	r1, r3
 8028ab8:	d002      	beq.n	8028ac0 <__sflush_r+0x94>
 8028aba:	4628      	mov	r0, r5
 8028abc:	f7ff face 	bl	802805c <_free_r>
 8028ac0:	2000      	movs	r0, #0
 8028ac2:	6360      	str	r0, [r4, #52]	; 0x34
 8028ac4:	e7c0      	b.n	8028a48 <__sflush_r+0x1c>
 8028ac6:	2301      	movs	r3, #1
 8028ac8:	4628      	mov	r0, r5
 8028aca:	47b0      	blx	r6
 8028acc:	1c41      	adds	r1, r0, #1
 8028ace:	d1c8      	bne.n	8028a62 <__sflush_r+0x36>
 8028ad0:	682b      	ldr	r3, [r5, #0]
 8028ad2:	2b00      	cmp	r3, #0
 8028ad4:	d0c5      	beq.n	8028a62 <__sflush_r+0x36>
 8028ad6:	2b1d      	cmp	r3, #29
 8028ad8:	d001      	beq.n	8028ade <__sflush_r+0xb2>
 8028ada:	2b16      	cmp	r3, #22
 8028adc:	d101      	bne.n	8028ae2 <__sflush_r+0xb6>
 8028ade:	602f      	str	r7, [r5, #0]
 8028ae0:	e7b1      	b.n	8028a46 <__sflush_r+0x1a>
 8028ae2:	89a3      	ldrh	r3, [r4, #12]
 8028ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028ae8:	81a3      	strh	r3, [r4, #12]
 8028aea:	e7ad      	b.n	8028a48 <__sflush_r+0x1c>
 8028aec:	690f      	ldr	r7, [r1, #16]
 8028aee:	2f00      	cmp	r7, #0
 8028af0:	d0a9      	beq.n	8028a46 <__sflush_r+0x1a>
 8028af2:	0793      	lsls	r3, r2, #30
 8028af4:	680e      	ldr	r6, [r1, #0]
 8028af6:	bf08      	it	eq
 8028af8:	694b      	ldreq	r3, [r1, #20]
 8028afa:	600f      	str	r7, [r1, #0]
 8028afc:	bf18      	it	ne
 8028afe:	2300      	movne	r3, #0
 8028b00:	eba6 0807 	sub.w	r8, r6, r7
 8028b04:	608b      	str	r3, [r1, #8]
 8028b06:	f1b8 0f00 	cmp.w	r8, #0
 8028b0a:	dd9c      	ble.n	8028a46 <__sflush_r+0x1a>
 8028b0c:	4643      	mov	r3, r8
 8028b0e:	463a      	mov	r2, r7
 8028b10:	6a21      	ldr	r1, [r4, #32]
 8028b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028b14:	4628      	mov	r0, r5
 8028b16:	47b0      	blx	r6
 8028b18:	2800      	cmp	r0, #0
 8028b1a:	dc06      	bgt.n	8028b2a <__sflush_r+0xfe>
 8028b1c:	89a3      	ldrh	r3, [r4, #12]
 8028b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028b22:	81a3      	strh	r3, [r4, #12]
 8028b24:	f04f 30ff 	mov.w	r0, #4294967295
 8028b28:	e78e      	b.n	8028a48 <__sflush_r+0x1c>
 8028b2a:	4407      	add	r7, r0
 8028b2c:	eba8 0800 	sub.w	r8, r8, r0
 8028b30:	e7e9      	b.n	8028b06 <__sflush_r+0xda>
 8028b32:	bf00      	nop
 8028b34:	20400001 	.word	0x20400001

08028b38 <_fflush_r>:
 8028b38:	b538      	push	{r3, r4, r5, lr}
 8028b3a:	690b      	ldr	r3, [r1, #16]
 8028b3c:	4605      	mov	r5, r0
 8028b3e:	460c      	mov	r4, r1
 8028b40:	b1db      	cbz	r3, 8028b7a <_fflush_r+0x42>
 8028b42:	b118      	cbz	r0, 8028b4c <_fflush_r+0x14>
 8028b44:	6983      	ldr	r3, [r0, #24]
 8028b46:	b90b      	cbnz	r3, 8028b4c <_fflush_r+0x14>
 8028b48:	f000 f860 	bl	8028c0c <__sinit>
 8028b4c:	4b0c      	ldr	r3, [pc, #48]	; (8028b80 <_fflush_r+0x48>)
 8028b4e:	429c      	cmp	r4, r3
 8028b50:	d109      	bne.n	8028b66 <_fflush_r+0x2e>
 8028b52:	686c      	ldr	r4, [r5, #4]
 8028b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028b58:	b17b      	cbz	r3, 8028b7a <_fflush_r+0x42>
 8028b5a:	4621      	mov	r1, r4
 8028b5c:	4628      	mov	r0, r5
 8028b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b62:	f7ff bf63 	b.w	8028a2c <__sflush_r>
 8028b66:	4b07      	ldr	r3, [pc, #28]	; (8028b84 <_fflush_r+0x4c>)
 8028b68:	429c      	cmp	r4, r3
 8028b6a:	d101      	bne.n	8028b70 <_fflush_r+0x38>
 8028b6c:	68ac      	ldr	r4, [r5, #8]
 8028b6e:	e7f1      	b.n	8028b54 <_fflush_r+0x1c>
 8028b70:	4b05      	ldr	r3, [pc, #20]	; (8028b88 <_fflush_r+0x50>)
 8028b72:	429c      	cmp	r4, r3
 8028b74:	bf08      	it	eq
 8028b76:	68ec      	ldreq	r4, [r5, #12]
 8028b78:	e7ec      	b.n	8028b54 <_fflush_r+0x1c>
 8028b7a:	2000      	movs	r0, #0
 8028b7c:	bd38      	pop	{r3, r4, r5, pc}
 8028b7e:	bf00      	nop
 8028b80:	0802d9d4 	.word	0x0802d9d4
 8028b84:	0802d9f4 	.word	0x0802d9f4
 8028b88:	0802d9b4 	.word	0x0802d9b4

08028b8c <std>:
 8028b8c:	2300      	movs	r3, #0
 8028b8e:	b510      	push	{r4, lr}
 8028b90:	4604      	mov	r4, r0
 8028b92:	e9c0 3300 	strd	r3, r3, [r0]
 8028b96:	6083      	str	r3, [r0, #8]
 8028b98:	8181      	strh	r1, [r0, #12]
 8028b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8028b9c:	81c2      	strh	r2, [r0, #14]
 8028b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028ba2:	6183      	str	r3, [r0, #24]
 8028ba4:	4619      	mov	r1, r3
 8028ba6:	2208      	movs	r2, #8
 8028ba8:	305c      	adds	r0, #92	; 0x5c
 8028baa:	f7ff fa4e 	bl	802804a <memset>
 8028bae:	4b05      	ldr	r3, [pc, #20]	; (8028bc4 <std+0x38>)
 8028bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8028bb2:	4b05      	ldr	r3, [pc, #20]	; (8028bc8 <std+0x3c>)
 8028bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8028bb6:	4b05      	ldr	r3, [pc, #20]	; (8028bcc <std+0x40>)
 8028bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028bba:	4b05      	ldr	r3, [pc, #20]	; (8028bd0 <std+0x44>)
 8028bbc:	6224      	str	r4, [r4, #32]
 8028bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8028bc0:	bd10      	pop	{r4, pc}
 8028bc2:	bf00      	nop
 8028bc4:	08028ded 	.word	0x08028ded
 8028bc8:	08028e0f 	.word	0x08028e0f
 8028bcc:	08028e47 	.word	0x08028e47
 8028bd0:	08028e6b 	.word	0x08028e6b

08028bd4 <_cleanup_r>:
 8028bd4:	4901      	ldr	r1, [pc, #4]	; (8028bdc <_cleanup_r+0x8>)
 8028bd6:	f000 b885 	b.w	8028ce4 <_fwalk_reent>
 8028bda:	bf00      	nop
 8028bdc:	08028b39 	.word	0x08028b39

08028be0 <__sfmoreglue>:
 8028be0:	b570      	push	{r4, r5, r6, lr}
 8028be2:	1e4a      	subs	r2, r1, #1
 8028be4:	2568      	movs	r5, #104	; 0x68
 8028be6:	4355      	muls	r5, r2
 8028be8:	460e      	mov	r6, r1
 8028bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028bee:	f7ff fa83 	bl	80280f8 <_malloc_r>
 8028bf2:	4604      	mov	r4, r0
 8028bf4:	b140      	cbz	r0, 8028c08 <__sfmoreglue+0x28>
 8028bf6:	2100      	movs	r1, #0
 8028bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8028bfc:	300c      	adds	r0, #12
 8028bfe:	60a0      	str	r0, [r4, #8]
 8028c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028c04:	f7ff fa21 	bl	802804a <memset>
 8028c08:	4620      	mov	r0, r4
 8028c0a:	bd70      	pop	{r4, r5, r6, pc}

08028c0c <__sinit>:
 8028c0c:	6983      	ldr	r3, [r0, #24]
 8028c0e:	b510      	push	{r4, lr}
 8028c10:	4604      	mov	r4, r0
 8028c12:	bb33      	cbnz	r3, 8028c62 <__sinit+0x56>
 8028c14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8028c18:	6503      	str	r3, [r0, #80]	; 0x50
 8028c1a:	4b12      	ldr	r3, [pc, #72]	; (8028c64 <__sinit+0x58>)
 8028c1c:	4a12      	ldr	r2, [pc, #72]	; (8028c68 <__sinit+0x5c>)
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	6282      	str	r2, [r0, #40]	; 0x28
 8028c22:	4298      	cmp	r0, r3
 8028c24:	bf04      	itt	eq
 8028c26:	2301      	moveq	r3, #1
 8028c28:	6183      	streq	r3, [r0, #24]
 8028c2a:	f000 f81f 	bl	8028c6c <__sfp>
 8028c2e:	6060      	str	r0, [r4, #4]
 8028c30:	4620      	mov	r0, r4
 8028c32:	f000 f81b 	bl	8028c6c <__sfp>
 8028c36:	60a0      	str	r0, [r4, #8]
 8028c38:	4620      	mov	r0, r4
 8028c3a:	f000 f817 	bl	8028c6c <__sfp>
 8028c3e:	2200      	movs	r2, #0
 8028c40:	60e0      	str	r0, [r4, #12]
 8028c42:	2104      	movs	r1, #4
 8028c44:	6860      	ldr	r0, [r4, #4]
 8028c46:	f7ff ffa1 	bl	8028b8c <std>
 8028c4a:	2201      	movs	r2, #1
 8028c4c:	2109      	movs	r1, #9
 8028c4e:	68a0      	ldr	r0, [r4, #8]
 8028c50:	f7ff ff9c 	bl	8028b8c <std>
 8028c54:	2202      	movs	r2, #2
 8028c56:	2112      	movs	r1, #18
 8028c58:	68e0      	ldr	r0, [r4, #12]
 8028c5a:	f7ff ff97 	bl	8028b8c <std>
 8028c5e:	2301      	movs	r3, #1
 8028c60:	61a3      	str	r3, [r4, #24]
 8028c62:	bd10      	pop	{r4, pc}
 8028c64:	0802d978 	.word	0x0802d978
 8028c68:	08028bd5 	.word	0x08028bd5

08028c6c <__sfp>:
 8028c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028c6e:	4b1b      	ldr	r3, [pc, #108]	; (8028cdc <__sfp+0x70>)
 8028c70:	681e      	ldr	r6, [r3, #0]
 8028c72:	69b3      	ldr	r3, [r6, #24]
 8028c74:	4607      	mov	r7, r0
 8028c76:	b913      	cbnz	r3, 8028c7e <__sfp+0x12>
 8028c78:	4630      	mov	r0, r6
 8028c7a:	f7ff ffc7 	bl	8028c0c <__sinit>
 8028c7e:	3648      	adds	r6, #72	; 0x48
 8028c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028c84:	3b01      	subs	r3, #1
 8028c86:	d503      	bpl.n	8028c90 <__sfp+0x24>
 8028c88:	6833      	ldr	r3, [r6, #0]
 8028c8a:	b133      	cbz	r3, 8028c9a <__sfp+0x2e>
 8028c8c:	6836      	ldr	r6, [r6, #0]
 8028c8e:	e7f7      	b.n	8028c80 <__sfp+0x14>
 8028c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028c94:	b16d      	cbz	r5, 8028cb2 <__sfp+0x46>
 8028c96:	3468      	adds	r4, #104	; 0x68
 8028c98:	e7f4      	b.n	8028c84 <__sfp+0x18>
 8028c9a:	2104      	movs	r1, #4
 8028c9c:	4638      	mov	r0, r7
 8028c9e:	f7ff ff9f 	bl	8028be0 <__sfmoreglue>
 8028ca2:	6030      	str	r0, [r6, #0]
 8028ca4:	2800      	cmp	r0, #0
 8028ca6:	d1f1      	bne.n	8028c8c <__sfp+0x20>
 8028ca8:	230c      	movs	r3, #12
 8028caa:	603b      	str	r3, [r7, #0]
 8028cac:	4604      	mov	r4, r0
 8028cae:	4620      	mov	r0, r4
 8028cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028cb2:	4b0b      	ldr	r3, [pc, #44]	; (8028ce0 <__sfp+0x74>)
 8028cb4:	6665      	str	r5, [r4, #100]	; 0x64
 8028cb6:	e9c4 5500 	strd	r5, r5, [r4]
 8028cba:	60a5      	str	r5, [r4, #8]
 8028cbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8028cc0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8028cc4:	2208      	movs	r2, #8
 8028cc6:	4629      	mov	r1, r5
 8028cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8028ccc:	f7ff f9bd 	bl	802804a <memset>
 8028cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028cd8:	e7e9      	b.n	8028cae <__sfp+0x42>
 8028cda:	bf00      	nop
 8028cdc:	0802d978 	.word	0x0802d978
 8028ce0:	ffff0001 	.word	0xffff0001

08028ce4 <_fwalk_reent>:
 8028ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028ce8:	4680      	mov	r8, r0
 8028cea:	4689      	mov	r9, r1
 8028cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8028cf0:	2600      	movs	r6, #0
 8028cf2:	b914      	cbnz	r4, 8028cfa <_fwalk_reent+0x16>
 8028cf4:	4630      	mov	r0, r6
 8028cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028cfa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8028cfe:	3f01      	subs	r7, #1
 8028d00:	d501      	bpl.n	8028d06 <_fwalk_reent+0x22>
 8028d02:	6824      	ldr	r4, [r4, #0]
 8028d04:	e7f5      	b.n	8028cf2 <_fwalk_reent+0xe>
 8028d06:	89ab      	ldrh	r3, [r5, #12]
 8028d08:	2b01      	cmp	r3, #1
 8028d0a:	d907      	bls.n	8028d1c <_fwalk_reent+0x38>
 8028d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028d10:	3301      	adds	r3, #1
 8028d12:	d003      	beq.n	8028d1c <_fwalk_reent+0x38>
 8028d14:	4629      	mov	r1, r5
 8028d16:	4640      	mov	r0, r8
 8028d18:	47c8      	blx	r9
 8028d1a:	4306      	orrs	r6, r0
 8028d1c:	3568      	adds	r5, #104	; 0x68
 8028d1e:	e7ee      	b.n	8028cfe <_fwalk_reent+0x1a>

08028d20 <__swhatbuf_r>:
 8028d20:	b570      	push	{r4, r5, r6, lr}
 8028d22:	460e      	mov	r6, r1
 8028d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028d28:	2900      	cmp	r1, #0
 8028d2a:	b096      	sub	sp, #88	; 0x58
 8028d2c:	4614      	mov	r4, r2
 8028d2e:	461d      	mov	r5, r3
 8028d30:	da07      	bge.n	8028d42 <__swhatbuf_r+0x22>
 8028d32:	2300      	movs	r3, #0
 8028d34:	602b      	str	r3, [r5, #0]
 8028d36:	89b3      	ldrh	r3, [r6, #12]
 8028d38:	061a      	lsls	r2, r3, #24
 8028d3a:	d410      	bmi.n	8028d5e <__swhatbuf_r+0x3e>
 8028d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028d40:	e00e      	b.n	8028d60 <__swhatbuf_r+0x40>
 8028d42:	466a      	mov	r2, sp
 8028d44:	f000 f8b8 	bl	8028eb8 <_fstat_r>
 8028d48:	2800      	cmp	r0, #0
 8028d4a:	dbf2      	blt.n	8028d32 <__swhatbuf_r+0x12>
 8028d4c:	9a01      	ldr	r2, [sp, #4]
 8028d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8028d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8028d56:	425a      	negs	r2, r3
 8028d58:	415a      	adcs	r2, r3
 8028d5a:	602a      	str	r2, [r5, #0]
 8028d5c:	e7ee      	b.n	8028d3c <__swhatbuf_r+0x1c>
 8028d5e:	2340      	movs	r3, #64	; 0x40
 8028d60:	2000      	movs	r0, #0
 8028d62:	6023      	str	r3, [r4, #0]
 8028d64:	b016      	add	sp, #88	; 0x58
 8028d66:	bd70      	pop	{r4, r5, r6, pc}

08028d68 <__smakebuf_r>:
 8028d68:	898b      	ldrh	r3, [r1, #12]
 8028d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028d6c:	079d      	lsls	r5, r3, #30
 8028d6e:	4606      	mov	r6, r0
 8028d70:	460c      	mov	r4, r1
 8028d72:	d507      	bpl.n	8028d84 <__smakebuf_r+0x1c>
 8028d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028d78:	6023      	str	r3, [r4, #0]
 8028d7a:	6123      	str	r3, [r4, #16]
 8028d7c:	2301      	movs	r3, #1
 8028d7e:	6163      	str	r3, [r4, #20]
 8028d80:	b002      	add	sp, #8
 8028d82:	bd70      	pop	{r4, r5, r6, pc}
 8028d84:	ab01      	add	r3, sp, #4
 8028d86:	466a      	mov	r2, sp
 8028d88:	f7ff ffca 	bl	8028d20 <__swhatbuf_r>
 8028d8c:	9900      	ldr	r1, [sp, #0]
 8028d8e:	4605      	mov	r5, r0
 8028d90:	4630      	mov	r0, r6
 8028d92:	f7ff f9b1 	bl	80280f8 <_malloc_r>
 8028d96:	b948      	cbnz	r0, 8028dac <__smakebuf_r+0x44>
 8028d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028d9c:	059a      	lsls	r2, r3, #22
 8028d9e:	d4ef      	bmi.n	8028d80 <__smakebuf_r+0x18>
 8028da0:	f023 0303 	bic.w	r3, r3, #3
 8028da4:	f043 0302 	orr.w	r3, r3, #2
 8028da8:	81a3      	strh	r3, [r4, #12]
 8028daa:	e7e3      	b.n	8028d74 <__smakebuf_r+0xc>
 8028dac:	4b0d      	ldr	r3, [pc, #52]	; (8028de4 <__smakebuf_r+0x7c>)
 8028dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8028db0:	89a3      	ldrh	r3, [r4, #12]
 8028db2:	6020      	str	r0, [r4, #0]
 8028db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028db8:	81a3      	strh	r3, [r4, #12]
 8028dba:	9b00      	ldr	r3, [sp, #0]
 8028dbc:	6163      	str	r3, [r4, #20]
 8028dbe:	9b01      	ldr	r3, [sp, #4]
 8028dc0:	6120      	str	r0, [r4, #16]
 8028dc2:	b15b      	cbz	r3, 8028ddc <__smakebuf_r+0x74>
 8028dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028dc8:	4630      	mov	r0, r6
 8028dca:	f000 f887 	bl	8028edc <_isatty_r>
 8028dce:	b128      	cbz	r0, 8028ddc <__smakebuf_r+0x74>
 8028dd0:	89a3      	ldrh	r3, [r4, #12]
 8028dd2:	f023 0303 	bic.w	r3, r3, #3
 8028dd6:	f043 0301 	orr.w	r3, r3, #1
 8028dda:	81a3      	strh	r3, [r4, #12]
 8028ddc:	89a3      	ldrh	r3, [r4, #12]
 8028dde:	431d      	orrs	r5, r3
 8028de0:	81a5      	strh	r5, [r4, #12]
 8028de2:	e7cd      	b.n	8028d80 <__smakebuf_r+0x18>
 8028de4:	08028bd5 	.word	0x08028bd5

08028de8 <__malloc_lock>:
 8028de8:	4770      	bx	lr

08028dea <__malloc_unlock>:
 8028dea:	4770      	bx	lr

08028dec <__sread>:
 8028dec:	b510      	push	{r4, lr}
 8028dee:	460c      	mov	r4, r1
 8028df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028df4:	f000 f894 	bl	8028f20 <_read_r>
 8028df8:	2800      	cmp	r0, #0
 8028dfa:	bfab      	itete	ge
 8028dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8028e00:	181b      	addge	r3, r3, r0
 8028e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028e06:	bfac      	ite	ge
 8028e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8028e0a:	81a3      	strhlt	r3, [r4, #12]
 8028e0c:	bd10      	pop	{r4, pc}

08028e0e <__swrite>:
 8028e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e12:	461f      	mov	r7, r3
 8028e14:	898b      	ldrh	r3, [r1, #12]
 8028e16:	05db      	lsls	r3, r3, #23
 8028e18:	4605      	mov	r5, r0
 8028e1a:	460c      	mov	r4, r1
 8028e1c:	4616      	mov	r6, r2
 8028e1e:	d505      	bpl.n	8028e2c <__swrite+0x1e>
 8028e20:	2302      	movs	r3, #2
 8028e22:	2200      	movs	r2, #0
 8028e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028e28:	f000 f868 	bl	8028efc <_lseek_r>
 8028e2c:	89a3      	ldrh	r3, [r4, #12]
 8028e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028e36:	81a3      	strh	r3, [r4, #12]
 8028e38:	4632      	mov	r2, r6
 8028e3a:	463b      	mov	r3, r7
 8028e3c:	4628      	mov	r0, r5
 8028e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e42:	f000 b817 	b.w	8028e74 <_write_r>

08028e46 <__sseek>:
 8028e46:	b510      	push	{r4, lr}
 8028e48:	460c      	mov	r4, r1
 8028e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028e4e:	f000 f855 	bl	8028efc <_lseek_r>
 8028e52:	1c43      	adds	r3, r0, #1
 8028e54:	89a3      	ldrh	r3, [r4, #12]
 8028e56:	bf15      	itete	ne
 8028e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8028e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028e62:	81a3      	strheq	r3, [r4, #12]
 8028e64:	bf18      	it	ne
 8028e66:	81a3      	strhne	r3, [r4, #12]
 8028e68:	bd10      	pop	{r4, pc}

08028e6a <__sclose>:
 8028e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028e6e:	f000 b813 	b.w	8028e98 <_close_r>
	...

08028e74 <_write_r>:
 8028e74:	b538      	push	{r3, r4, r5, lr}
 8028e76:	4c07      	ldr	r4, [pc, #28]	; (8028e94 <_write_r+0x20>)
 8028e78:	4605      	mov	r5, r0
 8028e7a:	4608      	mov	r0, r1
 8028e7c:	4611      	mov	r1, r2
 8028e7e:	2200      	movs	r2, #0
 8028e80:	6022      	str	r2, [r4, #0]
 8028e82:	461a      	mov	r2, r3
 8028e84:	f7da fb05 	bl	8003492 <_write>
 8028e88:	1c43      	adds	r3, r0, #1
 8028e8a:	d102      	bne.n	8028e92 <_write_r+0x1e>
 8028e8c:	6823      	ldr	r3, [r4, #0]
 8028e8e:	b103      	cbz	r3, 8028e92 <_write_r+0x1e>
 8028e90:	602b      	str	r3, [r5, #0]
 8028e92:	bd38      	pop	{r3, r4, r5, pc}
 8028e94:	2000cd88 	.word	0x2000cd88

08028e98 <_close_r>:
 8028e98:	b538      	push	{r3, r4, r5, lr}
 8028e9a:	4c06      	ldr	r4, [pc, #24]	; (8028eb4 <_close_r+0x1c>)
 8028e9c:	2300      	movs	r3, #0
 8028e9e:	4605      	mov	r5, r0
 8028ea0:	4608      	mov	r0, r1
 8028ea2:	6023      	str	r3, [r4, #0]
 8028ea4:	f7da fb11 	bl	80034ca <_close>
 8028ea8:	1c43      	adds	r3, r0, #1
 8028eaa:	d102      	bne.n	8028eb2 <_close_r+0x1a>
 8028eac:	6823      	ldr	r3, [r4, #0]
 8028eae:	b103      	cbz	r3, 8028eb2 <_close_r+0x1a>
 8028eb0:	602b      	str	r3, [r5, #0]
 8028eb2:	bd38      	pop	{r3, r4, r5, pc}
 8028eb4:	2000cd88 	.word	0x2000cd88

08028eb8 <_fstat_r>:
 8028eb8:	b538      	push	{r3, r4, r5, lr}
 8028eba:	4c07      	ldr	r4, [pc, #28]	; (8028ed8 <_fstat_r+0x20>)
 8028ebc:	2300      	movs	r3, #0
 8028ebe:	4605      	mov	r5, r0
 8028ec0:	4608      	mov	r0, r1
 8028ec2:	4611      	mov	r1, r2
 8028ec4:	6023      	str	r3, [r4, #0]
 8028ec6:	f7da fb0c 	bl	80034e2 <_fstat>
 8028eca:	1c43      	adds	r3, r0, #1
 8028ecc:	d102      	bne.n	8028ed4 <_fstat_r+0x1c>
 8028ece:	6823      	ldr	r3, [r4, #0]
 8028ed0:	b103      	cbz	r3, 8028ed4 <_fstat_r+0x1c>
 8028ed2:	602b      	str	r3, [r5, #0]
 8028ed4:	bd38      	pop	{r3, r4, r5, pc}
 8028ed6:	bf00      	nop
 8028ed8:	2000cd88 	.word	0x2000cd88

08028edc <_isatty_r>:
 8028edc:	b538      	push	{r3, r4, r5, lr}
 8028ede:	4c06      	ldr	r4, [pc, #24]	; (8028ef8 <_isatty_r+0x1c>)
 8028ee0:	2300      	movs	r3, #0
 8028ee2:	4605      	mov	r5, r0
 8028ee4:	4608      	mov	r0, r1
 8028ee6:	6023      	str	r3, [r4, #0]
 8028ee8:	f7da fb0b 	bl	8003502 <_isatty>
 8028eec:	1c43      	adds	r3, r0, #1
 8028eee:	d102      	bne.n	8028ef6 <_isatty_r+0x1a>
 8028ef0:	6823      	ldr	r3, [r4, #0]
 8028ef2:	b103      	cbz	r3, 8028ef6 <_isatty_r+0x1a>
 8028ef4:	602b      	str	r3, [r5, #0]
 8028ef6:	bd38      	pop	{r3, r4, r5, pc}
 8028ef8:	2000cd88 	.word	0x2000cd88

08028efc <_lseek_r>:
 8028efc:	b538      	push	{r3, r4, r5, lr}
 8028efe:	4c07      	ldr	r4, [pc, #28]	; (8028f1c <_lseek_r+0x20>)
 8028f00:	4605      	mov	r5, r0
 8028f02:	4608      	mov	r0, r1
 8028f04:	4611      	mov	r1, r2
 8028f06:	2200      	movs	r2, #0
 8028f08:	6022      	str	r2, [r4, #0]
 8028f0a:	461a      	mov	r2, r3
 8028f0c:	f7da fb04 	bl	8003518 <_lseek>
 8028f10:	1c43      	adds	r3, r0, #1
 8028f12:	d102      	bne.n	8028f1a <_lseek_r+0x1e>
 8028f14:	6823      	ldr	r3, [r4, #0]
 8028f16:	b103      	cbz	r3, 8028f1a <_lseek_r+0x1e>
 8028f18:	602b      	str	r3, [r5, #0]
 8028f1a:	bd38      	pop	{r3, r4, r5, pc}
 8028f1c:	2000cd88 	.word	0x2000cd88

08028f20 <_read_r>:
 8028f20:	b538      	push	{r3, r4, r5, lr}
 8028f22:	4c07      	ldr	r4, [pc, #28]	; (8028f40 <_read_r+0x20>)
 8028f24:	4605      	mov	r5, r0
 8028f26:	4608      	mov	r0, r1
 8028f28:	4611      	mov	r1, r2
 8028f2a:	2200      	movs	r2, #0
 8028f2c:	6022      	str	r2, [r4, #0]
 8028f2e:	461a      	mov	r2, r3
 8028f30:	f7da fa92 	bl	8003458 <_read>
 8028f34:	1c43      	adds	r3, r0, #1
 8028f36:	d102      	bne.n	8028f3e <_read_r+0x1e>
 8028f38:	6823      	ldr	r3, [r4, #0]
 8028f3a:	b103      	cbz	r3, 8028f3e <_read_r+0x1e>
 8028f3c:	602b      	str	r3, [r5, #0]
 8028f3e:	bd38      	pop	{r3, r4, r5, pc}
 8028f40:	2000cd88 	.word	0x2000cd88

08028f44 <_init>:
 8028f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f46:	bf00      	nop
 8028f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028f4a:	bc08      	pop	{r3}
 8028f4c:	469e      	mov	lr, r3
 8028f4e:	4770      	bx	lr

08028f50 <_fini>:
 8028f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f52:	bf00      	nop
 8028f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028f56:	bc08      	pop	{r3}
 8028f58:	469e      	mov	lr, r3
 8028f5a:	4770      	bx	lr
