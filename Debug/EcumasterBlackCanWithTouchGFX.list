
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a82c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f5c  0802a9fc  0802a9fc  0003a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00004632  0802f958  0802f958  0003f958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000354f8  08033f8c  08033f8c  00043f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000047c  08069484  08069484  00079484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08069900  08069900  00080140  2**0
                  CONTENTS
  7 .ARM          00000008  08069900  08069900  00079900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08069908  08069908  00080140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08069908  08069908  00079908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806991c  0806991c  0007991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  20000000  08069924  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000cc9c  20000140  08069a64  00080140  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000cddc  08069a64  0008cddc  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006f8bd  00000000  00000000  00080170  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00011127  00000000  00000000  000efa2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005260  00000000  00000000  00100b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004ba0  00000000  00000000  00105db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003dd52  00000000  00000000  0010a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004cc18  00000000  00000000  001486aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00138d7a  00000000  00000000  001952c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002ce03c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00016498  00000000  00000000  002ce138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802a9e4 	.word	0x0802a9e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	0802a9e4 	.word	0x0802a9e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000015c 	.word	0x2000015c
 8000b3c:	200001b4 	.word	0x200001b4

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09c      	sub	sp, #112	; 0x70
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4b93      	ldr	r3, [pc, #588]	; (8000d98 <SecondTask+0x258>)
 8000b4a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b8e      	ldr	r3, [pc, #568]	; (8000d9c <SecondTask+0x25c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c fc5a 	bl	800d424 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00c f969 	bl	800ce48 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b8a      	ldr	r3, [pc, #552]	; (8000da0 <SecondTask+0x260>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 814c 	beq.w	8000e18 <SecondTask+0x2d8>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b88      	ldr	r3, [pc, #544]	; (8000da4 <SecondTask+0x264>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b86      	ldr	r3, [pc, #536]	; (8000da4 <SecondTask+0x264>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a83      	ldr	r2, [pc, #524]	; (8000da4 <SecondTask+0x264>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <SecondTask+0x268>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b81      	ldr	r3, [pc, #516]	; (8000da8 <SecondTask+0x268>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a7e      	ldr	r2, [pc, #504]	; (8000da8 <SecondTask+0x268>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b7e      	ldr	r3, [pc, #504]	; (8000dac <SecondTask+0x26c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <SecondTask+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a79      	ldr	r2, [pc, #484]	; (8000dac <SecondTask+0x26c>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <SecondTask+0x270>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a367      	add	r3, pc, #412	; (adr r3, 8000d70 <SecondTask+0x230>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b74      	ldr	r3, [pc, #464]	; (8000db4 <SecondTask+0x274>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <SecondTask+0x270>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a361      	add	r3, pc, #388	; (adr r3, 8000d78 <SecondTask+0x238>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a69      	ldr	r2, [pc, #420]	; (8000db0 <SecondTask+0x270>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <SecondTask+0x278>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a356      	add	r3, pc, #344	; (adr r3, 8000d70 <SecondTask+0x230>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <SecondTask+0x27c>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <SecondTask+0x278>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a352      	add	r3, pc, #328	; (adr r3, 8000d80 <SecondTask+0x240>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a5a      	ldr	r2, [pc, #360]	; (8000db8 <SecondTask+0x278>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <SecondTask+0x280>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <SecondTask+0x280>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a57      	ldr	r2, [pc, #348]	; (8000dc0 <SecondTask+0x280>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b57      	ldr	r3, [pc, #348]	; (8000dc4 <SecondTask+0x284>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <SecondTask+0x288>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <SecondTask+0x284>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a33f      	add	r3, pc, #252	; (adr r3, 8000d88 <SecondTask+0x248>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <SecondTask+0x284>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <SecondTask+0x28c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b48      	ldr	r3, [pc, #288]	; (8000dd0 <SecondTask+0x290>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a45      	ldr	r2, [pc, #276]	; (8000dcc <SecondTask+0x28c>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <SecondTask+0x290>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <SecondTask+0x290>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <SecondTask+0x290>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <SecondTask+0x294>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <SecondTask+0x294>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a3b      	ldr	r2, [pc, #236]	; (8000dd4 <SecondTask+0x294>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <SecondTask+0x294>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <SecondTask+0x298>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <SecondTask+0x298>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <SecondTask+0x29c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <SecondTask+0x29c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <SecondTask+0x29c>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <SecondTask+0x2a0>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db01      	blt.n	8000d32 <SecondTask+0x1f2>
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <SecondTask+0x2a4>)
 8000d30:	e010      	b.n	8000d54 <SecondTask+0x214>
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <SecondTask+0x2a0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc1e 	bl	8000578 <__aeabi_f2d>
 8000d3c:	a314      	add	r3, pc, #80	; (adr r3, 8000d90 <SecondTask+0x250>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fabb 	bl	80002bc <__adddf3>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fcf3 	bl	8000738 <__aeabi_d2f>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <SecondTask+0x2a0>)
 8000d56:	6013      	str	r3, [r2, #0]
			ing_ang = (ing_ang >= 20.0) ? 10.0: ing_ang + 0.6;
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <SecondTask+0x2a8>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	db3f      	blt.n	8000dec <SecondTask+0x2ac>
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <SecondTask+0x2a4>)
 8000d6e:	e04e      	b.n	8000e0e <SecondTask+0x2ce>
 8000d70:	66666666 	.word	0x66666666
 8000d74:	3ff66666 	.word	0x3ff66666
 8000d78:	9999999a 	.word	0x9999999a
 8000d7c:	3fa99999 	.word	0x3fa99999
 8000d80:	eb851eb8 	.word	0xeb851eb8
 8000d84:	3faeb851 	.word	0x3faeb851
 8000d88:	9999999a 	.word	0x9999999a
 8000d8c:	3fb99999 	.word	0x3fb99999
 8000d90:	33333333 	.word	0x33333333
 8000d94:	3fe33333 	.word	0x3fe33333
 8000d98:	0802a9fc 	.word	0x0802a9fc
 8000d9c:	200087c0 	.word	0x200087c0
 8000da0:	0802b458 	.word	0x0802b458
 8000da4:	20000004 	.word	0x20000004
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000010 	.word	0x20000010
 8000db4:	3f19999a 	.word	0x3f19999a
 8000db8:	20000014 	.word	0x20000014
 8000dbc:	3f266666 	.word	0x3f266666
 8000dc0:	200003c4 	.word	0x200003c4
 8000dc4:	200003c8 	.word	0x200003c8
 8000dc8:	3dcccccd 	.word	0x3dcccccd
 8000dcc:	200003cc 	.word	0x200003cc
 8000dd0:	200003d0 	.word	0x200003d0
 8000dd4:	200003d4 	.word	0x200003d4
 8000dd8:	200003d8 	.word	0x200003d8
 8000ddc:	200003dc 	.word	0x200003dc
 8000de0:	200003e0 	.word	0x200003e0
 8000de4:	41200000 	.word	0x41200000
 8000de8:	200003e4 	.word	0x200003e4
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <SecondTask+0x358>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fbc1 	bl	8000578 <__aeabi_f2d>
 8000df6:	a326      	add	r3, pc, #152	; (adr r3, 8000e90 <SecondTask+0x350>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fa5e 	bl	80002bc <__adddf3>
 8000e00:	4603      	mov	r3, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4618      	mov	r0, r3
 8000e06:	4621      	mov	r1, r4
 8000e08:	f7ff fc96 	bl	8000738 <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <SecondTask+0x358>)
 8000e10:	6013      	str	r3, [r2, #0]
			emu_errors = 0;
 8000e12:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <SecondTask+0x35c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v,
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <SecondTask+0x360>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <SecondTask+0x364>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <SecondTask+0x368>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SecondTask+0x36c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <SecondTask+0x370>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <SecondTask+0x374>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <SecondTask+0x378>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <SecondTask+0x37c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <SecondTask+0x380>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <SecondTask+0x384>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <SecondTask+0x388>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <SecondTask+0x38c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <SecondTask+0x390>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <SecondTask+0x358>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <SecondTask+0x35c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
		ing_ang, emu_errors};
	    xQueueSend(messageQ, &dispVals,0);
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <SecondTask+0x394>)
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	f107 010c 	add.w	r1, r7, #12
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f00c fad1 	bl	800d424 <xQueueGenericSend>
		osDelay(50);
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f00b ffe0 	bl	800ce48 <osDelay>
	{
 8000e88:	e675      	b.n	8000b76 <SecondTask+0x36>
 8000e8a:	bf00      	nop
 8000e8c:	f3af 8000 	nop.w
 8000e90:	33333333 	.word	0x33333333
 8000e94:	3fe33333 	.word	0x3fe33333
 8000e98:	200003e4 	.word	0x200003e4
 8000e9c:	200003e8 	.word	0x200003e8
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	20000014 	.word	0x20000014
 8000eb4:	200003c4 	.word	0x200003c4
 8000eb8:	200003c8 	.word	0x200003c8
 8000ebc:	200003cc 	.word	0x200003cc
 8000ec0:	200003d0 	.word	0x200003d0
 8000ec4:	200003d4 	.word	0x200003d4
 8000ec8:	200003d8 	.word	0x200003d8
 8000ecc:	200003dc 	.word	0x200003dc
 8000ed0:	200003e0 	.word	0x200003e0
 8000ed4:	200087bc 	.word	0x200087bc

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f002 fd22 	bl	8003926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f85f 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f001 f9f5 	bl	80022d4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000eea:	f000 f917 	bl	800111c <MX_ADC3_Init>
  MX_CRC_Init();
 8000eee:	f000 fb2d 	bl	800154c <MX_CRC_Init>
  MX_DCMI_Init();
 8000ef2:	f000 fb4d 	bl	8001590 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000ef6:	f000 fb7f 	bl	80015f8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000efa:	f001 f93f 	bl	800217c <MX_FMC_Init>
  MX_LTDC_Init();
 8000efe:	f000 fbad 	bl	800165c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000f02:	f000 fc2d 	bl	8001760 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000f06:	f000 fc57 	bl	80017b8 <MX_RTC_Init>
  MX_SAI2_Init();
 8000f0a:	f000 fcfd 	bl	8001908 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000f0e:	f000 fda3 	bl	8001a58 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000f12:	f000 fdc1 	bl	8001a98 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000f16:	f000 fdef 	bl	8001af8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fe2b 	bl	8001b74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f1e:	f000 fed5 	bl	8001ccc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f22:	f000 ff49 	bl	8001db8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000f26:	f000 ffbd 	bl	8001ea4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000f2a:	f001 f831 	bl	8001f90 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000f2e:	f001 f881 	bl	8002034 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000f32:	f001 f8c3 	bl	80020bc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f36:	f001 f8f1 	bl	800211c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000f3a:	f00b fc41 	bl	800c7c0 <MX_FATFS_Init>
  MX_CAN1_Init();
 8000f3e:	f000 f93f 	bl	80011c0 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8000f42:	f00f f8b3 	bl	80100ac <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <main+0xbc>)
 8000f48:	f107 041c 	add.w	r4, r7, #28
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00b ff25 	bl	800cdb0 <osThreadCreate>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <main+0xc0>)
 8000f6a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <main+0xc4>)
 8000f6e:	463c      	mov	r4, r7
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00b ff14 	bl	800cdb0 <osThreadCreate>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <main+0xc8>)
 8000f8c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8e:	f00b feec 	bl	800cd6a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0xba>
 8000f94:	0802aa30 	.word	0x0802aa30
 8000f98:	2000c8a4 	.word	0x2000c8a4
 8000f9c:	0802aa54 	.word	0x0802aa54
 8000fa0:	2000c38c 	.word	0x2000c38c

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0b4      	sub	sp, #208	; 0xd0
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f028 fd99 	bl	8029aea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2284      	movs	r2, #132	; 0x84
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f028 fd8a 	bl	8029aea <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd6:	f005 fea7 	bl	8006d28 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <SystemClock_Config+0x16c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <SystemClock_Config+0x16c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <SystemClock_Config+0x16c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff2:	4b48      	ldr	r3, [pc, #288]	; (8001114 <SystemClock_Config+0x170>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	; (8001114 <SystemClock_Config+0x170>)
 8000ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	4b45      	ldr	r3, [pc, #276]	; (8001114 <SystemClock_Config+0x170>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800100a:	2309      	movs	r3, #9
 800100c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800102c:	2319      	movs	r3, #25
 800102e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001032:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001040:	2309      	movs	r3, #9
 8001042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800104a:	4618      	mov	r0, r3
 800104c:	f005 ff8e 	bl	8006f6c <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001056:	f001 fb71 	bl	800273c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800105a:	f005 fe75 	bl	8006d48 <HAL_PWREx_EnableOverDrive>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001064:	f001 fb6a 	bl	800273c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800108a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800108e:	2106      	movs	r1, #6
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fa0f 	bl	80074b4 <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800109c:	f001 fb4e 	bl	800273c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <SystemClock_Config+0x174>)
 80010a2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80010b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80010ba:	2305      	movs	r3, #5
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80010ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80010da:	2300      	movs	r3, #0
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010de:	2300      	movs	r3, #0
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010e2:	2300      	movs	r3, #0
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80010e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fbdf 	bl	80078bc <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001104:	f001 fb1a 	bl	800273c <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	37d0      	adds	r7, #208	; 0xd0
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000
 8001118:	01b00868 	.word	0x01b00868

0800111c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <MX_ADC3_Init+0x9c>)
 8001132:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800113a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_ADC3_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_ADC3_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_ADC3_Init+0x98>)
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <MX_ADC3_Init+0xa0>)
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_ADC3_Init+0x98>)
 800116a:	2201      	movs	r2, #1
 800116c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_ADC3_Init+0x98>)
 8001178:	2201      	movs	r2, #1
 800117a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_ADC3_Init+0x98>)
 800117e:	f002 fc21 	bl	80039c4 <HAL_ADC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001188:	f001 fad8 	bl	800273c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800118c:	2304      	movs	r3, #4
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001190:	2301      	movs	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_ADC3_Init+0x98>)
 800119e:	f002 fc55 	bl	8003a4c <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80011a8:	f001 fac8 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000c4a8 	.word	0x2000c4a8
 80011b8:	40012200 	.word	0x40012200
 80011bc:	0f000001 	.word	0x0f000001

080011c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011c8:	4a30      	ldr	r2, [pc, #192]	; (800128c <MX_CAN1_Init+0xcc>)
 80011ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011ce:	2214      	movs	r2, #20
 80011d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80011e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_CAN1_Init+0xc8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_CAN1_Init+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001204:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_CAN1_Init+0xc8>)
 8001206:	2200      	movs	r2, #0
 8001208:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_CAN1_Init+0xc8>)
 800120c:	2200      	movs	r2, #0
 800120e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001210:	481d      	ldr	r0, [pc, #116]	; (8001288 <MX_CAN1_Init+0xc8>)
 8001212:	f002 fe5f 	bl	8003ed4 <HAL_CAN_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800121c:	f001 fa8e 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001240:	2301      	movs	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001244:	230e      	movs	r3, #14
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <MX_CAN1_Init+0xc8>)
 800124e:	f002 ff3d 	bl	80040cc <HAL_CAN_ConfigFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001258:	f001 fa70 	bl	800273c <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <MX_CAN1_Init+0xc8>)
 800125e:	f003 f815 	bl	800428c <HAL_CAN_Start>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001268:	f001 fa68 	bl	800273c <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800126c:	2102      	movs	r1, #2
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_CAN1_Init+0xc8>)
 8001270:	f003 f962 	bl	8004538 <HAL_CAN_ActivateNotification>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 800127a:	f001 fa5f 	bl	800273c <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000c87c 	.word	0x2000c87c
 800128c:	40006400 	.word	0x40006400

08001290 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001298:	4b97      	ldr	r3, [pc, #604]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800129a:	4a98      	ldr	r2, [pc, #608]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f003 f838 	bl	8004314 <HAL_CAN_GetRxMessage>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80012aa:	f001 fa47 	bl	800273c <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80012ae:	4b93      	ldr	r3, [pc, #588]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80012b6:	d145      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d141      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80012c0:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d13d      	bne.n	8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 80012c8:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	4b8a      	ldr	r3, [pc, #552]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b21b      	sxth	r3, r3
 80012da:	84fb      	strh	r3, [r7, #38]	; 0x26
	 uint8_t tps_in = RxData[2];
 80012dc:	4b86      	ldr	r3, [pc, #536]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t iat_in = RxData[3];
 80012e4:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012e6:	78db      	ldrb	r3, [r3, #3]
 80012e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 80012ec:	4b82      	ldr	r3, [pc, #520]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80012f4:	795b      	ldrb	r3, [r3, #5]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	847b      	strh	r3, [r7, #34]	; 0x22

	 rpm = (int)rpm_in;
 8001300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001302:	4a7f      	ldr	r2, [pc, #508]	; (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001304:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 8001306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 2a90 	vmov	r2, s15
 8001318:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 800131a:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 800131c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001320:	4a79      	ldr	r2, [pc, #484]	; (8001508 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001322:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8001324:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001330:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001342:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001344:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f240 6202 	movw	r2, #1538	; 0x602
 800134c:	4293      	cmp	r3, r2
 800134e:	d12d      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d129      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b08      	cmp	r3, #8
 800135e:	d125      	bne.n	80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 8001360:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001362:	78db      	ldrb	r3, [r3, #3]
 8001364:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 uint8_t oil_press_in = RxData[4];
 8001368:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	f887 3020 	strb.w	r3, [r7, #32]
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001372:	799b      	ldrb	r3, [r3, #6]
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001378:	79db      	ldrb	r3, [r3, #7]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	83fb      	strh	r3, [r7, #30]

	 oil_tmp = ((int)oil_tmp_in) * 1;
 8001384:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001388:	4a61      	ldr	r2, [pc, #388]	; (8001510 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 800138a:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 800138c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	4b5d      	ldr	r3, [pc, #372]	; (8001518 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 80013a6:	8bfb      	ldrh	r3, [r7, #30]
 80013a8:	4a5c      	ldr	r2, [pc, #368]	; (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80013aa:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f240 6203 	movw	r2, #1539	; 0x603
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d13f      	bne.n	8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 80013b8:	4b50      	ldr	r3, [pc, #320]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d13b      	bne.n	8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
 80013c0:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d137      	bne.n	8001438 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
  {
	 uint8_t ing_ang_in = RxData[0];
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	777b      	strb	r3, [r7, #29]
	 uint8_t lambda_in = RxData[2];
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	773b      	strb	r3, [r7, #28]
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	b21a      	sxth	r2, r3
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013dc:	795b      	ldrb	r3, [r3, #5]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	837b      	strh	r3, [r7, #26]
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013ea:	799b      	ldrb	r3, [r3, #6]
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80013f0:	79db      	ldrb	r3, [r3, #7]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	833b      	strh	r3, [r7, #24]

	 ing_ang = ((float) ing_ang_in) * 0.5f;
 80013fc:	7f7b      	ldrb	r3, [r7, #29]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	 lambda = ((float)lambda_in)*0.0078125f;
 8001414:	7f3b      	ldrb	r3, [r7, #28]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
 8001422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001426:	4b40      	ldr	r3, [pc, #256]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001428:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 800142c:	8b7b      	ldrh	r3, [r7, #26]
 800142e:	4a3f      	ldr	r2, [pc, #252]	; (800152c <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001430:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 8001432:	8b3b      	ldrh	r3, [r7, #24]
 8001434:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001436:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f240 6204 	movw	r2, #1540	; 0x604
 8001440:	4293      	cmp	r3, r2
 8001442:	d12c      	bne.n	800149e <HAL_CAN_RxFifo0MsgPendingCallback+0x20e>
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d128      	bne.n	800149e <HAL_CAN_RxFifo0MsgPendingCallback+0x20e>
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d124      	bne.n	800149e <HAL_CAN_RxFifo0MsgPendingCallback+0x20e>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800145c:	78db      	ldrb	r3, [r3, #3]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	82fb      	strh	r3, [r7, #22]
	 uint16_t emu_errors_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800146a:	791b      	ldrb	r3, [r3, #4]
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	82bb      	strh	r3, [r7, #20]
	 float battery_voltage = ((float)batt_in)*0.027f;
 800147c:	8afb      	ldrh	r3, [r7, #22]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001534 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	edc7 7a04 	vstr	s15, [r7, #16]
	 batt_v = battery_voltage;
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
	 emu_errors = (int) emu_errors_in;
 8001498:	8abb      	ldrh	r3, [r7, #20]
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800149c:	6013      	str	r3, [r2, #0]

  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80014a6:	d123      	bne.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11f      	bne.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d11b      	bne.n	80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	73fb      	strb	r3, [r7, #15]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	81bb      	strh	r3, [r7, #12]
  	 lambda_targ = ((float)lambda_targ_in) / 100;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014dc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001540 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80014ee:	6013      	str	r3, [r2, #0]
    }
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000c598 	.word	0x2000c598
 80014fc:	2000c254 	.word	0x2000c254
 8001500:	20000004 	.word	0x20000004
 8001504:	20000008 	.word	0x20000008
 8001508:	200003d0 	.word	0x200003d0
 800150c:	200003dc 	.word	0x200003dc
 8001510:	200003c4 	.word	0x200003c4
 8001514:	3d800000 	.word	0x3d800000
 8001518:	200003c8 	.word	0x200003c8
 800151c:	2000000c 	.word	0x2000000c
 8001520:	200003e4 	.word	0x200003e4
 8001524:	3c000000 	.word	0x3c000000
 8001528:	20000010 	.word	0x20000010
 800152c:	200003d4 	.word	0x200003d4
 8001530:	200003d8 	.word	0x200003d8
 8001534:	3cdd2f1b 	.word	0x3cdd2f1b
 8001538:	200003e0 	.word	0x200003e0
 800153c:	200003e8 	.word	0x200003e8
 8001540:	42c80000 	.word	0x42c80000
 8001544:	20000014 	.word	0x20000014
 8001548:	200003cc 	.word	0x200003cc

0800154c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_CRC_Init+0x3c>)
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <MX_CRC_Init+0x40>)
 8001554:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_CRC_Init+0x3c>)
 8001558:	2200      	movs	r2, #0
 800155a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_CRC_Init+0x3c>)
 800155e:	2200      	movs	r2, #0
 8001560:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_CRC_Init+0x3c>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_CRC_Init+0x3c>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_CRC_Init+0x3c>)
 8001570:	2201      	movs	r2, #1
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_CRC_Init+0x3c>)
 8001576:	f003 fb41 	bl	8004bfc <HAL_CRC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001580:	f001 f8dc 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000c400 	.word	0x2000c400
 800158c:	40023000 	.word	0x40023000

08001590 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_DCMI_Init+0x60>)
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <MX_DCMI_Init+0x64>)
 8001598:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_DCMI_Init+0x60>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_DCMI_Init+0x60>)
 80015de:	f003 fbf7 	bl	8004dd0 <HAL_DCMI_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f001 f8a8 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000c3b0 	.word	0x2000c3b0
 80015f4:	50050000 	.word	0x50050000

080015f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_DMA2D_Init+0x5c>)
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <MX_DMA2D_Init+0x60>)
 8001600:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_DMA2D_Init+0x5c>)
 800162e:	f003 fce3 	bl	8004ff8 <HAL_DMA2D_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001638:	f001 f880 	bl	800273c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800163c:	2101      	movs	r1, #1
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_DMA2D_Init+0x5c>)
 8001640:	f003 ffa4 	bl	800558c <HAL_DMA2D_ConfigLayer>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800164a:	f001 f877 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000c6fc 	.word	0x2000c6fc
 8001658:	4002b000 	.word	0x4002b000

0800165c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2234      	movs	r2, #52	; 0x34
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f028 fa3e 	bl	8029aea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001670:	4a3a      	ldr	r2, [pc, #232]	; (800175c <MX_LTDC_Init+0x100>)
 8001672:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_LTDC_Init+0xfc>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_LTDC_Init+0xfc>)
 800168e:	2228      	movs	r2, #40	; 0x28
 8001690:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001694:	2209      	movs	r2, #9
 8001696:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_LTDC_Init+0xfc>)
 800169a:	2235      	movs	r2, #53	; 0x35
 800169c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016a0:	220b      	movs	r2, #11
 80016a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016a6:	f240 2215 	movw	r2, #533	; 0x215
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016ae:	f240 121b 	movw	r2, #283	; 0x11b
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016b6:	f240 2235 	movw	r2, #565	; 0x235
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016be:	f240 121d 	movw	r2, #285	; 0x11d
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_LTDC_Init+0xfc>)
 80016de:	f004 ff8b 	bl	80065f8 <HAL_LTDC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80016e8:	f001 f828 	bl	800273c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80016f0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016f4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80016fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016fe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001704:	23ff      	movs	r3, #255	; 0xff
 8001706:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001712:	2305      	movs	r3, #5
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001716:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800171c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001722:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_LTDC_Init+0xfc>)
 8001742:	f005 f8e1 	bl	8006908 <HAL_LTDC_ConfigLayer>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800174c:	f000 fff6 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000c4f0 	.word	0x2000c4f0
 800175c:	40016800 	.word	0x40016800

08001760 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <MX_QUADSPI_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001772:	2201      	movs	r2, #1
 8001774:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 800177e:	2201      	movs	r2, #1
 8001780:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_QUADSPI_Init+0x50>)
 800179c:	f005 fb24 	bl	8006de8 <HAL_QSPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80017a6:	f000 ffc9 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000c664 	.word	0x2000c664
 80017b4:	a0001000 	.word	0xa0001000

080017b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b092      	sub	sp, #72	; 0x48
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80017d4:	463b      	mov	r3, r7
 80017d6:	222c      	movs	r2, #44	; 0x2c
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f028 f985 	bl	8029aea <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <MX_RTC_Init+0x148>)
 80017e2:	4a48      	ldr	r2, [pc, #288]	; (8001904 <MX_RTC_Init+0x14c>)
 80017e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <MX_RTC_Init+0x148>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <MX_RTC_Init+0x148>)
 80017ee:	227f      	movs	r2, #127	; 0x7f
 80017f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <MX_RTC_Init+0x148>)
 80017f4:	22ff      	movs	r2, #255	; 0xff
 80017f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f8:	4b41      	ldr	r3, [pc, #260]	; (8001900 <MX_RTC_Init+0x148>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017fe:	4b40      	ldr	r3, [pc, #256]	; (8001900 <MX_RTC_Init+0x148>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <MX_RTC_Init+0x148>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800180a:	483d      	ldr	r0, [pc, #244]	; (8001900 <MX_RTC_Init+0x148>)
 800180c:	f006 fd78 	bl	8008300 <HAL_RTC_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001816:	f000 ff91 	bl	800273c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800182c:	2300      	movs	r3, #0
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001838:	2201      	movs	r2, #1
 800183a:	4619      	mov	r1, r3
 800183c:	4830      	ldr	r0, [pc, #192]	; (8001900 <MX_RTC_Init+0x148>)
 800183e:	f006 fddb 	bl	80083f8 <HAL_RTC_SetTime>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001848:	f000 ff78 	bl	800273c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001868:	2201      	movs	r2, #1
 800186a:	4619      	mov	r1, r3
 800186c:	4824      	ldr	r0, [pc, #144]	; (8001900 <MX_RTC_Init+0x148>)
 800186e:	f006 fe81 	bl	8008574 <HAL_RTC_SetDate>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001878:	f000 ff60 	bl	800273c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800187c:	2300      	movs	r3, #0
 800187e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001880:	2300      	movs	r3, #0
 8001882:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001884:	2300      	movs	r3, #0
 8001886:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80018a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	2201      	movs	r2, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_RTC_Init+0x148>)
 80018b4:	f006 ff06 	bl	80086c4 <HAL_RTC_SetAlarm>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80018be:	f000 ff3d 	bl	800273c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 80018c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	2201      	movs	r2, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	480a      	ldr	r0, [pc, #40]	; (8001900 <MX_RTC_Init+0x148>)
 80018d6:	f006 fef5 	bl	80086c4 <HAL_RTC_SetAlarm>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 80018e0:	f000 ff2c 	bl	800273c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80018e4:	2202      	movs	r2, #2
 80018e6:	2100      	movs	r1, #0
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_RTC_Init+0x148>)
 80018ea:	f007 f875 	bl	80089d8 <HAL_RTCEx_SetTimeStamp>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 80018f4:	f000 ff22 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3748      	adds	r7, #72	; 0x48
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000c390 	.word	0x2000c390
 8001904:	40002800 	.word	0x40002800

08001908 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800190e:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <MX_SAI2_Init+0x140>)
 8001910:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001918:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800191e:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800192a:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001930:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001936:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800194a:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <MX_SAI2_Init+0x144>)
 800194c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001968:	2208      	movs	r2, #8
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800196e:	2201      	movs	r2, #1
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001974:	2200      	movs	r2, #0
 8001976:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800197a:	2200      	movs	r2, #0
 800197c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001980:	2200      	movs	r2, #0
 8001982:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001986:	2200      	movs	r2, #0
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800198c:	2200      	movs	r2, #0
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001992:	2201      	movs	r2, #1
 8001994:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <MX_SAI2_Init+0x13c>)
 8001998:	2200      	movs	r2, #0
 800199a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800199c:	4829      	ldr	r0, [pc, #164]	; (8001a44 <MX_SAI2_Init+0x13c>)
 800199e:	f007 f871 	bl	8008a84 <HAL_SAI_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80019a8:	f000 fec8 	bl	800273c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <MX_SAI2_Init+0x14c>)
 80019b0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_SAI2_Init+0x148>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_SAI2_Init+0x148>)
 8001a32:	f007 f827 	bl	8008a84 <HAL_SAI_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001a3c:	f000 fe7e 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000c308 	.word	0x2000c308
 8001a48:	40015c04 	.word	0x40015c04
 8001a4c:	0002ee00 	.word	0x0002ee00
 8001a50:	2000c5e0 	.word	0x2000c5e0
 8001a54:	40015c24 	.word	0x40015c24

08001a58 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <MX_SDMMC1_SD_Init+0x3c>)
 8001a60:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	2000c424 	.word	0x2000c424
 8001a94:	40012c00 	.word	0x40012c00

08001a98 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001a9e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aa2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001abc:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_SPDIFRX_Init+0x5c>)
 8001ae2:	f008 fa63 	bl	8009fac <HAL_SPDIFRX_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001aec:	f000 fe26 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000c6b0 	.word	0x2000c6b0

08001af8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <MX_SPI2_Init+0x78>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b46:	2207      	movs	r2, #7
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b52:	2208      	movs	r2, #8
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_SPI2_Init+0x74>)
 8001b58:	f008 fa84 	bl	800a064 <HAL_SPI_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b62:	f000 fdeb 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000c2a4 	.word	0x2000c2a4
 8001b70:	40003800 	.word	0x40003800

08001b74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b09a      	sub	sp, #104	; 0x68
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	222c      	movs	r2, #44	; 0x2c
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f027 ff9b 	bl	8029aea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bb6:	4a44      	ldr	r2, [pc, #272]	; (8001cc8 <MX_TIM1_Init+0x154>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bde:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001be0:	f008 fad2 	bl	800a188 <HAL_TIM_Base_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bea:	f000 fda7 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bfc:	f008 fd7c 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c06:	f000 fd99 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c0a:	482e      	ldr	r0, [pc, #184]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c0c:	f008 fb12 	bl	800a234 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c16:	f000 fd91 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c2e:	f009 f9dd 	bl	800afec <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001c38:	f000 fd80 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3c:	2360      	movs	r3, #96	; 0x60
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c62:	f008 fc31 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001c6c:	f000 fd66 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001ca6:	f009 fa2f 	bl	800b108 <HAL_TIMEx_ConfigBreakDeadTime>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001cb0:	f000 fd44 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001cb6:	f001 fa3b 	bl	8003130 <HAL_TIM_MspPostInit>

}
 8001cba:	bf00      	nop
 8001cbc:	3768      	adds	r7, #104	; 0x68
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000c83c 	.word	0x2000c83c
 8001cc8:	40010000 	.word	0x40010000

08001ccc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	; 0x38
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d18:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d24:	4823      	ldr	r0, [pc, #140]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d26:	f008 fa2f 	bl	800a188 <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d30:	f000 fd04 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481c      	ldr	r0, [pc, #112]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d42:	f008 fcd9 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d4c:	f000 fcf6 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d50:	4818      	ldr	r0, [pc, #96]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d52:	f008 fa6f 	bl	800a234 <HAL_TIM_PWM_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d5c:	f000 fcee 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4811      	ldr	r0, [pc, #68]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d70:	f009 f93c 	bl	800afec <HAL_TIMEx_MasterConfigSynchronization>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d7a:	f000 fcdf 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7e:	2360      	movs	r3, #96	; 0x60
 8001d80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001d96:	f008 fb97 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001da0:	f000 fccc 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <MX_TIM2_Init+0xe8>)
 8001da6:	f001 f9c3 	bl	8003130 <HAL_TIM_MspPostInit>

}
 8001daa:	bf00      	nop
 8001dac:	3738      	adds	r7, #56	; 0x38
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000c8e8 	.word	0x2000c8e8

08001db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001dec:	4a2c      	ldr	r2, [pc, #176]	; (8001ea0 <MX_TIM3_Init+0xe8>)
 8001dee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e0e:	4823      	ldr	r0, [pc, #140]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e10:	f008 f9ba 	bl	800a188 <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e1a:	f000 fc8f 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	481c      	ldr	r0, [pc, #112]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e2c:	f008 fc64 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e36:	f000 fc81 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e3a:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e3c:	f008 f9fa 	bl	800a234 <HAL_TIM_PWM_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e46:	f000 fc79 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	4810      	ldr	r0, [pc, #64]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e5a:	f009 f8c7 	bl	800afec <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e64:	f000 fc6a 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e68:	2360      	movs	r3, #96	; 0x60
 8001e6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e80:	f008 fb22 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e8a:	f000 fc57 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e8e:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM3_Init+0xe4>)
 8001e90:	f001 f94e 	bl	8003130 <HAL_TIM_MspPostInit>

}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	; 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000c1d4 	.word	0x2000c1d4
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	615a      	str	r2, [r3, #20]
 8001ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <MX_TIM5_Init+0xe8>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001efc:	f008 f944 	bl	800a188 <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001f06:	f000 fc19 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f14:	4619      	mov	r1, r3
 8001f16:	481c      	ldr	r0, [pc, #112]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001f18:	f008 fbee 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001f22:	f000 fc0b 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001f28:	f008 f984 	bl	800a234 <HAL_TIM_PWM_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001f32:	f000 fc03 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001f46:	f009 f851 	bl	800afec <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f50:	f000 fbf4 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f54:	2360      	movs	r3, #96	; 0x60
 8001f56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	220c      	movs	r2, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001f6c:	f008 faac 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001f76:	f000 fbe1 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <MX_TIM5_Init+0xe4>)
 8001f7c:	f001 f8d8 	bl	8003130 <HAL_TIM_MspPostInit>

}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000c8a8 	.word	0x2000c8a8
 8001f8c:	40000c00 	.word	0x40000c00

08001f90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <MX_TIM8_Init+0xa0>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001fd8:	4814      	ldr	r0, [pc, #80]	; (800202c <MX_TIM8_Init+0x9c>)
 8001fda:	f008 f8d5 	bl	800a188 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001fe4:	f000 fbaa 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <MX_TIM8_Init+0x9c>)
 8001ff6:	f008 fb7f 	bl	800a6f8 <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002000:	f000 fb9c 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_TIM8_Init+0x9c>)
 8002016:	f008 ffe9 	bl	800afec <HAL_TIMEx_MasterConfigSynchronization>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002020:	f000 fb8c 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002024:	bf00      	nop
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000c214 	.word	0x2000c214
 8002030:	40010400 	.word	0x40010400

08002034 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
 8002048:	615a      	str	r2, [r3, #20]
 800204a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_TIM12_Init+0x80>)
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <MX_TIM12_Init+0x84>)
 8002050:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <MX_TIM12_Init+0x80>)
 8002054:	2200      	movs	r2, #0
 8002056:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <MX_TIM12_Init+0x80>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <MX_TIM12_Init+0x80>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <MX_TIM12_Init+0x80>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_TIM12_Init+0x80>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <MX_TIM12_Init+0x80>)
 8002072:	f008 f8df 	bl	800a234 <HAL_TIM_PWM_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800207c:	f000 fb5e 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002080:	2360      	movs	r3, #96	; 0x60
 8002082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM12_Init+0x80>)
 8002098:	f008 fa16 	bl	800a4c8 <HAL_TIM_PWM_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80020a2:	f000 fb4b 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80020a6:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM12_Init+0x80>)
 80020a8:	f001 f842 	bl	8003130 <HAL_TIM_MspPostInit>

}
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000c5a0 	.word	0x2000c5a0
 80020b8:	40001800 	.word	0x40001800

080020bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <MX_USART1_UART_Init+0x5c>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_USART1_UART_Init+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_USART1_UART_Init+0x58>)
 8002100:	f009 f89e 	bl	800b240 <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800210a:	f000 fb17 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000c7bc 	.word	0x2000c7bc
 8002118:	40011000 	.word	0x40011000

0800211c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <MX_USART6_UART_Init+0x5c>)
 8002124:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800212c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART6_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART6_UART_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART6_UART_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART6_UART_Init+0x58>)
 8002160:	f009 f86e 	bl	800b240 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800216a:	f000 fae7 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000c73c 	.word	0x2000c73c
 8002178:	40011400 	.word	0x40011400

0800217c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <MX_FMC_Init+0x14c>)
 8002196:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <MX_FMC_Init+0x150>)
 8002198:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <MX_FMC_Init+0x14c>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021ae:	2210      	movs	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021b4:	2240      	movs	r2, #64	; 0x40
 80021b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021ba:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021be:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021c0:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021cc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80021dc:	2302      	movs	r3, #2
 80021de:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80021e0:	2307      	movs	r3, #7
 80021e2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80021e8:	2307      	movs	r3, #7
 80021ea:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80021ec:	2303      	movs	r3, #3
 80021ee:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <MX_FMC_Init+0x14c>)
 80021fe:	f007 fe55 	bl	8009eac <HAL_SDRAM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002208:	f000 fa98 	bl	800273c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <MX_FMC_Init+0x154>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <MX_FMC_Init+0x154>)
 8002218:	2210      	movs	r2, #16
 800221a:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <MX_FMC_Init+0x154>)
 800221e:	2201      	movs	r2, #1
 8002220:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002222:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <MX_FMC_Init+0x154>)
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222c:	4928      	ldr	r1, [pc, #160]	; (80022d0 <MX_FMC_Init+0x154>)
 800222e:	4826      	ldr	r0, [pc, #152]	; (80022c8 <MX_FMC_Init+0x14c>)
 8002230:	f007 fe70 	bl	8009f14 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002234:	2001      	movs	r0, #1
 8002236:	f001 fba3 	bl	8003980 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <MX_FMC_Init+0x154>)
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <MX_FMC_Init+0x154>)
 8002242:	2210      	movs	r2, #16
 8002244:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MX_FMC_Init+0x154>)
 8002248:	2201      	movs	r2, #1
 800224a:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_FMC_Init+0x154>)
 800224e:	2200      	movs	r2, #0
 8002250:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002256:	491e      	ldr	r1, [pc, #120]	; (80022d0 <MX_FMC_Init+0x154>)
 8002258:	481b      	ldr	r0, [pc, #108]	; (80022c8 <MX_FMC_Init+0x14c>)
 800225a:	f007 fe5b 	bl	8009f14 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_FMC_Init+0x154>)
 8002260:	2203      	movs	r2, #3
 8002262:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_FMC_Init+0x154>)
 8002266:	2210      	movs	r2, #16
 8002268:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_FMC_Init+0x154>)
 800226c:	2208      	movs	r2, #8
 800226e:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_FMC_Init+0x154>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227a:	4915      	ldr	r1, [pc, #84]	; (80022d0 <MX_FMC_Init+0x154>)
 800227c:	4812      	ldr	r0, [pc, #72]	; (80022c8 <MX_FMC_Init+0x14c>)
 800227e:	f007 fe49 	bl	8009f14 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8002282:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002286:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_FMC_Init+0x154>)
 800228a:	2204      	movs	r2, #4
 800228c:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_FMC_Init+0x154>)
 8002290:	2210      	movs	r2, #16
 8002292:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_FMC_Init+0x154>)
 8002296:	2201      	movs	r2, #1
 8002298:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <MX_FMC_Init+0x154>)
 800229e:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80022a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a4:	490a      	ldr	r1, [pc, #40]	; (80022d0 <MX_FMC_Init+0x154>)
 80022a6:	4808      	ldr	r0, [pc, #32]	; (80022c8 <MX_FMC_Init+0x14c>)
 80022a8:	f007 fe34 	bl	8009f14 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80022ac:	f240 712b 	movw	r1, #1835	; 0x72b
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_FMC_Init+0x14c>)
 80022b2:	f007 fe5a 	bl	8009f6a <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80022b6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80022ba:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022be:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000c270 	.word	0x2000c270
 80022cc:	a0000140 	.word	0xa0000140
 80022d0:	200003b4 	.word	0x200003b4

080022d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ea:	4baf      	ldr	r3, [pc, #700]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4aae      	ldr	r2, [pc, #696]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4bac      	ldr	r3, [pc, #688]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002302:	4ba9      	ldr	r3, [pc, #676]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4aa8      	ldr	r2, [pc, #672]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4ba6      	ldr	r3, [pc, #664]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	4ba3      	ldr	r3, [pc, #652]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4aa2      	ldr	r2, [pc, #648]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002332:	4b9d      	ldr	r3, [pc, #628]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a9c      	ldr	r2, [pc, #624]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002338:	f043 0308 	orr.w	r3, r3, #8
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b9a      	ldr	r3, [pc, #616]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b94      	ldr	r3, [pc, #592]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b8e      	ldr	r3, [pc, #568]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a84      	ldr	r2, [pc, #528]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b82      	ldr	r3, [pc, #520]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023aa:	4b7f      	ldr	r3, [pc, #508]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a7e      	ldr	r2, [pc, #504]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c2:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a78      	ldr	r2, [pc, #480]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023c8:	f043 0320 	orr.w	r3, r3, #32
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a72      	ldr	r2, [pc, #456]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <MX_GPIO_Init+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023f2:	2201      	movs	r2, #1
 80023f4:	2120      	movs	r1, #32
 80023f6:	486d      	ldr	r0, [pc, #436]	; (80025ac <MX_GPIO_Init+0x2d8>)
 80023f8:	f003 fbb8 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	210c      	movs	r1, #12
 8002400:	486b      	ldr	r0, [pc, #428]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002402:	f003 fbb3 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002406:	2201      	movs	r2, #1
 8002408:	2108      	movs	r1, #8
 800240a:	486a      	ldr	r0, [pc, #424]	; (80025b4 <MX_GPIO_Init+0x2e0>)
 800240c:	f003 fbae 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002416:	4866      	ldr	r0, [pc, #408]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002418:	f003 fba8 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002422:	4865      	ldr	r0, [pc, #404]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 8002424:	f003 fba2 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	21c8      	movs	r1, #200	; 0xc8
 800242c:	4863      	ldr	r0, [pc, #396]	; (80025bc <MX_GPIO_Init+0x2e8>)
 800242e:	f003 fb9d 	bl	8005b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002432:	2308      	movs	r3, #8
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002436:	2300      	movs	r3, #0
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002442:	4619      	mov	r1, r3
 8002444:	485e      	ldr	r0, [pc, #376]	; (80025c0 <MX_GPIO_Init+0x2ec>)
 8002446:	f003 f9cf 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800244a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800245c:	230b      	movs	r3, #11
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4855      	ldr	r0, [pc, #340]	; (80025bc <MX_GPIO_Init+0x2e8>)
 8002468:	f003 f9be 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800246c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800247e:	230a      	movs	r3, #10
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002486:	4619      	mov	r1, r3
 8002488:	484e      	ldr	r0, [pc, #312]	; (80025c4 <MX_GPIO_Init+0x2f0>)
 800248a:	f003 f9ad 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800248e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a0:	4619      	mov	r1, r3
 80024a2:	4849      	ldr	r0, [pc, #292]	; (80025c8 <MX_GPIO_Init+0x2f4>)
 80024a4:	f003 f9a0 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80024a8:	2340      	movs	r3, #64	; 0x40
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <MX_GPIO_Init+0x2f8>)
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b8:	4619      	mov	r1, r3
 80024ba:	483c      	ldr	r0, [pc, #240]	; (80025ac <MX_GPIO_Init+0x2d8>)
 80024bc:	f003 f994 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80024c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024d2:	230a      	movs	r3, #10
 80024d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	483c      	ldr	r0, [pc, #240]	; (80025d0 <MX_GPIO_Init+0x2fc>)
 80024de:	f003 f983 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80024e2:	2320      	movs	r3, #32
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	482c      	ldr	r0, [pc, #176]	; (80025ac <MX_GPIO_Init+0x2d8>)
 80024fa:	f003 f975 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80024fe:	f241 030c 	movw	r3, #4108	; 0x100c
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002504:	2301      	movs	r3, #1
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002514:	4619      	mov	r1, r3
 8002516:	4826      	ldr	r0, [pc, #152]	; (80025b0 <MX_GPIO_Init+0x2dc>)
 8002518:	f003 f966 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800251c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252e:	4619      	mov	r1, r3
 8002530:	4828      	ldr	r0, [pc, #160]	; (80025d4 <MX_GPIO_Init+0x300>)
 8002532:	f003 f959 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002536:	2308      	movs	r3, #8
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4819      	ldr	r0, [pc, #100]	; (80025b4 <MX_GPIO_Init+0x2e0>)
 800254e:	f003 f94b 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002552:	2310      	movs	r3, #16
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002562:	4619      	mov	r1, r3
 8002564:	4811      	ldr	r0, [pc, #68]	; (80025ac <MX_GPIO_Init+0x2d8>)
 8002566:	f003 f93f 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800256a:	f248 0304 	movw	r3, #32772	; 0x8004
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	480e      	ldr	r0, [pc, #56]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 8002580:	f003 f932 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258a:	2301      	movs	r3, #1
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	4619      	mov	r1, r3
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <MX_GPIO_Init+0x2e4>)
 800259e:	f003 f923 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a6:	e017      	b.n	80025d8 <MX_GPIO_Init+0x304>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40022800 	.word	0x40022800
 80025b8:	40021c00 	.word	0x40021c00
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40022400 	.word	0x40022400
 80025cc:	10120000 	.word	0x10120000
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020800 	.word	0x40020800
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <MX_GPIO_Init+0x418>)
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80025e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e6:	4619      	mov	r1, r3
 80025e8:	4841      	ldr	r0, [pc, #260]	; (80026f0 <MX_GPIO_Init+0x41c>)
 80025ea:	f003 f8fd 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80025ee:	2310      	movs	r3, #16
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025fe:	230a      	movs	r3, #10
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002606:	4619      	mov	r1, r3
 8002608:	483a      	ldr	r0, [pc, #232]	; (80026f4 <MX_GPIO_Init+0x420>)
 800260a:	f003 f8ed 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800260e:	23c8      	movs	r3, #200	; 0xc8
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002622:	4619      	mov	r1, r3
 8002624:	4834      	ldr	r0, [pc, #208]	; (80026f8 <MX_GPIO_Init+0x424>)
 8002626:	f003 f8df 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800262a:	2305      	movs	r3, #5
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800263a:	230a      	movs	r3, #10
 800263c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	482d      	ldr	r0, [pc, #180]	; (80026fc <MX_GPIO_Init+0x428>)
 8002646:	f003 f8cf 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800264a:	2332      	movs	r3, #50	; 0x32
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800265a:	230b      	movs	r3, #11
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002662:	4619      	mov	r1, r3
 8002664:	4825      	ldr	r0, [pc, #148]	; (80026fc <MX_GPIO_Init+0x428>)
 8002666:	f003 f8bf 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800266a:	2304      	movs	r3, #4
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	481e      	ldr	r0, [pc, #120]	; (80026f8 <MX_GPIO_Init+0x424>)
 800267e:	f003 f8b3 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002682:	2386      	movs	r3, #134	; 0x86
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002692:	230b      	movs	r3, #11
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269a:	4619      	mov	r1, r3
 800269c:	4818      	ldr	r0, [pc, #96]	; (8002700 <MX_GPIO_Init+0x42c>)
 800269e:	f003 f8a3 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80026a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a8:	2312      	movs	r3, #18
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026b4:	2304      	movs	r3, #4
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <MX_GPIO_Init+0x420>)
 80026c0:	f003 f892 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80026c4:	2328      	movs	r3, #40	; 0x28
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	2303      	movs	r3, #3
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026d4:	230a      	movs	r3, #10
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026dc:	4619      	mov	r1, r3
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <MX_GPIO_Init+0x42c>)
 80026e0:	f003 f882 	bl	80057e8 <HAL_GPIO_Init>

}
 80026e4:	bf00      	nop
 80026e6:	3740      	adds	r7, #64	; 0x40
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	10120000 	.word	0x10120000
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021c00 	.word	0x40021c00
 80026f8:	40021800 	.word	0x40021800
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020000 	.word	0x40020000

08002704 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 800270c:	f00d fcd4 	bl	80100b8 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8002710:	2001      	movs	r0, #1
 8002712:	f00a fb99 	bl	800ce48 <osDelay>
 8002716:	e7fb      	b.n	8002710 <StartDefaultTask+0xc>

08002718 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800272a:	f001 f909 	bl	8003940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40001000 	.word	0x40001000

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_MspInit+0x4c>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_MspInit+0x4c>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_MspInit+0x4c>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	210f      	movs	r1, #15
 8002786:	f06f 0001 	mvn.w	r0, #1
 800278a:	f002 f9ff 	bl	8004b8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_ADC_MspInit+0xa4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d13c      	bne.n	8002838 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027dc:	f043 0320 	orr.w	r3, r3, #32
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_ADC_MspInit+0xa8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002806:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800280a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280c:	2303      	movs	r3, #3
 800280e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	480b      	ldr	r0, [pc, #44]	; (8002848 <HAL_ADC_MspInit+0xac>)
 800281c:	f002 ffe4 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002820:	2301      	movs	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002824:	2303      	movs	r3, #3
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4806      	ldr	r0, [pc, #24]	; (800284c <HAL_ADC_MspInit+0xb0>)
 8002834:	f002 ffd8 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002838:	bf00      	nop
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40012200 	.word	0x40012200
 8002844:	40023800 	.word	0x40023800
 8002848:	40021400 	.word	0x40021400
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_CAN_MspInit+0x8c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d130      	bne.n	80028d4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 8002878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_CAN_MspInit+0x90>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80028b4:	2309      	movs	r3, #9
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4619      	mov	r1, r3
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_CAN_MspInit+0x94>)
 80028c0:	f002 ff92 	bl	80057e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2105      	movs	r1, #5
 80028c8:	2014      	movs	r0, #20
 80028ca:	f002 f95f 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80028ce:	2014      	movs	r0, #20
 80028d0:	f002 f978 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40006400 	.word	0x40006400
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_CRC_MspInit+0x38>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10b      	bne.n	8002912 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_CRC_MspInit+0x3c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <HAL_CRC_MspInit+0x3c>)
 8002900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_CRC_MspInit+0x3c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023000 	.word	0x40023000
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08e      	sub	sp, #56	; 0x38
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <HAL_DCMI_MspInit+0x160>)
 8002946:	4293      	cmp	r3, r2
 8002948:	f040 809a 	bne.w	8002a80 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	4a4e      	ldr	r2, [pc, #312]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6353      	str	r3, [r2, #52]	; 0x34
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002964:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a48      	ldr	r2, [pc, #288]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800296a:	f043 0310 	orr.w	r3, r3, #16
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800297c:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a42      	ldr	r2, [pc, #264]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 8002982:	f043 0308 	orr.w	r3, r3, #8
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 800299a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ac:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b6:	6313      	str	r3, [r2, #48]	; 0x30
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_DCMI_MspInit+0x164>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80029dc:	2360      	movs	r3, #96	; 0x60
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029ec:	230d      	movs	r3, #13
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	4619      	mov	r1, r3
 80029f6:	4826      	ldr	r0, [pc, #152]	; (8002a90 <HAL_DCMI_MspInit+0x168>)
 80029f8:	f002 fef6 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80029fc:	2308      	movs	r3, #8
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a0c:	230d      	movs	r3, #13
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	481f      	ldr	r0, [pc, #124]	; (8002a94 <HAL_DCMI_MspInit+0x16c>)
 8002a18:	f002 fee6 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a2e:	230d      	movs	r3, #13
 8002a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4619      	mov	r1, r3
 8002a38:	4817      	ldr	r0, [pc, #92]	; (8002a98 <HAL_DCMI_MspInit+0x170>)
 8002a3a:	f002 fed5 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002a3e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a50:	230d      	movs	r3, #13
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4810      	ldr	r0, [pc, #64]	; (8002a9c <HAL_DCMI_MspInit+0x174>)
 8002a5c:	f002 fec4 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a60:	2350      	movs	r3, #80	; 0x50
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a70:	230d      	movs	r3, #13
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <HAL_DCMI_MspInit+0x178>)
 8002a7c:	f002 feb4 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	3738      	adds	r7, #56	; 0x38
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	50050000 	.word	0x50050000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40020000 	.word	0x40020000

08002aa4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <HAL_DMA2D_MspInit+0x44>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d113      	bne.n	8002ade <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_DMA2D_MspInit+0x48>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_DMA2D_MspInit+0x48>)
 8002abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_DMA2D_MspInit+0x48>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	205a      	movs	r0, #90	; 0x5a
 8002ad4:	f002 f85a 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002ad8:	205a      	movs	r0, #90	; 0x5a
 8002ada:	f002 f873 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	4002b000 	.word	0x4002b000
 8002aec:	40023800 	.word	0x40023800

08002af0 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_DMA2D_MspDeInit+0x2c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_DMA2D_MspDeInit+0x30>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <HAL_DMA2D_MspDeInit+0x30>)
 8002b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002b0e:	205a      	movs	r0, #90	; 0x5a
 8002b10:	f002 f866 	bl	8004be0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	4002b000 	.word	0x4002b000
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_LTDC_MspInit+0x174>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f040 80a3 	bne.w	8002c8e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b48:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	4a53      	ldr	r2, [pc, #332]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b52:	6453      	str	r3, [r2, #68]	; 0x44
 8002b54:	4b51      	ldr	r3, [pc, #324]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b60:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b78:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a47      	ldr	r2, [pc, #284]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b90:	4b42      	ldr	r3, [pc, #264]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_LTDC_MspInit+0x178>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002bd8:	2310      	movs	r3, #16
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be8:	230e      	movs	r3, #14
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	482b      	ldr	r0, [pc, #172]	; (8002ca0 <HAL_LTDC_MspInit+0x17c>)
 8002bf4:	f002 fdf8 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002bf8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c12:	4619      	mov	r1, r3
 8002c14:	4823      	ldr	r0, [pc, #140]	; (8002ca4 <HAL_LTDC_MspInit+0x180>)
 8002c16:	f002 fde7 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002c1a:	23f7      	movs	r3, #247	; 0xf7
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <HAL_LTDC_MspInit+0x184>)
 8002c36:	f002 fdd7 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c4c:	2309      	movs	r3, #9
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4815      	ldr	r0, [pc, #84]	; (8002cac <HAL_LTDC_MspInit+0x188>)
 8002c58:	f002 fdc6 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002c5c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c6e:	230e      	movs	r3, #14
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c76:	4619      	mov	r1, r3
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <HAL_LTDC_MspInit+0x18c>)
 8002c7a:	f002 fdb5 	bl	80057e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2105      	movs	r1, #5
 8002c82:	2058      	movs	r0, #88	; 0x58
 8002c84:	f001 ff82 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c88:	2058      	movs	r0, #88	; 0x58
 8002c8a:	f001 ff9b 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c8e:	bf00      	nop
 8002c90:	3738      	adds	r7, #56	; 0x38
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40016800 	.word	0x40016800
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40022400 	.word	0x40022400
 8002ca8:	40022800 	.word	0x40022800
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a3b      	ldr	r2, [pc, #236]	; (8002dc0 <HAL_QSPI_MspInit+0x10c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d170      	bne.n	8002db8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_QSPI_MspInit+0x110>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d36:	2304      	movs	r3, #4
 8002d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d46:	2309      	movs	r3, #9
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 031c 	add.w	r3, r7, #28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	481d      	ldr	r0, [pc, #116]	; (8002dc8 <HAL_QSPI_MspInit+0x114>)
 8002d52:	f002 fd49 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d66:	230a      	movs	r3, #10
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4816      	ldr	r0, [pc, #88]	; (8002dcc <HAL_QSPI_MspInit+0x118>)
 8002d72:	f002 fd39 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d76:	2304      	movs	r3, #4
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002d86:	2309      	movs	r3, #9
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	f107 031c 	add.w	r3, r7, #28
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480e      	ldr	r0, [pc, #56]	; (8002dcc <HAL_QSPI_MspInit+0x118>)
 8002d92:	f002 fd29 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002d96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002da8:	2309      	movs	r3, #9
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4807      	ldr	r0, [pc, #28]	; (8002dd0 <HAL_QSPI_MspInit+0x11c>)
 8002db4:	f002 fd18 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	3730      	adds	r7, #48	; 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	a0001000 	.word	0xa0001000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40020c00 	.word	0x40020c00

08002dd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_RTC_MspInit+0x2c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d105      	bne.n	8002df2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_RTC_MspInit+0x30>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <HAL_RTC_MspInit+0x30>)
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40002800 	.word	0x40002800
 8002e04:	40023800 	.word	0x40023800

08002e08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a25      	ldr	r2, [pc, #148]	; (8002ebc <HAL_SD_MspInit+0xb4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d144      	bne.n	8002eb4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_SD_MspInit+0xb8>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002e72:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e84:	230c      	movs	r3, #12
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <HAL_SD_MspInit+0xbc>)
 8002e90:	f002 fcaa 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002e94:	2304      	movs	r3, #4
 8002e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	; (8002ec8 <HAL_SD_MspInit+0xc0>)
 8002eb0:	f002 fc9a 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00

08002ecc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002eec:	d127      	bne.n	8002f3e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a0f      	ldr	r2, [pc, #60]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f0c:	f043 0308 	orr.w	r3, r3, #8
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002f2e:	2308      	movs	r3, #8
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <HAL_SPDIFRX_MspInit+0x80>)
 8002f3a:	f002 fc55 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40020c00 	.word	0x40020c00

08002f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <HAL_SPI_MspInit+0xb4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d144      	bne.n	8002ffc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f72:	4b25      	ldr	r3, [pc, #148]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_SPI_MspInit+0xb8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fca:	2305      	movs	r3, #5
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <HAL_SPI_MspInit+0xbc>)
 8002fd6:	f002 fc07 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002fda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fec:	2305      	movs	r3, #5
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_SPI_MspInit+0xc0>)
 8002ff8:	f002 fbf6 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40003800 	.word	0x40003800
 8003008:	40023800 	.word	0x40023800
 800300c:	40022000 	.word	0x40022000
 8003010:	40020400 	.word	0x40020400

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2e      	ldr	r2, [pc, #184]	; (80030dc <HAL_TIM_Base_MspInit+0xc8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003026:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800303e:	e046      	b.n	80030ce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d10c      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
}
 8003062:	e034      	b.n	80030ce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_TIM_Base_MspInit+0xd0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697b      	ldr	r3, [r7, #20]
}
 8003086:	e022      	b.n	80030ce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_TIM_Base_MspInit+0xd4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d10c      	bne.n	80030ac <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
}
 80030aa:	e010      	b.n	80030ce <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <HAL_TIM_Base_MspInit+0xd8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10b      	bne.n	80030ce <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_TIM_Base_MspInit+0xcc>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40010400 	.word	0x40010400

080030f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_TIM_PWM_MspInit+0x38>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10b      	bne.n	800311a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_PWM_MspInit+0x3c>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_TIM_PWM_MspInit+0x3c>)
 8003108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_TIM_PWM_MspInit+0x3c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40001800 	.word	0x40001800
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	; 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_TIM_MspPostInit+0x178>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d11d      	bne.n	800318e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a55      	ldr	r2, [pc, #340]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800317c:	2301      	movs	r3, #1
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	484a      	ldr	r0, [pc, #296]	; (80032b0 <HAL_TIM_MspPostInit+0x180>)
 8003188:	f002 fb2e 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800318c:	e087      	b.n	800329e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d11d      	bne.n	80031d4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80031b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031c2:	2301      	movs	r3, #1
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	4838      	ldr	r0, [pc, #224]	; (80032b0 <HAL_TIM_MspPostInit+0x180>)
 80031ce:	f002 fb0b 	bl	80057e8 <HAL_GPIO_Init>
}
 80031d2:	e064      	b.n	800329e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a36      	ldr	r2, [pc, #216]	; (80032b4 <HAL_TIM_MspPostInit+0x184>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11c      	bne.n	8003218 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a32      	ldr	r2, [pc, #200]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80031f6:	2310      	movs	r3, #16
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003206:	2302      	movs	r3, #2
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4829      	ldr	r0, [pc, #164]	; (80032b8 <HAL_TIM_MspPostInit+0x188>)
 8003212:	f002 fae9 	bl	80057e8 <HAL_GPIO_Init>
}
 8003216:	e042      	b.n	800329e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_TIM_MspPostInit+0x18c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d11c      	bne.n	800325c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800323a:	2301      	movs	r3, #1
 800323c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800324a:	2302      	movs	r3, #2
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4619      	mov	r1, r3
 8003254:	481a      	ldr	r0, [pc, #104]	; (80032c0 <HAL_TIM_MspPostInit+0x190>)
 8003256:	f002 fac7 	bl	80057e8 <HAL_GPIO_Init>
}
 800325a:	e020      	b.n	800329e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <HAL_TIM_MspPostInit+0x194>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d11b      	bne.n	800329e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_TIM_MspPostInit+0x17c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800327e:	2340      	movs	r3, #64	; 0x40
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800328e:	2309      	movs	r3, #9
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <HAL_TIM_MspPostInit+0x198>)
 800329a:	f002 faa5 	bl	80057e8 <HAL_GPIO_Init>
}
 800329e:	bf00      	nop
 80032a0:	3730      	adds	r7, #48	; 0x30
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40001800 	.word	0x40001800
 80032c8:	40021c00 	.word	0x40021c00

080032cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	; 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a3c      	ldr	r2, [pc, #240]	; (80033dc <HAL_UART_MspInit+0x110>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d145      	bne.n	800337a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <HAL_UART_MspInit+0x114>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <HAL_UART_MspInit+0x114>)
 80032f4:	f043 0310 	orr.w	r3, r3, #16
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_UART_MspInit+0x114>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a35      	ldr	r2, [pc, #212]	; (80033e0 <HAL_UART_MspInit+0x114>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_UART_MspInit+0x114>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003346:	2307      	movs	r3, #7
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	4619      	mov	r1, r3
 8003350:	4824      	ldr	r0, [pc, #144]	; (80033e4 <HAL_UART_MspInit+0x118>)
 8003352:	f002 fa49 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800335a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003368:	2307      	movs	r3, #7
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	4619      	mov	r1, r3
 8003372:	481d      	ldr	r0, [pc, #116]	; (80033e8 <HAL_UART_MspInit+0x11c>)
 8003374:	f002 fa38 	bl	80057e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003378:	e02c      	b.n	80033d4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_UART_MspInit+0x120>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d127      	bne.n	80033d4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x114>)
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	6453      	str	r3, [r2, #68]	; 0x44
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_UART_MspInit+0x114>)
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_UART_MspInit+0x114>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <HAL_UART_MspInit+0x114>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6313      	str	r3, [r2, #48]	; 0x30
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_UART_MspInit+0x114>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80033b4:	23c0      	movs	r3, #192	; 0xc0
 80033b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033c4:	2308      	movs	r3, #8
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 031c 	add.w	r3, r7, #28
 80033cc:	4619      	mov	r1, r3
 80033ce:	4808      	ldr	r0, [pc, #32]	; (80033f0 <HAL_UART_MspInit+0x124>)
 80033d0:	f002 fa0a 	bl	80057e8 <HAL_GPIO_Init>
}
 80033d4:	bf00      	nop
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40011400 	.word	0x40011400
 80033f0:	40020800 	.word	0x40020800

080033f4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_FMC_MspInit+0x100>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d16d      	bne.n	80034ec <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003410:	4b38      	ldr	r3, [pc, #224]	; (80034f4 <HAL_FMC_MspInit+0x100>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_FMC_MspInit+0x104>)
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <HAL_FMC_MspInit+0x104>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6393      	str	r3, [r2, #56]	; 0x38
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_FMC_MspInit+0x104>)
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800342e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003432:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343c:	2303      	movs	r3, #3
 800343e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003440:	230c      	movs	r3, #12
 8003442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	4619      	mov	r1, r3
 8003448:	482c      	ldr	r0, [pc, #176]	; (80034fc <HAL_FMC_MspInit+0x108>)
 800344a:	f002 f9cd 	bl	80057e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800344e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003452:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003460:	230c      	movs	r3, #12
 8003462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4825      	ldr	r0, [pc, #148]	; (8003500 <HAL_FMC_MspInit+0x10c>)
 800346a:	f002 f9bd 	bl	80057e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800346e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003472:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347c:	2303      	movs	r3, #3
 800347e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003480:	230c      	movs	r3, #12
 8003482:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	4619      	mov	r1, r3
 8003488:	481e      	ldr	r0, [pc, #120]	; (8003504 <HAL_FMC_MspInit+0x110>)
 800348a:	f002 f9ad 	bl	80057e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800348e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003492:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a0:	230c      	movs	r3, #12
 80034a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4817      	ldr	r0, [pc, #92]	; (8003508 <HAL_FMC_MspInit+0x114>)
 80034aa:	f002 f99d 	bl	80057e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80034ae:	2328      	movs	r3, #40	; 0x28
 80034b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034be:	230c      	movs	r3, #12
 80034c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4811      	ldr	r0, [pc, #68]	; (800350c <HAL_FMC_MspInit+0x118>)
 80034c8:	f002 f98e 	bl	80057e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80034cc:	2308      	movs	r3, #8
 80034ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034dc:	230c      	movs	r3, #12
 80034de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	480a      	ldr	r0, [pc, #40]	; (8003510 <HAL_FMC_MspInit+0x11c>)
 80034e6:	f002 f97f 	bl	80057e8 <HAL_GPIO_Init>
 80034ea:	e000      	b.n	80034ee <HAL_FMC_MspInit+0xfa>
    return;
 80034ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200003ec 	.word	0x200003ec
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40021000 	.word	0x40021000
 8003500:	40021800 	.word	0x40021800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021400 	.word	0x40021400
 800350c:	40021c00 	.word	0x40021c00
 8003510:	40020800 	.word	0x40020800

08003514 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800351c:	f7ff ff6a 	bl	80033f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <HAL_SAI_MspInit+0xbc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d124      	bne.n	8003584 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800353a:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003542:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 8003548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 8003562:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003564:	23f0      	movs	r3, #240	; 0xf0
 8003566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003574:	230a      	movs	r3, #10
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	4619      	mov	r1, r3
 800357e:	481c      	ldr	r0, [pc, #112]	; (80035f0 <HAL_SAI_MspInit+0xc8>)
 8003580:	f002 f932 	bl	80057e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_SAI_MspInit+0xcc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d125      	bne.n	80035da <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a14      	ldr	r2, [pc, #80]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 800359c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_SAI_MspInit+0xc4>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_SAI_MspInit+0xc0>)
 80035b6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80035b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035ca:	230a      	movs	r3, #10
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4808      	ldr	r0, [pc, #32]	; (80035f8 <HAL_SAI_MspInit+0xd0>)
 80035d6:	f002 f907 	bl	80057e8 <HAL_GPIO_Init>

    }
}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40015c04 	.word	0x40015c04
 80035e8:	200003f0 	.word	0x200003f0
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40015c24 	.word	0x40015c24
 80035f8:	40021800 	.word	0x40021800

080035fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800360c:	2200      	movs	r2, #0
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	2036      	movs	r0, #54	; 0x36
 8003612:	f001 fabb 	bl	8004b8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003616:	2036      	movs	r0, #54	; 0x36
 8003618:	f001 fad4 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800361c:	4b1f      	ldr	r3, [pc, #124]	; (800369c <HAL_InitTick+0xa0>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_InitTick+0xa0>)
 8003622:	f043 0310 	orr.w	r3, r3, #16
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_InitTick+0xa0>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003634:	f107 0210 	add.w	r2, r7, #16
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f004 f90a 	bl	8007858 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003644:	f004 f8e0 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 8003648:	4603      	mov	r3, r0
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_InitTick+0xa4>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	3b01      	subs	r3, #1
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_InitTick+0xa8>)
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <HAL_InitTick+0xac>)
 8003660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_InitTick+0xa8>)
 8003664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003668:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_InitTick+0xa8>)
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_InitTick+0xa8>)
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_InitTick+0xa8>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800367c:	4809      	ldr	r0, [pc, #36]	; (80036a4 <HAL_InitTick+0xa8>)
 800367e:	f006 fd83 	bl	800a188 <HAL_TIM_Base_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d104      	bne.n	8003692 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003688:	4806      	ldr	r0, [pc, #24]	; (80036a4 <HAL_InitTick+0xa8>)
 800368a:	f006 fda9 	bl	800a1e0 <HAL_TIM_Base_Start_IT>
 800368e:	4603      	mov	r3, r0
 8003690:	e000      	b.n	8003694 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	3730      	adds	r7, #48	; 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	431bde83 	.word	0x431bde83
 80036a4:	2000c928 	.word	0x2000c928
 80036a8:	40001000 	.word	0x40001000

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036be:	e7fe      	b.n	80036be <HardFault_Handler+0x4>

080036c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <MemManage_Handler+0x4>

080036c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ca:	e7fe      	b.n	80036ca <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	e7fe      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <CAN1_RX0_IRQHandler+0x10>)
 80036e6:	f000 ff4d 	bl	8004584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000c87c 	.word	0x2000c87c

080036f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <TIM6_DAC_IRQHandler+0x10>)
 80036fa:	f006 fdc6 	bl	800a28a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000c928 	.word	0x2000c928

08003708 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <LTDC_IRQHandler+0x10>)
 800370e:	f003 f843 	bl	8006798 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000c4f0 	.word	0x2000c4f0

0800371c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <DMA2D_IRQHandler+0x10>)
 8003722:	f001 fe22 	bl	800536a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000c6fc 	.word	0x2000c6fc

08003730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
	return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_kill>:

int _kill(int pid, int sig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800374a:	f026 f977 	bl	8029a3c <__errno>
 800374e:	4602      	mov	r2, r0
 8003750:	2316      	movs	r3, #22
 8003752:	6013      	str	r3, [r2, #0]
	return -1;
 8003754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_exit>:

void _exit (int status)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003768:	f04f 31ff 	mov.w	r1, #4294967295
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffe7 	bl	8003740 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003772:	e7fe      	b.n	8003772 <_exit+0x12>

08003774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e00a      	b.n	800379c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003786:	f3af 8000 	nop.w
 800378a:	4601      	mov	r1, r0
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	60ba      	str	r2, [r7, #8]
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dbf0      	blt.n	8003786 <_read+0x12>
	}

return len;
 80037a4:	687b      	ldr	r3, [r7, #4]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e009      	b.n	80037d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	60ba      	str	r2, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	dbf1      	blt.n	80037c0 <_write+0x12>
	}
	return len;
 80037dc:	687b      	ldr	r3, [r7, #4]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <_close>:

int _close(int file)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
	return -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800380e:	605a      	str	r2, [r3, #4]
	return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_isatty>:

int _isatty(int file)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
	return 1;
 8003826:	2301      	movs	r3, #1
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
	return 0;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <_sbrk+0x50>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x16>
		heap_end = &end;
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <_sbrk+0x50>)
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <_sbrk+0x54>)
 8003864:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <_sbrk+0x50>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <_sbrk+0x50>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4413      	add	r3, r2
 8003874:	466a      	mov	r2, sp
 8003876:	4293      	cmp	r3, r2
 8003878:	d907      	bls.n	800388a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800387a:	f026 f8df 	bl	8029a3c <__errno>
 800387e:	4602      	mov	r2, r0
 8003880:	230c      	movs	r3, #12
 8003882:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	e006      	b.n	8003898 <_sbrk+0x48>
	}

	heap_end += incr;
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <_sbrk+0x50>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <_sbrk+0x50>)
 8003894:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200003f4 	.word	0x200003f4
 80038a4:	2000cde0 	.word	0x2000cde0

080038a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <SystemInit+0x28>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <SystemInit+0x28>)
 80038b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SystemInit+0x28>)
 80038be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038c2:	609a      	str	r2, [r3, #8]
#endif
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038da:	e003      	b.n	80038e4 <LoopCopyDataInit>

080038dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038e2:	3104      	adds	r1, #4

080038e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038e4:	480b      	ldr	r0, [pc, #44]	; (8003914 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038ec:	d3f6      	bcc.n	80038dc <CopyDataInit>
  ldr  r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038f0:	e002      	b.n	80038f8 <LoopFillZerobss>

080038f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038f4:	f842 3b04 	str.w	r3, [r2], #4

080038f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038fc:	d3f9      	bcc.n	80038f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038fe:	f7ff ffd3 	bl	80038a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f026 f8b3 	bl	8029a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7fd fae7 	bl	8000ed8 <main>
  bx  lr    
 800390a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800390c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003910:	08069924 	.word	0x08069924
  ldr  r0, =_sdata
 8003914:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003918:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 800391c:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8003920:	2000cddc 	.word	0x2000cddc

08003924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC_IRQHandler>

08003926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392a:	2003      	movs	r0, #3
 800392c:	f001 f923 	bl	8004b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003930:	2000      	movs	r0, #0
 8003932:	f7ff fe63 	bl	80035fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003936:	f7fe ff09 	bl	800274c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_IncTick+0x20>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x24>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_IncTick+0x24>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000020 	.word	0x20000020
 8003964:	2000c968 	.word	0x2000c968

08003968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return uwTick;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_GetTick+0x14>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000c968 	.word	0x2000c968

08003980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003988:	f7ff ffee 	bl	8003968 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d005      	beq.n	80039a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_Delay+0x40>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039a6:	bf00      	nop
 80039a8:	f7ff ffde 	bl	8003968 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d8f7      	bhi.n	80039a8 <HAL_Delay+0x28>
  {
  }
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000020 	.word	0x20000020

080039c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e031      	b.n	8003a3e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe feda 	bl	800279c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_ADC_Init+0x84>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f964 	bl	8003ce0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a2e:	e001      	b.n	8003a34 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	ffffeefd 	.word	0xffffeefd

08003a4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x1c>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e12a      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x272>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b09      	cmp	r3, #9
 8003a76:	d93a      	bls.n	8003aee <HAL_ADC_ConfigChannel+0xa2>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a80:	d035      	beq.n	8003aee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68d9      	ldr	r1, [r3, #12]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	3b1e      	subs	r3, #30
 8003a98:	2207      	movs	r2, #7
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a87      	ldr	r2, [pc, #540]	; (8003ccc <HAL_ADC_ConfigChannel+0x280>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	061a      	lsls	r2, r3, #24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ac6:	e035      	b.n	8003b34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68d9      	ldr	r1, [r3, #12]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4403      	add	r3, r0
 8003ae0:	3b1e      	subs	r3, #30
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aec:	e022      	b.n	8003b34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6919      	ldr	r1, [r3, #16]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	2207      	movs	r2, #7
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	400a      	ands	r2, r1
 8003b10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6919      	ldr	r1, [r3, #16]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	4603      	mov	r3, r0
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4403      	add	r3, r0
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d824      	bhi.n	8003b86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3b05      	subs	r3, #5
 8003b4e:	221f      	movs	r2, #31
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43da      	mvns	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	3b05      	subs	r3, #5
 8003b78:	fa00 f203 	lsl.w	r2, r0, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34
 8003b84:	e04c      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3b23      	subs	r3, #35	; 0x23
 8003ba0:	221f      	movs	r2, #31
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	400a      	ands	r2, r1
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3b23      	subs	r3, #35	; 0x23
 8003bca:	fa00 f203 	lsl.w	r2, r0, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd6:	e023      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	3b41      	subs	r3, #65	; 0x41
 8003bea:	221f      	movs	r2, #31
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	3b41      	subs	r3, #65	; 0x41
 8003c14:	fa00 f203 	lsl.w	r2, r0, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <HAL_ADC_ConfigChannel+0x284>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10a      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1f4>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c3e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_ADC_ConfigChannel+0x284>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d109      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x212>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d105      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a1f      	ldr	r2, [pc, #124]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <HAL_ADC_ConfigChannel+0x284>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d125      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x268>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_ADC_ConfigChannel+0x280>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x22e>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b11      	cmp	r3, #17
 8003c78:	d11c      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <HAL_ADC_ConfigChannel+0x288>)
 8003c80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_ADC_ConfigChannel+0x280>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d111      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_ADC_ConfigChannel+0x28c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_ADC_ConfigChannel+0x290>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9a      	lsrs	r2, r3, #18
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ca6:	e002      	b.n	8003cae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	10000012 	.word	0x10000012
 8003cd0:	40012000 	.word	0x40012000
 8003cd4:	40012300 	.word	0x40012300
 8003cd8:	20000018 	.word	0x20000018
 8003cdc:	431bde83 	.word	0x431bde83

08003ce0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ce8:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <ADC_Init+0x1ec>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <ADC_Init+0x1ec>)
 8003cee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003cf2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <ADC_Init+0x1ec>)
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4973      	ldr	r1, [pc, #460]	; (8003ecc <ADC_Init+0x1ec>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6899      	ldr	r1, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <ADC_Init+0x1f0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	e00f      	b.n	8003dda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0202 	bic.w	r2, r2, #2
 8003de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	005a      	lsls	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	3b01      	subs	r3, #1
 8003e34:	035a      	lsls	r2, r3, #13
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e007      	b.n	8003e50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	051a      	lsls	r2, r3, #20
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e92:	025a      	lsls	r2, r3, #9
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	029a      	lsls	r2, r3, #10
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40012300 	.word	0x40012300
 8003ed0:	0f000001 	.word	0x0f000001

08003ed4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0ed      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fcac 	bl	8002850 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0202 	bic.w	r2, r2, #2
 8003f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7ff fd2e 	bl	8003968 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f0e:	e012      	b.n	8003f36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f10:	f7ff fd2a 	bl	8003968 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b0a      	cmp	r3, #10
 8003f1c:	d90b      	bls.n	8003f36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0c5      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f54:	f7ff fd08 	bl	8003968 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f5a:	e012      	b.n	8003f82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f5c:	f7ff fd04 	bl	8003968 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b0a      	cmp	r3, #10
 8003f68:	d90b      	bls.n	8003f82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2205      	movs	r2, #5
 8003f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e09f      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0e5      	beq.n	8003f5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7e1b      	ldrb	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e007      	b.n	8003fba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7e5b      	ldrb	r3, [r3, #25]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7e9b      	ldrb	r3, [r3, #26]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d108      	bne.n	8003ffe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e007      	b.n	800400e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0220 	bic.w	r2, r2, #32
 800400c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7edb      	ldrb	r3, [r3, #27]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d108      	bne.n	8004028 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0210 	bic.w	r2, r2, #16
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e007      	b.n	8004038 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0210 	orr.w	r2, r2, #16
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7f1b      	ldrb	r3, [r3, #28]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0208 	orr.w	r2, r2, #8
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e007      	b.n	8004062 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7f5b      	ldrb	r3, [r3, #29]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d108      	bne.n	800407c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0204 	orr.w	r2, r2, #4
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e007      	b.n	800408c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d003      	beq.n	80040f2 <HAL_CAN_ConfigFilter+0x26>
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	f040 80be 	bne.w	800426e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80040f2:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_CAN_ConfigFilter+0x1bc>)
 80040f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800410c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	431a      	orrs	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43db      	mvns	r3, r3
 8004144:	401a      	ands	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d123      	bne.n	800419c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004176:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3248      	adds	r2, #72	; 0x48
 800417c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004190:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004192:	6979      	ldr	r1, [r7, #20]
 8004194:	3348      	adds	r3, #72	; 0x48
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	440b      	add	r3, r1
 800419a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d122      	bne.n	80041ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3248      	adds	r2, #72	; 0x48
 80041ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	3348      	adds	r3, #72	; 0x48
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	401a      	ands	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004204:	e007      	b.n	8004216 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	431a      	orrs	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	43db      	mvns	r3, r3
 8004228:	401a      	ands	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004230:	e007      	b.n	8004242 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	431a      	orrs	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d107      	bne.n	800425a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004260:	f023 0201 	bic.w	r2, r3, #1
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e006      	b.n	800427c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
  }
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40006400 	.word	0x40006400

0800428c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d12e      	bne.n	80042fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042b8:	f7ff fb56 	bl	8003968 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042be:	e012      	b.n	80042e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042c0:	f7ff fb52 	bl	8003968 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b0a      	cmp	r3, #10
 80042cc:	d90b      	bls.n	80042e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2205      	movs	r2, #5
 80042de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e012      	b.n	800430c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e006      	b.n	800430c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004328:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d003      	beq.n	8004338 <HAL_CAN_GetRxMessage+0x24>
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b02      	cmp	r3, #2
 8004334:	f040 80f3 	bne.w	800451e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0e7      	b.n	800452c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0d8      	b.n	800452c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	331b      	adds	r3, #27
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0204 	and.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10c      	bne.n	80043b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	331b      	adds	r3, #27
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0d5b      	lsrs	r3, r3, #21
 80043a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e00b      	b.n	80043ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	331b      	adds	r3, #27
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	331b      	adds	r3, #27
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0202 	and.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	331b      	adds	r3, #27
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4413      	add	r3, r2
 80043ec:	3304      	adds	r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	331b      	adds	r3, #27
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	b2da      	uxtb	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	331b      	adds	r3, #27
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	4413      	add	r3, r2
 800441c:	3304      	adds	r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4413      	add	r3, r2
 8004432:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0a1a      	lsrs	r2, r3, #8
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4413      	add	r3, r2
 8004462:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0c1a      	lsrs	r2, r3, #16
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	3302      	adds	r3, #2
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4413      	add	r3, r2
 800447c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	0e1a      	lsrs	r2, r3, #24
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	3303      	adds	r3, #3
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4413      	add	r3, r2
 8004496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	3304      	adds	r3, #4
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0a1a      	lsrs	r2, r3, #8
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	3305      	adds	r3, #5
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0c1a      	lsrs	r2, r3, #16
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	3306      	adds	r3, #6
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	0e1a      	lsrs	r2, r3, #24
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	3307      	adds	r3, #7
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d108      	bne.n	800450a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0220 	orr.w	r2, r2, #32
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e007      	b.n	800451a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0220 	orr.w	r2, r2, #32
 8004518:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e006      	b.n	800452c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
  }
}
 800452c:	4618      	mov	r0, r3
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004548:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d002      	beq.n	8004556 <HAL_CAN_ActivateNotification+0x1e>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d109      	bne.n	800456a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6959      	ldr	r1, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e006      	b.n	8004578 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d07c      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f97d 	bl	80048e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80045ec:	e016      	b.n	800461c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	e00c      	b.n	800461c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	e002      	b.n	800461c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f983 	bl	8004922 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d024      	beq.n	8004670 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800462e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f95d 	bl	80048fa <HAL_CAN_TxMailbox1CompleteCallback>
 8004640:	e016      	b.n	8004670 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	e00c      	b.n	8004670 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	e002      	b.n	8004670 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f963 	bl	8004936 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d024      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004682:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f93d 	bl	800490e <HAL_CAN_TxMailbox2CompleteCallback>
 8004694:	e016      	b.n	80046c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
 80046a8:	e00c      	b.n	80046c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
 80046bc:	e002      	b.n	80046c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f943 	bl	800494a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2210      	movs	r2, #16
 80046e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2208      	movs	r2, #8
 8004702:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f92a 	bl	800495e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fdb4 	bl	8001290 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004742:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2208      	movs	r2, #8
 8004766:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f90c 	bl	8004986 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8f3 	bl	8004972 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2210      	movs	r2, #16
 80047a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f8f6 	bl	800499a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d006      	beq.n	80047d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2208      	movs	r2, #8
 80047c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8ef 	bl	80049ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d075      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d06c      	beq.n	80048be <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004806:	2b00      	cmp	r3, #0
 8004808:	d008      	beq.n	800481c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	f043 0302 	orr.w	r3, r3, #2
 800481a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03d      	beq.n	80048be <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004848:	2b00      	cmp	r3, #0
 800484a:	d038      	beq.n	80048be <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004852:	2b30      	cmp	r3, #48	; 0x30
 8004854:	d017      	beq.n	8004886 <HAL_CAN_IRQHandler+0x302>
 8004856:	2b30      	cmp	r3, #48	; 0x30
 8004858:	d804      	bhi.n	8004864 <HAL_CAN_IRQHandler+0x2e0>
 800485a:	2b10      	cmp	r3, #16
 800485c:	d009      	beq.n	8004872 <HAL_CAN_IRQHandler+0x2ee>
 800485e:	2b20      	cmp	r3, #32
 8004860:	d00c      	beq.n	800487c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004862:	e024      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004864:	2b50      	cmp	r3, #80	; 0x50
 8004866:	d018      	beq.n	800489a <HAL_CAN_IRQHandler+0x316>
 8004868:	2b60      	cmp	r3, #96	; 0x60
 800486a:	d01b      	beq.n	80048a4 <HAL_CAN_IRQHandler+0x320>
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d00f      	beq.n	8004890 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004870:	e01d      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f043 0308 	orr.w	r3, r3, #8
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800487a:	e018      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f043 0310 	orr.w	r3, r3, #16
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004884:	e013      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800488e:	e00e      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004898:	e009      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048a2:	e004      	b.n	80048ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80048bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2204      	movs	r2, #4
 80048c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f872 	bl	80049c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048de:	bf00      	nop
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <__NVIC_SetPriorityGrouping+0x40>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049f4:	4013      	ands	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <__NVIC_SetPriorityGrouping+0x44>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a06:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <__NVIC_SetPriorityGrouping+0x40>)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	60d3      	str	r3, [r2, #12]
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000ed00 	.word	0xe000ed00
 8004a1c:	05fa0000 	.word	0x05fa0000

08004a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a24:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <__NVIC_GetPriorityGrouping+0x18>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 0307 	and.w	r3, r3, #7
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db0b      	blt.n	8004a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	4907      	ldr	r1, [pc, #28]	; (8004a74 <__NVIC_EnableIRQ+0x38>)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	e000e100 	.word	0xe000e100

08004a78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	db10      	blt.n	8004aac <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	f003 021f 	and.w	r2, r3, #31
 8004a90:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <__NVIC_DisableIRQ+0x40>)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2001      	movs	r0, #1
 8004a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9e:	3320      	adds	r3, #32
 8004aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004aa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004aa8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	; (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	; (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
         );
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	; 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff2a 	bl	80049d8 <__NVIC_SetPriorityGrouping>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b9e:	f7ff ff3f 	bl	8004a20 <__NVIC_GetPriorityGrouping>
 8004ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7ff ffb1 	bl	8004b10 <NVIC_EncodePriority>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff80 	bl	8004abc <__NVIC_SetPriority>
}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff32 	bl	8004a3c <__NVIC_EnableIRQ>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ff42 	bl	8004a78 <__NVIC_DisableIRQ>
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e054      	b.n	8004cb8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7f5b      	ldrb	r3, [r3, #29]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd fe62 	bl	80028e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_CRC_Init+0xc4>)
 8004c38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0218 	bic.w	r2, r2, #24
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	e00c      	b.n	8004c66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f834 	bl	8004cc4 <HAL_CRCEx_Polynomial_Set>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e028      	b.n	8004cb8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	795b      	ldrb	r3, [r3, #5]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	611a      	str	r2, [r3, #16]
 8004c78:	e004      	b.n	8004c84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6912      	ldr	r2, [r2, #16]
 8004c82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	04c11db7 	.word	0x04c11db7

08004cc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004cd4:	231f      	movs	r3, #31
 8004cd6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004cd8:	bf00      	nop
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1e5a      	subs	r2, r3, #1
 8004cde:	613a      	str	r2, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_CRCEx_Polynomial_Set+0x34>
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b18      	cmp	r3, #24
 8004cfc:	d846      	bhi.n	8004d8c <HAL_CRCEx_Polynomial_Set+0xc8>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d93 	.word	0x08004d93
 8004d08:	08004d8d 	.word	0x08004d8d
 8004d0c:	08004d8d 	.word	0x08004d8d
 8004d10:	08004d8d 	.word	0x08004d8d
 8004d14:	08004d8d 	.word	0x08004d8d
 8004d18:	08004d8d 	.word	0x08004d8d
 8004d1c:	08004d8d 	.word	0x08004d8d
 8004d20:	08004d8d 	.word	0x08004d8d
 8004d24:	08004d81 	.word	0x08004d81
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004d8d 	.word	0x08004d8d
 8004d30:	08004d8d 	.word	0x08004d8d
 8004d34:	08004d8d 	.word	0x08004d8d
 8004d38:	08004d8d 	.word	0x08004d8d
 8004d3c:	08004d8d 	.word	0x08004d8d
 8004d40:	08004d8d 	.word	0x08004d8d
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004d8d 	.word	0x08004d8d
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d8d 	.word	0x08004d8d
 8004d54:	08004d8d 	.word	0x08004d8d
 8004d58:	08004d8d 	.word	0x08004d8d
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004d69 	.word	0x08004d69
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d913      	bls.n	8004d96 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d72:	e010      	b.n	8004d96 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	d90f      	bls.n	8004d9a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d7e:	e00c      	b.n	8004d9a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	d90b      	bls.n	8004d9e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d8a:	e008      	b.n	8004d9e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d90:	e006      	b.n	8004da0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004d9e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 0118 	bic.w	r1, r3, #24
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e069      	b.n	8004eb6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd fd9a 	bl	8002928 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <HAL_DCMI_Init+0xf0>)
 8004e16:	400b      	ands	r3, r1
 8004e18:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e2e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004e3a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004e46:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004e52:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004e5e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d112      	bne.n	8004e96 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7f1b      	ldrb	r3, [r3, #28]
 8004e74:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7f5b      	ldrb	r3, [r3, #29]
 8004e7a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e7c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7f9b      	ldrb	r3, [r3, #30]
 8004e82:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004e84:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7fdb      	ldrb	r3, [r3, #31]
 8004e8c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004e92:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004e94:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 021e 	orr.w	r2, r2, #30
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	ffe0f007 	.word	0xffe0f007

08004ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Start_IT+0x26>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e048      	b.n	8004f7c <HAL_DMA_Start_IT+0xb8>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d137      	bne.n	8004f6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f842 	bl	8004f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	223f      	movs	r2, #63	; 0x3f
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0216 	orr.w	r2, r2, #22
 8004f32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0208 	orr.w	r2, r2, #8
 8004f5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e005      	b.n	8004f7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
 8004f78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d108      	bne.n	8004fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fda:	e007      	b.n	8004fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e039      	b.n	800507e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fd40 	bl	8002aa4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f023 0107 	bic.w	r1, r3, #7
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_DMA2D_Init+0x90>)
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68d1      	ldr	r1, [r2, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	430b      	orrs	r3, r1
 800506c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	ffffc000 	.word	0xffffc000

0800508c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e05f      	b.n	800515e <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <HAL_DMA2D_DeInit+0xdc>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02e      	beq.n	8005108 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f8c1 	bl	8005240 <HAL_DMA2D_Abort>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d021      	beq.n	8005108 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e04a      	b.n	800515e <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d108      	bne.n	80050e8 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80050d6:	2100      	movs	r1, #0
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8f7 	bl	80052cc <HAL_DMA2D_CLUTLoading_Abort>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d011      	beq.n	8005108 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e03a      	b.n	800515e <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d108      	bne.n	8005108 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80050f6:	2101      	movs	r1, #1
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f8e7 	bl	80052cc <HAL_DMA2D_CLUTLoading_Abort>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e02a      	b.n	800515e <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	223f      	movs	r2, #63	; 0x3f
 8005116:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2200      	movs	r2, #0
 800512e:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fd fcd5 	bl	8002af0 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800

0800516c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_DMA2D_Start_IT+0x1c>
 8005184:	2302      	movs	r3, #2
 8005186:	e020      	b.n	80051ca <HAL_DMA2D_Start_IT+0x5e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fa84 	bl	80056b0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80051b6:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af02      	add	r7, sp, #8
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_DMA2D_BlendingStart_IT+0x1c>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e024      	b.n	8005238 <HAL_DMA2D_BlendingStart_IT+0x66>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fa4d 	bl	80056b0 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005224:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 0205 	bic.w	r2, r3, #5
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0204 	orr.w	r2, r2, #4
 800525a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800525c:	f7fe fb84 	bl	8003968 <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005262:	e017      	b.n	8005294 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005264:	f7fe fb80 	bl	8003968 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005272:	d90f      	bls.n	8005294 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2203      	movs	r2, #3
 8005284:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e017      	b.n	80052c4 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e0      	bne.n	8005264 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80052b0:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0204 	orr.w	r2, r2, #4
 80052ec:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d103      	bne.n	80052fc <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	331c      	adds	r3, #28
 80052fa:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80052fc:	f7fe fb34 	bl	8003968 <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005302:	e017      	b.n	8005334 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005304:	f7fe fb30 	bl	8003968 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005312:	d90f      	bls.n	8005334 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2203      	movs	r2, #3
 8005324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e016      	b.n	8005362 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e1      	bne.n	8005304 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800534e:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d026      	beq.n	80053da <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	f043 0201 	orr.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d026      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d021      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053fc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2220      	movs	r2, #32
 8005404:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	f043 0202 	orr.w	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d026      	beq.n	800548a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005442:	2b00      	cmp	r3, #0
 8005444:	d021      	beq.n	800548a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005454:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2208      	movs	r2, #8
 800545c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2204      	movs	r2, #4
 80054b4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f853 	bl	8005562 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d024      	beq.n	8005510 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01f      	beq.n	8005510 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2202      	movs	r2, #2
 80054e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01f      	beq.n	800555a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005532:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2210      	movs	r2, #16
 800553a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f80e 	bl	8005576 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_DMA2D_ConfigLayer+0x20>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e079      	b.n	80056a0 <HAL_DMA2D_ConfigLayer+0x114>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	3318      	adds	r3, #24
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80055d6:	4b35      	ldr	r3, [pc, #212]	; (80056ac <HAL_DMA2D_ConfigLayer+0x120>)
 80055d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b0a      	cmp	r3, #10
 80055e0:	d003      	beq.n	80055ea <HAL_DMA2D_ConfigLayer+0x5e>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d107      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e005      	b.n	8005606 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	061b      	lsls	r3, r3, #24
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d120      	bne.n	800564e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	43db      	mvns	r3, r3
 8005616:	ea02 0103 	and.w	r1, r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	430a      	orrs	r2, r1
 8005622:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b0a      	cmp	r3, #10
 8005634:	d003      	beq.n	800563e <HAL_DMA2D_ConfigLayer+0xb2>
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b09      	cmp	r3, #9
 800563c:	d127      	bne.n	800568e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
 800564c:	e01f      	b.n	800568e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	43db      	mvns	r3, r3
 8005658:	ea02 0103 	and.w	r1, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b0a      	cmp	r3, #10
 8005676:	d003      	beq.n	8005680 <HAL_DMA2D_ConfigLayer+0xf4>
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b09      	cmp	r3, #9
 800567e:	d106      	bne.n	800568e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800568c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	ff03000f 	.word	0xff03000f

080056b0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b08b      	sub	sp, #44	; 0x2c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	041a      	lsls	r2, r3, #16
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	431a      	orrs	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056e8:	d174      	bne.n	80057d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005700:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	431a      	orrs	r2, r3
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	4313      	orrs	r3, r2
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	e053      	b.n	80057ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d106      	bne.n	8005738 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	e048      	b.n	80057ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d111      	bne.n	8005764 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	0cdb      	lsrs	r3, r3, #19
 8005744:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	0a9b      	lsrs	r3, r3, #10
 800574a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	02db      	lsls	r3, r3, #11
 800575a:	4313      	orrs	r3, r2
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e032      	b.n	80057ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d117      	bne.n	800579c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	0fdb      	lsrs	r3, r3, #31
 8005770:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	0cdb      	lsrs	r3, r3, #19
 8005776:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	0adb      	lsrs	r3, r3, #11
 800577c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	431a      	orrs	r2, r3
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	03db      	lsls	r3, r3, #15
 8005792:	4313      	orrs	r3, r2
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	e016      	b.n	80057ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	0f1b      	lsrs	r3, r3, #28
 80057a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	0d1b      	lsrs	r3, r3, #20
 80057a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	0b1b      	lsrs	r3, r3, #12
 80057ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	431a      	orrs	r2, r3
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	031b      	lsls	r3, r3, #12
 80057c2:	4313      	orrs	r3, r2
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80057d2:	e003      	b.n	80057dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	60da      	str	r2, [r3, #12]
}
 80057dc:	bf00      	nop
 80057de:	372c      	adds	r7, #44	; 0x2c
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	; 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e175      	b.n	8005af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005808:	2201      	movs	r2, #1
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	429a      	cmp	r2, r3
 8005822:	f040 8164 	bne.w	8005aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d00b      	beq.n	8005846 <HAL_GPIO_Init+0x5e>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800583a:	2b11      	cmp	r3, #17
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b12      	cmp	r3, #18
 8005844:	d130      	bne.n	80058a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	2203      	movs	r2, #3
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800587c:	2201      	movs	r2, #1
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	091b      	lsrs	r3, r3, #4
 8005892:	f003 0201 	and.w	r2, r3, #1
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x100>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b12      	cmp	r3, #18
 80058e6:	d123      	bne.n	8005930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	08da      	lsrs	r2, r3, #3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3208      	adds	r2, #8
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	220f      	movs	r2, #15
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	08da      	lsrs	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3208      	adds	r2, #8
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	2203      	movs	r2, #3
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0203 	and.w	r2, r3, #3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80be 	beq.w	8005aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005972:	4b65      	ldr	r3, [pc, #404]	; (8005b08 <HAL_GPIO_Init+0x320>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	4a64      	ldr	r2, [pc, #400]	; (8005b08 <HAL_GPIO_Init+0x320>)
 8005978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800597c:	6453      	str	r3, [r2, #68]	; 0x44
 800597e:	4b62      	ldr	r3, [pc, #392]	; (8005b08 <HAL_GPIO_Init+0x320>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800598a:	4a60      	ldr	r2, [pc, #384]	; (8005b0c <HAL_GPIO_Init+0x324>)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	3302      	adds	r3, #2
 8005992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	220f      	movs	r2, #15
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a57      	ldr	r2, [pc, #348]	; (8005b10 <HAL_GPIO_Init+0x328>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d037      	beq.n	8005a26 <HAL_GPIO_Init+0x23e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a56      	ldr	r2, [pc, #344]	; (8005b14 <HAL_GPIO_Init+0x32c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_GPIO_Init+0x23a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a55      	ldr	r2, [pc, #340]	; (8005b18 <HAL_GPIO_Init+0x330>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d02b      	beq.n	8005a1e <HAL_GPIO_Init+0x236>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a54      	ldr	r2, [pc, #336]	; (8005b1c <HAL_GPIO_Init+0x334>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d025      	beq.n	8005a1a <HAL_GPIO_Init+0x232>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a53      	ldr	r2, [pc, #332]	; (8005b20 <HAL_GPIO_Init+0x338>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01f      	beq.n	8005a16 <HAL_GPIO_Init+0x22e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a52      	ldr	r2, [pc, #328]	; (8005b24 <HAL_GPIO_Init+0x33c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d019      	beq.n	8005a12 <HAL_GPIO_Init+0x22a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a51      	ldr	r2, [pc, #324]	; (8005b28 <HAL_GPIO_Init+0x340>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_GPIO_Init+0x226>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a50      	ldr	r2, [pc, #320]	; (8005b2c <HAL_GPIO_Init+0x344>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00d      	beq.n	8005a0a <HAL_GPIO_Init+0x222>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a4f      	ldr	r2, [pc, #316]	; (8005b30 <HAL_GPIO_Init+0x348>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <HAL_GPIO_Init+0x21e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a4e      	ldr	r2, [pc, #312]	; (8005b34 <HAL_GPIO_Init+0x34c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d101      	bne.n	8005a02 <HAL_GPIO_Init+0x21a>
 80059fe:	2309      	movs	r3, #9
 8005a00:	e012      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a02:	230a      	movs	r3, #10
 8005a04:	e010      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a06:	2308      	movs	r3, #8
 8005a08:	e00e      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a0a:	2307      	movs	r3, #7
 8005a0c:	e00c      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a0e:	2306      	movs	r3, #6
 8005a10:	e00a      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a12:	2305      	movs	r3, #5
 8005a14:	e008      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a16:	2304      	movs	r3, #4
 8005a18:	e006      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e004      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e002      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <HAL_GPIO_Init+0x240>
 8005a26:	2300      	movs	r3, #0
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	f002 0203 	and.w	r2, r2, #3
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	4093      	lsls	r3, r2
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a38:	4934      	ldr	r1, [pc, #208]	; (8005b0c <HAL_GPIO_Init+0x324>)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	089b      	lsrs	r3, r3, #2
 8005a3e:	3302      	adds	r3, #2
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a46:	4b3c      	ldr	r3, [pc, #240]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a6a:	4a33      	ldr	r2, [pc, #204]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a9a:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ac4:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ae8:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <HAL_GPIO_Init+0x350>)
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61fb      	str	r3, [r7, #28]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b0f      	cmp	r3, #15
 8005af8:	f67f ae86 	bls.w	8005808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005afc:	bf00      	nop
 8005afe:	3724      	adds	r7, #36	; 0x24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	40013800 	.word	0x40013800
 8005b10:	40020000 	.word	0x40020000
 8005b14:	40020400 	.word	0x40020400
 8005b18:	40020800 	.word	0x40020800
 8005b1c:	40020c00 	.word	0x40020c00
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40021400 	.word	0x40021400
 8005b28:	40021800 	.word	0x40021800
 8005b2c:	40021c00 	.word	0x40021c00
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40022400 	.word	0x40022400
 8005b38:	40013c00 	.word	0x40013c00

08005b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e001      	b.n	8005b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b7c:	787b      	ldrb	r3, [r7, #1]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b88:	e003      	b.n	8005b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b8a:	887b      	ldrh	r3, [r7, #2]
 8005b8c:	041a      	lsls	r2, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	619a      	str	r2, [r3, #24]
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e07f      	b.n	8005cb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8a9 	bl	8005d1e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	; 0x24
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bf0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d107      	bne.n	8005c1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	e006      	b.n	8005c28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d104      	bne.n	8005c3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6859      	ldr	r1, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_I2C_Init+0x11c>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691a      	ldr	r2, [r3, #16]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	ea42 0103 	orr.w	r1, r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69d9      	ldr	r1, [r3, #28]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	02008000 	.word	0x02008000

08005cc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e021      	b.n	8005d16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2224      	movs	r2, #36	; 0x24
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f821 	bl	8005d32 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	813b      	strh	r3, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f040 80f9 	bne.w	8005f62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_I2C_Mem_Write+0x34>
 8005d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d105      	bne.n	8005d88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e0ed      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_I2C_Mem_Write+0x4e>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e0e6      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d9e:	f7fd fde3 	bl	8003968 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	2319      	movs	r3, #25
 8005daa:	2201      	movs	r2, #1
 8005dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fad1 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0d1      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2221      	movs	r2, #33	; 0x21
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2240      	movs	r2, #64	; 0x40
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a3a      	ldr	r2, [r7, #32]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005de8:	88f8      	ldrh	r0, [r7, #6]
 8005dea:	893a      	ldrh	r2, [r7, #8]
 8005dec:	8979      	ldrh	r1, [r7, #10]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4603      	mov	r3, r0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f9e1 	bl	80061c0 <I2C_RequestMemoryWrite>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0a9      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2bff      	cmp	r3, #255	; 0xff
 8005e18:	d90e      	bls.n	8005e38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	22ff      	movs	r2, #255	; 0xff
 8005e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	8979      	ldrh	r1, [r7, #10]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fbb3 	bl	800659c <I2C_TransferConfig>
 8005e36:	e00f      	b.n	8005e58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	8979      	ldrh	r1, [r7, #10]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fba2 	bl	800659c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fabb 	bl	80063d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e07b      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d034      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x1c8>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d130      	bne.n	8005f10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fa4d 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e04d      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2bff      	cmp	r3, #255	; 0xff
 8005ed0:	d90e      	bls.n	8005ef0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	8979      	ldrh	r1, [r7, #10]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fb57 	bl	800659c <I2C_TransferConfig>
 8005eee:	e00f      	b.n	8005f10 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	8979      	ldrh	r1, [r7, #10]
 8005f02:	2300      	movs	r3, #0
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fb46 	bl	800659c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d19e      	bne.n	8005e58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa9a 	bl	8006458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e01a      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2220      	movs	r2, #32
 8005f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <HAL_I2C_Mem_Write+0x224>)
 8005f42:	400b      	ands	r3, r1
 8005f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	fe00e800 	.word	0xfe00e800

08005f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	f040 80fd 	bne.w	8006192 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_I2C_Mem_Read+0x34>
 8005f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0f1      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Mem_Read+0x4e>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e0ea      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fc6:	f7fd fccf 	bl	8003968 <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2319      	movs	r3, #25
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f9bd 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0d5      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2222      	movs	r2, #34	; 0x22
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2240      	movs	r2, #64	; 0x40
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006010:	88f8      	ldrh	r0, [r7, #6]
 8006012:	893a      	ldrh	r2, [r7, #8]
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4603      	mov	r3, r0
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f921 	bl	8006268 <I2C_RequestMemoryRead>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0ad      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d90e      	bls.n	8006060 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	b2da      	uxtb	r2, r3
 800604e:	8979      	ldrh	r1, [r7, #10]
 8006050:	4b52      	ldr	r3, [pc, #328]	; (800619c <HAL_I2C_Mem_Read+0x22c>)
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fa9f 	bl	800659c <I2C_TransferConfig>
 800605e:	e00f      	b.n	8006080 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	b2da      	uxtb	r2, r3
 8006070:	8979      	ldrh	r1, [r7, #10]
 8006072:	4b4a      	ldr	r3, [pc, #296]	; (800619c <HAL_I2C_Mem_Read+0x22c>)
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fa8e 	bl	800659c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	2200      	movs	r2, #0
 8006088:	2104      	movs	r1, #4
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f964 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e07c      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d034      	beq.n	8006140 <HAL_I2C_Mem_Read+0x1d0>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d130      	bne.n	8006140 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	2200      	movs	r2, #0
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f935 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e04d      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2bff      	cmp	r3, #255	; 0xff
 8006100:	d90e      	bls.n	8006120 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610c:	b2da      	uxtb	r2, r3
 800610e:	8979      	ldrh	r1, [r7, #10]
 8006110:	2300      	movs	r3, #0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa3f 	bl	800659c <I2C_TransferConfig>
 800611e:	e00f      	b.n	8006140 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fa2e 	bl	800659c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d19a      	bne.n	8006080 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f982 	bl	8006458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e01a      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2220      	movs	r2, #32
 8006164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6859      	ldr	r1, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_I2C_Mem_Read+0x230>)
 8006172:	400b      	ands	r3, r1
 8006174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	80002400 	.word	0x80002400
 80061a0:	fe00e800 	.word	0xfe00e800

080061a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b2:	b2db      	uxtb	r3, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	817b      	strh	r3, [r7, #10]
 80061d2:	460b      	mov	r3, r1
 80061d4:	813b      	strh	r3, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	8979      	ldrh	r1, [r7, #10]
 80061e0:	4b20      	ldr	r3, [pc, #128]	; (8006264 <I2C_RequestMemoryWrite+0xa4>)
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f9d7 	bl	800659c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f8f0 	bl	80063d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e02c      	b.n	800625c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d105      	bne.n	8006214 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006208:	893b      	ldrh	r3, [r7, #8]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	629a      	str	r2, [r3, #40]	; 0x28
 8006212:	e015      	b.n	8006240 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006214:	893b      	ldrh	r3, [r7, #8]
 8006216:	0a1b      	lsrs	r3, r3, #8
 8006218:	b29b      	uxth	r3, r3
 800621a:	b2da      	uxtb	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	69b9      	ldr	r1, [r7, #24]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f8d6 	bl	80063d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e012      	b.n	800625c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006236:	893b      	ldrh	r3, [r7, #8]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2200      	movs	r2, #0
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f884 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	80002000 	.word	0x80002000

08006268 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4603      	mov	r3, r0
 8006278:	817b      	strh	r3, [r7, #10]
 800627a:	460b      	mov	r3, r1
 800627c:	813b      	strh	r3, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	8979      	ldrh	r1, [r7, #10]
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <I2C_RequestMemoryRead+0xa4>)
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	2300      	movs	r3, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f984 	bl	800659c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f89d 	bl	80063d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e02c      	b.n	8006302 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d105      	bne.n	80062ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ae:	893b      	ldrh	r3, [r7, #8]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28
 80062b8:	e015      	b.n	80062e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062ba:	893b      	ldrh	r3, [r7, #8]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	b29b      	uxth	r3, r3
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c8:	69fa      	ldr	r2, [r7, #28]
 80062ca:	69b9      	ldr	r1, [r7, #24]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f883 	bl	80063d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e012      	b.n	8006302 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062dc:	893b      	ldrh	r3, [r7, #8]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2140      	movs	r1, #64	; 0x40
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f831 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	80002000 	.word	0x80002000

08006310 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d103      	bne.n	800632e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d007      	beq.n	800634c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	619a      	str	r2, [r3, #24]
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006368:	e022      	b.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d01e      	beq.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fd faf9 	bl	8003968 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d113      	bne.n	80063b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e00f      	b.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4013      	ands	r3, r2
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	429a      	cmp	r2, r3
 80063be:	bf0c      	ite	eq
 80063c0:	2301      	moveq	r3, #1
 80063c2:	2300      	movne	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d0cd      	beq.n	800636a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063e4:	e02c      	b.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f870 	bl	80064d0 <I2C_IsAcknowledgeFailed>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e02a      	b.n	8006450 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d01e      	beq.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006402:	f7fd fab1 	bl	8003968 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d113      	bne.n	8006440 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e007      	b.n	8006450 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d1cb      	bne.n	80063e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006464:	e028      	b.n	80064b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f830 	bl	80064d0 <I2C_IsAcknowledgeFailed>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e026      	b.n	80064c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fd fa75 	bl	8003968 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d113      	bne.n	80064b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e007      	b.n	80064c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d1cf      	bne.n	8006466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d151      	bne.n	800658e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064ea:	e022      	b.n	8006532 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d01e      	beq.n	8006532 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fd fa38 	bl	8003968 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <I2C_IsAcknowledgeFailed+0x3a>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d113      	bne.n	8006532 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e02e      	b.n	8006590 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b20      	cmp	r3, #32
 800653e:	d1d5      	bne.n	80064ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2210      	movs	r2, #16
 8006546:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2220      	movs	r2, #32
 800654e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fedd 	bl	8006310 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6859      	ldr	r1, [r3, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <I2C_IsAcknowledgeFailed+0xc8>)
 8006562:	400b      	ands	r3, r1
 8006564:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656a:	f043 0204 	orr.w	r2, r3, #4
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	fe00e800 	.word	0xfe00e800

0800659c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	817b      	strh	r3, [r7, #10]
 80065aa:	4613      	mov	r3, r2
 80065ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	0d5b      	lsrs	r3, r3, #21
 80065b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065bc:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <I2C_TransferConfig+0x58>)
 80065be:	430b      	orrs	r3, r1
 80065c0:	43db      	mvns	r3, r3
 80065c2:	ea02 0103 	and.w	r1, r2, r3
 80065c6:	897b      	ldrh	r3, [r7, #10]
 80065c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065cc:	7a7b      	ldrb	r3, [r7, #9]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	431a      	orrs	r2, r3
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	03ff63ff 	.word	0x03ff63ff

080065f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0bf      	b.n	800678a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fc fa80 	bl	8002b24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800663a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006650:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6899      	ldr	r1, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4b4a      	ldr	r3, [pc, #296]	; (8006794 <HAL_LTDC_Init+0x19c>)
 800666c:	400b      	ands	r3, r1
 800666e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6899      	ldr	r1, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68d9      	ldr	r1, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b3e      	ldr	r3, [pc, #248]	; (8006794 <HAL_LTDC_Init+0x19c>)
 800669a:	400b      	ands	r3, r1
 800669c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68d9      	ldr	r1, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1a      	ldr	r2, [r3, #32]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6919      	ldr	r1, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_LTDC_Init+0x19c>)
 80066c8:	400b      	ands	r3, r1
 80066ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6919      	ldr	r1, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6959      	ldr	r1, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_LTDC_Init+0x19c>)
 80066f6:	400b      	ands	r3, r1
 80066f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6959      	ldr	r1, [r3, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800673a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0206 	orr.w	r2, r2, #6
 8006766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	f000f800 	.word	0xf000f800

08006798 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d023      	beq.n	8006802 <HAL_LTDC_IRQHandler+0x6a>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01e      	beq.n	8006802 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0204 	bic.w	r2, r2, #4
 80067d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2204      	movs	r2, #4
 80067da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f86f 	bl	80068e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d023      	beq.n	8006854 <HAL_LTDC_IRQHandler+0xbc>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01e      	beq.n	8006854 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0202 	bic.w	r2, r2, #2
 8006824:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2202      	movs	r2, #2
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006834:	f043 0202 	orr.w	r2, r3, #2
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2204      	movs	r2, #4
 8006842:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f846 	bl	80068e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01b      	beq.n	8006896 <HAL_LTDC_IRQHandler+0xfe>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d016      	beq.n	8006896 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0201 	bic.w	r2, r2, #1
 8006876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2201      	movs	r2, #1
 800687e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f012 fd7b 	bl	801938c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <HAL_LTDC_IRQHandler+0x140>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0208 	bic.w	r2, r2, #8
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2208      	movs	r2, #8
 80068c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f80e 	bl	80068f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_LTDC_ConfigLayer+0x1a>
 800691e:	2302      	movs	r3, #2
 8006920:	e02c      	b.n	800697c <HAL_LTDC_ConfigLayer+0x74>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2202      	movs	r2, #2
 800692e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2134      	movs	r1, #52	; 0x34
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	4413      	add	r3, r2
 800693e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800694c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f849 	bl	80069f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bdb0      	pop	{r4, r5, r7, pc}

08006984 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_LTDC_ProgramLineEvent+0x18>
 8006998:	2302      	movs	r3, #2
 800699a:	e023      	b.n	80069e4 <HAL_LTDC_ProgramLineEvent+0x60>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80069bc:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	40016800 	.word	0x40016800

080069f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a10:	4413      	add	r3, r2
 8006a12:	041b      	lsls	r3, r3, #16
 8006a14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	01db      	lsls	r3, r3, #7
 8006a20:	4413      	add	r3, r2
 8006a22:	3384      	adds	r3, #132	; 0x84
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	01d2      	lsls	r2, r2, #7
 8006a30:	440a      	add	r2, r1
 8006a32:	3284      	adds	r2, #132	; 0x84
 8006a34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4a:	4413      	add	r3, r2
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	440b      	add	r3, r1
 8006a5a:	3384      	adds	r3, #132	; 0x84
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a72:	4413      	add	r3, r2
 8006a74:	041b      	lsls	r3, r3, #16
 8006a76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4413      	add	r3, r2
 8006a84:	3384      	adds	r3, #132	; 0x84
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	01d2      	lsls	r2, r2, #7
 8006a92:	440a      	add	r2, r1
 8006a94:	3284      	adds	r2, #132	; 0x84
 8006a96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aaa:	4413      	add	r3, r2
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	01db      	lsls	r3, r3, #7
 8006ab8:	440b      	add	r3, r1
 8006aba:	3384      	adds	r3, #132	; 0x84
 8006abc:	4619      	mov	r1, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	01db      	lsls	r3, r3, #7
 8006ace:	4413      	add	r3, r2
 8006ad0:	3384      	adds	r3, #132	; 0x84
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	01d2      	lsls	r2, r2, #7
 8006ade:	440a      	add	r2, r1
 8006ae0:	3284      	adds	r2, #132	; 0x84
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	01db      	lsls	r3, r3, #7
 8006af2:	4413      	add	r3, r2
 8006af4:	3384      	adds	r3, #132	; 0x84
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	4413      	add	r3, r2
 8006b26:	3384      	adds	r3, #132	; 0x84
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	4413      	add	r3, r2
 8006b36:	3384      	adds	r3, #132	; 0x84
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b44:	461a      	mov	r2, r3
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	440b      	add	r3, r1
 8006b5a:	3384      	adds	r3, #132	; 0x84
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	01db      	lsls	r3, r3, #7
 8006b6e:	4413      	add	r3, r2
 8006b70:	3384      	adds	r3, #132	; 0x84
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	01d2      	lsls	r2, r2, #7
 8006b7e:	440a      	add	r2, r1
 8006b80:	3284      	adds	r2, #132	; 0x84
 8006b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	01db      	lsls	r3, r3, #7
 8006b92:	4413      	add	r3, r2
 8006b94:	3384      	adds	r3, #132	; 0x84
 8006b96:	461a      	mov	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	01db      	lsls	r3, r3, #7
 8006ba8:	4413      	add	r3, r2
 8006baa:	3384      	adds	r3, #132	; 0x84
 8006bac:	69da      	ldr	r2, [r3, #28]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	01db      	lsls	r3, r3, #7
 8006bb8:	440b      	add	r3, r1
 8006bba:	3384      	adds	r3, #132	; 0x84
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4b58      	ldr	r3, [pc, #352]	; (8006d20 <LTDC_SetConfig+0x32c>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	69da      	ldr	r2, [r3, #28]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6809      	ldr	r1, [r1, #0]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	01c9      	lsls	r1, r1, #7
 8006bd6:	4401      	add	r1, r0
 8006bd8:	3184      	adds	r1, #132	; 0x84
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	01db      	lsls	r3, r3, #7
 8006be8:	4413      	add	r3, r2
 8006bea:	3384      	adds	r3, #132	; 0x84
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	01db      	lsls	r3, r3, #7
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3384      	adds	r3, #132	; 0x84
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	01db      	lsls	r3, r3, #7
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3384      	adds	r3, #132	; 0x84
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006c20:	2304      	movs	r3, #4
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e01b      	b.n	8006c5e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e014      	b.n	8006c5e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d00b      	beq.n	8006c54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d007      	beq.n	8006c54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d003      	beq.n	8006c54 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c50:	2b07      	cmp	r3, #7
 8006c52:	d102      	bne.n	8006c5a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c54:	2302      	movs	r3, #2
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e001      	b.n	8006c5e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	4413      	add	r3, r2
 8006c6a:	3384      	adds	r3, #132	; 0x84
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	4611      	mov	r1, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	01d2      	lsls	r2, r2, #7
 8006c78:	440a      	add	r2, r1
 8006c7a:	3284      	adds	r2, #132	; 0x84
 8006c7c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c80:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	fb02 f303 	mul.w	r3, r2, r3
 8006c8c:	041a      	lsls	r2, r3, #16
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6859      	ldr	r1, [r3, #4]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	1acb      	subs	r3, r1, r3
 8006c98:	69f9      	ldr	r1, [r7, #28]
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	3303      	adds	r3, #3
 8006ca0:	68f9      	ldr	r1, [r7, #12]
 8006ca2:	6809      	ldr	r1, [r1, #0]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	01c9      	lsls	r1, r1, #7
 8006caa:	4401      	add	r1, r0
 8006cac:	3184      	adds	r1, #132	; 0x84
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	01db      	lsls	r3, r3, #7
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3384      	adds	r3, #132	; 0x84
 8006cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	01db      	lsls	r3, r3, #7
 8006ccc:	440b      	add	r3, r1
 8006cce:	3384      	adds	r3, #132	; 0x84
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <LTDC_SetConfig+0x330>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	01db      	lsls	r3, r3, #7
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3384      	adds	r3, #132	; 0x84
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3384      	adds	r3, #132	; 0x84
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	4611      	mov	r1, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	01d2      	lsls	r2, r2, #7
 8006d08:	440a      	add	r2, r1
 8006d0a:	3284      	adds	r2, #132	; 0x84
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6013      	str	r3, [r2, #0]
}
 8006d12:	bf00      	nop
 8006d14:	3724      	adds	r7, #36	; 0x24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	fffff8f8 	.word	0xfffff8f8
 8006d24:	fffff800 	.word	0xfffff800

08006d28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40007000 	.word	0x40007000

08006d48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	4a22      	ldr	r2, [pc, #136]	; (8006de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5e:	4b20      	ldr	r3, [pc, #128]	; (8006de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d76:	f7fc fdf7 	bl	8003968 <HAL_GetTick>
 8006d7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d7c:	e009      	b.n	8006d92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d7e:	f7fc fdf3 	bl	8003968 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8c:	d901      	bls.n	8006d92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e022      	b.n	8006dd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d1ee      	bne.n	8006d7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006da0:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0f      	ldr	r2, [pc, #60]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006daa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dac:	f7fc fddc 	bl	8003968 <HAL_GetTick>
 8006db0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006db2:	e009      	b.n	8006dc8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006db4:	f7fc fdd8 	bl	8003968 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dc2:	d901      	bls.n	8006dc8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e007      	b.n	8006dd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd4:	d1ee      	bne.n	8006db4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40007000 	.word	0x40007000

08006de8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006df0:	f7fc fdba 	bl	8003968 <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e067      	b.n	8006ed0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10b      	bne.n	8006e24 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fb ff4d 	bl	8002cb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e1a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f85e 	bl	8006ee0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	021a      	lsls	r2, r3, #8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	2120      	movs	r1, #32
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f856 	bl	8006efc <QSPI_WaitFlagStateUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d135      	bne.n	8006ec6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <HAL_QSPI_Init+0xf0>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	0611      	lsls	r1, r2, #24
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68d2      	ldr	r2, [r2, #12]
 8006e6e:	4311      	orrs	r1, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	69d2      	ldr	r2, [r2, #28]
 8006e74:	4311      	orrs	r1, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6a12      	ldr	r2, [r2, #32]
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <HAL_QSPI_Init+0xf4>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6912      	ldr	r2, [r2, #16]
 8006e92:	0411      	lsls	r1, r2, #16
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6952      	ldr	r2, [r2, #20]
 8006e98:	4311      	orrs	r1, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6992      	ldr	r2, [r2, #24]
 8006e9e:	4311      	orrs	r1, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006ece:	7afb      	ldrb	r3, [r7, #11]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	00ffff2f 	.word	0x00ffff2f
 8006edc:	ffe0f8fe 	.word	0xffe0f8fe

08006ee0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f0c:	e01a      	b.n	8006f44 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d016      	beq.n	8006f44 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fc fd27 	bl	8003968 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10b      	bne.n	8006f44 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2204      	movs	r2, #4
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f38:	f043 0201 	orr.w	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e00e      	b.n	8006f62 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d1d6      	bne.n	8006f0e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e291      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8087 	beq.w	800709e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f90:	4b96      	ldr	r3, [pc, #600]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 030c 	and.w	r3, r3, #12
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f9c:	4b93      	ldr	r3, [pc, #588]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 030c 	and.w	r3, r3, #12
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d112      	bne.n	8006fce <HAL_RCC_OscConfig+0x62>
 8006fa8:	4b90      	ldr	r3, [pc, #576]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fb4:	d10b      	bne.n	8006fce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d06c      	beq.n	800709c <HAL_RCC_OscConfig+0x130>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d168      	bne.n	800709c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e26b      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x7a>
 8006fd8:	4b84      	ldr	r3, [pc, #528]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a83      	ldr	r2, [pc, #524]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	e02e      	b.n	8007044 <HAL_RCC_OscConfig+0xd8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10c      	bne.n	8007008 <HAL_RCC_OscConfig+0x9c>
 8006fee:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7e      	ldr	r2, [pc, #504]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4b7c      	ldr	r3, [pc, #496]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a7b      	ldr	r2, [pc, #492]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e01d      	b.n	8007044 <HAL_RCC_OscConfig+0xd8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007010:	d10c      	bne.n	800702c <HAL_RCC_OscConfig+0xc0>
 8007012:	4b76      	ldr	r3, [pc, #472]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a75      	ldr	r2, [pc, #468]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	4b73      	ldr	r3, [pc, #460]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a72      	ldr	r2, [pc, #456]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e00b      	b.n	8007044 <HAL_RCC_OscConfig+0xd8>
 800702c:	4b6f      	ldr	r3, [pc, #444]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	4b6c      	ldr	r3, [pc, #432]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a6b      	ldr	r2, [pc, #428]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800703e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d013      	beq.n	8007074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fc fc8c 	bl	8003968 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007054:	f7fc fc88 	bl	8003968 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b64      	cmp	r3, #100	; 0x64
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e21f      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	4b61      	ldr	r3, [pc, #388]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0xe8>
 8007072:	e014      	b.n	800709e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fc fc78 	bl	8003968 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800707c:	f7fc fc74 	bl	8003968 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b64      	cmp	r3, #100	; 0x64
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e20b      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800708e:	4b57      	ldr	r3, [pc, #348]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x110>
 800709a:	e000      	b.n	800709e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d069      	beq.n	800717e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070aa:	4b50      	ldr	r3, [pc, #320]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 030c 	and.w	r3, r3, #12
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00b      	beq.n	80070ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070b6:	4b4d      	ldr	r3, [pc, #308]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d11c      	bne.n	80070fc <HAL_RCC_OscConfig+0x190>
 80070c2:	4b4a      	ldr	r3, [pc, #296]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d116      	bne.n	80070fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ce:	4b47      	ldr	r3, [pc, #284]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d001      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e1df      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e6:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	493d      	ldr	r1, [pc, #244]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070fa:	e040      	b.n	800717e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d023      	beq.n	800714c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007104:	4b39      	ldr	r3, [pc, #228]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a38      	ldr	r2, [pc, #224]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800710a:	f043 0301 	orr.w	r3, r3, #1
 800710e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fc fc2a 	bl	8003968 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007118:	f7fc fc26 	bl	8003968 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e1bd      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712a:	4b30      	ldr	r3, [pc, #192]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007136:	4b2d      	ldr	r3, [pc, #180]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4929      	ldr	r1, [pc, #164]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]
 800714a:	e018      	b.n	800717e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800714c:	4b27      	ldr	r3, [pc, #156]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fc fc06 	bl	8003968 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007160:	f7fc fc02 	bl	8003968 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e199      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007172:	4b1e      	ldr	r3, [pc, #120]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d038      	beq.n	80071fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d019      	beq.n	80071c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 8007198:	f043 0301 	orr.w	r3, r3, #1
 800719c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719e:	f7fc fbe3 	bl	8003968 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071a6:	f7fc fbdf 	bl	8003968 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e176      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80071ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x23a>
 80071c4:	e01a      	b.n	80071fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80071c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ca:	4a08      	ldr	r2, [pc, #32]	; (80071ec <HAL_RCC_OscConfig+0x280>)
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d2:	f7fc fbc9 	bl	8003968 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071da:	f7fc fbc5 	bl	8003968 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d903      	bls.n	80071f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e15c      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
 80071ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f0:	4b91      	ldr	r3, [pc, #580]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80071f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1ee      	bne.n	80071da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80a4 	beq.w	8007352 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720a:	4b8b      	ldr	r3, [pc, #556]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007216:	4b88      	ldr	r3, [pc, #544]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	4a87      	ldr	r2, [pc, #540]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007220:	6413      	str	r3, [r2, #64]	; 0x40
 8007222:	4b85      	ldr	r3, [pc, #532]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007232:	4b82      	ldr	r3, [pc, #520]	; (800743c <HAL_RCC_OscConfig+0x4d0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d118      	bne.n	8007270 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800723e:	4b7f      	ldr	r3, [pc, #508]	; (800743c <HAL_RCC_OscConfig+0x4d0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a7e      	ldr	r2, [pc, #504]	; (800743c <HAL_RCC_OscConfig+0x4d0>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724a:	f7fc fb8d 	bl	8003968 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007252:	f7fc fb89 	bl	8003968 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b64      	cmp	r3, #100	; 0x64
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e120      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007264:	4b75      	ldr	r3, [pc, #468]	; (800743c <HAL_RCC_OscConfig+0x4d0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <HAL_RCC_OscConfig+0x31a>
 8007278:	4b6f      	ldr	r3, [pc, #444]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	4a6e      	ldr	r2, [pc, #440]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	6713      	str	r3, [r2, #112]	; 0x70
 8007284:	e02d      	b.n	80072e2 <HAL_RCC_OscConfig+0x376>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10c      	bne.n	80072a8 <HAL_RCC_OscConfig+0x33c>
 800728e:	4b6a      	ldr	r3, [pc, #424]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a69      	ldr	r2, [pc, #420]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	6713      	str	r3, [r2, #112]	; 0x70
 800729a:	4b67      	ldr	r3, [pc, #412]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	4a66      	ldr	r2, [pc, #408]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072a0:	f023 0304 	bic.w	r3, r3, #4
 80072a4:	6713      	str	r3, [r2, #112]	; 0x70
 80072a6:	e01c      	b.n	80072e2 <HAL_RCC_OscConfig+0x376>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b05      	cmp	r3, #5
 80072ae:	d10c      	bne.n	80072ca <HAL_RCC_OscConfig+0x35e>
 80072b0:	4b61      	ldr	r3, [pc, #388]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a60      	ldr	r2, [pc, #384]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
 80072bc:	4b5e      	ldr	r3, [pc, #376]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a5d      	ldr	r2, [pc, #372]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
 80072c8:	e00b      	b.n	80072e2 <HAL_RCC_OscConfig+0x376>
 80072ca:	4b5b      	ldr	r3, [pc, #364]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a5a      	ldr	r2, [pc, #360]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
 80072d6:	4b58      	ldr	r3, [pc, #352]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a57      	ldr	r2, [pc, #348]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d015      	beq.n	8007316 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ea:	f7fc fb3d 	bl	8003968 <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f0:	e00a      	b.n	8007308 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f2:	f7fc fb39 	bl	8003968 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007300:	4293      	cmp	r3, r2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e0ce      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007308:	4b4b      	ldr	r3, [pc, #300]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0ee      	beq.n	80072f2 <HAL_RCC_OscConfig+0x386>
 8007314:	e014      	b.n	8007340 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007316:	f7fc fb27 	bl	8003968 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800731c:	e00a      	b.n	8007334 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fc fb23 	bl	8003968 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f241 3288 	movw	r2, #5000	; 0x1388
 800732c:	4293      	cmp	r3, r2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e0b8      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007334:	4b40      	ldr	r3, [pc, #256]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1ee      	bne.n	800731e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007346:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	4a3b      	ldr	r2, [pc, #236]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800734c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80a4 	beq.w	80074a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800735c:	4b36      	ldr	r3, [pc, #216]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b08      	cmp	r3, #8
 8007366:	d06b      	beq.n	8007440 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d149      	bne.n	8007404 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007370:	4b31      	ldr	r3, [pc, #196]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800737a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800737c:	f7fc faf4 	bl	8003968 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007384:	f7fc faf0 	bl	8003968 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e087      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007396:	4b28      	ldr	r3, [pc, #160]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	019b      	lsls	r3, r3, #6
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	3b01      	subs	r3, #1
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	061b      	lsls	r3, r3, #24
 80073c6:	4313      	orrs	r3, r2
 80073c8:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80073ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d0:	4b19      	ldr	r3, [pc, #100]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80073d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fc fac4 	bl	8003968 <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e4:	f7fc fac0 	bl	8003968 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e057      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x478>
 8007402:	e04f      	b.n	80074a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a0b      	ldr	r2, [pc, #44]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800740a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fc faaa 	bl	8003968 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007418:	f7fc faa6 	bl	8003968 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e03d      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <HAL_RCC_OscConfig+0x4cc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x4ac>
 8007436:	e035      	b.n	80074a4 <HAL_RCC_OscConfig+0x538>
 8007438:	40023800 	.word	0x40023800
 800743c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007440:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <HAL_RCC_OscConfig+0x544>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d028      	beq.n	80074a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007458:	429a      	cmp	r2, r3
 800745a:	d121      	bne.n	80074a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d11a      	bne.n	80074a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007470:	4013      	ands	r3, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007476:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007478:	4293      	cmp	r3, r2
 800747a:	d111      	bne.n	80074a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	3b01      	subs	r3, #1
 800748a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d107      	bne.n	80074a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800749c:	429a      	cmp	r2, r3
 800749e:	d001      	beq.n	80074a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e000      	b.n	80074a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40023800 	.word	0x40023800

080074b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0d0      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074cc:	4b6a      	ldr	r3, [pc, #424]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d910      	bls.n	80074fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b67      	ldr	r3, [pc, #412]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	4965      	ldr	r1, [pc, #404]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b63      	ldr	r3, [pc, #396]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d001      	beq.n	80074fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0b8      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d020      	beq.n	800754a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007514:	4b59      	ldr	r3, [pc, #356]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4a58      	ldr	r2, [pc, #352]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800751e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800752c:	4b53      	ldr	r3, [pc, #332]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4a52      	ldr	r2, [pc, #328]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007538:	4b50      	ldr	r3, [pc, #320]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	494d      	ldr	r1, [pc, #308]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007546:	4313      	orrs	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d040      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d107      	bne.n	800756e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755e:	4b47      	ldr	r3, [pc, #284]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d115      	bne.n	8007596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e07f      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007576:	4b41      	ldr	r3, [pc, #260]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e073      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007586:	4b3d      	ldr	r3, [pc, #244]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e06b      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007596:	4b39      	ldr	r3, [pc, #228]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f023 0203 	bic.w	r2, r3, #3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4936      	ldr	r1, [pc, #216]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a8:	f7fc f9de 	bl	8003968 <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	e00a      	b.n	80075c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b0:	f7fc f9da 	bl	8003968 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e053      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	4b2d      	ldr	r3, [pc, #180]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 020c 	and.w	r2, r3, #12
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d1eb      	bne.n	80075b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075d8:	4b27      	ldr	r3, [pc, #156]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d210      	bcs.n	8007608 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b24      	ldr	r3, [pc, #144]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 020f 	bic.w	r2, r3, #15
 80075ee:	4922      	ldr	r1, [pc, #136]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f6:	4b20      	ldr	r3, [pc, #128]	; (8007678 <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 030f 	and.w	r3, r3, #15
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e032      	b.n	800766e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007614:	4b19      	ldr	r3, [pc, #100]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4916      	ldr	r1, [pc, #88]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d009      	beq.n	8007646 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007632:	4b12      	ldr	r3, [pc, #72]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	490e      	ldr	r1, [pc, #56]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 8007642:	4313      	orrs	r3, r2
 8007644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007646:	f000 f821 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800764a:	4601      	mov	r1, r0
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <HAL_RCC_ClockConfig+0x1c8>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	091b      	lsrs	r3, r3, #4
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <HAL_RCC_ClockConfig+0x1cc>)
 8007658:	5cd3      	ldrb	r3, [r2, r3]
 800765a:	fa21 f303 	lsr.w	r3, r1, r3
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <HAL_RCC_ClockConfig+0x1d0>)
 8007660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007662:	4b09      	ldr	r3, [pc, #36]	; (8007688 <HAL_RCC_ClockConfig+0x1d4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fb ffc8 	bl	80035fc <HAL_InitTick>

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40023c00 	.word	0x40023c00
 800767c:	40023800 	.word	0x40023800
 8007680:	0802b45c 	.word	0x0802b45c
 8007684:	20000018 	.word	0x20000018
 8007688:	2000001c 	.word	0x2000001c

0800768c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800768c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	607b      	str	r3, [r7, #4]
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	2300      	movs	r3, #0
 800769c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076a2:	4b50      	ldr	r3, [pc, #320]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 030c 	and.w	r3, r3, #12
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d007      	beq.n	80076be <HAL_RCC_GetSysClockFreq+0x32>
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d008      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x38>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 808d 	bne.w	80077d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80076ba:	60bb      	str	r3, [r7, #8]
      break;
 80076bc:	e08c      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076be:	4b4b      	ldr	r3, [pc, #300]	; (80077ec <HAL_RCC_GetSysClockFreq+0x160>)
 80076c0:	60bb      	str	r3, [r7, #8]
      break;
 80076c2:	e089      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076c4:	4b47      	ldr	r3, [pc, #284]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076ce:	4b45      	ldr	r3, [pc, #276]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d023      	beq.n	8007722 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076da:	4b42      	ldr	r3, [pc, #264]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	099b      	lsrs	r3, r3, #6
 80076e0:	f04f 0400 	mov.w	r4, #0
 80076e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	ea03 0501 	and.w	r5, r3, r1
 80076f0:	ea04 0602 	and.w	r6, r4, r2
 80076f4:	4a3d      	ldr	r2, [pc, #244]	; (80077ec <HAL_RCC_GetSysClockFreq+0x160>)
 80076f6:	fb02 f106 	mul.w	r1, r2, r6
 80076fa:	2200      	movs	r2, #0
 80076fc:	fb02 f205 	mul.w	r2, r2, r5
 8007700:	440a      	add	r2, r1
 8007702:	493a      	ldr	r1, [pc, #232]	; (80077ec <HAL_RCC_GetSysClockFreq+0x160>)
 8007704:	fba5 0101 	umull	r0, r1, r5, r1
 8007708:	1853      	adds	r3, r2, r1
 800770a:	4619      	mov	r1, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f04f 0400 	mov.w	r4, #0
 8007712:	461a      	mov	r2, r3
 8007714:	4623      	mov	r3, r4
 8007716:	f7f9 f85f 	bl	80007d8 <__aeabi_uldivmod>
 800771a:	4603      	mov	r3, r0
 800771c:	460c      	mov	r4, r1
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	e049      	b.n	80077b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007722:	4b30      	ldr	r3, [pc, #192]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	099b      	lsrs	r3, r3, #6
 8007728:	f04f 0400 	mov.w	r4, #0
 800772c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	ea03 0501 	and.w	r5, r3, r1
 8007738:	ea04 0602 	and.w	r6, r4, r2
 800773c:	4629      	mov	r1, r5
 800773e:	4632      	mov	r2, r6
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	f04f 0400 	mov.w	r4, #0
 8007748:	0154      	lsls	r4, r2, #5
 800774a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800774e:	014b      	lsls	r3, r1, #5
 8007750:	4619      	mov	r1, r3
 8007752:	4622      	mov	r2, r4
 8007754:	1b49      	subs	r1, r1, r5
 8007756:	eb62 0206 	sbc.w	r2, r2, r6
 800775a:	f04f 0300 	mov.w	r3, #0
 800775e:	f04f 0400 	mov.w	r4, #0
 8007762:	0194      	lsls	r4, r2, #6
 8007764:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007768:	018b      	lsls	r3, r1, #6
 800776a:	1a5b      	subs	r3, r3, r1
 800776c:	eb64 0402 	sbc.w	r4, r4, r2
 8007770:	f04f 0100 	mov.w	r1, #0
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	00e2      	lsls	r2, r4, #3
 800777a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800777e:	00d9      	lsls	r1, r3, #3
 8007780:	460b      	mov	r3, r1
 8007782:	4614      	mov	r4, r2
 8007784:	195b      	adds	r3, r3, r5
 8007786:	eb44 0406 	adc.w	r4, r4, r6
 800778a:	f04f 0100 	mov.w	r1, #0
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	02a2      	lsls	r2, r4, #10
 8007794:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007798:	0299      	lsls	r1, r3, #10
 800779a:	460b      	mov	r3, r1
 800779c:	4614      	mov	r4, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	4621      	mov	r1, r4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f04f 0400 	mov.w	r4, #0
 80077a8:	461a      	mov	r2, r3
 80077aa:	4623      	mov	r3, r4
 80077ac:	f7f9 f814 	bl	80007d8 <__aeabi_uldivmod>
 80077b0:	4603      	mov	r3, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	3301      	adds	r3, #1
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ce:	60bb      	str	r3, [r7, #8]
      break;
 80077d0:	e002      	b.n	80077d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80077d4:	60bb      	str	r3, [r7, #8]
      break;
 80077d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077d8:	68bb      	ldr	r3, [r7, #8]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40023800 	.word	0x40023800
 80077e8:	00f42400 	.word	0x00f42400
 80077ec:	017d7840 	.word	0x017d7840

080077f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f4:	4b03      	ldr	r3, [pc, #12]	; (8007804 <HAL_RCC_GetHCLKFreq+0x14>)
 80077f6:	681b      	ldr	r3, [r3, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000018 	.word	0x20000018

08007808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800780c:	f7ff fff0 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 8007810:	4601      	mov	r1, r0
 8007812:	4b05      	ldr	r3, [pc, #20]	; (8007828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	0a9b      	lsrs	r3, r3, #10
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	4a03      	ldr	r2, [pc, #12]	; (800782c <HAL_RCC_GetPCLK1Freq+0x24>)
 800781e:	5cd3      	ldrb	r3, [r2, r3]
 8007820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40023800 	.word	0x40023800
 800782c:	0802b46c 	.word	0x0802b46c

08007830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007834:	f7ff ffdc 	bl	80077f0 <HAL_RCC_GetHCLKFreq>
 8007838:	4601      	mov	r1, r0
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	0b5b      	lsrs	r3, r3, #13
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	4a03      	ldr	r2, [pc, #12]	; (8007854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007846:	5cd3      	ldrb	r3, [r2, r3]
 8007848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40023800 	.word	0x40023800
 8007854:	0802b46c 	.word	0x0802b46c

08007858 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	220f      	movs	r2, #15
 8007866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007868:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 0203 	and.w	r2, r3, #3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <HAL_RCC_GetClockConfig+0x5c>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	08db      	lsrs	r3, r3, #3
 8007892:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <HAL_RCC_GetClockConfig+0x60>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 020f 	and.w	r2, r3, #15
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40023c00 	.word	0x40023c00

080078bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d012      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078e4:	4b69      	ldr	r3, [pc, #420]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4a68      	ldr	r2, [pc, #416]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078ee:	6093      	str	r3, [r2, #8]
 80078f0:	4b66      	ldr	r3, [pc, #408]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f8:	4964      	ldr	r1, [pc, #400]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007906:	2301      	movs	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d017      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007916:	4b5d      	ldr	r3, [pc, #372]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800791c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007924:	4959      	ldr	r1, [pc, #356]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007934:	d101      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007936:	2301      	movs	r3, #1
 8007938:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007942:	2301      	movs	r3, #1
 8007944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d017      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007952:	4b4e      	ldr	r3, [pc, #312]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	494a      	ldr	r1, [pc, #296]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007970:	d101      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800798e:	2301      	movs	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 808b 	beq.w	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079a0:	4b3a      	ldr	r3, [pc, #232]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	4a39      	ldr	r2, [pc, #228]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079aa:	6413      	str	r3, [r2, #64]	; 0x40
 80079ac:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079b8:	4b35      	ldr	r3, [pc, #212]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079c4:	f7fb ffd0 	bl	8003968 <HAL_GetTick>
 80079c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079cc:	f7fb ffcc 	bl	8003968 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b64      	cmp	r3, #100	; 0x64
 80079d8:	d901      	bls.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e355      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079de:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079ea:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d035      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d02e      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a08:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	4a1d      	ldr	r2, [pc, #116]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a1e:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	4a1a      	ldr	r2, [pc, #104]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a2a:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a30:	4b16      	ldr	r3, [pc, #88]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d114      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3c:	f7fb ff94 	bl	8003968 <HAL_GetTick>
 8007a40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a42:	e00a      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a44:	f7fb ff90 	bl	8003968 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e317      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0ee      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a72:	d111      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a82:	400b      	ands	r3, r1
 8007a84:	4901      	ldr	r1, [pc, #4]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	608b      	str	r3, [r1, #8]
 8007a8a:	e00b      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	40007000 	.word	0x40007000
 8007a94:	0ffffcff 	.word	0x0ffffcff
 8007a98:	4bb0      	ldr	r3, [pc, #704]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	4aaf      	ldr	r2, [pc, #700]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007aa2:	6093      	str	r3, [r2, #8]
 8007aa4:	4bad      	ldr	r3, [pc, #692]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ab0:	49aa      	ldr	r1, [pc, #680]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0310 	and.w	r3, r3, #16
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d010      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ac2:	4ba6      	ldr	r3, [pc, #664]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac8:	4aa4      	ldr	r2, [pc, #656]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ace:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ad2:	4ba2      	ldr	r3, [pc, #648]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	499f      	ldr	r1, [pc, #636]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007af0:	4b9a      	ldr	r3, [pc, #616]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007afe:	4997      	ldr	r1, [pc, #604]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b12:	4b92      	ldr	r3, [pc, #584]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b20:	498e      	ldr	r1, [pc, #568]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b34:	4b89      	ldr	r3, [pc, #548]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b42:	4986      	ldr	r1, [pc, #536]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b56:	4b81      	ldr	r3, [pc, #516]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b64:	497d      	ldr	r1, [pc, #500]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b78:	4b78      	ldr	r3, [pc, #480]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f023 0203 	bic.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b86:	4975      	ldr	r1, [pc, #468]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b9a:	4b70      	ldr	r3, [pc, #448]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba0:	f023 020c 	bic.w	r2, r3, #12
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba8:	496c      	ldr	r1, [pc, #432]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bbc:	4b67      	ldr	r3, [pc, #412]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bca:	4964      	ldr	r1, [pc, #400]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bde:	4b5f      	ldr	r3, [pc, #380]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bec:	495b      	ldr	r1, [pc, #364]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c00:	4b56      	ldr	r3, [pc, #344]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	4953      	ldr	r1, [pc, #332]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c22:	4b4e      	ldr	r3, [pc, #312]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c30:	494a      	ldr	r1, [pc, #296]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c44:	4b45      	ldr	r3, [pc, #276]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c52:	4942      	ldr	r1, [pc, #264]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c66:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c74:	4939      	ldr	r1, [pc, #228]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c88:	4b34      	ldr	r3, [pc, #208]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c96:	4931      	ldr	r1, [pc, #196]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d011      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007caa:	4b2c      	ldr	r3, [pc, #176]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb8:	4928      	ldr	r1, [pc, #160]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc8:	d101      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cea:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf8:	4918      	ldr	r1, [pc, #96]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d0c:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d1c:	490f      	ldr	r1, [pc, #60]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d005      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d32:	f040 80d8 	bne.w	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a08      	ldr	r2, [pc, #32]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d42:	f7fb fe11 	bl	8003968 <HAL_GetTick>
 8007d46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d48:	e00a      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d4a:	f7fb fe0d 	bl	8003968 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b64      	cmp	r3, #100	; 0x64
 8007d56:	d903      	bls.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e196      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d60:	4b6c      	ldr	r3, [pc, #432]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ee      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d021      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d11d      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d80:	4b64      	ldr	r3, [pc, #400]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d8e:	4b61      	ldr	r3, [pc, #388]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d94:	0e1b      	lsrs	r3, r3, #24
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	019a      	lsls	r2, r3, #6
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	041b      	lsls	r3, r3, #16
 8007da6:	431a      	orrs	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	071b      	lsls	r3, r3, #28
 8007db4:	4957      	ldr	r1, [pc, #348]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02e      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007de6:	d129      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007de8:	4b4a      	ldr	r3, [pc, #296]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dee:	0c1b      	lsrs	r3, r3, #16
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007df6:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfc:	0f1b      	lsrs	r3, r3, #28
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	019a      	lsls	r2, r3, #6
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	041b      	lsls	r3, r3, #16
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	061b      	lsls	r3, r3, #24
 8007e16:	431a      	orrs	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	071b      	lsls	r3, r3, #28
 8007e1c:	493d      	ldr	r1, [pc, #244]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e24:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2a:	f023 021f 	bic.w	r2, r3, #31
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4937      	ldr	r1, [pc, #220]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01d      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e48:	4b32      	ldr	r3, [pc, #200]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4e:	0e1b      	lsrs	r3, r3, #24
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5c:	0f1b      	lsrs	r3, r3, #28
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	019a      	lsls	r2, r3, #6
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	431a      	orrs	r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	431a      	orrs	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	071b      	lsls	r3, r3, #28
 8007e7c:	4925      	ldr	r1, [pc, #148]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	019a      	lsls	r2, r3, #6
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	071b      	lsls	r3, r3, #28
 8007eac:	4919      	ldr	r1, [pc, #100]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec0:	f7fb fd52 	bl	8003968 <HAL_GetTick>
 8007ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ec6:	e008      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ec8:	f7fb fd4e 	bl	8003968 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	; 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e0d7      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	f040 80cd 	bne.w	8008088 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efa:	f7fb fd35 	bl	8003968 <HAL_GetTick>
 8007efe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f00:	e00a      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f02:	f7fb fd31 	bl	8003968 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b64      	cmp	r3, #100	; 0x64
 8007f0e:	d903      	bls.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e0ba      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007f14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f18:	4b5e      	ldr	r3, [pc, #376]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f24:	d0ed      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02e      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d12a      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f4e:	4b51      	ldr	r3, [pc, #324]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	0c1b      	lsrs	r3, r3, #16
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f5c:	4b4d      	ldr	r3, [pc, #308]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f62:	0f1b      	lsrs	r3, r3, #28
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	019a      	lsls	r2, r3, #6
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	061b      	lsls	r3, r3, #24
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	071b      	lsls	r3, r3, #28
 8007f82:	4944      	ldr	r1, [pc, #272]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f8a:	4b42      	ldr	r3, [pc, #264]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	493d      	ldr	r1, [pc, #244]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d022      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fb8:	d11d      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fba:	4b36      	ldr	r3, [pc, #216]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc0:	0e1b      	lsrs	r3, r3, #24
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fc8:	4b32      	ldr	r3, [pc, #200]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fce:	0f1b      	lsrs	r3, r3, #28
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	019a      	lsls	r2, r3, #6
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	041b      	lsls	r3, r3, #16
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	061b      	lsls	r3, r3, #24
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	071b      	lsls	r3, r3, #28
 8007fee:	4929      	ldr	r1, [pc, #164]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d028      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008002:	4b24      	ldr	r3, [pc, #144]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008010:	4b20      	ldr	r3, [pc, #128]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008016:	0c1b      	lsrs	r3, r3, #16
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	019a      	lsls	r2, r3, #6
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	431a      	orrs	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	061b      	lsls	r3, r3, #24
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	071b      	lsls	r3, r3, #28
 8008036:	4917      	ldr	r1, [pc, #92]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008038:	4313      	orrs	r3, r2
 800803a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800803e:	4b15      	ldr	r3, [pc, #84]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	4911      	ldr	r1, [pc, #68]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800804e:	4313      	orrs	r3, r2
 8008050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008054:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a0e      	ldr	r2, [pc, #56]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800805a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800805e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008060:	f7fb fc82 	bl	8003968 <HAL_GetTick>
 8008064:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008066:	e008      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008068:	f7fb fc7e 	bl	8003968 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b64      	cmp	r3, #100	; 0x64
 8008074:	d901      	bls.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e007      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008086:	d1ef      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40023800 	.word	0x40023800

08008098 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080b6:	f040 8086 	bne.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80080ba:	4b8d      	ldr	r3, [pc, #564]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d0:	d03e      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80080d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d6:	d073      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d000      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80080dc:	e074      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080de:	4b84      	ldr	r3, [pc, #528]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d108      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080ea:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f2:	4a80      	ldr	r2, [pc, #512]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	613b      	str	r3, [r7, #16]
 80080fa:	e007      	b.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080fc:	4b7c      	ldr	r3, [pc, #496]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008104:	4a7c      	ldr	r2, [pc, #496]	; (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800810c:	4b78      	ldr	r3, [pc, #480]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008112:	0e1b      	lsrs	r3, r3, #24
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800811a:	4b75      	ldr	r3, [pc, #468]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	099b      	lsrs	r3, r3, #6
 8008122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	fb02 f203 	mul.w	r2, r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008132:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008134:	4b6e      	ldr	r3, [pc, #440]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813a:	0a1b      	lsrs	r3, r3, #8
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
        break;
 800814e:	e03b      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008150:	4b67      	ldr	r3, [pc, #412]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d108      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800815c:	4b64      	ldr	r3, [pc, #400]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008164:	4a63      	ldr	r2, [pc, #396]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	e007      	b.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800816e:	4b60      	ldr	r3, [pc, #384]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008176:	4a60      	ldr	r2, [pc, #384]	; (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008178:	fbb2 f3f3 	udiv	r3, r2, r3
 800817c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800817e:	4b5c      	ldr	r3, [pc, #368]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008184:	0e1b      	lsrs	r3, r3, #24
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800818c:	4b58      	ldr	r3, [pc, #352]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800818e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008192:	099b      	lsrs	r3, r3, #6
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	fb02 f203 	mul.w	r2, r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80081a6:	4b52      	ldr	r3, [pc, #328]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	3301      	adds	r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]
        break;
 80081be:	e003      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b4e      	ldr	r3, [pc, #312]	; (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80081c2:	617b      	str	r3, [r7, #20]
        break;
 80081c4:	e000      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80081c6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081ce:	f040 8086 	bne.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081e0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e8:	d03e      	beq.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80081ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ee:	d073      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d000      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80081f4:	e074      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081f6:	4b3e      	ldr	r3, [pc, #248]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d108      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800820a:	4a3a      	ldr	r2, [pc, #232]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800820c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	e007      	b.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008214:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800821c:	4a36      	ldr	r2, [pc, #216]	; (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800821e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008222:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008224:	4b32      	ldr	r3, [pc, #200]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	0e1b      	lsrs	r3, r3, #24
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008232:	4b2f      	ldr	r3, [pc, #188]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008238:	099b      	lsrs	r3, r3, #6
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	fb02 f203 	mul.w	r2, r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800824c:	4b28      	ldr	r3, [pc, #160]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800824e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	3301      	adds	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	617b      	str	r3, [r7, #20]
        break;
 8008266:	e03b      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008268:	4b21      	ldr	r3, [pc, #132]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d108      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008274:	4b1e      	ldr	r3, [pc, #120]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	e007      	b.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800828e:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082aa:	099b      	lsrs	r3, r3, #6
 80082ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	fb02 f203 	mul.w	r2, r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	3301      	adds	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d4:	617b      	str	r3, [r7, #20]
        break;
 80082d6:	e003      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80082d8:	4b08      	ldr	r3, [pc, #32]	; (80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80082da:	617b      	str	r3, [r7, #20]
        break;
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80082de:	bf00      	nop

  return frequency;
 80082e0:	697b      	ldr	r3, [r7, #20]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40023800 	.word	0x40023800
 80082f4:	00f42400 	.word	0x00f42400
 80082f8:	017d7840 	.word	0x017d7840
 80082fc:	00bb8000 	.word	0x00bb8000

08008300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e06b      	b.n	80083ea <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7f5b      	ldrb	r3, [r3, #29]
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fa fd56 	bl	8002dd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	22ca      	movs	r2, #202	; 0xca
 8008334:	625a      	str	r2, [r3, #36]	; 0x24
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2253      	movs	r2, #83	; 0x53
 800833c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fb00 	bl	8008944 <RTC_EnterInitMode>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d008      	beq.n	800835c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	22ff      	movs	r2, #255	; 0xff
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2204      	movs	r2, #4
 8008356:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e046      	b.n	80083ea <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6899      	ldr	r1, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <HAL_RTC_Init+0xf4>)
 8008368:	400b      	ands	r3, r1
 800836a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6899      	ldr	r1, [r3, #8]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	68d2      	ldr	r2, [r2, #12]
 8008392:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6919      	ldr	r1, [r3, #16]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	041a      	lsls	r2, r3, #16
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083b6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0208 	bic.w	r2, r2, #8
 80083c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	22ff      	movs	r2, #255	; 0xff
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80083e8:	2300      	movs	r3, #0
  }
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	ff8fffbf 	.word	0xff8fffbf

080083f8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083f8:	b590      	push	{r4, r7, lr}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	7f1b      	ldrb	r3, [r3, #28]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_RTC_SetTime+0x1c>
 8008410:	2302      	movs	r3, #2
 8008412:	e0a8      	b.n	8008566 <HAL_RTC_SetTime+0x16e>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2202      	movs	r2, #2
 800841e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d126      	bne.n	8008474 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2200      	movs	r2, #0
 8008438:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 faac 	bl	800899c <RTC_ByteToBcd2>
 8008444:	4603      	mov	r3, r0
 8008446:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 faa5 	bl	800899c <RTC_ByteToBcd2>
 8008452:	4603      	mov	r3, r0
 8008454:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008456:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	789b      	ldrb	r3, [r3, #2]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fa9d 	bl	800899c <RTC_ByteToBcd2>
 8008462:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008464:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	7b1b      	ldrb	r3, [r3, #12]
 800846c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e018      	b.n	80084a6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008494:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800849a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	7b1b      	ldrb	r3, [r3, #12]
 80084a0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	22ca      	movs	r2, #202	; 0xca
 80084ac:	625a      	str	r2, [r3, #36]	; 0x24
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2253      	movs	r2, #83	; 0x53
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fa44 	bl	8008944 <RTC_EnterInitMode>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	22ff      	movs	r2, #255	; 0xff
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2204      	movs	r2, #4
 80084ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e045      	b.n	8008566 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	6979      	ldr	r1, [r7, #20]
 80084e0:	4b23      	ldr	r3, [pc, #140]	; (8008570 <HAL_RTC_SetTime+0x178>)
 80084e2:	400b      	ands	r3, r1
 80084e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6899      	ldr	r1, [r3, #8]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	431a      	orrs	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800851c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b00      	cmp	r3, #0
 800852a:	d111      	bne.n	8008550 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f9e1 	bl	80088f4 <HAL_RTC_WaitForSynchro>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	22ff      	movs	r2, #255	; 0xff
 800853e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2204      	movs	r2, #4
 8008544:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e00a      	b.n	8008566 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	22ff      	movs	r2, #255	; 0xff
 8008556:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008564:	2300      	movs	r3, #0
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	bd90      	pop	{r4, r7, pc}
 800856e:	bf00      	nop
 8008570:	007f7f7f 	.word	0x007f7f7f

08008574 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	7f1b      	ldrb	r3, [r3, #28]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_RTC_SetDate+0x1c>
 800858c:	2302      	movs	r3, #2
 800858e:	e092      	b.n	80086b6 <HAL_RTC_SetDate+0x142>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2202      	movs	r2, #2
 800859a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10e      	bne.n	80085c0 <HAL_RTC_SetDate+0x4c>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	f003 0310 	and.w	r3, r3, #16
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	f023 0310 	bic.w	r3, r3, #16
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	330a      	adds	r3, #10
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11c      	bne.n	8008600 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	78db      	ldrb	r3, [r3, #3]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f9e6 	bl	800899c <RTC_ByteToBcd2>
 80085d0:	4603      	mov	r3, r0
 80085d2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f9df 	bl	800899c <RTC_ByteToBcd2>
 80085de:	4603      	mov	r3, r0
 80085e0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085e2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	789b      	ldrb	r3, [r3, #2]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f9d7 	bl	800899c <RTC_ByteToBcd2>
 80085ee:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80085f0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e00e      	b.n	800861e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	78db      	ldrb	r3, [r3, #3]
 8008604:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800860c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008612:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	22ca      	movs	r2, #202	; 0xca
 8008624:	625a      	str	r2, [r3, #36]	; 0x24
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2253      	movs	r2, #83	; 0x53
 800862c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f988 	bl	8008944 <RTC_EnterInitMode>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	22ff      	movs	r2, #255	; 0xff
 8008640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2204      	movs	r2, #4
 8008646:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e031      	b.n	80086b6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	6979      	ldr	r1, [r7, #20]
 8008658:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <HAL_RTC_SetDate+0x14c>)
 800865a:	400b      	ands	r3, r1
 800865c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800866c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d111      	bne.n	80086a0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f939 	bl	80088f4 <HAL_RTC_WaitForSynchro>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	22ff      	movs	r2, #255	; 0xff
 800868e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2204      	movs	r2, #4
 8008694:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e00a      	b.n	80086b6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	22ff      	movs	r2, #255	; 0xff
 80086a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80086b4:	2300      	movs	r3, #0
  }
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd90      	pop	{r4, r7, pc}
 80086be:	bf00      	nop
 80086c0:	00ffff3f 	.word	0x00ffff3f

080086c4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b089      	sub	sp, #36	; 0x24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61fb      	str	r3, [r7, #28]
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	7f1b      	ldrb	r3, [r3, #28]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_RTC_SetAlarm+0x24>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e101      	b.n	80088ec <HAL_RTC_SetAlarm+0x228>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2202      	movs	r2, #2
 80086f2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d137      	bne.n	800876a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2200      	movs	r2, #0
 800870c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f000 f942 	bl	800899c <RTC_ByteToBcd2>
 8008718:	4603      	mov	r3, r0
 800871a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f93b 	bl	800899c <RTC_ByteToBcd2>
 8008726:	4603      	mov	r3, r0
 8008728:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800872a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	789b      	ldrb	r3, [r3, #2]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f933 	bl	800899c <RTC_ByteToBcd2>
 8008736:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008738:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	7b1b      	ldrb	r3, [r3, #12]
 8008740:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008742:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f000 f925 	bl	800899c <RTC_ByteToBcd2>
 8008752:	4603      	mov	r3, r0
 8008754:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008756:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800875e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008764:	4313      	orrs	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e023      	b.n	80087b2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800878a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008790:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008798:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80087a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80087a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80087ae:	4313      	orrs	r3, r2
 80087b0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	22ca      	movs	r2, #202	; 0xca
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2253      	movs	r2, #83	; 0x53
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d6:	d13f      	bne.n	8008858 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087e6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087f6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087f8:	f7fb f8b6 	bl	8003968 <HAL_GetTick>
 80087fc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087fe:	e013      	b.n	8008828 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008800:	f7fb f8b2 	bl	8003968 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800880e:	d90b      	bls.n	8008828 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	22ff      	movs	r2, #255	; 0xff
 8008816:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2203      	movs	r2, #3
 800881c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e061      	b.n	80088ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0e4      	beq.n	8008800 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008854:	609a      	str	r2, [r3, #8]
 8008856:	e03e      	b.n	80088d6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008866:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008876:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008878:	f7fb f876 	bl	8003968 <HAL_GetTick>
 800887c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800887e:	e013      	b.n	80088a8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008880:	f7fb f872 	bl	8003968 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800888e:	d90b      	bls.n	80088a8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	22ff      	movs	r2, #255	; 0xff
 8008896:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2203      	movs	r2, #3
 800889c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e021      	b.n	80088ec <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0e4      	beq.n	8008880 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	22ff      	movs	r2, #255	; 0xff
 80088dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3724      	adds	r7, #36	; 0x24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd90      	pop	{r4, r7, pc}

080088f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800890e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008910:	f7fb f82a 	bl	8003968 <HAL_GetTick>
 8008914:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008916:	e009      	b.n	800892c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008918:	f7fb f826 	bl	8003968 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008926:	d901      	bls.n	800892c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e007      	b.n	800893c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0ee      	beq.n	8008918 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d119      	bne.n	8008992 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008968:	f7fa fffe 	bl	8003968 <HAL_GetTick>
 800896c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800896e:	e009      	b.n	8008984 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008970:	f7fa fffa 	bl	8003968 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800897e:	d901      	bls.n	8008984 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e007      	b.n	8008994 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0ee      	beq.n	8008970 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80089aa:	e005      	b.n	80089b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	3b0a      	subs	r3, #10
 80089b6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d8f6      	bhi.n	80089ac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	b2db      	uxtb	r3, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7f1b      	ldrb	r3, [r3, #28]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e03e      	b.n	8008a72 <HAL_RTCEx_SetTimeStamp+0x9a>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2202      	movs	r2, #2
 80089fe:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	22ca      	movs	r2, #202	; 0xca
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2253      	movs	r2, #83	; 0x53
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0206 	bic.w	r2, r2, #6
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	fffff7f7 	.word	0xfffff7f7

08008a84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e149      	b.n	8008d36 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fa fd36 	bl	8003528 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94f 	bl	8008d68 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d007      	beq.n	8008ae2 <HAL_SAI_Init+0x5e>
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d302      	bcc.n	8008adc <HAL_SAI_Init+0x58>
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d006      	beq.n	8008ae8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008ada:	e008      	b.n	8008aee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	61fb      	str	r3, [r7, #28]
      break;
 8008ae0:	e005      	b.n	8008aee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008ae2:	2310      	movs	r3, #16
 8008ae4:	61fb      	str	r3, [r7, #28]
      break;
 8008ae6:	e002      	b.n	8008aee <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008ae8:	2320      	movs	r3, #32
 8008aea:	61fb      	str	r3, [r7, #28]
      break;
 8008aec:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d81d      	bhi.n	8008b32 <HAL_SAI_Init+0xae>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <HAL_SAI_Init+0x78>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b13 	.word	0x08008b13
 8008b04:	08008b1b 	.word	0x08008b1b
 8008b08:	08008b23 	.word	0x08008b23
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b10:	e010      	b.n	8008b34 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b16:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b18:	e00c      	b.n	8008b34 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b1e:	617b      	str	r3, [r7, #20]
      }
      break;
 8008b20:	e008      	b.n	8008b34 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b26:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008b30:	e000      	b.n	8008b34 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008b32:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a81      	ldr	r2, [pc, #516]	; (8008d40 <HAL_SAI_Init+0x2bc>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_SAI_Init+0xc4>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a80      	ldr	r2, [pc, #512]	; (8008d44 <HAL_SAI_Init+0x2c0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d103      	bne.n	8008b50 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b48:	4a7f      	ldr	r2, [pc, #508]	; (8008d48 <HAL_SAI_Init+0x2c4>)
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	e002      	b.n	8008b56 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b50:	4a7e      	ldr	r2, [pc, #504]	; (8008d4c <HAL_SAI_Init+0x2c8>)
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d043      	beq.n	8008be6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a76      	ldr	r2, [pc, #472]	; (8008d40 <HAL_SAI_Init+0x2bc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d004      	beq.n	8008b76 <HAL_SAI_Init+0xf2>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a74      	ldr	r2, [pc, #464]	; (8008d44 <HAL_SAI_Init+0x2c0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d104      	bne.n	8008b80 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b7a:	f7ff fa8d 	bl	8008098 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a72      	ldr	r2, [pc, #456]	; (8008d50 <HAL_SAI_Init+0x2cc>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_SAI_Init+0x110>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a71      	ldr	r2, [pc, #452]	; (8008d54 <HAL_SAI_Init+0x2d0>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d104      	bne.n	8008b9e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b98:	f7ff fa7e 	bl	8008098 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b9c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	025b      	lsls	r3, r3, #9
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a67      	ldr	r2, [pc, #412]	; (8008d58 <HAL_SAI_Init+0x2d4>)
 8008bba:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbe:	08da      	lsrs	r2, r3, #3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	4b64      	ldr	r3, [pc, #400]	; (8008d58 <HAL_SAI_Init+0x2d4>)
 8008bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8008bcc:	08da      	lsrs	r2, r3, #3
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	1aca      	subs	r2, r1, r3
 8008bd8:	2a08      	cmp	r2, #8
 8008bda:	d904      	bls.n	8008be6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_SAI_Init+0x172>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d109      	bne.n	8008c0a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_SAI_Init+0x17e>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e001      	b.n	8008c06 <HAL_SAI_Init+0x182>
 8008c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	e008      	b.n	8008c1c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d102      	bne.n	8008c18 <HAL_SAI_Init+0x194>
 8008c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c16:	e000      	b.n	8008c1a <HAL_SAI_Init+0x196>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b4d      	ldr	r3, [pc, #308]	; (8008d5c <HAL_SAI_Init+0x2d8>)
 8008c28:	400b      	ands	r3, r1
 8008c2a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6819      	ldr	r1, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c40:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	431a      	orrs	r2, r3
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008c54:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c60:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	051b      	lsls	r3, r3, #20
 8008c68:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6859      	ldr	r1, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <HAL_SAI_Init+0x2dc>)
 8008c7e:	400b      	ands	r3, r1
 8008c80:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699a      	ldr	r2, [r3, #24]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	431a      	orrs	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6899      	ldr	r1, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	4b2e      	ldr	r3, [pc, #184]	; (8008d64 <HAL_SAI_Init+0x2e0>)
 8008cac:	400b      	ands	r3, r1
 8008cae:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6899      	ldr	r1, [r3, #8]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cc0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008cc6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008ccc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008cd6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68d9      	ldr	r1, [r3, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008cee:	400b      	ands	r3, r1
 8008cf0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68d9      	ldr	r1, [r3, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40015804 	.word	0x40015804
 8008d44:	40015824 	.word	0x40015824
 8008d48:	40015800 	.word	0x40015800
 8008d4c:	40015c00 	.word	0x40015c00
 8008d50:	40015c04 	.word	0x40015c04
 8008d54:	40015c24 	.word	0x40015c24
 8008d58:	cccccccd 	.word	0xcccccccd
 8008d5c:	ff05c010 	.word	0xff05c010
 8008d60:	ffff1ff0 	.word	0xffff1ff0
 8008d64:	fff88000 	.word	0xfff88000

08008d68 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d68:	b490      	push	{r4, r7}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008d70:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <SAI_Disable+0x64>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <SAI_Disable+0x68>)
 8008d76:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7a:	0b1b      	lsrs	r3, r3, #12
 8008d7c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d90:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d92:	4623      	mov	r3, r4
 8008d94:	1e5c      	subs	r4, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	73fb      	strb	r3, [r7, #15]
      break;
 8008dae:	e006      	b.n	8008dbe <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e9      	bne.n	8008d92 <SAI_Disable+0x2a>

  return status;
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc90      	pop	{r4, r7}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20000018 	.word	0x20000018
 8008dd0:	95cbec1b 	.word	0x95cbec1b

08008dd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e022      	b.n	8008e2c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fa f805 	bl	8002e08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2203      	movs	r2, #3
 8008e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f814 	bl	8008e34 <HAL_SD_InitCard>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e00a      	b.n	8008e2c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e34:	b5b0      	push	{r4, r5, r7, lr}
 8008e36:	b08e      	sub	sp, #56	; 0x38
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e50:	2376      	movs	r3, #118	; 0x76
 8008e52:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681d      	ldr	r5, [r3, #0]
 8008e58:	466c      	mov	r4, sp
 8008e5a:	f107 0314 	add.w	r3, r7, #20
 8008e5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e66:	f107 0308 	add.w	r3, r7, #8
 8008e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	f002 ff51 	bl	800bd14 <SDMMC_Init>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e03b      	b.n	8008efc <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e92:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 ff74 	bl	800bd86 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eac:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fde6 	bl	8009a80 <SD_PowerON>
 8008eb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00b      	beq.n	8008ed4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e013      	b.n	8008efc <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd05 	bl	80098e4 <SD_InitCard>
 8008eda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3728      	adds	r7, #40	; 0x28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bdb0      	pop	{r4, r5, r7, pc}

08008f04 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d107      	bne.n	8008f2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0cc      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 80c5 	bne.w	80090c4 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	441a      	add	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d907      	bls.n	8008f5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0b3      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	4a53      	ldr	r2, [pc, #332]	; (80090d0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	4a52      	ldr	r2, [pc, #328]	; (80090d4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008f8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	2200      	movs	r2, #0
 8008f94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3380      	adds	r3, #128	; 0x80
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	025b      	lsls	r3, r3, #9
 8008fa8:	089b      	lsrs	r3, r3, #2
 8008faa:	f7fb ff8b 	bl	8004ec4 <HAL_DMA_Start_IT>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d017      	beq.n	8008fe4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008fc2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a43      	ldr	r2, [pc, #268]	; (80090d8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e070      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0208 	orr.w	r2, r2, #8
 8008ff2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d002      	beq.n	8009002 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	025b      	lsls	r3, r3, #9
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800900a:	4618      	mov	r0, r3
 800900c:	f002 ff4e 	bl	800beac <SDMMC_CmdBlockLength>
 8009010:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a2e      	ldr	r2, [pc, #184]	; (80090d8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800901e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	431a      	orrs	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e046      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009038:	f04f 33ff 	mov.w	r3, #4294967295
 800903c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	025b      	lsls	r3, r3, #9
 8009042:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009044:	2390      	movs	r3, #144	; 0x90
 8009046:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009048:	2302      	movs	r3, #2
 800904a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800904c:	2300      	movs	r3, #0
 800904e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009050:	2301      	movs	r3, #1
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f107 0210 	add.w	r2, r7, #16
 800905c:	4611      	mov	r1, r2
 800905e:	4618      	mov	r0, r3
 8009060:	f002 fef8 	bl	800be54 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d90a      	bls.n	8009080 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2282      	movs	r2, #130	; 0x82
 800906e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009076:	4618      	mov	r0, r3
 8009078:	f002 ff5c 	bl	800bf34 <SDMMC_CmdReadMultiBlock>
 800907c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800907e:	e009      	b.n	8009094 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2281      	movs	r2, #129	; 0x81
 8009084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800908c:	4618      	mov	r0, r3
 800908e:	f002 ff2f 	bl	800bef0 <SDMMC_CmdReadSingleBlock>
 8009092:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d012      	beq.n	80090c0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a0e      	ldr	r2, [pc, #56]	; (80090d8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	431a      	orrs	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e002      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e000      	b.n	80090c6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80090c4:	2302      	movs	r3, #2
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3730      	adds	r7, #48	; 0x30
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	080097cf 	.word	0x080097cf
 80090d4:	08009841 	.word	0x08009841
 80090d8:	004005ff 	.word	0x004005ff

080090dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d107      	bne.n	8009104 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e0cf      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 80c8 	bne.w	80092a2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	441a      	add	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009122:	429a      	cmp	r2, r3
 8009124:	d907      	bls.n	8009136 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e0b6      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2203      	movs	r2, #3
 800913a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 021a 	orr.w	r2, r2, #26
 8009154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	4a54      	ldr	r2, [pc, #336]	; (80092ac <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800915c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	4a53      	ldr	r2, [pc, #332]	; (80092b0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009164:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	2200      	movs	r2, #0
 800916c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009172:	2b01      	cmp	r3, #1
 8009174:	d002      	beq.n	800917c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	025b      	lsls	r3, r3, #9
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009184:	4618      	mov	r0, r3
 8009186:	f002 fe91 	bl	800beac <SDMMC_CmdBlockLength>
 800918a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a47      	ldr	r2, [pc, #284]	; (80092b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	431a      	orrs	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e078      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d90a      	bls.n	80091ce <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	22a0      	movs	r2, #160	; 0xa0
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091c4:	4618      	mov	r0, r3
 80091c6:	f002 fef9 	bl	800bfbc <SDMMC_CmdWriteMultiBlock>
 80091ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80091cc:	e009      	b.n	80091e2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2290      	movs	r2, #144	; 0x90
 80091d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091da:	4618      	mov	r0, r3
 80091dc:	f002 fecc 	bl	800bf78 <SDMMC_CmdWriteSingleBlock>
 80091e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d012      	beq.n	800920e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a31      	ldr	r2, [pc, #196]	; (80092b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80091ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	431a      	orrs	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e04a      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 0208 	orr.w	r2, r2, #8
 800921c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3380      	adds	r3, #128	; 0x80
 800922a:	461a      	mov	r2, r3
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	025b      	lsls	r3, r3, #9
 8009230:	089b      	lsrs	r3, r3, #2
 8009232:	f7fb fe47 	bl	8004ec4 <HAL_DMA_Start_IT>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 021a 	bic.w	r2, r2, #26
 800924a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a18      	ldr	r2, [pc, #96]	; (80092b4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e018      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009272:	f04f 33ff 	mov.w	r3, #4294967295
 8009276:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	025b      	lsls	r3, r3, #9
 800927c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800927e:	2390      	movs	r3, #144	; 0x90
 8009280:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009282:	2300      	movs	r3, #0
 8009284:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009286:	2300      	movs	r3, #0
 8009288:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800928a:	2301      	movs	r3, #1
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f107 0210 	add.w	r2, r7, #16
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f002 fddb 	bl	800be54 <SDMMC_ConfigData>

      return HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	e000      	b.n	80092a4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80092a2:	2302      	movs	r3, #2
  }
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3730      	adds	r7, #48	; 0x30
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	080097a5 	.word	0x080097a5
 80092b0:	08009841 	.word	0x08009841
 80092b4:	004005ff 	.word	0x004005ff

080092b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092da:	0f9b      	lsrs	r3, r3, #30
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e6:	0e9b      	lsrs	r3, r3, #26
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f8:	0e1b      	lsrs	r3, r3, #24
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	b2da      	uxtb	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	b2da      	uxtb	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	b2da      	uxtb	r2, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009322:	b2da      	uxtb	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800932c:	0d1b      	lsrs	r3, r3, #20
 800932e:	b29a      	uxth	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009338:	0c1b      	lsrs	r3, r3, #16
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	b2da      	uxtb	r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934a:	0bdb      	lsrs	r3, r3, #15
 800934c:	b2db      	uxtb	r3, r3
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	b2da      	uxtb	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935c:	0b9b      	lsrs	r3, r3, #14
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	b2da      	uxtb	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800936e:	0b5b      	lsrs	r3, r3, #13
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	b2da      	uxtb	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009380:	0b1b      	lsrs	r3, r3, #12
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	b2da      	uxtb	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2200      	movs	r2, #0
 8009392:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009398:	2b00      	cmp	r3, #0
 800939a:	d163      	bne.n	8009464 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a0:	009a      	lsls	r2, r3, #2
 80093a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093a6:	4013      	ands	r3, r2
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80093ac:	0f92      	lsrs	r2, r2, #30
 80093ae:	431a      	orrs	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b8:	0edb      	lsrs	r3, r3, #27
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ca:	0e1b      	lsrs	r3, r3, #24
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093dc:	0d5b      	lsrs	r3, r3, #21
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ee:	0c9b      	lsrs	r3, r3, #18
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009400:	0bdb      	lsrs	r3, r3, #15
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	b2da      	uxtb	r2, r3
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	7e1b      	ldrb	r3, [r3, #24]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	3302      	adds	r3, #2
 8009424:	2201      	movs	r2, #1
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800942e:	fb02 f203 	mul.w	r2, r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	7a1b      	ldrb	r3, [r3, #8]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	2201      	movs	r2, #1
 8009442:	409a      	lsls	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009450:	0a52      	lsrs	r2, r2, #9
 8009452:	fb02 f203 	mul.w	r2, r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
 8009462:	e031      	b.n	80094c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009468:	2b01      	cmp	r3, #1
 800946a:	d11d      	bne.n	80094a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009470:	041b      	lsls	r3, r3, #16
 8009472:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947a:	0c1b      	lsrs	r3, r3, #16
 800947c:	431a      	orrs	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	3301      	adds	r3, #1
 8009488:	029a      	lsls	r2, r3, #10
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800949c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	661a      	str	r2, [r3, #96]	; 0x60
 80094a6:	e00f      	b.n	80094c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a58      	ldr	r2, [pc, #352]	; (8009610 <HAL_SD_GetCardCSD+0x344>)
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e09d      	b.n	8009604 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	0b9b      	lsrs	r3, r3, #14
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094de:	09db      	lsrs	r3, r3, #7
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009500:	0fdb      	lsrs	r3, r3, #31
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950c:	0f5b      	lsrs	r3, r3, #29
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 0303 	and.w	r3, r3, #3
 8009514:	b2da      	uxtb	r2, r3
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951e:	0e9b      	lsrs	r3, r3, #26
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	b2da      	uxtb	r2, r3
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009530:	0d9b      	lsrs	r3, r3, #22
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	b2da      	uxtb	r2, r3
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009542:	0d5b      	lsrs	r3, r3, #21
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955e:	0c1b      	lsrs	r3, r3, #16
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	b2da      	uxtb	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009572:	0bdb      	lsrs	r3, r3, #15
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	0b9b      	lsrs	r3, r3, #14
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959a:	0b5b      	lsrs	r3, r3, #13
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	0b1b      	lsrs	r3, r3, #12
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c2:	0a9b      	lsrs	r3, r3, #10
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	004005ff 	.word	0x004005ff

08009614 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800966c:	b5b0      	push	{r4, r5, r7, lr}
 800966e:	b08e      	sub	sp, #56	; 0x38
 8009670:	af04      	add	r7, sp, #16
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2203      	movs	r2, #3
 800967a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009682:	2b03      	cmp	r3, #3
 8009684:	d02e      	beq.n	80096e4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968c:	d106      	bne.n	800969c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	639a      	str	r2, [r3, #56]	; 0x38
 800969a:	e029      	b.n	80096f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096a2:	d10a      	bne.n	80096ba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 faa1 	bl	8009bec <SD_WideBus_Enable>
 80096aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	431a      	orrs	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38
 80096b8:	e01a      	b.n	80096f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fade 	bl	8009c82 <SD_WideBus_Disable>
 80096c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
 80096d4:	e00c      	b.n	80096f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
 80096e2:	e005      	b.n	80096f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d009      	beq.n	800970c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a18      	ldr	r2, [pc, #96]	; (8009760 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80096fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e024      	b.n	8009756 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681d      	ldr	r5, [r3, #0]
 8009732:	466c      	mov	r4, sp
 8009734:	f107 0318 	add.w	r3, r7, #24
 8009738:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800973c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009740:	f107 030c 	add.w	r3, r7, #12
 8009744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009746:	4628      	mov	r0, r5
 8009748:	f002 fae4 	bl	800bd14 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3728      	adds	r7, #40	; 0x28
 800975a:	46bd      	mov	sp, r7
 800975c:	bdb0      	pop	{r4, r5, r7, pc}
 800975e:	bf00      	nop
 8009760:	004005ff 	.word	0x004005ff

08009764 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009770:	f107 030c 	add.w	r3, r7, #12
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa10 	bl	8009b9c <SD_SendStatus>
 800977c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	431a      	orrs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	0a5b      	lsrs	r3, r3, #9
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800979a:	693b      	ldr	r3, [r7, #16]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	2b82      	cmp	r3, #130	; 0x82
 80097e2:	d111      	bne.n	8009808 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f002 fc09 	bl	800c000 <SDMMC_CmdStopTransfer>
 80097ee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fd58 	bl	80092b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0208 	bic.w	r2, r2, #8
 8009816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009820:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f003 f84f 	bl	800c8d4 <HAL_SD_RxCpltCallback>
#endif
}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7fb fb98 	bl	8004f84 <HAL_DMA_GetError>
 8009854:	4603      	mov	r3, r0
 8009856:	2b02      	cmp	r3, #2
 8009858:	d03e      	beq.n	80098d8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009860:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009868:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d002      	beq.n	8009876 <SD_DMAError+0x36>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d12d      	bne.n	80098d2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a19      	ldr	r2, [pc, #100]	; (80098e0 <SD_DMAError+0xa0>)
 800987c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800988c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009892:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800989a:	6978      	ldr	r0, [r7, #20]
 800989c:	f7ff ff62 	bl	8009764 <HAL_SD_GetCardState>
 80098a0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b06      	cmp	r3, #6
 80098a6:	d002      	beq.n	80098ae <SD_DMAError+0x6e>
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d10a      	bne.n	80098c4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fba4 	bl	800c000 <SDMMC_CmdStopTransfer>
 80098b8:	4602      	mov	r2, r0
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	431a      	orrs	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80098d2:	6978      	ldr	r0, [r7, #20]
 80098d4:	f7ff fcf0 	bl	80092b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80098d8:	bf00      	nop
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	004005ff 	.word	0x004005ff

080098e4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098e4:	b5b0      	push	{r4, r5, r7, lr}
 80098e6:	b094      	sub	sp, #80	; 0x50
 80098e8:	af04      	add	r7, sp, #16
 80098ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80098ec:	2301      	movs	r3, #1
 80098ee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f002 fa55 	bl	800bda4 <SDMMC_GetPowerState>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009900:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009904:	e0b7      	b.n	8009a76 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	2b03      	cmp	r3, #3
 800990c:	d02f      	beq.n	800996e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f002 fc7f 	bl	800c216 <SDMMC_CmdSendCID>
 8009918:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800991a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <SD_InitCard+0x40>
    {
      return errorstate;
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	e0a8      	b.n	8009a76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2100      	movs	r1, #0
 800992a:	4618      	mov	r0, r3
 800992c:	f002 fa7f 	bl	800be2e <SDMMC_GetResponse>
 8009930:	4602      	mov	r2, r0
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2104      	movs	r1, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f002 fa76 	bl	800be2e <SDMMC_GetResponse>
 8009942:	4602      	mov	r2, r0
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2108      	movs	r1, #8
 800994e:	4618      	mov	r0, r3
 8009950:	f002 fa6d 	bl	800be2e <SDMMC_GetResponse>
 8009954:	4602      	mov	r2, r0
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	210c      	movs	r1, #12
 8009960:	4618      	mov	r0, r3
 8009962:	f002 fa64 	bl	800be2e <SDMMC_GetResponse>
 8009966:	4602      	mov	r2, r0
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009972:	2b03      	cmp	r3, #3
 8009974:	d00d      	beq.n	8009992 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f107 020e 	add.w	r2, r7, #14
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f002 fc85 	bl	800c290 <SDMMC_CmdSetRelAdd>
 8009986:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <SD_InitCard+0xae>
    {
      return errorstate;
 800998e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009990:	e071      	b.n	8009a76 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009996:	2b03      	cmp	r3, #3
 8009998:	d036      	beq.n	8009a08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800999a:	89fb      	ldrh	r3, [r7, #14]
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f002 fc4f 	bl	800c252 <SDMMC_CmdSendCSD>
 80099b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099be:	e05a      	b.n	8009a76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2100      	movs	r1, #0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f002 fa31 	bl	800be2e <SDMMC_GetResponse>
 80099cc:	4602      	mov	r2, r0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2104      	movs	r1, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f002 fa28 	bl	800be2e <SDMMC_GetResponse>
 80099de:	4602      	mov	r2, r0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2108      	movs	r1, #8
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 fa1f 	bl	800be2e <SDMMC_GetResponse>
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	210c      	movs	r1, #12
 80099fc:	4618      	mov	r0, r3
 80099fe:	f002 fa16 	bl	800be2e <SDMMC_GetResponse>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2104      	movs	r1, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f002 fa0d 	bl	800be2e <SDMMC_GetResponse>
 8009a14:	4603      	mov	r3, r0
 8009a16:	0d1a      	lsrs	r2, r3, #20
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a1c:	f107 0310 	add.w	r3, r7, #16
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7ff fc52 	bl	80092cc <HAL_SD_GetCardCSD>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a32:	e020      	b.n	8009a76 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a3c:	041b      	lsls	r3, r3, #16
 8009a3e:	f04f 0400 	mov.w	r4, #0
 8009a42:	461a      	mov	r2, r3
 8009a44:	4623      	mov	r3, r4
 8009a46:	4608      	mov	r0, r1
 8009a48:	f002 fafc 	bl	800c044 <SDMMC_CmdSelDesel>
 8009a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <SD_InitCard+0x174>
  {
    return errorstate;
 8009a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a56:	e00e      	b.n	8009a76 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681d      	ldr	r5, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	466c      	mov	r4, sp
 8009a60:	f103 0210 	add.w	r2, r3, #16
 8009a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f002 f950 	bl	800bd14 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3740      	adds	r7, #64	; 0x40
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009a80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	617b      	str	r3, [r7, #20]
 8009a90:	2300      	movs	r3, #0
 8009a92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 faf6 	bl	800c08a <SDMMC_CmdGoIdleState>
 8009a9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <SD_PowerON+0x2a>
  {
    return errorstate;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	e072      	b.n	8009b90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 fb09 	bl	800c0c6 <SDMMC_CmdOperCond>
 8009ab4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00d      	beq.n	8009ad8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f002 fadf 	bl	800c08a <SDMMC_CmdGoIdleState>
 8009acc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	e05b      	b.n	8009b90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d137      	bne.n	8009b56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f002 fb09 	bl	800c104 <SDMMC_CmdAppCommand>
 8009af2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d02d      	beq.n	8009b56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009afe:	e047      	b.n	8009b90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f002 fafc 	bl	800c104 <SDMMC_CmdAppCommand>
 8009b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <SD_PowerON+0x98>
    {
      return errorstate;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	e03b      	b.n	8009b90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	491e      	ldr	r1, [pc, #120]	; (8009b98 <SD_PowerON+0x118>)
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f002 fb12 	bl	800c148 <SDMMC_CmdAppOperCommand>
 8009b24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b30:	e02e      	b.n	8009b90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 f978 	bl	800be2e <SDMMC_GetResponse>
 8009b3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	0fdb      	lsrs	r3, r3, #31
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <SD_PowerON+0xcc>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <SD_PowerON+0xce>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]

    count++;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d802      	bhi.n	8009b66 <SD_PowerON+0xe6>
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0cc      	beq.n	8009b00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d902      	bls.n	8009b76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b74:	e00c      	b.n	8009b90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	645a      	str	r2, [r3, #68]	; 0x44
 8009b86:	e002      	b.n	8009b8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	c1100000 	.word	0xc1100000

08009b9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bb0:	e018      	b.n	8009be4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bba:	041b      	lsls	r3, r3, #16
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f002 fb87 	bl	800c2d2 <SDMMC_CmdSendStatus>
 8009bc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	e009      	b.n	8009be4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f002 f929 	bl	800be2e <SDMMC_GetResponse>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2100      	movs	r1, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f002 f913 	bl	800be2e <SDMMC_GetResponse>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c12:	d102      	bne.n	8009c1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c18:	e02f      	b.n	8009c7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c1a:	f107 030c 	add.w	r3, r7, #12
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f879 	bl	8009d18 <SD_FindSCR>
 8009c26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	e023      	b.n	8009c7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01c      	beq.n	8009c76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c44:	041b      	lsls	r3, r3, #16
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f002 fa5b 	bl	800c104 <SDMMC_CmdAppCommand>
 8009c4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	e00f      	b.n	8009c7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2102      	movs	r1, #2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 fa95 	bl	800c190 <SDMMC_CmdBusWidth>
 8009c66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	e003      	b.n	8009c7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e001      	b.n	8009c7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2100      	movs	r1, #0
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 f8c8 	bl	800be2e <SDMMC_GetResponse>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ca8:	d102      	bne.n	8009cb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cae:	e02f      	b.n	8009d10 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f82e 	bl	8009d18 <SD_FindSCR>
 8009cbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	e023      	b.n	8009d10 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01c      	beq.n	8009d0c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f002 fa10 	bl	800c104 <SDMMC_CmdAppCommand>
 8009ce4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	e00f      	b.n	8009d10 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f002 fa4a 	bl	800c190 <SDMMC_CmdBusWidth>
 8009cfc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	e003      	b.n	8009d10 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e001      	b.n	8009d10 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b08f      	sub	sp, #60	; 0x3c
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d22:	f7f9 fe21 	bl	8003968 <HAL_GetTick>
 8009d26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2108      	movs	r1, #8
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f002 f8b4 	bl	800beac <SDMMC_CmdBlockLength>
 8009d44:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4e:	e0a9      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d58:	041b      	lsls	r3, r3, #16
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f002 f9d1 	bl	800c104 <SDMMC_CmdAppCommand>
 8009d62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	e09a      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d74:	2308      	movs	r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d78:	2330      	movs	r3, #48	; 0x30
 8009d7a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f107 0210 	add.w	r2, r7, #16
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f002 f85e 	bl	800be54 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f002 fa19 	bl	800c1d4 <SDMMC_CmdSendSCR>
 8009da2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d022      	beq.n	8009df0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	e07a      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00e      	beq.n	8009dda <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6819      	ldr	r1, [r3, #0]
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	18d4      	adds	r4, r2, r3
 8009dca:	4608      	mov	r0, r1
 8009dcc:	f001 ffce 	bl	800bd6c <SDMMC_ReadFIFO>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	6023      	str	r3, [r4, #0]
      index++;
 8009dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dda:	f7f9 fdc5 	bl	8003968 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de8:	d102      	bne.n	8009df0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dee:	e059      	b.n	8009ea4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df6:	f240 432a 	movw	r3, #1066	; 0x42a
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0d6      	beq.n	8009dae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d005      	beq.n	8009e1a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2208      	movs	r2, #8
 8009e14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e16:	2308      	movs	r3, #8
 8009e18:	e044      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e037      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2220      	movs	r2, #32
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e4a:	2320      	movs	r3, #32
 8009e4c:	e02a      	b.n	8009ea4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	061a      	lsls	r2, r3, #24
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	021b      	lsls	r3, r3, #8
 8009e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	0a1b      	lsrs	r3, r3, #8
 8009e6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	0e1b      	lsrs	r3, r3, #24
 8009e74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	601a      	str	r2, [r3, #0]
    scr++;
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	061a      	lsls	r2, r3, #24
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	021b      	lsls	r3, r3, #8
 8009e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	0e1b      	lsrs	r3, r3, #24
 8009e9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	373c      	adds	r7, #60	; 0x3c
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd90      	pop	{r4, r7, pc}

08009eac <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e025      	b.n	8009f0c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7f9 fb1d 	bl	8003514 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f001 fdeb 	bl	800bac8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	461a      	mov	r2, r3
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	f001 fe55 	bl	800bbac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d101      	bne.n	8009f30 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e018      	b.n	8009f62 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	68b9      	ldr	r1, [r7, #8]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 feb3 	bl	800bcac <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d104      	bne.n	8009f58 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2205      	movs	r2, #5
 8009f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009f56:	e003      	b.n	8009f60 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d101      	bne.n	8009f84 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009f80:	2302      	movs	r3, #2
 8009f82:	e00e      	b.n	8009fa2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 feab 	bl	800bcee <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e04c      	b.n	800a058 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7f8 ff7a 	bl	8002ecc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0203 	bic.w	r2, r2, #3
 8009fee:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4b19      	ldr	r3, [pc, #100]	; (800a060 <HAL_SPDIFRX_Init+0xb4>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a008:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a00e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a014:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a01a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a020:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a026:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a02c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a032:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a038:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	fff88407 	.word	0xfff88407

0800a064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e084      	b.n	800a180 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7f8 ff5d 	bl	8002f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0b6:	d902      	bls.n	800a0be <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60fb      	str	r3, [r7, #12]
 800a0bc:	e002      	b.n	800a0c4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a0cc:	d007      	beq.n	800a0de <HAL_SPI_Init+0x7a>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0d6:	d002      	beq.n	800a0de <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0ee:	d903      	bls.n	800a0f8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30
 800a0f6:	e002      	b.n	800a0fe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	431a      	orrs	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	ea42 0103 	orr.w	r1, r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	430a      	orrs	r2, r1
 800a136:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	0c1b      	lsrs	r3, r3, #16
 800a13e:	f003 0204 	and.w	r2, r3, #4
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14c:	431a      	orrs	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	ea42 0103 	orr.w	r1, r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69da      	ldr	r2, [r3, #28]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a16e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e01d      	b.n	800a1d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7f8 ff30 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f000 fb78 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0201 	orr.w	r2, r2, #1
 800a1f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <HAL_TIM_Base_Start_IT+0x50>)
 800a200:	4013      	ands	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b06      	cmp	r3, #6
 800a208:	d00b      	beq.n	800a222 <HAL_TIM_Base_Start_IT+0x42>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a210:	d007      	beq.n	800a222 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 0201 	orr.w	r2, r2, #1
 800a220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	00010007 	.word	0x00010007

0800a234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e01d      	b.n	800a282 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7f8 ff48 	bl	80030f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f000 fb22 	bl	800a8bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d122      	bne.n	800a2e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d11b      	bne.n	800a2e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f06f 0202 	mvn.w	r2, #2
 800a2b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fad7 	bl	800a880 <HAL_TIM_IC_CaptureCallback>
 800a2d2:	e005      	b.n	800a2e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fac9 	bl	800a86c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fada 	bl	800a894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d122      	bne.n	800a33a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d11b      	bne.n	800a33a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f06f 0204 	mvn.w	r2, #4
 800a30a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 faad 	bl	800a880 <HAL_TIM_IC_CaptureCallback>
 800a326:	e005      	b.n	800a334 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa9f 	bl	800a86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fab0 	bl	800a894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b08      	cmp	r3, #8
 800a346:	d122      	bne.n	800a38e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f003 0308 	and.w	r3, r3, #8
 800a352:	2b08      	cmp	r3, #8
 800a354:	d11b      	bne.n	800a38e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f06f 0208 	mvn.w	r2, #8
 800a35e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2204      	movs	r2, #4
 800a364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f003 0303 	and.w	r3, r3, #3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fa83 	bl	800a880 <HAL_TIM_IC_CaptureCallback>
 800a37a:	e005      	b.n	800a388 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa75 	bl	800a86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa86 	bl	800a894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b10      	cmp	r3, #16
 800a39a:	d122      	bne.n	800a3e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	2b10      	cmp	r3, #16
 800a3a8:	d11b      	bne.n	800a3e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f06f 0210 	mvn.w	r2, #16
 800a3b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa59 	bl	800a880 <HAL_TIM_IC_CaptureCallback>
 800a3ce:	e005      	b.n	800a3dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fa4b 	bl	800a86c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa5c 	bl	800a894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d10e      	bne.n	800a40e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d107      	bne.n	800a40e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f06f 0201 	mvn.w	r2, #1
 800a406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7f8 f985 	bl	8002718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a418:	2b80      	cmp	r3, #128	; 0x80
 800a41a:	d10e      	bne.n	800a43a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d107      	bne.n	800a43a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 feef 	bl	800b218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a448:	d10e      	bne.n	800a468 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a454:	2b80      	cmp	r3, #128	; 0x80
 800a456:	d107      	bne.n	800a468 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fee2 	bl	800b22c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	d10e      	bne.n	800a494 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a480:	2b40      	cmp	r3, #64	; 0x40
 800a482:	d107      	bne.n	800a494 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a48c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa0a 	bl	800a8a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	f003 0320 	and.w	r3, r3, #32
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	d10e      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d107      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0220 	mvn.w	r2, #32
 800a4b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fea2 	bl	800b204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4c0:	bf00      	nop
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e105      	b.n	800a6ee <HAL_TIM_PWM_ConfigChannel+0x226>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b14      	cmp	r3, #20
 800a4f6:	f200 80f0 	bhi.w	800a6da <HAL_TIM_PWM_ConfigChannel+0x212>
 800a4fa:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a555 	.word	0x0800a555
 800a504:	0800a6db 	.word	0x0800a6db
 800a508:	0800a6db 	.word	0x0800a6db
 800a50c:	0800a6db 	.word	0x0800a6db
 800a510:	0800a595 	.word	0x0800a595
 800a514:	0800a6db 	.word	0x0800a6db
 800a518:	0800a6db 	.word	0x0800a6db
 800a51c:	0800a6db 	.word	0x0800a6db
 800a520:	0800a5d7 	.word	0x0800a5d7
 800a524:	0800a6db 	.word	0x0800a6db
 800a528:	0800a6db 	.word	0x0800a6db
 800a52c:	0800a6db 	.word	0x0800a6db
 800a530:	0800a617 	.word	0x0800a617
 800a534:	0800a6db 	.word	0x0800a6db
 800a538:	0800a6db 	.word	0x0800a6db
 800a53c:	0800a6db 	.word	0x0800a6db
 800a540:	0800a659 	.word	0x0800a659
 800a544:	0800a6db 	.word	0x0800a6db
 800a548:	0800a6db 	.word	0x0800a6db
 800a54c:	0800a6db 	.word	0x0800a6db
 800a550:	0800a699 	.word	0x0800a699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fa4e 	bl	800a9fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0208 	orr.w	r2, r2, #8
 800a56e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	699a      	ldr	r2, [r3, #24]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0204 	bic.w	r2, r2, #4
 800a57e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6999      	ldr	r1, [r3, #24]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	691a      	ldr	r2, [r3, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	619a      	str	r2, [r3, #24]
      break;
 800a592:	e0a3      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 faa0 	bl	800aae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699a      	ldr	r2, [r3, #24]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6999      	ldr	r1, [r3, #24]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	021a      	lsls	r2, r3, #8
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	619a      	str	r2, [r3, #24]
      break;
 800a5d4:	e082      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 faf7 	bl	800abd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	69da      	ldr	r2, [r3, #28]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f042 0208 	orr.w	r2, r2, #8
 800a5f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69da      	ldr	r2, [r3, #28]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0204 	bic.w	r2, r2, #4
 800a600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69d9      	ldr	r1, [r3, #28]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	61da      	str	r2, [r3, #28]
      break;
 800a614:	e062      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fb4d 	bl	800acbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69da      	ldr	r2, [r3, #28]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69d9      	ldr	r1, [r3, #28]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	021a      	lsls	r2, r3, #8
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	430a      	orrs	r2, r1
 800a654:	61da      	str	r2, [r3, #28]
      break;
 800a656:	e041      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fb84 	bl	800ad6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0208 	orr.w	r2, r2, #8
 800a672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0204 	bic.w	r2, r2, #4
 800a682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a696:	e021      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fbb6 	bl	800ae10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6d8:	e000      	b.n	800a6dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a6da:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop

0800a6f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_TIM_ConfigClockSource+0x18>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e0a6      	b.n	800a85e <HAL_TIM_ConfigClockSource+0x166>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4b4f      	ldr	r3, [pc, #316]	; (800a868 <HAL_TIM_ConfigClockSource+0x170>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2b40      	cmp	r3, #64	; 0x40
 800a746:	d067      	beq.n	800a818 <HAL_TIM_ConfigClockSource+0x120>
 800a748:	2b40      	cmp	r3, #64	; 0x40
 800a74a:	d80b      	bhi.n	800a764 <HAL_TIM_ConfigClockSource+0x6c>
 800a74c:	2b10      	cmp	r3, #16
 800a74e:	d073      	beq.n	800a838 <HAL_TIM_ConfigClockSource+0x140>
 800a750:	2b10      	cmp	r3, #16
 800a752:	d802      	bhi.n	800a75a <HAL_TIM_ConfigClockSource+0x62>
 800a754:	2b00      	cmp	r3, #0
 800a756:	d06f      	beq.n	800a838 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a758:	e078      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	d06c      	beq.n	800a838 <HAL_TIM_ConfigClockSource+0x140>
 800a75e:	2b30      	cmp	r3, #48	; 0x30
 800a760:	d06a      	beq.n	800a838 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a762:	e073      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a764:	2b70      	cmp	r3, #112	; 0x70
 800a766:	d00d      	beq.n	800a784 <HAL_TIM_ConfigClockSource+0x8c>
 800a768:	2b70      	cmp	r3, #112	; 0x70
 800a76a:	d804      	bhi.n	800a776 <HAL_TIM_ConfigClockSource+0x7e>
 800a76c:	2b50      	cmp	r3, #80	; 0x50
 800a76e:	d033      	beq.n	800a7d8 <HAL_TIM_ConfigClockSource+0xe0>
 800a770:	2b60      	cmp	r3, #96	; 0x60
 800a772:	d041      	beq.n	800a7f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a774:	e06a      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77a:	d066      	beq.n	800a84a <HAL_TIM_ConfigClockSource+0x152>
 800a77c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a780:	d017      	beq.n	800a7b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a782:	e063      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6818      	ldr	r0, [r3, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	6899      	ldr	r1, [r3, #8]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f000 fc0a 	bl	800afac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	609a      	str	r2, [r3, #8]
      break;
 800a7b0:	e04c      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6899      	ldr	r1, [r3, #8]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f000 fbf3 	bl	800afac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7d4:	609a      	str	r2, [r3, #8]
      break;
 800a7d6:	e039      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	6859      	ldr	r1, [r3, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	f000 fb67 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2150      	movs	r1, #80	; 0x50
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fbc0 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a7f6:	e029      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6859      	ldr	r1, [r3, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	461a      	mov	r2, r3
 800a806:	f000 fb86 	bl	800af16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2160      	movs	r1, #96	; 0x60
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fbb0 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a816:	e019      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	6859      	ldr	r1, [r3, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	461a      	mov	r2, r3
 800a826:	f000 fb47 	bl	800aeb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2140      	movs	r1, #64	; 0x40
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fba0 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a836:	e009      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4619      	mov	r1, r3
 800a842:	4610      	mov	r0, r2
 800a844:	f000 fb97 	bl	800af76 <TIM_ITRx_SetConfig>
      break;
 800a848:	e000      	b.n	800a84c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a84a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	fffeff88 	.word	0xfffeff88

0800a86c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a40      	ldr	r2, [pc, #256]	; (800a9d0 <TIM_Base_SetConfig+0x114>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d013      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8da:	d00f      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a3d      	ldr	r2, [pc, #244]	; (800a9d4 <TIM_Base_SetConfig+0x118>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d00b      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a3c      	ldr	r2, [pc, #240]	; (800a9d8 <TIM_Base_SetConfig+0x11c>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d007      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a3b      	ldr	r2, [pc, #236]	; (800a9dc <TIM_Base_SetConfig+0x120>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d003      	beq.n	800a8fc <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a3a      	ldr	r2, [pc, #232]	; (800a9e0 <TIM_Base_SetConfig+0x124>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d108      	bne.n	800a90e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a2f      	ldr	r2, [pc, #188]	; (800a9d0 <TIM_Base_SetConfig+0x114>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d02b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91c:	d027      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2c      	ldr	r2, [pc, #176]	; (800a9d4 <TIM_Base_SetConfig+0x118>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d023      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2b      	ldr	r2, [pc, #172]	; (800a9d8 <TIM_Base_SetConfig+0x11c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01f      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a2a      	ldr	r2, [pc, #168]	; (800a9dc <TIM_Base_SetConfig+0x120>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a29      	ldr	r2, [pc, #164]	; (800a9e0 <TIM_Base_SetConfig+0x124>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d017      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a28      	ldr	r2, [pc, #160]	; (800a9e4 <TIM_Base_SetConfig+0x128>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d013      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a27      	ldr	r2, [pc, #156]	; (800a9e8 <TIM_Base_SetConfig+0x12c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00f      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a26      	ldr	r2, [pc, #152]	; (800a9ec <TIM_Base_SetConfig+0x130>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00b      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a25      	ldr	r2, [pc, #148]	; (800a9f0 <TIM_Base_SetConfig+0x134>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d007      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a24      	ldr	r2, [pc, #144]	; (800a9f4 <TIM_Base_SetConfig+0x138>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d003      	beq.n	800a96e <TIM_Base_SetConfig+0xb2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a23      	ldr	r2, [pc, #140]	; (800a9f8 <TIM_Base_SetConfig+0x13c>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d108      	bne.n	800a980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <TIM_Base_SetConfig+0x114>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d003      	beq.n	800a9b4 <TIM_Base_SetConfig+0xf8>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a0c      	ldr	r2, [pc, #48]	; (800a9e0 <TIM_Base_SetConfig+0x124>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d103      	bne.n	800a9bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	691a      	ldr	r2, [r3, #16]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	615a      	str	r2, [r3, #20]
}
 800a9c2:	bf00      	nop
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	40010000 	.word	0x40010000
 800a9d4:	40000400 	.word	0x40000400
 800a9d8:	40000800 	.word	0x40000800
 800a9dc:	40000c00 	.word	0x40000c00
 800a9e0:	40010400 	.word	0x40010400
 800a9e4:	40014000 	.word	0x40014000
 800a9e8:	40014400 	.word	0x40014400
 800a9ec:	40014800 	.word	0x40014800
 800a9f0:	40001800 	.word	0x40001800
 800a9f4:	40001c00 	.word	0x40001c00
 800a9f8:	40002000 	.word	0x40002000

0800a9fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0201 	bic.w	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	4b2b      	ldr	r3, [pc, #172]	; (800aad4 <TIM_OC1_SetConfig+0xd8>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0303 	bic.w	r3, r3, #3
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f023 0302 	bic.w	r3, r3, #2
 800aa44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a21      	ldr	r2, [pc, #132]	; (800aad8 <TIM_OC1_SetConfig+0xdc>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d003      	beq.n	800aa60 <TIM_OC1_SetConfig+0x64>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a20      	ldr	r2, [pc, #128]	; (800aadc <TIM_OC1_SetConfig+0xe0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d10c      	bne.n	800aa7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f023 0308 	bic.w	r3, r3, #8
 800aa66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f023 0304 	bic.w	r3, r3, #4
 800aa78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a16      	ldr	r2, [pc, #88]	; (800aad8 <TIM_OC1_SetConfig+0xdc>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d003      	beq.n	800aa8a <TIM_OC1_SetConfig+0x8e>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a15      	ldr	r2, [pc, #84]	; (800aadc <TIM_OC1_SetConfig+0xe0>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d111      	bne.n	800aaae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	621a      	str	r2, [r3, #32]
}
 800aac8:	bf00      	nop
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	fffeff8f 	.word	0xfffeff8f
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40010400 	.word	0x40010400

0800aae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	f023 0210 	bic.w	r2, r3, #16
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	4b2e      	ldr	r3, [pc, #184]	; (800abc4 <TIM_OC2_SetConfig+0xe4>)
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0320 	bic.w	r3, r3, #32
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a23      	ldr	r2, [pc, #140]	; (800abc8 <TIM_OC2_SetConfig+0xe8>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_OC2_SetConfig+0x68>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a22      	ldr	r2, [pc, #136]	; (800abcc <TIM_OC2_SetConfig+0xec>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10d      	bne.n	800ab64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a18      	ldr	r2, [pc, #96]	; (800abc8 <TIM_OC2_SetConfig+0xe8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d003      	beq.n	800ab74 <TIM_OC2_SetConfig+0x94>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a17      	ldr	r2, [pc, #92]	; (800abcc <TIM_OC2_SetConfig+0xec>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d113      	bne.n	800ab9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	621a      	str	r2, [r3, #32]
}
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	feff8fff 	.word	0xfeff8fff
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400

0800abd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4b2d      	ldr	r3, [pc, #180]	; (800acb0 <TIM_OC3_SetConfig+0xe0>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	021b      	lsls	r3, r3, #8
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a22      	ldr	r2, [pc, #136]	; (800acb4 <TIM_OC3_SetConfig+0xe4>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_OC3_SetConfig+0x66>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a21      	ldr	r2, [pc, #132]	; (800acb8 <TIM_OC3_SetConfig+0xe8>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d10d      	bne.n	800ac52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a17      	ldr	r2, [pc, #92]	; (800acb4 <TIM_OC3_SetConfig+0xe4>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d003      	beq.n	800ac62 <TIM_OC3_SetConfig+0x92>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a16      	ldr	r2, [pc, #88]	; (800acb8 <TIM_OC3_SetConfig+0xe8>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d113      	bne.n	800ac8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	699b      	ldr	r3, [r3, #24]
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	621a      	str	r2, [r3, #32]
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	fffeff8f 	.word	0xfffeff8f
 800acb4:	40010000 	.word	0x40010000
 800acb8:	40010400 	.word	0x40010400

0800acbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4b1e      	ldr	r3, [pc, #120]	; (800ad60 <TIM_OC4_SetConfig+0xa4>)
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	031b      	lsls	r3, r3, #12
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <TIM_OC4_SetConfig+0xa8>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d003      	beq.n	800ad24 <TIM_OC4_SetConfig+0x68>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a12      	ldr	r2, [pc, #72]	; (800ad68 <TIM_OC4_SetConfig+0xac>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d109      	bne.n	800ad38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	019b      	lsls	r3, r3, #6
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	621a      	str	r2, [r3, #32]
}
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	feff8fff 	.word	0xfeff8fff
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40010400 	.word	0x40010400

0800ad6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4b1b      	ldr	r3, [pc, #108]	; (800ae04 <TIM_OC5_SetConfig+0x98>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a12      	ldr	r2, [pc, #72]	; (800ae08 <TIM_OC5_SetConfig+0x9c>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d003      	beq.n	800adca <TIM_OC5_SetConfig+0x5e>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a11      	ldr	r2, [pc, #68]	; (800ae0c <TIM_OC5_SetConfig+0xa0>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d109      	bne.n	800adde <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800add0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	4313      	orrs	r3, r2
 800addc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	621a      	str	r2, [r3, #32]
}
 800adf8:	bf00      	nop
 800adfa:	371c      	adds	r7, #28
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	fffeff8f 	.word	0xfffeff8f
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40010400 	.word	0x40010400

0800ae10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4b1c      	ldr	r3, [pc, #112]	; (800aeac <TIM_OC6_SetConfig+0x9c>)
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	051b      	lsls	r3, r3, #20
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a13      	ldr	r2, [pc, #76]	; (800aeb0 <TIM_OC6_SetConfig+0xa0>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d003      	beq.n	800ae70 <TIM_OC6_SetConfig+0x60>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a12      	ldr	r2, [pc, #72]	; (800aeb4 <TIM_OC6_SetConfig+0xa4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d109      	bne.n	800ae84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	029b      	lsls	r3, r3, #10
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	621a      	str	r2, [r3, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	feff8fff 	.word	0xfeff8fff
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	40010400 	.word	0x40010400

0800aeb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f023 0201 	bic.w	r2, r3, #1
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f023 030a 	bic.w	r3, r3, #10
 800aef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	bf00      	nop
 800af0c:	371c      	adds	r7, #28
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af16:	b480      	push	{r7}
 800af18:	b087      	sub	sp, #28
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	031b      	lsls	r3, r3, #12
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	621a      	str	r2, [r3, #32]
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af76:	b480      	push	{r7}
 800af78:	b085      	sub	sp, #20
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4313      	orrs	r3, r2
 800af94:	f043 0307 	orr.w	r3, r3, #7
 800af98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	609a      	str	r2, [r3, #8]
}
 800afa0:	bf00      	nop
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	021a      	lsls	r2, r3, #8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	431a      	orrs	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	609a      	str	r2, [r3, #8]
}
 800afe0:	bf00      	nop
 800afe2:	371c      	adds	r7, #28
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800affc:	2b01      	cmp	r3, #1
 800affe:	d101      	bne.n	800b004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b000:	2302      	movs	r3, #2
 800b002:	e06d      	b.n	800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a30      	ldr	r2, [pc, #192]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d004      	beq.n	800b038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a2f      	ldr	r2, [pc, #188]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d108      	bne.n	800b04a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b03e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a20      	ldr	r2, [pc, #128]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d022      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b076:	d01d      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d018      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a1c      	ldr	r2, [pc, #112]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d013      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00e      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a15      	ldr	r2, [pc, #84]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d009      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a16      	ldr	r2, [pc, #88]	; (800b100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d004      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a15      	ldr	r2, [pc, #84]	; (800b104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d10c      	bne.n	800b0ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	40010000 	.word	0x40010000
 800b0f0:	40010400 	.word	0x40010400
 800b0f4:	40000400 	.word	0x40000400
 800b0f8:	40000800 	.word	0x40000800
 800b0fc:	40000c00 	.word	0x40000c00
 800b100:	40014000 	.word	0x40014000
 800b104:	40001800 	.word	0x40001800

0800b108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d101      	bne.n	800b124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b120:	2302      	movs	r3, #2
 800b122:	e065      	b.n	800b1f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	041b      	lsls	r3, r3, #16
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a16      	ldr	r2, [pc, #88]	; (800b1fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d004      	beq.n	800b1b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a14      	ldr	r2, [pc, #80]	; (800b200 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d115      	bne.n	800b1de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	051b      	lsls	r3, r3, #20
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	40010000 	.word	0x40010000
 800b200:	40010400 	.word	0x40010400

0800b204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e040      	b.n	800b2d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b256:	2b00      	cmp	r3, #0
 800b258:	d106      	bne.n	800b268 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7f8 f832 	bl	80032cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2224      	movs	r2, #36	; 0x24
 800b26c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f022 0201 	bic.w	r2, r2, #1
 800b27c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f82c 	bl	800b2dc <UART_SetConfig>
 800b284:	4603      	mov	r3, r0
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e022      	b.n	800b2d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 faca 	bl	800b830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689a      	ldr	r2, [r3, #8]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0201 	orr.w	r2, r2, #1
 800b2ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fb51 	bl	800b974 <UART_CheckIdleState>
 800b2d2:	4603      	mov	r3, r0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689a      	ldr	r2, [r3, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	4313      	orrs	r3, r2
 800b302:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4bb1      	ldr	r3, [pc, #708]	; (800b5d0 <UART_SetConfig+0x2f4>)
 800b30c:	4013      	ands	r3, r2
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6812      	ldr	r2, [r2, #0]
 800b312:	6939      	ldr	r1, [r7, #16]
 800b314:	430b      	orrs	r3, r1
 800b316:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	430a      	orrs	r2, r1
 800b350:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a9f      	ldr	r2, [pc, #636]	; (800b5d4 <UART_SetConfig+0x2f8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d121      	bne.n	800b3a0 <UART_SetConfig+0xc4>
 800b35c:	4b9e      	ldr	r3, [pc, #632]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	2b03      	cmp	r3, #3
 800b368:	d816      	bhi.n	800b398 <UART_SetConfig+0xbc>
 800b36a:	a201      	add	r2, pc, #4	; (adr r2, 800b370 <UART_SetConfig+0x94>)
 800b36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b370:	0800b381 	.word	0x0800b381
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b387 	.word	0x0800b387
 800b37c:	0800b393 	.word	0x0800b393
 800b380:	2301      	movs	r3, #1
 800b382:	77fb      	strb	r3, [r7, #31]
 800b384:	e151      	b.n	800b62a <UART_SetConfig+0x34e>
 800b386:	2302      	movs	r3, #2
 800b388:	77fb      	strb	r3, [r7, #31]
 800b38a:	e14e      	b.n	800b62a <UART_SetConfig+0x34e>
 800b38c:	2304      	movs	r3, #4
 800b38e:	77fb      	strb	r3, [r7, #31]
 800b390:	e14b      	b.n	800b62a <UART_SetConfig+0x34e>
 800b392:	2308      	movs	r3, #8
 800b394:	77fb      	strb	r3, [r7, #31]
 800b396:	e148      	b.n	800b62a <UART_SetConfig+0x34e>
 800b398:	2310      	movs	r3, #16
 800b39a:	77fb      	strb	r3, [r7, #31]
 800b39c:	bf00      	nop
 800b39e:	e144      	b.n	800b62a <UART_SetConfig+0x34e>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a8d      	ldr	r2, [pc, #564]	; (800b5dc <UART_SetConfig+0x300>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d134      	bne.n	800b414 <UART_SetConfig+0x138>
 800b3aa:	4b8b      	ldr	r3, [pc, #556]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b0:	f003 030c 	and.w	r3, r3, #12
 800b3b4:	2b0c      	cmp	r3, #12
 800b3b6:	d829      	bhi.n	800b40c <UART_SetConfig+0x130>
 800b3b8:	a201      	add	r2, pc, #4	; (adr r2, 800b3c0 <UART_SetConfig+0xe4>)
 800b3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3be:	bf00      	nop
 800b3c0:	0800b3f5 	.word	0x0800b3f5
 800b3c4:	0800b40d 	.word	0x0800b40d
 800b3c8:	0800b40d 	.word	0x0800b40d
 800b3cc:	0800b40d 	.word	0x0800b40d
 800b3d0:	0800b401 	.word	0x0800b401
 800b3d4:	0800b40d 	.word	0x0800b40d
 800b3d8:	0800b40d 	.word	0x0800b40d
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b3fb 	.word	0x0800b3fb
 800b3e4:	0800b40d 	.word	0x0800b40d
 800b3e8:	0800b40d 	.word	0x0800b40d
 800b3ec:	0800b40d 	.word	0x0800b40d
 800b3f0:	0800b407 	.word	0x0800b407
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	77fb      	strb	r3, [r7, #31]
 800b3f8:	e117      	b.n	800b62a <UART_SetConfig+0x34e>
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	77fb      	strb	r3, [r7, #31]
 800b3fe:	e114      	b.n	800b62a <UART_SetConfig+0x34e>
 800b400:	2304      	movs	r3, #4
 800b402:	77fb      	strb	r3, [r7, #31]
 800b404:	e111      	b.n	800b62a <UART_SetConfig+0x34e>
 800b406:	2308      	movs	r3, #8
 800b408:	77fb      	strb	r3, [r7, #31]
 800b40a:	e10e      	b.n	800b62a <UART_SetConfig+0x34e>
 800b40c:	2310      	movs	r3, #16
 800b40e:	77fb      	strb	r3, [r7, #31]
 800b410:	bf00      	nop
 800b412:	e10a      	b.n	800b62a <UART_SetConfig+0x34e>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a71      	ldr	r2, [pc, #452]	; (800b5e0 <UART_SetConfig+0x304>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d120      	bne.n	800b460 <UART_SetConfig+0x184>
 800b41e:	4b6e      	ldr	r3, [pc, #440]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b424:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d00f      	beq.n	800b44c <UART_SetConfig+0x170>
 800b42c:	2b10      	cmp	r3, #16
 800b42e:	d802      	bhi.n	800b436 <UART_SetConfig+0x15a>
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <UART_SetConfig+0x164>
 800b434:	e010      	b.n	800b458 <UART_SetConfig+0x17c>
 800b436:	2b20      	cmp	r3, #32
 800b438:	d005      	beq.n	800b446 <UART_SetConfig+0x16a>
 800b43a:	2b30      	cmp	r3, #48	; 0x30
 800b43c:	d009      	beq.n	800b452 <UART_SetConfig+0x176>
 800b43e:	e00b      	b.n	800b458 <UART_SetConfig+0x17c>
 800b440:	2300      	movs	r3, #0
 800b442:	77fb      	strb	r3, [r7, #31]
 800b444:	e0f1      	b.n	800b62a <UART_SetConfig+0x34e>
 800b446:	2302      	movs	r3, #2
 800b448:	77fb      	strb	r3, [r7, #31]
 800b44a:	e0ee      	b.n	800b62a <UART_SetConfig+0x34e>
 800b44c:	2304      	movs	r3, #4
 800b44e:	77fb      	strb	r3, [r7, #31]
 800b450:	e0eb      	b.n	800b62a <UART_SetConfig+0x34e>
 800b452:	2308      	movs	r3, #8
 800b454:	77fb      	strb	r3, [r7, #31]
 800b456:	e0e8      	b.n	800b62a <UART_SetConfig+0x34e>
 800b458:	2310      	movs	r3, #16
 800b45a:	77fb      	strb	r3, [r7, #31]
 800b45c:	bf00      	nop
 800b45e:	e0e4      	b.n	800b62a <UART_SetConfig+0x34e>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a5f      	ldr	r2, [pc, #380]	; (800b5e4 <UART_SetConfig+0x308>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d120      	bne.n	800b4ac <UART_SetConfig+0x1d0>
 800b46a:	4b5b      	ldr	r3, [pc, #364]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b46c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b470:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b474:	2b40      	cmp	r3, #64	; 0x40
 800b476:	d00f      	beq.n	800b498 <UART_SetConfig+0x1bc>
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	d802      	bhi.n	800b482 <UART_SetConfig+0x1a6>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <UART_SetConfig+0x1b0>
 800b480:	e010      	b.n	800b4a4 <UART_SetConfig+0x1c8>
 800b482:	2b80      	cmp	r3, #128	; 0x80
 800b484:	d005      	beq.n	800b492 <UART_SetConfig+0x1b6>
 800b486:	2bc0      	cmp	r3, #192	; 0xc0
 800b488:	d009      	beq.n	800b49e <UART_SetConfig+0x1c2>
 800b48a:	e00b      	b.n	800b4a4 <UART_SetConfig+0x1c8>
 800b48c:	2300      	movs	r3, #0
 800b48e:	77fb      	strb	r3, [r7, #31]
 800b490:	e0cb      	b.n	800b62a <UART_SetConfig+0x34e>
 800b492:	2302      	movs	r3, #2
 800b494:	77fb      	strb	r3, [r7, #31]
 800b496:	e0c8      	b.n	800b62a <UART_SetConfig+0x34e>
 800b498:	2304      	movs	r3, #4
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e0c5      	b.n	800b62a <UART_SetConfig+0x34e>
 800b49e:	2308      	movs	r3, #8
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e0c2      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	bf00      	nop
 800b4aa:	e0be      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a4d      	ldr	r2, [pc, #308]	; (800b5e8 <UART_SetConfig+0x30c>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d124      	bne.n	800b500 <UART_SetConfig+0x224>
 800b4b6:	4b48      	ldr	r3, [pc, #288]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c4:	d012      	beq.n	800b4ec <UART_SetConfig+0x210>
 800b4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ca:	d802      	bhi.n	800b4d2 <UART_SetConfig+0x1f6>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d007      	beq.n	800b4e0 <UART_SetConfig+0x204>
 800b4d0:	e012      	b.n	800b4f8 <UART_SetConfig+0x21c>
 800b4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d6:	d006      	beq.n	800b4e6 <UART_SetConfig+0x20a>
 800b4d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4dc:	d009      	beq.n	800b4f2 <UART_SetConfig+0x216>
 800b4de:	e00b      	b.n	800b4f8 <UART_SetConfig+0x21c>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	77fb      	strb	r3, [r7, #31]
 800b4e4:	e0a1      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	77fb      	strb	r3, [r7, #31]
 800b4ea:	e09e      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4ec:	2304      	movs	r3, #4
 800b4ee:	77fb      	strb	r3, [r7, #31]
 800b4f0:	e09b      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	77fb      	strb	r3, [r7, #31]
 800b4f6:	e098      	b.n	800b62a <UART_SetConfig+0x34e>
 800b4f8:	2310      	movs	r3, #16
 800b4fa:	77fb      	strb	r3, [r7, #31]
 800b4fc:	bf00      	nop
 800b4fe:	e094      	b.n	800b62a <UART_SetConfig+0x34e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a39      	ldr	r2, [pc, #228]	; (800b5ec <UART_SetConfig+0x310>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d124      	bne.n	800b554 <UART_SetConfig+0x278>
 800b50a:	4b33      	ldr	r3, [pc, #204]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b518:	d012      	beq.n	800b540 <UART_SetConfig+0x264>
 800b51a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b51e:	d802      	bhi.n	800b526 <UART_SetConfig+0x24a>
 800b520:	2b00      	cmp	r3, #0
 800b522:	d007      	beq.n	800b534 <UART_SetConfig+0x258>
 800b524:	e012      	b.n	800b54c <UART_SetConfig+0x270>
 800b526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b52a:	d006      	beq.n	800b53a <UART_SetConfig+0x25e>
 800b52c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b530:	d009      	beq.n	800b546 <UART_SetConfig+0x26a>
 800b532:	e00b      	b.n	800b54c <UART_SetConfig+0x270>
 800b534:	2301      	movs	r3, #1
 800b536:	77fb      	strb	r3, [r7, #31]
 800b538:	e077      	b.n	800b62a <UART_SetConfig+0x34e>
 800b53a:	2302      	movs	r3, #2
 800b53c:	77fb      	strb	r3, [r7, #31]
 800b53e:	e074      	b.n	800b62a <UART_SetConfig+0x34e>
 800b540:	2304      	movs	r3, #4
 800b542:	77fb      	strb	r3, [r7, #31]
 800b544:	e071      	b.n	800b62a <UART_SetConfig+0x34e>
 800b546:	2308      	movs	r3, #8
 800b548:	77fb      	strb	r3, [r7, #31]
 800b54a:	e06e      	b.n	800b62a <UART_SetConfig+0x34e>
 800b54c:	2310      	movs	r3, #16
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	bf00      	nop
 800b552:	e06a      	b.n	800b62a <UART_SetConfig+0x34e>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a25      	ldr	r2, [pc, #148]	; (800b5f0 <UART_SetConfig+0x314>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d124      	bne.n	800b5a8 <UART_SetConfig+0x2cc>
 800b55e:	4b1e      	ldr	r3, [pc, #120]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b564:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b56c:	d012      	beq.n	800b594 <UART_SetConfig+0x2b8>
 800b56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b572:	d802      	bhi.n	800b57a <UART_SetConfig+0x29e>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <UART_SetConfig+0x2ac>
 800b578:	e012      	b.n	800b5a0 <UART_SetConfig+0x2c4>
 800b57a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b57e:	d006      	beq.n	800b58e <UART_SetConfig+0x2b2>
 800b580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b584:	d009      	beq.n	800b59a <UART_SetConfig+0x2be>
 800b586:	e00b      	b.n	800b5a0 <UART_SetConfig+0x2c4>
 800b588:	2300      	movs	r3, #0
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e04d      	b.n	800b62a <UART_SetConfig+0x34e>
 800b58e:	2302      	movs	r3, #2
 800b590:	77fb      	strb	r3, [r7, #31]
 800b592:	e04a      	b.n	800b62a <UART_SetConfig+0x34e>
 800b594:	2304      	movs	r3, #4
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e047      	b.n	800b62a <UART_SetConfig+0x34e>
 800b59a:	2308      	movs	r3, #8
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e044      	b.n	800b62a <UART_SetConfig+0x34e>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	bf00      	nop
 800b5a6:	e040      	b.n	800b62a <UART_SetConfig+0x34e>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a11      	ldr	r2, [pc, #68]	; (800b5f4 <UART_SetConfig+0x318>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d139      	bne.n	800b626 <UART_SetConfig+0x34a>
 800b5b2:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <UART_SetConfig+0x2fc>)
 800b5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c0:	d027      	beq.n	800b612 <UART_SetConfig+0x336>
 800b5c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c6:	d817      	bhi.n	800b5f8 <UART_SetConfig+0x31c>
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d01c      	beq.n	800b606 <UART_SetConfig+0x32a>
 800b5cc:	e027      	b.n	800b61e <UART_SetConfig+0x342>
 800b5ce:	bf00      	nop
 800b5d0:	efff69f3 	.word	0xefff69f3
 800b5d4:	40011000 	.word	0x40011000
 800b5d8:	40023800 	.word	0x40023800
 800b5dc:	40004400 	.word	0x40004400
 800b5e0:	40004800 	.word	0x40004800
 800b5e4:	40004c00 	.word	0x40004c00
 800b5e8:	40005000 	.word	0x40005000
 800b5ec:	40011400 	.word	0x40011400
 800b5f0:	40007800 	.word	0x40007800
 800b5f4:	40007c00 	.word	0x40007c00
 800b5f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5fc:	d006      	beq.n	800b60c <UART_SetConfig+0x330>
 800b5fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b602:	d009      	beq.n	800b618 <UART_SetConfig+0x33c>
 800b604:	e00b      	b.n	800b61e <UART_SetConfig+0x342>
 800b606:	2300      	movs	r3, #0
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	e00e      	b.n	800b62a <UART_SetConfig+0x34e>
 800b60c:	2302      	movs	r3, #2
 800b60e:	77fb      	strb	r3, [r7, #31]
 800b610:	e00b      	b.n	800b62a <UART_SetConfig+0x34e>
 800b612:	2304      	movs	r3, #4
 800b614:	77fb      	strb	r3, [r7, #31]
 800b616:	e008      	b.n	800b62a <UART_SetConfig+0x34e>
 800b618:	2308      	movs	r3, #8
 800b61a:	77fb      	strb	r3, [r7, #31]
 800b61c:	e005      	b.n	800b62a <UART_SetConfig+0x34e>
 800b61e:	2310      	movs	r3, #16
 800b620:	77fb      	strb	r3, [r7, #31]
 800b622:	bf00      	nop
 800b624:	e001      	b.n	800b62a <UART_SetConfig+0x34e>
 800b626:	2310      	movs	r3, #16
 800b628:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b632:	d17f      	bne.n	800b734 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b634:	7ffb      	ldrb	r3, [r7, #31]
 800b636:	2b08      	cmp	r3, #8
 800b638:	d85c      	bhi.n	800b6f4 <UART_SetConfig+0x418>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <UART_SetConfig+0x364>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b665 	.word	0x0800b665
 800b644:	0800b685 	.word	0x0800b685
 800b648:	0800b6a5 	.word	0x0800b6a5
 800b64c:	0800b6f5 	.word	0x0800b6f5
 800b650:	0800b6bd 	.word	0x0800b6bd
 800b654:	0800b6f5 	.word	0x0800b6f5
 800b658:	0800b6f5 	.word	0x0800b6f5
 800b65c:	0800b6f5 	.word	0x0800b6f5
 800b660:	0800b6dd 	.word	0x0800b6dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b664:	f7fc f8d0 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800b668:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	005a      	lsls	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	085b      	lsrs	r3, r3, #1
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67e:	b29b      	uxth	r3, r3
 800b680:	61bb      	str	r3, [r7, #24]
        break;
 800b682:	e03a      	b.n	800b6fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b684:	f7fc f8d4 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800b688:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	005a      	lsls	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	085b      	lsrs	r3, r3, #1
 800b694:	441a      	add	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	61bb      	str	r3, [r7, #24]
        break;
 800b6a2:	e02a      	b.n	800b6fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	085a      	lsrs	r2, r3, #1
 800b6aa:	4b5f      	ldr	r3, [pc, #380]	; (800b828 <UART_SetConfig+0x54c>)
 800b6ac:	4413      	add	r3, r2
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	6852      	ldr	r2, [r2, #4]
 800b6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	61bb      	str	r3, [r7, #24]
        break;
 800b6ba:	e01e      	b.n	800b6fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6bc:	f7fb ffe6 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800b6c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	005a      	lsls	r2, r3, #1
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	085b      	lsrs	r3, r3, #1
 800b6cc:	441a      	add	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	61bb      	str	r3, [r7, #24]
        break;
 800b6da:	e00e      	b.n	800b6fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	085b      	lsrs	r3, r3, #1
 800b6e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	61bb      	str	r3, [r7, #24]
        break;
 800b6f2:	e002      	b.n	800b6fa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75fb      	strb	r3, [r7, #23]
        break;
 800b6f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b0f      	cmp	r3, #15
 800b6fe:	d916      	bls.n	800b72e <UART_SetConfig+0x452>
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b706:	d212      	bcs.n	800b72e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	f023 030f 	bic.w	r3, r3, #15
 800b710:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	085b      	lsrs	r3, r3, #1
 800b716:	b29b      	uxth	r3, r3
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	897b      	ldrh	r3, [r7, #10]
 800b720:	4313      	orrs	r3, r2
 800b722:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	897a      	ldrh	r2, [r7, #10]
 800b72a:	60da      	str	r2, [r3, #12]
 800b72c:	e070      	b.n	800b810 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	75fb      	strb	r3, [r7, #23]
 800b732:	e06d      	b.n	800b810 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b734:	7ffb      	ldrb	r3, [r7, #31]
 800b736:	2b08      	cmp	r3, #8
 800b738:	d859      	bhi.n	800b7ee <UART_SetConfig+0x512>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <UART_SetConfig+0x464>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b765 	.word	0x0800b765
 800b744:	0800b783 	.word	0x0800b783
 800b748:	0800b7a1 	.word	0x0800b7a1
 800b74c:	0800b7ef 	.word	0x0800b7ef
 800b750:	0800b7b9 	.word	0x0800b7b9
 800b754:	0800b7ef 	.word	0x0800b7ef
 800b758:	0800b7ef 	.word	0x0800b7ef
 800b75c:	0800b7ef 	.word	0x0800b7ef
 800b760:	0800b7d7 	.word	0x0800b7d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b764:	f7fc f850 	bl	8007808 <HAL_RCC_GetPCLK1Freq>
 800b768:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	085a      	lsrs	r2, r3, #1
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	441a      	add	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	61bb      	str	r3, [r7, #24]
        break;
 800b780:	e038      	b.n	800b7f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b782:	f7fc f855 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 800b786:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	085a      	lsrs	r2, r3, #1
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	441a      	add	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	fbb2 f3f3 	udiv	r3, r2, r3
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	61bb      	str	r3, [r7, #24]
        break;
 800b79e:	e029      	b.n	800b7f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	085a      	lsrs	r2, r3, #1
 800b7a6:	4b21      	ldr	r3, [pc, #132]	; (800b82c <UART_SetConfig+0x550>)
 800b7a8:	4413      	add	r3, r2
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	6852      	ldr	r2, [r2, #4]
 800b7ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	61bb      	str	r3, [r7, #24]
        break;
 800b7b6:	e01d      	b.n	800b7f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7b8:	f7fb ff68 	bl	800768c <HAL_RCC_GetSysClockFreq>
 800b7bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	085a      	lsrs	r2, r3, #1
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	441a      	add	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	61bb      	str	r3, [r7, #24]
        break;
 800b7d4:	e00e      	b.n	800b7f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	085b      	lsrs	r3, r3, #1
 800b7dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	61bb      	str	r3, [r7, #24]
        break;
 800b7ec:	e002      	b.n	800b7f4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
        break;
 800b7f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	d908      	bls.n	800b80c <UART_SetConfig+0x530>
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b800:	d204      	bcs.n	800b80c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	e001      	b.n	800b810 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	01e84800 	.word	0x01e84800
 800b82c:	00f42400 	.word	0x00f42400

0800b830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00a      	beq.n	800b85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00a      	beq.n	800b87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	430a      	orrs	r2, r1
 800b87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	430a      	orrs	r2, r1
 800b89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	f003 0308 	and.w	r3, r3, #8
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00a      	beq.n	800b8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01a      	beq.n	800b946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b92e:	d10a      	bne.n	800b946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	605a      	str	r2, [r3, #4]
  }
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af02      	add	r7, sp, #8
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b982:	f7f7 fff1 	bl	8003968 <HAL_GetTick>
 800b986:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0308 	and.w	r3, r3, #8
 800b992:	2b08      	cmp	r3, #8
 800b994:	d10e      	bne.n	800b9b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f814 	bl	800b9d2 <UART_WaitOnFlagUntilTimeout>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e00a      	b.n	800b9ca <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2220      	movs	r2, #32
 800b9be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	603b      	str	r3, [r7, #0]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9e2:	e05d      	b.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d059      	beq.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ec:	f7f7 ffbc 	bl	8003968 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d302      	bcc.n	800ba02 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d11b      	bne.n	800ba3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f022 0201 	bic.w	r2, r2, #1
 800ba20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2220      	movs	r2, #32
 800ba26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2220      	movs	r2, #32
 800ba2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e042      	b.n	800bac0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d02b      	beq.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba56:	d123      	bne.n	800baa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f022 0201 	bic.w	r2, r2, #1
 800ba80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2220      	movs	r2, #32
 800ba92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e00f      	b.n	800bac0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	69da      	ldr	r2, [r3, #28]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4013      	ands	r3, r2
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	bf0c      	ite	eq
 800bab0:	2301      	moveq	r3, #1
 800bab2:	2300      	movne	r3, #0
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	461a      	mov	r2, r3
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	429a      	cmp	r2, r3
 800babc:	d092      	beq.n	800b9e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d027      	beq.n	800bb32 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4b2f      	ldr	r3, [pc, #188]	; (800bba8 <FMC_SDRAM_Init+0xe0>)
 800baec:	4013      	ands	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800baf8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bafe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bb04:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bb0a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bb10:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bb16:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bb1c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb22:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	e032      	b.n	800bb98 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb3e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bb4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <FMC_SDRAM_Init+0xe0>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb6c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bb72:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bb78:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bb7e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bb84:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	ffff8000 	.word	0xffff8000

0800bbac <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d02e      	beq.n	800bc24 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bbd2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bbe2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bbec:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bbf6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc00:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc0a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	3b01      	subs	r3, #1
 800bc12:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc14:	4313      	orrs	r3, r2
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	609a      	str	r2, [r3, #8]
 800bc22:	e039      	b.n	800bc98 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	4b1e      	ldr	r3, [pc, #120]	; (800bca8 <FMC_SDRAM_Timing_Init+0xfc>)
 800bc2e:	4013      	ands	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	3b01      	subs	r3, #1
 800bc38:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bc42:	4313      	orrs	r3, r2
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc56:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc66:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bc70:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bc7a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc84:	4313      	orrs	r3, r2
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	371c      	adds	r7, #28
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	ff0f0fff 	.word	0xff0f0fff

0800bcac <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bcc4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bcce:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	695a      	ldr	r2, [r3, #20]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	431a      	orrs	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd14:	b084      	sub	sp, #16
 800bd16:	b480      	push	{r7}
 800bd18:	b085      	sub	sp, #20
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	f107 001c 	add.w	r0, r7, #28
 800bd22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <SDMMC_Init+0x54>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	b004      	add	sp, #16
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	ffff8100 	.word	0xffff8100

0800bd6c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2203      	movs	r2, #3
 800bd92:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bd94:	2002      	movs	r0, #2
 800bd96:	f7f7 fdf3 	bl	8003980 <HAL_Delay>
  
  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0303 	and.w	r3, r3, #3
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdde:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bde4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bdea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	4b06      	ldr	r3, [pc, #24]	; (800be10 <SDMMC_SendCommand+0x50>)
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	fffff000 	.word	0xfffff000

0800be14 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	b2db      	uxtb	r3, r3
}
 800be22:	4618      	mov	r0, r3
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be2e:	b480      	push	{r7}
 800be30:	b085      	sub	sp, #20
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3314      	adds	r3, #20
 800be3c:	461a      	mov	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	4413      	add	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
}  
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be7a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800be80:	431a      	orrs	r2, r3
                       Data->DPSM);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800be86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be92:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0

}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b088      	sub	sp, #32
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800beba:	2310      	movs	r3, #16
 800bebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bebe:	2340      	movs	r3, #64	; 0x40
 800bec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bec2:	2300      	movs	r3, #0
 800bec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7ff ff74 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bedc:	2110      	movs	r1, #16
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fa42 	bl	800c368 <SDMMC_GetCmdResp1>
 800bee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee6:	69fb      	ldr	r3, [r7, #28]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800befe:	2311      	movs	r3, #17
 800bf00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf06:	2300      	movs	r3, #0
 800bf08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf10:	f107 0308 	add.w	r3, r7, #8
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff ff52 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf20:	2111      	movs	r1, #17
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 fa20 	bl	800c368 <SDMMC_GetCmdResp1>
 800bf28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf2a:	69fb      	ldr	r3, [r7, #28]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf42:	2312      	movs	r3, #18
 800bf44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf46:	2340      	movs	r3, #64	; 0x40
 800bf48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf54:	f107 0308 	add.w	r3, r7, #8
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff ff30 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf64:	2112      	movs	r1, #18
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f9fe 	bl	800c368 <SDMMC_GetCmdResp1>
 800bf6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3720      	adds	r7, #32
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b088      	sub	sp, #32
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bf86:	2318      	movs	r3, #24
 800bf88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf8a:	2340      	movs	r3, #64	; 0x40
 800bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf98:	f107 0308 	add.w	r3, r7, #8
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff ff0e 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa8:	2118      	movs	r1, #24
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f9dc 	bl	800c368 <SDMMC_GetCmdResp1>
 800bfb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfb2:	69fb      	ldr	r3, [r7, #28]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3720      	adds	r7, #32
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bfca:	2319      	movs	r3, #25
 800bfcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfce:	2340      	movs	r3, #64	; 0x40
 800bfd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfdc:	f107 0308 	add.w	r3, r7, #8
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff feec 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bfe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfec:	2119      	movs	r1, #25
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f9ba 	bl	800c368 <SDMMC_GetCmdResp1>
 800bff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bff6:	69fb      	ldr	r3, [r7, #28]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3720      	adds	r7, #32
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b088      	sub	sp, #32
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c00c:	230c      	movs	r3, #12
 800c00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c010:	2340      	movs	r3, #64	; 0x40
 800c012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c014:	2300      	movs	r3, #0
 800c016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c01c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c01e:	f107 0308 	add.w	r3, r7, #8
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fecb 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c02a:	4a05      	ldr	r2, [pc, #20]	; (800c040 <SDMMC_CmdStopTransfer+0x40>)
 800c02c:	210c      	movs	r1, #12
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f99a 	bl	800c368 <SDMMC_GetCmdResp1>
 800c034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c036:	69fb      	ldr	r3, [r7, #28]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3720      	adds	r7, #32
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	05f5e100 	.word	0x05f5e100

0800c044 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08a      	sub	sp, #40	; 0x28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c054:	2307      	movs	r3, #7
 800c056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c058:	2340      	movs	r3, #64	; 0x40
 800c05a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c05c:	2300      	movs	r3, #0
 800c05e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c064:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c066:	f107 0310 	add.w	r3, r7, #16
 800c06a:	4619      	mov	r1, r3
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7ff fea7 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c072:	f241 3288 	movw	r2, #5000	; 0x1388
 800c076:	2107      	movs	r1, #7
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 f975 	bl	800c368 <SDMMC_GetCmdResp1>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c082:	4618      	mov	r0, r3
 800c084:	3728      	adds	r7, #40	; 0x28
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b088      	sub	sp, #32
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c092:	2300      	movs	r3, #0
 800c094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c096:	2300      	movs	r3, #0
 800c098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c09a:	2300      	movs	r3, #0
 800c09c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0a8:	f107 0308 	add.w	r3, r7, #8
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7ff fe86 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f92f 	bl	800c318 <SDMMC_GetCmdError>
 800c0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0bc:	69fb      	ldr	r3, [r7, #28]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b088      	sub	sp, #32
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0d4:	2308      	movs	r3, #8
 800c0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0d8:	2340      	movs	r3, #64	; 0x40
 800c0da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0e6:	f107 0308 	add.w	r3, r7, #8
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7ff fe67 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fb18 	bl	800c728 <SDMMC_GetCmdResp7>
 800c0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3720      	adds	r7, #32
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c112:	2337      	movs	r3, #55	; 0x37
 800c114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c116:	2340      	movs	r3, #64	; 0x40
 800c118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c122:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c124:	f107 0308 	add.w	r3, r7, #8
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff fe48 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c130:	f241 3288 	movw	r2, #5000	; 0x1388
 800c134:	2137      	movs	r1, #55	; 0x37
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f916 	bl	800c368 <SDMMC_GetCmdResp1>
 800c13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c13e:	69fb      	ldr	r3, [r7, #28]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3720      	adds	r7, #32
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <SDMMC_CmdAppOperCommand+0x44>)
 800c156:	4313      	orrs	r3, r2
 800c158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c15a:	2329      	movs	r3, #41	; 0x29
 800c15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c15e:	2340      	movs	r3, #64	; 0x40
 800c160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c16c:	f107 0308 	add.w	r3, r7, #8
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fe24 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fa27 	bl	800c5cc <SDMMC_GetCmdResp3>
 800c17e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c180:	69fb      	ldr	r3, [r7, #28]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	80100000 	.word	0x80100000

0800c190 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c19e:	2306      	movs	r3, #6
 800c1a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1a2:	2340      	movs	r3, #64	; 0x40
 800c1a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff fe02 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1c0:	2106      	movs	r1, #6
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f8d0 	bl	800c368 <SDMMC_GetCmdResp1>
 800c1c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1ca:	69fb      	ldr	r3, [r7, #28]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3720      	adds	r7, #32
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b088      	sub	sp, #32
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c1e0:	2333      	movs	r3, #51	; 0x33
 800c1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1f2:	f107 0308 	add.w	r3, r7, #8
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff fde1 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c202:	2133      	movs	r1, #51	; 0x33
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f8af 	bl	800c368 <SDMMC_GetCmdResp1>
 800c20a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c20c:	69fb      	ldr	r3, [r7, #28]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b088      	sub	sp, #32
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c222:	2302      	movs	r3, #2
 800c224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c226:	23c0      	movs	r3, #192	; 0xc0
 800c228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c22a:	2300      	movs	r3, #0
 800c22c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c232:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c234:	f107 0308 	add.w	r3, r7, #8
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff fdc0 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f97d 	bl	800c540 <SDMMC_GetCmdResp2>
 800c246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c248:	69fb      	ldr	r3, [r7, #28]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3720      	adds	r7, #32
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b088      	sub	sp, #32
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c260:	2309      	movs	r3, #9
 800c262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c264:	23c0      	movs	r3, #192	; 0xc0
 800c266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c268:	2300      	movs	r3, #0
 800c26a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c272:	f107 0308 	add.w	r3, r7, #8
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7ff fda1 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f95e 	bl	800c540 <SDMMC_GetCmdResp2>
 800c284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c286:	69fb      	ldr	r3, [r7, #28]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b0:	f107 0308 	add.w	r3, r7, #8
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff fd82 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	2103      	movs	r1, #3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f9bd 	bl	800c640 <SDMMC_GetCmdResp6>
 800c2c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b088      	sub	sp, #32
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c2e0:	230d      	movs	r3, #13
 800c2e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2e4:	2340      	movs	r3, #64	; 0x40
 800c2e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f2:	f107 0308 	add.w	r3, r7, #8
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fd61 	bl	800bdc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c302:	210d      	movs	r1, #13
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f82f 	bl	800c368 <SDMMC_GetCmdResp1>
 800c30a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c30c:	69fb      	ldr	r3, [r7, #28]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3720      	adds	r7, #32
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
	...

0800c318 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c318:	b490      	push	{r4, r7}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <SDMMC_GetCmdError+0x48>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a0f      	ldr	r2, [pc, #60]	; (800c364 <SDMMC_GetCmdError+0x4c>)
 800c326:	fba2 2303 	umull	r2, r3, r2, r3
 800c32a:	0a5b      	lsrs	r3, r3, #9
 800c32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c330:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c334:	4623      	mov	r3, r4
 800c336:	1e5c      	subs	r4, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c33c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c340:	e009      	b.n	800c356 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0f2      	beq.n	800c334 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	22c5      	movs	r2, #197	; 0xc5
 800c352:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bc90      	pop	{r4, r7}
 800c35e:	4770      	bx	lr
 800c360:	20000018 	.word	0x20000018
 800c364:	10624dd3 	.word	0x10624dd3

0800c368 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	460b      	mov	r3, r1
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c376:	4b6f      	ldr	r3, [pc, #444]	; (800c534 <SDMMC_GetCmdResp1+0x1cc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a6f      	ldr	r2, [pc, #444]	; (800c538 <SDMMC_GetCmdResp1+0x1d0>)
 800c37c:	fba2 2303 	umull	r2, r3, r2, r3
 800c380:	0a5b      	lsrs	r3, r3, #9
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c388:	4623      	mov	r3, r4
 800c38a:	1e5c      	subs	r4, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c394:	e0c9      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0f0      	beq.n	800c388 <SDMMC_GetCmdResp1+0x20>
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1eb      	bne.n	800c388 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d004      	beq.n	800c3c6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2204      	movs	r2, #4
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3c2:	2304      	movs	r3, #4
 800c3c4:	e0b1      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e0a6      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	22c5      	movs	r2, #197	; 0xc5
 800c3e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff fd16 	bl	800be14 <SDMMC_GetCommandResponse>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d001      	beq.n	800c3f6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e099      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff fd18 	bl	800be2e <SDMMC_GetResponse>
 800c3fe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	4b4e      	ldr	r3, [pc, #312]	; (800c53c <SDMMC_GetCmdResp1+0x1d4>)
 800c404:	4013      	ands	r3, r2
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e08d      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	da02      	bge.n	800c41a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c418:	e087      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c424:	2340      	movs	r3, #64	; 0x40
 800c426:	e080      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c432:	2380      	movs	r3, #128	; 0x80
 800c434:	e079      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c440:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c444:	e071      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c450:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c454:	e069      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c464:	e061      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c474:	e059      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c484:	e051      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c494:	e049      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4a4:	e041      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b4:	e039      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4c4:	e031      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4d4:	e029      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d002      	beq.n	800c4e6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4e4:	e021      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d002      	beq.n	800c4f6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c4f4:	e019      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c504:	e011      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c514:	e009      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f003 0308 	and.w	r3, r3, #8
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c520:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c524:	e001      	b.n	800c52a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	371c      	adds	r7, #28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd90      	pop	{r4, r7, pc}
 800c532:	bf00      	nop
 800c534:	20000018 	.word	0x20000018
 800c538:	10624dd3 	.word	0x10624dd3
 800c53c:	fdffe008 	.word	0xfdffe008

0800c540 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c540:	b490      	push	{r4, r7}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c548:	4b1e      	ldr	r3, [pc, #120]	; (800c5c4 <SDMMC_GetCmdResp2+0x84>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a1e      	ldr	r2, [pc, #120]	; (800c5c8 <SDMMC_GetCmdResp2+0x88>)
 800c54e:	fba2 2303 	umull	r2, r3, r2, r3
 800c552:	0a5b      	lsrs	r3, r3, #9
 800c554:	f241 3288 	movw	r2, #5000	; 0x1388
 800c558:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c55c:	4623      	mov	r3, r4
 800c55e:	1e5c      	subs	r4, r3, #1
 800c560:	2b00      	cmp	r3, #0
 800c562:	d102      	bne.n	800c56a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c568:	e026      	b.n	800c5b8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0f0      	beq.n	800c55c <SDMMC_GetCmdResp2+0x1c>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1eb      	bne.n	800c55c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d004      	beq.n	800c59a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2204      	movs	r2, #4
 800c594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c596:	2304      	movs	r3, #4
 800c598:	e00e      	b.n	800c5b8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d004      	beq.n	800c5b0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e003      	b.n	800c5b8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	22c5      	movs	r2, #197	; 0xc5
 800c5b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bc90      	pop	{r4, r7}
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000018 	.word	0x20000018
 800c5c8:	10624dd3 	.word	0x10624dd3

0800c5cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c5cc:	b490      	push	{r4, r7}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5d4:	4b18      	ldr	r3, [pc, #96]	; (800c638 <SDMMC_GetCmdResp3+0x6c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a18      	ldr	r2, [pc, #96]	; (800c63c <SDMMC_GetCmdResp3+0x70>)
 800c5da:	fba2 2303 	umull	r2, r3, r2, r3
 800c5de:	0a5b      	lsrs	r3, r3, #9
 800c5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5e8:	4623      	mov	r3, r4
 800c5ea:	1e5c      	subs	r4, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5f4:	e01b      	b.n	800c62e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0f0      	beq.n	800c5e8 <SDMMC_GetCmdResp3+0x1c>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1eb      	bne.n	800c5e8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2204      	movs	r2, #4
 800c620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c622:	2304      	movs	r3, #4
 800c624:	e003      	b.n	800c62e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	22c5      	movs	r2, #197	; 0xc5
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bc90      	pop	{r4, r7}
 800c636:	4770      	bx	lr
 800c638:	20000018 	.word	0x20000018
 800c63c:	10624dd3 	.word	0x10624dd3

0800c640 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	460b      	mov	r3, r1
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c64e:	4b34      	ldr	r3, [pc, #208]	; (800c720 <SDMMC_GetCmdResp6+0xe0>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a34      	ldr	r2, [pc, #208]	; (800c724 <SDMMC_GetCmdResp6+0xe4>)
 800c654:	fba2 2303 	umull	r2, r3, r2, r3
 800c658:	0a5b      	lsrs	r3, r3, #9
 800c65a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c65e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c662:	4623      	mov	r3, r4
 800c664:	1e5c      	subs	r4, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c66a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c66e:	e052      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c674:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0f0      	beq.n	800c662 <SDMMC_GetCmdResp6+0x22>
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1eb      	bne.n	800c662 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68e:	f003 0304 	and.w	r3, r3, #4
 800c692:	2b00      	cmp	r3, #0
 800c694:	d004      	beq.n	800c6a0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2204      	movs	r2, #4
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c69c:	2304      	movs	r3, #4
 800c69e:	e03a      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d004      	beq.n	800c6b6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e02f      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7ff fbac 	bl	800be14 <SDMMC_GetCommandResponse>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	461a      	mov	r2, r3
 800c6c0:	7afb      	ldrb	r3, [r7, #11]
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d001      	beq.n	800c6ca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e025      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	22c5      	movs	r2, #197	; 0xc5
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f7ff fbab 	bl	800be2e <SDMMC_GetResponse>
 800c6d8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d106      	bne.n	800c6f2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	0c1b      	lsrs	r3, r3, #16
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	e011      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c700:	e009      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c70c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c710:	e001      	b.n	800c716 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c716:	4618      	mov	r0, r3
 800c718:	371c      	adds	r7, #28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000018 	.word	0x20000018
 800c724:	10624dd3 	.word	0x10624dd3

0800c728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c728:	b490      	push	{r4, r7}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c730:	4b21      	ldr	r3, [pc, #132]	; (800c7b8 <SDMMC_GetCmdResp7+0x90>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a21      	ldr	r2, [pc, #132]	; (800c7bc <SDMMC_GetCmdResp7+0x94>)
 800c736:	fba2 2303 	umull	r2, r3, r2, r3
 800c73a:	0a5b      	lsrs	r3, r3, #9
 800c73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c740:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c744:	4623      	mov	r3, r4
 800c746:	1e5c      	subs	r4, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d102      	bne.n	800c752 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c74c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c750:	e02c      	b.n	800c7ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c756:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0f0      	beq.n	800c744 <SDMMC_GetCmdResp7+0x1c>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1eb      	bne.n	800c744 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c770:	f003 0304 	and.w	r3, r3, #4
 800c774:	2b00      	cmp	r3, #0
 800c776:	d004      	beq.n	800c782 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2204      	movs	r2, #4
 800c77c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c77e:	2304      	movs	r3, #4
 800c780:	e014      	b.n	800c7ac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d004      	beq.n	800c798 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c794:	2301      	movs	r3, #1
 800c796:	e009      	b.n	800c7ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2240      	movs	r2, #64	; 0x40
 800c7a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7aa:	2300      	movs	r3, #0
  
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bc90      	pop	{r4, r7}
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	20000018 	.word	0x20000018
 800c7bc:	10624dd3 	.word	0x10624dd3

0800c7c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c7c4:	4904      	ldr	r1, [pc, #16]	; (800c7d8 <MX_FATFS_Init+0x18>)
 800c7c6:	4805      	ldr	r0, [pc, #20]	; (800c7dc <MX_FATFS_Init+0x1c>)
 800c7c8:	f000 fa96 	bl	800ccf8 <FATFS_LinkDriver>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4b03      	ldr	r3, [pc, #12]	; (800c7e0 <MX_FATFS_Init+0x20>)
 800c7d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c7d4:	bf00      	nop
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	2000cdd4 	.word	0x2000cdd4
 800c7dc:	0802b474 	.word	0x0802b474
 800c7e0:	2000c96c 	.word	0x2000c96c

0800c7e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c7ee:	f000 f87b 	bl	800c8e8 <BSP_SD_IsDetected>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d001      	beq.n	800c7fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e012      	b.n	800c822 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c7fc:	480b      	ldr	r0, [pc, #44]	; (800c82c <BSP_SD_Init+0x48>)
 800c7fe:	f7fc fae9 	bl	8008dd4 <HAL_SD_Init>
 800c802:	4603      	mov	r3, r0
 800c804:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d109      	bne.n	800c820 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c80c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c810:	4806      	ldr	r0, [pc, #24]	; (800c82c <BSP_SD_Init+0x48>)
 800c812:	f7fc ff2b 	bl	800966c <HAL_SD_ConfigWideBusOperation>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c820:	79fb      	ldrb	r3, [r7, #7]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	2000c424 	.word	0x2000c424

0800c830 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	68f9      	ldr	r1, [r7, #12]
 800c846:	4806      	ldr	r0, [pc, #24]	; (800c860 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c848:	f7fc fb5c 	bl	8008f04 <HAL_SD_ReadBlocks_DMA>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c852:	2301      	movs	r3, #1
 800c854:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c856:	7dfb      	ldrb	r3, [r7, #23]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	2000c424 	.word	0x2000c424

0800c864 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	68f9      	ldr	r1, [r7, #12]
 800c87a:	4806      	ldr	r0, [pc, #24]	; (800c894 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c87c:	f7fc fc2e 	bl	80090dc <HAL_SD_WriteBlocks_DMA>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	2000c424 	.word	0x2000c424

0800c898 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c89c:	4805      	ldr	r0, [pc, #20]	; (800c8b4 <BSP_SD_GetCardState+0x1c>)
 800c89e:	f7fc ff61 	bl	8009764 <HAL_SD_GetCardState>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	bf14      	ite	ne
 800c8a8:	2301      	movne	r3, #1
 800c8aa:	2300      	moveq	r3, #0
 800c8ac:	b2db      	uxtb	r3, r3
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	2000c424 	.word	0x2000c424

0800c8b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	4803      	ldr	r0, [pc, #12]	; (800c8d0 <BSP_SD_GetCardInfo+0x18>)
 800c8c4:	f7fc fea6 	bl	8009614 <HAL_SD_GetCardInfo>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	2000c424 	.word	0x2000c424

0800c8d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c8dc:	f000 f9b2 	bl	800cc44 <BSP_SD_ReadCpltCallback>
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c8f2:	f000 f80b 	bl	800c90c <BSP_PlatformIsDetected>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	b2db      	uxtb	r3, r3
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c912:	2301      	movs	r3, #1
 800c914:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c91a:	4806      	ldr	r0, [pc, #24]	; (800c934 <BSP_PlatformIsDetected+0x28>)
 800c91c:	f7f9 f90e 	bl	8005b3c <HAL_GPIO_ReadPin>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c926:	2300      	movs	r3, #0
 800c928:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c92a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	40020800 	.word	0x40020800

0800c938 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800c940:	f000 fa26 	bl	800cd90 <osKernelSysTick>
 800c944:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800c946:	e006      	b.n	800c956 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c948:	f7ff ffa6 	bl	800c898 <BSP_SD_GetCardState>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c952:	2300      	movs	r3, #0
 800c954:	e009      	b.n	800c96a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800c956:	f000 fa1b 	bl	800cd90 <osKernelSysTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	429a      	cmp	r2, r3
 800c964:	d8f0      	bhi.n	800c948 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c97e:	4b0b      	ldr	r3, [pc, #44]	; (800c9ac <SD_CheckStatus+0x38>)
 800c980:	2201      	movs	r2, #1
 800c982:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c984:	f7ff ff88 	bl	800c898 <BSP_SD_GetCardState>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d107      	bne.n	800c99e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c98e:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <SD_CheckStatus+0x38>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f023 0301 	bic.w	r3, r3, #1
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <SD_CheckStatus+0x38>)
 800c99c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c99e:	4b03      	ldr	r3, [pc, #12]	; (800c9ac <SD_CheckStatus+0x38>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	b2db      	uxtb	r3, r3
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20000021 	.word	0x20000021

0800c9b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c9b0:	b590      	push	{r4, r7, lr}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800c9ba:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <SD_initialize+0x8c>)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800c9c0:	f000 f9da 	bl	800cd78 <osKernelRunning>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d030      	beq.n	800ca2c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c9ca:	f7ff ff0b 	bl	800c7e4 <BSP_SD_Init>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7ff ffcc 	bl	800c974 <SD_CheckStatus>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4b16      	ldr	r3, [pc, #88]	; (800ca3c <SD_initialize+0x8c>)
 800c9e2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <SD_initialize+0x8c>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d01e      	beq.n	800ca2c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800c9ee:	4b14      	ldr	r3, [pc, #80]	; (800ca40 <SD_initialize+0x90>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10e      	bne.n	800ca14 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800c9f6:	4b13      	ldr	r3, [pc, #76]	; (800ca44 <SD_initialize+0x94>)
 800c9f8:	f107 0408 	add.w	r4, r7, #8
 800c9fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ca02:	f107 0308 	add.w	r3, r7, #8
 800ca06:	2100      	movs	r1, #0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 fa31 	bl	800ce70 <osMessageCreate>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <SD_initialize+0x90>)
 800ca12:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ca14:	4b0a      	ldr	r3, [pc, #40]	; (800ca40 <SD_initialize+0x90>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ca1c:	4b07      	ldr	r3, [pc, #28]	; (800ca3c <SD_initialize+0x8c>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	f043 0301 	orr.w	r3, r3, #1
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	4b04      	ldr	r3, [pc, #16]	; (800ca3c <SD_initialize+0x8c>)
 800ca2a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ca2c:	4b03      	ldr	r3, [pc, #12]	; (800ca3c <SD_initialize+0x8c>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b2db      	uxtb	r3, r3
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	371c      	adds	r7, #28
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd90      	pop	{r4, r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000021 	.word	0x20000021
 800ca40:	200003f8 	.word	0x200003f8
 800ca44:	0802aa70 	.word	0x0802aa70

0800ca48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff ff8d 	bl	800c974 <SD_CheckStatus>
 800ca5a:	4603      	mov	r3, r0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08a      	sub	sp, #40	; 0x28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	4603      	mov	r3, r0
 800ca72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ca7a:	f247 5030 	movw	r0, #30000	; 0x7530
 800ca7e:	f7ff ff5b 	bl	800c938 <SD_CheckStatusWithTimeout>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	da02      	bge.n	800ca8e <SD_read+0x2a>
  {
    return res;
 800ca88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca8c:	e032      	b.n	800caf4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	6879      	ldr	r1, [r7, #4]
 800ca92:	68b8      	ldr	r0, [r7, #8]
 800ca94:	f7ff fecc 	bl	800c830 <BSP_SD_ReadBlocks_DMA>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ca9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d124      	bne.n	800caf0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800caa6:	4b15      	ldr	r3, [pc, #84]	; (800cafc <SD_read+0x98>)
 800caa8:	6819      	ldr	r1, [r3, #0]
 800caaa:	f107 0314 	add.w	r3, r7, #20
 800caae:	f247 5230 	movw	r2, #30000	; 0x7530
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 fa46 	bl	800cf44 <osMessageGet>

    if (event.status == osEventMessage)
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b10      	cmp	r3, #16
 800cabc:	d118      	bne.n	800caf0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d115      	bne.n	800caf0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cac4:	f000 f964 	bl	800cd90 <osKernelSysTick>
 800cac8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800caca:	e008      	b.n	800cade <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cacc:	f7ff fee4 	bl	800c898 <BSP_SD_GetCardState>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d103      	bne.n	800cade <SD_read+0x7a>
              {
                res = RES_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cadc:	e008      	b.n	800caf0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cade:	f000 f957 	bl	800cd90 <osKernelSysTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	f247 522f 	movw	r2, #29999	; 0x752f
 800caec:	4293      	cmp	r3, r2
 800caee:	d9ed      	bls.n	800cacc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800caf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3728      	adds	r7, #40	; 0x28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	200003f8 	.word	0x200003f8

0800cb00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
 800cb0a:	603b      	str	r3, [r7, #0]
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb16:	f247 5030 	movw	r0, #30000	; 0x7530
 800cb1a:	f7ff ff0d 	bl	800c938 <SD_CheckStatusWithTimeout>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da02      	bge.n	800cb2a <SD_write+0x2a>
  {
    return res;
 800cb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb28:	e02e      	b.n	800cb88 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	f7ff fe98 	bl	800c864 <BSP_SD_WriteBlocks_DMA>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d124      	bne.n	800cb84 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cb3a:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <SD_write+0x90>)
 800cb3c:	6819      	ldr	r1, [r3, #0]
 800cb3e:	f107 0314 	add.w	r3, r7, #20
 800cb42:	f247 5230 	movw	r2, #30000	; 0x7530
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f9fc 	bl	800cf44 <osMessageGet>

    if (event.status == osEventMessage)
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	2b10      	cmp	r3, #16
 800cb50:	d118      	bne.n	800cb84 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d115      	bne.n	800cb84 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cb58:	f000 f91a 	bl	800cd90 <osKernelSysTick>
 800cb5c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb5e:	e008      	b.n	800cb72 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb60:	f7ff fe9a 	bl	800c898 <BSP_SD_GetCardState>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d103      	bne.n	800cb72 <SD_write+0x72>
          {
            res = RES_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cb70:	e008      	b.n	800cb84 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cb72:	f000 f90d 	bl	800cd90 <osKernelSysTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	6a3b      	ldr	r3, [r7, #32]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	f247 522f 	movw	r2, #29999	; 0x752f
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d9ed      	bls.n	800cb60 <SD_write+0x60>
    }

  }
#endif

  return res;
 800cb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3728      	adds	r7, #40	; 0x28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	200003f8 	.word	0x200003f8

0800cb94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08c      	sub	sp, #48	; 0x30
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	603a      	str	r2, [r7, #0]
 800cb9e:	71fb      	strb	r3, [r7, #7]
 800cba0:	460b      	mov	r3, r1
 800cba2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbaa:	4b25      	ldr	r3, [pc, #148]	; (800cc40 <SD_ioctl+0xac>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <SD_ioctl+0x28>
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e03c      	b.n	800cc36 <SD_ioctl+0xa2>

  switch (cmd)
 800cbbc:	79bb      	ldrb	r3, [r7, #6]
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d834      	bhi.n	800cc2c <SD_ioctl+0x98>
 800cbc2:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <SD_ioctl+0x34>)
 800cbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc8:	0800cbd9 	.word	0x0800cbd9
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cbf9 	.word	0x0800cbf9
 800cbd4:	0800cc13 	.word	0x0800cc13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbde:	e028      	b.n	800cc32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbe0:	f107 030c 	add.w	r3, r7, #12
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7ff fe67 	bl	800c8b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cbea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cbf6:	e01c      	b.n	800cc32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cbf8:	f107 030c 	add.w	r3, r7, #12
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff fe5b 	bl	800c8b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc10:	e00f      	b.n	800cc32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc12:	f107 030c 	add.w	r3, r7, #12
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fe4e 	bl	800c8b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	0a5a      	lsrs	r2, r3, #9
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc2a:	e002      	b.n	800cc32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3730      	adds	r7, #48	; 0x30
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000021 	.word	0x20000021

0800cc44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800cc48:	4b04      	ldr	r3, [pc, #16]	; (800cc5c <BSP_SD_ReadCpltCallback+0x18>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2101      	movs	r1, #1
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 f937 	bl	800cec4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800cc56:	bf00      	nop
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200003f8 	.word	0x200003f8

0800cc60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b087      	sub	sp, #28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc76:	4b1f      	ldr	r3, [pc, #124]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cc78:	7a5b      	ldrb	r3, [r3, #9]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d131      	bne.n	800cce4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc80:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cc82:	7a5b      	ldrb	r3, [r3, #9]
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	461a      	mov	r2, r3
 800cc88:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc8e:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cc90:	7a5b      	ldrb	r3, [r3, #9]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	4a17      	ldr	r2, [pc, #92]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc9e:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cca0:	7a5b      	ldrb	r3, [r3, #9]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	461a      	mov	r2, r3
 800cca6:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800cca8:	4413      	add	r3, r2
 800ccaa:	79fa      	ldrb	r2, [r7, #7]
 800ccac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ccae:	4b11      	ldr	r3, [pc, #68]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800ccb0:	7a5b      	ldrb	r3, [r3, #9]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	b2d1      	uxtb	r1, r2
 800ccb8:	4a0e      	ldr	r2, [pc, #56]	; (800ccf4 <FATFS_LinkDriverEx+0x94>)
 800ccba:	7251      	strb	r1, [r2, #9]
 800ccbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ccbe:	7dbb      	ldrb	r3, [r7, #22]
 800ccc0:	3330      	adds	r3, #48	; 0x30
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	3301      	adds	r3, #1
 800cccc:	223a      	movs	r2, #58	; 0x3a
 800ccce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	3302      	adds	r3, #2
 800ccd4:	222f      	movs	r2, #47	; 0x2f
 800ccd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3303      	adds	r3, #3
 800ccdc:	2200      	movs	r2, #0
 800ccde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	200003fc 	.word	0x200003fc

0800ccf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cd02:	2200      	movs	r2, #0
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff ffaa 	bl	800cc60 <FATFS_LinkDriverEx>
 800cd0c:	4603      	mov	r3, r0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cd24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd28:	2b84      	cmp	r3, #132	; 0x84
 800cd2a:	d005      	beq.n	800cd38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cd2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4413      	add	r3, r2
 800cd34:	3303      	adds	r3, #3
 800cd36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cd38:	68fb      	ldr	r3, [r7, #12]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3714      	adds	r7, #20
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd4c:	f3ef 8305 	mrs	r3, IPSR
 800cd50:	607b      	str	r3, [r7, #4]
  return(result);
 800cd52:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	bf14      	ite	ne
 800cd58:	2301      	movne	r3, #1
 800cd5a:	2300      	moveq	r3, #0
 800cd5c:	b2db      	uxtb	r3, r3
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cd6e:	f001 faff 	bl	800e370 <vTaskStartScheduler>
  
  return osOK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cd7c:	f001 ff4a 	bl	800ec14 <xTaskGetSchedulerState>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d101      	bne.n	800cd8a <osKernelRunning+0x12>
    return 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	e000      	b.n	800cd8c <osKernelRunning+0x14>
  else
    return 1;
 800cd8a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cd94:	f7ff ffd7 	bl	800cd46 <inHandlerMode>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cd9e:	f001 fc05 	bl	800e5ac <xTaskGetTickCountFromISR>
 800cda2:	4603      	mov	r3, r0
 800cda4:	e002      	b.n	800cdac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cda6:	f001 fbf1 	bl	800e58c <xTaskGetTickCount>
 800cdaa:	4603      	mov	r3, r0
  }
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	b089      	sub	sp, #36	; 0x24
 800cdb4:	af04      	add	r7, sp, #16
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d020      	beq.n	800ce04 <osThreadCreate+0x54>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01c      	beq.n	800ce04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685c      	ldr	r4, [r3, #4]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681d      	ldr	r5, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691e      	ldr	r6, [r3, #16]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff ff9a 	bl	800cd16 <makeFreeRtosPriority>
 800cde2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdec:	9202      	str	r2, [sp, #8]
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	9100      	str	r1, [sp, #0]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 f8e0 	bl	800dfbe <xTaskCreateStatic>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	e01c      	b.n	800ce3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685c      	ldr	r4, [r3, #4]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce10:	b29e      	uxth	r6, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff ff7c 	bl	800cd16 <makeFreeRtosPriority>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	f107 030c 	add.w	r3, r7, #12
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	9200      	str	r2, [sp, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f001 f925 	bl	800e07e <xTaskCreate>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d001      	beq.n	800ce3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e000      	b.n	800ce40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <osDelay+0x16>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	e000      	b.n	800ce60 <osDelay+0x18>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4618      	mov	r0, r3
 800ce62:	f001 fa4f 	bl	800e304 <vTaskDelay>
  
  return osOK;
 800ce66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ce70:	b590      	push	{r4, r7, lr}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d012      	beq.n	800cea8 <osMessageCreate+0x38>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00e      	beq.n	800cea8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6859      	ldr	r1, [r3, #4]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689a      	ldr	r2, [r3, #8]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68dc      	ldr	r4, [r3, #12]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	4623      	mov	r3, r4
 800cea0:	f000 f9e2 	bl	800d268 <xQueueGenericCreateStatic>
 800cea4:	4603      	mov	r3, r0
 800cea6:	e008      	b.n	800ceba <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	f000 fa55 	bl	800d362 <xQueueGenericCreate>
 800ceb8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd90      	pop	{r4, r7, pc}
	...

0800cec4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <osMessagePut+0x1e>
    ticks = 1;
 800cede:	2301      	movs	r3, #1
 800cee0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cee2:	f7ff ff30 	bl	800cd46 <inHandlerMode>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d018      	beq.n	800cf1e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ceec:	f107 0210 	add.w	r2, r7, #16
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	2300      	movs	r3, #0
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f000 fb96 	bl	800d628 <xQueueGenericSendFromISR>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d001      	beq.n	800cf06 <osMessagePut+0x42>
      return osErrorOS;
 800cf02:	23ff      	movs	r3, #255	; 0xff
 800cf04:	e018      	b.n	800cf38 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d014      	beq.n	800cf36 <osMessagePut+0x72>
 800cf0c:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <osMessagePut+0x7c>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	e00b      	b.n	800cf36 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cf1e:	f107 0108 	add.w	r1, r7, #8
 800cf22:	2300      	movs	r3, #0
 800cf24:	697a      	ldr	r2, [r7, #20]
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f000 fa7c 	bl	800d424 <xQueueGenericSend>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d001      	beq.n	800cf36 <osMessagePut+0x72>
      return osErrorOS;
 800cf32:	23ff      	movs	r3, #255	; 0xff
 800cf34:	e000      	b.n	800cf38 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	e000ed04 	.word	0xe000ed04

0800cf44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b08b      	sub	sp, #44	; 0x2c
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10a      	bne.n	800cf74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cf5e:	2380      	movs	r3, #128	; 0x80
 800cf60:	617b      	str	r3, [r7, #20]
    return event;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	461c      	mov	r4, r3
 800cf66:	f107 0314 	add.w	r3, r7, #20
 800cf6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf72:	e054      	b.n	800d01e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d103      	bne.n	800cf8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
 800cf8a:	e009      	b.n	800cfa0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d006      	beq.n	800cfa0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <osMessageGet+0x5c>
      ticks = 1;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cfa0:	f7ff fed1 	bl	800cd46 <inHandlerMode>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d01c      	beq.n	800cfe4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cfaa:	f107 0220 	add.w	r2, r7, #32
 800cfae:	f107 0314 	add.w	r3, r7, #20
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	68b8      	ldr	r0, [r7, #8]
 800cfb8:	f000 fe56 	bl	800dc68 <xQueueReceiveFromISR>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d102      	bne.n	800cfc8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cfc2:	2310      	movs	r3, #16
 800cfc4:	617b      	str	r3, [r7, #20]
 800cfc6:	e001      	b.n	800cfcc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d01d      	beq.n	800d00e <osMessageGet+0xca>
 800cfd2:	4b15      	ldr	r3, [pc, #84]	; (800d028 <osMessageGet+0xe4>)
 800cfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	e014      	b.n	800d00e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cfe4:	f107 0314 	add.w	r3, r7, #20
 800cfe8:	3304      	adds	r3, #4
 800cfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfec:	4619      	mov	r1, r3
 800cfee:	68b8      	ldr	r0, [r7, #8]
 800cff0:	f000 fc48 	bl	800d884 <xQueueReceive>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d102      	bne.n	800d000 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cffa:	2310      	movs	r3, #16
 800cffc:	617b      	str	r3, [r7, #20]
 800cffe:	e006      	b.n	800d00e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <osMessageGet+0xc6>
 800d006:	2300      	movs	r3, #0
 800d008:	e000      	b.n	800d00c <osMessageGet+0xc8>
 800d00a:	2340      	movs	r3, #64	; 0x40
 800d00c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	461c      	mov	r4, r3
 800d012:	f107 0314 	add.w	r3, r7, #20
 800d016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d01a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	372c      	adds	r7, #44	; 0x2c
 800d022:	46bd      	mov	sp, r7
 800d024:	bd90      	pop	{r4, r7, pc}
 800d026:	bf00      	nop
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f04f 32ff 	mov.w	r2, #4294967295
 800d044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f103 0208 	add.w	r2, r3, #8
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f103 0208 	add.w	r2, r3, #8
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b085      	sub	sp, #20
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e4:	d103      	bne.n	800d0ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	e00c      	b.n	800d108 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <vListInsert+0x2e>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	429a      	cmp	r2, r3
 800d106:	d2f6      	bcs.n	800d0f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	6892      	ldr	r2, [r2, #8]
 800d156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6852      	ldr	r2, [r2, #4]
 800d160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d103      	bne.n	800d174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	1e5a      	subs	r2, r3, #1
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10b      	bne.n	800d1c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	b672      	cpsid	i
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	b662      	cpsie	i
 800d1bc:	60bb      	str	r3, [r7, #8]
 800d1be:	e7fe      	b.n	800d1be <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d1c0:	f002 f86a 	bl	800f298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1cc:	68f9      	ldr	r1, [r7, #12]
 800d1ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1d0:	fb01 f303 	mul.w	r3, r1, r3
 800d1d4:	441a      	add	r2, r3
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	68f9      	ldr	r1, [r7, #12]
 800d1f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1f6:	fb01 f303 	mul.w	r3, r1, r3
 800d1fa:	441a      	add	r2, r3
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	22ff      	movs	r2, #255	; 0xff
 800d204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	22ff      	movs	r2, #255	; 0xff
 800d20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d114      	bne.n	800d240 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d01a      	beq.n	800d254 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3310      	adds	r3, #16
 800d222:	4618      	mov	r0, r3
 800d224:	f001 fb36 	bl	800e894 <xTaskRemoveFromEventList>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d012      	beq.n	800d254 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d22e:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <xQueueGenericReset+0xd0>)
 800d230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	e009      	b.n	800d254 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3310      	adds	r3, #16
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fef1 	bl	800d02c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3324      	adds	r3, #36	; 0x24
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff feec 	bl	800d02c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d254:	f002 f852 	bl	800f2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d258:	2301      	movs	r3, #1
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	; 0x38
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10b      	bne.n	800d294 <xQueueGenericCreateStatic+0x2c>
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	b672      	cpsid	i
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	b662      	cpsie	i
 800d290:	62bb      	str	r3, [r7, #40]	; 0x28
 800d292:	e7fe      	b.n	800d292 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10b      	bne.n	800d2b2 <xQueueGenericCreateStatic+0x4a>
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	b672      	cpsid	i
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	b662      	cpsie	i
 800d2ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d2b0:	e7fe      	b.n	800d2b0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <xQueueGenericCreateStatic+0x56>
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <xQueueGenericCreateStatic+0x5a>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e000      	b.n	800d2c4 <xQueueGenericCreateStatic+0x5c>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10b      	bne.n	800d2e0 <xQueueGenericCreateStatic+0x78>
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	b672      	cpsid	i
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	b662      	cpsie	i
 800d2dc:	623b      	str	r3, [r7, #32]
 800d2de:	e7fe      	b.n	800d2de <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d102      	bne.n	800d2ec <xQueueGenericCreateStatic+0x84>
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <xQueueGenericCreateStatic+0x88>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e000      	b.n	800d2f2 <xQueueGenericCreateStatic+0x8a>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10b      	bne.n	800d30e <xQueueGenericCreateStatic+0xa6>
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	b672      	cpsid	i
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	b662      	cpsie	i
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	e7fe      	b.n	800d30c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d30e:	2348      	movs	r3, #72	; 0x48
 800d310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2b48      	cmp	r3, #72	; 0x48
 800d316:	d00b      	beq.n	800d330 <xQueueGenericCreateStatic+0xc8>
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	61bb      	str	r3, [r7, #24]
 800d32e:	e7fe      	b.n	800d32e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d330:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00d      	beq.n	800d358 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d344:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f000 f846 	bl	800d3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3730      	adds	r7, #48	; 0x30
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d362:	b580      	push	{r7, lr}
 800d364:	b08a      	sub	sp, #40	; 0x28
 800d366:	af02      	add	r7, sp, #8
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	4613      	mov	r3, r2
 800d36e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10b      	bne.n	800d38e <xQueueGenericCreate+0x2c>
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	b672      	cpsid	i
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	b662      	cpsie	i
 800d38a:	613b      	str	r3, [r7, #16]
 800d38c:	e7fe      	b.n	800d38c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e004      	b.n	800d3a4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	fb02 f303 	mul.w	r3, r2, r3
 800d3a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	3348      	adds	r3, #72	; 0x48
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f002 f897 	bl	800f4dc <pvPortMalloc>
 800d3ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d011      	beq.n	800d3da <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	3348      	adds	r3, #72	; 0x48
 800d3be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3c8:	79fa      	ldrb	r2, [r7, #7]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f000 f805 	bl	800d3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3da:	69bb      	ldr	r3, [r7, #24]
	}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3720      	adds	r7, #32
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
 800d3f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	e002      	b.n	800d406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d412:	2101      	movs	r1, #1
 800d414:	69b8      	ldr	r0, [r7, #24]
 800d416:	f7ff febd 	bl	800d194 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d41a:	bf00      	nop
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
	...

0800d424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b08e      	sub	sp, #56	; 0x38
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
 800d430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d432:	2300      	movs	r3, #0
 800d434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10b      	bne.n	800d458 <xQueueGenericSend+0x34>
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	b672      	cpsid	i
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	b662      	cpsie	i
 800d454:	62bb      	str	r3, [r7, #40]	; 0x28
 800d456:	e7fe      	b.n	800d456 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d103      	bne.n	800d466 <xQueueGenericSend+0x42>
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <xQueueGenericSend+0x46>
 800d466:	2301      	movs	r3, #1
 800d468:	e000      	b.n	800d46c <xQueueGenericSend+0x48>
 800d46a:	2300      	movs	r3, #0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <xQueueGenericSend+0x64>
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	b672      	cpsid	i
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	b662      	cpsie	i
 800d484:	627b      	str	r3, [r7, #36]	; 0x24
 800d486:	e7fe      	b.n	800d486 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d103      	bne.n	800d496 <xQueueGenericSend+0x72>
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	2b01      	cmp	r3, #1
 800d494:	d101      	bne.n	800d49a <xQueueGenericSend+0x76>
 800d496:	2301      	movs	r3, #1
 800d498:	e000      	b.n	800d49c <xQueueGenericSend+0x78>
 800d49a:	2300      	movs	r3, #0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <xQueueGenericSend+0x94>
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	b672      	cpsid	i
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	b662      	cpsie	i
 800d4b4:	623b      	str	r3, [r7, #32]
 800d4b6:	e7fe      	b.n	800d4b6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4b8:	f001 fbac 	bl	800ec14 <xTaskGetSchedulerState>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d102      	bne.n	800d4c8 <xQueueGenericSend+0xa4>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <xQueueGenericSend+0xa8>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <xQueueGenericSend+0xaa>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10b      	bne.n	800d4ea <xQueueGenericSend+0xc6>
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	b672      	cpsid	i
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	b662      	cpsie	i
 800d4e6:	61fb      	str	r3, [r7, #28]
 800d4e8:	e7fe      	b.n	800d4e8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ea:	f001 fed5 	bl	800f298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d302      	bcc.n	800d500 <xQueueGenericSend+0xdc>
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d129      	bne.n	800d554 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d506:	f000 fc4a 	bl	800dd9e <prvCopyDataToQueue>
 800d50a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	2b00      	cmp	r3, #0
 800d512:	d010      	beq.n	800d536 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	3324      	adds	r3, #36	; 0x24
 800d518:	4618      	mov	r0, r3
 800d51a:	f001 f9bb 	bl	800e894 <xTaskRemoveFromEventList>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d013      	beq.n	800d54c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d524:	4b3f      	ldr	r3, [pc, #252]	; (800d624 <xQueueGenericSend+0x200>)
 800d526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	e00a      	b.n	800d54c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d007      	beq.n	800d54c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d53c:	4b39      	ldr	r3, [pc, #228]	; (800d624 <xQueueGenericSend+0x200>)
 800d53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d54c:	f001 fed6 	bl	800f2fc <vPortExitCritical>
				return pdPASS;
 800d550:	2301      	movs	r3, #1
 800d552:	e063      	b.n	800d61c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d103      	bne.n	800d562 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d55a:	f001 fecf 	bl	800f2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d55e:	2300      	movs	r3, #0
 800d560:	e05c      	b.n	800d61c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d568:	f107 0314 	add.w	r3, r7, #20
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 f9f5 	bl	800e95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d572:	2301      	movs	r3, #1
 800d574:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d576:	f001 fec1 	bl	800f2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57a:	f000 ff5b 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d57e:	f001 fe8b 	bl	800f298 <vPortEnterCritical>
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d588:	b25b      	sxtb	r3, r3
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	d103      	bne.n	800d598 <xQueueGenericSend+0x174>
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d59e:	b25b      	sxtb	r3, r3
 800d5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a4:	d103      	bne.n	800d5ae <xQueueGenericSend+0x18a>
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5ae:	f001 fea5 	bl	800f2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b2:	1d3a      	adds	r2, r7, #4
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f001 f9e4 	bl	800e988 <xTaskCheckForTimeOut>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d124      	bne.n	800d610 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5c8:	f000 fce1 	bl	800df8e <prvIsQueueFull>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d018      	beq.n	800d604 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	3310      	adds	r3, #16
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	4611      	mov	r1, r2
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f001 f934 	bl	800e848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5e2:	f000 fc6c 	bl	800debe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5e6:	f000 ff33 	bl	800e450 <xTaskResumeAll>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f47f af7c 	bne.w	800d4ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	; (800d624 <xQueueGenericSend+0x200>)
 800d5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	f3bf 8f6f 	isb	sy
 800d602:	e772      	b.n	800d4ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d606:	f000 fc5a 	bl	800debe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d60a:	f000 ff21 	bl	800e450 <xTaskResumeAll>
 800d60e:	e76c      	b.n	800d4ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d612:	f000 fc54 	bl	800debe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d616:	f000 ff1b 	bl	800e450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d61a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3738      	adds	r7, #56	; 0x38
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	e000ed04 	.word	0xe000ed04

0800d628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08e      	sub	sp, #56	; 0x38
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10b      	bne.n	800d658 <xQueueGenericSendFromISR+0x30>
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	b672      	cpsid	i
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	b662      	cpsie	i
 800d654:	627b      	str	r3, [r7, #36]	; 0x24
 800d656:	e7fe      	b.n	800d656 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d103      	bne.n	800d666 <xQueueGenericSendFromISR+0x3e>
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <xQueueGenericSendFromISR+0x42>
 800d666:	2301      	movs	r3, #1
 800d668:	e000      	b.n	800d66c <xQueueGenericSendFromISR+0x44>
 800d66a:	2300      	movs	r3, #0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10b      	bne.n	800d688 <xQueueGenericSendFromISR+0x60>
 800d670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d674:	b672      	cpsid	i
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	b662      	cpsie	i
 800d684:	623b      	str	r3, [r7, #32]
 800d686:	e7fe      	b.n	800d686 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d103      	bne.n	800d696 <xQueueGenericSendFromISR+0x6e>
 800d68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d692:	2b01      	cmp	r3, #1
 800d694:	d101      	bne.n	800d69a <xQueueGenericSendFromISR+0x72>
 800d696:	2301      	movs	r3, #1
 800d698:	e000      	b.n	800d69c <xQueueGenericSendFromISR+0x74>
 800d69a:	2300      	movs	r3, #0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <xQueueGenericSendFromISR+0x90>
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	b672      	cpsid	i
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	b662      	cpsie	i
 800d6b4:	61fb      	str	r3, [r7, #28]
 800d6b6:	e7fe      	b.n	800d6b6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6b8:	f001 fece 	bl	800f458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6bc:	f3ef 8211 	mrs	r2, BASEPRI
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	b672      	cpsid	i
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	b662      	cpsie	i
 800d6d4:	61ba      	str	r2, [r7, #24]
 800d6d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d302      	bcc.n	800d6ee <xQueueGenericSendFromISR+0xc6>
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d12c      	bne.n	800d748 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6fe:	f000 fb4e 	bl	800dd9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d702:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70a:	d112      	bne.n	800d732 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d710:	2b00      	cmp	r3, #0
 800d712:	d016      	beq.n	800d742 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d716:	3324      	adds	r3, #36	; 0x24
 800d718:	4618      	mov	r0, r3
 800d71a:	f001 f8bb 	bl	800e894 <xTaskRemoveFromEventList>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00e      	beq.n	800d742 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00b      	beq.n	800d742 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	e007      	b.n	800d742 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d736:	3301      	adds	r3, #1
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	b25a      	sxtb	r2, r3
 800d73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d742:	2301      	movs	r3, #1
 800d744:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d746:	e001      	b.n	800d74c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d748:	2300      	movs	r3, #0
 800d74a:	637b      	str	r3, [r7, #52]	; 0x34
 800d74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3738      	adds	r7, #56	; 0x38
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08e      	sub	sp, #56	; 0x38
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10b      	bne.n	800d78c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	b672      	cpsid	i
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	b662      	cpsie	i
 800d788:	623b      	str	r3, [r7, #32]
 800d78a:	e7fe      	b.n	800d78a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00b      	beq.n	800d7ac <xQueueGiveFromISR+0x4c>
 800d794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d798:	b672      	cpsid	i
 800d79a:	f383 8811 	msr	BASEPRI, r3
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	f3bf 8f4f 	dsb	sy
 800d7a6:	b662      	cpsie	i
 800d7a8:	61fb      	str	r3, [r7, #28]
 800d7aa:	e7fe      	b.n	800d7aa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d103      	bne.n	800d7bc <xQueueGiveFromISR+0x5c>
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <xQueueGiveFromISR+0x60>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e000      	b.n	800d7c2 <xQueueGiveFromISR+0x62>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10b      	bne.n	800d7de <xQueueGiveFromISR+0x7e>
 800d7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ca:	b672      	cpsid	i
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	b662      	cpsie	i
 800d7da:	61bb      	str	r3, [r7, #24]
 800d7dc:	e7fe      	b.n	800d7dc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d7de:	f001 fe3b 	bl	800f458 <vPortValidateInterruptPriority>
	__asm volatile
 800d7e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ea:	b672      	cpsid	i
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	b662      	cpsie	i
 800d7fa:	617a      	str	r2, [r7, #20]
 800d7fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d7fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d80e:	429a      	cmp	r2, r3
 800d810:	d22b      	bcs.n	800d86a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d822:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82c:	d112      	bne.n	800d854 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	2b00      	cmp	r3, #0
 800d834:	d016      	beq.n	800d864 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	3324      	adds	r3, #36	; 0x24
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 f82a 	bl	800e894 <xTaskRemoveFromEventList>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00e      	beq.n	800d864 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2201      	movs	r2, #1
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	e007      	b.n	800d864 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d858:	3301      	adds	r3, #1
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	b25a      	sxtb	r2, r3
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d864:	2301      	movs	r3, #1
 800d866:	637b      	str	r3, [r7, #52]	; 0x34
 800d868:	e001      	b.n	800d86e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	637b      	str	r3, [r7, #52]	; 0x34
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3738      	adds	r7, #56	; 0x38
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08c      	sub	sp, #48	; 0x30
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d890:	2300      	movs	r3, #0
 800d892:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d10b      	bne.n	800d8b6 <xQueueReceive+0x32>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	b672      	cpsid	i
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	b662      	cpsie	i
 800d8b2:	623b      	str	r3, [r7, #32]
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d103      	bne.n	800d8c4 <xQueueReceive+0x40>
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <xQueueReceive+0x44>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <xQueueReceive+0x46>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10b      	bne.n	800d8e6 <xQueueReceive+0x62>
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	b672      	cpsid	i
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	b662      	cpsie	i
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	e7fe      	b.n	800d8e4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8e6:	f001 f995 	bl	800ec14 <xTaskGetSchedulerState>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <xQueueReceive+0x72>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <xQueueReceive+0x76>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <xQueueReceive+0x78>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <xQueueReceive+0x94>
 800d900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d904:	b672      	cpsid	i
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	b662      	cpsie	i
 800d914:	61bb      	str	r3, [r7, #24]
 800d916:	e7fe      	b.n	800d916 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d918:	f001 fcbe 	bl	800f298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d920:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	d01f      	beq.n	800d968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92c:	f000 faa1 	bl	800de72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	1e5a      	subs	r2, r3, #1
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00f      	beq.n	800d960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d942:	3310      	adds	r3, #16
 800d944:	4618      	mov	r0, r3
 800d946:	f000 ffa5 	bl	800e894 <xTaskRemoveFromEventList>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d007      	beq.n	800d960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d950:	4b3c      	ldr	r3, [pc, #240]	; (800da44 <xQueueReceive+0x1c0>)
 800d952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d956:	601a      	str	r2, [r3, #0]
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d960:	f001 fccc 	bl	800f2fc <vPortExitCritical>
				return pdPASS;
 800d964:	2301      	movs	r3, #1
 800d966:	e069      	b.n	800da3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d103      	bne.n	800d976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d96e:	f001 fcc5 	bl	800f2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d972:	2300      	movs	r3, #0
 800d974:	e062      	b.n	800da3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d97c:	f107 0310 	add.w	r3, r7, #16
 800d980:	4618      	mov	r0, r3
 800d982:	f000 ffeb 	bl	800e95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d986:	2301      	movs	r3, #1
 800d988:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d98a:	f001 fcb7 	bl	800f2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d98e:	f000 fd51 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d992:	f001 fc81 	bl	800f298 <vPortEnterCritical>
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d99c:	b25b      	sxtb	r3, r3
 800d99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a2:	d103      	bne.n	800d9ac <xQueueReceive+0x128>
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9b2:	b25b      	sxtb	r3, r3
 800d9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b8:	d103      	bne.n	800d9c2 <xQueueReceive+0x13e>
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9c2:	f001 fc9b 	bl	800f2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9c6:	1d3a      	adds	r2, r7, #4
 800d9c8:	f107 0310 	add.w	r3, r7, #16
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 ffda 	bl	800e988 <xTaskCheckForTimeOut>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d123      	bne.n	800da22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9dc:	f000 fac1 	bl	800df62 <prvIsQueueEmpty>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d017      	beq.n	800da16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	3324      	adds	r3, #36	; 0x24
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 ff2a 	bl	800e848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f6:	f000 fa62 	bl	800debe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9fa:	f000 fd29 	bl	800e450 <xTaskResumeAll>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d189      	bne.n	800d918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da04:	4b0f      	ldr	r3, [pc, #60]	; (800da44 <xQueueReceive+0x1c0>)
 800da06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	e780      	b.n	800d918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da18:	f000 fa51 	bl	800debe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da1c:	f000 fd18 	bl	800e450 <xTaskResumeAll>
 800da20:	e77a      	b.n	800d918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da24:	f000 fa4b 	bl	800debe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da28:	f000 fd12 	bl	800e450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da2e:	f000 fa98 	bl	800df62 <prvIsQueueEmpty>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	f43f af6f 	beq.w	800d918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3730      	adds	r7, #48	; 0x30
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	e000ed04 	.word	0xe000ed04

0800da48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08e      	sub	sp, #56	; 0x38
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da52:	2300      	movs	r3, #0
 800da54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10b      	bne.n	800da7c <xQueueSemaphoreTake+0x34>
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	b672      	cpsid	i
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	b662      	cpsie	i
 800da78:	623b      	str	r3, [r7, #32]
 800da7a:	e7fe      	b.n	800da7a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00b      	beq.n	800da9c <xQueueSemaphoreTake+0x54>
 800da84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da88:	b672      	cpsid	i
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	b662      	cpsie	i
 800da98:	61fb      	str	r3, [r7, #28]
 800da9a:	e7fe      	b.n	800da9a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da9c:	f001 f8ba 	bl	800ec14 <xTaskGetSchedulerState>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <xQueueSemaphoreTake+0x64>
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <xQueueSemaphoreTake+0x68>
 800daac:	2301      	movs	r3, #1
 800daae:	e000      	b.n	800dab2 <xQueueSemaphoreTake+0x6a>
 800dab0:	2300      	movs	r3, #0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <xQueueSemaphoreTake+0x86>
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	b672      	cpsid	i
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	b662      	cpsie	i
 800daca:	61bb      	str	r3, [r7, #24]
 800dacc:	e7fe      	b.n	800dacc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dace:	f001 fbe3 	bl	800f298 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d024      	beq.n	800db28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae0:	1e5a      	subs	r2, r3, #1
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d104      	bne.n	800daf8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800daee:	f001 fa53 	bl	800ef98 <pvTaskIncrementMutexHeldCount>
 800daf2:	4602      	mov	r2, r0
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00f      	beq.n	800db20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db02:	3310      	adds	r3, #16
 800db04:	4618      	mov	r0, r3
 800db06:	f000 fec5 	bl	800e894 <xTaskRemoveFromEventList>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db10:	4b54      	ldr	r3, [pc, #336]	; (800dc64 <xQueueSemaphoreTake+0x21c>)
 800db12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db16:	601a      	str	r2, [r3, #0]
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db20:	f001 fbec 	bl	800f2fc <vPortExitCritical>
				return pdPASS;
 800db24:	2301      	movs	r3, #1
 800db26:	e098      	b.n	800dc5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d112      	bne.n	800db54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00b      	beq.n	800db4c <xQueueSemaphoreTake+0x104>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	b672      	cpsid	i
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	b662      	cpsie	i
 800db48:	617b      	str	r3, [r7, #20]
 800db4a:	e7fe      	b.n	800db4a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db4c:	f001 fbd6 	bl	800f2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db50:	2300      	movs	r3, #0
 800db52:	e082      	b.n	800dc5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db5a:	f107 030c 	add.w	r3, r7, #12
 800db5e:	4618      	mov	r0, r3
 800db60:	f000 fefc 	bl	800e95c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db64:	2301      	movs	r3, #1
 800db66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db68:	f001 fbc8 	bl	800f2fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db6c:	f000 fc62 	bl	800e434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db70:	f001 fb92 	bl	800f298 <vPortEnterCritical>
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db7a:	b25b      	sxtb	r3, r3
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d103      	bne.n	800db8a <xQueueSemaphoreTake+0x142>
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db90:	b25b      	sxtb	r3, r3
 800db92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db96:	d103      	bne.n	800dba0 <xQueueSemaphoreTake+0x158>
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dba0:	f001 fbac 	bl	800f2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dba4:	463a      	mov	r2, r7
 800dba6:	f107 030c 	add.w	r3, r7, #12
 800dbaa:	4611      	mov	r1, r2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 feeb 	bl	800e988 <xTaskCheckForTimeOut>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d132      	bne.n	800dc1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbba:	f000 f9d2 	bl	800df62 <prvIsQueueEmpty>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d026      	beq.n	800dc12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d109      	bne.n	800dbe0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800dbcc:	f001 fb64 	bl	800f298 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f001 f83b 	bl	800ec50 <xTaskPriorityInherit>
 800dbda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dbdc:	f001 fb8e 	bl	800f2fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	3324      	adds	r3, #36	; 0x24
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f000 fe2d 	bl	800e848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbf0:	f000 f965 	bl	800debe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbf4:	f000 fc2c 	bl	800e450 <xTaskResumeAll>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f47f af67 	bne.w	800dace <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dc00:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <xQueueSemaphoreTake+0x21c>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	e75d      	b.n	800dace <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc14:	f000 f953 	bl	800debe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc18:	f000 fc1a 	bl	800e450 <xTaskResumeAll>
 800dc1c:	e757      	b.n	800dace <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc20:	f000 f94d 	bl	800debe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc24:	f000 fc14 	bl	800e450 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc2a:	f000 f99a 	bl	800df62 <prvIsQueueEmpty>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f43f af4c 	beq.w	800dace <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00d      	beq.n	800dc58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dc3c:	f001 fb2c 	bl	800f298 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc42:	f000 f894 	bl	800dd6e <prvGetDisinheritPriorityAfterTimeout>
 800dc46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f001 f906 	bl	800ee60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc54:	f001 fb52 	bl	800f2fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3738      	adds	r7, #56	; 0x38
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	e000ed04 	.word	0xe000ed04

0800dc68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08e      	sub	sp, #56	; 0x38
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10b      	bne.n	800dc96 <xQueueReceiveFromISR+0x2e>
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	b672      	cpsid	i
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	b662      	cpsie	i
 800dc92:	623b      	str	r3, [r7, #32]
 800dc94:	e7fe      	b.n	800dc94 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <xQueueReceiveFromISR+0x3c>
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <xQueueReceiveFromISR+0x40>
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <xQueueReceiveFromISR+0x42>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10b      	bne.n	800dcc6 <xQueueReceiveFromISR+0x5e>
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	b672      	cpsid	i
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	b662      	cpsie	i
 800dcc2:	61fb      	str	r3, [r7, #28]
 800dcc4:	e7fe      	b.n	800dcc4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcc6:	f001 fbc7 	bl	800f458 <vPortValidateInterruptPriority>
	__asm volatile
 800dcca:	f3ef 8211 	mrs	r2, BASEPRI
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	b672      	cpsid	i
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	b662      	cpsie	i
 800dce2:	61ba      	str	r2, [r7, #24]
 800dce4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dce6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d02f      	beq.n	800dd56 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd04:	f000 f8b5 	bl	800de72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	1e5a      	subs	r2, r3, #1
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd18:	d112      	bne.n	800dd40 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d016      	beq.n	800dd50 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd24:	3310      	adds	r3, #16
 800dd26:	4618      	mov	r0, r3
 800dd28:	f000 fdb4 	bl	800e894 <xTaskRemoveFromEventList>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00e      	beq.n	800dd50 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	e007      	b.n	800dd50 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd44:	3301      	adds	r3, #1
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	b25a      	sxtb	r2, r3
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd50:	2301      	movs	r3, #1
 800dd52:	637b      	str	r3, [r7, #52]	; 0x34
 800dd54:	e001      	b.n	800dd5a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	637b      	str	r3, [r7, #52]	; 0x34
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3738      	adds	r7, #56	; 0x38
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dd6e:	b480      	push	{r7}
 800dd70:	b085      	sub	sp, #20
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d006      	beq.n	800dd8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f1c3 0307 	rsb	r3, r3, #7
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	e001      	b.n	800dd90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dd90:	68fb      	ldr	r3, [r7, #12]
	}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b086      	sub	sp, #24
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	60f8      	str	r0, [r7, #12]
 800dda6:	60b9      	str	r1, [r7, #8]
 800dda8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10d      	bne.n	800ddd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d14d      	bne.n	800de60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 ffc1 	bl	800ed50 <xTaskPriorityDisinherit>
 800ddce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	609a      	str	r2, [r3, #8]
 800ddd6:	e043      	b.n	800de60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d119      	bne.n	800de12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6858      	ldr	r0, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde6:	461a      	mov	r2, r3
 800dde8:	68b9      	ldr	r1, [r7, #8]
 800ddea:	f01b fe73 	bl	8029ad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	441a      	add	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	429a      	cmp	r2, r3
 800de06:	d32b      	bcc.n	800de60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	605a      	str	r2, [r3, #4]
 800de10:	e026      	b.n	800de60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	68d8      	ldr	r0, [r3, #12]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1a:	461a      	mov	r2, r3
 800de1c:	68b9      	ldr	r1, [r7, #8]
 800de1e:	f01b fe59 	bl	8029ad4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68da      	ldr	r2, [r3, #12]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2a:	425b      	negs	r3, r3
 800de2c:	441a      	add	r2, r3
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	68da      	ldr	r2, [r3, #12]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d207      	bcs.n	800de4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	689a      	ldr	r2, [r3, #8]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de46:	425b      	negs	r3, r3
 800de48:	441a      	add	r2, r3
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b02      	cmp	r3, #2
 800de52:	d105      	bne.n	800de60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d002      	beq.n	800de60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de68:	697b      	ldr	r3, [r7, #20]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de80:	2b00      	cmp	r3, #0
 800de82:	d018      	beq.n	800deb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8c:	441a      	add	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68da      	ldr	r2, [r3, #12]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d303      	bcc.n	800dea6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	68d9      	ldr	r1, [r3, #12]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deae:	461a      	mov	r2, r3
 800deb0:	6838      	ldr	r0, [r7, #0]
 800deb2:	f01b fe0f 	bl	8029ad4 <memcpy>
	}
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b084      	sub	sp, #16
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dec6:	f001 f9e7 	bl	800f298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ded0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ded2:	e011      	b.n	800def8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d012      	beq.n	800df02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3324      	adds	r3, #36	; 0x24
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fcd7 	bl	800e894 <xTaskRemoveFromEventList>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800deec:	f000 fdb0 	bl	800ea50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	3b01      	subs	r3, #1
 800def4:	b2db      	uxtb	r3, r3
 800def6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800def8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800defc:	2b00      	cmp	r3, #0
 800defe:	dce9      	bgt.n	800ded4 <prvUnlockQueue+0x16>
 800df00:	e000      	b.n	800df04 <prvUnlockQueue+0x46>
					break;
 800df02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	22ff      	movs	r2, #255	; 0xff
 800df08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df0c:	f001 f9f6 	bl	800f2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df10:	f001 f9c2 	bl	800f298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df1c:	e011      	b.n	800df42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d012      	beq.n	800df4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3310      	adds	r3, #16
 800df2a:	4618      	mov	r0, r3
 800df2c:	f000 fcb2 	bl	800e894 <xTaskRemoveFromEventList>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d001      	beq.n	800df3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df36:	f000 fd8b 	bl	800ea50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	3b01      	subs	r3, #1
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df46:	2b00      	cmp	r3, #0
 800df48:	dce9      	bgt.n	800df1e <prvUnlockQueue+0x60>
 800df4a:	e000      	b.n	800df4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	22ff      	movs	r2, #255	; 0xff
 800df52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df56:	f001 f9d1 	bl	800f2fc <vPortExitCritical>
}
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b084      	sub	sp, #16
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df6a:	f001 f995 	bl	800f298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df72:	2b00      	cmp	r3, #0
 800df74:	d102      	bne.n	800df7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df76:	2301      	movs	r3, #1
 800df78:	60fb      	str	r3, [r7, #12]
 800df7a:	e001      	b.n	800df80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df80:	f001 f9bc 	bl	800f2fc <vPortExitCritical>

	return xReturn;
 800df84:	68fb      	ldr	r3, [r7, #12]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b084      	sub	sp, #16
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df96:	f001 f97f 	bl	800f298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d102      	bne.n	800dfac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]
 800dfaa:	e001      	b.n	800dfb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dfac:	2300      	movs	r3, #0
 800dfae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfb0:	f001 f9a4 	bl	800f2fc <vPortExitCritical>

	return xReturn;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b08e      	sub	sp, #56	; 0x38
 800dfc2:	af04      	add	r7, sp, #16
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10b      	bne.n	800dfea <xTaskCreateStatic+0x2c>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd6:	b672      	cpsid	i
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	b662      	cpsie	i
 800dfe6:	623b      	str	r3, [r7, #32]
 800dfe8:	e7fe      	b.n	800dfe8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10b      	bne.n	800e008 <xTaskCreateStatic+0x4a>
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	b672      	cpsid	i
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	b662      	cpsie	i
 800e004:	61fb      	str	r3, [r7, #28]
 800e006:	e7fe      	b.n	800e006 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e008:	2358      	movs	r3, #88	; 0x58
 800e00a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	2b58      	cmp	r3, #88	; 0x58
 800e010:	d00b      	beq.n	800e02a <xTaskCreateStatic+0x6c>
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	b672      	cpsid	i
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	b662      	cpsie	i
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	e7fe      	b.n	800e028 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e02a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d01e      	beq.n	800e070 <xTaskCreateStatic+0xb2>
 800e032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e034:	2b00      	cmp	r3, #0
 800e036:	d01b      	beq.n	800e070 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e040:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	2202      	movs	r2, #2
 800e046:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e04a:	2300      	movs	r3, #0
 800e04c:	9303      	str	r3, [sp, #12]
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	9302      	str	r3, [sp, #8]
 800e052:	f107 0314 	add.w	r3, r7, #20
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	68b9      	ldr	r1, [r7, #8]
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f000 f850 	bl	800e108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e06a:	f000 f8e1 	bl	800e230 <prvAddNewTaskToReadyList>
 800e06e:	e001      	b.n	800e074 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e070:	2300      	movs	r3, #0
 800e072:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e074:	697b      	ldr	r3, [r7, #20]
	}
 800e076:	4618      	mov	r0, r3
 800e078:	3728      	adds	r7, #40	; 0x28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b08c      	sub	sp, #48	; 0x30
 800e082:	af04      	add	r7, sp, #16
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	603b      	str	r3, [r7, #0]
 800e08a:	4613      	mov	r3, r2
 800e08c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e08e:	88fb      	ldrh	r3, [r7, #6]
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4618      	mov	r0, r3
 800e094:	f001 fa22 	bl	800f4dc <pvPortMalloc>
 800e098:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00e      	beq.n	800e0be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e0a0:	2058      	movs	r0, #88	; 0x58
 800e0a2:	f001 fa1b 	bl	800f4dc <pvPortMalloc>
 800e0a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d003      	beq.n	800e0b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	697a      	ldr	r2, [r7, #20]
 800e0b2:	631a      	str	r2, [r3, #48]	; 0x30
 800e0b4:	e005      	b.n	800e0c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0b6:	6978      	ldr	r0, [r7, #20]
 800e0b8:	f001 fadc 	bl	800f674 <vPortFree>
 800e0bc:	e001      	b.n	800e0c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d017      	beq.n	800e0f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0d0:	88fa      	ldrh	r2, [r7, #6]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9303      	str	r3, [sp, #12]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	9302      	str	r3, [sp, #8]
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	68b9      	ldr	r1, [r7, #8]
 800e0e6:	68f8      	ldr	r0, [r7, #12]
 800e0e8:	f000 f80e 	bl	800e108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0ec:	69f8      	ldr	r0, [r7, #28]
 800e0ee:	f000 f89f 	bl	800e230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	61bb      	str	r3, [r7, #24]
 800e0f6:	e002      	b.n	800e0fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0fe:	69bb      	ldr	r3, [r7, #24]
	}
 800e100:	4618      	mov	r0, r3
 800e102:	3720      	adds	r7, #32
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b088      	sub	sp, #32
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	461a      	mov	r2, r3
 800e120:	21a5      	movs	r1, #165	; 0xa5
 800e122:	f01b fce2 	bl	8029aea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e130:	440b      	add	r3, r1
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e138:	69bb      	ldr	r3, [r7, #24]
 800e13a:	f023 0307 	bic.w	r3, r3, #7
 800e13e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00b      	beq.n	800e162 <prvInitialiseNewTask+0x5a>
 800e14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14e:	b672      	cpsid	i
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	b662      	cpsie	i
 800e15e:	617b      	str	r3, [r7, #20]
 800e160:	e7fe      	b.n	800e160 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d01f      	beq.n	800e1a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e168:	2300      	movs	r3, #0
 800e16a:	61fb      	str	r3, [r7, #28]
 800e16c:	e012      	b.n	800e194 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	4413      	add	r3, r2
 800e174:	7819      	ldrb	r1, [r3, #0]
 800e176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	4413      	add	r3, r2
 800e17c:	3334      	adds	r3, #52	; 0x34
 800e17e:	460a      	mov	r2, r1
 800e180:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	4413      	add	r3, r2
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d006      	beq.n	800e19c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	3301      	adds	r3, #1
 800e192:	61fb      	str	r3, [r7, #28]
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	2b0f      	cmp	r3, #15
 800e198:	d9e9      	bls.n	800e16e <prvInitialiseNewTask+0x66>
 800e19a:	e000      	b.n	800e19e <prvInitialiseNewTask+0x96>
			{
				break;
 800e19c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e1a6:	e003      	b.n	800e1b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	2b06      	cmp	r3, #6
 800e1b4:	d901      	bls.n	800e1ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1b6:	2306      	movs	r3, #6
 800e1b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fe ff4b 	bl	800d06c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	3318      	adds	r3, #24
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe ff46 	bl	800d06c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	f1c3 0207 	rsb	r2, r3, #7
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fe:	2200      	movs	r2, #0
 800e200:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	2200      	movs	r2, #0
 800e206:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e20a:	683a      	ldr	r2, [r7, #0]
 800e20c:	68f9      	ldr	r1, [r7, #12]
 800e20e:	69b8      	ldr	r0, [r7, #24]
 800e210:	f000 ff3c 	bl	800f08c <pxPortInitialiseStack>
 800e214:	4602      	mov	r2, r0
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e226:	bf00      	nop
 800e228:	3720      	adds	r7, #32
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
	...

0800e230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e238:	f001 f82e 	bl	800f298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e23c:	4b2a      	ldr	r3, [pc, #168]	; (800e2e8 <prvAddNewTaskToReadyList+0xb8>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3301      	adds	r3, #1
 800e242:	4a29      	ldr	r2, [pc, #164]	; (800e2e8 <prvAddNewTaskToReadyList+0xb8>)
 800e244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e246:	4b29      	ldr	r3, [pc, #164]	; (800e2ec <prvAddNewTaskToReadyList+0xbc>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d109      	bne.n	800e262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e24e:	4a27      	ldr	r2, [pc, #156]	; (800e2ec <prvAddNewTaskToReadyList+0xbc>)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e254:	4b24      	ldr	r3, [pc, #144]	; (800e2e8 <prvAddNewTaskToReadyList+0xb8>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d110      	bne.n	800e27e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e25c:	f000 fc1e 	bl	800ea9c <prvInitialiseTaskLists>
 800e260:	e00d      	b.n	800e27e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e262:	4b23      	ldr	r3, [pc, #140]	; (800e2f0 <prvAddNewTaskToReadyList+0xc0>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d109      	bne.n	800e27e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e26a:	4b20      	ldr	r3, [pc, #128]	; (800e2ec <prvAddNewTaskToReadyList+0xbc>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	429a      	cmp	r2, r3
 800e276:	d802      	bhi.n	800e27e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e278:	4a1c      	ldr	r2, [pc, #112]	; (800e2ec <prvAddNewTaskToReadyList+0xbc>)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e27e:	4b1d      	ldr	r3, [pc, #116]	; (800e2f4 <prvAddNewTaskToReadyList+0xc4>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	4a1b      	ldr	r2, [pc, #108]	; (800e2f4 <prvAddNewTaskToReadyList+0xc4>)
 800e286:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28c:	2201      	movs	r2, #1
 800e28e:	409a      	lsls	r2, r3
 800e290:	4b19      	ldr	r3, [pc, #100]	; (800e2f8 <prvAddNewTaskToReadyList+0xc8>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4313      	orrs	r3, r2
 800e296:	4a18      	ldr	r2, [pc, #96]	; (800e2f8 <prvAddNewTaskToReadyList+0xc8>)
 800e298:	6013      	str	r3, [r2, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29e:	4613      	mov	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4a15      	ldr	r2, [pc, #84]	; (800e2fc <prvAddNewTaskToReadyList+0xcc>)
 800e2a8:	441a      	add	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f7fe fee8 	bl	800d086 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2b6:	f001 f821 	bl	800f2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	; (800e2f0 <prvAddNewTaskToReadyList+0xc0>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00e      	beq.n	800e2e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2c2:	4b0a      	ldr	r3, [pc, #40]	; (800e2ec <prvAddNewTaskToReadyList+0xbc>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d207      	bcs.n	800e2e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2d0:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <prvAddNewTaskToReadyList+0xd0>)
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20000508 	.word	0x20000508
 800e2ec:	20000408 	.word	0x20000408
 800e2f0:	20000514 	.word	0x20000514
 800e2f4:	20000524 	.word	0x20000524
 800e2f8:	20000510 	.word	0x20000510
 800e2fc:	2000040c 	.word	0x2000040c
 800e300:	e000ed04 	.word	0xe000ed04

0800e304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e30c:	2300      	movs	r3, #0
 800e30e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d018      	beq.n	800e348 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e316:	4b14      	ldr	r3, [pc, #80]	; (800e368 <vTaskDelay+0x64>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <vTaskDelay+0x32>
 800e31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e322:	b672      	cpsid	i
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	b662      	cpsie	i
 800e332:	60bb      	str	r3, [r7, #8]
 800e334:	e7fe      	b.n	800e334 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e336:	f000 f87d 	bl	800e434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e33a:	2100      	movs	r1, #0
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fe3f 	bl	800efc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e342:	f000 f885 	bl	800e450 <xTaskResumeAll>
 800e346:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d107      	bne.n	800e35e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e34e:	4b07      	ldr	r3, [pc, #28]	; (800e36c <vTaskDelay+0x68>)
 800e350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e354:	601a      	str	r2, [r3, #0]
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e35e:	bf00      	nop
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20000530 	.word	0x20000530
 800e36c:	e000ed04 	.word	0xe000ed04

0800e370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08a      	sub	sp, #40	; 0x28
 800e374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e376:	2300      	movs	r3, #0
 800e378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e37a:	2300      	movs	r3, #0
 800e37c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e37e:	463a      	mov	r2, r7
 800e380:	1d39      	adds	r1, r7, #4
 800e382:	f107 0308 	add.w	r3, r7, #8
 800e386:	4618      	mov	r0, r3
 800e388:	f7f2 fbc0 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e38c:	6839      	ldr	r1, [r7, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	9202      	str	r2, [sp, #8]
 800e394:	9301      	str	r3, [sp, #4]
 800e396:	2300      	movs	r3, #0
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	2300      	movs	r3, #0
 800e39c:	460a      	mov	r2, r1
 800e39e:	491f      	ldr	r1, [pc, #124]	; (800e41c <vTaskStartScheduler+0xac>)
 800e3a0:	481f      	ldr	r0, [pc, #124]	; (800e420 <vTaskStartScheduler+0xb0>)
 800e3a2:	f7ff fe0c 	bl	800dfbe <xTaskCreateStatic>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	4b1e      	ldr	r3, [pc, #120]	; (800e424 <vTaskStartScheduler+0xb4>)
 800e3aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3ac:	4b1d      	ldr	r3, [pc, #116]	; (800e424 <vTaskStartScheduler+0xb4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d002      	beq.n	800e3ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	617b      	str	r3, [r7, #20]
 800e3b8:	e001      	b.n	800e3be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d117      	bne.n	800e3f4 <vTaskStartScheduler+0x84>
 800e3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c8:	b672      	cpsid	i
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	b662      	cpsie	i
 800e3d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3da:	4b13      	ldr	r3, [pc, #76]	; (800e428 <vTaskStartScheduler+0xb8>)
 800e3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3e2:	4b12      	ldr	r3, [pc, #72]	; (800e42c <vTaskStartScheduler+0xbc>)
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3e8:	4b11      	ldr	r3, [pc, #68]	; (800e430 <vTaskStartScheduler+0xc0>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3ee:	f000 fed7 	bl	800f1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3f2:	e00f      	b.n	800e414 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fa:	d10b      	bne.n	800e414 <vTaskStartScheduler+0xa4>
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	b672      	cpsid	i
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	b662      	cpsie	i
 800e410:	60fb      	str	r3, [r7, #12]
 800e412:	e7fe      	b.n	800e412 <vTaskStartScheduler+0xa2>
}
 800e414:	bf00      	nop
 800e416:	3718      	adds	r7, #24
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	0802aa80 	.word	0x0802aa80
 800e420:	0800ea69 	.word	0x0800ea69
 800e424:	2000052c 	.word	0x2000052c
 800e428:	20000528 	.word	0x20000528
 800e42c:	20000514 	.word	0x20000514
 800e430:	2000050c 	.word	0x2000050c

0800e434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e438:	4b04      	ldr	r3, [pc, #16]	; (800e44c <vTaskSuspendAll+0x18>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3301      	adds	r3, #1
 800e43e:	4a03      	ldr	r2, [pc, #12]	; (800e44c <vTaskSuspendAll+0x18>)
 800e440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e442:	bf00      	nop
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	20000530 	.word	0x20000530

0800e450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e456:	2300      	movs	r3, #0
 800e458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e45e:	4b42      	ldr	r3, [pc, #264]	; (800e568 <xTaskResumeAll+0x118>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10b      	bne.n	800e47e <xTaskResumeAll+0x2e>
 800e466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46a:	b672      	cpsid	i
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	b662      	cpsie	i
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	e7fe      	b.n	800e47c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e47e:	f000 ff0b 	bl	800f298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e482:	4b39      	ldr	r3, [pc, #228]	; (800e568 <xTaskResumeAll+0x118>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3b01      	subs	r3, #1
 800e488:	4a37      	ldr	r2, [pc, #220]	; (800e568 <xTaskResumeAll+0x118>)
 800e48a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e48c:	4b36      	ldr	r3, [pc, #216]	; (800e568 <xTaskResumeAll+0x118>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d161      	bne.n	800e558 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e494:	4b35      	ldr	r3, [pc, #212]	; (800e56c <xTaskResumeAll+0x11c>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d05d      	beq.n	800e558 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e49c:	e02e      	b.n	800e4fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e49e:	4b34      	ldr	r3, [pc, #208]	; (800e570 <xTaskResumeAll+0x120>)
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3318      	adds	r3, #24
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe fe48 	bl	800d140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe fe43 	bl	800d140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4be:	2201      	movs	r2, #1
 800e4c0:	409a      	lsls	r2, r3
 800e4c2:	4b2c      	ldr	r3, [pc, #176]	; (800e574 <xTaskResumeAll+0x124>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	4a2a      	ldr	r2, [pc, #168]	; (800e574 <xTaskResumeAll+0x124>)
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4a27      	ldr	r2, [pc, #156]	; (800e578 <xTaskResumeAll+0x128>)
 800e4da:	441a      	add	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	4610      	mov	r0, r2
 800e4e4:	f7fe fdcf 	bl	800d086 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ec:	4b23      	ldr	r3, [pc, #140]	; (800e57c <xTaskResumeAll+0x12c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d302      	bcc.n	800e4fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e4f6:	4b22      	ldr	r3, [pc, #136]	; (800e580 <xTaskResumeAll+0x130>)
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4fc:	4b1c      	ldr	r3, [pc, #112]	; (800e570 <xTaskResumeAll+0x120>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1cc      	bne.n	800e49e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e50a:	f000 fb63 	bl	800ebd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e50e:	4b1d      	ldr	r3, [pc, #116]	; (800e584 <xTaskResumeAll+0x134>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d010      	beq.n	800e53c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e51a:	f000 f859 	bl	800e5d0 <xTaskIncrementTick>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e524:	4b16      	ldr	r3, [pc, #88]	; (800e580 <xTaskResumeAll+0x130>)
 800e526:	2201      	movs	r2, #1
 800e528:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1f1      	bne.n	800e51a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e536:	4b13      	ldr	r3, [pc, #76]	; (800e584 <xTaskResumeAll+0x134>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e53c:	4b10      	ldr	r3, [pc, #64]	; (800e580 <xTaskResumeAll+0x130>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d009      	beq.n	800e558 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e544:	2301      	movs	r3, #1
 800e546:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <xTaskResumeAll+0x138>)
 800e54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e558:	f000 fed0 	bl	800f2fc <vPortExitCritical>

	return xAlreadyYielded;
 800e55c:	68bb      	ldr	r3, [r7, #8]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000530 	.word	0x20000530
 800e56c:	20000508 	.word	0x20000508
 800e570:	200004c8 	.word	0x200004c8
 800e574:	20000510 	.word	0x20000510
 800e578:	2000040c 	.word	0x2000040c
 800e57c:	20000408 	.word	0x20000408
 800e580:	2000051c 	.word	0x2000051c
 800e584:	20000518 	.word	0x20000518
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e592:	4b05      	ldr	r3, [pc, #20]	; (800e5a8 <xTaskGetTickCount+0x1c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e598:	687b      	ldr	r3, [r7, #4]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	2000050c 	.word	0x2000050c

0800e5ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5b2:	f000 ff51 	bl	800f458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e5ba:	4b04      	ldr	r3, [pc, #16]	; (800e5cc <xTaskGetTickCountFromISR+0x20>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5c0:	683b      	ldr	r3, [r7, #0]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	2000050c 	.word	0x2000050c

0800e5d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b086      	sub	sp, #24
 800e5d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5da:	4b4f      	ldr	r3, [pc, #316]	; (800e718 <xTaskIncrementTick+0x148>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f040 8089 	bne.w	800e6f6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e5e4:	4b4d      	ldr	r3, [pc, #308]	; (800e71c <xTaskIncrementTick+0x14c>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5ec:	4a4b      	ldr	r2, [pc, #300]	; (800e71c <xTaskIncrementTick+0x14c>)
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d121      	bne.n	800e63c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5f8:	4b49      	ldr	r3, [pc, #292]	; (800e720 <xTaskIncrementTick+0x150>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00b      	beq.n	800e61a <xTaskIncrementTick+0x4a>
 800e602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e606:	b672      	cpsid	i
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	b662      	cpsie	i
 800e616:	603b      	str	r3, [r7, #0]
 800e618:	e7fe      	b.n	800e618 <xTaskIncrementTick+0x48>
 800e61a:	4b41      	ldr	r3, [pc, #260]	; (800e720 <xTaskIncrementTick+0x150>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	4b40      	ldr	r3, [pc, #256]	; (800e724 <xTaskIncrementTick+0x154>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a3e      	ldr	r2, [pc, #248]	; (800e720 <xTaskIncrementTick+0x150>)
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	4a3e      	ldr	r2, [pc, #248]	; (800e724 <xTaskIncrementTick+0x154>)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	4b3e      	ldr	r3, [pc, #248]	; (800e728 <xTaskIncrementTick+0x158>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3301      	adds	r3, #1
 800e634:	4a3c      	ldr	r2, [pc, #240]	; (800e728 <xTaskIncrementTick+0x158>)
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	f000 facc 	bl	800ebd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e63c:	4b3b      	ldr	r3, [pc, #236]	; (800e72c <xTaskIncrementTick+0x15c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	429a      	cmp	r2, r3
 800e644:	d348      	bcc.n	800e6d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e646:	4b36      	ldr	r3, [pc, #216]	; (800e720 <xTaskIncrementTick+0x150>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d104      	bne.n	800e65a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e650:	4b36      	ldr	r3, [pc, #216]	; (800e72c <xTaskIncrementTick+0x15c>)
 800e652:	f04f 32ff 	mov.w	r2, #4294967295
 800e656:	601a      	str	r2, [r3, #0]
					break;
 800e658:	e03e      	b.n	800e6d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e65a:	4b31      	ldr	r3, [pc, #196]	; (800e720 <xTaskIncrementTick+0x150>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d203      	bcs.n	800e67a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e672:	4a2e      	ldr	r2, [pc, #184]	; (800e72c <xTaskIncrementTick+0x15c>)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e678:	e02e      	b.n	800e6d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	3304      	adds	r3, #4
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe fd5e 	bl	800d140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d004      	beq.n	800e696 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	3318      	adds	r3, #24
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fd55 	bl	800d140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69a:	2201      	movs	r2, #1
 800e69c:	409a      	lsls	r2, r3
 800e69e:	4b24      	ldr	r3, [pc, #144]	; (800e730 <xTaskIncrementTick+0x160>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	4a22      	ldr	r2, [pc, #136]	; (800e730 <xTaskIncrementTick+0x160>)
 800e6a6:	6013      	str	r3, [r2, #0]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <xTaskIncrementTick+0x164>)
 800e6b6:	441a      	add	r2, r3
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	4619      	mov	r1, r3
 800e6be:	4610      	mov	r0, r2
 800e6c0:	f7fe fce1 	bl	800d086 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	4b1b      	ldr	r3, [pc, #108]	; (800e738 <xTaskIncrementTick+0x168>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d3b9      	bcc.n	800e646 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6d6:	e7b6      	b.n	800e646 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6d8:	4b17      	ldr	r3, [pc, #92]	; (800e738 <xTaskIncrementTick+0x168>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6de:	4915      	ldr	r1, [pc, #84]	; (800e734 <xTaskIncrementTick+0x164>)
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	440b      	add	r3, r1
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d907      	bls.n	800e700 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	e004      	b.n	800e700 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e6f6:	4b11      	ldr	r3, [pc, #68]	; (800e73c <xTaskIncrementTick+0x16c>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	4a0f      	ldr	r2, [pc, #60]	; (800e73c <xTaskIncrementTick+0x16c>)
 800e6fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e700:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <xTaskIncrementTick+0x170>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e708:	2301      	movs	r3, #1
 800e70a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e70c:	697b      	ldr	r3, [r7, #20]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20000530 	.word	0x20000530
 800e71c:	2000050c 	.word	0x2000050c
 800e720:	200004c0 	.word	0x200004c0
 800e724:	200004c4 	.word	0x200004c4
 800e728:	20000520 	.word	0x20000520
 800e72c:	20000528 	.word	0x20000528
 800e730:	20000510 	.word	0x20000510
 800e734:	2000040c 	.word	0x2000040c
 800e738:	20000408 	.word	0x20000408
 800e73c:	20000518 	.word	0x20000518
 800e740:	2000051c 	.word	0x2000051c

0800e744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b088      	sub	sp, #32
 800e748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e74a:	4b3a      	ldr	r3, [pc, #232]	; (800e834 <vTaskSwitchContext+0xf0>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d003      	beq.n	800e75a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e752:	4b39      	ldr	r3, [pc, #228]	; (800e838 <vTaskSwitchContext+0xf4>)
 800e754:	2201      	movs	r2, #1
 800e756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e758:	e067      	b.n	800e82a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e75a:	4b37      	ldr	r3, [pc, #220]	; (800e838 <vTaskSwitchContext+0xf4>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e760:	4b36      	ldr	r3, [pc, #216]	; (800e83c <vTaskSwitchContext+0xf8>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e766:	61fb      	str	r3, [r7, #28]
 800e768:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e76c:	61bb      	str	r3, [r7, #24]
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	69ba      	ldr	r2, [r7, #24]
 800e774:	429a      	cmp	r2, r3
 800e776:	d111      	bne.n	800e79c <vTaskSwitchContext+0x58>
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	3304      	adds	r3, #4
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	69ba      	ldr	r2, [r7, #24]
 800e780:	429a      	cmp	r2, r3
 800e782:	d10b      	bne.n	800e79c <vTaskSwitchContext+0x58>
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	3308      	adds	r3, #8
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d105      	bne.n	800e79c <vTaskSwitchContext+0x58>
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	330c      	adds	r3, #12
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69ba      	ldr	r2, [r7, #24]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d008      	beq.n	800e7ae <vTaskSwitchContext+0x6a>
 800e79c:	4b27      	ldr	r3, [pc, #156]	; (800e83c <vTaskSwitchContext+0xf8>)
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	4b26      	ldr	r3, [pc, #152]	; (800e83c <vTaskSwitchContext+0xf8>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3334      	adds	r3, #52	; 0x34
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f7f2 f99c 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ae:	4b24      	ldr	r3, [pc, #144]	; (800e840 <vTaskSwitchContext+0xfc>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	fab3 f383 	clz	r3, r3
 800e7ba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e7bc:	7afb      	ldrb	r3, [r7, #11]
 800e7be:	f1c3 031f 	rsb	r3, r3, #31
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	491f      	ldr	r1, [pc, #124]	; (800e844 <vTaskSwitchContext+0x100>)
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	440b      	add	r3, r1
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10b      	bne.n	800e7f0 <vTaskSwitchContext+0xac>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7dc:	b672      	cpsid	i
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	b662      	cpsie	i
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	e7fe      	b.n	800e7ee <vTaskSwitchContext+0xaa>
 800e7f0:	697a      	ldr	r2, [r7, #20]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	4413      	add	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4a12      	ldr	r2, [pc, #72]	; (800e844 <vTaskSwitchContext+0x100>)
 800e7fc:	4413      	add	r3, r2
 800e7fe:	613b      	str	r3, [r7, #16]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	605a      	str	r2, [r3, #4]
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3308      	adds	r3, #8
 800e812:	429a      	cmp	r2, r3
 800e814:	d104      	bne.n	800e820 <vTaskSwitchContext+0xdc>
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	605a      	str	r2, [r3, #4]
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	4a05      	ldr	r2, [pc, #20]	; (800e83c <vTaskSwitchContext+0xf8>)
 800e828:	6013      	str	r3, [r2, #0]
}
 800e82a:	bf00      	nop
 800e82c:	3720      	adds	r7, #32
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	20000530 	.word	0x20000530
 800e838:	2000051c 	.word	0x2000051c
 800e83c:	20000408 	.word	0x20000408
 800e840:	20000510 	.word	0x20000510
 800e844:	2000040c 	.word	0x2000040c

0800e848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10b      	bne.n	800e870 <vTaskPlaceOnEventList+0x28>
 800e858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85c:	b672      	cpsid	i
 800e85e:	f383 8811 	msr	BASEPRI, r3
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	f3bf 8f4f 	dsb	sy
 800e86a:	b662      	cpsie	i
 800e86c:	60fb      	str	r3, [r7, #12]
 800e86e:	e7fe      	b.n	800e86e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e870:	4b07      	ldr	r3, [pc, #28]	; (800e890 <vTaskPlaceOnEventList+0x48>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3318      	adds	r3, #24
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7fe fc28 	bl	800d0ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e87e:	2101      	movs	r1, #1
 800e880:	6838      	ldr	r0, [r7, #0]
 800e882:	f000 fb9d 	bl	800efc0 <prvAddCurrentTaskToDelayedList>
}
 800e886:	bf00      	nop
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000408 	.word	0x20000408

0800e894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10b      	bne.n	800e8c2 <xTaskRemoveFromEventList+0x2e>
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	b672      	cpsid	i
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	b662      	cpsie	i
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e7fe      	b.n	800e8c0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	3318      	adds	r3, #24
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fc3a 	bl	800d140 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8cc:	4b1d      	ldr	r3, [pc, #116]	; (800e944 <xTaskRemoveFromEventList+0xb0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11c      	bne.n	800e90e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fe fc31 	bl	800d140 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	409a      	lsls	r2, r3
 800e8e6:	4b18      	ldr	r3, [pc, #96]	; (800e948 <xTaskRemoveFromEventList+0xb4>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	4a16      	ldr	r2, [pc, #88]	; (800e948 <xTaskRemoveFromEventList+0xb4>)
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4a13      	ldr	r2, [pc, #76]	; (800e94c <xTaskRemoveFromEventList+0xb8>)
 800e8fe:	441a      	add	r2, r3
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	3304      	adds	r3, #4
 800e904:	4619      	mov	r1, r3
 800e906:	4610      	mov	r0, r2
 800e908:	f7fe fbbd 	bl	800d086 <vListInsertEnd>
 800e90c:	e005      	b.n	800e91a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	3318      	adds	r3, #24
 800e912:	4619      	mov	r1, r3
 800e914:	480e      	ldr	r0, [pc, #56]	; (800e950 <xTaskRemoveFromEventList+0xbc>)
 800e916:	f7fe fbb6 	bl	800d086 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91e:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <xTaskRemoveFromEventList+0xc0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	429a      	cmp	r2, r3
 800e926:	d905      	bls.n	800e934 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e928:	2301      	movs	r3, #1
 800e92a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e92c:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <xTaskRemoveFromEventList+0xc4>)
 800e92e:	2201      	movs	r2, #1
 800e930:	601a      	str	r2, [r3, #0]
 800e932:	e001      	b.n	800e938 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e934:	2300      	movs	r3, #0
 800e936:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e938:	697b      	ldr	r3, [r7, #20]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000530 	.word	0x20000530
 800e948:	20000510 	.word	0x20000510
 800e94c:	2000040c 	.word	0x2000040c
 800e950:	200004c8 	.word	0x200004c8
 800e954:	20000408 	.word	0x20000408
 800e958:	2000051c 	.word	0x2000051c

0800e95c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e964:	4b06      	ldr	r3, [pc, #24]	; (800e980 <vTaskInternalSetTimeOutState+0x24>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e96c:	4b05      	ldr	r3, [pc, #20]	; (800e984 <vTaskInternalSetTimeOutState+0x28>)
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	605a      	str	r2, [r3, #4]
}
 800e974:	bf00      	nop
 800e976:	370c      	adds	r7, #12
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr
 800e980:	20000520 	.word	0x20000520
 800e984:	2000050c 	.word	0x2000050c

0800e988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10b      	bne.n	800e9b0 <xTaskCheckForTimeOut+0x28>
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	b672      	cpsid	i
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	b662      	cpsie	i
 800e9ac:	613b      	str	r3, [r7, #16]
 800e9ae:	e7fe      	b.n	800e9ae <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d10b      	bne.n	800e9ce <xTaskCheckForTimeOut+0x46>
 800e9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ba:	b672      	cpsid	i
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	b662      	cpsie	i
 800e9ca:	60fb      	str	r3, [r7, #12]
 800e9cc:	e7fe      	b.n	800e9cc <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e9ce:	f000 fc63 	bl	800f298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9d2:	4b1d      	ldr	r3, [pc, #116]	; (800ea48 <xTaskCheckForTimeOut+0xc0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	69ba      	ldr	r2, [r7, #24]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d102      	bne.n	800e9f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	61fb      	str	r3, [r7, #28]
 800e9f0:	e023      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	4b15      	ldr	r3, [pc, #84]	; (800ea4c <xTaskCheckForTimeOut+0xc4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d007      	beq.n	800ea0e <xTaskCheckForTimeOut+0x86>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	69ba      	ldr	r2, [r7, #24]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d302      	bcc.n	800ea0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	e015      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d20b      	bcs.n	800ea30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	1ad2      	subs	r2, r2, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ff99 	bl	800e95c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61fb      	str	r3, [r7, #28]
 800ea2e:	e004      	b.n	800ea3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea36:	2301      	movs	r3, #1
 800ea38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea3a:	f000 fc5f 	bl	800f2fc <vPortExitCritical>

	return xReturn;
 800ea3e:	69fb      	ldr	r3, [r7, #28]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3720      	adds	r7, #32
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	2000050c 	.word	0x2000050c
 800ea4c:	20000520 	.word	0x20000520

0800ea50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea54:	4b03      	ldr	r3, [pc, #12]	; (800ea64 <vTaskMissedYield+0x14>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	601a      	str	r2, [r3, #0]
}
 800ea5a:	bf00      	nop
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr
 800ea64:	2000051c 	.word	0x2000051c

0800ea68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea70:	f000 f854 	bl	800eb1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea74:	4b07      	ldr	r3, [pc, #28]	; (800ea94 <prvIdleTask+0x2c>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d907      	bls.n	800ea8c <prvIdleTask+0x24>
			{
				taskYIELD();
 800ea7c:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <prvIdleTask+0x30>)
 800ea7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	f3bf 8f4f 	dsb	sy
 800ea88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ea8c:	f7f2 f824 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ea90:	e7ee      	b.n	800ea70 <prvIdleTask+0x8>
 800ea92:	bf00      	nop
 800ea94:	2000040c 	.word	0x2000040c
 800ea98:	e000ed04 	.word	0xe000ed04

0800ea9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	607b      	str	r3, [r7, #4]
 800eaa6:	e00c      	b.n	800eac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4413      	add	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4a12      	ldr	r2, [pc, #72]	; (800eafc <prvInitialiseTaskLists+0x60>)
 800eab4:	4413      	add	r3, r2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe fab8 	bl	800d02c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3301      	adds	r3, #1
 800eac0:	607b      	str	r3, [r7, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b06      	cmp	r3, #6
 800eac6:	d9ef      	bls.n	800eaa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eac8:	480d      	ldr	r0, [pc, #52]	; (800eb00 <prvInitialiseTaskLists+0x64>)
 800eaca:	f7fe faaf 	bl	800d02c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eace:	480d      	ldr	r0, [pc, #52]	; (800eb04 <prvInitialiseTaskLists+0x68>)
 800ead0:	f7fe faac 	bl	800d02c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ead4:	480c      	ldr	r0, [pc, #48]	; (800eb08 <prvInitialiseTaskLists+0x6c>)
 800ead6:	f7fe faa9 	bl	800d02c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eada:	480c      	ldr	r0, [pc, #48]	; (800eb0c <prvInitialiseTaskLists+0x70>)
 800eadc:	f7fe faa6 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eae0:	480b      	ldr	r0, [pc, #44]	; (800eb10 <prvInitialiseTaskLists+0x74>)
 800eae2:	f7fe faa3 	bl	800d02c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eae6:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <prvInitialiseTaskLists+0x78>)
 800eae8:	4a05      	ldr	r2, [pc, #20]	; (800eb00 <prvInitialiseTaskLists+0x64>)
 800eaea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eaec:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <prvInitialiseTaskLists+0x7c>)
 800eaee:	4a05      	ldr	r2, [pc, #20]	; (800eb04 <prvInitialiseTaskLists+0x68>)
 800eaf0:	601a      	str	r2, [r3, #0]
}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	2000040c 	.word	0x2000040c
 800eb00:	20000498 	.word	0x20000498
 800eb04:	200004ac 	.word	0x200004ac
 800eb08:	200004c8 	.word	0x200004c8
 800eb0c:	200004dc 	.word	0x200004dc
 800eb10:	200004f4 	.word	0x200004f4
 800eb14:	200004c0 	.word	0x200004c0
 800eb18:	200004c4 	.word	0x200004c4

0800eb1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb22:	e019      	b.n	800eb58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb24:	f000 fbb8 	bl	800f298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb28:	4b0f      	ldr	r3, [pc, #60]	; (800eb68 <prvCheckTasksWaitingTermination+0x4c>)
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3304      	adds	r3, #4
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe fb03 	bl	800d140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb3a:	4b0c      	ldr	r3, [pc, #48]	; (800eb6c <prvCheckTasksWaitingTermination+0x50>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	4a0a      	ldr	r2, [pc, #40]	; (800eb6c <prvCheckTasksWaitingTermination+0x50>)
 800eb42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb44:	4b0a      	ldr	r3, [pc, #40]	; (800eb70 <prvCheckTasksWaitingTermination+0x54>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	4a09      	ldr	r2, [pc, #36]	; (800eb70 <prvCheckTasksWaitingTermination+0x54>)
 800eb4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb4e:	f000 fbd5 	bl	800f2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f80e 	bl	800eb74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb58:	4b05      	ldr	r3, [pc, #20]	; (800eb70 <prvCheckTasksWaitingTermination+0x54>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1e1      	bne.n	800eb24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	200004dc 	.word	0x200004dc
 800eb6c:	20000508 	.word	0x20000508
 800eb70:	200004f0 	.word	0x200004f0

0800eb74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d108      	bne.n	800eb98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 fd72 	bl	800f674 <vPortFree>
				vPortFree( pxTCB );
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 fd6f 	bl	800f674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb96:	e019      	b.n	800ebcc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d103      	bne.n	800ebaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 fd66 	bl	800f674 <vPortFree>
	}
 800eba8:	e010      	b.n	800ebcc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ebb0:	2b02      	cmp	r3, #2
 800ebb2:	d00b      	beq.n	800ebcc <prvDeleteTCB+0x58>
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	b672      	cpsid	i
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	b662      	cpsie	i
 800ebc8:	60fb      	str	r3, [r7, #12]
 800ebca:	e7fe      	b.n	800ebca <prvDeleteTCB+0x56>
	}
 800ebcc:	bf00      	nop
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebda:	4b0c      	ldr	r3, [pc, #48]	; (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d104      	bne.n	800ebee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	; (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebec:	e008      	b.n	800ec00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebee:	4b07      	ldr	r3, [pc, #28]	; (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4a04      	ldr	r2, [pc, #16]	; (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebfe:	6013      	str	r3, [r2, #0]
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	200004c0 	.word	0x200004c0
 800ec10:	20000528 	.word	0x20000528

0800ec14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <xTaskGetSchedulerState+0x34>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d102      	bne.n	800ec28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec22:	2301      	movs	r3, #1
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	e008      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec28:	4b08      	ldr	r3, [pc, #32]	; (800ec4c <xTaskGetSchedulerState+0x38>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec30:	2302      	movs	r3, #2
 800ec32:	607b      	str	r3, [r7, #4]
 800ec34:	e001      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec36:	2300      	movs	r3, #0
 800ec38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec3a:	687b      	ldr	r3, [r7, #4]
	}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	20000514 	.word	0x20000514
 800ec4c:	20000530 	.word	0x20000530

0800ec50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d069      	beq.n	800ed3a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6a:	4b36      	ldr	r3, [pc, #216]	; (800ed44 <xTaskPriorityInherit+0xf4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d259      	bcs.n	800ed28 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db06      	blt.n	800ec8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7c:	4b31      	ldr	r3, [pc, #196]	; (800ed44 <xTaskPriorityInherit+0xf4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec82:	f1c3 0207 	rsb	r2, r3, #7
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6959      	ldr	r1, [r3, #20]
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4a2b      	ldr	r2, [pc, #172]	; (800ed48 <xTaskPriorityInherit+0xf8>)
 800ec9c:	4413      	add	r3, r2
 800ec9e:	4299      	cmp	r1, r3
 800eca0:	d13a      	bne.n	800ed18 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe fa4a 	bl	800d140 <uxListRemove>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d115      	bne.n	800ecde <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb6:	4924      	ldr	r1, [pc, #144]	; (800ed48 <xTaskPriorityInherit+0xf8>)
 800ecb8:	4613      	mov	r3, r2
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4413      	add	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	440b      	add	r3, r1
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10a      	bne.n	800ecde <xTaskPriorityInherit+0x8e>
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	2201      	movs	r2, #1
 800ecce:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd2:	43da      	mvns	r2, r3
 800ecd4:	4b1d      	ldr	r3, [pc, #116]	; (800ed4c <xTaskPriorityInherit+0xfc>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4013      	ands	r3, r2
 800ecda:	4a1c      	ldr	r2, [pc, #112]	; (800ed4c <xTaskPriorityInherit+0xfc>)
 800ecdc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecde:	4b19      	ldr	r3, [pc, #100]	; (800ed44 <xTaskPriorityInherit+0xf4>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	2201      	movs	r2, #1
 800ecee:	409a      	lsls	r2, r3
 800ecf0:	4b16      	ldr	r3, [pc, #88]	; (800ed4c <xTaskPriorityInherit+0xfc>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	4a15      	ldr	r2, [pc, #84]	; (800ed4c <xTaskPriorityInherit+0xfc>)
 800ecf8:	6013      	str	r3, [r2, #0]
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfe:	4613      	mov	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4a10      	ldr	r2, [pc, #64]	; (800ed48 <xTaskPriorityInherit+0xf8>)
 800ed08:	441a      	add	r2, r3
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	3304      	adds	r3, #4
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4610      	mov	r0, r2
 800ed12:	f7fe f9b8 	bl	800d086 <vListInsertEnd>
 800ed16:	e004      	b.n	800ed22 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <xTaskPriorityInherit+0xf4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed22:	2301      	movs	r3, #1
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	e008      	b.n	800ed3a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <xTaskPriorityInherit+0xf4>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d201      	bcs.n	800ed3a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed36:	2301      	movs	r3, #1
 800ed38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
	}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20000408 	.word	0x20000408
 800ed48:	2000040c 	.word	0x2000040c
 800ed4c:	20000510 	.word	0x20000510

0800ed50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d070      	beq.n	800ee48 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed66:	4b3b      	ldr	r3, [pc, #236]	; (800ee54 <xTaskPriorityDisinherit+0x104>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	693a      	ldr	r2, [r7, #16]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d00b      	beq.n	800ed88 <xTaskPriorityDisinherit+0x38>
 800ed70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed74:	b672      	cpsid	i
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	b662      	cpsie	i
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	e7fe      	b.n	800ed86 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10b      	bne.n	800eda8 <xTaskPriorityDisinherit+0x58>
 800ed90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed94:	b672      	cpsid	i
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	b662      	cpsie	i
 800eda4:	60bb      	str	r3, [r7, #8]
 800eda6:	e7fe      	b.n	800eda6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edac:	1e5a      	subs	r2, r3, #1
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edba:	429a      	cmp	r2, r3
 800edbc:	d044      	beq.n	800ee48 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d140      	bne.n	800ee48 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	3304      	adds	r3, #4
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe f9b8 	bl	800d140 <uxListRemove>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d115      	bne.n	800ee02 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edda:	491f      	ldr	r1, [pc, #124]	; (800ee58 <xTaskPriorityDisinherit+0x108>)
 800eddc:	4613      	mov	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	4413      	add	r3, r2
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	440b      	add	r3, r1
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10a      	bne.n	800ee02 <xTaskPriorityDisinherit+0xb2>
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf0:	2201      	movs	r2, #1
 800edf2:	fa02 f303 	lsl.w	r3, r2, r3
 800edf6:	43da      	mvns	r2, r3
 800edf8:	4b18      	ldr	r3, [pc, #96]	; (800ee5c <xTaskPriorityDisinherit+0x10c>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	4013      	ands	r3, r2
 800edfe:	4a17      	ldr	r2, [pc, #92]	; (800ee5c <xTaskPriorityDisinherit+0x10c>)
 800ee00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	f1c3 0207 	rsb	r2, r3, #7
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	409a      	lsls	r2, r3
 800ee1e:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <xTaskPriorityDisinherit+0x10c>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	4a0d      	ldr	r2, [pc, #52]	; (800ee5c <xTaskPriorityDisinherit+0x10c>)
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4a08      	ldr	r2, [pc, #32]	; (800ee58 <xTaskPriorityDisinherit+0x108>)
 800ee36:	441a      	add	r2, r3
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	4610      	mov	r0, r2
 800ee40:	f7fe f921 	bl	800d086 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee44:	2301      	movs	r3, #1
 800ee46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee48:	697b      	ldr	r3, [r7, #20]
	}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20000408 	.word	0x20000408
 800ee58:	2000040c 	.word	0x2000040c
 800ee5c:	20000510 	.word	0x20000510

0800ee60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b088      	sub	sp, #32
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 8085 	beq.w	800ef84 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10b      	bne.n	800ee9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	b672      	cpsid	i
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	b662      	cpsie	i
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	e7fe      	b.n	800ee98 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d902      	bls.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	61fb      	str	r3, [r7, #28]
 800eea8:	e002      	b.n	800eeb0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	69fa      	ldr	r2, [r7, #28]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d064      	beq.n	800ef84 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d15f      	bne.n	800ef84 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eec4:	4b31      	ldr	r3, [pc, #196]	; (800ef8c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	69ba      	ldr	r2, [r7, #24]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d10b      	bne.n	800eee6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	b672      	cpsid	i
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	b662      	cpsie	i
 800eee2:	60bb      	str	r3, [r7, #8]
 800eee4:	e7fe      	b.n	800eee4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	69fa      	ldr	r2, [r7, #28]
 800eef0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	db04      	blt.n	800ef04 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	f1c3 0207 	rsb	r2, r3, #7
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	6959      	ldr	r1, [r3, #20]
 800ef08:	693a      	ldr	r2, [r7, #16]
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4413      	add	r3, r2
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	4a1f      	ldr	r2, [pc, #124]	; (800ef90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ef14:	4413      	add	r3, r2
 800ef16:	4299      	cmp	r1, r3
 800ef18:	d134      	bne.n	800ef84 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe f90e 	bl	800d140 <uxListRemove>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d115      	bne.n	800ef56 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef2e:	4918      	ldr	r1, [pc, #96]	; (800ef90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ef30:	4613      	mov	r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	4413      	add	r3, r2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	440b      	add	r3, r1
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d10a      	bne.n	800ef56 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef44:	2201      	movs	r2, #1
 800ef46:	fa02 f303 	lsl.w	r3, r2, r3
 800ef4a:	43da      	mvns	r2, r3
 800ef4c:	4b11      	ldr	r3, [pc, #68]	; (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4013      	ands	r3, r2
 800ef52:	4a10      	ldr	r2, [pc, #64]	; (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	409a      	lsls	r2, r3
 800ef5e:	4b0d      	ldr	r3, [pc, #52]	; (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	4a0b      	ldr	r2, [pc, #44]	; (800ef94 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ef66:	6013      	str	r3, [r2, #0]
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	4413      	add	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4a06      	ldr	r2, [pc, #24]	; (800ef90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ef76:	441a      	add	r2, r3
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4610      	mov	r0, r2
 800ef80:	f7fe f881 	bl	800d086 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef84:	bf00      	nop
 800ef86:	3720      	adds	r7, #32
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20000408 	.word	0x20000408
 800ef90:	2000040c 	.word	0x2000040c
 800ef94:	20000510 	.word	0x20000510

0800ef98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef98:	b480      	push	{r7}
 800ef9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef9c:	4b07      	ldr	r3, [pc, #28]	; (800efbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d004      	beq.n	800efae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efa4:	4b05      	ldr	r3, [pc, #20]	; (800efbc <pvTaskIncrementMutexHeldCount+0x24>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800efaa:	3201      	adds	r2, #1
 800efac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800efae:	4b03      	ldr	r3, [pc, #12]	; (800efbc <pvTaskIncrementMutexHeldCount+0x24>)
 800efb0:	681b      	ldr	r3, [r3, #0]
	}
 800efb2:	4618      	mov	r0, r3
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	20000408 	.word	0x20000408

0800efc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efca:	4b29      	ldr	r3, [pc, #164]	; (800f070 <prvAddCurrentTaskToDelayedList+0xb0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efd0:	4b28      	ldr	r3, [pc, #160]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	3304      	adds	r3, #4
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe f8b2 	bl	800d140 <uxListRemove>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10b      	bne.n	800effa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800efe2:	4b24      	ldr	r3, [pc, #144]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe8:	2201      	movs	r2, #1
 800efea:	fa02 f303 	lsl.w	r3, r2, r3
 800efee:	43da      	mvns	r2, r3
 800eff0:	4b21      	ldr	r3, [pc, #132]	; (800f078 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4013      	ands	r3, r2
 800eff6:	4a20      	ldr	r2, [pc, #128]	; (800f078 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eff8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f000:	d10a      	bne.n	800f018 <prvAddCurrentTaskToDelayedList+0x58>
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d007      	beq.n	800f018 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f008:	4b1a      	ldr	r3, [pc, #104]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3304      	adds	r3, #4
 800f00e:	4619      	mov	r1, r3
 800f010:	481a      	ldr	r0, [pc, #104]	; (800f07c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f012:	f7fe f838 	bl	800d086 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f016:	e026      	b.n	800f066 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4413      	add	r3, r2
 800f01e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f020:	4b14      	ldr	r3, [pc, #80]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d209      	bcs.n	800f044 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f030:	4b13      	ldr	r3, [pc, #76]	; (800f080 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3304      	adds	r3, #4
 800f03a:	4619      	mov	r1, r3
 800f03c:	4610      	mov	r0, r2
 800f03e:	f7fe f846 	bl	800d0ce <vListInsert>
}
 800f042:	e010      	b.n	800f066 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f044:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3304      	adds	r3, #4
 800f04e:	4619      	mov	r1, r3
 800f050:	4610      	mov	r0, r2
 800f052:	f7fe f83c 	bl	800d0ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f056:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d202      	bcs.n	800f066 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f060:	4a09      	ldr	r2, [pc, #36]	; (800f088 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	6013      	str	r3, [r2, #0]
}
 800f066:	bf00      	nop
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	2000050c 	.word	0x2000050c
 800f074:	20000408 	.word	0x20000408
 800f078:	20000510 	.word	0x20000510
 800f07c:	200004f4 	.word	0x200004f4
 800f080:	200004c4 	.word	0x200004c4
 800f084:	200004c0 	.word	0x200004c0
 800f088:	20000528 	.word	0x20000528

0800f08c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3b04      	subs	r3, #4
 800f09c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f023 0201 	bic.w	r2, r3, #1
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3b04      	subs	r3, #4
 800f0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0bc:	4a0c      	ldr	r2, [pc, #48]	; (800f0f0 <pxPortInitialiseStack+0x64>)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	3b14      	subs	r3, #20
 800f0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	3b04      	subs	r3, #4
 800f0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f06f 0202 	mvn.w	r2, #2
 800f0da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3b20      	subs	r3, #32
 800f0e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	0800f0f5 	.word	0x0800f0f5

0800f0f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0fe:	4b13      	ldr	r3, [pc, #76]	; (800f14c <prvTaskExitError+0x58>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f106:	d00b      	beq.n	800f120 <prvTaskExitError+0x2c>
 800f108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10c:	b672      	cpsid	i
 800f10e:	f383 8811 	msr	BASEPRI, r3
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	f3bf 8f4f 	dsb	sy
 800f11a:	b662      	cpsie	i
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	e7fe      	b.n	800f11e <prvTaskExitError+0x2a>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	b672      	cpsid	i
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	b662      	cpsie	i
 800f134:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f136:	bf00      	nop
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d0fc      	beq.n	800f138 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f13e:	bf00      	nop
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	20000024 	.word	0x20000024

0800f150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f150:	4b07      	ldr	r3, [pc, #28]	; (800f170 <pxCurrentTCBConst2>)
 800f152:	6819      	ldr	r1, [r3, #0]
 800f154:	6808      	ldr	r0, [r1, #0]
 800f156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15a:	f380 8809 	msr	PSP, r0
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8811 	msr	BASEPRI, r0
 800f16a:	4770      	bx	lr
 800f16c:	f3af 8000 	nop.w

0800f170 <pxCurrentTCBConst2>:
 800f170:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop

0800f178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f178:	4808      	ldr	r0, [pc, #32]	; (800f19c <prvPortStartFirstTask+0x24>)
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	6800      	ldr	r0, [r0, #0]
 800f17e:	f380 8808 	msr	MSP, r0
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8814 	msr	CONTROL, r0
 800f18a:	b662      	cpsie	i
 800f18c:	b661      	cpsie	f
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	df00      	svc	0
 800f198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f19a:	bf00      	nop
 800f19c:	e000ed08 	.word	0xe000ed08

0800f1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1a6:	4b36      	ldr	r3, [pc, #216]	; (800f280 <xPortStartScheduler+0xe0>)
 800f1a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	22ff      	movs	r2, #255	; 0xff
 800f1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1c0:	78fb      	ldrb	r3, [r7, #3]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	4b2e      	ldr	r3, [pc, #184]	; (800f284 <xPortStartScheduler+0xe4>)
 800f1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ce:	4b2e      	ldr	r3, [pc, #184]	; (800f288 <xPortStartScheduler+0xe8>)
 800f1d0:	2207      	movs	r2, #7
 800f1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1d4:	e009      	b.n	800f1ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f1d6:	4b2c      	ldr	r3, [pc, #176]	; (800f288 <xPortStartScheduler+0xe8>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4a2a      	ldr	r2, [pc, #168]	; (800f288 <xPortStartScheduler+0xe8>)
 800f1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1e0:	78fb      	ldrb	r3, [r7, #3]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f2:	2b80      	cmp	r3, #128	; 0x80
 800f1f4:	d0ef      	beq.n	800f1d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1f6:	4b24      	ldr	r3, [pc, #144]	; (800f288 <xPortStartScheduler+0xe8>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f1c3 0307 	rsb	r3, r3, #7
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d00b      	beq.n	800f21a <xPortStartScheduler+0x7a>
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	b672      	cpsid	i
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	b662      	cpsie	i
 800f216:	60bb      	str	r3, [r7, #8]
 800f218:	e7fe      	b.n	800f218 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f21a:	4b1b      	ldr	r3, [pc, #108]	; (800f288 <xPortStartScheduler+0xe8>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	021b      	lsls	r3, r3, #8
 800f220:	4a19      	ldr	r2, [pc, #100]	; (800f288 <xPortStartScheduler+0xe8>)
 800f222:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f224:	4b18      	ldr	r3, [pc, #96]	; (800f288 <xPortStartScheduler+0xe8>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f22c:	4a16      	ldr	r2, [pc, #88]	; (800f288 <xPortStartScheduler+0xe8>)
 800f22e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	b2da      	uxtb	r2, r3
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f238:	4b14      	ldr	r3, [pc, #80]	; (800f28c <xPortStartScheduler+0xec>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a13      	ldr	r2, [pc, #76]	; (800f28c <xPortStartScheduler+0xec>)
 800f23e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f242:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f244:	4b11      	ldr	r3, [pc, #68]	; (800f28c <xPortStartScheduler+0xec>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a10      	ldr	r2, [pc, #64]	; (800f28c <xPortStartScheduler+0xec>)
 800f24a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f24e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f250:	f000 f8d4 	bl	800f3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f254:	4b0e      	ldr	r3, [pc, #56]	; (800f290 <xPortStartScheduler+0xf0>)
 800f256:	2200      	movs	r2, #0
 800f258:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f25a:	f000 f8f3 	bl	800f444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f25e:	4b0d      	ldr	r3, [pc, #52]	; (800f294 <xPortStartScheduler+0xf4>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a0c      	ldr	r2, [pc, #48]	; (800f294 <xPortStartScheduler+0xf4>)
 800f264:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f268:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f26a:	f7ff ff85 	bl	800f178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f26e:	f7ff fa69 	bl	800e744 <vTaskSwitchContext>
	prvTaskExitError();
 800f272:	f7ff ff3f 	bl	800f0f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3710      	adds	r7, #16
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	e000e400 	.word	0xe000e400
 800f284:	20000534 	.word	0x20000534
 800f288:	20000538 	.word	0x20000538
 800f28c:	e000ed20 	.word	0xe000ed20
 800f290:	20000024 	.word	0x20000024
 800f294:	e000ef34 	.word	0xe000ef34

0800f298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f298:	b480      	push	{r7}
 800f29a:	b083      	sub	sp, #12
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	b672      	cpsid	i
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	b662      	cpsie	i
 800f2b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	; (800f2f4 <vPortEnterCritical+0x5c>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	4a0e      	ldr	r2, [pc, #56]	; (800f2f4 <vPortEnterCritical+0x5c>)
 800f2bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2be:	4b0d      	ldr	r3, [pc, #52]	; (800f2f4 <vPortEnterCritical+0x5c>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d110      	bne.n	800f2e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2c6:	4b0c      	ldr	r3, [pc, #48]	; (800f2f8 <vPortEnterCritical+0x60>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00b      	beq.n	800f2e8 <vPortEnterCritical+0x50>
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	b672      	cpsid	i
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	b662      	cpsie	i
 800f2e4:	603b      	str	r3, [r7, #0]
 800f2e6:	e7fe      	b.n	800f2e6 <vPortEnterCritical+0x4e>
	}
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr
 800f2f4:	20000024 	.word	0x20000024
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f302:	4b12      	ldr	r3, [pc, #72]	; (800f34c <vPortExitCritical+0x50>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10b      	bne.n	800f322 <vPortExitCritical+0x26>
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	b672      	cpsid	i
 800f310:	f383 8811 	msr	BASEPRI, r3
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	b662      	cpsie	i
 800f31e:	607b      	str	r3, [r7, #4]
 800f320:	e7fe      	b.n	800f320 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f322:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <vPortExitCritical+0x50>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	3b01      	subs	r3, #1
 800f328:	4a08      	ldr	r2, [pc, #32]	; (800f34c <vPortExitCritical+0x50>)
 800f32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f32c:	4b07      	ldr	r3, [pc, #28]	; (800f34c <vPortExitCritical+0x50>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d104      	bne.n	800f33e <vPortExitCritical+0x42>
 800f334:	2300      	movs	r3, #0
 800f336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f33e:	bf00      	nop
 800f340:	370c      	adds	r7, #12
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	20000024 	.word	0x20000024

0800f350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f350:	f3ef 8009 	mrs	r0, PSP
 800f354:	f3bf 8f6f 	isb	sy
 800f358:	4b15      	ldr	r3, [pc, #84]	; (800f3b0 <pxCurrentTCBConst>)
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	f01e 0f10 	tst.w	lr, #16
 800f360:	bf08      	it	eq
 800f362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36a:	6010      	str	r0, [r2, #0]
 800f36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f374:	b672      	cpsid	i
 800f376:	f380 8811 	msr	BASEPRI, r0
 800f37a:	f3bf 8f4f 	dsb	sy
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	b662      	cpsie	i
 800f384:	f7ff f9de 	bl	800e744 <vTaskSwitchContext>
 800f388:	f04f 0000 	mov.w	r0, #0
 800f38c:	f380 8811 	msr	BASEPRI, r0
 800f390:	bc09      	pop	{r0, r3}
 800f392:	6819      	ldr	r1, [r3, #0]
 800f394:	6808      	ldr	r0, [r1, #0]
 800f396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	f01e 0f10 	tst.w	lr, #16
 800f39e:	bf08      	it	eq
 800f3a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3a4:	f380 8809 	msr	PSP, r0
 800f3a8:	f3bf 8f6f 	isb	sy
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop

0800f3b0 <pxCurrentTCBConst>:
 800f3b0:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop

0800f3b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	b672      	cpsid	i
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	b662      	cpsie	i
 800f3d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3d4:	f7ff f8fc 	bl	800e5d0 <xTaskIncrementTick>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d003      	beq.n	800f3e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3de:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <SysTick_Handler+0x40>)
 800f3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e4:	601a      	str	r2, [r3, #0]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f3f0:	bf00      	nop
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f400:	4b0b      	ldr	r3, [pc, #44]	; (800f430 <vPortSetupTimerInterrupt+0x34>)
 800f402:	2200      	movs	r2, #0
 800f404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f406:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <vPortSetupTimerInterrupt+0x38>)
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f40c:	4b0a      	ldr	r3, [pc, #40]	; (800f438 <vPortSetupTimerInterrupt+0x3c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a0a      	ldr	r2, [pc, #40]	; (800f43c <vPortSetupTimerInterrupt+0x40>)
 800f412:	fba2 2303 	umull	r2, r3, r2, r3
 800f416:	099b      	lsrs	r3, r3, #6
 800f418:	4a09      	ldr	r2, [pc, #36]	; (800f440 <vPortSetupTimerInterrupt+0x44>)
 800f41a:	3b01      	subs	r3, #1
 800f41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f41e:	4b04      	ldr	r3, [pc, #16]	; (800f430 <vPortSetupTimerInterrupt+0x34>)
 800f420:	2207      	movs	r2, #7
 800f422:	601a      	str	r2, [r3, #0]
}
 800f424:	bf00      	nop
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	e000e010 	.word	0xe000e010
 800f434:	e000e018 	.word	0xe000e018
 800f438:	20000018 	.word	0x20000018
 800f43c:	10624dd3 	.word	0x10624dd3
 800f440:	e000e014 	.word	0xe000e014

0800f444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f454 <vPortEnableVFP+0x10>
 800f448:	6801      	ldr	r1, [r0, #0]
 800f44a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f44e:	6001      	str	r1, [r0, #0]
 800f450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f452:	bf00      	nop
 800f454:	e000ed88 	.word	0xe000ed88

0800f458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f45e:	f3ef 8305 	mrs	r3, IPSR
 800f462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b0f      	cmp	r3, #15
 800f468:	d915      	bls.n	800f496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f46a:	4a18      	ldr	r2, [pc, #96]	; (800f4cc <vPortValidateInterruptPriority+0x74>)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4413      	add	r3, r2
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f474:	4b16      	ldr	r3, [pc, #88]	; (800f4d0 <vPortValidateInterruptPriority+0x78>)
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	7afa      	ldrb	r2, [r7, #11]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d20b      	bcs.n	800f496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	b672      	cpsid	i
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	b662      	cpsie	i
 800f492:	607b      	str	r3, [r7, #4]
 800f494:	e7fe      	b.n	800f494 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f496:	4b0f      	ldr	r3, [pc, #60]	; (800f4d4 <vPortValidateInterruptPriority+0x7c>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f49e:	4b0e      	ldr	r3, [pc, #56]	; (800f4d8 <vPortValidateInterruptPriority+0x80>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d90b      	bls.n	800f4be <vPortValidateInterruptPriority+0x66>
 800f4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4aa:	b672      	cpsid	i
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	b662      	cpsie	i
 800f4ba:	603b      	str	r3, [r7, #0]
 800f4bc:	e7fe      	b.n	800f4bc <vPortValidateInterruptPriority+0x64>
	}
 800f4be:	bf00      	nop
 800f4c0:	3714      	adds	r7, #20
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	e000e3f0 	.word	0xe000e3f0
 800f4d0:	20000534 	.word	0x20000534
 800f4d4:	e000ed0c 	.word	0xe000ed0c
 800f4d8:	20000538 	.word	0x20000538

0800f4dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b08a      	sub	sp, #40	; 0x28
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4e8:	f7fe ffa4 	bl	800e434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4ec:	4b5c      	ldr	r3, [pc, #368]	; (800f660 <pvPortMalloc+0x184>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d101      	bne.n	800f4f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f4f4:	f000 f91a 	bl	800f72c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4f8:	4b5a      	ldr	r3, [pc, #360]	; (800f664 <pvPortMalloc+0x188>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4013      	ands	r3, r2
 800f500:	2b00      	cmp	r3, #0
 800f502:	f040 8090 	bne.w	800f626 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01e      	beq.n	800f54a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f50c:	2208      	movs	r2, #8
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4413      	add	r3, r2
 800f512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f003 0307 	and.w	r3, r3, #7
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d015      	beq.n	800f54a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f023 0307 	bic.w	r3, r3, #7
 800f524:	3308      	adds	r3, #8
 800f526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f003 0307 	and.w	r3, r3, #7
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00b      	beq.n	800f54a <pvPortMalloc+0x6e>
 800f532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f536:	b672      	cpsid	i
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	b662      	cpsie	i
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	e7fe      	b.n	800f548 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d06a      	beq.n	800f626 <pvPortMalloc+0x14a>
 800f550:	4b45      	ldr	r3, [pc, #276]	; (800f668 <pvPortMalloc+0x18c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d865      	bhi.n	800f626 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f55a:	4b44      	ldr	r3, [pc, #272]	; (800f66c <pvPortMalloc+0x190>)
 800f55c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f55e:	4b43      	ldr	r3, [pc, #268]	; (800f66c <pvPortMalloc+0x190>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f564:	e004      	b.n	800f570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	429a      	cmp	r2, r3
 800f578:	d903      	bls.n	800f582 <pvPortMalloc+0xa6>
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d1f1      	bne.n	800f566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f582:	4b37      	ldr	r3, [pc, #220]	; (800f660 <pvPortMalloc+0x184>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f588:	429a      	cmp	r2, r3
 800f58a:	d04c      	beq.n	800f626 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2208      	movs	r2, #8
 800f592:	4413      	add	r3, r2
 800f594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	6a3b      	ldr	r3, [r7, #32]
 800f59c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	1ad2      	subs	r2, r2, r3
 800f5a6:	2308      	movs	r3, #8
 800f5a8:	005b      	lsls	r3, r3, #1
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d920      	bls.n	800f5f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5b6:	69bb      	ldr	r3, [r7, #24]
 800f5b8:	f003 0307 	and.w	r3, r3, #7
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <pvPortMalloc+0xfc>
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	b672      	cpsid	i
 800f5c6:	f383 8811 	msr	BASEPRI, r3
 800f5ca:	f3bf 8f6f 	isb	sy
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	b662      	cpsie	i
 800f5d4:	613b      	str	r3, [r7, #16]
 800f5d6:	e7fe      	b.n	800f5d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5ea:	69b8      	ldr	r0, [r7, #24]
 800f5ec:	f000 f900 	bl	800f7f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5f0:	4b1d      	ldr	r3, [pc, #116]	; (800f668 <pvPortMalloc+0x18c>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	4a1b      	ldr	r2, [pc, #108]	; (800f668 <pvPortMalloc+0x18c>)
 800f5fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5fe:	4b1a      	ldr	r3, [pc, #104]	; (800f668 <pvPortMalloc+0x18c>)
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	4b1b      	ldr	r3, [pc, #108]	; (800f670 <pvPortMalloc+0x194>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	429a      	cmp	r2, r3
 800f608:	d203      	bcs.n	800f612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f60a:	4b17      	ldr	r3, [pc, #92]	; (800f668 <pvPortMalloc+0x18c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a18      	ldr	r2, [pc, #96]	; (800f670 <pvPortMalloc+0x194>)
 800f610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	4b13      	ldr	r3, [pc, #76]	; (800f664 <pvPortMalloc+0x188>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	431a      	orrs	r2, r3
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f626:	f7fe ff13 	bl	800e450 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f630:	f7f1 fa64 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	f003 0307 	and.w	r3, r3, #7
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00b      	beq.n	800f656 <pvPortMalloc+0x17a>
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	b672      	cpsid	i
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	b662      	cpsie	i
 800f652:	60fb      	str	r3, [r7, #12]
 800f654:	e7fe      	b.n	800f654 <pvPortMalloc+0x178>
	return pvReturn;
 800f656:	69fb      	ldr	r3, [r7, #28]
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3728      	adds	r7, #40	; 0x28
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	20008544 	.word	0x20008544
 800f664:	20008550 	.word	0x20008550
 800f668:	20008548 	.word	0x20008548
 800f66c:	2000853c 	.word	0x2000853c
 800f670:	2000854c 	.word	0x2000854c

0800f674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d04a      	beq.n	800f71c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f686:	2308      	movs	r3, #8
 800f688:	425b      	negs	r3, r3
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4413      	add	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	4b22      	ldr	r3, [pc, #136]	; (800f724 <vPortFree+0xb0>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4013      	ands	r3, r2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10b      	bne.n	800f6ba <vPortFree+0x46>
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	b672      	cpsid	i
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	b662      	cpsie	i
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	e7fe      	b.n	800f6b8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00b      	beq.n	800f6da <vPortFree+0x66>
 800f6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c6:	b672      	cpsid	i
 800f6c8:	f383 8811 	msr	BASEPRI, r3
 800f6cc:	f3bf 8f6f 	isb	sy
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	b662      	cpsie	i
 800f6d6:	60bb      	str	r3, [r7, #8]
 800f6d8:	e7fe      	b.n	800f6d8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	4b11      	ldr	r3, [pc, #68]	; (800f724 <vPortFree+0xb0>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d019      	beq.n	800f71c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d115      	bne.n	800f71c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	685a      	ldr	r2, [r3, #4]
 800f6f4:	4b0b      	ldr	r3, [pc, #44]	; (800f724 <vPortFree+0xb0>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	43db      	mvns	r3, r3
 800f6fa:	401a      	ands	r2, r3
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f700:	f7fe fe98 	bl	800e434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	685a      	ldr	r2, [r3, #4]
 800f708:	4b07      	ldr	r3, [pc, #28]	; (800f728 <vPortFree+0xb4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4413      	add	r3, r2
 800f70e:	4a06      	ldr	r2, [pc, #24]	; (800f728 <vPortFree+0xb4>)
 800f710:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f712:	6938      	ldr	r0, [r7, #16]
 800f714:	f000 f86c 	bl	800f7f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f718:	f7fe fe9a 	bl	800e450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f71c:	bf00      	nop
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	20008550 	.word	0x20008550
 800f728:	20008548 	.word	0x20008548

0800f72c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f738:	4b27      	ldr	r3, [pc, #156]	; (800f7d8 <prvHeapInit+0xac>)
 800f73a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00c      	beq.n	800f760 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3307      	adds	r3, #7
 800f74a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f023 0307 	bic.w	r3, r3, #7
 800f752:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	4a1f      	ldr	r2, [pc, #124]	; (800f7d8 <prvHeapInit+0xac>)
 800f75c:	4413      	add	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f764:	4a1d      	ldr	r2, [pc, #116]	; (800f7dc <prvHeapInit+0xb0>)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f76a:	4b1c      	ldr	r3, [pc, #112]	; (800f7dc <prvHeapInit+0xb0>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	4413      	add	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f778:	2208      	movs	r2, #8
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	1a9b      	subs	r3, r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f023 0307 	bic.w	r3, r3, #7
 800f786:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	4a15      	ldr	r2, [pc, #84]	; (800f7e0 <prvHeapInit+0xb4>)
 800f78c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f78e:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <prvHeapInit+0xb4>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f796:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <prvHeapInit+0xb4>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2200      	movs	r2, #0
 800f79c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	68fa      	ldr	r2, [r7, #12]
 800f7a6:	1ad2      	subs	r2, r2, r3
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7ac:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <prvHeapInit+0xb4>)
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4a0a      	ldr	r2, [pc, #40]	; (800f7e4 <prvHeapInit+0xb8>)
 800f7ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4a09      	ldr	r2, [pc, #36]	; (800f7e8 <prvHeapInit+0xbc>)
 800f7c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7c4:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <prvHeapInit+0xc0>)
 800f7c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7ca:	601a      	str	r2, [r3, #0]
}
 800f7cc:	bf00      	nop
 800f7ce:	3714      	adds	r7, #20
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	2000053c 	.word	0x2000053c
 800f7dc:	2000853c 	.word	0x2000853c
 800f7e0:	20008544 	.word	0x20008544
 800f7e4:	2000854c 	.word	0x2000854c
 800f7e8:	20008548 	.word	0x20008548
 800f7ec:	20008550 	.word	0x20008550

0800f7f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7f8:	4b28      	ldr	r3, [pc, #160]	; (800f89c <prvInsertBlockIntoFreeList+0xac>)
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	e002      	b.n	800f804 <prvInsertBlockIntoFreeList+0x14>
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	60fb      	str	r3, [r7, #12]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d8f7      	bhi.n	800f7fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	68ba      	ldr	r2, [r7, #8]
 800f818:	4413      	add	r3, r2
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d108      	bne.n	800f832 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	441a      	add	r2, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	441a      	add	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	429a      	cmp	r2, r3
 800f844:	d118      	bne.n	800f878 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	4b15      	ldr	r3, [pc, #84]	; (800f8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d00d      	beq.n	800f86e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	441a      	add	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	e008      	b.n	800f880 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f86e:	4b0c      	ldr	r3, [pc, #48]	; (800f8a0 <prvInsertBlockIntoFreeList+0xb0>)
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	601a      	str	r2, [r3, #0]
 800f876:	e003      	b.n	800f880 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	429a      	cmp	r2, r3
 800f886:	d002      	beq.n	800f88e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f88e:	bf00      	nop
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	2000853c 	.word	0x2000853c
 800f8a0:	20008544 	.word	0x20008544

0800f8a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b08c      	sub	sp, #48	; 0x30
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a51      	ldr	r2, [pc, #324]	; (800f9f4 <I2Cx_MspInit+0x150>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d14d      	bne.n	800f950 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f8b4:	4b50      	ldr	r3, [pc, #320]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8b8:	4a4f      	ldr	r2, [pc, #316]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8be:	6313      	str	r3, [r2, #48]	; 0x30
 800f8c0:	4b4d      	ldr	r3, [pc, #308]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8c8:	61bb      	str	r3, [r7, #24]
 800f8ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800f8cc:	2380      	movs	r3, #128	; 0x80
 800f8ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f8d0:	2312      	movs	r3, #18
 800f8d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f8d8:	2302      	movs	r3, #2
 800f8da:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800f8dc:	2304      	movs	r3, #4
 800f8de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f8e0:	f107 031c 	add.w	r3, r7, #28
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4845      	ldr	r0, [pc, #276]	; (800f9fc <I2Cx_MspInit+0x158>)
 800f8e8:	f7f5 ff7e 	bl	80057e8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800f8ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f8f2:	f107 031c 	add.w	r3, r7, #28
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4840      	ldr	r0, [pc, #256]	; (800f9fc <I2Cx_MspInit+0x158>)
 800f8fa:	f7f5 ff75 	bl	80057e8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800f8fe:	4b3e      	ldr	r3, [pc, #248]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f902:	4a3d      	ldr	r2, [pc, #244]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f908:	6413      	str	r3, [r2, #64]	; 0x40
 800f90a:	4b3b      	ldr	r3, [pc, #236]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f912:	617b      	str	r3, [r7, #20]
 800f914:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800f916:	4b38      	ldr	r3, [pc, #224]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	4a37      	ldr	r2, [pc, #220]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f91c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f920:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800f922:	4b35      	ldr	r3, [pc, #212]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	4a34      	ldr	r2, [pc, #208]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f92c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800f92e:	2200      	movs	r2, #0
 800f930:	210f      	movs	r1, #15
 800f932:	2048      	movs	r0, #72	; 0x48
 800f934:	f7f5 f92a 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800f938:	2048      	movs	r0, #72	; 0x48
 800f93a:	f7f5 f943 	bl	8004bc4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800f93e:	2200      	movs	r2, #0
 800f940:	210f      	movs	r1, #15
 800f942:	2049      	movs	r0, #73	; 0x49
 800f944:	f7f5 f922 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800f948:	2049      	movs	r0, #73	; 0x49
 800f94a:	f7f5 f93b 	bl	8004bc4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800f94e:	e04d      	b.n	800f9ec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800f950:	4b29      	ldr	r3, [pc, #164]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f954:	4a28      	ldr	r2, [pc, #160]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f956:	f043 0302 	orr.w	r3, r3, #2
 800f95a:	6313      	str	r3, [r2, #48]	; 0x30
 800f95c:	4b26      	ldr	r3, [pc, #152]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f960:	f003 0302 	and.w	r3, r3, #2
 800f964:	613b      	str	r3, [r7, #16]
 800f966:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800f968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f96c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800f96e:	2312      	movs	r3, #18
 800f970:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800f972:	2300      	movs	r3, #0
 800f974:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800f976:	2302      	movs	r3, #2
 800f978:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800f97a:	2304      	movs	r3, #4
 800f97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f97e:	f107 031c 	add.w	r3, r7, #28
 800f982:	4619      	mov	r1, r3
 800f984:	481e      	ldr	r0, [pc, #120]	; (800fa00 <I2Cx_MspInit+0x15c>)
 800f986:	f7f5 ff2f 	bl	80057e8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800f98a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f98e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800f990:	f107 031c 	add.w	r3, r7, #28
 800f994:	4619      	mov	r1, r3
 800f996:	481a      	ldr	r0, [pc, #104]	; (800fa00 <I2Cx_MspInit+0x15c>)
 800f998:	f7f5 ff26 	bl	80057e8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800f99c:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a0:	4a15      	ldr	r2, [pc, #84]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9a6:	6413      	str	r3, [r2, #64]	; 0x40
 800f9a8:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f9b0:	60fb      	str	r3, [r7, #12]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800f9b4:	4b10      	ldr	r3, [pc, #64]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9b6:	6a1b      	ldr	r3, [r3, #32]
 800f9b8:	4a0f      	ldr	r2, [pc, #60]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f9be:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800f9c0:	4b0d      	ldr	r3, [pc, #52]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9c2:	6a1b      	ldr	r3, [r3, #32]
 800f9c4:	4a0c      	ldr	r2, [pc, #48]	; (800f9f8 <I2Cx_MspInit+0x154>)
 800f9c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f9ca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	210f      	movs	r1, #15
 800f9d0:	201f      	movs	r0, #31
 800f9d2:	f7f5 f8db 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800f9d6:	201f      	movs	r0, #31
 800f9d8:	f7f5 f8f4 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800f9dc:	2200      	movs	r2, #0
 800f9de:	210f      	movs	r1, #15
 800f9e0:	2020      	movs	r0, #32
 800f9e2:	f7f5 f8d3 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800f9e6:	2020      	movs	r0, #32
 800f9e8:	f7f5 f8ec 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
}
 800f9ec:	bf00      	nop
 800f9ee:	3730      	adds	r7, #48	; 0x30
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	20008554 	.word	0x20008554
 800f9f8:	40023800 	.word	0x40023800
 800f9fc:	40021c00 	.word	0x40021c00
 800fa00:	40020400 	.word	0x40020400

0800fa04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7f6 fbc9 	bl	80061a4 <HAL_I2C_GetState>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d125      	bne.n	800fa64 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4a14      	ldr	r2, [pc, #80]	; (800fa6c <I2Cx_Init+0x68>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d103      	bne.n	800fa28 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	4a13      	ldr	r2, [pc, #76]	; (800fa70 <I2Cx_Init+0x6c>)
 800fa24:	601a      	str	r2, [r3, #0]
 800fa26:	e002      	b.n	800fa2e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4a12      	ldr	r2, [pc, #72]	; (800fa74 <I2Cx_Init+0x70>)
 800fa2c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a11      	ldr	r2, [pc, #68]	; (800fa78 <I2Cx_Init+0x74>)
 800fa32:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff ff23 	bl	800f8a4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7f6 f89e 	bl	8005ba0 <HAL_I2C_Init>
  }
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	20008554 	.word	0x20008554
 800fa70:	40005c00 	.word	0x40005c00
 800fa74:	40005400 	.word	0x40005400
 800fa78:	40912732 	.word	0x40912732

0800fa7c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08a      	sub	sp, #40	; 0x28
 800fa80:	af04      	add	r7, sp, #16
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	4608      	mov	r0, r1
 800fa86:	4611      	mov	r1, r2
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	72fb      	strb	r3, [r7, #11]
 800fa8e:	460b      	mov	r3, r1
 800fa90:	813b      	strh	r3, [r7, #8]
 800fa92:	4613      	mov	r3, r2
 800fa94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fa9a:	7afb      	ldrb	r3, [r7, #11]
 800fa9c:	b299      	uxth	r1, r3
 800fa9e:	88f8      	ldrh	r0, [r7, #6]
 800faa0:	893a      	ldrh	r2, [r7, #8]
 800faa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800faa6:	9302      	str	r3, [sp, #8]
 800faa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	4603      	mov	r3, r0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7f6 fa5c 	bl	8005f70 <HAL_I2C_Mem_Read>
 800fab8:	4603      	mov	r3, r0
 800faba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d004      	beq.n	800facc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	4619      	mov	r1, r3
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f000 f832 	bl	800fb30 <I2Cx_Error>
  }
  return status;    
 800facc:	7dfb      	ldrb	r3, [r7, #23]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3718      	adds	r7, #24
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b08a      	sub	sp, #40	; 0x28
 800fada:	af04      	add	r7, sp, #16
 800fadc:	60f8      	str	r0, [r7, #12]
 800fade:	4608      	mov	r0, r1
 800fae0:	4611      	mov	r1, r2
 800fae2:	461a      	mov	r2, r3
 800fae4:	4603      	mov	r3, r0
 800fae6:	72fb      	strb	r3, [r7, #11]
 800fae8:	460b      	mov	r3, r1
 800faea:	813b      	strh	r3, [r7, #8]
 800faec:	4613      	mov	r3, r2
 800faee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800faf0:	2300      	movs	r3, #0
 800faf2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800faf4:	7afb      	ldrb	r3, [r7, #11]
 800faf6:	b299      	uxth	r1, r3
 800faf8:	88f8      	ldrh	r0, [r7, #6]
 800fafa:	893a      	ldrh	r2, [r7, #8]
 800fafc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb00:	9302      	str	r3, [sp, #8]
 800fb02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	6a3b      	ldr	r3, [r7, #32]
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7f6 f91b 	bl	8005d48 <HAL_I2C_Mem_Write>
 800fb12:	4603      	mov	r3, r0
 800fb14:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d004      	beq.n	800fb26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fb1c:	7afb      	ldrb	r3, [r7, #11]
 800fb1e:	4619      	mov	r1, r3
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f000 f805 	bl	800fb30 <I2Cx_Error>
  }
  return status;
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7f6 f8bf 	bl	8005cc0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff ff5e 	bl	800fa04 <I2Cx_Init>
}
 800fb48:	bf00      	nop
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fb54:	4802      	ldr	r0, [pc, #8]	; (800fb60 <TS_IO_Init+0x10>)
 800fb56:	f7ff ff55 	bl	800fa04 <I2Cx_Init>
}
 800fb5a:	bf00      	nop
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20008554 	.word	0x20008554

0800fb64 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af02      	add	r7, sp, #8
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	71fb      	strb	r3, [r7, #7]
 800fb6e:	460b      	mov	r3, r1
 800fb70:	71bb      	strb	r3, [r7, #6]
 800fb72:	4613      	mov	r3, r2
 800fb74:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fb76:	79bb      	ldrb	r3, [r7, #6]
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	79f9      	ldrb	r1, [r7, #7]
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	9301      	str	r3, [sp, #4]
 800fb80:	1d7b      	adds	r3, r7, #5
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	2301      	movs	r3, #1
 800fb86:	4803      	ldr	r0, [pc, #12]	; (800fb94 <TS_IO_Write+0x30>)
 800fb88:	f7ff ffa5 	bl	800fad6 <I2Cx_WriteMultiple>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20008554 	.word	0x20008554

0800fb98 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b086      	sub	sp, #24
 800fb9c:	af02      	add	r7, sp, #8
 800fb9e:	4603      	mov	r3, r0
 800fba0:	460a      	mov	r2, r1
 800fba2:	71fb      	strb	r3, [r7, #7]
 800fba4:	4613      	mov	r3, r2
 800fba6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fbac:	79bb      	ldrb	r3, [r7, #6]
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	79f9      	ldrb	r1, [r7, #7]
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	f107 030f 	add.w	r3, r7, #15
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	4804      	ldr	r0, [pc, #16]	; (800fbd0 <TS_IO_Read+0x38>)
 800fbc0:	f7ff ff5c 	bl	800fa7c <I2Cx_ReadMultiple>

  return read_value;
 800fbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	20008554 	.word	0x20008554

0800fbd4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7f3 fecf 	bl	8003980 <HAL_Delay>
}
 800fbe2:	bf00      	nop
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	460a      	mov	r2, r1
 800fbf6:	80fb      	strh	r3, [r7, #6]
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fc00:	4a14      	ldr	r2, [pc, #80]	; (800fc54 <BSP_TS_Init+0x68>)
 800fc02:	88fb      	ldrh	r3, [r7, #6]
 800fc04:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fc06:	4a14      	ldr	r2, [pc, #80]	; (800fc58 <BSP_TS_Init+0x6c>)
 800fc08:	88bb      	ldrh	r3, [r7, #4]
 800fc0a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fc0c:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <BSP_TS_Init+0x70>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2070      	movs	r0, #112	; 0x70
 800fc12:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fc14:	4b11      	ldr	r3, [pc, #68]	; (800fc5c <BSP_TS_Init+0x70>)
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	2070      	movs	r0, #112	; 0x70
 800fc1a:	4798      	blx	r3
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b51      	cmp	r3, #81	; 0x51
 800fc20:	d111      	bne.n	800fc46 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fc22:	4b0f      	ldr	r3, [pc, #60]	; (800fc60 <BSP_TS_Init+0x74>)
 800fc24:	4a0d      	ldr	r2, [pc, #52]	; (800fc5c <BSP_TS_Init+0x70>)
 800fc26:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fc28:	4b0e      	ldr	r3, [pc, #56]	; (800fc64 <BSP_TS_Init+0x78>)
 800fc2a:	2270      	movs	r2, #112	; 0x70
 800fc2c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fc2e:	4b0e      	ldr	r3, [pc, #56]	; (800fc68 <BSP_TS_Init+0x7c>)
 800fc30:	2208      	movs	r2, #8
 800fc32:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fc34:	4b0a      	ldr	r3, [pc, #40]	; (800fc60 <BSP_TS_Init+0x74>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	4a0a      	ldr	r2, [pc, #40]	; (800fc64 <BSP_TS_Init+0x78>)
 800fc3c:	7812      	ldrb	r2, [r2, #0]
 800fc3e:	b292      	uxth	r2, r2
 800fc40:	4610      	mov	r0, r2
 800fc42:	4798      	blx	r3
 800fc44:	e001      	b.n	800fc4a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fc46:	2303      	movs	r3, #3
 800fc48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	200085a4 	.word	0x200085a4
 800fc58:	200085a6 	.word	0x200085a6
 800fc5c:	2000005c 	.word	0x2000005c
 800fc60:	200085a0 	.word	0x200085a0
 800fc64:	200085a9 	.word	0x200085a9
 800fc68:	200085a8 	.word	0x200085a8

0800fc6c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fc6c:	b590      	push	{r4, r7, lr}
 800fc6e:	b097      	sub	sp, #92	; 0x5c
 800fc70:	af02      	add	r7, sp, #8
 800fc72:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fc74:	2300      	movs	r3, #0
 800fc76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fc86:	4b97      	ldr	r3, [pc, #604]	; (800fee4 <BSP_TS_GetState+0x278>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	4a96      	ldr	r2, [pc, #600]	; (800fee8 <BSP_TS_GetState+0x27c>)
 800fc8e:	7812      	ldrb	r2, [r2, #0]
 800fc90:	b292      	uxth	r2, r2
 800fc92:	4610      	mov	r0, r2
 800fc94:	4798      	blx	r3
 800fc96:	4603      	mov	r3, r0
 800fc98:	461a      	mov	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 81a8 	beq.w	800fff8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fca8:	2300      	movs	r3, #0
 800fcaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcac:	e197      	b.n	800ffde <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800fcae:	4b8d      	ldr	r3, [pc, #564]	; (800fee4 <BSP_TS_GetState+0x278>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	4a8c      	ldr	r2, [pc, #560]	; (800fee8 <BSP_TS_GetState+0x27c>)
 800fcb6:	7812      	ldrb	r2, [r2, #0]
 800fcb8:	b290      	uxth	r0, r2
 800fcba:	f107 0120 	add.w	r1, r7, #32
 800fcbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcc0:	0052      	lsls	r2, r2, #1
 800fcc2:	188c      	adds	r4, r1, r2
 800fcc4:	f107 0114 	add.w	r1, r7, #20
 800fcc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcca:	0052      	lsls	r2, r2, #1
 800fccc:	440a      	add	r2, r1
 800fcce:	4621      	mov	r1, r4
 800fcd0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fcd2:	4b86      	ldr	r3, [pc, #536]	; (800feec <BSP_TS_GetState+0x280>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d11b      	bne.n	800fd12 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800fcda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fce2:	4413      	add	r3, r2
 800fce4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fcf0:	440b      	add	r3, r1
 800fcf2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fcf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fcfe:	4413      	add	r3, r2
 800fd00:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fd04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd0c:	440b      	add	r3, r1
 800fd0e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800fd12:	4b76      	ldr	r3, [pc, #472]	; (800feec <BSP_TS_GetState+0x280>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f003 0302 	and.w	r3, r3, #2
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d010      	beq.n	800fd40 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800fd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd20:	005b      	lsls	r3, r3, #1
 800fd22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd26:	4413      	add	r3, r2
 800fd28:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800fd2c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd3a:	440b      	add	r3, r1
 800fd3c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800fd40:	4b6a      	ldr	r3, [pc, #424]	; (800feec <BSP_TS_GetState+0x280>)
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	f003 0304 	and.w	r3, r3, #4
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d010      	beq.n	800fd6e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800fd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd54:	4413      	add	r3, r2
 800fd56:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800fd5a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd68:	440b      	add	r3, r1
 800fd6a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800fd6e:	4b5f      	ldr	r3, [pc, #380]	; (800feec <BSP_TS_GetState+0x280>)
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	f003 0308 	and.w	r3, r3, #8
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d01b      	beq.n	800fdb2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800fd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd82:	4413      	add	r3, r2
 800fd84:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8a:	005b      	lsls	r3, r3, #1
 800fd8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fd90:	440b      	add	r3, r1
 800fd92:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800fd96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd98:	005b      	lsls	r3, r3, #1
 800fd9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fd9e:	4413      	add	r3, r2
 800fda0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800fda4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdac:	440b      	add	r3, r1
 800fdae:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800fdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdba:	4413      	add	r3, r2
 800fdbc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4a4b      	ldr	r2, [pc, #300]	; (800fef0 <BSP_TS_GetState+0x284>)
 800fdc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdca:	4299      	cmp	r1, r3
 800fdcc:	d90e      	bls.n	800fdec <BSP_TS_GetState+0x180>
 800fdce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fdd6:	4413      	add	r3, r2
 800fdd8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800fddc:	4944      	ldr	r1, [pc, #272]	; (800fef0 <BSP_TS_GetState+0x284>)
 800fdde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fde0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	e00d      	b.n	800fe08 <BSP_TS_GetState+0x19c>
 800fdec:	4a40      	ldr	r2, [pc, #256]	; (800fef0 <BSP_TS_GetState+0x284>)
 800fdee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fdfe:	440b      	add	r3, r1
 800fe00:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800fe0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe0e:	005b      	lsls	r3, r3, #1
 800fe10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe14:	4413      	add	r3, r2
 800fe16:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	4a35      	ldr	r2, [pc, #212]	; (800fef4 <BSP_TS_GetState+0x288>)
 800fe1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe24:	4299      	cmp	r1, r3
 800fe26:	d90e      	bls.n	800fe46 <BSP_TS_GetState+0x1da>
 800fe28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe2a:	005b      	lsls	r3, r3, #1
 800fe2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe30:	4413      	add	r3, r2
 800fe32:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800fe36:	492f      	ldr	r1, [pc, #188]	; (800fef4 <BSP_TS_GetState+0x288>)
 800fe38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	e00d      	b.n	800fe62 <BSP_TS_GetState+0x1f6>
 800fe46:	4a2b      	ldr	r2, [pc, #172]	; (800fef4 <BSP_TS_GetState+0x288>)
 800fe48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe52:	005b      	lsls	r3, r3, #1
 800fe54:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe58:	440b      	add	r3, r1
 800fe5a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800fe66:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fe6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fe6e:	4413      	add	r3, r2
 800fe70:	2b05      	cmp	r3, #5
 800fe72:	dd17      	ble.n	800fea4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800fe74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe76:	005b      	lsls	r3, r3, #1
 800fe78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800fe82:	4619      	mov	r1, r3
 800fe84:	4a1a      	ldr	r2, [pc, #104]	; (800fef0 <BSP_TS_GetState+0x284>)
 800fe86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800fe8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe94:	4413      	add	r3, r2
 800fe96:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	4a15      	ldr	r2, [pc, #84]	; (800fef4 <BSP_TS_GetState+0x288>)
 800fe9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800fea4:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <BSP_TS_GetState+0x27c>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b70      	cmp	r3, #112	; 0x70
 800feaa:	d125      	bne.n	800fef8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800feac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feae:	005b      	lsls	r3, r3, #1
 800feb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800feb4:	4413      	add	r3, r2
 800feb6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	4413      	add	r3, r2
 800fec2:	460a      	mov	r2, r1
 800fec4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800fec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fece:	4413      	add	r3, r2
 800fed0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fed8:	3304      	adds	r3, #4
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	4413      	add	r3, r2
 800fede:	460a      	mov	r2, r1
 800fee0:	809a      	strh	r2, [r3, #4]
 800fee2:	e02c      	b.n	800ff3e <BSP_TS_GetState+0x2d2>
 800fee4:	200085a0 	.word	0x200085a0
 800fee8:	200085a9 	.word	0x200085a9
 800feec:	200085a8 	.word	0x200085a8
 800fef0:	200085ac 	.word	0x200085ac
 800fef4:	200085c0 	.word	0x200085c0
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800fef8:	4b42      	ldr	r3, [pc, #264]	; (8010004 <BSP_TS_GetState+0x398>)
 800fefa:	881b      	ldrh	r3, [r3, #0]
 800fefc:	4619      	mov	r1, r3
 800fefe:	4a42      	ldr	r2, [pc, #264]	; (8010008 <BSP_TS_GetState+0x39c>)
 800ff00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff06:	fb03 f301 	mul.w	r3, r3, r1
 800ff0a:	0b1b      	lsrs	r3, r3, #12
 800ff0c:	b299      	uxth	r1, r3
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	4413      	add	r3, r2
 800ff16:	460a      	mov	r2, r1
 800ff18:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800ff1a:	4b3c      	ldr	r3, [pc, #240]	; (801000c <BSP_TS_GetState+0x3a0>)
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	4a3b      	ldr	r2, [pc, #236]	; (8010010 <BSP_TS_GetState+0x3a4>)
 800ff22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff28:	fb03 f301 	mul.w	r3, r3, r1
 800ff2c:	0b1b      	lsrs	r3, r3, #12
 800ff2e:	b299      	uxth	r1, r3
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff34:	3304      	adds	r3, #4
 800ff36:	005b      	lsls	r3, r3, #1
 800ff38:	4413      	add	r3, r2
 800ff3a:	460a      	mov	r2, r1
 800ff3c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800ff3e:	4b35      	ldr	r3, [pc, #212]	; (8010014 <BSP_TS_GetState+0x3a8>)
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	b298      	uxth	r0, r3
 800ff44:	f107 010c 	add.w	r1, r7, #12
 800ff48:	f107 0210 	add.w	r2, r7, #16
 800ff4c:	f107 0308 	add.w	r3, r7, #8
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	460b      	mov	r3, r1
 800ff54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ff56:	f009 fc23 	bl	80197a0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	b2d9      	uxtb	r1, r3
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff62:	4413      	add	r3, r2
 800ff64:	3316      	adds	r3, #22
 800ff66:	460a      	mov	r2, r1
 800ff68:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	b2d9      	uxtb	r1, r3
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff72:	4413      	add	r3, r2
 800ff74:	3320      	adds	r3, #32
 800ff76:	460a      	mov	r2, r1
 800ff78:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d827      	bhi.n	800ffd0 <BSP_TS_GetState+0x364>
 800ff80:	a201      	add	r2, pc, #4	; (adr r2, 800ff88 <BSP_TS_GetState+0x31c>)
 800ff82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff86:	bf00      	nop
 800ff88:	0800ff99 	.word	0x0800ff99
 800ff8c:	0800ffa7 	.word	0x0800ffa7
 800ff90:	0800ffb5 	.word	0x0800ffb5
 800ff94:	0800ffc3 	.word	0x0800ffc3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff9c:	4413      	add	r3, r2
 800ff9e:	331b      	adds	r3, #27
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	701a      	strb	r2, [r3, #0]
          break;
 800ffa4:	e018      	b.n	800ffd8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffaa:	4413      	add	r3, r2
 800ffac:	331b      	adds	r3, #27
 800ffae:	2202      	movs	r2, #2
 800ffb0:	701a      	strb	r2, [r3, #0]
          break;
 800ffb2:	e011      	b.n	800ffd8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb8:	4413      	add	r3, r2
 800ffba:	331b      	adds	r3, #27
 800ffbc:	2203      	movs	r2, #3
 800ffbe:	701a      	strb	r2, [r3, #0]
          break;
 800ffc0:	e00a      	b.n	800ffd8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffc6:	4413      	add	r3, r2
 800ffc8:	331b      	adds	r3, #27
 800ffca:	2200      	movs	r2, #0
 800ffcc:	701a      	strb	r2, [r3, #0]
          break;
 800ffce:	e003      	b.n	800ffd8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800ffd6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800ffd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffda:	3301      	adds	r3, #1
 800ffdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	f4ff ae61 	bcc.w	800fcae <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 f813 	bl	8010018 <BSP_TS_Get_GestureId>
 800fff2:	4603      	mov	r3, r0
 800fff4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800fff8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3754      	adds	r7, #84	; 0x54
 8010000:	46bd      	mov	sp, r7
 8010002:	bd90      	pop	{r4, r7, pc}
 8010004:	200085a4 	.word	0x200085a4
 8010008:	200085ac 	.word	0x200085ac
 801000c:	200085a6 	.word	0x200085a6
 8010010:	200085c0 	.word	0x200085c0
 8010014:	200085a9 	.word	0x200085a9

08010018 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8010020:	2300      	movs	r3, #0
 8010022:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8010024:	2300      	movs	r3, #0
 8010026:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8010028:	4b1f      	ldr	r3, [pc, #124]	; (80100a8 <BSP_TS_Get_GestureId+0x90>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	b29b      	uxth	r3, r3
 801002e:	f107 0208 	add.w	r2, r7, #8
 8010032:	4611      	mov	r1, r2
 8010034:	4618      	mov	r0, r3
 8010036:	f009 fb9a 	bl	801976e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b18      	cmp	r3, #24
 801003e:	d01b      	beq.n	8010078 <BSP_TS_Get_GestureId+0x60>
 8010040:	2b18      	cmp	r3, #24
 8010042:	d806      	bhi.n	8010052 <BSP_TS_Get_GestureId+0x3a>
 8010044:	2b10      	cmp	r3, #16
 8010046:	d00f      	beq.n	8010068 <BSP_TS_Get_GestureId+0x50>
 8010048:	2b14      	cmp	r3, #20
 801004a:	d011      	beq.n	8010070 <BSP_TS_Get_GestureId+0x58>
 801004c:	2b00      	cmp	r3, #0
 801004e:	d007      	beq.n	8010060 <BSP_TS_Get_GestureId+0x48>
 8010050:	e022      	b.n	8010098 <BSP_TS_Get_GestureId+0x80>
 8010052:	2b40      	cmp	r3, #64	; 0x40
 8010054:	d018      	beq.n	8010088 <BSP_TS_Get_GestureId+0x70>
 8010056:	2b49      	cmp	r3, #73	; 0x49
 8010058:	d01a      	beq.n	8010090 <BSP_TS_Get_GestureId+0x78>
 801005a:	2b1c      	cmp	r3, #28
 801005c:	d010      	beq.n	8010080 <BSP_TS_Get_GestureId+0x68>
 801005e:	e01b      	b.n	8010098 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010066:	e01a      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801006e:	e016      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2202      	movs	r2, #2
 8010074:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010076:	e012      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2203      	movs	r2, #3
 801007c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801007e:	e00e      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2204      	movs	r2, #4
 8010084:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010086:	e00a      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2205      	movs	r2, #5
 801008c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801008e:	e006      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2206      	movs	r2, #6
 8010094:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010096:	e002      	b.n	801009e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	73fb      	strb	r3, [r7, #15]
      break;
 801009c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801009e:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	200085a9 	.word	0x200085a9

080100ac <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80100b0:	f008 fd82 	bl	8018bb8 <touchgfx_init>
}
 80100b4:	bf00      	nop
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80100bc:	f008 fda6 	bl	8018c0c <touchgfx_taskEntry>
}
 80100c0:	bf00      	nop
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
    {
 80100cc:	4a04      	ldr	r2, [pc, #16]	; (80100e0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	601a      	str	r2, [r3, #0]
    }
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4618      	mov	r0, r3
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	0802b4a4 	.word	0x0802b4a4

080100e4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
    }
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff ffe9 	bl	80100c4 <_ZN8touchgfx12FontProviderD1Ev>
 80100f2:	2104      	movs	r1, #4
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f019 fc44 	bl	8029982 <_ZdlPvj>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	460b      	mov	r3, r1
 801010e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010110:	887b      	ldrh	r3, [r7, #2]
 8010112:	2b07      	cmp	r3, #7
 8010114:	d83a      	bhi.n	801018c <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8010116:	a201      	add	r2, pc, #4	; (adr r2, 801011c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	0801013d 	.word	0x0801013d
 8010120:	08010147 	.word	0x08010147
 8010124:	08010151 	.word	0x08010151
 8010128:	0801015b 	.word	0x0801015b
 801012c:	08010165 	.word	0x08010165
 8010130:	0801016f 	.word	0x0801016f
 8010134:	08010179 	.word	0x08010179
 8010138:	08010183 	.word	0x08010183
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801013c:	f006 f848 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8010140:	4603      	mov	r3, r0
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	e023      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8010146:	f006 f843 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 801014a:	4603      	mov	r3, r0
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	e01e      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010150:	f006 f83e 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8010154:	4603      	mov	r3, r0
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	e019      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801015a:	f006 f839 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 801015e:	4603      	mov	r3, r0
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	e014      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8010164:	f006 f834 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8010168:	4603      	mov	r3, r0
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	e00f      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 801016e:	f006 f82f 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8010172:	4603      	mov	r3, r0
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	e00a      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8010178:	f006 f82a 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 801017c:	4603      	mov	r3, r0
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	e005      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8010182:	f006 f825 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8010186:	4603      	mov	r3, r0
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	e000      	b.n	801018e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 801018c:	2300      	movs	r3, #0
    }
}
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop

08010198 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	4a05      	ldr	r2, [pc, #20]	; (80101b8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	601a      	str	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ff ff8b 	bl	80100c4 <_ZN8touchgfx12FontProviderD1Ev>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4618      	mov	r0, r3
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}
 80101b8:	0802b490 	.word	0x0802b490

080101bc <_ZN23ApplicationFontProviderD0Ev>:
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f7ff ffe7 	bl	8010198 <_ZN23ApplicationFontProviderD1Ev>
 80101ca:	2104      	movs	r1, #4
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f019 fbd8 	bl	8029982 <_ZdlPvj>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 80101dc:	b480      	push	{r7}
 80101de:	b083      	sub	sp, #12
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	4a04      	ldr	r2, [pc, #16]	; (80101f8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	0802e068 	.word	0x0802e068

080101fc <_ZN8touchgfx4FontD0Ev>:
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7ff ffe9 	bl	80101dc <_ZN8touchgfx4FontD1Ev>
 801020a:	2110      	movs	r1, #16
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f019 fbb8 	bl	8029982 <_ZdlPvj>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	460b      	mov	r3, r1
 8010226:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8010228:	2300      	movs	r3, #0
 801022a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801022c:	2300      	movs	r3, #0
 801022e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3308      	adds	r3, #8
 8010236:	681c      	ldr	r4, [r3, #0]
 8010238:	f107 030f 	add.w	r3, r7, #15
 801023c:	f107 0210 	add.w	r2, r7, #16
 8010240:	8879      	ldrh	r1, [r7, #2]
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	47a0      	blx	r4
 8010246:	6178      	str	r0, [r7, #20]
        return glyph;
 8010248:	697b      	ldr	r3, [r7, #20]
    }
 801024a:	4618      	mov	r0, r3
 801024c:	371c      	adds	r7, #28
 801024e:	46bd      	mov	sp, r7
 8010250:	bd90      	pop	{r4, r7, pc}

08010252 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010252:	b480      	push	{r7}
 8010254:	b083      	sub	sp, #12
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	895b      	ldrh	r3, [r3, #10]
    }
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801026a:	b480      	push	{r7}
 801026c:	b083      	sub	sp, #12
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	899b      	ldrh	r3, [r3, #12]
    }
 8010276:	4618      	mov	r0, r3
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr

08010282 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8010282:	b480      	push	{r7}
 8010284:	b083      	sub	sp, #12
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	889b      	ldrh	r3, [r3, #4]
    }
 801028e:	4618      	mov	r0, r3
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801029a:	b480      	push	{r7}
 801029c:	b083      	sub	sp, #12
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	889a      	ldrh	r2, [r3, #4]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	799b      	ldrb	r3, [r3, #6]
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	4413      	add	r3, r2
 80102ae:	b29b      	uxth	r3, r3
    }
 80102b0:	4618      	mov	r0, r3
 80102b2:	370c      	adds	r7, #12
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	79db      	ldrb	r3, [r3, #7]
 80102c8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80102cc:	b2db      	uxtb	r3, r3
    }
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	79db      	ldrb	r3, [r3, #7]
 80102e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80102ea:	b2db      	uxtb	r3, r3
    }
 80102ec:	4618      	mov	r0, r3
 80102ee:	370c      	adds	r7, #12
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	4a05      	ldr	r2, [pc, #20]	; (8010318 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff ff67 	bl	80101dc <_ZN8touchgfx4FontD1Ev>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4618      	mov	r0, r3
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	0802e120 	.word	0x0802e120

0801031c <_ZN8touchgfx9ConstFontD0Ev>:
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7ff ffe7 	bl	80102f8 <_ZN8touchgfx9ConstFontD1Ev>
 801032a:	2118      	movs	r1, #24
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f019 fb28 	bl	8029982 <_ZdlPvj>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	4a05      	ldr	r2, [pc, #20]	; (801035c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	f7ff ffd3 	bl	80102f8 <_ZN8touchgfx9ConstFontD1Ev>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	4618      	mov	r0, r3
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	0802b4e8 	.word	0x0802b4e8

08010360 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff ffe7 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 801036e:	2124      	movs	r1, #36	; 0x24
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f019 fb06 	bl	8029982 <_ZdlPvj>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f82d 	bl	80103e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 801038e:	4b08      	ldr	r3, [pc, #32]	; (80103b0 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8010394:	6819      	ldr	r1, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	440b      	add	r3, r1
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	681b      	ldr	r3, [r3, #0]
    }
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	2000bfb0 	.word	0x2000bfb0
 80103b4:	2000bfa8 	.word	0x2000bfa8

080103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 f811 	bl	80103e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 80103c6:	4b07      	ldr	r3, [pc, #28]	; (80103e4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	4413      	add	r3, r2
 80103d2:	785b      	ldrb	r3, [r3, #1]
 80103d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80103d8:	b2db      	uxtb	r3, r3
    }
 80103da:	4618      	mov	r0, r3
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	2000bfa8 	.word	0x2000bfa8

080103e8 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80103f0:	4b0c      	ldr	r3, [pc, #48]	; (8010424 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d105      	bne.n	8010404 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 80103f8:	4b0b      	ldr	r3, [pc, #44]	; (8010428 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 80103fa:	4a0c      	ldr	r2, [pc, #48]	; (801042c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80103fc:	21de      	movs	r1, #222	; 0xde
 80103fe:	480c      	ldr	r0, [pc, #48]	; (8010430 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010400:	f019 faea 	bl	80299d8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	881a      	ldrh	r2, [r3, #0]
 8010408:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	429a      	cmp	r2, r3
 801040e:	d305      	bcc.n	801041c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010410:	4b09      	ldr	r3, [pc, #36]	; (8010438 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010412:	4a06      	ldr	r2, [pc, #24]	; (801042c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010414:	21df      	movs	r1, #223	; 0xdf
 8010416:	4806      	ldr	r0, [pc, #24]	; (8010430 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010418:	f019 fade 	bl	80299d8 <__assert_func>
    }
 801041c:	bf00      	nop
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	2000bfa8 	.word	0x2000bfa8
 8010428:	0802aa88 	.word	0x0802aa88
 801042c:	0802b4b0 	.word	0x0802b4b0
 8010430:	0802aacc 	.word	0x0802aacc
 8010434:	2000bfac 	.word	0x2000bfac
 8010438:	0802ab10 	.word	0x0802ab10

0801043c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	7b5b      	ldrb	r3, [r3, #13]
 8010448:	021b      	lsls	r3, r3, #8
 801044a:	b21b      	sxth	r3, r3
 801044c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010450:	b21a      	sxth	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7adb      	ldrb	r3, [r3, #11]
 8010456:	b21b      	sxth	r3, r3
 8010458:	4313      	orrs	r3, r2
 801045a:	b21b      	sxth	r3, r3
 801045c:	b29b      	uxth	r3, r3
    }
 801045e:	4618      	mov	r0, r3
 8010460:	370c      	adds	r7, #12
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a1b      	ldr	r3, [r3, #32]
    }
 8010476:	4618      	mov	r0, r3
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
	...

08010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8010484:	b580      	push	{r7, lr}
 8010486:	b08c      	sub	sp, #48	; 0x30
 8010488:	af08      	add	r7, sp, #32
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	4611      	mov	r1, r2
 8010490:	461a      	mov	r2, r3
 8010492:	460b      	mov	r3, r1
 8010494:	80fb      	strh	r3, [r7, #6]
 8010496:	4613      	mov	r3, r2
 8010498:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	88b9      	ldrh	r1, [r7, #4]
 801049e:	88fa      	ldrh	r2, [r7, #6]
 80104a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80104a2:	9306      	str	r3, [sp, #24]
 80104a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80104a6:	9305      	str	r3, [sp, #20]
 80104a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104b8:	9302      	str	r3, [sp, #8]
 80104ba:	7f3b      	ldrb	r3, [r7, #28]
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	7e3b      	ldrb	r3, [r7, #24]
 80104c0:	9300      	str	r3, [sp, #0]
 80104c2:	460b      	mov	r3, r1
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	f00d ff41 	bl	801e34c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80104ca:	4a08      	ldr	r2, [pc, #32]	; (80104ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104d4:	619a      	str	r2, [r3, #24]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104da:	61da      	str	r2, [r3, #28]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104e0:	621a      	str	r2, [r3, #32]
{
}
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	0802b4e8 	.word	0x0802b4e8

080104f0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	699b      	ldr	r3, [r3, #24]
 80104fe:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	889b      	ldrh	r3, [r3, #4]
 8010504:	0adb      	lsrs	r3, r3, #11
 8010506:	b29b      	uxth	r3, r3
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	4413      	add	r3, r2
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4413      	add	r3, r2
}
 8010516:	4618      	mov	r0, r3
 8010518:	3714      	adds	r7, #20
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr

08010522 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b086      	sub	sp, #24
 8010526:	af00      	add	r7, sp, #0
 8010528:	60f8      	str	r0, [r7, #12]
 801052a:	460b      	mov	r3, r1
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d003      	beq.n	801053e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	7b1b      	ldrb	r3, [r3, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d101      	bne.n	8010542 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801053e:	2300      	movs	r3, #0
 8010540:	e023      	b.n	801058a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff ff7a 	bl	801043c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8010548:	4603      	mov	r3, r0
 801054a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801054c:	8abb      	ldrh	r3, [r7, #20]
 801054e:	82fb      	strh	r3, [r7, #22]
 8010550:	8afa      	ldrh	r2, [r7, #22]
 8010552:	8abb      	ldrh	r3, [r7, #20]
 8010554:	6879      	ldr	r1, [r7, #4]
 8010556:	7b09      	ldrb	r1, [r1, #12]
 8010558:	440b      	add	r3, r1
 801055a:	429a      	cmp	r2, r3
 801055c:	da14      	bge.n	8010588 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	69da      	ldr	r2, [r3, #28]
 8010562:	8afb      	ldrh	r3, [r7, #22]
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4413      	add	r3, r2
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	897a      	ldrh	r2, [r7, #10]
 801056c:	429a      	cmp	r2, r3
 801056e:	d107      	bne.n	8010580 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	69da      	ldr	r2, [r3, #28]
 8010574:	8afb      	ldrh	r3, [r7, #22]
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4413      	add	r3, r2
 801057a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801057e:	e004      	b.n	801058a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010580:	8afb      	ldrh	r3, [r7, #22]
 8010582:	3301      	adds	r3, #1
 8010584:	82fb      	strh	r3, [r7, #22]
 8010586:	e7e3      	b.n	8010550 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 8010594:	b580      	push	{r7, lr}
 8010596:	af00      	add	r7, sp, #0
 8010598:	4801      	ldr	r0, [pc, #4]	; (80105a0 <__tcf_0+0xc>)
 801059a:	f7ff fecf 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	200085d4 	.word	0x200085d4

080105a4 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b08a      	sub	sp, #40	; 0x28
 80105a8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80105aa:	4b15      	ldr	r3, [pc, #84]	; (8010600 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	f003 0301 	and.w	r3, r3, #1
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d11f      	bne.n	80105f6 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 80105b6:	2300      	movs	r3, #0
 80105b8:	9309      	str	r3, [sp, #36]	; 0x24
 80105ba:	2300      	movs	r3, #0
 80105bc:	9308      	str	r3, [sp, #32]
 80105be:	233f      	movs	r3, #63	; 0x3f
 80105c0:	9307      	str	r3, [sp, #28]
 80105c2:	4b10      	ldr	r3, [pc, #64]	; (8010604 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 80105c4:	9306      	str	r3, [sp, #24]
 80105c6:	4b10      	ldr	r3, [pc, #64]	; (8010608 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 80105c8:	9305      	str	r3, [sp, #20]
 80105ca:	2301      	movs	r3, #1
 80105cc:	9304      	str	r3, [sp, #16]
 80105ce:	2300      	movs	r3, #0
 80105d0:	9303      	str	r3, [sp, #12]
 80105d2:	2301      	movs	r3, #1
 80105d4:	9302      	str	r3, [sp, #8]
 80105d6:	2304      	movs	r3, #4
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	2300      	movs	r3, #0
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	230a      	movs	r3, #10
 80105e0:	2204      	movs	r2, #4
 80105e2:	490a      	ldr	r1, [pc, #40]	; (801060c <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 80105e4:	480a      	ldr	r0, [pc, #40]	; (8010610 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 80105e6:	f7ff ff4d 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80105ea:	4b05      	ldr	r3, [pc, #20]	; (8010600 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80105ec:	2201      	movs	r2, #1
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	4808      	ldr	r0, [pc, #32]	; (8010614 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 80105f2:	f019 fa0f 	bl	8029a14 <atexit>
    return Asap_Bold_10_4bpp;
 80105f6:	4b06      	ldr	r3, [pc, #24]	; (8010610 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	200085f8 	.word	0x200085f8
 8010604:	080338cc 	.word	0x080338cc
 8010608:	0802b534 	.word	0x0802b534
 801060c:	08033900 	.word	0x08033900
 8010610:	200085d4 	.word	0x200085d4
 8010614:	08010595 	.word	0x08010595

08010618 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010618:	b580      	push	{r7, lr}
 801061a:	af00      	add	r7, sp, #0
 801061c:	4801      	ldr	r0, [pc, #4]	; (8010624 <__tcf_0+0xc>)
 801061e:	f7ff fe8d 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010622:	bd80      	pop	{r7, pc}
 8010624:	200085fc 	.word	0x200085fc

08010628 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	; 0x28
 801062c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801062e:	4b15      	ldr	r3, [pc, #84]	; (8010684 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	2b00      	cmp	r3, #0
 8010638:	d11f      	bne.n	801067a <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801063a:	2300      	movs	r3, #0
 801063c:	9309      	str	r3, [sp, #36]	; 0x24
 801063e:	2300      	movs	r3, #0
 8010640:	9308      	str	r3, [sp, #32]
 8010642:	233f      	movs	r3, #63	; 0x3f
 8010644:	9307      	str	r3, [sp, #28]
 8010646:	4b10      	ldr	r3, [pc, #64]	; (8010688 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 8010648:	9306      	str	r3, [sp, #24]
 801064a:	4b10      	ldr	r3, [pc, #64]	; (801068c <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 801064c:	9305      	str	r3, [sp, #20]
 801064e:	2301      	movs	r3, #1
 8010650:	9304      	str	r3, [sp, #16]
 8010652:	2300      	movs	r3, #0
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	2301      	movs	r3, #1
 8010658:	9302      	str	r3, [sp, #8]
 801065a:	2304      	movs	r3, #4
 801065c:	9301      	str	r3, [sp, #4]
 801065e:	2300      	movs	r3, #0
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	230c      	movs	r3, #12
 8010664:	2209      	movs	r2, #9
 8010666:	490a      	ldr	r1, [pc, #40]	; (8010690 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 8010668:	480a      	ldr	r0, [pc, #40]	; (8010694 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 801066a:	f7ff ff0b 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801066e:	4b05      	ldr	r3, [pc, #20]	; (8010684 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010670:	2201      	movs	r2, #1
 8010672:	601a      	str	r2, [r3, #0]
 8010674:	4808      	ldr	r0, [pc, #32]	; (8010698 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 8010676:	f019 f9cd 	bl	8029a14 <atexit>
    return Asap_Bold_12_4bpp;
 801067a:	4b06      	ldr	r3, [pc, #24]	; (8010694 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 801067c:	4618      	mov	r0, r3
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	20008620 	.word	0x20008620
 8010688:	080338d0 	.word	0x080338d0
 801068c:	0802b538 	.word	0x0802b538
 8010690:	08033938 	.word	0x08033938
 8010694:	200085fc 	.word	0x200085fc
 8010698:	08010619 	.word	0x08010619

0801069c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 55, 18, 4, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__tcf_0+0xc>)
 80106a2:	f7ff fe4b 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	20008624 	.word	0x20008624

080106ac <_Z25getFont_Asap_Bold_18_4bppv>:
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08a      	sub	sp, #40	; 0x28
 80106b0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 55, 18, 4, 4, 1, 0, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80106b2:	4b15      	ldr	r3, [pc, #84]	; (8010708 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d11f      	bne.n	80106fe <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 80106be:	2300      	movs	r3, #0
 80106c0:	9309      	str	r3, [sp, #36]	; 0x24
 80106c2:	2300      	movs	r3, #0
 80106c4:	9308      	str	r3, [sp, #32]
 80106c6:	2300      	movs	r3, #0
 80106c8:	9307      	str	r3, [sp, #28]
 80106ca:	4b10      	ldr	r3, [pc, #64]	; (801070c <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 80106cc:	9306      	str	r3, [sp, #24]
 80106ce:	4b10      	ldr	r3, [pc, #64]	; (8010710 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 80106d0:	9305      	str	r3, [sp, #20]
 80106d2:	2301      	movs	r3, #1
 80106d4:	9304      	str	r3, [sp, #16]
 80106d6:	2300      	movs	r3, #0
 80106d8:	9303      	str	r3, [sp, #12]
 80106da:	2301      	movs	r3, #1
 80106dc:	9302      	str	r3, [sp, #8]
 80106de:	2304      	movs	r3, #4
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	2304      	movs	r3, #4
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	2312      	movs	r3, #18
 80106e8:	2237      	movs	r2, #55	; 0x37
 80106ea:	490a      	ldr	r1, [pc, #40]	; (8010714 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 80106ec:	480a      	ldr	r0, [pc, #40]	; (8010718 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 80106ee:	f7ff fec9 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80106f2:	4b05      	ldr	r3, [pc, #20]	; (8010708 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80106f4:	2201      	movs	r2, #1
 80106f6:	601a      	str	r2, [r3, #0]
 80106f8:	4808      	ldr	r0, [pc, #32]	; (801071c <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 80106fa:	f019 f98b 	bl	8029a14 <atexit>
    return Asap_Bold_18_4bpp;
 80106fe:	4b06      	ldr	r3, [pc, #24]	; (8010718 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 8010700:	4618      	mov	r0, r3
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	20008648 	.word	0x20008648
 801070c:	080338d4 	.word	0x080338d4
 8010710:	0802b53c 	.word	0x0802b53c
 8010714:	080339b8 	.word	0x080339b8
 8010718:	20008624 	.word	0x20008624
 801071c:	0801069d 	.word	0x0801069d

08010720 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010720:	b580      	push	{r7, lr}
 8010722:	af00      	add	r7, sp, #0
 8010724:	4801      	ldr	r0, [pc, #4]	; (801072c <__tcf_0+0xc>)
 8010726:	f7ff fe09 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 801072a:	bd80      	pop	{r7, pc}
 801072c:	2000864c 	.word	0x2000864c

08010730 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08a      	sub	sp, #40	; 0x28
 8010734:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010736:	4b15      	ldr	r3, [pc, #84]	; (801078c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f003 0301 	and.w	r3, r3, #1
 801073e:	2b00      	cmp	r3, #0
 8010740:	d11f      	bne.n	8010782 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 8010742:	2300      	movs	r3, #0
 8010744:	9309      	str	r3, [sp, #36]	; 0x24
 8010746:	2300      	movs	r3, #0
 8010748:	9308      	str	r3, [sp, #32]
 801074a:	233f      	movs	r3, #63	; 0x3f
 801074c:	9307      	str	r3, [sp, #28]
 801074e:	4b10      	ldr	r3, [pc, #64]	; (8010790 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 8010750:	9306      	str	r3, [sp, #24]
 8010752:	4b10      	ldr	r3, [pc, #64]	; (8010794 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 8010754:	9305      	str	r3, [sp, #20]
 8010756:	2301      	movs	r3, #1
 8010758:	9304      	str	r3, [sp, #16]
 801075a:	2300      	movs	r3, #0
 801075c:	9303      	str	r3, [sp, #12]
 801075e:	2301      	movs	r3, #1
 8010760:	9302      	str	r3, [sp, #8]
 8010762:	2304      	movs	r3, #4
 8010764:	9301      	str	r3, [sp, #4]
 8010766:	2300      	movs	r3, #0
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	2315      	movs	r3, #21
 801076c:	220d      	movs	r2, #13
 801076e:	490a      	ldr	r1, [pc, #40]	; (8010798 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 8010770:	480a      	ldr	r0, [pc, #40]	; (801079c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 8010772:	f7ff fe87 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010776:	4b05      	ldr	r3, [pc, #20]	; (801078c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010778:	2201      	movs	r2, #1
 801077a:	601a      	str	r2, [r3, #0]
 801077c:	4808      	ldr	r0, [pc, #32]	; (80107a0 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 801077e:	f019 f949 	bl	8029a14 <atexit>
    return Asap_Bold_21_4bpp;
 8010782:	4b06      	ldr	r3, [pc, #24]	; (801079c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 8010784:	4618      	mov	r0, r3
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	20008670 	.word	0x20008670
 8010790:	080338f0 	.word	0x080338f0
 8010794:	0802b540 	.word	0x0802b540
 8010798:	08033cbc 	.word	0x08033cbc
 801079c:	2000864c 	.word	0x2000864c
 80107a0:	08010721 	.word	0x08010721

080107a4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80107a4:	b580      	push	{r7, lr}
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	4801      	ldr	r0, [pc, #4]	; (80107b0 <__tcf_0+0xc>)
 80107aa:	f7ff fdc7 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	20008674 	.word	0x20008674

080107b4 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b08a      	sub	sp, #40	; 0x28
 80107b8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80107ba:	4b15      	ldr	r3, [pc, #84]	; (8010810 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f003 0301 	and.w	r3, r3, #1
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d11f      	bne.n	8010806 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 80107c6:	2300      	movs	r3, #0
 80107c8:	9309      	str	r3, [sp, #36]	; 0x24
 80107ca:	2300      	movs	r3, #0
 80107cc:	9308      	str	r3, [sp, #32]
 80107ce:	233f      	movs	r3, #63	; 0x3f
 80107d0:	9307      	str	r3, [sp, #28]
 80107d2:	4b10      	ldr	r3, [pc, #64]	; (8010814 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 80107d4:	9306      	str	r3, [sp, #24]
 80107d6:	4b10      	ldr	r3, [pc, #64]	; (8010818 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 80107d8:	9305      	str	r3, [sp, #20]
 80107da:	2301      	movs	r3, #1
 80107dc:	9304      	str	r3, [sp, #16]
 80107de:	2300      	movs	r3, #0
 80107e0:	9303      	str	r3, [sp, #12]
 80107e2:	2301      	movs	r3, #1
 80107e4:	9302      	str	r3, [sp, #8]
 80107e6:	2304      	movs	r3, #4
 80107e8:	9301      	str	r3, [sp, #4]
 80107ea:	2300      	movs	r3, #0
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	231e      	movs	r3, #30
 80107f0:	220c      	movs	r2, #12
 80107f2:	490a      	ldr	r1, [pc, #40]	; (801081c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 80107f4:	480a      	ldr	r0, [pc, #40]	; (8010820 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 80107f6:	f7ff fe45 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80107fa:	4b05      	ldr	r3, [pc, #20]	; (8010810 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80107fc:	2201      	movs	r2, #1
 80107fe:	601a      	str	r2, [r3, #0]
 8010800:	4808      	ldr	r0, [pc, #32]	; (8010824 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 8010802:	f019 f907 	bl	8029a14 <atexit>
    return Asap_Bold_30_4bpp;
 8010806:	4b06      	ldr	r3, [pc, #24]	; (8010820 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 8010808:	4618      	mov	r0, r3
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	20008698 	.word	0x20008698
 8010814:	080338f4 	.word	0x080338f4
 8010818:	0802b544 	.word	0x0802b544
 801081c:	08033d74 	.word	0x08033d74
 8010820:	20008674 	.word	0x20008674
 8010824:	080107a5 	.word	0x080107a5

08010828 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010828:	b580      	push	{r7, lr}
 801082a:	af00      	add	r7, sp, #0
 801082c:	4801      	ldr	r0, [pc, #4]	; (8010834 <__tcf_0+0xc>)
 801082e:	f7ff fd85 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010832:	bd80      	pop	{r7, pc}
 8010834:	2000869c 	.word	0x2000869c

08010838 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	; 0x28
 801083c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 801083e:	4b15      	ldr	r3, [pc, #84]	; (8010894 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f003 0301 	and.w	r3, r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	d11f      	bne.n	801088a <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 801084a:	2300      	movs	r3, #0
 801084c:	9309      	str	r3, [sp, #36]	; 0x24
 801084e:	2300      	movs	r3, #0
 8010850:	9308      	str	r3, [sp, #32]
 8010852:	233f      	movs	r3, #63	; 0x3f
 8010854:	9307      	str	r3, [sp, #28]
 8010856:	4b10      	ldr	r3, [pc, #64]	; (8010898 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 8010858:	9306      	str	r3, [sp, #24]
 801085a:	4b10      	ldr	r3, [pc, #64]	; (801089c <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 801085c:	9305      	str	r3, [sp, #20]
 801085e:	2301      	movs	r3, #1
 8010860:	9304      	str	r3, [sp, #16]
 8010862:	2300      	movs	r3, #0
 8010864:	9303      	str	r3, [sp, #12]
 8010866:	2301      	movs	r3, #1
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	2304      	movs	r3, #4
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	2300      	movs	r3, #0
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	2328      	movs	r3, #40	; 0x28
 8010874:	220d      	movs	r2, #13
 8010876:	490a      	ldr	r1, [pc, #40]	; (80108a0 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 8010878:	480a      	ldr	r0, [pc, #40]	; (80108a4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 801087a:	f7ff fe03 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801087e:	4b05      	ldr	r3, [pc, #20]	; (8010894 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010880:	2201      	movs	r2, #1
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	4808      	ldr	r0, [pc, #32]	; (80108a8 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 8010886:	f019 f8c5 	bl	8029a14 <atexit>
    return Asap_Bold_40_4bpp;
 801088a:	4b06      	ldr	r3, [pc, #24]	; (80108a4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 801088c:	4618      	mov	r0, r3
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	200086c0 	.word	0x200086c0
 8010898:	080338f8 	.word	0x080338f8
 801089c:	0802b548 	.word	0x0802b548
 80108a0:	08033e1c 	.word	0x08033e1c
 80108a4:	2000869c 	.word	0x2000869c
 80108a8:	08010829 	.word	0x08010829

080108ac <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 80108ac:	b580      	push	{r7, lr}
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	4801      	ldr	r0, [pc, #4]	; (80108b8 <__tcf_0+0xc>)
 80108b2:	f7ff fd43 	bl	801033c <_ZN8touchgfx13GeneratedFontD1Ev>
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	200086c4 	.word	0x200086c4

080108bc <_Z25getFont_Asap_Bold_60_4bppv>:
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08a      	sub	sp, #40	; 0x28
 80108c0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f003 0301 	and.w	r3, r3, #1
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d11f      	bne.n	801090e <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 80108ce:	2300      	movs	r3, #0
 80108d0:	9309      	str	r3, [sp, #36]	; 0x24
 80108d2:	2300      	movs	r3, #0
 80108d4:	9308      	str	r3, [sp, #32]
 80108d6:	233f      	movs	r3, #63	; 0x3f
 80108d8:	9307      	str	r3, [sp, #28]
 80108da:	4b10      	ldr	r3, [pc, #64]	; (801091c <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 80108dc:	9306      	str	r3, [sp, #24]
 80108de:	4b10      	ldr	r3, [pc, #64]	; (8010920 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 80108e0:	9305      	str	r3, [sp, #20]
 80108e2:	2300      	movs	r3, #0
 80108e4:	9304      	str	r3, [sp, #16]
 80108e6:	2300      	movs	r3, #0
 80108e8:	9303      	str	r3, [sp, #12]
 80108ea:	2301      	movs	r3, #1
 80108ec:	9302      	str	r3, [sp, #8]
 80108ee:	2304      	movs	r3, #4
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	2300      	movs	r3, #0
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	233c      	movs	r3, #60	; 0x3c
 80108f8:	220d      	movs	r2, #13
 80108fa:	490a      	ldr	r1, [pc, #40]	; (8010924 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 80108fc:	480a      	ldr	r0, [pc, #40]	; (8010928 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 80108fe:	f7ff fdc1 	bl	8010484 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010902:	4b05      	ldr	r3, [pc, #20]	; (8010918 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010904:	2201      	movs	r2, #1
 8010906:	601a      	str	r2, [r3, #0]
 8010908:	4808      	ldr	r0, [pc, #32]	; (801092c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 801090a:	f019 f883 	bl	8029a14 <atexit>
    return Asap_Bold_60_4bpp;
 801090e:	4b06      	ldr	r3, [pc, #24]	; (8010928 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 8010910:	4618      	mov	r0, r3
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	200086e8 	.word	0x200086e8
 801091c:	080338fc 	.word	0x080338fc
 8010920:	0802b54c 	.word	0x0802b54c
 8010924:	08033ed4 	.word	0x08033ed4
 8010928:	200086c4 	.word	0x200086c4
 801092c:	080108ad 	.word	0x080108ad

08010930 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
    {
    }
 8010952:	bf00      	nop
 8010954:	370c      	adds	r7, #12
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr

0801095e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801095e:	b480      	push	{r7}
 8010960:	b083      	sub	sp, #12
 8010962:	af00      	add	r7, sp, #0
 8010964:	6078      	str	r0, [r7, #4]
 8010966:	6039      	str	r1, [r7, #0]
    {
    }
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
    {
    }
 801097e:	bf00      	nop
 8010980:	370c      	adds	r7, #12
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr

0801098a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801098a:	b480      	push	{r7}
 801098c:	b083      	sub	sp, #12
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	460b      	mov	r3, r1
 8010994:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010996:	bf00      	nop
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80109a2:	b480      	push	{r7}
 80109a4:	b083      	sub	sp, #12
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
    {
    }
 80109aa:	bf00      	nop
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80109b6:	b480      	push	{r7}
 80109b8:	b083      	sub	sp, #12
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
    {
    }
 80109be:	bf00      	nop
 80109c0:	370c      	adds	r7, #12
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
	...

080109cc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
    {
 80109d4:	4a04      	ldr	r2, [pc, #16]	; (80109e8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	601a      	str	r2, [r3, #0]
    }
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	370c      	adds	r7, #12
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr
 80109e8:	0802b6d8 	.word	0x0802b6d8

080109ec <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    }
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff ffe9 	bl	80109cc <_ZN8touchgfx15UIEventListenerD1Ev>
 80109fa:	2104      	movs	r1, #4
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f018 ffc0 	bl	8029982 <_ZdlPvj>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4618      	mov	r0, r3
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010a14:	4a07      	ldr	r2, [pc, #28]	; (8010a34 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	601a      	str	r2, [r3, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	605a      	str	r2, [r3, #4]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	721a      	strb	r2, [r3, #8]
    {
    }
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	0802b6b8 	.word	0x0802b6b8

08010a38 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
    {
 8010a40:	4a04      	ldr	r2, [pc, #16]	; (8010a54 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	601a      	str	r2, [r3, #0]
    }
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr
 8010a54:	0802b6b8 	.word	0x0802b6b8

08010a58 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
    }
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff ffe9 	bl	8010a38 <_ZN8touchgfx10TransitionD1Ev>
 8010a66:	210c      	movs	r1, #12
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f018 ff8a 	bl	8029982 <_ZdlPvj>
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4618      	mov	r0, r3
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	bf00      	nop
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	bf00      	nop
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr

08010aa0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	605a      	str	r2, [r3, #4]
    }
 8010ac4:	bf00      	nop
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010adc:	bf00      	nop
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae6:	4770      	bx	lr

08010ae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
    {
 8010af0:	4a04      	ldr	r2, [pc, #16]	; (8010b04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	601a      	str	r2, [r3, #0]
    }
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	4618      	mov	r0, r3
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr
 8010b04:	0802b6a0 	.word	0x0802b6a0

08010b08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
    }
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7ff ffe9 	bl	8010ae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010b16:	2104      	movs	r1, #4
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f018 ff32 	bl	8029982 <_ZdlPvj>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	4608      	mov	r0, r1
 8010b32:	4611      	mov	r1, r2
 8010b34:	461a      	mov	r2, r3
 8010b36:	4603      	mov	r3, r0
 8010b38:	817b      	strh	r3, [r7, #10]
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	813b      	strh	r3, [r7, #8]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3334      	adds	r3, #52	; 0x34
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010b4e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	4798      	blx	r3
        setWidth(width);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	3338      	adds	r3, #56	; 0x38
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b62:	4611      	mov	r1, r2
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	4798      	blx	r3
        setHeight(height);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	333c      	adds	r3, #60	; 0x3c
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010b74:	4611      	mov	r1, r2
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	4798      	blx	r3
    }
 8010b7a:	bf00      	nop
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010b82:	b480      	push	{r7}
 8010b84:	b083      	sub	sp, #12
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010b90:	4618      	mov	r0, r3
 8010b92:	370c      	adds	r7, #12
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr

08010b9c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
	...

08010bb8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010bb8:	b480      	push	{r7}
 8010bba:	af00      	add	r7, sp, #0
    {
        return instance;
 8010bbc:	4b03      	ldr	r3, [pc, #12]	; (8010bcc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
    }
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	2000bf18 	.word	0x2000bf18

08010bd0 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010bd4:	4b0b      	ldr	r3, [pc, #44]	; (8010c04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d008      	beq.n	8010bf2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010be0:	4b08      	ldr	r3, [pc, #32]	; (8010c04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d003      	beq.n	8010bf2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010bea:	4b06      	ldr	r3, [pc, #24]	; (8010c04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bf0:	e002      	b.n	8010bf8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010bf2:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr
 8010c02:	bf00      	nop
 8010c04:	2000bf18 	.word	0x2000bf18

08010c08 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	4a05      	ldr	r2, [pc, #20]	; (8010c28 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7ff fed7 	bl	80109cc <_ZN8touchgfx15UIEventListenerD1Ev>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4618      	mov	r0, r3
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	0802df80 	.word	0x0802df80

08010c2c <_ZN8touchgfx11ApplicationD0Ev>:
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff ffe7 	bl	8010c08 <_ZN8touchgfx11ApplicationD1Ev>
 8010c3a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f018 fe9f 	bl	8029982 <_ZdlPvj>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f00c feb0 	bl	801d9c0 <_ZN8touchgfx11ApplicationC1Ev>
 8010c60:	4a09      	ldr	r2, [pc, #36]	; (8010c88 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4a04      	ldr	r2, [pc, #16]	; (8010c8c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010c7a:	6013      	str	r3, [r2, #0]
    }
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	0802b664 	.word	0x0802b664
 8010c8c:	2000bfa4 	.word	0x2000bfa4

08010c90 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	4a05      	ldr	r2, [pc, #20]	; (8010cb0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	601a      	str	r2, [r3, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff ffb1 	bl	8010c08 <_ZN8touchgfx11ApplicationD1Ev>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	0802b664 	.word	0x0802b664

08010cb4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ffe7 	bl	8010c90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010cc2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f018 fe5b 	bl	8029982 <_ZdlPvj>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b082      	sub	sp, #8
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f804 	bl	8010cec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00f      	beq.n	8010d1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	330c      	adds	r3, #12
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4610      	mov	r0, r2
 8010d12:	4798      	blx	r3
 8010d14:	4603      	mov	r3, r0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e000      	b.n	8010d20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00e      	beq.n	8010d42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	4610      	mov	r0, r2
 8010d38:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010d42:	bf00      	nop
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b084      	sub	sp, #16
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	60f8      	str	r0, [r7, #12]
 8010d52:	60b9      	str	r1, [r7, #8]
 8010d54:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010d56:	f00c fe11 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f00c fe13 	bl	801d988 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d008      	beq.n	8010d7c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	330c      	adds	r3, #12
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4610      	mov	r0, r2
 8010d7a:	4798      	blx	r3
    }
    if (*currentTrans)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d007      	beq.n	8010d94 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4610      	mov	r0, r2
 8010d92:	4798      	blx	r3
    }
    if (*currentScreen)
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d008      	beq.n	8010dae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	3314      	adds	r3, #20
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4610      	mov	r0, r2
 8010dac:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d008      	beq.n	8010dc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4610      	mov	r0, r2
 8010dc6:	4798      	blx	r3
    }
    if (*currentScreen)
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d007      	beq.n	8010de0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d008      	beq.n	8010dfa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	681a      	ldr	r2, [r3, #0]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3308      	adds	r3, #8
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4610      	mov	r0, r2
 8010df8:	4798      	blx	r3
    }
}
 8010dfa:	bf00      	nop
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b084      	sub	sp, #16
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	60f8      	str	r0, [r7, #12]
 8010e0a:	60b9      	str	r1, [r7, #8]
 8010e0c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	330c      	adds	r3, #12
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	4798      	blx	r3
    newPresenter->activate();
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68b8      	ldr	r0, [r7, #8]
 8010e22:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010e24:	6879      	ldr	r1, [r7, #4]
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f00d feb8 	bl	801eb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	3310      	adds	r3, #16
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	4798      	blx	r3

    Application::getInstance()->draw();
 8010e38:	f00c fda0 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	6813      	ldr	r3, [r2, #0]
 8010e40:	3328      	adds	r3, #40	; 0x28
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4610      	mov	r0, r2
 8010e46:	4798      	blx	r3
}
 8010e48:	bf00      	nop
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	683a      	ldr	r2, [r7, #0]
 8010e5e:	601a      	str	r2, [r3, #0]
    }
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr

08010e6c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	4a08      	ldr	r2, [pc, #32]	; (8010e98 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	601a      	str	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010e80:	4618      	mov	r0, r3
 8010e82:	f000 ff0d 	bl	8011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7ff ff01 	bl	8010c90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	0802b610 	.word	0x0802b610

08010e9c <_ZN23FrontendApplicationBaseD0Ev>:
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7ff ffe1 	bl	8010e6c <_ZN23FrontendApplicationBaseD1Ev>
 8010eaa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f018 fd67 	bl	8029982 <_ZdlPvj>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3708      	adds	r7, #8
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
	...

08010ec0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff fd9e 	bl	8010a0c <_ZN8touchgfx10TransitionC1Ev>
 8010ed0:	4a03      	ldr	r2, [pc, #12]	; (8010ee0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	0802b5f0 	.word	0x0802b5f0

08010ee4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	4a05      	ldr	r2, [pc, #20]	; (8010f04 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fd9f 	bl	8010a38 <_ZN8touchgfx10TransitionD1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	0802b5f0 	.word	0x0802b5f0

08010f08 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7ff ffe7 	bl	8010ee4 <_ZN8touchgfx12NoTransitionD1Ev>
 8010f16:	210c      	movs	r1, #12
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f018 fd32 	bl	8029982 <_ZdlPvj>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4618      	mov	r0, r3
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2201      	movs	r2, #1
 8010f34:	721a      	strb	r2, [r3, #8]
    }
 8010f36:	bf00      	nop
 8010f38:	370c      	adds	r7, #12
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8010f42:	b480      	push	{r7}
 8010f44:	b083      	sub	sp, #12
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
 8010f4a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	605a      	str	r2, [r3, #4]
    }
 8010f52:	bf00      	nop
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
	...

08010f60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff fe6e 	bl	8010c50 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010f74:	4a13      	ldr	r2, [pc, #76]	; (8010fc4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8010f80:	4618      	mov	r0, r3
 8010f82:	f000 f92b 	bl	80111dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010f96:	f7ff fe0f 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	6813      	ldr	r3, [r2, #0]
 8010f9e:	3308      	adds	r3, #8
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2100      	movs	r1, #0
 8010fa4:	4610      	mov	r0, r2
 8010fa6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8010fa8:	2000      	movs	r0, #0
 8010faa:	f005 f899 	bl	80160e0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010fae:	f7ff fe0f 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f012 f9f2 	bl	802339e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	0802b610 	.word	0x0802b610

08010fc8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	370c      	adds	r7, #12
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fde:	4770      	bx	lr

08010fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	4611      	mov	r1, r2
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7ff ffe9 	bl	8010fc8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	685a      	ldr	r2, [r3, #4]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	605a      	str	r2, [r3, #4]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	683a      	ldr	r2, [r7, #0]
 8011002:	3308      	adds	r3, #8
 8011004:	3208      	adds	r2, #8
 8011006:	e892 0003 	ldmia.w	r2, {r0, r1}
 801100a:	e883 0003 	stmia.w	r3, {r0, r1}
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4618      	mov	r0, r3
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8011018:	b590      	push	{r4, r7, lr}
 801101a:	b089      	sub	sp, #36	; 0x24
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011026:	4b10      	ldr	r3, [pc, #64]	; (8011068 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8011028:	61bb      	str	r3, [r7, #24]
 801102a:	2300      	movs	r3, #0
 801102c:	61fb      	str	r3, [r7, #28]
 801102e:	f107 0008 	add.w	r0, r7, #8
 8011032:	f107 0318 	add.w	r3, r7, #24
 8011036:	cb0c      	ldmia	r3, {r2, r3}
 8011038:	6879      	ldr	r1, [r7, #4]
 801103a:	f000 f8eb 	bl	8011214 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801103e:	f107 0308 	add.w	r3, r7, #8
 8011042:	4619      	mov	r1, r3
 8011044:	4620      	mov	r0, r4
 8011046:	f7ff ffcb 	bl	8010fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801104a:	f107 0308 	add.w	r3, r7, #8
 801104e:	4618      	mov	r0, r3
 8011050:	f000 fe26 	bl	8011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011060:	bf00      	nop
 8011062:	3724      	adds	r7, #36	; 0x24
 8011064:	46bd      	mov	sp, r7
 8011066:	bd90      	pop	{r4, r7, pc}
 8011068:	0801106d 	.word	0x0801106d

0801106c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af02      	add	r7, sp, #8
 8011072:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011080:	461a      	mov	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	4b04      	ldr	r3, [pc, #16]	; (801109c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 801108c:	4804      	ldr	r0, [pc, #16]	; (80110a0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 801108e:	f000 f8e1 	bl	8011254 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011092:	bf00      	nop
 8011094:	3708      	adds	r7, #8
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	2000bf98 	.word	0x2000bf98
 80110a0:	2000bf94 	.word	0x2000bf94

080110a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWest()
{
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b089      	sub	sp, #36	; 0x24
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionWestImpl);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80110b2:	4b10      	ldr	r3, [pc, #64]	; (80110f4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv+0x50>)
 80110b4:	61bb      	str	r3, [r7, #24]
 80110b6:	2300      	movs	r3, #0
 80110b8:	61fb      	str	r3, [r7, #28]
 80110ba:	f107 0008 	add.w	r0, r7, #8
 80110be:	f107 0318 	add.w	r3, r7, #24
 80110c2:	cb0c      	ldmia	r3, {r2, r3}
 80110c4:	6879      	ldr	r1, [r7, #4]
 80110c6:	f000 f8a5 	bl	8011214 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80110ca:	f107 0308 	add.w	r3, r7, #8
 80110ce:	4619      	mov	r1, r3
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ff ff85 	bl	8010fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80110d6:	f107 0308 	add.w	r3, r7, #8
 80110da:	4618      	mov	r0, r3
 80110dc:	f000 fde0 	bl	8011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80110ec:	bf00      	nop
 80110ee:	3724      	adds	r7, #36	; 0x24
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd90      	pop	{r4, r7, pc}
 80110f4:	080110f9 	.word	0x080110f9

080110f8 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWestImpl()
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801110c:	461a      	mov	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	4b04      	ldr	r3, [pc, #16]	; (8011128 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x30>)
 8011118:	4804      	ldr	r0, [pc, #16]	; (801112c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x34>)
 801111a:	f000 f957 	bl	80113cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801111e:	bf00      	nop
 8011120:	3708      	adds	r7, #8
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	2000bf98 	.word	0x2000bf98
 801112c:	2000bf94 	.word	0x2000bf94

08011130 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b089      	sub	sp, #36	; 0x24
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801113e:	4b10      	ldr	r3, [pc, #64]	; (8011180 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8011140:	61bb      	str	r3, [r7, #24]
 8011142:	2300      	movs	r3, #0
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	f107 0008 	add.w	r0, r7, #8
 801114a:	f107 0318 	add.w	r3, r7, #24
 801114e:	cb0c      	ldmia	r3, {r2, r3}
 8011150:	6879      	ldr	r1, [r7, #4]
 8011152:	f000 f85f 	bl	8011214 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011156:	f107 0308 	add.w	r3, r7, #8
 801115a:	4619      	mov	r1, r3
 801115c:	4620      	mov	r0, r4
 801115e:	f7ff ff3f 	bl	8010fe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011162:	f107 0308 	add.w	r3, r7, #8
 8011166:	4618      	mov	r0, r3
 8011168:	f000 fd9a 	bl	8011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011178:	bf00      	nop
 801117a:	3724      	adds	r7, #36	; 0x24
 801117c:	46bd      	mov	sp, r7
 801117e:	bd90      	pop	{r4, r7, pc}
 8011180:	08011185 	.word	0x08011185

08011184 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af02      	add	r7, sp, #8
 801118a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011198:	461a      	mov	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	4b04      	ldr	r3, [pc, #16]	; (80111b4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 80111a4:	4804      	ldr	r0, [pc, #16]	; (80111b8 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 80111a6:	f000 f9cd 	bl	8011544 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80111aa:	bf00      	nop
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	2000bf98 	.word	0x2000bf98
 80111b8:	2000bf94 	.word	0x2000bf94

080111bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	4a04      	ldr	r2, [pc, #16]	; (80111d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	4618      	mov	r0, r3
 80111ce:	370c      	adds	r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr
 80111d8:	0802b6a0 	.word	0x0802b6a0

080111dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff ffe8 	bl	80111bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80111ec:	4a08      	ldr	r2, [pc, #32]	; (8011210 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	601a      	str	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	605a      	str	r2, [r3, #4]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	609a      	str	r2, [r3, #8]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	60da      	str	r2, [r3, #12]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	4618      	mov	r0, r3
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	0802b64c 	.word	0x0802b64c

08011214 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	4639      	mov	r1, r7
 8011220:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff ffc8 	bl	80111bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801122c:	4a08      	ldr	r2, [pc, #32]	; (8011250 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	3308      	adds	r3, #8
 801123c:	463a      	mov	r2, r7
 801123e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011242:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	4618      	mov	r0, r3
 801124a:	3710      	adds	r7, #16
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	0802b64c 	.word	0x0802b64c

08011254 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011254:	b590      	push	{r4, r7, lr}
 8011256:	b089      	sub	sp, #36	; 0x24
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	689a      	ldr	r2, [r3, #8]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3320      	adds	r3, #32
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4610      	mov	r0, r2
 8011272:	4798      	blx	r3
 8011274:	4602      	mov	r2, r0
 8011276:	f642 0343 	movw	r3, #10307	; 0x2843
 801127a:	429a      	cmp	r2, r3
 801127c:	d805      	bhi.n	801128a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801127e:	4b4e      	ldr	r3, [pc, #312]	; (80113b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011280:	4a4e      	ldr	r2, [pc, #312]	; (80113bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011282:	21c2      	movs	r1, #194	; 0xc2
 8011284:	484e      	ldr	r0, [pc, #312]	; (80113c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011286:	f018 fba7 	bl	80299d8 <__assert_func>
 801128a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3320      	adds	r3, #32
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4610      	mov	r0, r2
 801129c:	4798      	blx	r3
 801129e:	4603      	mov	r3, r0
 80112a0:	2b0f      	cmp	r3, #15
 80112a2:	d805      	bhi.n	80112b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80112a4:	4b47      	ldr	r3, [pc, #284]	; (80113c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80112a6:	4a45      	ldr	r2, [pc, #276]	; (80113bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80112a8:	21c3      	movs	r1, #195	; 0xc3
 80112aa:	4845      	ldr	r0, [pc, #276]	; (80113c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80112ac:	f018 fb94 	bl	80299d8 <__assert_func>
 80112b0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	68da      	ldr	r2, [r3, #12]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3320      	adds	r3, #32
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4610      	mov	r0, r2
 80112c2:	4798      	blx	r3
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b0b      	cmp	r3, #11
 80112c8:	d805      	bhi.n	80112d6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80112ca:	4b3f      	ldr	r3, [pc, #252]	; (80113c8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80112cc:	4a3b      	ldr	r2, [pc, #236]	; (80113bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80112ce:	21c4      	movs	r1, #196	; 0xc4
 80112d0:	483b      	ldr	r0, [pc, #236]	; (80113c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80112d2:	f018 fb81 	bl	80299d8 <__assert_func>
 80112d6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80112d8:	683a      	ldr	r2, [r7, #0]
 80112da:	68b9      	ldr	r1, [r7, #8]
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f7ff fd34 	bl	8010d4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	2100      	movs	r1, #0
 80112e8:	4618      	mov	r0, r3
 80112ea:	f000 f9e7 	bl	80116bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80112ee:	4603      	mov	r3, r0
 80112f0:	4619      	mov	r1, r3
 80112f2:	200c      	movs	r0, #12
 80112f4:	f7ff fb1c 	bl	8010930 <_ZnwjPv>
 80112f8:	4604      	mov	r4, r0
 80112fa:	2c00      	cmp	r4, #0
 80112fc:	d004      	beq.n	8011308 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80112fe:	4620      	mov	r0, r4
 8011300:	f7ff fdde 	bl	8010ec0 <_ZN8touchgfx12NoTransitionC1Ev>
 8011304:	4623      	mov	r3, r4
 8011306:	e000      	b.n	801130a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011308:	4623      	mov	r3, r4
 801130a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	2100      	movs	r1, #0
 8011312:	4618      	mov	r0, r3
 8011314:	f000 f9e5 	bl	80116e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011318:	4603      	mov	r3, r0
 801131a:	4619      	mov	r1, r3
 801131c:	f642 0044 	movw	r0, #10308	; 0x2844
 8011320:	f7ff fb06 	bl	8010930 <_ZnwjPv>
 8011324:	4604      	mov	r4, r0
 8011326:	2c00      	cmp	r4, #0
 8011328:	d004      	beq.n	8011334 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801132a:	4620      	mov	r0, r4
 801132c:	f005 f964 	bl	80165f8 <_ZN8MainViewC1Ev>
 8011330:	4623      	mov	r3, r4
 8011332:	e000      	b.n	8011336 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011334:	4623      	mov	r3, r4
 8011336:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	2100      	movs	r1, #0
 801133e:	4618      	mov	r0, r3
 8011340:	f000 f9e2 	bl	8011708 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011344:	4603      	mov	r3, r0
 8011346:	4619      	mov	r1, r3
 8011348:	2010      	movs	r0, #16
 801134a:	f7ff faf1 	bl	8010930 <_ZnwjPv>
 801134e:	4604      	mov	r4, r0
 8011350:	2c00      	cmp	r4, #0
 8011352:	d005      	beq.n	8011360 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011354:	69b9      	ldr	r1, [r7, #24]
 8011356:	4620      	mov	r0, r4
 8011358:	f005 f890 	bl	801647c <_ZN13MainPresenterC1ER8MainView>
 801135c:	4623      	mov	r3, r4
 801135e:	e000      	b.n	8011362 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011360:	4623      	mov	r3, r4
 8011362:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	69fa      	ldr	r2, [r7, #28]
 8011368:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	697a      	ldr	r2, [r7, #20]
 801136e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	69ba      	ldr	r2, [r7, #24]
 8011374:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	3304      	adds	r3, #4
 8011380:	e000      	b.n	8011384 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011382:	2300      	movs	r3, #0
 8011384:	4619      	mov	r1, r3
 8011386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011388:	f7ff fd62 	bl	8010e50 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	3304      	adds	r3, #4
 8011390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011392:	4618      	mov	r0, r3
 8011394:	f7ff fdd5 	bl	8010f42 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	6979      	ldr	r1, [r7, #20]
 801139c:	4618      	mov	r0, r3
 801139e:	f000 f9c6 	bl	801172e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80113a2:	69fa      	ldr	r2, [r7, #28]
 80113a4:	6979      	ldr	r1, [r7, #20]
 80113a6:	69b8      	ldr	r0, [r7, #24]
 80113a8:	f7ff fd2b 	bl	8010e02 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80113ac:	697b      	ldr	r3, [r7, #20]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3724      	adds	r7, #36	; 0x24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd90      	pop	{r4, r7, pc}
 80113b6:	bf00      	nop
 80113b8:	0802ab64 	.word	0x0802ab64
 80113bc:	0802b6f8 	.word	0x0802b6f8
 80113c0:	0802abf4 	.word	0x0802abf4
 80113c4:	0802ac38 	.word	0x0802ac38
 80113c8:	0802acdc 	.word	0x0802acdc

080113cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80113cc:	b590      	push	{r4, r7, lr}
 80113ce:	b089      	sub	sp, #36	; 0x24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
 80113d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	689a      	ldr	r2, [r3, #8]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3320      	adds	r3, #32
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4610      	mov	r0, r2
 80113ea:	4798      	blx	r3
 80113ec:	4602      	mov	r2, r0
 80113ee:	f642 0343 	movw	r3, #10307	; 0x2843
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d805      	bhi.n	8011402 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80113f6:	4b4e      	ldr	r3, [pc, #312]	; (8011530 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80113f8:	4a4e      	ldr	r2, [pc, #312]	; (8011534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80113fa:	21c2      	movs	r1, #194	; 0xc2
 80113fc:	484e      	ldr	r0, [pc, #312]	; (8011538 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80113fe:	f018 faeb 	bl	80299d8 <__assert_func>
 8011402:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	685a      	ldr	r2, [r3, #4]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3320      	adds	r3, #32
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4610      	mov	r0, r2
 8011414:	4798      	blx	r3
 8011416:	4603      	mov	r3, r0
 8011418:	2b0f      	cmp	r3, #15
 801141a:	d805      	bhi.n	8011428 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801141c:	4b47      	ldr	r3, [pc, #284]	; (801153c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801141e:	4a45      	ldr	r2, [pc, #276]	; (8011534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011420:	21c3      	movs	r1, #195	; 0xc3
 8011422:	4845      	ldr	r0, [pc, #276]	; (8011538 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011424:	f018 fad8 	bl	80299d8 <__assert_func>
 8011428:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68da      	ldr	r2, [r3, #12]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	68db      	ldr	r3, [r3, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	3320      	adds	r3, #32
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4610      	mov	r0, r2
 801143a:	4798      	blx	r3
 801143c:	4603      	mov	r3, r0
 801143e:	2b53      	cmp	r3, #83	; 0x53
 8011440:	d805      	bhi.n	801144e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011442:	4b3f      	ldr	r3, [pc, #252]	; (8011540 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8011444:	4a3b      	ldr	r2, [pc, #236]	; (8011534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011446:	21c4      	movs	r1, #196	; 0xc4
 8011448:	483b      	ldr	r0, [pc, #236]	; (8011538 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801144a:	f018 fac5 	bl	80299d8 <__assert_func>
 801144e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	68b9      	ldr	r1, [r7, #8]
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7ff fc78 	bl	8010d4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	2100      	movs	r1, #0
 8011460:	4618      	mov	r0, r3
 8011462:	f000 f972 	bl	801174a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 8011466:	4603      	mov	r3, r0
 8011468:	4619      	mov	r1, r3
 801146a:	2054      	movs	r0, #84	; 0x54
 801146c:	f7ff fa60 	bl	8010930 <_ZnwjPv>
 8011470:	4604      	mov	r4, r0
 8011472:	2c00      	cmp	r4, #0
 8011474:	d005      	beq.n	8011482 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011476:	2114      	movs	r1, #20
 8011478:	4620      	mov	r0, r4
 801147a:	f000 f99b 	bl	80117b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801147e:	4623      	mov	r3, r4
 8011480:	e000      	b.n	8011484 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 8011482:	4623      	mov	r3, r4
 8011484:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	2100      	movs	r1, #0
 801148c:	4618      	mov	r0, r3
 801148e:	f000 f928 	bl	80116e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011492:	4603      	mov	r3, r0
 8011494:	4619      	mov	r1, r3
 8011496:	f642 0044 	movw	r0, #10308	; 0x2844
 801149a:	f7ff fa49 	bl	8010930 <_ZnwjPv>
 801149e:	4604      	mov	r4, r0
 80114a0:	2c00      	cmp	r4, #0
 80114a2:	d004      	beq.n	80114ae <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80114a4:	4620      	mov	r0, r4
 80114a6:	f005 f8a7 	bl	80165f8 <_ZN8MainViewC1Ev>
 80114aa:	4623      	mov	r3, r4
 80114ac:	e000      	b.n	80114b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 80114ae:	4623      	mov	r3, r4
 80114b0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	2100      	movs	r1, #0
 80114b8:	4618      	mov	r0, r3
 80114ba:	f000 f925 	bl	8011708 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80114be:	4603      	mov	r3, r0
 80114c0:	4619      	mov	r1, r3
 80114c2:	2010      	movs	r0, #16
 80114c4:	f7ff fa34 	bl	8010930 <_ZnwjPv>
 80114c8:	4604      	mov	r4, r0
 80114ca:	2c00      	cmp	r4, #0
 80114cc:	d005      	beq.n	80114da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80114ce:	69b9      	ldr	r1, [r7, #24]
 80114d0:	4620      	mov	r0, r4
 80114d2:	f004 ffd3 	bl	801647c <_ZN13MainPresenterC1ER8MainView>
 80114d6:	4623      	mov	r3, r4
 80114d8:	e000      	b.n	80114dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 80114da:	4623      	mov	r3, r4
 80114dc:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	69fa      	ldr	r2, [r7, #28]
 80114e2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	3304      	adds	r3, #4
 80114fa:	e000      	b.n	80114fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 80114fc:	2300      	movs	r3, #0
 80114fe:	4619      	mov	r1, r3
 8011500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011502:	f7ff fca5 	bl	8010e50 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	3304      	adds	r3, #4
 801150a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff fd18 	bl	8010f42 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	6979      	ldr	r1, [r7, #20]
 8011516:	4618      	mov	r0, r3
 8011518:	f000 f909 	bl	801172e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801151c:	69fa      	ldr	r2, [r7, #28]
 801151e:	6979      	ldr	r1, [r7, #20]
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f7ff fc6e 	bl	8010e02 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011526:	697b      	ldr	r3, [r7, #20]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3724      	adds	r7, #36	; 0x24
 801152c:	46bd      	mov	sp, r7
 801152e:	bd90      	pop	{r4, r7, pc}
 8011530:	0802ab64 	.word	0x0802ab64
 8011534:	0802b7f8 	.word	0x0802b7f8
 8011538:	0802abf4 	.word	0x0802abf4
 801153c:	0802ac38 	.word	0x0802ac38
 8011540:	0802acdc 	.word	0x0802acdc

08011544 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011544:	b590      	push	{r4, r7, lr}
 8011546:	b089      	sub	sp, #36	; 0x24
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
 8011550:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	689a      	ldr	r2, [r3, #8]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3320      	adds	r3, #32
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4610      	mov	r0, r2
 8011562:	4798      	blx	r3
 8011564:	4603      	mov	r3, r0
 8011566:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 801156a:	d205      	bcs.n	8011578 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801156c:	4b4e      	ldr	r3, [pc, #312]	; (80116a8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801156e:	4a4f      	ldr	r2, [pc, #316]	; (80116ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011570:	21c2      	movs	r1, #194	; 0xc2
 8011572:	484f      	ldr	r0, [pc, #316]	; (80116b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011574:	f018 fa30 	bl	80299d8 <__assert_func>
 8011578:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3320      	adds	r3, #32
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4610      	mov	r0, r2
 801158a:	4798      	blx	r3
 801158c:	4603      	mov	r3, r0
 801158e:	2b0f      	cmp	r3, #15
 8011590:	d805      	bhi.n	801159e <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8011592:	4b48      	ldr	r3, [pc, #288]	; (80116b4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8011594:	4a45      	ldr	r2, [pc, #276]	; (80116ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011596:	21c3      	movs	r1, #195	; 0xc3
 8011598:	4845      	ldr	r0, [pc, #276]	; (80116b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801159a:	f018 fa1d 	bl	80299d8 <__assert_func>
 801159e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68da      	ldr	r2, [r3, #12]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	3320      	adds	r3, #32
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	4610      	mov	r0, r2
 80115b0:	4798      	blx	r3
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b53      	cmp	r3, #83	; 0x53
 80115b6:	d805      	bhi.n	80115c4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80115b8:	4b3f      	ldr	r3, [pc, #252]	; (80116b8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80115ba:	4a3c      	ldr	r2, [pc, #240]	; (80116ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80115bc:	21c4      	movs	r1, #196	; 0xc4
 80115be:	483c      	ldr	r0, [pc, #240]	; (80116b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80115c0:	f018 fa0a 	bl	80299d8 <__assert_func>
 80115c4:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80115c6:	683a      	ldr	r2, [r7, #0]
 80115c8:	68b9      	ldr	r1, [r7, #8]
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7ff fbbd 	bl	8010d4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	2100      	movs	r1, #0
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 f980 	bl	80118dc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80115dc:	4603      	mov	r3, r0
 80115de:	4619      	mov	r1, r3
 80115e0:	2054      	movs	r0, #84	; 0x54
 80115e2:	f7ff f9a5 	bl	8010930 <_ZnwjPv>
 80115e6:	4604      	mov	r4, r0
 80115e8:	2c00      	cmp	r4, #0
 80115ea:	d005      	beq.n	80115f8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80115ec:	2114      	movs	r1, #20
 80115ee:	4620      	mov	r0, r4
 80115f0:	f000 f9aa 	bl	8011948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80115f4:	4623      	mov	r3, r4
 80115f6:	e000      	b.n	80115fa <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80115f8:	4623      	mov	r3, r4
 80115fa:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	2100      	movs	r1, #0
 8011602:	4618      	mov	r0, r3
 8011604:	f000 fa34 	bl	8011a70 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011608:	4603      	mov	r3, r0
 801160a:	4619      	mov	r1, r3
 801160c:	f44f 7019 	mov.w	r0, #612	; 0x264
 8011610:	f7ff f98e 	bl	8010930 <_ZnwjPv>
 8011614:	4604      	mov	r4, r0
 8011616:	2c00      	cmp	r4, #0
 8011618:	d004      	beq.n	8011624 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801161a:	4620      	mov	r0, r4
 801161c:	f005 fd34 	bl	8017088 <_ZN16SecondScreenViewC1Ev>
 8011620:	4623      	mov	r3, r4
 8011622:	e000      	b.n	8011626 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011624:	4623      	mov	r3, r4
 8011626:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	2100      	movs	r1, #0
 801162e:	4618      	mov	r0, r3
 8011630:	f000 fa31 	bl	8011a96 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011634:	4603      	mov	r3, r0
 8011636:	4619      	mov	r1, r3
 8011638:	2010      	movs	r0, #16
 801163a:	f7ff f979 	bl	8010930 <_ZnwjPv>
 801163e:	4604      	mov	r4, r0
 8011640:	2c00      	cmp	r4, #0
 8011642:	d005      	beq.n	8011650 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011644:	69b9      	ldr	r1, [r7, #24]
 8011646:	4620      	mov	r0, r4
 8011648:	f005 fc4a 	bl	8016ee0 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 801164c:	4623      	mov	r3, r4
 801164e:	e000      	b.n	8011652 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011650:	4623      	mov	r3, r4
 8011652:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	69fa      	ldr	r2, [r7, #28]
 8011658:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	697a      	ldr	r2, [r7, #20]
 801165e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	69ba      	ldr	r2, [r7, #24]
 8011664:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	3304      	adds	r3, #4
 8011670:	e000      	b.n	8011674 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011672:	2300      	movs	r3, #0
 8011674:	4619      	mov	r1, r3
 8011676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011678:	f7ff fbea 	bl	8010e50 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	3304      	adds	r3, #4
 8011680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011682:	4618      	mov	r0, r3
 8011684:	f7ff fc5d 	bl	8010f42 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	6979      	ldr	r1, [r7, #20]
 801168c:	4618      	mov	r0, r3
 801168e:	f000 fa15 	bl	8011abc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011692:	69fa      	ldr	r2, [r7, #28]
 8011694:	6979      	ldr	r1, [r7, #20]
 8011696:	69b8      	ldr	r0, [r7, #24]
 8011698:	f7ff fbb3 	bl	8010e02 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801169c:	697b      	ldr	r3, [r7, #20]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3724      	adds	r7, #36	; 0x24
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd90      	pop	{r4, r7, pc}
 80116a6:	bf00      	nop
 80116a8:	0802ab64 	.word	0x0802ab64
 80116ac:	0802b914 	.word	0x0802b914
 80116b0:	0802abf4 	.word	0x0802abf4
 80116b4:	0802ac38 	.word	0x0802ac38
 80116b8:	0802acdc 	.word	0x0802acdc

080116bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	3324      	adds	r3, #36	; 0x24
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	887a      	ldrh	r2, [r7, #2]
 80116d2:	4611      	mov	r1, r2
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	4798      	blx	r3
 80116d8:	4603      	mov	r3, r0
    }
 80116da:	4618      	mov	r0, r3
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80116e2:	b580      	push	{r7, lr}
 80116e4:	b082      	sub	sp, #8
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	460b      	mov	r3, r1
 80116ec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	3324      	adds	r3, #36	; 0x24
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	887a      	ldrh	r2, [r7, #2]
 80116f8:	4611      	mov	r1, r2
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	4798      	blx	r3
 80116fe:	4603      	mov	r3, r0
    }
 8011700:	4618      	mov	r0, r3
 8011702:	3708      	adds	r7, #8
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}

08011708 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	460b      	mov	r3, r1
 8011712:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	3324      	adds	r3, #36	; 0x24
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	887a      	ldrh	r2, [r7, #2]
 801171e:	4611      	mov	r1, r2
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	4798      	blx	r3
 8011724:	4603      	mov	r3, r0
    }
 8011726:	4618      	mov	r0, r3
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801172e:	b480      	push	{r7}
 8011730:	b083      	sub	sp, #12
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
 8011736:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801173e:	bf00      	nop
 8011740:	370c      	adds	r7, #12
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801174a:	b580      	push	{r7, lr}
 801174c:	b082      	sub	sp, #8
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
 8011752:	460b      	mov	r3, r1
 8011754:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3324      	adds	r3, #36	; 0x24
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	887a      	ldrh	r2, [r7, #2]
 8011760:	4611      	mov	r1, r2
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	4798      	blx	r3
 8011766:	4603      	mov	r3, r0
    }
 8011768:	4618      	mov	r0, r3
 801176a:	3708      	adds	r7, #8
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	4a05      	ldr	r2, [pc, #20]	; (8011790 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	601a      	str	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	f000 fa13 	bl	8011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4618      	mov	r0, r3
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	0802b580 	.word	0x0802b580

08011794 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff ffe7 	bl	8011770 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 80117a2:	2110      	movs	r1, #16
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f018 f8ec 	bl	8029982 <_ZdlPvj>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80117b4:	b590      	push	{r4, r7, lr}
 80117b6:	b087      	sub	sp, #28
 80117b8:	af02      	add	r7, sp, #8
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	460b      	mov	r3, r1
 80117be:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7ff f922 	bl	8010a0c <_ZN8touchgfx10TransitionC1Ev>
 80117c8:	4a3f      	ldr	r2, [pc, #252]	; (80118c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	330c      	adds	r3, #12
 80117d2:	4618      	mov	r0, r3
 80117d4:	f00a fb44 	bl	801be60 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f103 020c 	add.w	r2, r3, #12
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	639a      	str	r2, [r3, #56]	; 0x38
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80117e8:	4a38      	ldr	r2, [pc, #224]	; (80118cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 80117ea:	f107 0308 	add.w	r3, r7, #8
 80117ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80117f6:	f107 0308 	add.w	r3, r7, #8
 80117fa:	cb0c      	ldmia	r3, {r2, r3}
 80117fc:	6879      	ldr	r1, [r7, #4]
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 f9b4 	bl	8011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2203      	movs	r2, #3
 8011808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	78fa      	ldrb	r2, [r7, #3]
 8011810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2200      	movs	r2, #0
 8011820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011824:	4b2a      	ldr	r3, [pc, #168]	; (80118d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d047      	beq.n	80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f103 000c 	add.w	r0, r3, #12
 8011832:	4b28      	ldr	r3, [pc, #160]	; (80118d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	b21a      	sxth	r2, r3
 8011838:	4b27      	ldr	r3, [pc, #156]	; (80118d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	b21b      	sxth	r3, r3
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	4613      	mov	r3, r2
 8011842:	2200      	movs	r2, #0
 8011844:	2100      	movs	r1, #0
 8011846:	f7ff f96f 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	330c      	adds	r3, #12
 801184e:	4618      	mov	r0, r3
 8011850:	f00a fa83 	bl	801bd5a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801185a:	2b03      	cmp	r3, #3
 801185c:	d82a      	bhi.n	80118b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 801185e:	a201      	add	r2, pc, #4	; (adr r2, 8011864 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 8011860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011864:	08011895 	.word	0x08011895
 8011868:	080118a3 	.word	0x080118a3
 801186c:	08011875 	.word	0x08011875
 8011870:	08011887 	.word	0x08011887
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011874:	4b17      	ldr	r3, [pc, #92]	; (80118d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011876:	881b      	ldrh	r3, [r3, #0]
 8011878:	425b      	negs	r3, r3
 801187a:	b29b      	uxth	r3, r3
 801187c:	b21a      	sxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011884:	e01a      	b.n	80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8011886:	4b13      	ldr	r3, [pc, #76]	; (80118d4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	b21a      	sxth	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011892:	e013      	b.n	80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8011894:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	b21a      	sxth	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80118a0:	e00c      	b.n	80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80118a2:	4b0d      	ldr	r3, [pc, #52]	; (80118d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 80118a4:	881b      	ldrh	r3, [r3, #0]
 80118a6:	425b      	negs	r3, r3
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	b21a      	sxth	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 80118b2:	e003      	b.n	80118bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2201      	movs	r2, #1
 80118b8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 80118ba:	bf00      	nop
            }
        }
    }
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	3714      	adds	r7, #20
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd90      	pop	{r4, r7, pc}
 80118c6:	bf00      	nop
 80118c8:	0802b558 	.word	0x0802b558
 80118cc:	0802ad80 	.word	0x0802ad80
 80118d0:	2000bf15 	.word	0x2000bf15
 80118d4:	2000bf0a 	.word	0x2000bf0a
 80118d8:	2000bf0c 	.word	0x2000bf0c

080118dc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	460b      	mov	r3, r1
 80118e6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3324      	adds	r3, #36	; 0x24
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	887a      	ldrh	r2, [r7, #2]
 80118f2:	4611      	mov	r1, r2
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	4798      	blx	r3
 80118f8:	4603      	mov	r3, r0
    }
 80118fa:	4618      	mov	r0, r3
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
	...

08011904 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	4a05      	ldr	r2, [pc, #20]	; (8011924 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	601a      	str	r2, [r3, #0]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4618      	mov	r0, r3
 8011916:	f000 f949 	bl	8011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4618      	mov	r0, r3
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	0802b5c0 	.word	0x0802b5c0

08011928 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff ffe7 	bl	8011904 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011936:	2110      	movs	r1, #16
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f018 f822 	bl	8029982 <_ZdlPvj>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	4618      	mov	r0, r3
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8011948:	b590      	push	{r4, r7, lr}
 801194a:	b087      	sub	sp, #28
 801194c:	af02      	add	r7, sp, #8
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	460b      	mov	r3, r1
 8011952:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff f858 	bl	8010a0c <_ZN8touchgfx10TransitionC1Ev>
 801195c:	4a3f      	ldr	r2, [pc, #252]	; (8011a5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	601a      	str	r2, [r3, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	330c      	adds	r3, #12
 8011966:	4618      	mov	r0, r3
 8011968:	f00a fa7a 	bl	801be60 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f103 020c 	add.w	r2, r3, #12
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	639a      	str	r2, [r3, #56]	; 0x38
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801197c:	4a38      	ldr	r2, [pc, #224]	; (8011a60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 801197e:	f107 0308 	add.w	r3, r7, #8
 8011982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011986:	e883 0003 	stmia.w	r3, {r0, r1}
 801198a:	f107 0308 	add.w	r3, r7, #8
 801198e:	cb0c      	ldmia	r3, {r2, r3}
 8011990:	6879      	ldr	r1, [r7, #4]
 8011992:	4620      	mov	r0, r4
 8011994:	f000 f964 	bl	8011c60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2202      	movs	r2, #2
 801199c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	78fa      	ldrb	r2, [r7, #3]
 80119a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 80119b8:	4b2a      	ldr	r3, [pc, #168]	; (8011a64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d047      	beq.n	8011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f103 000c 	add.w	r0, r3, #12
 80119c6:	4b28      	ldr	r3, [pc, #160]	; (8011a68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	b21a      	sxth	r2, r3
 80119cc:	4b27      	ldr	r3, [pc, #156]	; (8011a6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	b21b      	sxth	r3, r3
 80119d2:	9300      	str	r3, [sp, #0]
 80119d4:	4613      	mov	r3, r2
 80119d6:	2200      	movs	r2, #0
 80119d8:	2100      	movs	r1, #0
 80119da:	f7ff f8a5 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	330c      	adds	r3, #12
 80119e2:	4618      	mov	r0, r3
 80119e4:	f00a f9b9 	bl	801bd5a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80119ee:	2b03      	cmp	r3, #3
 80119f0:	d82a      	bhi.n	8011a48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 80119f2:	a201      	add	r2, pc, #4	; (adr r2, 80119f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 80119f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f8:	08011a29 	.word	0x08011a29
 80119fc:	08011a37 	.word	0x08011a37
 8011a00:	08011a09 	.word	0x08011a09
 8011a04:	08011a1b 	.word	0x08011a1b
                targetValue = -HAL::DISPLAY_WIDTH;
 8011a08:	4b17      	ldr	r3, [pc, #92]	; (8011a68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	425b      	negs	r3, r3
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	b21a      	sxth	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a18:	e01a      	b.n	8011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 8011a1a:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	b21a      	sxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a26:	e013      	b.n	8011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 8011a28:	4b10      	ldr	r3, [pc, #64]	; (8011a6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	b21a      	sxth	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a34:	e00c      	b.n	8011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011a36:	4b0d      	ldr	r3, [pc, #52]	; (8011a6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	425b      	negs	r3, r3
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	b21a      	sxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a46:	e003      	b.n	8011a50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	721a      	strb	r2, [r3, #8]
                break;
 8011a4e:	bf00      	nop
    }
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	4618      	mov	r0, r3
 8011a54:	3714      	adds	r7, #20
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd90      	pop	{r4, r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	0802b598 	.word	0x0802b598
 8011a60:	0802ad88 	.word	0x0802ad88
 8011a64:	2000bf15 	.word	0x2000bf15
 8011a68:	2000bf0a 	.word	0x2000bf0a
 8011a6c:	2000bf0c 	.word	0x2000bf0c

08011a70 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	460b      	mov	r3, r1
 8011a7a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	3324      	adds	r3, #36	; 0x24
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	887a      	ldrh	r2, [r7, #2]
 8011a86:	4611      	mov	r1, r2
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	4798      	blx	r3
 8011a8c:	4603      	mov	r3, r0
    }
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b082      	sub	sp, #8
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	3324      	adds	r3, #36	; 0x24
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	887a      	ldrh	r2, [r7, #2]
 8011aac:	4611      	mov	r1, r2
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	4798      	blx	r3
 8011ab2:	4603      	mov	r3, r0
    }
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3708      	adds	r7, #8
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	683a      	ldr	r2, [r7, #0]
 8011aca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011acc:	bf00      	nop
 8011ace:	370c      	adds	r7, #12
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr

08011ad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d02a      	beq.n	8011b42 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011af2:	2b03      	cmp	r3, #3
 8011af4:	d820      	bhi.n	8011b38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011af6:	a201      	add	r2, pc, #4	; (adr r2, 8011afc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011afc:	08011b23 	.word	0x08011b23
 8011b00:	08011b23 	.word	0x08011b23
 8011b04:	08011b0d 	.word	0x08011b0d
 8011b08:	08011b0d 	.word	0x08011b0d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	3354      	adds	r3, #84	; 0x54
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	6838      	ldr	r0, [r7, #0]
 8011b1e:	4798      	blx	r3
            break;
 8011b20:	e010      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	3354      	adds	r3, #84	; 0x54
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	687a      	ldr	r2, [r7, #4]
 8011b2c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011b30:	2100      	movs	r1, #0
 8011b32:	6838      	ldr	r0, [r7, #0]
 8011b34:	4798      	blx	r3
            break;
 8011b36:	e005      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	721a      	strb	r2, [r3, #8]
            break;
 8011b3e:	bf00      	nop
 8011b40:	e000      	b.n	8011b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011b42:	bf00      	nop
        }
    }
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop

08011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	0802b5d8 	.word	0x0802b5d8

08011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	4639      	mov	r1, r7
 8011b78:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff ffe4 	bl	8011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011b84:	4a08      	ldr	r2, [pc, #32]	; (8011ba8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	3308      	adds	r3, #8
 8011b94:	463a      	mov	r2, r7
 8011b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	0802b580 	.word	0x0802b580

08011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
    }
 8011bb4:	4a04      	ldr	r2, [pc, #16]	; (8011bc8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	0802b5d8 	.word	0x0802b5d8

08011bcc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    }
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f7ff ffe9 	bl	8011bac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011bda:	2104      	movs	r1, #4
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f017 fed0 	bl	8029982 <_ZdlPvj>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4618      	mov	r0, r3
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d02a      	beq.n	8011c56 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	d820      	bhi.n	8011c4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011c0a:	a201      	add	r2, pc, #4	; (adr r2, 8011c10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c10:	08011c37 	.word	0x08011c37
 8011c14:	08011c37 	.word	0x08011c37
 8011c18:	08011c21 	.word	0x08011c21
 8011c1c:	08011c21 	.word	0x08011c21
            d.moveRelative(calculatedValue, 0);
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3354      	adds	r3, #84	; 0x54
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011c2e:	2200      	movs	r2, #0
 8011c30:	6838      	ldr	r0, [r7, #0]
 8011c32:	4798      	blx	r3
            break;
 8011c34:	e010      	b.n	8011c58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	3354      	adds	r3, #84	; 0x54
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011c44:	2100      	movs	r1, #0
 8011c46:	6838      	ldr	r0, [r7, #0]
 8011c48:	4798      	blx	r3
            break;
 8011c4a:	e005      	b.n	8011c58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	721a      	strb	r2, [r3, #8]
            break;
 8011c52:	bf00      	nop
 8011c54:	e000      	b.n	8011c58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011c56:	bf00      	nop
    }
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop

08011c60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff ff6a 	bl	8011b4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011c78:	4a08      	ldr	r2, [pc, #32]	; (8011c9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	3308      	adds	r3, #8
 8011c88:	463a      	mov	r2, r7
 8011c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	0802b5c0 	.word	0x0802b5c0

08011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	4a05      	ldr	r2, [pc, #20]	; (8011cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fe ff19 	bl	8010ae8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	0802b64c 	.word	0x0802b64c

08011cc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ffe7 	bl	8011ca0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011cd2:	2110      	movs	r1, #16
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f017 fe54 	bl	8029982 <_ZdlPvj>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
    }
 8011cec:	4a0a      	ldr	r2, [pc, #40]	; (8011d18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	333c      	adds	r3, #60	; 0x3c
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7ff fd3a 	bl	8011770 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	330c      	adds	r3, #12
 8011d00:	4618      	mov	r0, r3
 8011d02:	f00a f829 	bl	801bd58 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fe fe95 	bl	8010a38 <_ZN8touchgfx10TransitionD1Ev>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	3708      	adds	r7, #8
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}
 8011d18:	0802b558 	.word	0x0802b558

08011d1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
    }
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff ffdd 	bl	8011ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8011d2a:	2154      	movs	r1, #84	; 0x54
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f017 fe28 	bl	8029982 <_ZdlPvj>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	3708      	adds	r7, #8
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011d44:	4b59      	ldr	r3, [pc, #356]	; (8011eac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f083 0301 	eor.w	r3, r3, #1
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d003      	beq.n	8011d5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2201      	movs	r2, #1
 8011d56:	721a      	strb	r2, [r3, #8]
            return;
 8011d58:	e0a5      	b.n	8011ea6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fe fe8b 	bl	8010a78 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011d68:	3301      	adds	r3, #1
 8011d6a:	b2da      	uxtb	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d82f      	bhi.n	8011de2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011d88:	b298      	uxth	r0, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	2100      	movs	r1, #0
 8011d9a:	f00c ff16 	bl	801ebca <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	461a      	mov	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	f003 0301 	and.w	r3, r3, #1
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d01b      	beq.n	8011df2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011dc8:	2a00      	cmp	r2, #0
 8011dca:	dd01      	ble.n	8011dd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 8011dcc:	2201      	movs	r2, #1
 8011dce:	e001      	b.n	8011dd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 8011dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	b21a      	sxth	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011de0:	e007      	b.n	8011df2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2201      	movs	r2, #1
 8011de6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011df0:	e059      	b.n	8011ea6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011df8:	2b03      	cmp	r3, #3
 8011dfa:	d845      	bhi.n	8011e88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 8011dfc:	a201      	add	r2, pc, #4	; (adr r2, 8011e04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 8011dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e02:	bf00      	nop
 8011e04:	08011e4f 	.word	0x08011e4f
 8011e08:	08011e4f 	.word	0x08011e4f
 8011e0c:	08011e15 	.word	0x08011e15
 8011e10:	08011e15 	.word	0x08011e15
            calculatedValue -= snapshot.getX();
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	330c      	adds	r3, #12
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fe feb2 	bl	8010b82 <_ZNK8touchgfx8Drawable4getXEv>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	4619      	mov	r1, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	b28b      	uxth	r3, r1
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	b21a      	sxth	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f103 000c 	add.w	r0, r3, #12
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011e44:	2200      	movs	r2, #0
 8011e46:	4619      	mov	r1, r3
 8011e48:	f00c f9f6 	bl	801e238 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011e4c:	e020      	b.n	8011e90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	330c      	adds	r3, #12
 8011e52:	4618      	mov	r0, r3
 8011e54:	f7fe fea2 	bl	8010b9c <_ZNK8touchgfx8Drawable4getYEv>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	b28b      	uxth	r3, r1
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	b21a      	sxth	r2, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f103 000c 	add.w	r0, r3, #12
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011e7e:	461a      	mov	r2, r3
 8011e80:	2100      	movs	r1, #0
 8011e82:	f00c f9d9 	bl	801e238 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8011e86:	e003      	b.n	8011e90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	721a      	strb	r2, [r3, #8]
            break;
 8011e8e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6858      	ldr	r0, [r3, #4]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	3378      	adds	r3, #120	; 0x78
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	323c      	adds	r2, #60	; 0x3c
 8011ea2:	4611      	mov	r1, r2
 8011ea4:	4798      	blx	r3
    }
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	2000bf15 	.word	0x2000bf15

08011eb0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8011eb8:	4b0b      	ldr	r3, [pc, #44]	; (8011ee8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d00e      	beq.n	8011ede <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d00a      	beq.n	8011ede <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6858      	ldr	r0, [r3, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	3364      	adds	r3, #100	; 0x64
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	320c      	adds	r2, #12
 8011eda:	4611      	mov	r1, r2
 8011edc:	4798      	blx	r3
    }
 8011ede:	bf00      	nop
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	2000bf15 	.word	0x2000bf15

08011eec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b088      	sub	sp, #32
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8011ef4:	4b1a      	ldr	r3, [pc, #104]	; (8011f60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d02d      	beq.n	8011f58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7fe fdce 	bl	8010aa0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011f04:	4a17      	ldr	r2, [pc, #92]	; (8011f64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8011f06:	f107 0318 	add.w	r3, r7, #24
 8011f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011f12:	f107 0008 	add.w	r0, r7, #8
 8011f16:	f107 0318 	add.w	r3, r7, #24
 8011f1a:	cb0c      	ldmia	r3, {r2, r3}
 8011f1c:	6879      	ldr	r1, [r7, #4]
 8011f1e:	f7ff fe25 	bl	8011b6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	685a      	ldr	r2, [r3, #4]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	3378      	adds	r3, #120	; 0x78
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f107 0108 	add.w	r1, r7, #8
 8011f34:	4610      	mov	r0, r2
 8011f36:	4798      	blx	r3
            screenContainer->add(snapshot);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6858      	ldr	r0, [r3, #4]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	3360      	adds	r3, #96	; 0x60
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	320c      	adds	r2, #12
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8011f4e:	f107 0308 	add.w	r3, r7, #8
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff fc0c 	bl	8011770 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8011f58:	bf00      	nop
 8011f5a:	3720      	adds	r7, #32
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	2000bf15 	.word	0x2000bf15
 8011f64:	0802ad90 	.word	0x0802ad90

08011f68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
        switch (direction)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011f78:	2b03      	cmp	r3, #3
 8011f7a:	d83b      	bhi.n	8011ff4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8011f7c:	a201      	add	r2, pc, #4	; (adr r2, 8011f84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8011f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f82:	bf00      	nop
 8011f84:	08011fc5 	.word	0x08011fc5
 8011f88:	08011fdf 	.word	0x08011fdf
 8011f8c:	08011f95 	.word	0x08011f95
 8011f90:	08011fab 	.word	0x08011fab
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	3354      	adds	r3, #84	; 0x54
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a18      	ldr	r2, [pc, #96]	; (8012000 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011f9e:	8812      	ldrh	r2, [r2, #0]
 8011fa0:	b211      	sxth	r1, r2
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	6838      	ldr	r0, [r7, #0]
 8011fa6:	4798      	blx	r3
            break;
 8011fa8:	e025      	b.n	8011ff6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	3354      	adds	r3, #84	; 0x54
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a13      	ldr	r2, [pc, #76]	; (8012000 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8011fb4:	8812      	ldrh	r2, [r2, #0]
 8011fb6:	4252      	negs	r2, r2
 8011fb8:	b292      	uxth	r2, r2
 8011fba:	b211      	sxth	r1, r2
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	6838      	ldr	r0, [r7, #0]
 8011fc0:	4798      	blx	r3
            break;
 8011fc2:	e018      	b.n	8011ff6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	3354      	adds	r3, #84	; 0x54
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a0d      	ldr	r2, [pc, #52]	; (8012004 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011fce:	8812      	ldrh	r2, [r2, #0]
 8011fd0:	4252      	negs	r2, r2
 8011fd2:	b292      	uxth	r2, r2
 8011fd4:	b212      	sxth	r2, r2
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	6838      	ldr	r0, [r7, #0]
 8011fda:	4798      	blx	r3
            break;
 8011fdc:	e00b      	b.n	8011ff6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	3354      	adds	r3, #84	; 0x54
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4a07      	ldr	r2, [pc, #28]	; (8012004 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8011fe8:	8812      	ldrh	r2, [r2, #0]
 8011fea:	b212      	sxth	r2, r2
 8011fec:	2100      	movs	r1, #0
 8011fee:	6838      	ldr	r0, [r7, #0]
 8011ff0:	4798      	blx	r3
            break;
 8011ff2:	e000      	b.n	8011ff6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8011ff4:	bf00      	nop
    }
 8011ff6:	bf00      	nop
 8011ff8:	3708      	adds	r7, #8
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	2000bf0a 	.word	0x2000bf0a
 8012004:	2000bf0c 	.word	0x2000bf0c

08012008 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	68d2      	ldr	r2, [r2, #12]
 801201a:	1052      	asrs	r2, r2, #1
 801201c:	1898      	adds	r0, r3, r2
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	f003 0301 	and.w	r3, r3, #1
 8012026:	2b00      	cmp	r3, #0
 8012028:	d102      	bne.n	8012030 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	e00a      	b.n	8012046 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	68d2      	ldr	r2, [r2, #12]
 8012038:	1052      	asrs	r2, r2, #1
 801203a:	4413      	add	r3, r2
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	6892      	ldr	r2, [r2, #8]
 8012042:	4413      	add	r3, r2
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6839      	ldr	r1, [r7, #0]
 8012048:	4798      	blx	r3
    }
 801204a:	bf00      	nop
 801204c:	3708      	adds	r7, #8
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012052:	b480      	push	{r7}
 8012054:	b083      	sub	sp, #12
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d010      	beq.n	8012084 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d107      	bne.n	801207a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	f003 0301 	and.w	r3, r3, #1
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801207a:	2300      	movs	r3, #0
 801207c:	2b01      	cmp	r3, #1
 801207e:	d001      	beq.n	8012084 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012080:	2301      	movs	r3, #1
 8012082:	e000      	b.n	8012086 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012084:	2300      	movs	r3, #0
    }
 8012086:	4618      	mov	r0, r3
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr
	...

08012094 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
    }
 801209c:	4a0a      	ldr	r2, [pc, #40]	; (80120c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	601a      	str	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	333c      	adds	r3, #60	; 0x3c
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ff fc2c 	bl	8011904 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	330c      	adds	r3, #12
 80120b0:	4618      	mov	r0, r3
 80120b2:	f009 fe51 	bl	801bd58 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fe fcbd 	bl	8010a38 <_ZN8touchgfx10TransitionD1Ev>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}
 80120c8:	0802b598 	.word	0x0802b598

080120cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
    }
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff ffdd 	bl	8012094 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80120da:	2154      	movs	r1, #84	; 0x54
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f017 fc50 	bl	8029982 <_ZdlPvj>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	4618      	mov	r0, r3
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80120f4:	4b59      	ldr	r3, [pc, #356]	; (801225c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	f083 0301 	eor.w	r3, r3, #1
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d003      	beq.n	801210a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2201      	movs	r2, #1
 8012106:	721a      	strb	r2, [r3, #8]
            return;
 8012108:	e0a5      	b.n	8012256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	f7fe fcb3 	bl	8010a78 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012118:	3301      	adds	r3, #1
 801211a:	b2da      	uxtb	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801212e:	429a      	cmp	r2, r3
 8012130:	d82f      	bhi.n	8012192 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012138:	b298      	uxth	r0, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012146:	b29b      	uxth	r3, r3
 8012148:	2100      	movs	r1, #0
 801214a:	f00c fd3e 	bl	801ebca <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801214e:	4603      	mov	r3, r0
 8012150:	461a      	mov	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801215e:	b29b      	uxth	r3, r3
 8012160:	f003 0301 	and.w	r3, r3, #1
 8012164:	b29b      	uxth	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d01b      	beq.n	80121a2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012170:	b29b      	uxth	r3, r3
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8012178:	2a00      	cmp	r2, #0
 801217a:	dd01      	ble.n	8012180 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 801217c:	2201      	movs	r2, #1
 801217e:	e001      	b.n	8012184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8012180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012184:	4413      	add	r3, r2
 8012186:	b29b      	uxth	r3, r3
 8012188:	b21a      	sxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8012190:	e007      	b.n	80121a2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2201      	movs	r2, #1
 8012196:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80121a0:	e059      	b.n	8012256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d845      	bhi.n	8012238 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80121ac:	a201      	add	r2, pc, #4	; (adr r2, 80121b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80121ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b2:	bf00      	nop
 80121b4:	080121ff 	.word	0x080121ff
 80121b8:	080121ff 	.word	0x080121ff
 80121bc:	080121c5 	.word	0x080121c5
 80121c0:	080121c5 	.word	0x080121c5
            calculatedValue -= snapshot.getX();
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	330c      	adds	r3, #12
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fe fcda 	bl	8010b82 <_ZNK8touchgfx8Drawable4getXEv>
 80121ce:	4603      	mov	r3, r0
 80121d0:	4619      	mov	r1, r3
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80121d8:	b29a      	uxth	r2, r3
 80121da:	b28b      	uxth	r3, r1
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	b29b      	uxth	r3, r3
 80121e0:	b21a      	sxth	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f103 000c 	add.w	r0, r3, #12
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80121f4:	2200      	movs	r2, #0
 80121f6:	4619      	mov	r1, r3
 80121f8:	f00c f81e 	bl	801e238 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80121fc:	e020      	b.n	8012240 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	330c      	adds	r3, #12
 8012202:	4618      	mov	r0, r3
 8012204:	f7fe fcca 	bl	8010b9c <_ZNK8touchgfx8Drawable4getYEv>
 8012208:	4603      	mov	r3, r0
 801220a:	4619      	mov	r1, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012212:	b29a      	uxth	r2, r3
 8012214:	b28b      	uxth	r3, r1
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	b29b      	uxth	r3, r3
 801221a:	b21a      	sxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f103 000c 	add.w	r0, r3, #12
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801222e:	461a      	mov	r2, r3
 8012230:	2100      	movs	r1, #0
 8012232:	f00c f801 	bl	801e238 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012236:	e003      	b.n	8012240 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2201      	movs	r2, #1
 801223c:	721a      	strb	r2, [r3, #8]
            break;
 801223e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6858      	ldr	r0, [r3, #4]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	3378      	adds	r3, #120	; 0x78
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	687a      	ldr	r2, [r7, #4]
 8012250:	323c      	adds	r2, #60	; 0x3c
 8012252:	4611      	mov	r1, r2
 8012254:	4798      	blx	r3
    }
 8012256:	3708      	adds	r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	2000bf15 	.word	0x2000bf15

08012260 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8012268:	4b0b      	ldr	r3, [pc, #44]	; (8012298 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d00e      	beq.n	801228e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	685b      	ldr	r3, [r3, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00a      	beq.n	801228e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6858      	ldr	r0, [r3, #4]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	3364      	adds	r3, #100	; 0x64
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	320c      	adds	r2, #12
 801228a:	4611      	mov	r1, r2
 801228c:	4798      	blx	r3
    }
 801228e:	bf00      	nop
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	2000bf15 	.word	0x2000bf15

0801229c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80122a4:	4b1a      	ldr	r3, [pc, #104]	; (8012310 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d02d      	beq.n	8012308 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fe fbf6 	bl	8010aa0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80122b4:	4a17      	ldr	r2, [pc, #92]	; (8012314 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80122b6:	f107 0318 	add.w	r3, r7, #24
 80122ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122be:	e883 0003 	stmia.w	r3, {r0, r1}
 80122c2:	f107 0008 	add.w	r0, r7, #8
 80122c6:	f107 0318 	add.w	r3, r7, #24
 80122ca:	cb0c      	ldmia	r3, {r2, r3}
 80122cc:	6879      	ldr	r1, [r7, #4]
 80122ce:	f7ff fcc7 	bl	8011c60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3378      	adds	r3, #120	; 0x78
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f107 0108 	add.w	r1, r7, #8
 80122e4:	4610      	mov	r0, r2
 80122e6:	4798      	blx	r3
            screenContainer->add(snapshot);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6858      	ldr	r0, [r3, #4]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	3360      	adds	r3, #96	; 0x60
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	320c      	adds	r2, #12
 80122fa:	4611      	mov	r1, r2
 80122fc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80122fe:	f107 0308 	add.w	r3, r7, #8
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fafe 	bl	8011904 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8012308:	bf00      	nop
 801230a:	3720      	adds	r7, #32
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	2000bf15 	.word	0x2000bf15
 8012314:	0802ad98 	.word	0x0802ad98

08012318 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
        switch (direction)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012328:	2b03      	cmp	r3, #3
 801232a:	d83b      	bhi.n	80123a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801232c:	a201      	add	r2, pc, #4	; (adr r2, 8012334 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012332:	bf00      	nop
 8012334:	08012375 	.word	0x08012375
 8012338:	0801238f 	.word	0x0801238f
 801233c:	08012345 	.word	0x08012345
 8012340:	0801235b 	.word	0x0801235b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	3354      	adds	r3, #84	; 0x54
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4a18      	ldr	r2, [pc, #96]	; (80123b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801234e:	8812      	ldrh	r2, [r2, #0]
 8012350:	b211      	sxth	r1, r2
 8012352:	2200      	movs	r2, #0
 8012354:	6838      	ldr	r0, [r7, #0]
 8012356:	4798      	blx	r3
            break;
 8012358:	e025      	b.n	80123a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	3354      	adds	r3, #84	; 0x54
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a13      	ldr	r2, [pc, #76]	; (80123b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8012364:	8812      	ldrh	r2, [r2, #0]
 8012366:	4252      	negs	r2, r2
 8012368:	b292      	uxth	r2, r2
 801236a:	b211      	sxth	r1, r2
 801236c:	2200      	movs	r2, #0
 801236e:	6838      	ldr	r0, [r7, #0]
 8012370:	4798      	blx	r3
            break;
 8012372:	e018      	b.n	80123a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	3354      	adds	r3, #84	; 0x54
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a0d      	ldr	r2, [pc, #52]	; (80123b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801237e:	8812      	ldrh	r2, [r2, #0]
 8012380:	4252      	negs	r2, r2
 8012382:	b292      	uxth	r2, r2
 8012384:	b212      	sxth	r2, r2
 8012386:	2100      	movs	r1, #0
 8012388:	6838      	ldr	r0, [r7, #0]
 801238a:	4798      	blx	r3
            break;
 801238c:	e00b      	b.n	80123a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	3354      	adds	r3, #84	; 0x54
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4a07      	ldr	r2, [pc, #28]	; (80123b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8012398:	8812      	ldrh	r2, [r2, #0]
 801239a:	b212      	sxth	r2, r2
 801239c:	2100      	movs	r1, #0
 801239e:	6838      	ldr	r0, [r7, #0]
 80123a0:	4798      	blx	r3
            break;
 80123a2:	e000      	b.n	80123a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80123a4:	bf00      	nop
    }
 80123a6:	bf00      	nop
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	2000bf0a 	.word	0x2000bf0a
 80123b4:	2000bf0c 	.word	0x2000bf0c

080123b8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	68d2      	ldr	r2, [r2, #12]
 80123ca:	1052      	asrs	r2, r2, #1
 80123cc:	1898      	adds	r0, r3, r2
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	f003 0301 	and.w	r3, r3, #1
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d102      	bne.n	80123e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	e00a      	b.n	80123f6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	68d2      	ldr	r2, [r2, #12]
 80123e8:	1052      	asrs	r2, r2, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	6892      	ldr	r2, [r2, #8]
 80123f2:	4413      	add	r3, r2
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	6839      	ldr	r1, [r7, #0]
 80123f8:	4798      	blx	r3
    }
 80123fa:	bf00      	nop
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012402:	b480      	push	{r7}
 8012404:	b083      	sub	sp, #12
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d010      	beq.n	8012434 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d107      	bne.n	801242a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	f003 0301 	and.w	r3, r3, #1
 8012422:	2b00      	cmp	r3, #0
 8012424:	d101      	bne.n	801242a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012426:	2301      	movs	r3, #1
 8012428:	e000      	b.n	801242c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801242a:	2300      	movs	r3, #0
 801242c:	2b01      	cmp	r3, #1
 801242e:	d001      	beq.n	8012434 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012430:	2301      	movs	r3, #1
 8012432:	e000      	b.n	8012436 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012434:	2300      	movs	r3, #0
    }
 8012436:	4618      	mov	r0, r3
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr

08012442 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8012442:	b580      	push	{r7, lr}
 8012444:	b082      	sub	sp, #8
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	68d2      	ldr	r2, [r2, #12]
 8012452:	1052      	asrs	r2, r2, #1
 8012454:	1899      	adds	r1, r3, r2
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	f003 0301 	and.w	r3, r3, #1
 801245e:	2b00      	cmp	r3, #0
 8012460:	d102      	bne.n	8012468 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	e00a      	b.n	801247e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	68d2      	ldr	r2, [r2, #12]
 8012470:	1052      	asrs	r2, r2, #1
 8012472:	4413      	add	r3, r2
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	6892      	ldr	r2, [r2, #8]
 801247a:	4413      	add	r3, r2
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	4608      	mov	r0, r1
 8012480:	4798      	blx	r3
    }
 8012482:	bf00      	nop
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801248a:	b480      	push	{r7}
 801248c:	b083      	sub	sp, #12
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d010      	beq.n	80124bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d107      	bne.n	80124b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	f003 0301 	and.w	r3, r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d101      	bne.n	80124b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80124ae:	2301      	movs	r3, #1
 80124b0:	e000      	b.n	80124b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80124b2:	2300      	movs	r3, #0
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d001      	beq.n	80124bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80124b8:	2301      	movs	r3, #1
 80124ba:	e000      	b.n	80124be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80124bc:	2300      	movs	r3, #0
    }
 80124be:	4618      	mov	r0, r3
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 80124ca:	b480      	push	{r7}
 80124cc:	b083      	sub	sp, #12
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	4618      	mov	r0, r3
 80124dc:	370c      	adds	r7, #12
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr

080124e6 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80124e6:	b480      	push	{r7}
 80124e8:	b083      	sub	sp, #12
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	683a      	ldr	r2, [r7, #0]
 80124f4:	601a      	str	r2, [r3, #0]
    }
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	80da      	strh	r2, [r3, #6]
    }
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	370c      	adds	r7, #12
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr

08012532 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012532:	b480      	push	{r7}
 8012534:	b085      	sub	sp, #20
 8012536:	af00      	add	r7, sp, #0
 8012538:	60f8      	str	r0, [r7, #12]
 801253a:	4608      	mov	r0, r1
 801253c:	4611      	mov	r1, r2
 801253e:	461a      	mov	r2, r3
 8012540:	4603      	mov	r3, r0
 8012542:	817b      	strh	r3, [r7, #10]
 8012544:	460b      	mov	r3, r1
 8012546:	813b      	strh	r3, [r7, #8]
 8012548:	4613      	mov	r3, r2
 801254a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	897a      	ldrh	r2, [r7, #10]
 8012550:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	893a      	ldrh	r2, [r7, #8]
 8012556:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	88fa      	ldrh	r2, [r7, #6]
 801255c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	8b3a      	ldrh	r2, [r7, #24]
 8012562:	80da      	strh	r2, [r3, #6]
    }
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	4618      	mov	r0, r3
 8012568:	3714      	adds	r7, #20
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr

08012572 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8012572:	b480      	push	{r7}
 8012574:	b083      	sub	sp, #12
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
    {
        return _type;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	791b      	ldrb	r3, [r3, #4]
    }
 801257e:	4618      	mov	r0, r3
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr

0801258a <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 801258a:	b480      	push	{r7}
 801258c:	b083      	sub	sp, #12
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
 8012592:	460b      	mov	r3, r1
 8012594:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	887a      	ldrh	r2, [r7, #2]
 801259a:	801a      	strh	r2, [r3, #0]
    {
    }
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr
	...

080125ac <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af02      	add	r7, sp, #8
 80125b2:	6078      	str	r0, [r7, #4]
        visible(true)
 80125b4:	4a13      	ldr	r2, [pc, #76]	; (8012604 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	1d18      	adds	r0, r3, #4
 80125be:	2300      	movs	r3, #0
 80125c0:	9300      	str	r3, [sp, #0]
 80125c2:	2300      	movs	r3, #0
 80125c4:	2200      	movs	r2, #0
 80125c6:	2100      	movs	r1, #0
 80125c8:	f7ff ffb3 	bl	8012532 <_ZN8touchgfx4RectC1Essss>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	330c      	adds	r3, #12
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7ff ff97 	bl	8012504 <_ZN8touchgfx4RectC1Ev>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2200      	movs	r2, #0
 80125da:	615a      	str	r2, [r3, #20]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2200      	movs	r2, #0
 80125e0:	619a      	str	r2, [r3, #24]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	61da      	str	r2, [r3, #28]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2201      	movs	r2, #1
 80125f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4618      	mov	r0, r3
 80125fc:	3708      	adds	r7, #8
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	0802e0b8 	.word	0x0802e0b8

08012608 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	4a04      	ldr	r2, [pc, #16]	; (8012624 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	601a      	str	r2, [r3, #0]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	4618      	mov	r0, r3
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr
 8012624:	0802e0b8 	.word	0x0802e0b8

08012628 <_ZN8touchgfx8DrawableD0Ev>:
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff ffe9 	bl	8012608 <_ZN8touchgfx8DrawableD1Ev>
 8012636:	2128      	movs	r1, #40	; 0x28
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f017 f9a2 	bl	8029982 <_ZdlPvj>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	4618      	mov	r0, r3
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	460b      	mov	r3, r1
 8012652:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	887a      	ldrh	r2, [r7, #2]
 8012658:	809a      	strh	r2, [r3, #4]
    }
 801265a:	bf00      	nop
 801265c:	370c      	adds	r7, #12
 801265e:	46bd      	mov	sp, r7
 8012660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012664:	4770      	bx	lr

08012666 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8012666:	b480      	push	{r7}
 8012668:	b083      	sub	sp, #12
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
 801266e:	460b      	mov	r3, r1
 8012670:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	887a      	ldrh	r2, [r7, #2]
 8012676:	80da      	strh	r2, [r3, #6]
    }
 8012678:	bf00      	nop
 801267a:	370c      	adds	r7, #12
 801267c:	46bd      	mov	sp, r7
 801267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012682:	4770      	bx	lr

08012684 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	460b      	mov	r3, r1
 801268e:	807b      	strh	r3, [r7, #2]
 8012690:	4613      	mov	r3, r2
 8012692:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	332c      	adds	r3, #44	; 0x2c
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80126a0:	4611      	mov	r1, r2
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	4798      	blx	r3
        setY(y);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	3330      	adds	r3, #48	; 0x30
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80126b2:	4611      	mov	r1, r2
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	4798      	blx	r3
    }
 80126b8:	bf00      	nop
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	460b      	mov	r3, r1
 80126ca:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	887a      	ldrh	r2, [r7, #2]
 80126d0:	811a      	strh	r2, [r3, #8]
    }
 80126d2:	bf00      	nop
 80126d4:	370c      	adds	r7, #12
 80126d6:	46bd      	mov	sp, r7
 80126d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126dc:	4770      	bx	lr

080126de <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80126de:	b480      	push	{r7}
 80126e0:	b083      	sub	sp, #12
 80126e2:	af00      	add	r7, sp, #0
 80126e4:	6078      	str	r0, [r7, #4]
 80126e6:	460b      	mov	r3, r1
 80126e8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	887a      	ldrh	r2, [r7, #2]
 80126ee:	815a      	strh	r2, [r3, #10]
    }
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	bf00      	nop
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
 801271a:	bf00      	nop
 801271c:	370c      	adds	r7, #12
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr

08012726 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8012726:	b480      	push	{r7}
 8012728:	b083      	sub	sp, #12
 801272a:	af00      	add	r7, sp, #0
 801272c:	6078      	str	r0, [r7, #4]
 801272e:	6039      	str	r1, [r7, #0]
 8012730:	bf00      	nop
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr

0801273c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
 8012746:	bf00      	nop
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr

08012752 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
 801275a:	bf00      	nop
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
 801276e:	460b      	mov	r3, r1
 8012770:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	78fa      	ldrb	r2, [r7, #3]
 8012776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801277a:	bf00      	nop
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012786:	b480      	push	{r7}
 8012788:	b083      	sub	sp, #12
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
 801278e:	460b      	mov	r3, r1
 8012790:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	78fa      	ldrb	r2, [r7, #3]
 8012796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801279a:	bf00      	nop
 801279c:	370c      	adds	r7, #12
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80127a6:	b480      	push	{r7}
 80127a8:	b083      	sub	sp, #12
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80127b4:	4618      	mov	r0, r3
 80127b6:	370c      	adds	r7, #12
 80127b8:	46bd      	mov	sp, r7
 80127ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127be:	4770      	bx	lr

080127c0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80127ce:	4618      	mov	r0, r3
 80127d0:	370c      	adds	r7, #12
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80127da:	b580      	push	{r7, lr}
 80127dc:	b082      	sub	sp, #8
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	460b      	mov	r3, r1
 80127e4:	807b      	strh	r3, [r7, #2]
 80127e6:	4613      	mov	r3, r2
 80127e8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	3354      	adds	r3, #84	; 0x54
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	8879      	ldrh	r1, [r7, #2]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80127fa:	b292      	uxth	r2, r2
 80127fc:	1a8a      	subs	r2, r1, r2
 80127fe:	b292      	uxth	r2, r2
 8012800:	b210      	sxth	r0, r2
 8012802:	8839      	ldrh	r1, [r7, #0]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801280a:	b292      	uxth	r2, r2
 801280c:	1a8a      	subs	r2, r1, r2
 801280e:	b292      	uxth	r2, r2
 8012810:	b212      	sxth	r2, r2
 8012812:	4601      	mov	r1, r0
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	4798      	blx	r3
    }
 8012818:	bf00      	nop
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012820:	b480      	push	{r7}
 8012822:	b083      	sub	sp, #12
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801282e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012836:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801283e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012840:	bf00      	nop
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f7ff ffe1 	bl	8012820 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	601a      	str	r2, [r3, #0]
    }
 801286c:	bf00      	nop
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
        firstChild(0)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff fe94 	bl	80125ac <_ZN8touchgfx8DrawableC1Ev>
 8012884:	4a05      	ldr	r2, [pc, #20]	; (801289c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	0802cc9c 	.word	0x0802cc9c

080128a0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	4a05      	ldr	r2, [pc, #20]	; (80128c0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ff fea9 	bl	8012608 <_ZN8touchgfx8DrawableD1Ev>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4618      	mov	r0, r3
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	0802cc9c 	.word	0x0802cc9c

080128c4 <_ZN8touchgfx9ContainerD0Ev>:
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff ffe7 	bl	80128a0 <_ZN8touchgfx9ContainerD1Ev>
 80128d2:	212c      	movs	r1, #44	; 0x2c
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f017 f854 	bl	8029982 <_ZdlPvj>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4618      	mov	r0, r3
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}

080128e4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	4a06      	ldr	r2, [pc, #24]	; (8012908 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	601a      	str	r2, [r3, #0]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3304      	adds	r3, #4
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7ff ffd2 	bl	80128a0 <_ZN8touchgfx9ContainerD1Ev>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	4618      	mov	r0, r3
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}
 8012906:	bf00      	nop
 8012908:	0802e1b0 	.word	0x0802e1b0

0801290c <_ZN8touchgfx6ScreenD0Ev>:
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ff ffe5 	bl	80128e4 <_ZN8touchgfx6ScreenD1Ev>
 801291a:	213c      	movs	r1, #60	; 0x3c
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f017 f830 	bl	8029982 <_ZdlPvj>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	bf00      	nop
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8012940:	b480      	push	{r7}
 8012942:	b083      	sub	sp, #12
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	bf00      	nop
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
 801295c:	bf00      	nop
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
    {
    }
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr

0801297c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	460b      	mov	r3, r1
 8012986:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012988:	bf00      	nop
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3304      	adds	r3, #4
 80129a2:	6839      	ldr	r1, [r7, #0]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f007 fc69 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80129aa:	bf00      	nop
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b082      	sub	sp, #8
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff fdf4 	bl	80125ac <_ZN8touchgfx8DrawableC1Ev>
 80129c4:	4a03      	ldr	r2, [pc, #12]	; (80129d4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	601a      	str	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4618      	mov	r0, r3
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	0802bd18 	.word	0x0802bd18

080129d8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	4a05      	ldr	r2, [pc, #20]	; (80129f8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	601a      	str	r2, [r3, #0]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7ff fe0d 	bl	8012608 <_ZN8touchgfx8DrawableD1Ev>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4618      	mov	r0, r3
 80129f2:	3708      	adds	r7, #8
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	0802bd18 	.word	0x0802bd18

080129fc <_ZN8touchgfx6WidgetD0Ev>:
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7ff ffe7 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 8012a0a:	2128      	movs	r1, #40	; 0x28
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f016 ffb8 	bl	8029982 <_ZdlPvj>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	607b      	str	r3, [r7, #4]
 8012a26:	460b      	mov	r3, r1
 8012a28:	817b      	strh	r3, [r7, #10]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7ff feb8 	bl	80127a6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d008      	beq.n	8012a4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ff febe 	bl	80127c0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d001      	beq.n	8012a4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	e000      	b.n	8012a50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012a4e:	2300      	movs	r3, #0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	601a      	str	r2, [r3, #0]
        }
    }
 8012a5a:	bf00      	nop
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
	...

08012a64 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff ffa0 	bl	80129b4 <_ZN8touchgfx6WidgetC1Ev>
 8012a74:	4a0a      	ldr	r2, [pc, #40]	; (8012aa0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	22ff      	movs	r2, #255	; 0xff
 8012a7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3328      	adds	r3, #40	; 0x28
 8012a86:	2100      	movs	r1, #0
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7ff fd2c 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	0802dab0 	.word	0x0802dab0

08012aa4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	4a05      	ldr	r2, [pc, #20]	; (8012ac4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	601a      	str	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff ff8f 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	0802dab0 	.word	0x0802dab0

08012ac8 <_ZN8touchgfx3BoxD0Ev>:
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7ff ffe7 	bl	8012aa4 <_ZN8touchgfx3BoxD1Ev>
 8012ad6:	2130      	movs	r1, #48	; 0x30
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f016 ff52 	bl	8029982 <_ZdlPvj>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012ae8:	b480      	push	{r7}
 8012aea:	b083      	sub	sp, #12
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	683a      	ldr	r2, [r7, #0]
 8012af6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	807b      	strh	r3, [r7, #2]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	887a      	ldrh	r2, [r7, #2]
 8012b14:	801a      	strh	r2, [r3, #0]
    }
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	370c      	adds	r7, #12
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
        assertValid();
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f7fd fc5b 	bl	80103e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012b32:	4b06      	ldr	r3, [pc, #24]	; (8012b4c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	881b      	ldrh	r3, [r3, #0]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	4610      	mov	r0, r2
 8012b3e:	f003 fb25 	bl	801618c <_ZNK8touchgfx5Texts7getTextEt>
 8012b42:	4603      	mov	r3, r0
    }
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	2000bfb4 	.word	0x2000bfb4

08012b50 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7ff ff2a 	bl	80129b4 <_ZN8touchgfx6WidgetC1Ev>
 8012b60:	4a13      	ldr	r2, [pc, #76]	; (8012bb0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	601a      	str	r2, [r3, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	3326      	adds	r3, #38	; 0x26
 8012b6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff ffc8 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	3328      	adds	r3, #40	; 0x28
 8012b78:	2100      	movs	r1, #0
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff fcb3 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	22ff      	movs	r2, #255	; 0xff
 8012b8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	0802da34 	.word	0x0802da34

08012bb4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af02      	add	r7, sp, #8
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f7ff fcb2 	bl	8012532 <_ZN8touchgfx4RectC1Essss>
    }
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012bd6:	b480      	push	{r7}
 8012bd8:	b083      	sub	sp, #12
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012be6:	bf00      	nop
 8012be8:	370c      	adds	r7, #12
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr

08012bf2 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bf4:	b085      	sub	sp, #20
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8012bfe:	687e      	ldr	r6, [r7, #4]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	3330      	adds	r3, #48	; 0x30
 8012c06:	681c      	ldr	r4, [r3, #0]
 8012c08:	887d      	ldrh	r5, [r7, #2]
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 f845 	bl	8012c9a <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012c10:	4603      	mov	r3, r0
 8012c12:	81bb      	strh	r3, [r7, #12]
 8012c14:	f107 030c 	add.w	r3, r7, #12
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fd fbb1 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	6813      	ldr	r3, [r2, #0]
 8012c22:	332c      	adds	r3, #44	; 0x2c
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	4610      	mov	r0, r2
 8012c28:	4798      	blx	r3
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	1aeb      	subs	r3, r5, r3
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	b21b      	sxth	r3, r3
 8012c32:	4619      	mov	r1, r3
 8012c34:	4630      	mov	r0, r6
 8012c36:	47a0      	blx	r4
    }
 8012c38:	bf00      	nop
 8012c3a:	3714      	adds	r7, #20
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c40 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	332c      	adds	r3, #44	; 0x2c
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012c5e:	4610      	mov	r0, r2
 8012c60:	4798      	blx	r3
        setBaselineY(baselineY);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	3360      	adds	r3, #96	; 0x60
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012c6e:	4611      	mov	r1, r2
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	4798      	blx	r3
    }
 8012c74:	bf00      	nop
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	460b      	mov	r3, r1
 8012c86:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	887a      	ldrh	r2, [r7, #2]
 8012c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8012c8e:	bf00      	nop
 8012c90:	370c      	adds	r7, #12
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8012c9a:	b480      	push	{r7}
 8012c9c:	b083      	sub	sp, #12
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	370c      	adds	r7, #12
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr
	...

08012cb4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	4a05      	ldr	r2, [pc, #20]	; (8012cd4 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	601a      	str	r2, [r3, #0]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff fe87 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	0802da34 	.word	0x0802da34

08012cd8 <_ZN8touchgfx8TextAreaD0Ev>:
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f7ff ffe7 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 8012ce6:	2134      	movs	r1, #52	; 0x34
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f016 fe4a 	bl	8029982 <_ZdlPvj>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff ff24 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8012d08:	4a03      	ldr	r2, [pc, #12]	; (8012d18 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	601a      	str	r2, [r3, #0]
    {
    }
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	0802bc9c 	.word	0x0802bc9c

08012d1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	4a05      	ldr	r2, [pc, #20]	; (8012d3c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7ff ffc1 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	0802bc9c 	.word	0x0802bc9c

08012d40 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7ff ffe7 	bl	8012d1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012d4e:	2134      	movs	r1, #52	; 0x34
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f016 fe16 	bl	8029982 <_ZdlPvj>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}

08012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff ffc4 	bl	8012cf8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012d70:	4a05      	ldr	r2, [pc, #20]	; (8012d88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	601a      	str	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	0802dc40 	.word	0x0802dc40

08012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	683a      	ldr	r2, [r7, #0]
 8012d9a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fdfd 	bl	80129b4 <_ZN8touchgfx6WidgetC1Ev>
 8012dba:	4a0b      	ldr	r2, [pc, #44]	; (8012de8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	601a      	str	r2, [r3, #0]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	3326      	adds	r3, #38	; 0x26
 8012dc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7ff fbde 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	22ff      	movs	r2, #255	; 0xff
 8012dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8012dd6:	6839      	ldr	r1, [r7, #0]
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f009 fd21 	bl	801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	4618      	mov	r0, r3
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	0802dd24 	.word	0x0802dd24

08012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8012dec:	b480      	push	{r7}
 8012dee:	b083      	sub	sp, #12
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	601a      	str	r2, [r3, #0]
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e08:	4770      	bx	lr

08012e0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8012e0a:	b480      	push	{r7}
 8012e0c:	b083      	sub	sp, #12
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
        {
            return v;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
        }
 8012e16:	4618      	mov	r0, r3
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8012e22:	b590      	push	{r4, r7, lr}
 8012e24:	b083      	sub	sp, #12
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3340      	adds	r3, #64	; 0x40
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ffea 	bl	8012e0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012e36:	4604      	mov	r4, r0
 8012e38:	463b      	mov	r3, r7
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7ff ffe5 	bl	8012e0a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8012e40:	4603      	mov	r3, r0
 8012e42:	429c      	cmp	r4, r3
 8012e44:	bf0c      	ite	eq
 8012e46:	2301      	moveq	r3, #1
 8012e48:	2300      	movne	r3, #0
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d106      	bne.n	8012e5e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	683a      	ldr	r2, [r7, #0]
 8012e54:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f008 fd78 	bl	801b94c <_ZN8touchgfx4Line17updateCachedShapeEv>
 8012e5c:	e000      	b.n	8012e60 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 8012e5e:	bf00      	nop
    }
 8012e60:	370c      	adds	r7, #12
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd90      	pop	{r4, r7, pc}
	...

08012e68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	4a05      	ldr	r2, [pc, #20]	; (8012e88 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f008 fb7b 	bl	801b574 <_ZN8touchgfx15AbstractPainterD1Ev>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	0802d4ac 	.word	0x0802d4ac

08012e8c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff ffe7 	bl	8012e68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8012e9a:	2114      	movs	r1, #20
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f016 fd70 	bl	8029982 <_ZdlPvj>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	4a05      	ldr	r2, [pc, #20]	; (8012ecc <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7ff fd8b 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	0802dd24 	.word	0x0802dd24

08012ed0 <_ZN8touchgfx5ImageD0Ev>:
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7ff ffe7 	bl	8012eac <_ZN8touchgfx5ImageD1Ev>
 8012ede:	212c      	movs	r1, #44	; 0x2c
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f016 fd4e 	bl	8029982 <_ZdlPvj>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}

08012ef0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b082      	sub	sp, #8
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7ff fcba 	bl	8012874 <_ZN8touchgfx9ContainerC1Ev>
 8012f00:	4a0b      	ldr	r2, [pc, #44]	; (8012f30 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	601a      	str	r2, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	22ff      	movs	r2, #255	; 0xff
 8012f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2101      	movs	r1, #1
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff fc30 	bl	8012786 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	0802bc08 	.word	0x0802bc08

08012f34 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	4a05      	ldr	r2, [pc, #20]	; (8012f54 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	601a      	str	r2, [r3, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff fcab 	bl	80128a0 <_ZN8touchgfx9ContainerD1Ev>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	0802bc08 	.word	0x0802bc08

08012f58 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff ffe7 	bl	8012f34 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8012f66:	2134      	movs	r1, #52	; 0x34
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f016 fd0a 	bl	8029982 <_ZdlPvj>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	4618      	mov	r0, r3
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	78fa      	ldrb	r2, [r7, #3]
 8012f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	3384      	adds	r3, #132	; 0x84
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	4798      	blx	r3
    }
 8012f98:	bf00      	nop
 8012f9a:	3708      	adds	r7, #8
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8012fae:	4618      	mov	r0, r3
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b082      	sub	sp, #8
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	78fa      	ldrb	r2, [r7, #3]
 8012fca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	3388      	adds	r3, #136	; 0x88
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	4798      	blx	r3
    }
 8012fda:	bf00      	nop
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 8012fe2:	b480      	push	{r7}
 8012fe4:	b083      	sub	sp, #12
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801300c:	bf00      	nop
 801300e:	370c      	adds	r7, #12
 8013010:	46bd      	mov	sp, r7
 8013012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013016:	4770      	bx	lr

08013018 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8013018:	b480      	push	{r7}
 801301a:	b083      	sub	sp, #12
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
 8013020:	bf00      	nop
 8013022:	370c      	adds	r7, #12
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr

0801302c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
 8013034:	bf00      	nop
 8013036:	370c      	adds	r7, #12
 8013038:	46bd      	mov	sp, r7
 801303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303e:	4770      	bx	lr

08013040 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	4618      	mov	r0, r3
 801304c:	f7ff ff50 	bl	8012ef0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8013050:	4a03      	ldr	r2, [pc, #12]	; (8013060 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	601a      	str	r2, [r3, #0]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	0802bb5c 	.word	0x0802bb5c

08013064 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	4a05      	ldr	r2, [pc, #20]	; (8013084 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	601a      	str	r2, [r3, #0]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4618      	mov	r0, r3
 8013076:	f7ff ff5d 	bl	8012f34 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	4618      	mov	r0, r3
 801307e:	3708      	adds	r7, #8
 8013080:	46bd      	mov	sp, r7
 8013082:	bd80      	pop	{r7, pc}
 8013084:	0802bb5c 	.word	0x0802bb5c

08013088 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff ffe7 	bl	8013064 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8013096:	2134      	movs	r1, #52	; 0x34
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f016 fc72 	bl	8029982 <_ZdlPvj>
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4618      	mov	r0, r3
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff ff73 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80130ba:	4603      	mov	r3, r0
 80130bc:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80130be:	6838      	ldr	r0, [r7, #0]
 80130c0:	f7ff fa57 	bl	8012572 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	bf0c      	ite	eq
 80130ca:	2301      	moveq	r3, #1
 80130cc:	2300      	movne	r3, #0
 80130ce:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80130d0:	7bbb      	ldrb	r3, [r7, #14]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d005      	beq.n	80130e2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80130d6:	7bfb      	ldrb	r3, [r7, #15]
 80130d8:	f083 0301 	eor.w	r3, r3, #1
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d108      	bne.n	80130f4 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80130e2:	7bbb      	ldrb	r3, [r7, #14]
 80130e4:	f083 0301 	eor.w	r3, r3, #1
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00f      	beq.n	801310e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80130ee:	7bfb      	ldrb	r3, [r7, #15]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d00c      	beq.n	801310e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	7bba      	ldrb	r2, [r7, #14]
 80130f8:	4611      	mov	r1, r2
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7ff ff3c 	bl	8012f78 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	3314      	adds	r3, #20
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4610      	mov	r0, r2
 801310c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 801310e:	7bbb      	ldrb	r3, [r7, #14]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d019      	beq.n	8013148 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013118:	2b00      	cmp	r3, #0
 801311a:	d015      	beq.n	8013148 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	330c      	adds	r3, #12
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4610      	mov	r0, r2
 801312c:	4798      	blx	r3
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d009      	beq.n	8013148 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	3308      	adds	r3, #8
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	6879      	ldr	r1, [r7, #4]
 8013144:	4610      	mov	r0, r2
 8013146:	4798      	blx	r3
            }
        }
    }
 8013148:	bf00      	nop
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff fc2a 	bl	80129b4 <_ZN8touchgfx6WidgetC1Ev>
 8013160:	4a0d      	ldr	r2, [pc, #52]	; (8013198 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	22ff      	movs	r2, #255	; 0xff
 801316a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3328      	adds	r3, #40	; 0x28
 8013172:	2100      	movs	r1, #0
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff f9b6 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	332c      	adds	r3, #44	; 0x2c
 801317e:	2100      	movs	r1, #0
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff f9b0 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2200      	movs	r2, #0
 801318a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	4618      	mov	r0, r3
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	0802dcbc 	.word	0x0802dcbc

0801319c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	4a05      	ldr	r2, [pc, #20]	; (80131bc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	601a      	str	r2, [r3, #0]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff fc13 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	4618      	mov	r0, r3
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	0802dcbc 	.word	0x0802dcbc

080131c0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f7ff ffe7 	bl	801319c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80131ce:	2134      	movs	r1, #52	; 0x34
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f016 fbd6 	bl	8029982 <_ZdlPvj>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	4618      	mov	r0, r3
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	683a      	ldr	r2, [r7, #0]
 80131ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80131f0:	bf00      	nop
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr

08013218 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	460b      	mov	r3, r1
 8013222:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	78fa      	ldrb	r2, [r7, #3]
 8013228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801322c:	bf00      	nop
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	460b      	mov	r3, r1
 8013242:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	78fa      	ldrb	r2, [r7, #3]
 8013248:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801324c:	bf00      	nop
 801324e:	370c      	adds	r7, #12
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr

08013258 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	4a05      	ldr	r2, [pc, #20]	; (8013278 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	601a      	str	r2, [r3, #0]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	f7ff fb3b 	bl	80128e4 <_ZN8touchgfx6ScreenD1Ev>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4618      	mov	r0, r3
 8013272:	3708      	adds	r7, #8
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	0802bb28 	.word	0x0802bb28

0801327c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f7ff ffe7 	bl	8013258 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801328a:	2140      	movs	r1, #64	; 0x40
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f016 fb78 	bl	8029982 <_ZdlPvj>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	4618      	mov	r0, r3
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	4a8a      	ldr	r2, [pc, #552]	; (80134d0 <_ZN12MainViewBaseD1Ev+0x234>)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	601a      	str	r2, [r3, #0]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 80132b0:	4618      	mov	r0, r3
 80132b2:	f001 ff97 	bl	80151e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 fde5 	bl	8014e8c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80132c8:	4618      	mov	r0, r3
 80132ca:	f001 ffad 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7ff fced 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80132e0:	4618      	mov	r0, r3
 80132e2:	f001 ffa1 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff fce1 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80132f8:	4618      	mov	r0, r3
 80132fa:	f001 ff95 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013304:	4618      	mov	r0, r3
 8013306:	f001 ff8f 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013310:	4618      	mov	r0, r3
 8013312:	f001 ff89 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801331c:	4618      	mov	r0, r3
 801331e:	f7ff fcc9 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013328:	4618      	mov	r0, r3
 801332a:	f001 ff7d 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013334:	4618      	mov	r0, r3
 8013336:	f006 fca5 	bl	8019c84 <_ZN8touchgfx13ImageProgressD1Ev>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013340:	4618      	mov	r0, r3
 8013342:	f001 ff71 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801334c:	4618      	mov	r0, r3
 801334e:	f001 ffaf 	bl	80152b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013358:	4618      	mov	r0, r3
 801335a:	f001 ff87 	bl	801526c <_ZN8touchgfx4LineD1Ev>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8013364:	4618      	mov	r0, r3
 8013366:	f001 ffa3 	bl	80152b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013370:	4618      	mov	r0, r3
 8013372:	f001 ff7b 	bl	801526c <_ZN8touchgfx4LineD1Ev>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801337c:	4618      	mov	r0, r3
 801337e:	f006 fb81 	bl	8019a84 <_ZN8touchgfx11BoxProgressD1Ev>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013388:	4618      	mov	r0, r3
 801338a:	f7ff fc93 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013394:	4618      	mov	r0, r3
 8013396:	f001 ff47 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80133a0:	4618      	mov	r0, r3
 80133a2:	f001 ff41 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff fc81 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ff fc7b 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80133c4:	4618      	mov	r0, r3
 80133c6:	f001 ff2f 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80133d0:	4618      	mov	r0, r3
 80133d2:	f001 ff29 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff fc69 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7ff fc63 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80133f4:	4618      	mov	r0, r3
 80133f6:	f001 ff5b 	bl	80152b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013400:	4618      	mov	r0, r3
 8013402:	f001 ff33 	bl	801526c <_ZN8touchgfx4LineD1Ev>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801340c:	4618      	mov	r0, r3
 801340e:	f001 ff0b 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013418:	4618      	mov	r0, r3
 801341a:	f001 ff05 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013424:	4618      	mov	r0, r3
 8013426:	f001 feff 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013430:	4618      	mov	r0, r3
 8013432:	f001 fef9 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801343c:	4618      	mov	r0, r3
 801343e:	f001 fef3 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013448:	4618      	mov	r0, r3
 801344a:	f001 feed 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013454:	4618      	mov	r0, r3
 8013456:	f001 fee7 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013460:	4618      	mov	r0, r3
 8013462:	f001 fee1 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff fd1d 	bl	8012eac <_ZN8touchgfx5ImageD1Ev>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013478:	4618      	mov	r0, r3
 801347a:	f001 fed5 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013484:	4618      	mov	r0, r3
 8013486:	f001 fecf 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff fc0f 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	33d8      	adds	r3, #216	; 0xd8
 801349a:	4618      	mov	r0, r3
 801349c:	f7ff fc0a 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	33a4      	adds	r3, #164	; 0xa4
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ff fc05 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	3370      	adds	r3, #112	; 0x70
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7ff fc00 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	3340      	adds	r3, #64	; 0x40
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7ff faf3 	bl	8012aa4 <_ZN8touchgfx3BoxD1Ev>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7ff fec9 	bl	8013258 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	0802ba48 	.word	0x0802ba48

080134d4 <_ZN12MainViewBaseD0Ev>:
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7ff fedd 	bl	801329c <_ZN12MainViewBaseD1Ev>
 80134e2:	f642 0144 	movw	r1, #10308	; 0x2844
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f016 fa4b 	bl	8029982 <_ZdlPvj>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4618      	mov	r0, r3
 80134f0:	3708      	adds	r7, #8
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}

080134f6 <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b082      	sub	sp, #8
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80134fe:	f00a fa3d 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 8013502:	4603      	mov	r3, r0
    }
 8013504:	4618      	mov	r0, r3
 8013506:	3708      	adds	r7, #8
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801350c:	b590      	push	{r4, r7, lr}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	71fb      	strb	r3, [r7, #7]
 8013516:	460b      	mov	r3, r1
 8013518:	71bb      	strb	r3, [r7, #6]
 801351a:	4613      	mov	r3, r2
 801351c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801351e:	f7fd fb4b 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d105      	bne.n	8013534 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8013528:	4b0a      	ldr	r3, [pc, #40]	; (8013554 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801352a:	4a0b      	ldr	r2, [pc, #44]	; (8013558 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 801352c:	2138      	movs	r1, #56	; 0x38
 801352e:	480b      	ldr	r0, [pc, #44]	; (801355c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013530:	f016 fa52 	bl	80299d8 <__assert_func>
 8013534:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8013536:	f7fd fb4b 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801353a:	6803      	ldr	r3, [r0, #0]
 801353c:	332c      	adds	r3, #44	; 0x2c
 801353e:	681c      	ldr	r4, [r3, #0]
 8013540:	797b      	ldrb	r3, [r7, #5]
 8013542:	79ba      	ldrb	r2, [r7, #6]
 8013544:	79f9      	ldrb	r1, [r7, #7]
 8013546:	47a0      	blx	r4
 8013548:	4603      	mov	r3, r0
    }
 801354a:	4618      	mov	r0, r3
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	bd90      	pop	{r4, r7, pc}
 8013552:	bf00      	nop
 8013554:	0802ae7c 	.word	0x0802ae7c
 8013558:	0802bd78 	.word	0x0802bd78
 801355c:	0802aec0 	.word	0x0802aec0

08013560 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 8013560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013564:	b0c2      	sub	sp, #264	; 0x108
 8013566:	af02      	add	r7, sp, #8
 8013568:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	4618      	mov	r0, r3
 801356e:	f001 fcb5 	bl	8014edc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8013572:	4ada      	ldr	r2, [pc, #872]	; (80138dc <_ZN12MainViewBaseC1Ev+0x37c>)
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	601a      	str	r2, [r3, #0]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	3340      	adds	r3, #64	; 0x40
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff fa71 	bl	8012a64 <_ZN8touchgfx3BoxC1Ev>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	3370      	adds	r3, #112	; 0x70
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff fae2 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	33a4      	adds	r3, #164	; 0xa4
 8013590:	4618      	mov	r0, r3
 8013592:	f7ff fadd 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	33d8      	adds	r3, #216	; 0xd8
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff fad8 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7ff fad2 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fbd4 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ff fbce 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80135ca:	f107 030c 	add.w	r3, r7, #12
 80135ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7fe ffd9 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 80135d8:	f107 030c 	add.w	r3, r7, #12
 80135dc:	4619      	mov	r1, r3
 80135de:	4620      	mov	r0, r4
 80135e0:	f7ff fbe2 	bl	8012da8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7ff fbb8 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff fbb2 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff fbac 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801360e:	4618      	mov	r0, r3
 8013610:	f7ff fba6 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801361a:	4618      	mov	r0, r3
 801361c:	f7ff fba0 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fb9a 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff fb94 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801363e:	4618      	mov	r0, r3
 8013640:	f7ff fb8e 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801364a:	4618      	mov	r0, r3
 801364c:	f008 f95e 	bl	801b90c <_ZN8touchgfx4LineC1Ev>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013656:	f107 0310 	add.w	r3, r7, #16
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f7fe ff42 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 8013662:	22ff      	movs	r2, #255	; 0xff
 8013664:	6939      	ldr	r1, [r7, #16]
 8013666:	4620      	mov	r0, r4
 8013668:	f007 ff42 	bl	801b4f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013672:	4618      	mov	r0, r3
 8013674:	f7ff fa6c 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801367e:	4618      	mov	r0, r3
 8013680:	f7ff fa66 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801368a:	4618      	mov	r0, r3
 801368c:	f7ff fb68 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013696:	4618      	mov	r0, r3
 8013698:	f7ff fb62 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7ff fa54 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7ff fa4e 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7ff fb50 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7ff fb4a 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff fa3c 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80136de:	4618      	mov	r0, r3
 80136e0:	f006 f9e4 	bl	8019aac <_ZN8touchgfx11BoxProgressC1Ev>
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80136ea:	4618      	mov	r0, r3
 80136ec:	f008 f90e 	bl	801b90c <_ZN8touchgfx4LineC1Ev>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 80136f6:	f107 0314 	add.w	r3, r7, #20
 80136fa:	2100      	movs	r1, #0
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7fe fef2 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 8013702:	22ff      	movs	r2, #255	; 0xff
 8013704:	6979      	ldr	r1, [r7, #20]
 8013706:	4620      	mov	r0, r4
 8013708:	f007 fef2 	bl	801b4f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013712:	4618      	mov	r0, r3
 8013714:	f008 f8fa 	bl	801b90c <_ZN8touchgfx4LineC1Ev>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801371e:	f107 0318 	add.w	r3, r7, #24
 8013722:	2100      	movs	r1, #0
 8013724:	4618      	mov	r0, r3
 8013726:	f7fe fede 	bl	80124e6 <_ZN8touchgfx9colortypeC1Em>
 801372a:	22ff      	movs	r2, #255	; 0xff
 801372c:	69b9      	ldr	r1, [r7, #24]
 801372e:	4620      	mov	r0, r4
 8013730:	f007 fede 	bl	801b4f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff fb10 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013746:	4618      	mov	r0, r3
 8013748:	f006 fac6 	bl	8019cd8 <_ZN8touchgfx13ImageProgressC1Ev>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013752:	4618      	mov	r0, r3
 8013754:	f7ff fb04 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801375e:	4618      	mov	r0, r3
 8013760:	f7ff f9f6 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801376a:	4618      	mov	r0, r3
 801376c:	f7ff faf8 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff faf2 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013782:	4618      	mov	r0, r3
 8013784:	f7ff faec 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff f9de 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fae0 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff f9d2 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fad4 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80137be:	4618      	mov	r0, r3
 80137c0:	f001 fba2 	bl	8014f08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 80137ca:	4b45      	ldr	r3, [pc, #276]	; (80138e0 <_ZN12MainViewBaseC1Ev+0x380>)
 80137cc:	61fb      	str	r3, [r7, #28]
 80137ce:	2300      	movs	r3, #0
 80137d0:	623b      	str	r3, [r7, #32]
 80137d2:	f107 031c 	add.w	r3, r7, #28
 80137d6:	cb0c      	ldmia	r3, {r2, r3}
 80137d8:	6879      	ldr	r1, [r7, #4]
 80137da:	f001 fbdf 	bl	8014f9c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80137e4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80137e8:	4618      	mov	r0, r3
 80137ea:	f009 f887 	bl	801c8fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 488, 278);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80137f4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80137fe:	2200      	movs	r2, #0
 8013800:	2100      	movs	r1, #0
 8013802:	f7fd f991 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801380c:	2200      	movs	r2, #0
 801380e:	2100      	movs	r1, #0
 8013810:	2000      	movs	r0, #0
 8013812:	f7ff fe7b 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013816:	4603      	mov	r3, r0
 8013818:	4619      	mov	r1, r3
 801381a:	4620      	mov	r0, r4
 801381c:	f7ff f964 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	3370      	adds	r3, #112	; 0x70
 8013824:	22da      	movs	r2, #218	; 0xda
 8013826:	21e0      	movs	r1, #224	; 0xe0
 8013828:	4618      	mov	r0, r3
 801382a:	f7fe ff2b 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013834:	2200      	movs	r2, #0
 8013836:	21dc      	movs	r1, #220	; 0xdc
 8013838:	20ff      	movs	r0, #255	; 0xff
 801383a:	f7ff fe67 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801383e:	4603      	mov	r3, r0
 8013840:	4619      	mov	r1, r3
 8013842:	4620      	mov	r0, r4
 8013844:	f7ff f9c7 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	3370      	adds	r3, #112	; 0x70
 801384c:	2100      	movs	r1, #0
 801384e:	4618      	mov	r0, r3
 8013850:	f7ff fa14 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801385e:	211a      	movs	r1, #26
 8013860:	4618      	mov	r0, r3
 8013862:	f7ff f94f 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013866:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8013868:	4620      	mov	r0, r4
 801386a:	f008 fc1f 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	33a4      	adds	r3, #164	; 0xa4
 8013872:	227e      	movs	r2, #126	; 0x7e
 8013874:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8013878:	4618      	mov	r0, r3
 801387a:	f7fe ff03 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013884:	2200      	movs	r2, #0
 8013886:	21dc      	movs	r1, #220	; 0xdc
 8013888:	20ff      	movs	r0, #255	; 0xff
 801388a:	f7ff fe3f 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801388e:	4603      	mov	r3, r0
 8013890:	4619      	mov	r1, r3
 8013892:	4620      	mov	r0, r4
 8013894:	f7ff f99f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	33a4      	adds	r3, #164	; 0xa4
 801389c:	2100      	movs	r1, #0
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff f9ec 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80138aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80138ae:	2119      	movs	r1, #25
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7ff f927 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80138b6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80138b8:	4620      	mov	r0, r4
 80138ba:	f008 fbf7 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	33d8      	adds	r3, #216	; 0xd8
 80138c2:	2288      	movs	r2, #136	; 0x88
 80138c4:	21d8      	movs	r1, #216	; 0xd8
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7fe fedc 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 80138d2:	2200      	movs	r2, #0
 80138d4:	21dc      	movs	r1, #220	; 0xdc
 80138d6:	20ff      	movs	r0, #255	; 0xff
 80138d8:	e004      	b.n	80138e4 <_ZN12MainViewBaseC1Ev+0x384>
 80138da:	bf00      	nop
 80138dc:	0802ba48 	.word	0x0802ba48
 80138e0:	08014e61 	.word	0x08014e61
 80138e4:	f7ff fe12 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80138e8:	4603      	mov	r3, r0
 80138ea:	4619      	mov	r1, r3
 80138ec:	4620      	mov	r0, r4
 80138ee:	f7ff f972 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	33d8      	adds	r3, #216	; 0xd8
 80138f6:	2100      	movs	r1, #0
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7ff f9bf 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013908:	2113      	movs	r1, #19
 801390a:	4618      	mov	r0, r3
 801390c:	f7ff f8fa 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013910:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013912:	4620      	mov	r0, r4
 8013914:	f008 fbca 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801391e:	227e      	movs	r2, #126	; 0x7e
 8013920:	2174      	movs	r1, #116	; 0x74
 8013922:	4618      	mov	r0, r3
 8013924:	f7fe feae 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801392e:	2200      	movs	r2, #0
 8013930:	21dc      	movs	r1, #220	; 0xdc
 8013932:	20ff      	movs	r0, #255	; 0xff
 8013934:	f7ff fdea 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013938:	4603      	mov	r3, r0
 801393a:	4619      	mov	r1, r3
 801393c:	4620      	mov	r0, r4
 801393e:	f7ff f94a 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013948:	2100      	movs	r1, #0
 801394a:	4618      	mov	r0, r3
 801394c:	f7ff f996 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801395a:	2112      	movs	r1, #18
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff f8d1 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013962:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8013964:	4620      	mov	r0, r4
 8013966:	f008 fba1 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8013970:	233e      	movs	r3, #62	; 0x3e
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	2372      	movs	r3, #114	; 0x72
 8013976:	224d      	movs	r2, #77	; 0x4d
 8013978:	21bb      	movs	r1, #187	; 0xbb
 801397a:	f7fd f8d5 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013984:	22ff      	movs	r2, #255	; 0xff
 8013986:	21ff      	movs	r1, #255	; 0xff
 8013988:	20ff      	movs	r0, #255	; 0xff
 801398a:	f7ff fdbf 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801398e:	4603      	mov	r3, r0
 8013990:	4619      	mov	r1, r3
 8013992:	4620      	mov	r0, r4
 8013994:	f7ff f91f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801399e:	2100      	movs	r1, #0
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7ff f96b 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 80139ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80139b0:	2103      	movs	r1, #3
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7ff f8a6 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80139b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ff f8b1 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80139c2:	4603      	mov	r3, r0
 80139c4:	4ae1      	ldr	r2, [pc, #900]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 80139c6:	2105      	movs	r1, #5
 80139c8:	4620      	mov	r0, r4
 80139ca:	f00c f86d 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80139da:	4619      	mov	r1, r3
 80139dc:	4610      	mov	r0, r2
 80139de:	f7ff f9d5 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80139e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80139ec:	2102      	movs	r1, #2
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7ff f888 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80139f4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80139f6:	4620      	mov	r0, r4
 80139f8:	f008 fb58 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013a02:	2329      	movs	r3, #41	; 0x29
 8013a04:	9300      	str	r3, [sp, #0]
 8013a06:	2347      	movs	r3, #71	; 0x47
 8013a08:	2255      	movs	r2, #85	; 0x55
 8013a0a:	2166      	movs	r1, #102	; 0x66
 8013a0c:	f7fd f88c 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013a16:	22ff      	movs	r2, #255	; 0xff
 8013a18:	21ff      	movs	r1, #255	; 0xff
 8013a1a:	20ff      	movs	r0, #255	; 0xff
 8013a1c:	f7ff fd76 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a20:	4603      	mov	r3, r0
 8013a22:	4619      	mov	r1, r3
 8013a24:	4620      	mov	r0, r4
 8013a26:	f7ff f8d6 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013a30:	2100      	movs	r1, #0
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff f922 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 8013a3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a42:	2101      	movs	r1, #1
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff f85d 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7ff f868 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013a54:	4603      	mov	r3, r0
 8013a56:	4abd      	ldr	r2, [pc, #756]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013a58:	2105      	movs	r1, #5
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f00c f824 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	4610      	mov	r0, r2
 8013a70:	f7ff f98c 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a7e:	2100      	movs	r1, #0
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ff f83f 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013a86:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f008 fb0e 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013a96:	223f      	movs	r2, #63	; 0x3f
 8013a98:	21b3      	movs	r1, #179	; 0xb3
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fe fdf2 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fe fe5c 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8013ab4:	230e      	movs	r3, #14
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	2312      	movs	r3, #18
 8013aba:	223f      	movs	r2, #63	; 0x3f
 8013abc:	2136      	movs	r1, #54	; 0x36
 8013abe:	f7fd f833 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013ac8:	22ff      	movs	r2, #255	; 0xff
 8013aca:	21ff      	movs	r1, #255	; 0xff
 8013acc:	20ff      	movs	r0, #255	; 0xff
 8013ace:	f7ff fd1d 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f7ff f87d 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013ae2:	2100      	movs	r1, #0
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7ff f8c9 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8013af0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013af4:	2126      	movs	r1, #38	; 0x26
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff f804 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013afc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7ff f80f 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013b06:	4603      	mov	r3, r0
 8013b08:	4a90      	ldr	r2, [pc, #576]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013b0a:	2102      	movs	r1, #2
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f00b ffcb 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8013b1e:	4619      	mov	r1, r3
 8013b20:	4610      	mov	r0, r2
 8013b22:	f7ff f933 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013b30:	2104      	movs	r1, #4
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe ffe6 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013b38:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f008 fab5 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8013b48:	230e      	movs	r3, #14
 8013b4a:	9300      	str	r3, [sp, #0]
 8013b4c:	2312      	movs	r3, #18
 8013b4e:	223f      	movs	r2, #63	; 0x3f
 8013b50:	2173      	movs	r1, #115	; 0x73
 8013b52:	f7fc ffe9 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013b5c:	22ff      	movs	r2, #255	; 0xff
 8013b5e:	21ff      	movs	r1, #255	; 0xff
 8013b60:	20ff      	movs	r0, #255	; 0xff
 8013b62:	f7ff fcd3 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b66:	4603      	mov	r3, r0
 8013b68:	4619      	mov	r1, r3
 8013b6a:	4620      	mov	r0, r4
 8013b6c:	f7ff f833 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013b76:	2100      	movs	r1, #0
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff f87f 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 8013b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b88:	2127      	movs	r1, #39	; 0x27
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fe ffba 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fe ffc5 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	4a6b      	ldr	r2, [pc, #428]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013b9e:	2102      	movs	r1, #2
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f00b ff81 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	4610      	mov	r0, r2
 8013bb6:	f7ff f8e9 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013bc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013bc4:	2105      	movs	r1, #5
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fe ff9c 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013bcc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f008 fa6b 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8013bdc:	230e      	movs	r3, #14
 8013bde:	9300      	str	r3, [sp, #0]
 8013be0:	2312      	movs	r3, #18
 8013be2:	223e      	movs	r2, #62	; 0x3e
 8013be4:	21ad      	movs	r1, #173	; 0xad
 8013be6:	f7fc ff9f 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013bf0:	22ff      	movs	r2, #255	; 0xff
 8013bf2:	21ff      	movs	r1, #255	; 0xff
 8013bf4:	20ff      	movs	r0, #255	; 0xff
 8013bf6:	f7ff fc89 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f7fe ffe9 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7ff f835 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8013c18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c1c:	2128      	movs	r1, #40	; 0x28
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fe ff70 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fe ff7b 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	4a46      	ldr	r2, [pc, #280]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013c32:	2102      	movs	r1, #2
 8013c34:	4620      	mov	r0, r4
 8013c36:	f00b ff37 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8013c46:	4619      	mov	r1, r3
 8013c48:	4610      	mov	r0, r2
 8013c4a:	f7ff f89f 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013c54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013c58:	2106      	movs	r1, #6
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe ff52 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013c60:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8013c64:	4620      	mov	r0, r4
 8013c66:	f008 fa21 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013c70:	230e      	movs	r3, #14
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	2312      	movs	r3, #18
 8013c76:	223e      	movs	r2, #62	; 0x3e
 8013c78:	21e7      	movs	r1, #231	; 0xe7
 8013c7a:	f7fc ff55 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013c84:	22ff      	movs	r2, #255	; 0xff
 8013c86:	21ff      	movs	r1, #255	; 0xff
 8013c88:	20ff      	movs	r0, #255	; 0xff
 8013c8a:	f7ff fc3f 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	4619      	mov	r1, r3
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7fe ff9f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fe ffeb 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8013cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013cb0:	2129      	movs	r1, #41	; 0x29
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe ff26 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013cb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fe ff31 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	4a21      	ldr	r2, [pc, #132]	; (8013d4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013cc6:	2102      	movs	r1, #2
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f00b feed 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8013cda:	4619      	mov	r1, r3
 8013cdc:	4610      	mov	r0, r2
 8013cde:	f7ff f855 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013ce8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013cec:	2107      	movs	r1, #7
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe ff08 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013cf4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f008 f9d7 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8013d04:	230e      	movs	r3, #14
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	2312      	movs	r3, #18
 8013d0a:	223f      	movs	r2, #63	; 0x3f
 8013d0c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8013d10:	f7fc ff0a 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013d1a:	22ff      	movs	r2, #255	; 0xff
 8013d1c:	21ff      	movs	r1, #255	; 0xff
 8013d1e:	20ff      	movs	r0, #255	; 0xff
 8013d20:	f7ff fbf4 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d24:	4603      	mov	r3, r0
 8013d26:	4619      	mov	r1, r3
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f7fe ff54 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013d34:	2100      	movs	r1, #0
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fe ffa0 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 8013d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d46:	212a      	movs	r1, #42	; 0x2a
 8013d48:	4618      	mov	r0, r3
 8013d4a:	e001      	b.n	8013d50 <_ZN12MainViewBaseC1Ev+0x7f0>
 8013d4c:	0802af00 	.word	0x0802af00
 8013d50:	f7fe fed8 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fe fee3 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	4ae2      	ldr	r2, [pc, #904]	; (80140ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013d62:	2102      	movs	r1, #2
 8013d64:	4620      	mov	r0, r4
 8013d66:	f00b fe9f 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8013d76:	4619      	mov	r1, r3
 8013d78:	4610      	mov	r0, r2
 8013d7a:	f7ff f807 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013d84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013d88:	2108      	movs	r1, #8
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fe feba 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013d90:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8013d94:	4620      	mov	r0, r4
 8013d96:	f008 f989 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8013da0:	230e      	movs	r3, #14
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	2312      	movs	r3, #18
 8013da6:	223f      	movs	r2, #63	; 0x3f
 8013da8:	f240 115d 	movw	r1, #349	; 0x15d
 8013dac:	f7fc febc 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8013db6:	22ff      	movs	r2, #255	; 0xff
 8013db8:	21ff      	movs	r1, #255	; 0xff
 8013dba:	20ff      	movs	r0, #255	; 0xff
 8013dbc:	f7ff fba6 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f7fe ff06 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fe ff52 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 8013dde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013de2:	212b      	movs	r1, #43	; 0x2b
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fe8d 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013dea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7fe fe98 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013df4:	4603      	mov	r3, r0
 8013df6:	4abd      	ldr	r2, [pc, #756]	; (80140ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013df8:	2102      	movs	r1, #2
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f00b fe54 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	4610      	mov	r0, r2
 8013e10:	f7fe ffbc 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8013e1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013e1e:	2109      	movs	r1, #9
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fe fe6f 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013e26:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f008 f93e 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8013e36:	230f      	movs	r3, #15
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	2312      	movs	r3, #18
 8013e3c:	223e      	movs	r2, #62	; 0x3e
 8013e3e:	f240 119b 	movw	r1, #411	; 0x19b
 8013e42:	f7fc fe71 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013e4c:	22ff      	movs	r2, #255	; 0xff
 8013e4e:	21ff      	movs	r1, #255	; 0xff
 8013e50:	20ff      	movs	r0, #255	; 0xff
 8013e52:	f7ff fb5b 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e56:	4603      	mov	r3, r0
 8013e58:	4619      	mov	r1, r3
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f7fe febb 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013e66:	2100      	movs	r1, #0
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fe ff07 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 8013e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013e78:	212c      	movs	r1, #44	; 0x2c
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fe fe42 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013e80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7fe fe4d 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	4a97      	ldr	r2, [pc, #604]	; (80140ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013e8e:	2102      	movs	r1, #2
 8013e90:	4620      	mov	r0, r4
 8013e92:	f00b fe09 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	4610      	mov	r0, r2
 8013ea6:	f7fe ff71 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 8013eb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013eb4:	210a      	movs	r1, #10
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fe fe24 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013ebc:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f008 f8f3 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f503 7059 	add.w	r0, r3, #868	; 0x364
 8013ecc:	230e      	movs	r3, #14
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	2312      	movs	r3, #18
 8013ed2:	223e      	movs	r2, #62	; 0x3e
 8013ed4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013ed8:	f7fc fe26 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013ee2:	22ff      	movs	r2, #255	; 0xff
 8013ee4:	21ff      	movs	r1, #255	; 0xff
 8013ee6:	20ff      	movs	r0, #255	; 0xff
 8013ee8:	f7ff fb10 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013eec:	4603      	mov	r3, r0
 8013eee:	4619      	mov	r1, r3
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f7fe fe70 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8013efc:	2100      	movs	r1, #0
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7fe febc 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 8013f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013f0e:	212d      	movs	r1, #45	; 0x2d
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fdf7 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013f16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7fe fe02 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013f20:	4603      	mov	r3, r0
 8013f22:	4a72      	ldr	r2, [pc, #456]	; (80140ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013f24:	2102      	movs	r1, #2
 8013f26:	4620      	mov	r0, r4
 8013f28:	f00b fdbe 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8013f38:	4619      	mov	r1, r3
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	f7fe ff26 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8013f46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013f4a:	210b      	movs	r1, #11
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fe fdd9 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8013f52:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8013f56:	4620      	mov	r0, r4
 8013f58:	f008 f8a8 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8013f62:	2305      	movs	r3, #5
 8013f64:	9300      	str	r3, [sp, #0]
 8013f66:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8013f6a:	223a      	movs	r2, #58	; 0x3a
 8013f6c:	f06f 0101 	mvn.w	r1, #1
 8013f70:	f7fc fdda 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013f7a:	22ff      	movs	r2, #255	; 0xff
 8013f7c:	21ff      	movs	r1, #255	; 0xff
 8013f7e:	20ff      	movs	r0, #255	; 0xff
 8013f80:	f7ff fac4 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f84:	4603      	mov	r3, r0
 8013f86:	22ff      	movs	r2, #255	; 0xff
 8013f88:	4619      	mov	r1, r3
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f007 fa95 	bl	801b4ba <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	f007 faf4 	bl	801b58c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013faa:	2203      	movs	r2, #3
 8013fac:	2100      	movs	r1, #0
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f001 f814 	bl	8014fdc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013fba:	2203      	movs	r2, #3
 8013fbc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f001 f831 	bl	8015028 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013fcc:	2102      	movs	r1, #2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f001 f850 	bl	8015074 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013fda:	2101      	movs	r1, #1
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f007 fdef 	bl	801bbc0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013fe8:	227e      	movs	r2, #126	; 0x7e
 8013fea:	212b      	movs	r1, #43	; 0x2b
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7fe fb49 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	21dc      	movs	r1, #220	; 0xdc
 8013ffc:	20ff      	movs	r0, #255	; 0xff
 8013ffe:	f7ff fa85 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014002:	4603      	mov	r3, r0
 8014004:	4619      	mov	r1, r3
 8014006:	4620      	mov	r0, r4
 8014008:	f7fe fde5 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014012:	2100      	movs	r1, #0
 8014014:	4618      	mov	r0, r3
 8014016:	f7fe fe31 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8014020:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014024:	2110      	movs	r1, #16
 8014026:	4618      	mov	r0, r3
 8014028:	f7fe fd6c 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801402c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8014030:	4620      	mov	r0, r4
 8014032:	f008 f83b 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801403c:	22c1      	movs	r2, #193	; 0xc1
 801403e:	212a      	movs	r1, #42	; 0x2a
 8014040:	4618      	mov	r0, r3
 8014042:	f7fe fb1f 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 801404c:	2200      	movs	r2, #0
 801404e:	21dc      	movs	r1, #220	; 0xdc
 8014050:	20ff      	movs	r0, #255	; 0xff
 8014052:	f7ff fa5b 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014056:	4603      	mov	r3, r0
 8014058:	4619      	mov	r1, r3
 801405a:	4620      	mov	r0, r4
 801405c:	f7fe fdbb 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8014066:	2100      	movs	r1, #0
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe fe07 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8014074:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014078:	2111      	movs	r1, #17
 801407a:	4618      	mov	r0, r3
 801407c:	f7fe fd42 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014080:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8014084:	4620      	mov	r0, r4
 8014086:	f008 f811 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8014090:	232a      	movs	r3, #42	; 0x2a
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	233c      	movs	r3, #60	; 0x3c
 8014096:	2255      	movs	r2, #85	; 0x55
 8014098:	2119      	movs	r1, #25
 801409a:	f7fc fd45 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80140a4:	22ff      	movs	r2, #255	; 0xff
 80140a6:	21ff      	movs	r1, #255	; 0xff
 80140a8:	20ff      	movs	r0, #255	; 0xff
 80140aa:	f7ff fa2f 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140ae:	4603      	mov	r3, r0
 80140b0:	4619      	mov	r1, r3
 80140b2:	4620      	mov	r0, r4
 80140b4:	f7fe fd8f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80140be:	2100      	movs	r1, #0
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fe fddb 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 80140cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80140d0:	210d      	movs	r1, #13
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fe fd16 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80140d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80140dc:	4618      	mov	r0, r3
 80140de:	f7fe fd21 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80140e2:	4603      	mov	r3, r0
 80140e4:	4a01      	ldr	r2, [pc, #4]	; (80140ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 80140e6:	2105      	movs	r1, #5
 80140e8:	4620      	mov	r0, r4
 80140ea:	e001      	b.n	80140f0 <_ZN12MainViewBaseC1Ev+0xb90>
 80140ec:	0802af00 	.word	0x0802af00
 80140f0:	f00b fcda 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8014100:	4619      	mov	r1, r3
 8014102:	4610      	mov	r0, r2
 8014104:	f7fe fe42 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 801410e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014112:	210c      	movs	r1, #12
 8014114:	4618      	mov	r0, r3
 8014116:	f7fe fcf5 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801411a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801411e:	4620      	mov	r0, r4
 8014120:	f007 ffc4 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 801412a:	232a      	movs	r3, #42	; 0x2a
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	2343      	movs	r3, #67	; 0x43
 8014130:	2299      	movs	r2, #153	; 0x99
 8014132:	2119      	movs	r1, #25
 8014134:	f7fc fcf8 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801413e:	22ff      	movs	r2, #255	; 0xff
 8014140:	21ff      	movs	r1, #255	; 0xff
 8014142:	20ff      	movs	r0, #255	; 0xff
 8014144:	f7ff f9e2 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014148:	4603      	mov	r3, r0
 801414a:	4619      	mov	r1, r3
 801414c:	4620      	mov	r0, r4
 801414e:	f7fe fd42 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014158:	2100      	movs	r1, #0
 801415a:	4618      	mov	r0, r3
 801415c:	f7fe fd8e 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 8014166:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801416a:	210f      	movs	r1, #15
 801416c:	4618      	mov	r0, r3
 801416e:	f7fe fcc9 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014172:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014176:	4618      	mov	r0, r3
 8014178:	f7fe fcd4 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801417c:	4603      	mov	r3, r0
 801417e:	4ae3      	ldr	r2, [pc, #908]	; (801450c <_ZN12MainViewBaseC1Ev+0xfac>)
 8014180:	2105      	movs	r1, #5
 8014182:	4620      	mov	r0, r4
 8014184:	f00b fc90 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8014194:	4619      	mov	r1, r3
 8014196:	4610      	mov	r0, r2
 8014198:	f7fe fdf8 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80141a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80141a6:	210e      	movs	r1, #14
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fe fcab 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80141ae:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80141b2:	4620      	mov	r0, r4
 80141b4:	f007 ff7a 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141be:	22c1      	movs	r2, #193	; 0xc1
 80141c0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe fa5d 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80141d0:	2200      	movs	r2, #0
 80141d2:	21dc      	movs	r1, #220	; 0xdc
 80141d4:	20ff      	movs	r0, #255	; 0xff
 80141d6:	f7ff f999 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80141da:	4603      	mov	r3, r0
 80141dc:	4619      	mov	r1, r3
 80141de:	4620      	mov	r0, r4
 80141e0:	f7fe fcf9 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80141ea:	2100      	movs	r1, #0
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe fd45 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80141f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80141fc:	2114      	movs	r1, #20
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fe fc80 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014204:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8014208:	4620      	mov	r0, r4
 801420a:	f007 ff4f 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014214:	22c1      	movs	r2, #193	; 0xc1
 8014216:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801421a:	4618      	mov	r0, r3
 801421c:	f7fe fa32 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8014226:	2200      	movs	r2, #0
 8014228:	21dc      	movs	r1, #220	; 0xdc
 801422a:	20ff      	movs	r0, #255	; 0xff
 801422c:	f7ff f96e 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014230:	4603      	mov	r3, r0
 8014232:	4619      	mov	r1, r3
 8014234:	4620      	mov	r0, r4
 8014236:	f7fe fcce 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014240:	2100      	movs	r1, #0
 8014242:	4618      	mov	r0, r3
 8014244:	f7fe fd1a 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f203 5434 	addw	r4, r3, #1332	; 0x534
 801424e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014252:	2115      	movs	r1, #21
 8014254:	4618      	mov	r0, r3
 8014256:	f7fe fc55 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801425a:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 801425e:	4620      	mov	r0, r4
 8014260:	f007 ff24 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 801426a:	232a      	movs	r3, #42	; 0x2a
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	234b      	movs	r3, #75	; 0x4b
 8014270:	2299      	movs	r2, #153	; 0x99
 8014272:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014276:	f7fc fc57 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8014280:	22ff      	movs	r2, #255	; 0xff
 8014282:	21ff      	movs	r1, #255	; 0xff
 8014284:	20ff      	movs	r0, #255	; 0xff
 8014286:	f7ff f941 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801428a:	4603      	mov	r3, r0
 801428c:	4619      	mov	r1, r3
 801428e:	4620      	mov	r0, r4
 8014290:	f7fe fca1 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801429a:	2100      	movs	r1, #0
 801429c:	4618      	mov	r0, r3
 801429e:	f7fe fced 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 80142a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80142ac:	2117      	movs	r1, #23
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fe fc28 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80142b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fe fc33 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80142be:	4603      	mov	r3, r0
 80142c0:	4a92      	ldr	r2, [pc, #584]	; (801450c <_ZN12MainViewBaseC1Ev+0xfac>)
 80142c2:	2105      	movs	r1, #5
 80142c4:	4620      	mov	r0, r4
 80142c6:	f00b fbef 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80142d6:	4619      	mov	r1, r3
 80142d8:	4610      	mov	r0, r2
 80142da:	f7fe fd57 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 80142e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80142e8:	2116      	movs	r1, #22
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7fe fc0a 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80142f0:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80142f4:	4620      	mov	r0, r4
 80142f6:	f007 fed9 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8014300:	2328      	movs	r3, #40	; 0x28
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	2347      	movs	r3, #71	; 0x47
 8014306:	2299      	movs	r2, #153	; 0x99
 8014308:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801430c:	f7fc fc0c 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8014316:	22ff      	movs	r2, #255	; 0xff
 8014318:	21ff      	movs	r1, #255	; 0xff
 801431a:	20ff      	movs	r0, #255	; 0xff
 801431c:	f7ff f8f6 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014320:	4603      	mov	r3, r0
 8014322:	4619      	mov	r1, r3
 8014324:	4620      	mov	r0, r4
 8014326:	f7fe fc56 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014330:	2100      	movs	r1, #0
 8014332:	4618      	mov	r0, r3
 8014334:	f7fe fca2 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 801433e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014342:	2125      	movs	r1, #37	; 0x25
 8014344:	4618      	mov	r0, r3
 8014346:	f7fe fbdd 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801434a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801434e:	4618      	mov	r0, r3
 8014350:	f7fe fbe8 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014354:	4603      	mov	r3, r0
 8014356:	4a6d      	ldr	r2, [pc, #436]	; (801450c <_ZN12MainViewBaseC1Ev+0xfac>)
 8014358:	2105      	movs	r1, #5
 801435a:	4620      	mov	r0, r4
 801435c:	f00b fba4 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 801436c:	4619      	mov	r1, r3
 801436e:	4610      	mov	r0, r2
 8014370:	f7fe fd0c 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801437a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801437e:	2118      	movs	r1, #24
 8014380:	4618      	mov	r0, r3
 8014382:	f7fe fbbf 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014386:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801438a:	4620      	mov	r0, r4
 801438c:	f007 fe8e 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014396:	22f0      	movs	r2, #240	; 0xf0
 8014398:	f240 1197 	movw	r1, #407	; 0x197
 801439c:	4618      	mov	r0, r3
 801439e:	f7fe f971 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80143a8:	2200      	movs	r2, #0
 80143aa:	21dc      	movs	r1, #220	; 0xdc
 80143ac:	20ff      	movs	r0, #255	; 0xff
 80143ae:	f7ff f8ad 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143b2:	4603      	mov	r3, r0
 80143b4:	4619      	mov	r1, r3
 80143b6:	4620      	mov	r0, r4
 80143b8:	f7fe fc0d 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80143c2:	2100      	movs	r1, #0
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fe fc59 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80143d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80143d4:	211b      	movs	r1, #27
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fe fb94 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80143dc:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80143e0:	4620      	mov	r0, r4
 80143e2:	f007 fe63 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80143ec:	22e2      	movs	r2, #226	; 0xe2
 80143ee:	f240 116f 	movw	r1, #367	; 0x16f
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fe f946 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 80143fe:	230a      	movs	r3, #10
 8014400:	9300      	str	r3, [sp, #0]
 8014402:	2364      	movs	r3, #100	; 0x64
 8014404:	2202      	movs	r2, #2
 8014406:	2102      	movs	r1, #2
 8014408:	f005 fb86 	bl	8019b18 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8014412:	2300      	movs	r3, #0
 8014414:	9300      	str	r3, [sp, #0]
 8014416:	2300      	movs	r3, #0
 8014418:	2264      	movs	r2, #100	; 0x64
 801441a:	2100      	movs	r1, #0
 801441c:	f005 fdfa 	bl	801a014 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014426:	2100      	movs	r1, #0
 8014428:	4618      	mov	r0, r3
 801442a:	f005 fbd5 	bl	8019bd8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8014434:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014438:	2100      	movs	r1, #0
 801443a:	4618      	mov	r0, r3
 801443c:	f7fe f8a5 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8014440:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014444:	4619      	mov	r1, r3
 8014446:	4620      	mov	r0, r4
 8014448:	f005 fdd9 	bl	8019ffe <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8014452:	2200      	movs	r2, #0
 8014454:	21dc      	movs	r1, #220	; 0xdc
 8014456:	20ff      	movs	r0, #255	; 0xff
 8014458:	f7ff f858 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801445c:	4603      	mov	r3, r0
 801445e:	4619      	mov	r1, r3
 8014460:	4620      	mov	r0, r4
 8014462:	f005 fb03 	bl	8019a6c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801446c:	213c      	movs	r1, #60	; 0x3c
 801446e:	4618      	mov	r0, r3
 8014470:	f005 fb6a 	bl	8019b48 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801447a:	230a      	movs	r3, #10
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	23b4      	movs	r3, #180	; 0xb4
 8014480:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014484:	210e      	movs	r1, #14
 8014486:	f7fc fb4f 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8014490:	22ff      	movs	r2, #255	; 0xff
 8014492:	21ff      	movs	r1, #255	; 0xff
 8014494:	20ff      	movs	r0, #255	; 0xff
 8014496:	f7ff f839 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801449a:	4603      	mov	r3, r0
 801449c:	22ff      	movs	r2, #255	; 0xff
 801449e:	4619      	mov	r1, r3
 80144a0:	4620      	mov	r0, r4
 80144a2:	f007 f80a 	bl	801b4ba <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80144b2:	4619      	mov	r1, r3
 80144b4:	4610      	mov	r0, r2
 80144b6:	f007 f869 	bl	801b58c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80144c0:	2205      	movs	r2, #5
 80144c2:	2100      	movs	r1, #0
 80144c4:	4618      	mov	r0, r3
 80144c6:	f000 fd89 	bl	8014fdc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80144d0:	2205      	movs	r2, #5
 80144d2:	21b4      	movs	r1, #180	; 0xb4
 80144d4:	4618      	mov	r0, r3
 80144d6:	f000 fda7 	bl	8015028 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80144e0:	2102      	movs	r1, #2
 80144e2:	4618      	mov	r0, r3
 80144e4:	f000 fdc6 	bl	8015074 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80144ee:	2100      	movs	r1, #0
 80144f0:	4618      	mov	r0, r3
 80144f2:	f007 fb65 	bl	801bbc0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 80144fc:	230a      	movs	r3, #10
 80144fe:	9300      	str	r3, [sp, #0]
 8014500:	23b4      	movs	r3, #180	; 0xb4
 8014502:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014506:	f240 111f 	movw	r1, #287	; 0x11f
 801450a:	e001      	b.n	8014510 <_ZN12MainViewBaseC1Ev+0xfb0>
 801450c:	0802af00 	.word	0x0802af00
 8014510:	f7fc fb0a 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801451a:	22ff      	movs	r2, #255	; 0xff
 801451c:	21ff      	movs	r1, #255	; 0xff
 801451e:	20ff      	movs	r0, #255	; 0xff
 8014520:	f7fe fff4 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014524:	4603      	mov	r3, r0
 8014526:	22ff      	movs	r2, #255	; 0xff
 8014528:	4619      	mov	r1, r3
 801452a:	4620      	mov	r0, r4
 801452c:	f006 ffc5 	bl	801b4ba <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801453c:	4619      	mov	r1, r3
 801453e:	4610      	mov	r0, r2
 8014540:	f007 f824 	bl	801b58c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801454a:	2205      	movs	r2, #5
 801454c:	2100      	movs	r1, #0
 801454e:	4618      	mov	r0, r3
 8014550:	f000 fd44 	bl	8014fdc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801455a:	2205      	movs	r2, #5
 801455c:	21b4      	movs	r1, #180	; 0xb4
 801455e:	4618      	mov	r0, r3
 8014560:	f000 fd62 	bl	8015028 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801456a:	2102      	movs	r1, #2
 801456c:	4618      	mov	r0, r3
 801456e:	f000 fd81 	bl	8015074 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014578:	2100      	movs	r1, #0
 801457a:	4618      	mov	r0, r3
 801457c:	f007 fb20 	bl	801bbc0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8014586:	2315      	movs	r3, #21
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	233c      	movs	r3, #60	; 0x3c
 801458c:	22f7      	movs	r2, #247	; 0xf7
 801458e:	21d2      	movs	r1, #210	; 0xd2
 8014590:	f7fc faca 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 801459a:	22ff      	movs	r2, #255	; 0xff
 801459c:	21ff      	movs	r1, #255	; 0xff
 801459e:	20ff      	movs	r0, #255	; 0xff
 80145a0:	f7fe ffb4 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145a4:	4603      	mov	r3, r0
 80145a6:	4619      	mov	r1, r3
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7fe fb14 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80145b4:	2100      	movs	r1, #0
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fe fb60 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 80145c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80145c6:	211d      	movs	r1, #29
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fe fa9b 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80145ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fe faa6 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80145d8:	4603      	mov	r3, r0
 80145da:	4ae2      	ldr	r2, [pc, #904]	; (8014964 <_ZN12MainViewBaseC1Ev+0x1404>)
 80145dc:	2105      	movs	r1, #5
 80145de:	4620      	mov	r0, r4
 80145e0:	f00b fa62 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 80145f0:	4619      	mov	r1, r3
 80145f2:	4610      	mov	r0, r2
 80145f4:	f7fe fbca 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 80145fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014602:	211c      	movs	r1, #28
 8014604:	4618      	mov	r0, r3
 8014606:	f7fe fa7d 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801460a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 801460e:	4620      	mov	r0, r4
 8014610:	f007 fd4c 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801461a:	2201      	movs	r2, #1
 801461c:	2101      	movs	r1, #1
 801461e:	4618      	mov	r0, r3
 8014620:	f7fe f830 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 801462a:	2337      	movs	r3, #55	; 0x37
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8014632:	2202      	movs	r2, #2
 8014634:	2102      	movs	r1, #2
 8014636:	f005 fbbf 	bl	8019db8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8014640:	2300      	movs	r3, #0
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	2300      	movs	r3, #0
 8014646:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801464a:	2100      	movs	r1, #0
 801464c:	f005 fce2 	bl	801a014 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014656:	2100      	movs	r1, #0
 8014658:	4618      	mov	r0, r3
 801465a:	f005 fabd 	bl	8019bd8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014664:	2101      	movs	r1, #1
 8014666:	4618      	mov	r0, r3
 8014668:	f005 fb01 	bl	8019c6e <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014672:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014676:	4618      	mov	r0, r3
 8014678:	f005 fbb6 	bl	8019de8 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014682:	2101      	movs	r1, #1
 8014684:	4618      	mov	r0, r3
 8014686:	f005 fadb 	bl	8019c40 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8014690:	2316      	movs	r3, #22
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	2337      	movs	r3, #55	; 0x37
 8014696:	2204      	movs	r2, #4
 8014698:	2119      	movs	r1, #25
 801469a:	f7fc fa45 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 80146a4:	22ff      	movs	r2, #255	; 0xff
 80146a6:	21ff      	movs	r1, #255	; 0xff
 80146a8:	20ff      	movs	r0, #255	; 0xff
 80146aa:	f7fe ff2f 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80146ae:	4603      	mov	r3, r0
 80146b0:	4619      	mov	r1, r3
 80146b2:	4620      	mov	r0, r4
 80146b4:	f7fe fa8f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80146be:	2100      	movs	r1, #0
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fe fadb 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 80146cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80146d0:	211f      	movs	r1, #31
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fe fa16 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80146d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fe fa21 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80146e2:	4603      	mov	r3, r0
 80146e4:	4a9f      	ldr	r2, [pc, #636]	; (8014964 <_ZN12MainViewBaseC1Ev+0x1404>)
 80146e6:	2105      	movs	r1, #5
 80146e8:	4620      	mov	r0, r4
 80146ea:	f00b f9dd 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 80146fa:	4619      	mov	r1, r3
 80146fc:	4610      	mov	r0, r2
 80146fe:	f7fe fb45 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014708:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801470c:	211e      	movs	r1, #30
 801470e:	4618      	mov	r0, r3
 8014710:	f7fe f9f8 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014714:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8014718:	4620      	mov	r0, r4
 801471a:	f007 fcc7 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014724:	220f      	movs	r2, #15
 8014726:	2152      	movs	r1, #82	; 0x52
 8014728:	4618      	mov	r0, r3
 801472a:	f7fd ffab 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014734:	22ff      	movs	r2, #255	; 0xff
 8014736:	21ff      	movs	r1, #255	; 0xff
 8014738:	20ff      	movs	r0, #255	; 0xff
 801473a:	f7fe fee7 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801473e:	4603      	mov	r3, r0
 8014740:	4619      	mov	r1, r3
 8014742:	4620      	mov	r0, r4
 8014744:	f7fe fa47 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801474e:	2100      	movs	r1, #0
 8014750:	4618      	mov	r0, r3
 8014752:	f7fe fa93 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f603 1444 	addw	r4, r3, #2372	; 0x944
 801475c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014760:	2120      	movs	r1, #32
 8014762:	4618      	mov	r0, r3
 8014764:	f7fe f9ce 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014768:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 801476c:	4620      	mov	r0, r4
 801476e:	f007 fc9d 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8014778:	232a      	movs	r3, #42	; 0x2a
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	2348      	movs	r3, #72	; 0x48
 801477e:	2255      	movs	r2, #85	; 0x55
 8014780:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014784:	f7fc f9d0 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f603 1478 	addw	r4, r3, #2424	; 0x978
 801478e:	22ff      	movs	r2, #255	; 0xff
 8014790:	21ff      	movs	r1, #255	; 0xff
 8014792:	20ff      	movs	r0, #255	; 0xff
 8014794:	f7fe feba 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014798:	4603      	mov	r3, r0
 801479a:	4619      	mov	r1, r3
 801479c:	4620      	mov	r0, r4
 801479e:	f7fe fa1a 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80147a8:	2100      	movs	r1, #0
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fe fa66 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 80147b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80147ba:	2122      	movs	r1, #34	; 0x22
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fe f9a1 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80147c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7fe f9ac 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80147cc:	4603      	mov	r3, r0
 80147ce:	4a65      	ldr	r2, [pc, #404]	; (8014964 <_ZN12MainViewBaseC1Ev+0x1404>)
 80147d0:	2105      	movs	r1, #5
 80147d2:	4620      	mov	r0, r4
 80147d4:	f00b f968 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f603 1278 	addw	r2, r3, #2424	; 0x978
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80147e4:	4619      	mov	r1, r3
 80147e6:	4610      	mov	r0, r2
 80147e8:	f7fe fad0 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f603 1478 	addw	r4, r3, #2424	; 0x978
 80147f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80147f6:	2121      	movs	r1, #33	; 0x21
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fe f983 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80147fe:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8014802:	4620      	mov	r0, r4
 8014804:	f007 fc52 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 801480e:	233c      	movs	r3, #60	; 0x3c
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	2360      	movs	r3, #96	; 0x60
 8014814:	229e      	movs	r2, #158	; 0x9e
 8014816:	21c3      	movs	r1, #195	; 0xc3
 8014818:	f7fc f986 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014822:	22ff      	movs	r2, #255	; 0xff
 8014824:	21ff      	movs	r1, #255	; 0xff
 8014826:	20ff      	movs	r0, #255	; 0xff
 8014828:	f7fe fe70 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801482c:	4603      	mov	r3, r0
 801482e:	4619      	mov	r1, r3
 8014830:	4620      	mov	r0, r4
 8014832:	f7fe f9d0 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 801483c:	2100      	movs	r1, #0
 801483e:	4618      	mov	r0, r3
 8014840:	f7fe fa1c 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 801484a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801484e:	2124      	movs	r1, #36	; 0x24
 8014850:	4618      	mov	r0, r3
 8014852:	f7fe f957 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014856:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801485a:	4618      	mov	r0, r3
 801485c:	f7fe f962 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014860:	4603      	mov	r3, r0
 8014862:	4a40      	ldr	r2, [pc, #256]	; (8014964 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014864:	2105      	movs	r1, #5
 8014866:	4620      	mov	r0, r4
 8014868:	f00b f91e 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 8014878:	4619      	mov	r1, r3
 801487a:	4610      	mov	r0, r2
 801487c:	f7fe fa86 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014886:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801488a:	2123      	movs	r1, #35	; 0x23
 801488c:	4618      	mov	r0, r3
 801488e:	f7fe f939 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014892:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8014896:	4620      	mov	r0, r4
 8014898:	f007 fc08 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 80148a2:	232a      	movs	r3, #42	; 0x2a
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	234e      	movs	r3, #78	; 0x4e
 80148a8:	2299      	movs	r2, #153	; 0x99
 80148aa:	2164      	movs	r1, #100	; 0x64
 80148ac:	f7fc f93c 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 80148b6:	22ff      	movs	r2, #255	; 0xff
 80148b8:	21ff      	movs	r1, #255	; 0xff
 80148ba:	20ff      	movs	r0, #255	; 0xff
 80148bc:	f7fe fe26 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148c0:	4603      	mov	r3, r0
 80148c2:	4619      	mov	r1, r3
 80148c4:	4620      	mov	r0, r4
 80148c6:	f7fe f986 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80148d0:	2100      	movs	r1, #0
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe f9d2 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 80148de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80148e2:	212f      	movs	r1, #47	; 0x2f
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7fe f90d 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80148ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7fe f918 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80148f4:	4603      	mov	r3, r0
 80148f6:	4a1b      	ldr	r2, [pc, #108]	; (8014964 <_ZN12MainViewBaseC1Ev+0x1404>)
 80148f8:	2105      	movs	r1, #5
 80148fa:	4620      	mov	r0, r4
 80148fc:	f00b f8d4 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 801490c:	4619      	mov	r1, r3
 801490e:	4610      	mov	r0, r2
 8014910:	f7fe fa3c 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 801491a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801491e:	212e      	movs	r1, #46	; 0x2e
 8014920:	4618      	mov	r0, r3
 8014922:	f7fe f8ef 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014926:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 801492a:	4620      	mov	r0, r4
 801492c:	f007 fbbe 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014936:	22c1      	movs	r2, #193	; 0xc1
 8014938:	2172      	movs	r1, #114	; 0x72
 801493a:	4618      	mov	r0, r3
 801493c:	f7fd fea2 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014946:	2200      	movs	r2, #0
 8014948:	21dc      	movs	r1, #220	; 0xdc
 801494a:	20ff      	movs	r0, #255	; 0xff
 801494c:	f7fe fdde 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014950:	4603      	mov	r3, r0
 8014952:	4619      	mov	r1, r3
 8014954:	4620      	mov	r0, r4
 8014956:	f7fe f93e 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014960:	2100      	movs	r1, #0
 8014962:	e001      	b.n	8014968 <_ZN12MainViewBaseC1Ev+0x1408>
 8014964:	0802af00 	.word	0x0802af00
 8014968:	4618      	mov	r0, r3
 801496a:	f7fe f987 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014974:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014978:	2130      	movs	r1, #48	; 0x30
 801497a:	4618      	mov	r0, r3
 801497c:	f7fe f8c2 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014980:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 8014984:	4620      	mov	r0, r4
 8014986:	f007 fb91 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8014990:	232a      	movs	r3, #42	; 0x2a
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	2344      	movs	r3, #68	; 0x44
 8014996:	2255      	movs	r2, #85	; 0x55
 8014998:	f240 118f 	movw	r1, #399	; 0x18f
 801499c:	f7fc f8c4 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 80149a6:	22ff      	movs	r2, #255	; 0xff
 80149a8:	21ff      	movs	r1, #255	; 0xff
 80149aa:	20ff      	movs	r0, #255	; 0xff
 80149ac:	f7fe fdae 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80149b0:	4603      	mov	r3, r0
 80149b2:	4619      	mov	r1, r3
 80149b4:	4620      	mov	r0, r4
 80149b6:	f7fe f90e 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80149c0:	2100      	movs	r1, #0
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7fe f95a 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 80149ce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80149d2:	2132      	movs	r1, #50	; 0x32
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7fe f895 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80149da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe f8a0 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80149e4:	4603      	mov	r3, r0
 80149e6:	4ad7      	ldr	r2, [pc, #860]	; (8014d44 <_ZN12MainViewBaseC1Ev+0x17e4>)
 80149e8:	2105      	movs	r1, #5
 80149ea:	4620      	mov	r0, r4
 80149ec:	f00b f85c 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 80149fc:	4619      	mov	r1, r3
 80149fe:	4610      	mov	r0, r2
 8014a00:	f7fe f9c4 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014a0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014a0e:	2131      	movs	r1, #49	; 0x31
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7fe f877 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014a16:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f007 fb46 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014a26:	227e      	movs	r2, #126	; 0x7e
 8014a28:	f240 1197 	movw	r1, #407	; 0x197
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7fd fe29 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014a38:	2200      	movs	r2, #0
 8014a3a:	21dc      	movs	r1, #220	; 0xdc
 8014a3c:	20ff      	movs	r0, #255	; 0xff
 8014a3e:	f7fe fd65 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a42:	4603      	mov	r3, r0
 8014a44:	4619      	mov	r1, r3
 8014a46:	4620      	mov	r0, r4
 8014a48:	f7fe f8c5 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014a52:	2100      	movs	r1, #0
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7fe f911 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014a60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014a64:	2133      	movs	r1, #51	; 0x33
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fe f84c 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014a6c:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8014a70:	4620      	mov	r0, r4
 8014a72:	f007 fb1b 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8014a7c:	2311      	movs	r3, #17
 8014a7e:	9300      	str	r3, [sp, #0]
 8014a80:	2313      	movs	r3, #19
 8014a82:	22e2      	movs	r2, #226	; 0xe2
 8014a84:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8014a88:	f7fc f84e 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014a92:	220d      	movs	r2, #13
 8014a94:	210d      	movs	r1, #13
 8014a96:	200d      	movs	r0, #13
 8014a98:	f7fe fd38 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	4620      	mov	r0, r4
 8014aa2:	f7fe f898 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014aac:	2100      	movs	r1, #0
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fe f8e4 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 8014aba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014abe:	2135      	movs	r1, #53	; 0x35
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe f81f 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014ac6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fe f82a 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	4a9c      	ldr	r2, [pc, #624]	; (8014d44 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014ad4:	2105      	movs	r1, #5
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f00a ffe6 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4610      	mov	r0, r2
 8014aec:	f7fe f94e 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014af6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8014afa:	2134      	movs	r1, #52	; 0x34
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7fe f801 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8014b02:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8014b06:	4620      	mov	r0, r4
 8014b08:	f007 fad0 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014b12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	237a      	movs	r3, #122	; 0x7a
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2100      	movs	r1, #0
 8014b1e:	f000 fac1 	bl	80150a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014b28:	2105      	movs	r1, #5
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 fada 	bl	80150e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014b36:	2299      	movs	r2, #153	; 0x99
 8014b38:	2166      	movs	r1, #102	; 0x66
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	f7fe fce6 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b40:	4605      	mov	r5, r0
 8014b42:	22cc      	movs	r2, #204	; 0xcc
 8014b44:	2199      	movs	r1, #153	; 0x99
 8014b46:	2000      	movs	r0, #0
 8014b48:	f7fe fce0 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b4c:	4606      	mov	r6, r0
 8014b4e:	2266      	movs	r2, #102	; 0x66
 8014b50:	2133      	movs	r1, #51	; 0x33
 8014b52:	2000      	movs	r0, #0
 8014b54:	f7fe fcda 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b58:	4680      	mov	r8, r0
 8014b5a:	2299      	movs	r2, #153	; 0x99
 8014b5c:	2166      	movs	r1, #102	; 0x66
 8014b5e:	2033      	movs	r0, #51	; 0x33
 8014b60:	f7fe fcd4 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b64:	4603      	mov	r3, r0
 8014b66:	9300      	str	r3, [sp, #0]
 8014b68:	4643      	mov	r3, r8
 8014b6a:	4632      	mov	r2, r6
 8014b6c:	4629      	mov	r1, r5
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f000 fac9 	bl	8015106 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014b7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b7e:	9300      	str	r3, [sp, #0]
 8014b80:	237a      	movs	r3, #122	; 0x7a
 8014b82:	2200      	movs	r2, #0
 8014b84:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014b88:	f7fb ffce 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014b92:	2100      	movs	r1, #0
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7fe fa10 	bl	8012fba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4610      	mov	r0, r2
 8014baa:	f7fe fa27 	bl	8012ffc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	3340      	adds	r3, #64	; 0x40
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	f7fd feec 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	3370      	adds	r3, #112	; 0x70
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	4610      	mov	r0, r2
 8014bc6:	f7fd fee5 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	33a4      	adds	r3, #164	; 0xa4
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	f7fd fede 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	33d8      	adds	r3, #216	; 0xd8
 8014bde:	4619      	mov	r1, r3
 8014be0:	4610      	mov	r0, r2
 8014be2:	f7fd fed7 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014bee:	4619      	mov	r1, r3
 8014bf0:	4610      	mov	r0, r2
 8014bf2:	f7fd fecf 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014bfe:	4619      	mov	r1, r3
 8014c00:	4610      	mov	r0, r2
 8014c02:	f7fd fec7 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014c0e:	4619      	mov	r1, r3
 8014c10:	4610      	mov	r0, r2
 8014c12:	f7fd febf 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8014c1e:	4619      	mov	r1, r3
 8014c20:	4610      	mov	r0, r2
 8014c22:	f7fd feb7 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8014c2e:	4619      	mov	r1, r3
 8014c30:	4610      	mov	r0, r2
 8014c32:	f7fd feaf 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014c3e:	4619      	mov	r1, r3
 8014c40:	4610      	mov	r0, r2
 8014c42:	f7fd fea7 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8014c4e:	4619      	mov	r1, r3
 8014c50:	4610      	mov	r0, r2
 8014c52:	f7fd fe9f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8014c5e:	4619      	mov	r1, r3
 8014c60:	4610      	mov	r0, r2
 8014c62:	f7fd fe97 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014c6e:	4619      	mov	r1, r3
 8014c70:	4610      	mov	r0, r2
 8014c72:	f7fd fe8f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014c7e:	4619      	mov	r1, r3
 8014c80:	4610      	mov	r0, r2
 8014c82:	f7fd fe87 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8014c8e:	4619      	mov	r1, r3
 8014c90:	4610      	mov	r0, r2
 8014c92:	f7fd fe7f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	4610      	mov	r0, r2
 8014ca2:	f7fd fe77 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014cae:	4619      	mov	r1, r3
 8014cb0:	4610      	mov	r0, r2
 8014cb2:	f7fd fe6f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8014cb6:	687a      	ldr	r2, [r7, #4]
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	f7fd fe67 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8014cce:	4619      	mov	r1, r3
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	f7fd fe5f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8014cd6:	687a      	ldr	r2, [r7, #4]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8014cde:	4619      	mov	r1, r3
 8014ce0:	4610      	mov	r0, r2
 8014ce2:	f7fd fe57 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014cee:	4619      	mov	r1, r3
 8014cf0:	4610      	mov	r0, r2
 8014cf2:	f7fd fe4f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4610      	mov	r0, r2
 8014d02:	f7fd fe47 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014d0e:	4619      	mov	r1, r3
 8014d10:	4610      	mov	r0, r2
 8014d12:	f7fd fe3f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014d1e:	4619      	mov	r1, r3
 8014d20:	4610      	mov	r0, r2
 8014d22:	f7fd fe37 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014d2e:	4619      	mov	r1, r3
 8014d30:	4610      	mov	r0, r2
 8014d32:	f7fd fe2f 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014d3e:	4619      	mov	r1, r3
 8014d40:	e002      	b.n	8014d48 <_ZN12MainViewBaseC1Ev+0x17e8>
 8014d42:	bf00      	nop
 8014d44:	0802af00 	.word	0x0802af00
 8014d48:	4610      	mov	r0, r2
 8014d4a:	f7fd fe23 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014d56:	4619      	mov	r1, r3
 8014d58:	4610      	mov	r0, r2
 8014d5a:	f7fd fe1b 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014d66:	4619      	mov	r1, r3
 8014d68:	4610      	mov	r0, r2
 8014d6a:	f7fd fe13 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014d76:	4619      	mov	r1, r3
 8014d78:	4610      	mov	r0, r2
 8014d7a:	f7fd fe0b 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8014d86:	4619      	mov	r1, r3
 8014d88:	4610      	mov	r0, r2
 8014d8a:	f7fd fe03 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014d96:	4619      	mov	r1, r3
 8014d98:	4610      	mov	r0, r2
 8014d9a:	f7fd fdfb 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8014d9e:	687a      	ldr	r2, [r7, #4]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8014da6:	4619      	mov	r1, r3
 8014da8:	4610      	mov	r0, r2
 8014daa:	f7fd fdf3 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014db6:	4619      	mov	r1, r3
 8014db8:	4610      	mov	r0, r2
 8014dba:	f7fd fdeb 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8014dbe:	687a      	ldr	r2, [r7, #4]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	4610      	mov	r0, r2
 8014dca:	f7fd fde3 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014dd6:	4619      	mov	r1, r3
 8014dd8:	4610      	mov	r0, r2
 8014dda:	f7fd fddb 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014de6:	4619      	mov	r1, r3
 8014de8:	4610      	mov	r0, r2
 8014dea:	f7fd fdd3 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014df6:	4619      	mov	r1, r3
 8014df8:	4610      	mov	r0, r2
 8014dfa:	f7fd fdcb 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014e06:	4619      	mov	r1, r3
 8014e08:	4610      	mov	r0, r2
 8014e0a:	f7fd fdc3 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014e16:	4619      	mov	r1, r3
 8014e18:	4610      	mov	r0, r2
 8014e1a:	f7fd fdbb 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014e26:	4619      	mov	r1, r3
 8014e28:	4610      	mov	r0, r2
 8014e2a:	f7fd fdb3 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014e36:	4619      	mov	r1, r3
 8014e38:	4610      	mov	r0, r2
 8014e3a:	f7fd fdab 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4618      	mov	r0, r3
 8014e42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014e46:	46bd      	mov	sp, r7
 8014e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e4c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b083      	sub	sp, #12
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]

}
 8014e54:	bf00      	nop
 8014e56:	370c      	adds	r7, #12
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014e70:	683a      	ldr	r2, [r7, #0]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d106      	bne.n	8014e84 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7fe fb3d 	bl	80134f6 <_ZN12MainViewBase11applicationEv>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7fc f956 	bl	8011130 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8014e84:	bf00      	nop
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	4a08      	ldr	r2, [pc, #32]	; (8014eb8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	601a      	str	r2, [r3, #0]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	3334      	adds	r3, #52	; 0x34
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fe f97c 	bl	801319c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7fe f8dc 	bl	8013064 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	0802ba94 	.word	0x0802ba94

08014ebc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f7ff ffe1 	bl	8014e8c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 8014eca:	2178      	movs	r1, #120	; 0x78
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f014 fd58 	bl	8029982 <_ZdlPvj>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3708      	adds	r7, #8
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f009 fcde 	bl	801e8a8 <_ZN8touchgfx6ScreenC1Ev>
 8014eec:	4a05      	ldr	r2, [pc, #20]	; (8014f04 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	0802bb28 	.word	0x0802bb28

08014f08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7fe f894 	bl	8013040 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 8014f18:	4a17      	ldr	r2, [pc, #92]	; (8014f78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	3334      	adds	r3, #52	; 0x34
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fe f914 	bl	8013150 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	3368      	adds	r3, #104	; 0x68
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7fd facc 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	336c      	adds	r3, #108	; 0x6c
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7fd fac7 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3370      	adds	r3, #112	; 0x70
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7fd fac2 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	3374      	adds	r3, #116	; 0x74
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fd fabd 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	3334      	adds	r3, #52	; 0x34
 8014f54:	2200      	movs	r2, #0
 8014f56:	2100      	movs	r1, #0
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fd fb93 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3334      	adds	r3, #52	; 0x34
 8014f64:	4619      	mov	r1, r3
 8014f66:	4610      	mov	r0, r2
 8014f68:	f005 f988 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	0802ba94 	.word	0x0802ba94

08014f7c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	4a04      	ldr	r2, [pc, #16]	; (8014f98 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	601a      	str	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr
 8014f98:	0802bbf0 	.word	0x0802bbf0

08014f9c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7ff ffe4 	bl	8014f7c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8014fb4:	4a08      	ldr	r2, [pc, #32]	; (8014fd8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	68ba      	ldr	r2, [r7, #8]
 8014fbe:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	3308      	adds	r3, #8
 8014fc4:	463a      	mov	r2, r7
 8014fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	0802ba7c 	.word	0x0802ba7c

08014fdc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8014fdc:	b590      	push	{r4, r7, lr}
 8014fde:	b089      	sub	sp, #36	; 0x24
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	015a      	lsls	r2, r3, #5
 8014ff0:	f107 0314 	add.w	r3, r7, #20
 8014ff4:	4611      	mov	r1, r2
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7fd fef8 	bl	8012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	461c      	mov	r4, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	61fb      	str	r3, [r7, #28]
 8015004:	69fb      	ldr	r3, [r7, #28]
 8015006:	015a      	lsls	r2, r3, #5
 8015008:	f107 0310 	add.w	r3, r7, #16
 801500c:	4611      	mov	r1, r2
 801500e:	4618      	mov	r0, r3
 8015010:	f7fd feec 	bl	8012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015014:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015016:	461a      	mov	r2, r3
 8015018:	4621      	mov	r1, r4
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	f006 fdba 	bl	801bb94 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8015020:	bf00      	nop
 8015022:	3724      	adds	r7, #36	; 0x24
 8015024:	46bd      	mov	sp, r7
 8015026:	bd90      	pop	{r4, r7, pc}

08015028 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8015028:	b590      	push	{r4, r7, lr}
 801502a:	b089      	sub	sp, #36	; 0x24
 801502c:	af00      	add	r7, sp, #0
 801502e:	60f8      	str	r0, [r7, #12]
 8015030:	60b9      	str	r1, [r7, #8]
 8015032:	607a      	str	r2, [r7, #4]
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	61bb      	str	r3, [r7, #24]
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	015a      	lsls	r2, r3, #5
 801503c:	f107 0314 	add.w	r3, r7, #20
 8015040:	4611      	mov	r1, r2
 8015042:	4618      	mov	r0, r3
 8015044:	f7fd fed2 	bl	8012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	461c      	mov	r4, r3
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	61fb      	str	r3, [r7, #28]
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	015a      	lsls	r2, r3, #5
 8015054:	f107 0310 	add.w	r3, r7, #16
 8015058:	4611      	mov	r1, r2
 801505a:	4618      	mov	r0, r3
 801505c:	f7fd fec6 	bl	8012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015060:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015062:	461a      	mov	r2, r3
 8015064:	4621      	mov	r1, r4
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f006 fd9f 	bl	801bbaa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 801506c:	bf00      	nop
 801506e:	3724      	adds	r7, #36	; 0x24
 8015070:	46bd      	mov	sp, r7
 8015072:	bd90      	pop	{r4, r7, pc}

08015074 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	60fb      	str	r3, [r7, #12]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	015a      	lsls	r2, r3, #5
 8015086:	f107 0308 	add.w	r3, r7, #8
 801508a:	4611      	mov	r1, r2
 801508c:	4618      	mov	r0, r3
 801508e:	f7fd fead 	bl	8012dec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015092:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8015094:	4619      	mov	r1, r3
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7fd fec3 	bl	8012e22 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801509c:	bf00      	nop
 801509e:	3710      	adds	r7, #16
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80150a4:	b590      	push	{r4, r7, lr}
 80150a6:	b087      	sub	sp, #28
 80150a8:	af02      	add	r7, sp, #8
 80150aa:	60f8      	str	r0, [r7, #12]
 80150ac:	4608      	mov	r0, r1
 80150ae:	4611      	mov	r1, r2
 80150b0:	461a      	mov	r2, r3
 80150b2:	4603      	mov	r3, r0
 80150b4:	817b      	strh	r3, [r7, #10]
 80150b6:	460b      	mov	r3, r1
 80150b8:	813b      	strh	r3, [r7, #8]
 80150ba:	4613      	mov	r3, r2
 80150bc:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80150c4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80150c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80150cc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80150d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150d4:	9300      	str	r3, [sp, #0]
 80150d6:	4623      	mov	r3, r4
 80150d8:	f7fb fd26 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80150dc:	bf00      	nop
 80150de:	3714      	adds	r7, #20
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd90      	pop	{r4, r7, pc}

080150e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	460b      	mov	r3, r1
 80150ee:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	3334      	adds	r3, #52	; 0x34
 80150f4:	78fa      	ldrb	r2, [r7, #3]
 80150f6:	4611      	mov	r1, r2
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fe f88d 	bl	8013218 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}

08015106 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015106:	b580      	push	{r7, lr}
 8015108:	b084      	sub	sp, #16
 801510a:	af00      	add	r7, sp, #0
 801510c:	60f8      	str	r0, [r7, #12]
 801510e:	60b9      	str	r1, [r7, #8]
 8015110:	607a      	str	r2, [r7, #4]
 8015112:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	683a      	ldr	r2, [r7, #0]
 8015124:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	69ba      	ldr	r2, [r7, #24]
 801512a:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	3384      	adds	r3, #132	; 0x84
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	4798      	blx	r3
    }
 8015138:	bf00      	nop
 801513a:	3710      	adds	r7, #16
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8015140:	b480      	push	{r7}
 8015142:	b083      	sub	sp, #12
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
    }
 8015148:	4a04      	ldr	r2, [pc, #16]	; (801515c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	601a      	str	r2, [r3, #0]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	4618      	mov	r0, r3
 8015152:	370c      	adds	r7, #12
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr
 801515c:	0802bbf0 	.word	0x0802bbf0

08015160 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
    }
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f7ff ffe9 	bl	8015140 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801516e:	2104      	movs	r1, #4
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f014 fc06 	bl	8029982 <_ZdlPvj>
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	4618      	mov	r0, r3
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8015180:	b590      	push	{r4, r7, lr}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	4618      	mov	r0, r3
 8015192:	f7fd ff05 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	d002      	beq.n	80151a2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	336c      	adds	r3, #108	; 0x6c
 80151a0:	e001      	b.n	80151a6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3368      	adds	r3, #104	; 0x68
 80151a6:	6819      	ldr	r1, [r3, #0]
 80151a8:	4620      	mov	r0, r4
 80151aa:	f7fe f819 	bl	80131e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7fd fef2 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d002      	beq.n	80151c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	3374      	adds	r3, #116	; 0x74
 80151c6:	e001      	b.n	80151cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	3370      	adds	r3, #112	; 0x70
 80151cc:	6819      	ldr	r1, [r3, #0]
 80151ce:	4620      	mov	r0, r4
 80151d0:	f7fe f814 	bl	80131fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fd ff1e 	bl	8013018 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80151dc:	bf00      	nop
 80151de:	370c      	adds	r7, #12
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd90      	pop	{r4, r7, pc}

080151e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	4a05      	ldr	r2, [pc, #20]	; (8015204 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	601a      	str	r2, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7ff ffa3 	bl	8015140 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	0802ba7c 	.word	0x0802ba7c

08015208 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7ff ffe7 	bl	80151e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015216:	2110      	movs	r1, #16
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f014 fbb2 	bl	8029982 <_ZdlPvj>
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	4618      	mov	r0, r3
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}

08015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	4a05      	ldr	r2, [pc, #20]	; (8015248 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	601a      	str	r2, [r3, #0]
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	4618      	mov	r0, r3
 801523a:	f7fd fd6f 	bl	8012d1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4618      	mov	r0, r3
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	0802dc40 	.word	0x0802dc40

0801524c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff ffe7 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801525a:	2138      	movs	r1, #56	; 0x38
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f014 fb90 	bl	8029982 <_ZdlPvj>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	4a05      	ldr	r2, [pc, #20]	; (801528c <_ZN8touchgfx4LineD1Ev+0x20>)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	601a      	str	r2, [r3, #0]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	4618      	mov	r0, r3
 801527e:	f006 fa63 	bl	801b748 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	4618      	mov	r0, r3
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	0802d86c 	.word	0x0802d86c

08015290 <_ZN8touchgfx4LineD0Ev>:
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7ff ffe7 	bl	801526c <_ZN8touchgfx4LineD1Ev>
 801529e:	2174      	movs	r1, #116	; 0x74
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f014 fb6e 	bl	8029982 <_ZdlPvj>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	4618      	mov	r0, r3
 80152aa:	3708      	adds	r7, #8
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	4a05      	ldr	r2, [pc, #20]	; (80152d0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7fd fdd1 	bl	8012e68 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	4618      	mov	r0, r3
 80152ca:	3708      	adds	r7, #8
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	0802d570 	.word	0x0802d570

080152d4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f7ff ffe7 	bl	80152b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80152e2:	2118      	movs	r1, #24
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f014 fb4c 	bl	8029982 <_ZdlPvj>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	4618      	mov	r0, r3
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	68d2      	ldr	r2, [r2, #12]
 8015306:	1052      	asrs	r2, r2, #1
 8015308:	1898      	adds	r0, r3, r2
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	f003 0301 	and.w	r3, r3, #1
 8015312:	2b00      	cmp	r3, #0
 8015314:	d102      	bne.n	801531c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	689b      	ldr	r3, [r3, #8]
 801531a:	e00a      	b.n	8015332 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	687a      	ldr	r2, [r7, #4]
 8015322:	68d2      	ldr	r2, [r2, #12]
 8015324:	1052      	asrs	r2, r2, #1
 8015326:	4413      	add	r3, r2
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	6892      	ldr	r2, [r2, #8]
 801532e:	4413      	add	r3, r2
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	6839      	ldr	r1, [r7, #0]
 8015334:	4798      	blx	r3
    }
 8015336:	bf00      	nop
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}

0801533e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801533e:	b480      	push	{r7}
 8015340:	b083      	sub	sp, #12
 8015342:	af00      	add	r7, sp, #0
 8015344:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d010      	beq.n	8015370 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	689b      	ldr	r3, [r3, #8]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d107      	bne.n	8015366 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	68db      	ldr	r3, [r3, #12]
 801535a:	f003 0301 	and.w	r3, r3, #1
 801535e:	2b00      	cmp	r3, #0
 8015360:	d101      	bne.n	8015366 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015362:	2301      	movs	r3, #1
 8015364:	e000      	b.n	8015368 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015366:	2300      	movs	r3, #0
 8015368:	2b01      	cmp	r3, #1
 801536a:	d001      	beq.n	8015370 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801536c:	2301      	movs	r3, #1
 801536e:	e000      	b.n	8015372 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8015370:	2300      	movs	r3, #0
    }
 8015372:	4618      	mov	r0, r3
 8015374:	370c      	adds	r7, #12
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr

0801537e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801537e:	b590      	push	{r4, r7, lr}
 8015380:	b083      	sub	sp, #12
 8015382:	af00      	add	r7, sp, #0
 8015384:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	4618      	mov	r0, r3
 8015390:	f7fd fe27 	bl	8012fe2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015394:	4603      	mov	r3, r0
 8015396:	4619      	mov	r1, r3
 8015398:	4620      	mov	r0, r4
 801539a:	f7fd ff4d 	bl	8013238 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7fd fe43 	bl	801302c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80153a6:	bf00      	nop
 80153a8:	370c      	adds	r7, #12
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd90      	pop	{r4, r7, pc}
	...

080153b0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7fd fd98 	bl	8012ef0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80153c0:	4a03      	ldr	r2, [pc, #12]	; (80153d0 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	601a      	str	r2, [r3, #0]
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	4618      	mov	r0, r3
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	0802bf2c 	.word	0x0802bf2c

080153d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b082      	sub	sp, #8
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	4a05      	ldr	r2, [pc, #20]	; (80153f4 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	601a      	str	r2, [r3, #0]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fd fda5 	bl	8012f34 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	4618      	mov	r0, r3
 80153ee:	3708      	adds	r7, #8
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	0802bf2c 	.word	0x0802bf2c

080153f8 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff ffe7 	bl	80153d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015406:	2134      	movs	r1, #52	; 0x34
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f014 faba 	bl	8029982 <_ZdlPvj>
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	4618      	mov	r0, r3
 8015426:	f7fd fdbb 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801542a:	4603      	mov	r3, r0
 801542c:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 801542e:	6838      	ldr	r0, [r7, #0]
 8015430:	f7fd f89f 	bl	8012572 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	bf0c      	ite	eq
 801543a:	2301      	moveq	r3, #1
 801543c:	2300      	movne	r3, #0
 801543e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8015440:	7bbb      	ldrb	r3, [r7, #14]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d005      	beq.n	8015452 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8015446:	7bfb      	ldrb	r3, [r7, #15]
 8015448:	f083 0301 	eor.w	r3, r3, #1
 801544c:	b2db      	uxtb	r3, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	d108      	bne.n	8015464 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8015452:	7bbb      	ldrb	r3, [r7, #14]
 8015454:	f083 0301 	eor.w	r3, r3, #1
 8015458:	b2db      	uxtb	r3, r3
 801545a:	2b00      	cmp	r3, #0
 801545c:	d00f      	beq.n	801547e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 801545e:	7bfb      	ldrb	r3, [r7, #15]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d00c      	beq.n	801547e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	7bba      	ldrb	r2, [r7, #14]
 8015468:	4611      	mov	r1, r2
 801546a:	4618      	mov	r0, r3
 801546c:	f7fd fd84 	bl	8012f78 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	3314      	adds	r3, #20
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	4610      	mov	r0, r2
 801547c:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801547e:	7bfb      	ldrb	r3, [r7, #15]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d00b      	beq.n	801549c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015484:	6838      	ldr	r0, [r7, #0]
 8015486:	f7fd f874 	bl	8012572 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801548a:	4603      	mov	r3, r0
 801548c:	2b01      	cmp	r3, #1
 801548e:	d105      	bne.n	801549c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015494:	2b00      	cmp	r3, #0
 8015496:	d001      	beq.n	801549c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015498:	2301      	movs	r3, #1
 801549a:	e000      	b.n	801549e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 801549c:	2300      	movs	r3, #0
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d015      	beq.n	80154ce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	330c      	adds	r3, #12
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	4610      	mov	r0, r2
 80154b2:	4798      	blx	r3
 80154b4:	4603      	mov	r3, r0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d009      	beq.n	80154ce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	3308      	adds	r3, #8
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	6879      	ldr	r1, [r7, #4]
 80154ca:	4610      	mov	r0, r2
 80154cc:	4798      	blx	r3
            }
        }
    }
 80154ce:	bf00      	nop
 80154d0:	3710      	adds	r7, #16
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
	...

080154d8 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fd fa66 	bl	80129b4 <_ZN8touchgfx6WidgetC1Ev>
 80154e8:	4a09      	ldr	r2, [pc, #36]	; (8015510 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	601a      	str	r2, [r3, #0]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2200      	movs	r2, #0
 80154f2:	629a      	str	r2, [r3, #40]	; 0x28
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2200      	movs	r2, #0
 80154f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2101      	movs	r1, #1
 8015500:	4618      	mov	r0, r3
 8015502:	f7fd f940 	bl	8012786 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	0802d958 	.word	0x0802d958

08015514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 8015514:	b480      	push	{r7}
 8015516:	b083      	sub	sp, #12
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	683a      	ldr	r2, [r7, #0]
 8015522:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8015524:	bf00      	nop
 8015526:	370c      	adds	r7, #12
 8015528:	46bd      	mov	sp, r7
 801552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552e:	4770      	bx	lr

08015530 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	4a05      	ldr	r2, [pc, #20]	; (8015550 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	601a      	str	r2, [r3, #0]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	4618      	mov	r0, r3
 8015542:	f7fd fa49 	bl	80129d8 <_ZN8touchgfx6WidgetD1Ev>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	0802d958 	.word	0x0802d958

08015554 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f7ff ffe7 	bl	8015530 <_ZN8touchgfx14AbstractButtonD1Ev>
 8015562:	2130      	movs	r1, #48	; 0x30
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f014 fa0c 	bl	8029982 <_ZdlPvj>
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	4618      	mov	r0, r3
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	4618      	mov	r0, r3
 8015580:	f7ff ffaa 	bl	80154d8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8015584:	4a0c      	ldr	r2, [pc, #48]	; (80155b8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	601a      	str	r2, [r3, #0]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	332e      	adds	r3, #46	; 0x2e
 801558e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015592:	4618      	mov	r0, r3
 8015594:	f7fc fff9 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	3330      	adds	r3, #48	; 0x30
 801559c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fc fff2 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	22ff      	movs	r2, #255	; 0xff
 80155aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	4618      	mov	r0, r3
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	0802db9c 	.word	0x0802db9c

080155bc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	4a05      	ldr	r2, [pc, #20]	; (80155dc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	601a      	str	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7ff ffaf 	bl	8015530 <_ZN8touchgfx14AbstractButtonD1Ev>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	0802db9c 	.word	0x0802db9c

080155e0 <_ZN8touchgfx6ButtonD0Ev>:
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f7ff ffe7 	bl	80155bc <_ZN8touchgfx6ButtonD1Ev>
 80155ee:	2134      	movs	r1, #52	; 0x34
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f014 f9c6 	bl	8029982 <_ZdlPvj>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	4a05      	ldr	r2, [pc, #20]	; (8015620 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	601a      	str	r2, [r3, #0]
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	4618      	mov	r0, r3
 8015612:	f7fd f967 	bl	80128e4 <_ZN8touchgfx6ScreenD1Ev>
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	4618      	mov	r0, r3
 801561a:	3708      	adds	r7, #8
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	0802bee0 	.word	0x0802bee0

08015624 <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	f7ff ffe7 	bl	8015600 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015632:	2140      	movs	r1, #64	; 0x40
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f014 f9a4 	bl	8029982 <_ZdlPvj>
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	4618      	mov	r0, r3
 801563e:	3708      	adds	r7, #8
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}

08015644 <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	4a1f      	ldr	r2, [pc, #124]	; (80156cc <_ZN20SecondScreenViewBaseD1Ev+0x88>)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	601a      	str	r2, [r3, #0]
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8015658:	4618      	mov	r0, r3
 801565a:	f000 fc2d 	bl	8015eb8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8015664:	4618      	mov	r0, r3
 8015666:	f000 fc49 	bl	8015efc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015670:	4618      	mov	r0, r3
 8015672:	f7ff ffa3 	bl	80155bc <_ZN8touchgfx6ButtonD1Ev>
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801567c:	4618      	mov	r0, r3
 801567e:	f7ff ff9d 	bl	80155bc <_ZN8touchgfx6ButtonD1Ev>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015688:	4618      	mov	r0, r3
 801568a:	f7ff fdcd 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015694:	4618      	mov	r0, r3
 8015696:	f7fd fb0d 	bl	8012cb4 <_ZN8touchgfx8TextAreaD1Ev>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	33e8      	adds	r3, #232	; 0xe8
 801569e:	4618      	mov	r0, r3
 80156a0:	f7ff fdc2 	bl	8015228 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3370      	adds	r3, #112	; 0x70
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 fa9d 	bl	8015be8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	3340      	adds	r3, #64	; 0x40
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fd f9f6 	bl	8012aa4 <_ZN8touchgfx3BoxD1Ev>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7ff ffa0 	bl	8015600 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	4618      	mov	r0, r3
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	0802bddc 	.word	0x0802bddc

080156d0 <_ZN20SecondScreenViewBaseD0Ev>:
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7ff ffb3 	bl	8015644 <_ZN20SecondScreenViewBaseD1Ev>
 80156de:	f44f 7119 	mov.w	r1, #612	; 0x264
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f014 f94d 	bl	8029982 <_ZdlPvj>
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	4618      	mov	r0, r3
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <_ZN20SecondScreenViewBase9nextErrorEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void nextError()
 80156f2:	b480      	push	{r7}
 80156f4:	b083      	sub	sp, #12
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 80156fa:	bf00      	nop
 80156fc:	370c      	adds	r7, #12
 80156fe:	46bd      	mov	sp, r7
 8015700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015704:	4770      	bx	lr

08015706 <_ZN20SecondScreenViewBase11clearErrorsEv>:

    virtual void clearErrors()
 8015706:	b480      	push	{r7}
 8015708:	b083      	sub	sp, #12
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 801570e:	bf00      	nop
 8015710:	370c      	adds	r7, #12
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr

0801571a <_ZN20SecondScreenViewBase16moveToMainScreenEv>:

    virtual void moveToMainScreen()
 801571a:	b480      	push	{r7}
 801571c:	b083      	sub	sp, #12
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015722:	bf00      	nop
 8015724:	370c      	adds	r7, #12
 8015726:	46bd      	mov	sp, r7
 8015728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572c:	4770      	bx	lr

0801572e <_ZN20SecondScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 801572e:	b580      	push	{r7, lr}
 8015730:	b082      	sub	sp, #8
 8015732:	af00      	add	r7, sp, #0
 8015734:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015736:	f008 f921 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801573a:	4603      	mov	r3, r0
    }
 801573c:	4618      	mov	r0, r3
 801573e:	3708      	adds	r7, #8
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}

08015744 <_ZN20SecondScreenViewBaseC1Ev>:
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

SecondScreenViewBase::SecondScreenViewBase() :
 8015744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015748:	b092      	sub	sp, #72	; 0x48
 801574a:	af02      	add	r7, sp, #8
 801574c:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &SecondScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f000 fa71 	bl	8015c38 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 8015756:	4adc      	ldr	r2, [pc, #880]	; (8015ac8 <_ZN20SecondScreenViewBaseC1Ev+0x384>)
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	601a      	str	r2, [r3, #0]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	3340      	adds	r3, #64	; 0x40
 8015760:	4618      	mov	r0, r3
 8015762:	f7fd f97f 	bl	8012a64 <_ZN8touchgfx3BoxC1Ev>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	3370      	adds	r3, #112	; 0x70
 801576a:	4618      	mov	r0, r3
 801576c:	f000 fa7a 	bl	8015c64 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	33e8      	adds	r3, #232	; 0xe8
 8015774:	4618      	mov	r0, r3
 8015776:	f7fd faf3 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015780:	4618      	mov	r0, r3
 8015782:	f7fd f9e5 	bl	8012b50 <_ZN8touchgfx8TextAreaC1Ev>
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801578c:	4618      	mov	r0, r3
 801578e:	f7fd fae7 	bl	8012d60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015798:	4618      	mov	r0, r3
 801579a:	f7ff feeb 	bl	8015574 <_ZN8touchgfx6ButtonC1Ev>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7ff fee5 	bl	8015574 <_ZN8touchgfx6ButtonC1Ev>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80157b0:	4bc6      	ldr	r3, [pc, #792]	; (8015acc <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 80157b2:	60fb      	str	r3, [r7, #12]
 80157b4:	2300      	movs	r3, #0
 80157b6:	613b      	str	r3, [r7, #16]
 80157b8:	f107 030c 	add.w	r3, r7, #12
 80157bc:	cb0c      	ldmia	r3, {r2, r3}
 80157be:	6879      	ldr	r1, [r7, #4]
 80157c0:	f000 fa9a 	bl	8015cf8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f503 7015 	add.w	r0, r3, #596	; 0x254
 80157ca:	4bc1      	ldr	r3, [pc, #772]	; (8015ad0 <_ZN20SecondScreenViewBaseC1Ev+0x38c>)
 80157cc:	617b      	str	r3, [r7, #20]
 80157ce:	2300      	movs	r3, #0
 80157d0:	61bb      	str	r3, [r7, #24]
 80157d2:	f107 0314 	add.w	r3, r7, #20
 80157d6:	cb0c      	ldmia	r3, {r2, r3}
 80157d8:	6879      	ldr	r1, [r7, #4]
 80157da:	f000 faad 	bl	8015d38 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80157e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80157e8:	9300      	str	r3, [sp, #0]
 80157ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80157ee:	2200      	movs	r2, #0
 80157f0:	2100      	movs	r1, #0
 80157f2:	f7fb f999 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80157fc:	2200      	movs	r2, #0
 80157fe:	2100      	movs	r1, #0
 8015800:	2000      	movs	r0, #0
 8015802:	f7fd fe83 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015806:	4603      	mov	r3, r0
 8015808:	4619      	mov	r1, r3
 801580a:	4620      	mov	r0, r4
 801580c:	f7fd f96c 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015816:	f44f 7388 	mov.w	r3, #272	; 0x110
 801581a:	9300      	str	r3, [sp, #0]
 801581c:	2385      	movs	r3, #133	; 0x85
 801581e:	2200      	movs	r2, #0
 8015820:	2100      	movs	r1, #0
 8015822:	f000 faa9 	bl	8015d78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	3370      	adds	r3, #112	; 0x70
 801582a:	2105      	movs	r1, #5
 801582c:	4618      	mov	r0, r3
 801582e:	f000 fac3 	bl	8015db8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015838:	2299      	movs	r2, #153	; 0x99
 801583a:	2166      	movs	r1, #102	; 0x66
 801583c:	2000      	movs	r0, #0
 801583e:	f7fd fe65 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015842:	4605      	mov	r5, r0
 8015844:	22cc      	movs	r2, #204	; 0xcc
 8015846:	2199      	movs	r1, #153	; 0x99
 8015848:	2000      	movs	r0, #0
 801584a:	f7fd fe5f 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801584e:	4606      	mov	r6, r0
 8015850:	2266      	movs	r2, #102	; 0x66
 8015852:	2133      	movs	r1, #51	; 0x33
 8015854:	2000      	movs	r0, #0
 8015856:	f7fd fe59 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801585a:	4680      	mov	r8, r0
 801585c:	2299      	movs	r2, #153	; 0x99
 801585e:	2166      	movs	r1, #102	; 0x66
 8015860:	2033      	movs	r0, #51	; 0x33
 8015862:	f7fd fe53 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015866:	4603      	mov	r3, r0
 8015868:	9300      	str	r3, [sp, #0]
 801586a:	4643      	mov	r3, r8
 801586c:	4632      	mov	r2, r6
 801586e:	4629      	mov	r1, r5
 8015870:	4620      	mov	r0, r4
 8015872:	f000 fab2 	bl	8015dda <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801587c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	2385      	movs	r3, #133	; 0x85
 8015884:	2200      	movs	r2, #0
 8015886:	2100      	movs	r1, #0
 8015888:	f7fb f94e 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	3370      	adds	r3, #112	; 0x70
 8015890:	2100      	movs	r1, #0
 8015892:	4618      	mov	r0, r3
 8015894:	f7fd fb91 	bl	8012fba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80158a4:	4619      	mov	r1, r3
 80158a6:	4610      	mov	r0, r2
 80158a8:	f7fd fba8 	bl	8012ffc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    IngAngValue.setPosition(12, 11, 71, 42);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 80158b2:	232a      	movs	r3, #42	; 0x2a
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	2347      	movs	r3, #71	; 0x47
 80158b8:	220b      	movs	r2, #11
 80158ba:	210c      	movs	r1, #12
 80158bc:	f7fb f934 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    IngAngValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80158c6:	22ff      	movs	r2, #255	; 0xff
 80158c8:	21ff      	movs	r1, #255	; 0xff
 80158ca:	20ff      	movs	r0, #255	; 0xff
 80158cc:	f7fd fe1e 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80158d0:	4603      	mov	r3, r0
 80158d2:	4619      	mov	r1, r3
 80158d4:	4620      	mov	r0, r4
 80158d6:	f7fd f97e 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IngAngValue.setLinespacing(0);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	33e8      	adds	r3, #232	; 0xe8
 80158de:	2100      	movs	r1, #0
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7fd f9cb 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IngAngValueBuffer, INGANGVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 80158ec:	f107 031c 	add.w	r3, r7, #28
 80158f0:	2137      	movs	r1, #55	; 0x37
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fd f906 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80158f8:	f107 031c 	add.w	r3, r7, #28
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7fd f911 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 8015902:	4603      	mov	r3, r0
 8015904:	4a73      	ldr	r2, [pc, #460]	; (8015ad4 <_ZN20SecondScreenViewBaseC1Ev+0x390>)
 8015906:	2105      	movs	r1, #5
 8015908:	4620      	mov	r0, r4
 801590a:	f00a f8cd 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IngAngValue.setWildcard(IngAngValueBuffer);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801591a:	4619      	mov	r1, r3
 801591c:	4610      	mov	r0, r2
 801591e:	f7fd fa35 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IngAngValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8015928:	f107 0320 	add.w	r3, r7, #32
 801592c:	2136      	movs	r1, #54	; 0x36
 801592e:	4618      	mov	r0, r3
 8015930:	f7fd f8e8 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8015934:	8c39      	ldrh	r1, [r7, #32]
 8015936:	4620      	mov	r0, r4
 8015938:	f006 fbb8 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IgnAngDescriptor.setXY(12, 53);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015942:	2235      	movs	r2, #53	; 0x35
 8015944:	210c      	movs	r1, #12
 8015946:	4618      	mov	r0, r3
 8015948:	f7fc fe9c 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    IgnAngDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8015952:	2200      	movs	r2, #0
 8015954:	21dc      	movs	r1, #220	; 0xdc
 8015956:	20ff      	movs	r0, #255	; 0xff
 8015958:	f7fd fdd8 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801595c:	4603      	mov	r3, r0
 801595e:	4619      	mov	r1, r3
 8015960:	4620      	mov	r0, r4
 8015962:	f7fd f938 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IgnAngDescriptor.setLinespacing(0);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801596c:	2100      	movs	r1, #0
 801596e:	4618      	mov	r0, r3
 8015970:	f7fd f984 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IgnAngDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID78));
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f503 7490 	add.w	r4, r3, #288	; 0x120
 801597a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801597e:	2138      	movs	r1, #56	; 0x38
 8015980:	4618      	mov	r0, r3
 8015982:	f7fd f8bf 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8015986:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8015988:	4620      	mov	r0, r4
 801598a:	f006 fb8f 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ErrorMessage.setXY(193, 205);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015994:	22cd      	movs	r2, #205	; 0xcd
 8015996:	21c1      	movs	r1, #193	; 0xc1
 8015998:	4618      	mov	r0, r3
 801599a:	f7fc fe73 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    ErrorMessage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80159a4:	2200      	movs	r2, #0
 80159a6:	21dc      	movs	r1, #220	; 0xdc
 80159a8:	20ff      	movs	r0, #255	; 0xff
 80159aa:	f7fd fdaf 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80159ae:	4603      	mov	r3, r0
 80159b0:	4619      	mov	r1, r3
 80159b2:	4620      	mov	r0, r4
 80159b4:	f7fd f90f 	bl	8012bd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ErrorMessage.setLinespacing(0);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80159be:	2100      	movs	r1, #0
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7fd f95b 	bl	8012c7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(ErrorMessageBuffer, ERRORMESSAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID80).getText());
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f503 74ff 	add.w	r4, r3, #510	; 0x1fe
 80159cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159d0:	213a      	movs	r1, #58	; 0x3a
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fd f896 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80159d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159dc:	4618      	mov	r0, r3
 80159de:	f7fd f8a1 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 80159e2:	4603      	mov	r3, r0
 80159e4:	4a3b      	ldr	r2, [pc, #236]	; (8015ad4 <_ZN20SecondScreenViewBaseC1Ev+0x390>)
 80159e6:	2123      	movs	r1, #35	; 0x23
 80159e8:	4620      	mov	r0, r4
 80159ea:	f00a f85d 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ErrorMessage.setWildcard(ErrorMessageBuffer);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80159fa:	4619      	mov	r1, r3
 80159fc:	4610      	mov	r0, r2
 80159fe:	f7fd f9c5 	bl	8012d8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ErrorMessage.resizeToCurrentText();
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f006 fb25 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ErrorMessage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID79));
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8015a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a18:	2139      	movs	r1, #57	; 0x39
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7fd f872 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8015a20:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8015a22:	4620      	mov	r0, r4
 8015a24:	f006 fb42 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    nextErrorButton.setXY(256, 226);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015a2e:	22e2      	movs	r2, #226	; 0xe2
 8015a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7fc fe25 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    nextErrorButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID));
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8015a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a44:	2104      	movs	r1, #4
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7fc fd9f 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8015a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015a50:	2104      	movs	r1, #4
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7fc fd99 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8015a58:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a60:	4619      	mov	r1, r3
 8015a62:	4620      	mov	r0, r4
 8015a64:	f006 fd30 	bl	801c4c8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    nextErrorButton.setAction(buttonCallback);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8015a74:	4619      	mov	r1, r3
 8015a76:	4610      	mov	r0, r2
 8015a78:	f7ff fd4c 	bl	8015514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    clearErrorsBtn.setXY(193, 226);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015a82:	22e2      	movs	r2, #226	; 0xe2
 8015a84:	21c1      	movs	r1, #193	; 0xc1
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fc fdfc 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
    clearErrorsBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID));
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8015a92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a96:	2103      	movs	r1, #3
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7fc fd76 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8015a9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015aa2:	2103      	movs	r1, #3
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fc fd70 	bl	801258a <_ZN8touchgfx6BitmapC1Et>
 8015aaa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f006 fd07 	bl	801c4c8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    clearErrorsBtn.setAction(buttonCallback);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8015ac6:	e007      	b.n	8015ad8 <_ZN20SecondScreenViewBaseC1Ev+0x394>
 8015ac8:	0802bddc 	.word	0x0802bddc
 8015acc:	08015b6d 	.word	0x08015b6d
 8015ad0:	08015bb1 	.word	0x08015bb1
 8015ad4:	0802b064 	.word	0x0802b064
 8015ad8:	4619      	mov	r1, r3
 8015ada:	4610      	mov	r0, r2
 8015adc:	f7ff fd1a 	bl	8015514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	3340      	adds	r3, #64	; 0x40
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	4610      	mov	r0, r2
 8015aea:	f7fc ff53 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	3370      	adds	r3, #112	; 0x70
 8015af4:	4619      	mov	r1, r3
 8015af6:	4610      	mov	r0, r2
 8015af8:	f7fc ff4c 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IngAngValue);
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	33e8      	adds	r3, #232	; 0xe8
 8015b02:	4619      	mov	r1, r3
 8015b04:	4610      	mov	r0, r2
 8015b06:	f7fc ff45 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IgnAngDescriptor);
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015b12:	4619      	mov	r1, r3
 8015b14:	4610      	mov	r0, r2
 8015b16:	f7fc ff3d 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ErrorMessage);
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015b22:	4619      	mov	r1, r3
 8015b24:	4610      	mov	r0, r2
 8015b26:	f7fc ff35 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(nextErrorButton);
 8015b2a:	687a      	ldr	r2, [r7, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015b32:	4619      	mov	r1, r3
 8015b34:	4610      	mov	r0, r2
 8015b36:	f7fc ff2d 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(clearErrorsBtn);
 8015b3a:	687a      	ldr	r2, [r7, #4]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015b42:	4619      	mov	r1, r3
 8015b44:	4610      	mov	r0, r2
 8015b46:	f7fc ff25 	bl	8012994 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3740      	adds	r7, #64	; 0x40
 8015b50:	46bd      	mov	sp, r7
 8015b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b56:	bf00      	nop

08015b58 <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b083      	sub	sp, #12
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]

}
 8015b60:	bf00      	nop
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void SecondScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
    if (&src == &nextErrorButton)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015b7c:	683a      	ldr	r2, [r7, #0]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d106      	bne.n	8015b90 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //DisplayNextErrorInteraction
        //When nextErrorButton clicked call virtual function
        //Call nextError
        nextError();
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	332c      	adds	r3, #44	; 0x2c
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	4798      	blx	r3
        //ClearErrorsInteraction
        //When clearErrorsBtn clicked call virtual function
        //Call clearErrors
        clearErrors();
    }
}
 8015b8e:	e00b      	b.n	8015ba8 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &clearErrorsBtn)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d105      	bne.n	8015ba8 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        clearErrors();
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	3330      	adds	r3, #48	; 0x30
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	4798      	blx	r3
}
 8015ba8:	bf00      	nop
 8015baa:	3708      	adds	r7, #8
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	3370      	adds	r3, #112	; 0x70
 8015bbe:	683a      	ldr	r2, [r7, #0]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d10c      	bne.n	8015bde <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
    {
        //MoveToMainScreenBtnInteraction
        //When ButtonGoToMainScreen clicked call virtual function
        //Call moveToMainScreen
        moveToMainScreen();
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	3334      	adds	r3, #52	; 0x34
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	4798      	blx	r3

        //MoveToMainScreenInteraction
        //When MoveToMainScreenBtnInteraction completed change screen to Main
        //Go to Main with screen transition towards West
        application().gotoMainScreenSlideTransitionWest();
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7ff fdac 	bl	801572e <_ZN20SecondScreenViewBase11applicationEv>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fb fa63 	bl	80110a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>
    }
}
 8015bde:	bf00      	nop
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	4a08      	ldr	r2, [pc, #32]	; (8015c14 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	3334      	adds	r3, #52	; 0x34
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7fd face 	bl	801319c <_ZN8touchgfx13BoxWithBorderD1Ev>
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff fbe6 	bl	80153d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3708      	adds	r7, #8
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}
 8015c12:	bf00      	nop
 8015c14:	0802be4c 	.word	0x0802be4c

08015c18 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7ff ffe1 	bl	8015be8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8015c26:	2178      	movs	r1, #120	; 0x78
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f013 feaa 	bl	8029982 <_ZdlPvj>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4618      	mov	r0, r3
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	4618      	mov	r0, r3
 8015c44:	f008 fe30 	bl	801e8a8 <_ZN8touchgfx6ScreenC1Ev>
 8015c48:	4a05      	ldr	r2, [pc, #20]	; (8015c60 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	601a      	str	r2, [r3, #0]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2200      	movs	r2, #0
 8015c52:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	4618      	mov	r0, r3
 8015c58:	3708      	adds	r7, #8
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	0802bee0 	.word	0x0802bee0

08015c64 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff fb9e 	bl	80153b0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8015c74:	4a17      	ldr	r2, [pc, #92]	; (8015cd4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	601a      	str	r2, [r3, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3334      	adds	r3, #52	; 0x34
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fd fa66 	bl	8013150 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	3368      	adds	r3, #104	; 0x68
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7fc fc1e 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	336c      	adds	r3, #108	; 0x6c
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7fc fc19 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	3370      	adds	r3, #112	; 0x70
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7fc fc14 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	3374      	adds	r3, #116	; 0x74
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7fc fc0f 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	3334      	adds	r3, #52	; 0x34
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7fc fce5 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3334      	adds	r3, #52	; 0x34
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	4610      	mov	r0, r2
 8015cc4:	f004 fada 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}
 8015cd2:	bf00      	nop
 8015cd4:	0802be4c 	.word	0x0802be4c

08015cd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8015cd8:	b480      	push	{r7}
 8015cda:	b083      	sub	sp, #12
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	4a04      	ldr	r2, [pc, #16]	; (8015cf4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	601a      	str	r2, [r3, #0]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	370c      	adds	r7, #12
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr
 8015cf4:	0802bf14 	.word	0x0802bf14

08015cf8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	4639      	mov	r1, r7
 8015d04:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff ffe4 	bl	8015cd8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8015d10:	4a08      	ldr	r2, [pc, #32]	; (8015d34 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	3308      	adds	r3, #8
 8015d20:	463a      	mov	r2, r7
 8015d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d26:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	0802be34 	.word	0x0802be34

08015d38 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b084      	sub	sp, #16
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	4639      	mov	r1, r7
 8015d44:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f7ff f916 	bl	8014f7c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8015d50:	4a08      	ldr	r2, [pc, #32]	; (8015d74 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	68ba      	ldr	r2, [r7, #8]
 8015d5a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	3308      	adds	r3, #8
 8015d60:	463a      	mov	r2, r7
 8015d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3710      	adds	r7, #16
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	0802be1c 	.word	0x0802be1c

08015d78 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8015d78:	b590      	push	{r4, r7, lr}
 8015d7a:	b087      	sub	sp, #28
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	4608      	mov	r0, r1
 8015d82:	4611      	mov	r1, r2
 8015d84:	461a      	mov	r2, r3
 8015d86:	4603      	mov	r3, r0
 8015d88:	817b      	strh	r3, [r7, #10]
 8015d8a:	460b      	mov	r3, r1
 8015d8c:	813b      	strh	r3, [r7, #8]
 8015d8e:	4613      	mov	r3, r2
 8015d90:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8015d98:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8015d9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015da0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8015da4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	4623      	mov	r3, r4
 8015dac:	f7fa febc 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8015db0:	bf00      	nop
 8015db2:	3714      	adds	r7, #20
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd90      	pop	{r4, r7, pc}

08015db8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	460b      	mov	r3, r1
 8015dc2:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	3334      	adds	r3, #52	; 0x34
 8015dc8:	78fa      	ldrb	r2, [r7, #3]
 8015dca:	4611      	mov	r1, r2
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7fd fa23 	bl	8013218 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 8015dd2:	bf00      	nop
 8015dd4:	3708      	adds	r7, #8
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b084      	sub	sp, #16
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	60f8      	str	r0, [r7, #12]
 8015de2:	60b9      	str	r1, [r7, #8]
 8015de4:	607a      	str	r2, [r7, #4]
 8015de6:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	68ba      	ldr	r2, [r7, #8]
 8015dec:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	683a      	ldr	r2, [r7, #0]
 8015df8:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	69ba      	ldr	r2, [r7, #24]
 8015dfe:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	3384      	adds	r3, #132	; 0x84
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	4798      	blx	r3
    }
 8015e0c:	bf00      	nop
 8015e0e:	3710      	adds	r7, #16
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
    }
 8015e1c:	4a04      	ldr	r2, [pc, #16]	; (8015e30 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	601a      	str	r2, [r3, #0]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4618      	mov	r0, r3
 8015e26:	370c      	adds	r7, #12
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr
 8015e30:	0802bf14 	.word	0x0802bf14

08015e34 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
    }
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7ff ffe9 	bl	8015e14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015e42:	2104      	movs	r1, #4
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f013 fd9c 	bl	8029982 <_ZdlPvj>
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3708      	adds	r7, #8
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8015e54:	b590      	push	{r4, r7, lr}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7fd f89b 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d002      	beq.n	8015e76 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	336c      	adds	r3, #108	; 0x6c
 8015e74:	e001      	b.n	8015e7a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	3368      	adds	r3, #104	; 0x68
 8015e7a:	6819      	ldr	r1, [r3, #0]
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f7fd f9af 	bl	80131e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7fd f888 	bl	8012fa0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015e90:	4603      	mov	r3, r0
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d002      	beq.n	8015e9c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	3374      	adds	r3, #116	; 0x74
 8015e9a:	e001      	b.n	8015ea0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	3370      	adds	r3, #112	; 0x70
 8015ea0:	6819      	ldr	r1, [r3, #0]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f7fd f9aa 	bl	80131fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f7fd f8b4 	bl	8013018 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8015eb0:	bf00      	nop
 8015eb2:	370c      	adds	r7, #12
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd90      	pop	{r4, r7, pc}

08015eb8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b082      	sub	sp, #8
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	4a05      	ldr	r2, [pc, #20]	; (8015ed8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	601a      	str	r2, [r3, #0]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7ff f939 	bl	8015140 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3708      	adds	r7, #8
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}
 8015ed8:	0802be1c 	.word	0x0802be1c

08015edc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7ff ffe7 	bl	8015eb8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015eea:	2110      	movs	r1, #16
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f013 fd48 	bl	8029982 <_ZdlPvj>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3708      	adds	r7, #8
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	4a05      	ldr	r2, [pc, #20]	; (8015f1c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	601a      	str	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ff ff81 	bl	8015e14 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	4618      	mov	r0, r3
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	0802be34 	.word	0x0802be34

08015f20 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7ff ffe7 	bl	8015efc <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015f2e:	2110      	movs	r1, #16
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f013 fd26 	bl	8029982 <_ZdlPvj>
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	68d2      	ldr	r2, [r2, #12]
 8015f52:	1052      	asrs	r2, r2, #1
 8015f54:	1898      	adds	r0, r3, r2
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	f003 0301 	and.w	r3, r3, #1
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d102      	bne.n	8015f68 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	689b      	ldr	r3, [r3, #8]
 8015f66:	e00a      	b.n	8015f7e <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	68d2      	ldr	r2, [r2, #12]
 8015f70:	1052      	asrs	r2, r2, #1
 8015f72:	4413      	add	r3, r2
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	6892      	ldr	r2, [r2, #8]
 8015f7a:	4413      	add	r3, r2
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	6839      	ldr	r1, [r7, #0]
 8015f80:	4798      	blx	r3
    }
 8015f82:	bf00      	nop
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8015f8a:	b480      	push	{r7}
 8015f8c:	b083      	sub	sp, #12
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d010      	beq.n	8015fbc <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	689b      	ldr	r3, [r3, #8]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d107      	bne.n	8015fb2 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	f003 0301 	and.w	r3, r3, #1
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d101      	bne.n	8015fb2 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	e000      	b.n	8015fb4 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d001      	beq.n	8015fbc <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	e000      	b.n	8015fbe <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8015fbc:	2300      	movs	r3, #0
    }
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	370c      	adds	r7, #12
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc8:	4770      	bx	lr

08015fca <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015fca:	b580      	push	{r7, lr}
 8015fcc:	b082      	sub	sp, #8
 8015fce:	af00      	add	r7, sp, #0
 8015fd0:	6078      	str	r0, [r7, #4]
 8015fd2:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	68d2      	ldr	r2, [r2, #12]
 8015fdc:	1052      	asrs	r2, r2, #1
 8015fde:	1898      	adds	r0, r3, r2
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	68db      	ldr	r3, [r3, #12]
 8015fe4:	f003 0301 	and.w	r3, r3, #1
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d102      	bne.n	8015ff2 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	689b      	ldr	r3, [r3, #8]
 8015ff0:	e00a      	b.n	8016008 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	68d2      	ldr	r2, [r2, #12]
 8015ffa:	1052      	asrs	r2, r2, #1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	6892      	ldr	r2, [r2, #8]
 8016004:	4413      	add	r3, r2
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	6839      	ldr	r1, [r7, #0]
 801600a:	4798      	blx	r3
    }
 801600c:	bf00      	nop
 801600e:	3708      	adds	r7, #8
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d010      	beq.n	8016046 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	689b      	ldr	r3, [r3, #8]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d107      	bne.n	801603c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	68db      	ldr	r3, [r3, #12]
 8016030:	f003 0301 	and.w	r3, r3, #1
 8016034:	2b00      	cmp	r3, #0
 8016036:	d101      	bne.n	801603c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8016038:	2301      	movs	r3, #1
 801603a:	e000      	b.n	801603e <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801603c:	2300      	movs	r3, #0
 801603e:	2b01      	cmp	r3, #1
 8016040:	d001      	beq.n	8016046 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8016042:	2301      	movs	r3, #1
 8016044:	e000      	b.n	8016048 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8016046:	2300      	movs	r3, #0
    }
 8016048:	4618      	mov	r0, r3
 801604a:	370c      	adds	r7, #12
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 8016054:	b590      	push	{r4, r7, lr}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	4618      	mov	r0, r3
 8016066:	f7fc ffbc 	bl	8012fe2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801606a:	4603      	mov	r3, r0
 801606c:	4619      	mov	r1, r3
 801606e:	4620      	mov	r0, r4
 8016070:	f7fd f8e2 	bl	8013238 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	4618      	mov	r0, r3
 8016078:	f7fc ffd8 	bl	801302c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801607c:	bf00      	nop
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	bd90      	pop	{r4, r7, pc}

08016084 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8016084:	b480      	push	{r7}
 8016086:	af00      	add	r7, sp, #0
    return bitmap_database;
 8016088:	4b02      	ldr	r3, [pc, #8]	; (8016094 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801608a:	4618      	mov	r0, r3
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr
 8016094:	0802bfb8 	.word	0x0802bfb8

08016098 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8016098:	b480      	push	{r7}
 801609a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801609c:	2305      	movs	r3, #5
}
 801609e:	4618      	mov	r0, r3
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	4613      	mov	r3, r2
 80160b4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80160b6:	4a07      	ldr	r2, [pc, #28]	; (80160d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	6013      	str	r3, [r2, #0]
        fonts = f;
 80160bc:	4a06      	ldr	r2, [pc, #24]	; (80160d8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80160c2:	4a06      	ldr	r2, [pc, #24]	; (80160dc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80160c4:	88fb      	ldrh	r3, [r7, #6]
 80160c6:	8013      	strh	r3, [r2, #0]
    }
 80160c8:	bf00      	nop
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr
 80160d4:	2000bfa8 	.word	0x2000bfa8
 80160d8:	2000bfb0 	.word	0x2000bfb0
 80160dc:	2000bfac 	.word	0x2000bfac

080160e0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80160e0:	b590      	push	{r4, r7, lr}
 80160e2:	b085      	sub	sp, #20
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	4603      	mov	r3, r0
 80160e8:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80160ee:	88fb      	ldrh	r3, [r7, #6]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d127      	bne.n	8016144 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80160f4:	88fb      	ldrh	r3, [r7, #6]
 80160f6:	4a1e      	ldr	r2, [pc, #120]	; (8016170 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80160f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d016      	beq.n	801612e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8016100:	88fb      	ldrh	r3, [r7, #6]
 8016102:	4a1b      	ldr	r2, [pc, #108]	; (8016170 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8016104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016108:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	68ba      	ldr	r2, [r7, #8]
 8016110:	4413      	add	r3, r2
 8016112:	4a18      	ldr	r2, [pc, #96]	; (8016174 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8016114:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	68ba      	ldr	r2, [r7, #8]
 801611c:	4413      	add	r3, r2
 801611e:	4a16      	ldr	r2, [pc, #88]	; (8016178 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8016120:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	689b      	ldr	r3, [r3, #8]
 8016126:	68ba      	ldr	r2, [r7, #8]
 8016128:	4413      	add	r3, r2
 801612a:	60fb      	str	r3, [r7, #12]
 801612c:	e00a      	b.n	8016144 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801612e:	4b11      	ldr	r3, [pc, #68]	; (8016174 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8016130:	4a12      	ldr	r2, [pc, #72]	; (801617c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8016132:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8016134:	4a12      	ldr	r2, [pc, #72]	; (8016180 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8016136:	4b10      	ldr	r3, [pc, #64]	; (8016178 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8016138:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801613a:	88fb      	ldrh	r3, [r7, #6]
 801613c:	4a11      	ldr	r2, [pc, #68]	; (8016184 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801613e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016142:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d00d      	beq.n	8016166 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801614a:	4a0f      	ldr	r2, [pc, #60]	; (8016188 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801614c:	88fb      	ldrh	r3, [r7, #6]
 801614e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8016150:	f000 f83e 	bl	80161d0 <_ZN17TypedTextDatabase8getFontsEv>
 8016154:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8016156:	f000 f833 	bl	80161c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801615a:	4603      	mov	r3, r0
 801615c:	461a      	mov	r2, r3
 801615e:	4621      	mov	r1, r4
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	f7ff ffa1 	bl	80160a8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8016166:	bf00      	nop
 8016168:	3714      	adds	r7, #20
 801616a:	46bd      	mov	sp, r7
 801616c:	bd90      	pop	{r4, r7, pc}
 801616e:	bf00      	nop
 8016170:	200086fc 	.word	0x200086fc
 8016174:	20008704 	.word	0x20008704
 8016178:	20008708 	.word	0x20008708
 801617c:	0806959c 	.word	0x0806959c
 8016180:	08069484 	.word	0x08069484
 8016184:	080698fc 	.word	0x080698fc
 8016188:	20008700 	.word	0x20008700

0801618c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801618c:	b480      	push	{r7}
 801618e:	b083      	sub	sp, #12
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	460b      	mov	r3, r1
 8016196:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8016198:	4b07      	ldr	r3, [pc, #28]	; (80161b8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	4b07      	ldr	r3, [pc, #28]	; (80161bc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801619e:	6819      	ldr	r1, [r3, #0]
 80161a0:	887b      	ldrh	r3, [r7, #2]
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	440b      	add	r3, r1
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	005b      	lsls	r3, r3, #1
 80161aa:	4413      	add	r3, r2
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	370c      	adds	r7, #12
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr
 80161b8:	20008704 	.word	0x20008704
 80161bc:	20008708 	.word	0x20008708

080161c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80161c0:	b480      	push	{r7}
 80161c2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80161c4:	2346      	movs	r3, #70	; 0x46
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr

080161d0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80161d0:	b480      	push	{r7}
 80161d2:	af00      	add	r7, sp, #0
    return _fonts;
 80161d4:	4b02      	ldr	r3, [pc, #8]	; (80161e0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	46bd      	mov	sp, r7
 80161da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161de:	4770      	bx	lr
 80161e0:	2000870c 	.word	0x2000870c

080161e4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	6039      	str	r1, [r7, #0]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d127      	bne.n	8016244 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161fa:	4293      	cmp	r3, r2
 80161fc:	d122      	bne.n	8016244 <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 80161fe:	f7fa fa55 	bl	80106ac <_Z25getFont_Asap_Bold_18_4bppv>
 8016202:	4602      	mov	r2, r0
};
 8016204:	4b11      	ldr	r3, [pc, #68]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016206:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8016208:	f7fa fb16 	bl	8010838 <_Z25getFont_Asap_Bold_40_4bppv>
 801620c:	4602      	mov	r2, r0
};
 801620e:	4b0f      	ldr	r3, [pc, #60]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016210:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8016212:	f7fa facf 	bl	80107b4 <_Z25getFont_Asap_Bold_30_4bppv>
 8016216:	4602      	mov	r2, r0
};
 8016218:	4b0c      	ldr	r3, [pc, #48]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801621a:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 801621c:	f7fa fa04 	bl	8010628 <_Z25getFont_Asap_Bold_12_4bppv>
 8016220:	4602      	mov	r2, r0
};
 8016222:	4b0a      	ldr	r3, [pc, #40]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016224:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8016226:	f7fa fb49 	bl	80108bc <_Z25getFont_Asap_Bold_60_4bppv>
 801622a:	4602      	mov	r2, r0
};
 801622c:	4b07      	ldr	r3, [pc, #28]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801622e:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8016230:	f7fa fa7e 	bl	8010730 <_Z25getFont_Asap_Bold_21_4bppv>
 8016234:	4602      	mov	r2, r0
};
 8016236:	4b05      	ldr	r3, [pc, #20]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016238:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 801623a:	f7fa f9b3 	bl	80105a4 <_Z25getFont_Asap_Bold_10_4bppv>
 801623e:	4602      	mov	r2, r0
};
 8016240:	4b02      	ldr	r3, [pc, #8]	; (801624c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016242:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8016244:	bf00      	nop
 8016246:	3708      	adds	r7, #8
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	2000870c 	.word	0x2000870c

08016250 <_GLOBAL__sub_I__fonts>:
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0
 8016254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016258:	2001      	movs	r0, #1
 801625a:	f7ff ffc3 	bl	80161e4 <_Z41__static_initialization_and_destruction_0ii>
 801625e:	bd80      	pop	{r7, pc}

08016260 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8016260:	b580      	push	{r7, lr}
 8016262:	b082      	sub	sp, #8
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
 8016268:	4a05      	ldr	r2, [pc, #20]	; (8016280 <_ZN19FrontendApplicationD1Ev+0x20>)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	601a      	str	r2, [r3, #0]
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	4618      	mov	r0, r3
 8016272:	f7fa fdfb 	bl	8010e6c <_ZN23FrontendApplicationBaseD1Ev>
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	4618      	mov	r0, r3
 801627a:	3708      	adds	r7, #8
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}
 8016280:	0802c024 	.word	0x0802c024

08016284 <_ZN19FrontendApplicationD0Ev>:
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f7ff ffe7 	bl	8016260 <_ZN19FrontendApplicationD1Ev>
 8016292:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f013 fb73 	bl	8029982 <_ZdlPvj>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	4618      	mov	r0, r3
 80162a0:	3708      	adds	r7, #8
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}

080162a6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b082      	sub	sp, #8
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80162b4:	4618      	mov	r0, r3
 80162b6:	f000 fd6f 	bl	8016d98 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	4618      	mov	r0, r3
 80162be:	f007 fa77 	bl	801d7b0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80162c2:	bf00      	nop
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
	...

080162cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	68b9      	ldr	r1, [r7, #8]
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fa fe3e 	bl	8010f60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80162e4:	4a03      	ldr	r2, [pc, #12]	; (80162f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	601a      	str	r2, [r3, #0]
{
}
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	4618      	mov	r0, r3
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	0802c024 	.word	0x0802c024

080162f8 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    {
    }
 8016300:	bf00      	nop
 8016302:	370c      	adds	r7, #12
 8016304:	46bd      	mov	sp, r7
 8016306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630a:	4770      	bx	lr

0801630c <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801630c:	b480      	push	{r7}
 801630e:	b083      	sub	sp, #12
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
    {
    }
 8016314:	bf00      	nop
 8016316:	370c      	adds	r7, #12
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8016320:	b480      	push	{r7}
 8016322:	b083      	sub	sp, #12
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
    {
 8016328:	4a04      	ldr	r2, [pc, #16]	; (801633c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	601a      	str	r2, [r3, #0]
    }
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	4618      	mov	r0, r3
 8016332:	370c      	adds	r7, #12
 8016334:	46bd      	mov	sp, r7
 8016336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633a:	4770      	bx	lr
 801633c:	0802c0b0 	.word	0x0802c0b0

08016340 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
    }
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f7ff ffe9 	bl	8016320 <_ZN8touchgfx9PresenterD1Ev>
 801634e:	2104      	movs	r1, #4
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f013 fb16 	bl	8029982 <_ZdlPvj>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	3708      	adds	r7, #8
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}

08016360 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8016360:	b480      	push	{r7}
 8016362:	b083      	sub	sp, #12
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
    {
 8016368:	4a04      	ldr	r2, [pc, #16]	; (801637c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	601a      	str	r2, [r3, #0]
    }
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	4618      	mov	r0, r3
 8016372:	370c      	adds	r7, #12
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr
 801637c:	0802c0b0 	.word	0x0802c0b0

08016380 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8016380:	b480      	push	{r7}
 8016382:	b083      	sub	sp, #12
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	4a06      	ldr	r2, [pc, #24]	; (80163a4 <_ZN13ModelListenerC1Ev+0x24>)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	601a      	str	r2, [r3, #0]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2200      	movs	r2, #0
 8016392:	605a      	str	r2, [r3, #4]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	4618      	mov	r0, r3
 8016398:	370c      	adds	r7, #12
 801639a:	46bd      	mov	sp, r7
 801639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a0:	4770      	bx	lr
 80163a2:	bf00      	nop
 80163a4:	0802c098 	.word	0x0802c098

080163a8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80163a8:	b480      	push	{r7}
 80163aa:	b083      	sub	sp, #12
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	4a04      	ldr	r2, [pc, #16]	; (80163c4 <_ZN13ModelListenerD1Ev+0x1c>)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	601a      	str	r2, [r3, #0]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	4618      	mov	r0, r3
 80163ba:	370c      	adds	r7, #12
 80163bc:	46bd      	mov	sp, r7
 80163be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c2:	4770      	bx	lr
 80163c4:	0802c098 	.word	0x0802c098

080163c8 <_ZN13ModelListenerD0Ev>:
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b082      	sub	sp, #8
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f7ff ffe9 	bl	80163a8 <_ZN13ModelListenerD1Ev>
 80163d6:	2108      	movs	r1, #8
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f013 fad2 	bl	8029982 <_ZdlPvj>
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	4618      	mov	r0, r3
 80163e2:	3708      	adds	r7, #8
 80163e4:	46bd      	mov	sp, r7
 80163e6:	bd80      	pop	{r7, pc}

080163e8 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
 80163f0:	6039      	str	r1, [r7, #0]
 80163f2:	bf00      	nop
 80163f4:	370c      	adds	r7, #12
 80163f6:	46bd      	mov	sp, r7
 80163f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fc:	4770      	bx	lr

080163fe <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 80163fe:	b480      	push	{r7}
 8016400:	b083      	sub	sp, #12
 8016402:	af00      	add	r7, sp, #0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	6039      	str	r1, [r7, #0]
 8016408:	bf00      	nop
 801640a:	370c      	adds	r7, #12
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr

08016414 <_ZN13MainPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~MainPresenter() {
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	4a09      	ldr	r2, [pc, #36]	; (8016444 <_ZN13MainPresenterD1Ev+0x30>)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	4a09      	ldr	r2, [pc, #36]	; (8016448 <_ZN13MainPresenterD1Ev+0x34>)
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	605a      	str	r2, [r3, #4]
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	3304      	adds	r3, #4
 801642c:	4618      	mov	r0, r3
 801642e:	f7ff ffbb 	bl	80163a8 <_ZN13ModelListenerD1Ev>
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	4618      	mov	r0, r3
 8016436:	f7ff ff73 	bl	8016320 <_ZN8touchgfx9PresenterD1Ev>
	}
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	4618      	mov	r0, r3
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	0802c060 	.word	0x0802c060
 8016448:	0802c080 	.word	0x0802c080

0801644c <_ZThn4_N13MainPresenterD1Ev>:
	virtual ~MainPresenter() {
 801644c:	f1a0 0004 	sub.w	r0, r0, #4
 8016450:	e7e0      	b.n	8016414 <_ZN13MainPresenterD1Ev>
 8016452:	bf00      	nop

08016454 <_ZN13MainPresenterD0Ev>:
 8016454:	b580      	push	{r7, lr}
 8016456:	b082      	sub	sp, #8
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
	}
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f7ff ffd9 	bl	8016414 <_ZN13MainPresenterD1Ev>
 8016462:	2110      	movs	r1, #16
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f013 fa8c 	bl	8029982 <_ZdlPvj>
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	4618      	mov	r0, r3
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <_ZThn4_N13MainPresenterD0Ev>:
	virtual ~MainPresenter() {
 8016474:	f1a0 0004 	sub.w	r0, r0, #4
 8016478:	e7ec      	b.n	8016454 <_ZN13MainPresenterD0Ev>
	...

0801647c <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
 8016484:	6039      	str	r1, [r7, #0]
    : view(v)
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	4618      	mov	r0, r3
 801648a:	f7ff ff69 	bl	8016360 <_ZN8touchgfx9PresenterC1Ev>
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	3304      	adds	r3, #4
 8016492:	4618      	mov	r0, r3
 8016494:	f7ff ff74 	bl	8016380 <_ZN13ModelListenerC1Ev>
 8016498:	4a06      	ldr	r2, [pc, #24]	; (80164b4 <_ZN13MainPresenterC1ER8MainView+0x38>)
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	601a      	str	r2, [r3, #0]
 801649e:	4a06      	ldr	r2, [pc, #24]	; (80164b8 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	605a      	str	r2, [r3, #4]
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	60da      	str	r2, [r3, #12]
{
}
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	4618      	mov	r0, r3
 80164ae:	3708      	adds	r7, #8
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}
 80164b4:	0802c060 	.word	0x0802c060
 80164b8:	0802c080 	.word	0x0802c080

080164bc <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
	 model -> saveCurrentScreenIndex(1);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	689b      	ldr	r3, [r3, #8]
 80164c8:	2101      	movs	r1, #1
 80164ca:	4618      	mov	r0, r3
 80164cc:	f000 fca6 	bl	8016e1c <_ZN5Model22saveCurrentScreenIndexEi>
}
 80164d0:	bf00      	nop
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}

080164d8 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
}
 80164e0:	bf00      	nop
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	6839      	ldr	r1, [r7, #0]
 80164fc:	4618      	mov	r0, r3
 80164fe:	f000 fa05 	bl	801690c <_ZN8MainView9updateValEPh>
}
 8016502:	bf00      	nop
 8016504:	3708      	adds	r7, #8
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}

0801650a <_ZThn4_N13MainPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 801650a:	f1a0 0004 	sub.w	r0, r0, #4
 801650e:	f7ff bfed 	b.w	80164ec <_ZN13MainPresenter11setNewValueEPh>

08016512 <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8016512:	b580      	push	{r7, lr}
 8016514:	b082      	sub	sp, #8
 8016516:	af00      	add	r7, sp, #0
 8016518:	6078      	str	r0, [r7, #4]
 801651a:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	6839      	ldr	r1, [r7, #0]
 8016522:	4618      	mov	r0, r3
 8016524:	f000 f916 	bl	8016754 <_ZN8MainView14updateSettingsEPh>
}
 8016528:	bf00      	nop
 801652a:	3708      	adds	r7, #8
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}

08016530 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
	void updateDisplaySettings(uint8_t *settings);
 8016530:	f1a0 0004 	sub.w	r0, r0, #4
 8016534:	f7ff bfed 	b.w	8016512 <_ZN13MainPresenter21updateDisplaySettingsEPh>

08016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	460b      	mov	r3, r1
 8016542:	607a      	str	r2, [r7, #4]
 8016544:	ed87 0a00 	vstr	s0, [r7]
 8016548:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 801654a:	463b      	mov	r3, r7
 801654c:	8979      	ldrh	r1, [r7, #10]
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	68f8      	ldr	r0, [r7, #12]
 8016552:	f009 fc03 	bl	801fd5c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8016556:	4603      	mov	r3, r0
    }
 8016558:	4618      	mov	r0, r3
 801655a:	3710      	adds	r7, #16
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}

08016560 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8016560:	b480      	push	{r7}
 8016562:	b083      	sub	sp, #12
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
        return rect.width;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801656e:	4618      	mov	r0, r3
 8016570:	370c      	adds	r7, #12
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr

0801657a <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 801657a:	b480      	push	{r7}
 801657c:	b083      	sub	sp, #12
 801657e:	af00      	add	r7, sp, #0
 8016580:	6078      	str	r0, [r7, #4]
        return rect.height;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8016588:	4618      	mov	r0, r3
 801658a:	370c      	adds	r7, #12
 801658c:	46bd      	mov	sp, r7
 801658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016592:	4770      	bx	lr

08016594 <_ZN13MainPresenter26getManualErrorChangeScreenEv>:

	bool getManualErrorChangeScreen() {
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
		return model->getManualErrorChangeScreen();
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	689b      	ldr	r3, [r3, #8]
 80165a0:	4618      	mov	r0, r3
 80165a2:	f000 fc5b 	bl	8016e5c <_ZN5Model26getManualErrorChangeScreenEv>
 80165a6:	4603      	mov	r3, r0
	}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3708      	adds	r7, #8
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	4a05      	ldr	r2, [pc, #20]	; (80165d0 <_ZN8MainViewD1Ev+0x20>)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	601a      	str	r2, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7fc fe6b 	bl	801329c <_ZN12MainViewBaseD1Ev>
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	4618      	mov	r0, r3
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	0802c0c8 	.word	0x0802c0c8

080165d4 <_ZN8MainViewD0Ev>:
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7ff ffe7 	bl	80165b0 <_ZN8MainViewD1Ev>
 80165e2:	f642 0144 	movw	r1, #10308	; 0x2844
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f013 f9cb 	bl	8029982 <_ZdlPvj>
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
	...

080165f8 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView() {
 80165f8:	b590      	push	{r4, r7, lr}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4618      	mov	r0, r3
 8016604:	f7fc ffac 	bl	8013560 <_ZN12MainViewBaseC1Ev>
 8016608:	4a15      	ldr	r2, [pc, #84]	; (8016660 <_ZN8MainViewC1Ev+0x68>)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	601a      	str	r2, [r3, #0]
	// Support of larger displays for this example
	// is handled by showing a black box in the
	// unused part of the display.
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 801660e:	4b15      	ldr	r3, [pc, #84]	; (8016664 <_ZN8MainViewC1Ev+0x6c>)
 8016610:	881b      	ldrh	r3, [r3, #0]
 8016612:	461c      	mov	r4, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801661a:	4618      	mov	r0, r3
 801661c:	f7ff ffa0 	bl	8016560 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016620:	4603      	mov	r3, r0
			|| HAL::DISPLAY_HEIGHT > backgroundImage.getHeight()) {
 8016622:	429c      	cmp	r4, r3
 8016624:	dc0b      	bgt.n	801663e <_ZN8MainViewC1Ev+0x46>
 8016626:	4b10      	ldr	r3, [pc, #64]	; (8016668 <_ZN8MainViewC1Ev+0x70>)
 8016628:	881b      	ldrh	r3, [r3, #0]
 801662a:	461c      	mov	r4, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8016632:	4618      	mov	r0, r3
 8016634:	f7ff ffa1 	bl	801657a <_ZNK8touchgfx8Drawable9getHeightEv>
 8016638:	4603      	mov	r3, r0
 801663a:	429c      	cmp	r4, r3
 801663c:	dd01      	ble.n	8016642 <_ZN8MainViewC1Ev+0x4a>
 801663e:	2301      	movs	r3, #1
 8016640:	e000      	b.n	8016644 <_ZN8MainViewC1Ev+0x4c>
 8016642:	2300      	movs	r3, #0
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 8016644:	2b00      	cmp	r3, #0
 8016646:	d005      	beq.n	8016654 <_ZN8MainViewC1Ev+0x5c>
		backgroundBox.setVisible(true);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	3340      	adds	r3, #64	; 0x40
 801664c:	2101      	movs	r1, #1
 801664e:	4618      	mov	r0, r3
 8016650:	f7fc f889 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
	}
}
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	4618      	mov	r0, r3
 8016658:	370c      	adds	r7, #12
 801665a:	46bd      	mov	sp, r7
 801665c:	bd90      	pop	{r4, r7, pc}
 801665e:	bf00      	nop
 8016660:	0802c0c8 	.word	0x0802c0c8
 8016664:	2000bf0a 	.word	0x2000bf0a
 8016668:	2000bf0c 	.word	0x2000bf0c

0801666c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen() {
 801666c:	b480      	push	{r7}
 801666e:	b083      	sub	sp, #12
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
}
 8016674:	bf00      	nop
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr

08016680 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen() {
 8016680:	b480      	push	{r7}
 8016682:	b083      	sub	sp, #12
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
}
 8016688:	bf00      	nop
 801668a:	370c      	adds	r7, #12
 801668c:	46bd      	mov	sp, r7
 801668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016692:	4770      	bx	lr

08016694 <_ZL11getRedColorv>:

static colortype getRedColor() {
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 801669a:	2200      	movs	r2, #0
 801669c:	2100      	movs	r1, #0
 801669e:	20ff      	movs	r0, #255	; 0xff
 80166a0:	f7fc ff34 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80166a4:	4603      	mov	r3, r0
 80166a6:	607b      	str	r3, [r7, #4]
	return black_color;
 80166a8:	687b      	ldr	r3, [r7, #4]
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3708      	adds	r7, #8
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <_ZL13getBlackColorv>:

static colortype getBlackColor() {
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b082      	sub	sp, #8
 80166b6:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80166b8:	2200      	movs	r2, #0
 80166ba:	2100      	movs	r1, #0
 80166bc:	2000      	movs	r0, #0
 80166be:	f7fc ff25 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80166c2:	4603      	mov	r3, r0
 80166c4:	607b      	str	r3, [r7, #4]
	return black_color;
 80166c6:	687b      	ldr	r3, [r7, #4]
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit() {
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b084      	sub	sp, #16
 80166d4:	af00      	add	r7, sp, #0

	color_index++;
 80166d6:	4b1e      	ldr	r3, [pc, #120]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	3301      	adds	r3, #1
 80166dc:	4a1c      	ldr	r2, [pc, #112]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 80166de:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 80166e0:	4b1b      	ldr	r3, [pc, #108]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b02      	cmp	r3, #2
 80166e6:	dd02      	ble.n	80166ee <_ZL20getColorFromRevLimitv+0x1e>
		color_index = 0;
 80166e8:	4b19      	ldr	r3, [pc, #100]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 80166ea:	2200      	movs	r2, #0
 80166ec:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 80166ee:	2200      	movs	r2, #0
 80166f0:	2100      	movs	r1, #0
 80166f2:	20ff      	movs	r0, #255	; 0xff
 80166f4:	f7fc ff0a 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80166f8:	4603      	mov	r3, r0
 80166fa:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80166fc:	2200      	movs	r2, #0
 80166fe:	2100      	movs	r1, #0
 8016700:	2000      	movs	r0, #0
 8016702:	f7fc ff03 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016706:	4603      	mov	r3, r0
 8016708:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 801670a:	22ff      	movs	r2, #255	; 0xff
 801670c:	21ff      	movs	r1, #255	; 0xff
 801670e:	20ff      	movs	r0, #255	; 0xff
 8016710:	f7fc fefc 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016714:	4603      	mov	r3, r0
 8016716:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8016718:	463b      	mov	r3, r7
 801671a:	4618      	mov	r0, r3
 801671c:	f7fb fed5 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8016720:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d101      	bne.n	801672c <_ZL20getColorFromRevLimitv+0x5c>
		color_to_set = red_color;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 801672c:	4b08      	ldr	r3, [pc, #32]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b01      	cmp	r3, #1
 8016732:	d101      	bne.n	8016738 <_ZL20getColorFromRevLimitv+0x68>
		color_to_set = black_color;
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8016738:	4b05      	ldr	r3, [pc, #20]	; (8016750 <_ZL20getColorFromRevLimitv+0x80>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	2b02      	cmp	r3, #2
 801673e:	d101      	bne.n	8016744 <_ZL20getColorFromRevLimitv+0x74>
		color_to_set = white_color;
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8016744:	683b      	ldr	r3, [r7, #0]
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	20008728 	.word	0x20008728

08016754 <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t *settings) {
 8016754:	b580      	push	{r7, lr}
 8016756:	b086      	sub	sp, #24
 8016758:	af02      	add	r7, sp, #8
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
	settings_message *new_settings = (settings_message*) settings;
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	60fb      	str	r3, [r7, #12]

	rev_limit = (int) new_settings->rpm_limit;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4a66      	ldr	r2, [pc, #408]	; (8016900 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8016768:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int) (new_settings->rpm8 * 1000.0f), 0, 0);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	6a1b      	ldr	r3, [r3, #32]
 8016774:	ee07 3a90 	vmov	s15, r3
 8016778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801677c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8016904 <_ZN8MainView14updateSettingsEPh+0x1b0>
 8016780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016788:	ee17 3a90 	vmov	r3, s15
 801678c:	b21a      	sxth	r2, r3
 801678e:	2300      	movs	r3, #0
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	2300      	movs	r3, #0
 8016794:	2100      	movs	r1, #0
 8016796:	f003 fc3d 	bl	801a014 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80167a0:	4618      	mov	r0, r3
 80167a2:	f007 fd19 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	685b      	ldr	r3, [r3, #4]
 80167b0:	4a55      	ldr	r2, [pc, #340]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80167b2:	2102      	movs	r1, #2
 80167b4:	f009 f978 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80167be:	4618      	mov	r0, r3
 80167c0:	f005 fc4a 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80167ca:	4618      	mov	r0, r3
 80167cc:	f007 fd04 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	689b      	ldr	r3, [r3, #8]
 80167da:	4a4b      	ldr	r2, [pc, #300]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80167dc:	2102      	movs	r1, #2
 80167de:	f009 f963 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80167e8:	4618      	mov	r0, r3
 80167ea:	f005 fc35 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80167f4:	4618      	mov	r0, r3
 80167f6:	f007 fcef 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	68db      	ldr	r3, [r3, #12]
 8016804:	4a40      	ldr	r2, [pc, #256]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8016806:	2102      	movs	r1, #2
 8016808:	f009 f94e 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8016812:	4618      	mov	r0, r3
 8016814:	f005 fc20 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801681e:	4618      	mov	r0, r3
 8016820:	f007 fcda 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	691b      	ldr	r3, [r3, #16]
 801682e:	4a36      	ldr	r2, [pc, #216]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8016830:	2102      	movs	r1, #2
 8016832:	f009 f939 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801683c:	4618      	mov	r0, r3
 801683e:	f005 fc0b 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8016848:	4618      	mov	r0, r3
 801684a:	f007 fcc5 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	695b      	ldr	r3, [r3, #20]
 8016858:	4a2b      	ldr	r2, [pc, #172]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801685a:	2102      	movs	r1, #2
 801685c:	f009 f924 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8016866:	4618      	mov	r0, r3
 8016868:	f005 fbf6 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8016872:	4618      	mov	r0, r3
 8016874:	f007 fcb0 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	699b      	ldr	r3, [r3, #24]
 8016882:	4a21      	ldr	r2, [pc, #132]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8016884:	2102      	movs	r1, #2
 8016886:	f009 f90f 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8016890:	4618      	mov	r0, r3
 8016892:	f005 fbe1 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 801689c:	4618      	mov	r0, r3
 801689e:	f007 fc9b 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	69db      	ldr	r3, [r3, #28]
 80168ac:	4a16      	ldr	r2, [pc, #88]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80168ae:	2102      	movs	r1, #2
 80168b0:	f009 f8fa 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80168ba:	4618      	mov	r0, r3
 80168bc:	f005 fbcc 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80168c6:	4618      	mov	r0, r3
 80168c8:	f007 fc86 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	6a1b      	ldr	r3, [r3, #32]
 80168d6:	4a0c      	ldr	r2, [pc, #48]	; (8016908 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80168d8:	2102      	movs	r1, #2
 80168da:	f009 f8e5 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80168e4:	4618      	mov	r0, r3
 80168e6:	f005 fbb7 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80168f0:	4618      	mov	r0, r3
 80168f2:	f007 fc71 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80168f6:	bf00      	nop
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	20000038 	.word	0x20000038
 8016904:	447a0000 	.word	0x447a0000
 8016908:	0802b1c8 	.word	0x0802b1c8

0801690c <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t *newValue) {
 801690c:	b590      	push	{r4, r7, lr}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
	static bool background_is_black = false;
	display_values *values = (display_values*) newValue;
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	4b1b      	ldr	r3, [pc, #108]	; (801698c <_ZN8MainView9updateValEPh+0x80>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	429a      	cmp	r2, r3
 8016924:	bfac      	ite	ge
 8016926:	2301      	movge	r3, #1
 8016928:	2300      	movlt	r3, #0
 801692a:	72fb      	strb	r3, [r7, #11]
	bool has_error = ((int) values->emu_errors) > 0;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016930:	2b00      	cmp	r3, #0
 8016932:	bfcc      	ite	gt
 8016934:	2301      	movgt	r3, #1
 8016936:	2300      	movle	r3, #0
 8016938:	72bb      	strb	r3, [r7, #10]
	if (has_error) {
 801693a:	7abb      	ldrb	r3, [r7, #10]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d00f      	beq.n	8016960 <_ZN8MainView9updateValEPh+0x54>
		backgroundBox.setColor(getRedColor());
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8016946:	f7ff fea5 	bl	8016694 <_ZL11getRedColorv>
 801694a:	4603      	mov	r3, r0
 801694c:	4619      	mov	r1, r3
 801694e:	4620      	mov	r0, r4
 8016950:	f7fc f8ca 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	3340      	adds	r3, #64	; 0x40
 8016958:	4618      	mov	r0, r3
 801695a:	f007 fc3d 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 801695e:	e032      	b.n	80169c6 <_ZN8MainView9updateValEPh+0xba>
	} else if (on_rev_limiter) {
 8016960:	7afb      	ldrb	r3, [r7, #11]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d016      	beq.n	8016994 <_ZN8MainView9updateValEPh+0x88>
		background_is_black = false;
 8016966:	4b0a      	ldr	r3, [pc, #40]	; (8016990 <_ZN8MainView9updateValEPh+0x84>)
 8016968:	2200      	movs	r2, #0
 801696a:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8016972:	f7ff fead 	bl	80166d0 <_ZL20getColorFromRevLimitv>
 8016976:	4603      	mov	r3, r0
 8016978:	4619      	mov	r1, r3
 801697a:	4620      	mov	r0, r4
 801697c:	f7fc f8b4 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	3340      	adds	r3, #64	; 0x40
 8016984:	4618      	mov	r0, r3
 8016986:	f007 fc27 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 801698a:	e01c      	b.n	80169c6 <_ZN8MainView9updateValEPh+0xba>
 801698c:	20000038 	.word	0x20000038
 8016990:	2000874c 	.word	0x2000874c
	} else if (!background_is_black) {
 8016994:	4bac      	ldr	r3, [pc, #688]	; (8016c48 <_ZN8MainView9updateValEPh+0x33c>)
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	f083 0301 	eor.w	r3, r3, #1
 801699c:	b2db      	uxtb	r3, r3
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d011      	beq.n	80169c6 <_ZN8MainView9updateValEPh+0xba>
		backgroundBox.setColor(getBlackColor());
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80169a8:	f7ff fe83 	bl	80166b2 <_ZL13getBlackColorv>
 80169ac:	4603      	mov	r3, r0
 80169ae:	4619      	mov	r1, r3
 80169b0:	4620      	mov	r0, r4
 80169b2:	f7fc f899 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	3340      	adds	r3, #64	; 0x40
 80169ba:	4618      	mov	r0, r3
 80169bc:	f007 fc0c 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 80169c0:	4ba1      	ldr	r3, [pc, #644]	; (8016c48 <_ZN8MainView9updateValEPh+0x33c>)
 80169c2:	2201      	movs	r2, #1
 80169c4:	701a      	strb	r2, [r3, #0]
	}

	if (values->rpm != prev_rpm) {
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	4ba0      	ldr	r3, [pc, #640]	; (8016c4c <_ZN8MainView9updateValEPh+0x340>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d021      	beq.n	8016a16 <_ZN8MainView9updateValEPh+0x10a>
		prev_rpm = values->rpm;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4a9d      	ldr	r2, [pc, #628]	; (8016c4c <_ZN8MainView9updateValEPh+0x340>)
 80169d8:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	4619      	mov	r1, r3
 80169e6:	4610      	mov	r0, r2
 80169e8:	f003 f9fe 	bl	8019de8 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80169f2:	4618      	mov	r0, r3
 80169f4:	f007 fbf0 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	4a93      	ldr	r2, [pc, #588]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016a04:	2105      	movs	r1, #5
 8016a06:	f009 f84f 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8016a10:	4618      	mov	r0, r3
 8016a12:	f007 fbe1 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->map != prev_map) {
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	689a      	ldr	r2, [r3, #8]
 8016a1a:	4b8e      	ldr	r3, [pc, #568]	; (8016c54 <_ZN8MainView9updateValEPh+0x348>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d012      	beq.n	8016a48 <_ZN8MainView9updateValEPh+0x13c>
		prev_map = values->map;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	689b      	ldr	r3, [r3, #8]
 8016a26:	4a8b      	ldr	r2, [pc, #556]	; (8016c54 <_ZN8MainView9updateValEPh+0x348>)
 8016a28:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	689b      	ldr	r3, [r3, #8]
 8016a34:	4a86      	ldr	r2, [pc, #536]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016a36:	2105      	movs	r1, #5
 8016a38:	f009 f836 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8016a42:	4618      	mov	r0, r3
 8016a44:	f007 fbc8 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->clt != prev_clt) {
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	685a      	ldr	r2, [r3, #4]
 8016a4c:	4b82      	ldr	r3, [pc, #520]	; (8016c58 <_ZN8MainView9updateValEPh+0x34c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d012      	beq.n	8016a7a <_ZN8MainView9updateValEPh+0x16e>
		prev_clt = values->clt;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	4a7f      	ldr	r2, [pc, #508]	; (8016c58 <_ZN8MainView9updateValEPh+0x34c>)
 8016a5a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	4a7a      	ldr	r2, [pc, #488]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016a68:	2105      	movs	r1, #5
 8016a6a:	f009 f81d 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8016a74:	4618      	mov	r0, r3
 8016a76:	f007 fbaf 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda != prev_lambda) {
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	ed93 7a03 	vldr	s14, [r3, #12]
 8016a80:	4b76      	ldr	r3, [pc, #472]	; (8016c5c <_ZN8MainView9updateValEPh+0x350>)
 8016a82:	edd3 7a00 	vldr	s15, [r3]
 8016a86:	eeb4 7a67 	vcmp.f32	s14, s15
 8016a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8e:	d015      	beq.n	8016abc <_ZN8MainView9updateValEPh+0x1b0>
		prev_lambda = values->lambda;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	4a71      	ldr	r2, [pc, #452]	; (8016c5c <_ZN8MainView9updateValEPh+0x350>)
 8016a96:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8016aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8016aa8:	4a6d      	ldr	r2, [pc, #436]	; (8016c60 <_ZN8MainView9updateValEPh+0x354>)
 8016aaa:	2105      	movs	r1, #5
 8016aac:	f7ff fd44 	bl	8016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda);
		LambdaValue.invalidate();
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f007 fb8e 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda_trgt != prev_lambda_targ) {
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	ed93 7a04 	vldr	s14, [r3, #16]
 8016ac2:	4b68      	ldr	r3, [pc, #416]	; (8016c64 <_ZN8MainView9updateValEPh+0x358>)
 8016ac4:	edd3 7a00 	vldr	s15, [r3]
 8016ac8:	eeb4 7a67 	vcmp.f32	s14, s15
 8016acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad0:	d015      	beq.n	8016afe <_ZN8MainView9updateValEPh+0x1f2>
		prev_lambda_targ = values->lambda_trgt;
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	691b      	ldr	r3, [r3, #16]
 8016ad6:	4a63      	ldr	r2, [pc, #396]	; (8016c64 <_ZN8MainView9updateValEPh+0x358>)
 8016ad8:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	edd3 7a04 	vldr	s15, [r3, #16]
 8016ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8016aea:	4a5d      	ldr	r2, [pc, #372]	; (8016c60 <_ZN8MainView9updateValEPh+0x354>)
 8016aec:	2105      	movs	r1, #5
 8016aee:	f7ff fd23 	bl	8016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda_trgt);
		TrgtValue.invalidate();
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016af8:	4618      	mov	r0, r3
 8016afa:	f007 fb6d 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_press != prev_oil_press) {
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	ed93 7a06 	vldr	s14, [r3, #24]
 8016b04:	4b58      	ldr	r3, [pc, #352]	; (8016c68 <_ZN8MainView9updateValEPh+0x35c>)
 8016b06:	edd3 7a00 	vldr	s15, [r3]
 8016b0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8016b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b12:	d015      	beq.n	8016b40 <_ZN8MainView9updateValEPh+0x234>
		prev_oil_press = values->oil_press;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	699b      	ldr	r3, [r3, #24]
 8016b18:	4a53      	ldr	r2, [pc, #332]	; (8016c68 <_ZN8MainView9updateValEPh+0x35c>)
 8016b1a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE,
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8016b28:	eeb0 0a67 	vmov.f32	s0, s15
 8016b2c:	4a4f      	ldr	r2, [pc, #316]	; (8016c6c <_ZN8MainView9updateValEPh+0x360>)
 8016b2e:	2105      	movs	r1, #5
 8016b30:	f7ff fd02 	bl	8016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->oil_press);
		OILPressureValue.invalidate();
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f007 fb4c 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->fuel_press != prev_fuel_press) {
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	69da      	ldr	r2, [r3, #28]
 8016b44:	4b4a      	ldr	r3, [pc, #296]	; (8016c70 <_ZN8MainView9updateValEPh+0x364>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d012      	beq.n	8016b72 <_ZN8MainView9updateValEPh+0x266>
		prev_fuel_press = values->fuel_press;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	69db      	ldr	r3, [r3, #28]
 8016b50:	4a47      	ldr	r2, [pc, #284]	; (8016c70 <_ZN8MainView9updateValEPh+0x364>)
 8016b52:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	69db      	ldr	r3, [r3, #28]
 8016b5e:	4a3c      	ldr	r2, [pc, #240]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016b60:	2105      	movs	r1, #5
 8016b62:	f008 ffa1 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->fuel_press);
		FuelPValue.invalidate();
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f007 fb33 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_tmp != prev_oil_tmp) {
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	695a      	ldr	r2, [r3, #20]
 8016b76:	4b3f      	ldr	r3, [pc, #252]	; (8016c74 <_ZN8MainView9updateValEPh+0x368>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d012      	beq.n	8016ba4 <_ZN8MainView9updateValEPh+0x298>
		prev_oil_tmp = values->oil_tmp;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	695b      	ldr	r3, [r3, #20]
 8016b82:	4a3c      	ldr	r2, [pc, #240]	; (8016c74 <_ZN8MainView9updateValEPh+0x368>)
 8016b84:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	695b      	ldr	r3, [r3, #20]
 8016b90:	4a2f      	ldr	r2, [pc, #188]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016b92:	2105      	movs	r1, #5
 8016b94:	f008 ff88 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->oil_tmp);
		OILTempValue.invalidate();
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f007 fb1a 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->iat != prev_iat) {
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	6a1a      	ldr	r2, [r3, #32]
 8016ba8:	4b33      	ldr	r3, [pc, #204]	; (8016c78 <_ZN8MainView9updateValEPh+0x36c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d012      	beq.n	8016bd6 <_ZN8MainView9updateValEPh+0x2ca>
		prev_iat = values->iat;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	6a1b      	ldr	r3, [r3, #32]
 8016bb4:	4a30      	ldr	r2, [pc, #192]	; (8016c78 <_ZN8MainView9updateValEPh+0x36c>)
 8016bb6:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d", values->iat);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	6a1b      	ldr	r3, [r3, #32]
 8016bc2:	4a23      	ldr	r2, [pc, #140]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016bc4:	2105      	movs	r1, #5
 8016bc6:	f008 ff6f 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f007 fb01 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt != prev_egt) {
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016bda:	4b28      	ldr	r3, [pc, #160]	; (8016c7c <_ZN8MainView9updateValEPh+0x370>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d012      	beq.n	8016c08 <_ZN8MainView9updateValEPh+0x2fc>
		prev_egt = values->egt;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016be6:	4a25      	ldr	r2, [pc, #148]	; (8016c7c <_ZN8MainView9updateValEPh+0x370>)
 8016be8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d", values->egt);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bf4:	4a16      	ldr	r2, [pc, #88]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016bf6:	2105      	movs	r1, #5
 8016bf8:	f008 ff56 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8016c02:	4618      	mov	r0, r3
 8016c04:	f007 fae8 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt_2 != prev_egt_2) {
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016c0c:	4b1c      	ldr	r3, [pc, #112]	; (8016c80 <_ZN8MainView9updateValEPh+0x374>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d012      	beq.n	8016c3a <_ZN8MainView9updateValEPh+0x32e>
		prev_egt_2 = values->egt_2;
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c18:	4a19      	ldr	r2, [pc, #100]	; (8016c80 <_ZN8MainView9updateValEPh+0x374>)
 8016c1a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d", values->egt_2);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c26:	4a0a      	ldr	r2, [pc, #40]	; (8016c50 <_ZN8MainView9updateValEPh+0x344>)
 8016c28:	2105      	movs	r1, #5
 8016c2a:	f008 ff3d 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8016c34:	4618      	mov	r0, r3
 8016c36:	f007 facf 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tps != prev_tps) {
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c3e:	4b11      	ldr	r3, [pc, #68]	; (8016c84 <_ZN8MainView9updateValEPh+0x378>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d042      	beq.n	8016ccc <_ZN8MainView9updateValEPh+0x3c0>
 8016c46:	e01f      	b.n	8016c88 <_ZN8MainView9updateValEPh+0x37c>
 8016c48:	2000874c 	.word	0x2000874c
 8016c4c:	2000003c 	.word	0x2000003c
 8016c50:	0802b1c8 	.word	0x0802b1c8
 8016c54:	20000040 	.word	0x20000040
 8016c58:	20000044 	.word	0x20000044
 8016c5c:	20000048 	.word	0x20000048
 8016c60:	0802b1cc 	.word	0x0802b1cc
 8016c64:	2000004c 	.word	0x2000004c
 8016c68:	20008730 	.word	0x20008730
 8016c6c:	0802b1d4 	.word	0x0802b1d4
 8016c70:	20008734 	.word	0x20008734
 8016c74:	2000872c 	.word	0x2000872c
 8016c78:	20008738 	.word	0x20008738
 8016c7c:	2000873c 	.word	0x2000873c
 8016c80:	20008740 	.word	0x20008740
 8016c84:	20008744 	.word	0x20008744
		prev_tps = values->tps;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8c:	4a2e      	ldr	r2, [pc, #184]	; (8016d48 <_ZN8MainView9updateValEPh+0x43c>)
 8016c8e:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9a:	4619      	mov	r1, r3
 8016c9c:	4610      	mov	r0, r2
 8016c9e:	f002 ff53 	bl	8019b48 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f007 fa95 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cb8:	4a24      	ldr	r2, [pc, #144]	; (8016d4c <_ZN8MainView9updateValEPh+0x440>)
 8016cba:	2105      	movs	r1, #5
 8016cbc:	f008 fef4 	bl	801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->tps);
		TpsNumberValue.invalidate();
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f007 fa86 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->batt_v != prev_batt_v) {
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8016cd2:	4b1f      	ldr	r3, [pc, #124]	; (8016d50 <_ZN8MainView9updateValEPh+0x444>)
 8016cd4:	edd3 7a00 	vldr	s15, [r3]
 8016cd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8016cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce0:	d015      	beq.n	8016d0e <_ZN8MainView9updateValEPh+0x402>
		prev_batt_v = values->batt_v;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ce6:	4a1a      	ldr	r2, [pc, #104]	; (8016d50 <_ZN8MainView9updateValEPh+0x444>)
 8016ce8:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE,
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8016cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8016cfa:	4a16      	ldr	r2, [pc, #88]	; (8016d54 <_ZN8MainView9updateValEPh+0x448>)
 8016cfc:	2105      	movs	r1, #5
 8016cfe:	f7ff fc1b 	bl	8016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.2f", values->batt_v);
		BatteryVoltage.invalidate();
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f007 fa65 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (has_error && !presenter->getManualErrorChangeScreen()) {
 8016d0e:	7abb      	ldrb	r3, [r7, #10]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d00c      	beq.n	8016d2e <_ZN8MainView9updateValEPh+0x422>
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7ff fc3b 	bl	8016594 <_ZN13MainPresenter26getManualErrorChangeScreenEv>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	f083 0301 	eor.w	r3, r3, #1
 8016d24:	b2db      	uxtb	r3, r3
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d001      	beq.n	8016d2e <_ZN8MainView9updateValEPh+0x422>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <_ZN8MainView9updateValEPh+0x424>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d005      	beq.n	8016d40 <_ZN8MainView9updateValEPh+0x434>
		static_cast<FrontendApplication*>(Application::getInstance())->gotoSecondScreenScreenSlideTransitionEast();
 8016d34:	f006 fe22 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fa f9f8 	bl	8011130 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
	}
}
 8016d40:	bf00      	nop
 8016d42:	3714      	adds	r7, #20
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd90      	pop	{r4, r7, pc}
 8016d48:	20008744 	.word	0x20008744
 8016d4c:	0802b1c8 	.word	0x0802b1c8
 8016d50:	20008748 	.word	0x20008748
 8016d54:	0802b1cc 	.word	0x0802b1cc

08016d58 <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2200      	movs	r2, #0
 8016d64:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 8016d66:	2200      	movs	r2, #0
 8016d68:	213c      	movs	r1, #60	; 0x3c
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	f7f6 faf9 	bl	800d362 <xQueueGenericCreate>
 8016d70:	4602      	mov	r2, r0
 8016d72:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <_ZN5ModelC1Ev+0x38>)
 8016d74:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 8016d76:	2200      	movs	r2, #0
 8016d78:	2128      	movs	r1, #40	; 0x28
 8016d7a:	2001      	movs	r0, #1
 8016d7c:	f7f6 faf1 	bl	800d362 <xQueueGenericCreate>
 8016d80:	4602      	mov	r2, r0
 8016d82:	4b04      	ldr	r3, [pc, #16]	; (8016d94 <_ZN5ModelC1Ev+0x3c>)
 8016d84:	601a      	str	r2, [r3, #0]
}
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	4618      	mov	r0, r3
 8016d8a:	3708      	adds	r7, #8
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	200087bc 	.word	0x200087bc
 8016d94:	200087c0 	.word	0x200087c0

08016d98 <_ZN5Model4tickEv>:

void Model::tick()
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8016da0:	4b1a      	ldr	r3, [pc, #104]	; (8016e0c <_ZN5Model4tickEv+0x74>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2200      	movs	r2, #0
 8016da6:	491a      	ldr	r1, [pc, #104]	; (8016e10 <_ZN5Model4tickEv+0x78>)
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7f6 fd6b 	bl	800d884 <xQueueReceive>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	bf0c      	ite	eq
 8016db4:	2301      	moveq	r3, #1
 8016db6:	2300      	movne	r3, #0
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d009      	beq.n	8016dd2 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	3308      	adds	r3, #8
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	4910      	ldr	r1, [pc, #64]	; (8016e10 <_ZN5Model4tickEv+0x78>)
 8016dce:	4610      	mov	r0, r2
 8016dd0:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 8016dd2:	4b10      	ldr	r3, [pc, #64]	; (8016e14 <_ZN5Model4tickEv+0x7c>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	490f      	ldr	r1, [pc, #60]	; (8016e18 <_ZN5Model4tickEv+0x80>)
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7f6 fd52 	bl	800d884 <xQueueReceive>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b01      	cmp	r3, #1
 8016de4:	bf0c      	ite	eq
 8016de6:	2301      	moveq	r3, #1
 8016de8:	2300      	movne	r3, #0
 8016dea:	b2db      	uxtb	r3, r3
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d009      	beq.n	8016e04 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681a      	ldr	r2, [r3, #0]
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	330c      	adds	r3, #12
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	4906      	ldr	r1, [pc, #24]	; (8016e18 <_ZN5Model4tickEv+0x80>)
 8016e00:	4610      	mov	r0, r2
 8016e02:	4798      	blx	r3
	}
}
 8016e04:	bf00      	nop
 8016e06:	3708      	adds	r7, #8
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	200087bc 	.word	0x200087bc
 8016e10:	20008750 	.word	0x20008750
 8016e14:	200087c0 	.word	0x200087c0
 8016e18:	2000878c 	.word	0x2000878c

08016e1c <_ZN5Model22saveCurrentScreenIndexEi>:

void Model::saveCurrentScreenIndex(int cScreen)
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b083      	sub	sp, #12
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	6039      	str	r1, [r7, #0]
	currentScreenIndex = cScreen;
 8016e26:	4a04      	ldr	r2, [pc, #16]	; (8016e38 <_ZN5Model22saveCurrentScreenIndexEi+0x1c>)
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	6013      	str	r3, [r2, #0]
}
 8016e2c:	bf00      	nop
 8016e2e:	370c      	adds	r7, #12
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr
 8016e38:	200087b4 	.word	0x200087b4

08016e3c <_ZN5Model26setManualErrorChangeScreenEv>:
int Model::getCurrentScreenIndex()
{
	return currentScreenIndex;
}

void Model::setManualErrorChangeScreen() {
 8016e3c:	b480      	push	{r7}
 8016e3e:	b083      	sub	sp, #12
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
	manualErrorScreenChange = true;
 8016e44:	4b04      	ldr	r3, [pc, #16]	; (8016e58 <_ZN5Model26setManualErrorChangeScreenEv+0x1c>)
 8016e46:	2201      	movs	r2, #1
 8016e48:	701a      	strb	r2, [r3, #0]
}
 8016e4a:	bf00      	nop
 8016e4c:	370c      	adds	r7, #12
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr
 8016e56:	bf00      	nop
 8016e58:	200087b8 	.word	0x200087b8

08016e5c <_ZN5Model26getManualErrorChangeScreenEv>:

bool Model::getManualErrorChangeScreen() {
 8016e5c:	b480      	push	{r7}
 8016e5e:	b083      	sub	sp, #12
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
	return manualErrorScreenChange;
 8016e64:	4b03      	ldr	r3, [pc, #12]	; (8016e74 <_ZN5Model26getManualErrorChangeScreenEv+0x18>)
 8016e66:	781b      	ldrb	r3, [r3, #0]
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	370c      	adds	r7, #12
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr
 8016e74:	200087b8 	.word	0x200087b8

08016e78 <_ZN21SecondScreenPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~SecondScreenPresenter() {
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	4a09      	ldr	r2, [pc, #36]	; (8016ea8 <_ZN21SecondScreenPresenterD1Ev+0x30>)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	601a      	str	r2, [r3, #0]
 8016e86:	4a09      	ldr	r2, [pc, #36]	; (8016eac <_ZN21SecondScreenPresenterD1Ev+0x34>)
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	605a      	str	r2, [r3, #4]
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	3304      	adds	r3, #4
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7ff fa89 	bl	80163a8 <_ZN13ModelListenerD1Ev>
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7ff fa41 	bl	8016320 <_ZN8touchgfx9PresenterD1Ev>
	}
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}
 8016ea8:	0802c0fc 	.word	0x0802c0fc
 8016eac:	0802c11c 	.word	0x0802c11c

08016eb0 <_ZThn4_N21SecondScreenPresenterD1Ev>:
	virtual ~SecondScreenPresenter() {
 8016eb0:	f1a0 0004 	sub.w	r0, r0, #4
 8016eb4:	e7e0      	b.n	8016e78 <_ZN21SecondScreenPresenterD1Ev>
 8016eb6:	bf00      	nop

08016eb8 <_ZN21SecondScreenPresenterD0Ev>:
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
	}
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f7ff ffd9 	bl	8016e78 <_ZN21SecondScreenPresenterD1Ev>
 8016ec6:	2110      	movs	r1, #16
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f012 fd5a 	bl	8029982 <_ZdlPvj>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	3708      	adds	r7, #8
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	bd80      	pop	{r7, pc}

08016ed8 <_ZThn4_N21SecondScreenPresenterD0Ev>:
	virtual ~SecondScreenPresenter() {
 8016ed8:	f1a0 0004 	sub.w	r0, r0, #4
 8016edc:	e7ec      	b.n	8016eb8 <_ZN21SecondScreenPresenterD0Ev>
	...

08016ee0 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
    : view(v)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ff fa37 	bl	8016360 <_ZN8touchgfx9PresenterC1Ev>
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	3304      	adds	r3, #4
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7ff fa42 	bl	8016380 <_ZN13ModelListenerC1Ev>
 8016efc:	4a06      	ldr	r2, [pc, #24]	; (8016f18 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	601a      	str	r2, [r3, #0]
 8016f02:	4a06      	ldr	r2, [pc, #24]	; (8016f1c <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	605a      	str	r2, [r3, #4]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	683a      	ldr	r2, [r7, #0]
 8016f0c:	60da      	str	r2, [r3, #12]
{

}
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	4618      	mov	r0, r3
 8016f12:	3708      	adds	r7, #8
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}
 8016f18:	0802c0fc 	.word	0x0802c0fc
 8016f1c:	0802c11c 	.word	0x0802c11c

08016f20 <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
	model -> saveCurrentScreenIndex(2);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	2102      	movs	r1, #2
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7ff ff74 	bl	8016e1c <_ZN5Model22saveCurrentScreenIndexEi>
}
 8016f34:	bf00      	nop
 8016f36:	3708      	adds	r7, #8
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bd80      	pop	{r7, pc}

08016f3c <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]

}
 8016f44:	bf00      	nop
 8016f46:	370c      	adds	r7, #12
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <_ZN21SecondScreenPresenter11setNewValueEPh>:

void SecondScreenPresenter::setNewValue(uint8_t* newValue)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	68db      	ldr	r3, [r3, #12]
 8016f5e:	6839      	ldr	r1, [r7, #0]
 8016f60:	4618      	mov	r0, r3
 8016f62:	f000 f94d 	bl	8017200 <_ZN16SecondScreenView9updateValEPh>
}
 8016f66:	bf00      	nop
 8016f68:	3708      	adds	r7, #8
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <_ZThn4_N21SecondScreenPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 8016f6e:	f1a0 0004 	sub.w	r0, r0, #4
 8016f72:	f7ff bfed 	b.w	8016f50 <_ZN21SecondScreenPresenter11setNewValueEPh>

08016f76 <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>:

void SecondScreenPresenter::updateDisplaySettings(uint8_t* settings)
{
 8016f76:	b580      	push	{r7, lr}
 8016f78:	b082      	sub	sp, #8
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
 8016f7e:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	68db      	ldr	r3, [r3, #12]
 8016f84:	6839      	ldr	r1, [r7, #0]
 8016f86:	4618      	mov	r0, r3
 8016f88:	f000 f918 	bl	80171bc <_ZN16SecondScreenView14updateSettingsEPh>
}
 8016f8c:	bf00      	nop
 8016f8e:	3708      	adds	r7, #8
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}

08016f94 <_ZThn4_N21SecondScreenPresenter21updateDisplaySettingsEPh>:

	void updateDisplaySettings(uint8_t *settings);
 8016f94:	f1a0 0004 	sub.w	r0, r0, #4
 8016f98:	f7ff bfed 	b.w	8016f76 <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>

08016f9c <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>:

	void setManualErrorChangeScreen() {
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
		model->setManualErrorChangeScreen();
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7ff ff47 	bl	8016e3c <_ZN5Model26setManualErrorChangeScreenEv>
	}
 8016fae:	bf00      	nop
 8016fb0:	3708      	adds	r7, #8
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bd80      	pop	{r7, pc}

08016fb6 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 8016fb6:	b480      	push	{r7}
 8016fb8:	b083      	sub	sp, #12
 8016fba:	af00      	add	r7, sp, #0
 8016fbc:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	881b      	ldrh	r3, [r3, #0]
 8016fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fc6:	4293      	cmp	r3, r2
 8016fc8:	bf14      	ite	ne
 8016fca:	2301      	movne	r3, #1
 8016fcc:	2300      	moveq	r3, #0
 8016fce:	b2db      	uxtb	r3, r3
    }
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	370c      	adds	r7, #12
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 8016fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fde:	b085      	sub	sp, #20
 8016fe0:	af02      	add	r7, sp, #8
 8016fe2:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard, 0) : 0;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	3326      	adds	r3, #38	; 0x26
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7ff ffe4 	bl	8016fb6 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d020      	beq.n	8017036 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5a>
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	3326      	adds	r3, #38	; 0x26
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f9 f9c1 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 8016ffe:	4605      	mov	r5, r0
 8017000:	682b      	ldr	r3, [r5, #0]
 8017002:	331c      	adds	r3, #28
 8017004:	681c      	ldr	r4, [r3, #0]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	3326      	adds	r3, #38	; 0x26
 801700a:	4618      	mov	r0, r3
 801700c:	f7f9 f9d4 	bl	80103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017010:	4603      	mov	r3, r0
 8017012:	461e      	mov	r6, r3
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	3326      	adds	r3, #38	; 0x26
 8017018:	4618      	mov	r0, r3
 801701a:	f7fb fd83 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801701e:	4601      	mov	r1, r0
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017024:	2300      	movs	r3, #0
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	4613      	mov	r3, r2
 801702a:	460a      	mov	r2, r1
 801702c:	4631      	mov	r1, r6
 801702e:	4628      	mov	r0, r5
 8017030:	47a0      	blx	r4
 8017032:	4603      	mov	r3, r0
 8017034:	e000      	b.n	8017038 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5c>
 8017036:	2300      	movs	r3, #0
    }
 8017038:	4618      	mov	r0, r3
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017040 <_ZN16SecondScreenViewD1Ev>:
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

class SecondScreenView: public SecondScreenViewBase {
public:
	SecondScreenView();
	virtual ~SecondScreenView() {
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
 8017048:	4a05      	ldr	r2, [pc, #20]	; (8017060 <_ZN16SecondScreenViewD1Ev+0x20>)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	601a      	str	r2, [r3, #0]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	4618      	mov	r0, r3
 8017052:	f7fe faf7 	bl	8015644 <_ZN20SecondScreenViewBaseD1Ev>
	}
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	4618      	mov	r0, r3
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	0802c134 	.word	0x0802c134

08017064 <_ZN16SecondScreenViewD0Ev>:
	virtual ~SecondScreenView() {
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
	}
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f7ff ffe7 	bl	8017040 <_ZN16SecondScreenViewD1Ev>
 8017072:	f44f 7119 	mov.w	r1, #612	; 0x264
 8017076:	6878      	ldr	r0, [r7, #4]
 8017078:	f012 fc83 	bl	8029982 <_ZdlPvj>
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	4618      	mov	r0, r3
 8017080:	3708      	adds	r7, #8
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}
	...

08017088 <_ZN16SecondScreenViewC1Ev>:
static int color_index = 0;
static int error_screen_blinks = 0;
static TEXTS* error;
static unsigned cutrrentErrorIndex = 0;

SecondScreenView::SecondScreenView() {
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	4618      	mov	r0, r3
 8017094:	f7fe fb56 	bl	8015744 <_ZN20SecondScreenViewBaseC1Ev>
 8017098:	4a03      	ldr	r2, [pc, #12]	; (80170a8 <_ZN16SecondScreenViewC1Ev+0x20>)
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	601a      	str	r2, [r3, #0]

}
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	4618      	mov	r0, r3
 80170a2:	3708      	adds	r7, #8
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}
 80170a8:	0802c134 	.word	0x0802c134

080170ac <_ZL13getBlackColorv>:

static colortype getBlackColor() {
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b082      	sub	sp, #8
 80170b0:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 80170b2:	2200      	movs	r2, #0
 80170b4:	2100      	movs	r1, #0
 80170b6:	2000      	movs	r0, #0
 80170b8:	f7fc fa28 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80170bc:	4603      	mov	r3, r0
 80170be:	607b      	str	r3, [r7, #4]
	return black_color;
 80170c0:	687b      	ldr	r3, [r7, #4]
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3708      	adds	r7, #8
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}

080170ca <_ZL11getRedColorv>:

static colortype getRedColor() {
 80170ca:	b580      	push	{r7, lr}
 80170cc:	b082      	sub	sp, #8
 80170ce:	af00      	add	r7, sp, #0
	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 80170d0:	2200      	movs	r2, #0
 80170d2:	2100      	movs	r1, #0
 80170d4:	20ff      	movs	r0, #255	; 0xff
 80170d6:	f7fc fa19 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80170da:	4603      	mov	r3, r0
 80170dc:	607b      	str	r3, [r7, #4]
	return red_color;
 80170de:	687b      	ldr	r3, [r7, #4]
}
 80170e0:	4618      	mov	r0, r3
 80170e2:	3708      	adds	r7, #8
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}

080170e8 <_ZL17getColorForErrorsv>:

static colortype getColorForErrors() {
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b084      	sub	sp, #16
 80170ec:	af00      	add	r7, sp, #0

	color_index++;
 80170ee:	4b24      	ldr	r3, [pc, #144]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	3301      	adds	r3, #1
 80170f4:	4a22      	ldr	r2, [pc, #136]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 80170f6:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 80170f8:	4b21      	ldr	r3, [pc, #132]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2b02      	cmp	r3, #2
 80170fe:	dd0f      	ble.n	8017120 <_ZL17getColorForErrorsv+0x38>
		color_index = 0;
 8017100:	4b1f      	ldr	r3, [pc, #124]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 8017102:	2200      	movs	r2, #0
 8017104:	601a      	str	r2, [r3, #0]
		error_screen_blinks++;
 8017106:	4b1f      	ldr	r3, [pc, #124]	; (8017184 <_ZL17getColorForErrorsv+0x9c>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	3301      	adds	r3, #1
 801710c:	4a1d      	ldr	r2, [pc, #116]	; (8017184 <_ZL17getColorForErrorsv+0x9c>)
 801710e:	6013      	str	r3, [r2, #0]
		if (error_screen_blinks > 1000000) {
 8017110:	4b1c      	ldr	r3, [pc, #112]	; (8017184 <_ZL17getColorForErrorsv+0x9c>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	4a1c      	ldr	r2, [pc, #112]	; (8017188 <_ZL17getColorForErrorsv+0xa0>)
 8017116:	4293      	cmp	r3, r2
 8017118:	dd02      	ble.n	8017120 <_ZL17getColorForErrorsv+0x38>
			error_screen_blinks = 0;
 801711a:	4b1a      	ldr	r3, [pc, #104]	; (8017184 <_ZL17getColorForErrorsv+0x9c>)
 801711c:	2200      	movs	r2, #0
 801711e:	601a      	str	r2, [r3, #0]
		}
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8017120:	2200      	movs	r2, #0
 8017122:	2100      	movs	r1, #0
 8017124:	20ff      	movs	r0, #255	; 0xff
 8017126:	f7fc f9f1 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801712a:	4603      	mov	r3, r0
 801712c:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 801712e:	2200      	movs	r2, #0
 8017130:	2100      	movs	r1, #0
 8017132:	2000      	movs	r0, #0
 8017134:	f7fc f9ea 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017138:	4603      	mov	r3, r0
 801713a:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 801713c:	22ff      	movs	r2, #255	; 0xff
 801713e:	21ff      	movs	r1, #255	; 0xff
 8017140:	20ff      	movs	r0, #255	; 0xff
 8017142:	f7fc f9e3 	bl	801350c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017146:	4603      	mov	r3, r0
 8017148:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 801714a:	463b      	mov	r3, r7
 801714c:	4618      	mov	r0, r3
 801714e:	f7fb f9bc 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8017152:	4b0b      	ldr	r3, [pc, #44]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d101      	bne.n	801715e <_ZL17getColorForErrorsv+0x76>
		color_to_set = red_color;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 801715e:	4b08      	ldr	r3, [pc, #32]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	2b01      	cmp	r3, #1
 8017164:	d101      	bne.n	801716a <_ZL17getColorForErrorsv+0x82>
		color_to_set = black_color;
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 801716a:	4b05      	ldr	r3, [pc, #20]	; (8017180 <_ZL17getColorForErrorsv+0x98>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	2b02      	cmp	r3, #2
 8017170:	d101      	bne.n	8017176 <_ZL17getColorForErrorsv+0x8e>
		color_to_set = white_color;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8017176:	683b      	ldr	r3, [r7, #0]
}
 8017178:	4618      	mov	r0, r3
 801717a:	3710      	adds	r7, #16
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	200087c4 	.word	0x200087c4
 8017184:	200087c8 	.word	0x200087c8
 8017188:	000f4240 	.word	0x000f4240

0801718c <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen() {
 801718c:	b580      	push	{r7, lr}
 801718e:	b082      	sub	sp, #8
 8017190:	af00      	add	r7, sp, #0
 8017192:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::setupScreen();
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	4618      	mov	r0, r3
 8017198:	f7fe fcde 	bl	8015b58 <_ZN20SecondScreenViewBase11setupScreenEv>
}
 801719c:	bf00      	nop
 801719e:	3708      	adds	r7, #8
 80171a0:	46bd      	mov	sp, r7
 80171a2:	bd80      	pop	{r7, pc}

080171a4 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen() {
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b082      	sub	sp, #8
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::tearDownScreen();
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7fb fbd0 	bl	8012954 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80171b4:	bf00      	nop
 80171b6:	3708      	adds	r7, #8
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}

080171bc <_ZN16SecondScreenView14updateSettingsEPh>:

void SecondScreenView::updateSettings(uint8_t *settings) {
 80171bc:	b480      	push	{r7}
 80171be:	b083      	sub	sp, #12
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	6039      	str	r1, [r7, #0]
}
 80171c6:	bf00      	nop
 80171c8:	370c      	adds	r7, #12
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr

080171d2 <_ZL11isKthBitSetii>:

static bool isKthBitSet(int n, int k) {
 80171d2:	b480      	push	{r7}
 80171d4:	b083      	sub	sp, #12
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
 80171da:	6039      	str	r1, [r7, #0]
	if (n & (1 << (k - 1))) {
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	3b01      	subs	r3, #1
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	fa42 f303 	asr.w	r3, r2, r3
 80171e6:	f003 0301 	and.w	r3, r3, #1
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d001      	beq.n	80171f2 <_ZL11isKthBitSetii+0x20>
		return true;
 80171ee:	2301      	movs	r3, #1
 80171f0:	e000      	b.n	80171f4 <_ZL11isKthBitSetii+0x22>
	} else {
		return false;
 80171f2:	2300      	movs	r3, #0
	}
}
 80171f4:	4618      	mov	r0, r3
 80171f6:	370c      	adds	r7, #12
 80171f8:	46bd      	mov	sp, r7
 80171fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fe:	4770      	bx	lr

08017200 <_ZN16SecondScreenView9updateValEPh>:
			break;
	}
	return a;
}

void SecondScreenView::updateVal(uint8_t *newValue) {
 8017200:	b590      	push	{r4, r7, lr}
 8017202:	b093      	sub	sp, #76	; 0x4c
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]

	display_values *values = (display_values*) newValue;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	647b      	str	r3, [r7, #68]	; 0x44

	if (values->ing_ang != prev_ign_ang) {
 801720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017210:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8017214:	4bbd      	ldr	r3, [pc, #756]	; (801750c <_ZN16SecondScreenView9updateValEPh+0x30c>)
 8017216:	edd3 7a00 	vldr	s15, [r3]
 801721a:	eeb4 7a67 	vcmp.f32	s14, s15
 801721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017222:	d014      	beq.n	801724e <_ZN16SecondScreenView9updateValEPh+0x4e>
		prev_ign_ang = values->ing_ang;
 8017224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017228:	4ab8      	ldr	r2, [pc, #736]	; (801750c <_ZN16SecondScreenView9updateValEPh+0x30c>)
 801722a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(IngAngValueBuffer, INGANGVALUE_SIZE, "%.1f",
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8017232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017234:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8017238:	eeb0 0a67 	vmov.f32	s0, s15
 801723c:	4ab4      	ldr	r2, [pc, #720]	; (8017510 <_ZN16SecondScreenView9updateValEPh+0x310>)
 801723e:	2105      	movs	r1, #5
 8017240:	f7ff f97a 	bl	8016538 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->ing_ang);
		IngAngValue.invalidate();
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	33e8      	adds	r3, #232	; 0xe8
 8017248:	4618      	mov	r0, r3
 801724a:	f006 ffc5 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	bool has_error = ((int) values->emu_errors) > 0;
 801724e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017252:	2b00      	cmp	r3, #0
 8017254:	bfcc      	ite	gt
 8017256:	2301      	movgt	r3, #1
 8017258:	2300      	movle	r3, #0
 801725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (has_error) {
 801725e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017262:	2b00      	cmp	r3, #0
 8017264:	f000 815a 	beq.w	801751c <_ZN16SecondScreenView9updateValEPh+0x31c>
		if (error_screen_blinks < 100) {
 8017268:	4baa      	ldr	r3, [pc, #680]	; (8017514 <_ZN16SecondScreenView9updateValEPh+0x314>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	2b63      	cmp	r3, #99	; 0x63
 801726e:	dc0a      	bgt.n	8017286 <_ZN16SecondScreenView9updateValEPh+0x86>
			backgroundBox.setColor(getColorForErrors());
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017276:	f7ff ff37 	bl	80170e8 <_ZL17getColorForErrorsv>
 801727a:	4603      	mov	r3, r0
 801727c:	4619      	mov	r1, r3
 801727e:	4620      	mov	r0, r4
 8017280:	f7fb fc32 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 8017284:	e009      	b.n	801729a <_ZN16SecondScreenView9updateValEPh+0x9a>
		} else {
			backgroundBox.setColor(getRedColor());
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801728c:	f7ff ff1d 	bl	80170ca <_ZL11getRedColorv>
 8017290:	4603      	mov	r3, r0
 8017292:	4619      	mov	r1, r3
 8017294:	4620      	mov	r0, r4
 8017296:	f7fb fc27 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	3340      	adds	r3, #64	; 0x40
 801729e:	4618      	mov	r0, r3
 80172a0:	f006 ff9a 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>

		if (isKthBitSet((int) values->emu_errors, (int) 1)) {
 80172a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172a8:	2101      	movs	r1, #1
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7ff ff91 	bl	80171d2 <_ZL11isKthBitSetii>
 80172b0:	4603      	mov	r3, r0
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d010      	beq.n	80172d8 <_ZN16SecondScreenView9updateValEPh+0xd8>
			ErrorMessage.setTypedText(TypedText(T_COOLANT_SENSOR_FAILURE));
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80172bc:	f107 030c 	add.w	r3, r7, #12
 80172c0:	213b      	movs	r1, #59	; 0x3b
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fb fc1e 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80172c8:	89b9      	ldrh	r1, [r7, #12]
 80172ca:	4620      	mov	r0, r4
 80172cc:	f004 feee 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 80172d0:	4b91      	ldr	r3, [pc, #580]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	223b      	movs	r2, #59	; 0x3b
 80172d6:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 2)) {
 80172d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172dc:	2102      	movs	r1, #2
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff ff77 	bl	80171d2 <_ZL11isKthBitSetii>
 80172e4:	4603      	mov	r3, r0
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d010      	beq.n	801730c <_ZN16SecondScreenView9updateValEPh+0x10c>
			ErrorMessage.setTypedText(TypedText(T_IAT_SENSOR_FAILURE));
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80172f0:	f107 0310 	add.w	r3, r7, #16
 80172f4:	213e      	movs	r1, #62	; 0x3e
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7fb fc04 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80172fc:	8a39      	ldrh	r1, [r7, #16]
 80172fe:	4620      	mov	r0, r4
 8017300:	f004 fed4 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 8017304:	4b84      	ldr	r3, [pc, #528]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	223b      	movs	r2, #59	; 0x3b
 801730a:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 3)) {
 801730c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017310:	2103      	movs	r1, #3
 8017312:	4618      	mov	r0, r3
 8017314:	f7ff ff5d 	bl	80171d2 <_ZL11isKthBitSetii>
 8017318:	4603      	mov	r3, r0
 801731a:	2b00      	cmp	r3, #0
 801731c:	d010      	beq.n	8017340 <_ZN16SecondScreenView9updateValEPh+0x140>
			ErrorMessage.setTypedText(TypedText(T_MAP_SENSOR_FAILURE));
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017324:	f107 0314 	add.w	r3, r7, #20
 8017328:	213f      	movs	r1, #63	; 0x3f
 801732a:	4618      	mov	r0, r3
 801732c:	f7fb fbea 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017330:	8ab9      	ldrh	r1, [r7, #20]
 8017332:	4620      	mov	r0, r4
 8017334:	f004 feba 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 8017338:	4b77      	ldr	r3, [pc, #476]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	223b      	movs	r2, #59	; 0x3b
 801733e:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 4)) {
 8017340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017344:	2104      	movs	r1, #4
 8017346:	4618      	mov	r0, r3
 8017348:	f7ff ff43 	bl	80171d2 <_ZL11isKthBitSetii>
 801734c:	4603      	mov	r3, r0
 801734e:	2b00      	cmp	r3, #0
 8017350:	d010      	beq.n	8017374 <_ZN16SecondScreenView9updateValEPh+0x174>
			ErrorMessage.setTypedText(TypedText(T_O2_SENSOR_FAILED));
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017358:	f107 0318 	add.w	r3, r7, #24
 801735c:	2140      	movs	r1, #64	; 0x40
 801735e:	4618      	mov	r0, r3
 8017360:	f7fb fbd0 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017364:	8b39      	ldrh	r1, [r7, #24]
 8017366:	4620      	mov	r0, r4
 8017368:	f004 fea0 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 801736c:	4b6a      	ldr	r3, [pc, #424]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	223b      	movs	r2, #59	; 0x3b
 8017372:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 5)) {
 8017374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017378:	2105      	movs	r1, #5
 801737a:	4618      	mov	r0, r3
 801737c:	f7ff ff29 	bl	80171d2 <_ZL11isKthBitSetii>
 8017380:	4603      	mov	r3, r0
 8017382:	2b00      	cmp	r3, #0
 8017384:	d010      	beq.n	80173a8 <_ZN16SecondScreenView9updateValEPh+0x1a8>
			ErrorMessage.setTypedText(TypedText(T_EGT1_SESNSOR_FAILED));
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801738c:	f107 031c 	add.w	r3, r7, #28
 8017390:	2141      	movs	r1, #65	; 0x41
 8017392:	4618      	mov	r0, r3
 8017394:	f7fb fbb6 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017398:	8bb9      	ldrh	r1, [r7, #28]
 801739a:	4620      	mov	r0, r4
 801739c:	f004 fe86 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 80173a0:	4b5d      	ldr	r3, [pc, #372]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	223b      	movs	r2, #59	; 0x3b
 80173a6:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 6)) {
 80173a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173ac:	2106      	movs	r1, #6
 80173ae:	4618      	mov	r0, r3
 80173b0:	f7ff ff0f 	bl	80171d2 <_ZL11isKthBitSetii>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d010      	beq.n	80173dc <_ZN16SecondScreenView9updateValEPh+0x1dc>
			ErrorMessage.setTypedText(TypedText(T_EGT2_SENSOR_FAILED));
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80173c0:	f107 0320 	add.w	r3, r7, #32
 80173c4:	2142      	movs	r1, #66	; 0x42
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7fb fb9c 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80173cc:	8c39      	ldrh	r1, [r7, #32]
 80173ce:	4620      	mov	r0, r4
 80173d0:	f004 fe6c 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 80173d4:	4b50      	ldr	r3, [pc, #320]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	223b      	movs	r2, #59	; 0x3b
 80173da:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 7)) {
 80173dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173e0:	2107      	movs	r1, #7
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7ff fef5 	bl	80171d2 <_ZL11isKthBitSetii>
 80173e8:	4603      	mov	r3, r0
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d010      	beq.n	8017410 <_ZN16SecondScreenView9updateValEPh+0x210>
			ErrorMessage.setTypedText(TypedText(T_EGT_HIGH));
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80173f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80173f8:	2143      	movs	r1, #67	; 0x43
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fb fb82 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017400:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8017402:	4620      	mov	r0, r4
 8017404:	f004 fe52 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 8017408:	4b43      	ldr	r3, [pc, #268]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	223b      	movs	r2, #59	; 0x3b
 801740e:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 8)) {
 8017410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017414:	2108      	movs	r1, #8
 8017416:	4618      	mov	r0, r3
 8017418:	f7ff fedb 	bl	80171d2 <_ZL11isKthBitSetii>
 801741c:	4603      	mov	r3, r0
 801741e:	2b00      	cmp	r3, #0
 8017420:	d010      	beq.n	8017444 <_ZN16SecondScreenView9updateValEPh+0x244>
			ErrorMessage.setTypedText(TypedText(T_KNOCKING));
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801742c:	213d      	movs	r1, #61	; 0x3d
 801742e:	4618      	mov	r0, r3
 8017430:	f7fb fb68 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017434:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8017436:	4620      	mov	r0, r4
 8017438:	f004 fe38 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 801743c:	4b36      	ldr	r3, [pc, #216]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	223b      	movs	r2, #59	; 0x3b
 8017442:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 10)) {
 8017444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017448:	210a      	movs	r1, #10
 801744a:	4618      	mov	r0, r3
 801744c:	f7ff fec1 	bl	80171d2 <_ZL11isKthBitSetii>
 8017450:	4603      	mov	r3, r0
 8017452:	2b00      	cmp	r3, #0
 8017454:	d010      	beq.n	8017478 <_ZN16SecondScreenView9updateValEPh+0x278>
			ErrorMessage.setTypedText(TypedText(T_DBW_SENSOR_FAILED));
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801745c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017460:	2144      	movs	r1, #68	; 0x44
 8017462:	4618      	mov	r0, r3
 8017464:	f7fb fb4e 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017468:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 801746a:	4620      	mov	r0, r4
 801746c:	f004 fe1e 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 8017470:	4b29      	ldr	r3, [pc, #164]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	223b      	movs	r2, #59	; 0x3b
 8017476:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 11)) {
 8017478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801747c:	210b      	movs	r1, #11
 801747e:	4618      	mov	r0, r3
 8017480:	f7ff fea7 	bl	80171d2 <_ZL11isKthBitSetii>
 8017484:	4603      	mov	r3, r0
 8017486:	2b00      	cmp	r3, #0
 8017488:	d010      	beq.n	80174ac <_ZN16SecondScreenView9updateValEPh+0x2ac>
			ErrorMessage.setTypedText(TypedText(T_FPR_RELATIVE_ERROR));
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017494:	2145      	movs	r1, #69	; 0x45
 8017496:	4618      	mov	r0, r3
 8017498:	f7fb fb34 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801749c:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801749e:	4620      	mov	r0, r4
 80174a0:	f004 fe04 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 80174a4:	4b1c      	ldr	r3, [pc, #112]	; (8017518 <_ZN16SecondScreenView9updateValEPh+0x318>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	223b      	movs	r2, #59	; 0x3b
 80174aa:	701a      	strb	r2, [r3, #0]
		}

		int x = 240 - ErrorMessage.getTextWidth() / 2;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7ff fd92 	bl	8016fdc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 80174b8:	4603      	mov	r3, r0
 80174ba:	085b      	lsrs	r3, r3, #1
 80174bc:	b29b      	uxth	r3, r3
 80174be:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80174c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		ErrorMessage.setXY(x, 205);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80174ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80174cc:	b211      	sxth	r1, r2
 80174ce:	22cd      	movs	r2, #205	; 0xcd
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7fb f8d7 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.resizeToCurrentText();
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80174dc:	4618      	mov	r0, r3
 80174de:	f004 fdbb 	bl	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		ErrorMessage.invalidate();
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80174e8:	4618      	mov	r0, r3
 80174ea:	f006 fe75 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80174f4:	2101      	movs	r1, #1
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fb f935 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8017502:	2101      	movs	r1, #1
 8017504:	4618      	mov	r0, r3
 8017506:	f7fb f92e 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
		ErrorMessage.invalidate();
		nextErrorButton.setVisible(false);
		clearErrorsBtn.setVisible(false);
	}

}
 801750a:	e083      	b.n	8017614 <_ZN16SecondScreenView9updateValEPh+0x414>
 801750c:	20000050 	.word	0x20000050
 8017510:	0802b33c 	.word	0x0802b33c
 8017514:	200087c8 	.word	0x200087c8
 8017518:	200087cc 	.word	0x200087cc
	} else if (error) {
 801751c:	4b3f      	ldr	r3, [pc, #252]	; (801761c <_ZN16SecondScreenView9updateValEPh+0x41c>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d03f      	beq.n	80175a4 <_ZN16SecondScreenView9updateValEPh+0x3a4>
		backgroundBox.setColor(getBlackColor());
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801752a:	f7ff fdbf 	bl	80170ac <_ZL13getBlackColorv>
 801752e:	4603      	mov	r3, r0
 8017530:	4619      	mov	r1, r3
 8017532:	4620      	mov	r0, r4
 8017534:	f7fb fad8 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	3340      	adds	r3, #64	; 0x40
 801753c:	4618      	mov	r0, r3
 801753e:	f006 fe4b 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(*error));
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017548:	4b34      	ldr	r3, [pc, #208]	; (801761c <_ZN16SecondScreenView9updateValEPh+0x41c>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	b29a      	uxth	r2, r3
 8017550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017554:	4611      	mov	r1, r2
 8017556:	4618      	mov	r0, r3
 8017558:	f7fb fad4 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 801755c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 801755e:	4620      	mov	r0, r4
 8017560:	f004 fda4 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 205);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801756a:	22cd      	movs	r2, #205	; 0xcd
 801756c:	21c1      	movs	r1, #193	; 0xc1
 801756e:	4618      	mov	r0, r3
 8017570:	f7fb f888 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801757a:	4618      	mov	r0, r3
 801757c:	f006 fe2c 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8017586:	2101      	movs	r1, #1
 8017588:	4618      	mov	r0, r3
 801758a:	f7fb f8ec 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8017594:	2101      	movs	r1, #1
 8017596:	4618      	mov	r0, r3
 8017598:	f7fb f8e5 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
		cutrrentErrorIndex = 0;
 801759c:	4b20      	ldr	r3, [pc, #128]	; (8017620 <_ZN16SecondScreenView9updateValEPh+0x420>)
 801759e:	2200      	movs	r2, #0
 80175a0:	601a      	str	r2, [r3, #0]
}
 80175a2:	e037      	b.n	8017614 <_ZN16SecondScreenView9updateValEPh+0x414>
		backgroundBox.setColor(getBlackColor());
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80175aa:	f7ff fd7f 	bl	80170ac <_ZL13getBlackColorv>
 80175ae:	4603      	mov	r3, r0
 80175b0:	4619      	mov	r1, r3
 80175b2:	4620      	mov	r0, r4
 80175b4:	f7fb fa98 	bl	8012ae8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	3340      	adds	r3, #64	; 0x40
 80175bc:	4618      	mov	r0, r3
 80175be:	f006 fe0b 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80175c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175cc:	213c      	movs	r1, #60	; 0x3c
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7fb fa98 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 80175d4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80175d6:	4620      	mov	r0, r4
 80175d8:	f004 fd68 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 232);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80175e2:	22e8      	movs	r2, #232	; 0xe8
 80175e4:	21c1      	movs	r1, #193	; 0xc1
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7fb f84c 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80175f2:	4618      	mov	r0, r3
 80175f4:	f006 fdf0 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(false);
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80175fe:	2100      	movs	r1, #0
 8017600:	4618      	mov	r0, r3
 8017602:	f7fb f8b0 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(false);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801760c:	2100      	movs	r1, #0
 801760e:	4618      	mov	r0, r3
 8017610:	f7fb f8a9 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
}
 8017614:	bf00      	nop
 8017616:	374c      	adds	r7, #76	; 0x4c
 8017618:	46bd      	mov	sp, r7
 801761a:	bd90      	pop	{r4, r7, pc}
 801761c:	200087cc 	.word	0x200087cc
 8017620:	200087d0 	.word	0x200087d0

08017624 <_ZN16SecondScreenView11clearErrorsEv>:

void SecondScreenView::clearErrors() {
 8017624:	b590      	push	{r4, r7, lr}
 8017626:	b085      	sub	sp, #20
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
	error = NULL;
 801762c:	4b17      	ldr	r3, [pc, #92]	; (801768c <_ZN16SecondScreenView11clearErrorsEv+0x68>)
 801762e:	2200      	movs	r2, #0
 8017630:	601a      	str	r2, [r3, #0]
	ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017638:	f107 030c 	add.w	r3, r7, #12
 801763c:	213c      	movs	r1, #60	; 0x3c
 801763e:	4618      	mov	r0, r3
 8017640:	f7fb fa60 	bl	8012b04 <_ZN8touchgfx9TypedTextC1Et>
 8017644:	89b9      	ldrh	r1, [r7, #12]
 8017646:	4620      	mov	r0, r4
 8017648:	f004 fd30 	bl	801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
	ErrorMessage.setXY(193, 232);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017652:	22e8      	movs	r2, #232	; 0xe8
 8017654:	21c1      	movs	r1, #193	; 0xc1
 8017656:	4618      	mov	r0, r3
 8017658:	f7fb f814 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
	ErrorMessage.invalidate();
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017662:	4618      	mov	r0, r3
 8017664:	f006 fdb8 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
	nextErrorButton.setVisible(false);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801766e:	2100      	movs	r1, #0
 8017670:	4618      	mov	r0, r3
 8017672:	f7fb f878 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
	clearErrorsBtn.setVisible(false);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801767c:	2100      	movs	r1, #0
 801767e:	4618      	mov	r0, r3
 8017680:	f7fb f871 	bl	8012766 <_ZN8touchgfx8Drawable10setVisibleEb>
}
 8017684:	bf00      	nop
 8017686:	3714      	adds	r7, #20
 8017688:	46bd      	mov	sp, r7
 801768a:	bd90      	pop	{r4, r7, pc}
 801768c:	200087cc 	.word	0x200087cc

08017690 <_ZN16SecondScreenView9nextErrorEv>:

void SecondScreenView::nextError() {
 8017690:	b480      	push	{r7}
 8017692:	b083      	sub	sp, #12
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
//	ErrorMessage.setTypedText(TypedText(text));
//	int x = 240 - ErrorMessage.getTextWidth() / 2;
//	ErrorMessage.setXY(x, 205);
//	ErrorMessage.resizeToCurrentText();
//	ErrorMessage.invalidate();
}
 8017698:	bf00      	nop
 801769a:	370c      	adds	r7, #12
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr

080176a4 <_ZN16SecondScreenView16moveToMainScreenEv>:

void SecondScreenView::moveToMainScreen() {
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
	presenter->setManualErrorChangeScreen();
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7ff fc73 	bl	8016f9c <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>
}
 80176b6:	bf00      	nop
 80176b8:	3708      	adds	r7, #8
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
	...

080176c0 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
    {
 80176c8:	4a04      	ldr	r2, [pc, #16]	; (80176dc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	601a      	str	r2, [r3, #0]
    }
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	4618      	mov	r0, r3
 80176d2:	370c      	adds	r7, #12
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr
 80176dc:	0802c18c 	.word	0x0802c18c

080176e0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
    }
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f7ff ffe9 	bl	80176c0 <_ZN8touchgfx15TouchControllerD1Ev>
 80176ee:	2104      	movs	r1, #4
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f012 f946 	bl	8029982 <_ZdlPvj>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4618      	mov	r0, r3
 80176fa:	3708      	adds	r7, #8
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}

08017700 <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 8017708:	f44f 7188 	mov.w	r1, #272	; 0x110
 801770c:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8017710:	f7f8 fa6c 	bl	800fbec <BSP_TS_Init>
}
 8017714:	bf00      	nop
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b090      	sub	sp, #64	; 0x40
 8017720:	af00      	add	r7, sp, #0
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 8017728:	f107 0314 	add.w	r3, r7, #20
 801772c:	222c      	movs	r2, #44	; 0x2c
 801772e:	2100      	movs	r1, #0
 8017730:	4618      	mov	r0, r3
 8017732:	f012 f9da 	bl	8029aea <memset>
	    BSP_TS_GetState(&state);
 8017736:	f107 0314 	add.w	r3, r7, #20
 801773a:	4618      	mov	r0, r3
 801773c:	f7f8 fa96 	bl	800fc6c <BSP_TS_GetState>
	    if (state.touchDetected)
 8017740:	7d3b      	ldrb	r3, [r7, #20]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d009      	beq.n	801775a <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 8017746:	8afb      	ldrh	r3, [r7, #22]
 8017748:	461a      	mov	r2, r3
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 801774e:	8c3b      	ldrh	r3, [r7, #32]
 8017750:	461a      	mov	r2, r3
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	601a      	str	r2, [r3, #0]

	        return true;
 8017756:	2301      	movs	r3, #1
 8017758:	e000      	b.n	801775c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 801775a:	2300      	movs	r3, #0
}
 801775c:	4618      	mov	r0, r3
 801775e:	3740      	adds	r7, #64	; 0x40
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	4a05      	ldr	r2, [pc, #20]	; (8017784 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	601a      	str	r2, [r3, #0]
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	4618      	mov	r0, r3
 8017776:	f7ff ffa3 	bl	80176c0 <_ZN8touchgfx15TouchControllerD1Ev>
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	4618      	mov	r0, r3
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	0802c174 	.word	0x0802c174

08017788 <_ZN20STM32TouchControllerD0Ev>:
 8017788:	b580      	push	{r7, lr}
 801778a:	b082      	sub	sp, #8
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f7ff ffe7 	bl	8017764 <_ZN20STM32TouchControllerD1Ev>
 8017796:	2104      	movs	r1, #4
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f012 f8f2 	bl	8029982 <_ZdlPvj>
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	4618      	mov	r0, r3
 80177a2:	3708      	adds	r7, #8
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}

080177a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b083      	sub	sp, #12
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	4603      	mov	r3, r0
 80177b0:	71fb      	strb	r3, [r7, #7]

}
 80177b2:	bf00      	nop
 80177b4:	370c      	adds	r7, #12
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr

080177be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80177be:	b480      	push	{r7}
 80177c0:	b083      	sub	sp, #12
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	4603      	mov	r3, r0
 80177c6:	71fb      	strb	r3, [r7, #7]

}
 80177c8:	bf00      	nop
 80177ca:	370c      	adds	r7, #12
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr

080177d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80177d4:	b480      	push	{r7}
 80177d6:	b083      	sub	sp, #12
 80177d8:	af00      	add	r7, sp, #0
 80177da:	4603      	mov	r3, r0
 80177dc:	71fb      	strb	r3, [r7, #7]

}
 80177de:	bf00      	nop
 80177e0:	370c      	adds	r7, #12
 80177e2:	46bd      	mov	sp, r7
 80177e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e8:	4770      	bx	lr
	...

080177ec <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80177ec:	b480      	push	{r7}
 80177ee:	b083      	sub	sp, #12
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
    {
 80177f4:	4a04      	ldr	r2, [pc, #16]	; (8017808 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	601a      	str	r2, [r3, #0]
    }
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	4618      	mov	r0, r3
 80177fe:	370c      	adds	r7, #12
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr
 8017808:	0802cf44 	.word	0x0802cf44

0801780c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
    }
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f7ff ffe9 	bl	80177ec <_ZN8touchgfx3HALD1Ev>
 801781a:	2178      	movs	r1, #120	; 0x78
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f012 f8b0 	bl	8029982 <_ZdlPvj>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	4618      	mov	r0, r3
 8017826:	3708      	adds	r7, #8
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	460b      	mov	r3, r1
 8017836:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	78fa      	ldrb	r2, [r7, #3]
 801783c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2201      	movs	r2, #1
 8017844:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8017848:	bf00      	nop
 801784a:	370c      	adds	r7, #12
 801784c:	46bd      	mov	sp, r7
 801784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017852:	4770      	bx	lr

08017854 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	685a      	ldr	r2, [r3, #4]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	4610      	mov	r0, r2
 801786a:	4798      	blx	r3
 801786c:	4603      	mov	r3, r0
    }
 801786e:	4618      	mov	r0, r3
 8017870:	3708      	adds	r7, #8
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}

08017876 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8017876:	b580      	push	{r7, lr}
 8017878:	b082      	sub	sp, #8
 801787a:	af00      	add	r7, sp, #0
 801787c:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f003 fbbc 	bl	801affc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	3390      	adds	r3, #144	; 0x90
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	4798      	blx	r3
    }
 8017890:	bf00      	nop
 8017892:	3708      	adds	r7, #8
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}

08017898 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	6039      	str	r1, [r7, #0]
    {
        return false;
 80178a2:	2300      	movs	r3, #0
    }
 80178a4:	4618      	mov	r0, r3
 80178a6:	370c      	adds	r7, #12
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80178b0:	b590      	push	{r4, r7, lr}
 80178b2:	b08b      	sub	sp, #44	; 0x2c
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	4611      	mov	r1, r2
 80178bc:	461a      	mov	r2, r3
 80178be:	460b      	mov	r3, r1
 80178c0:	80fb      	strh	r3, [r7, #6]
 80178c2:	4613      	mov	r3, r2
 80178c4:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80178c6:	f7f9 f983 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 80178ca:	4602      	mov	r2, r0
 80178cc:	6813      	ldr	r3, [r2, #0]
 80178ce:	3328      	adds	r3, #40	; 0x28
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	4610      	mov	r0, r2
 80178d4:	4798      	blx	r3
 80178d6:	4603      	mov	r3, r0
 80178d8:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80178da:	8b7b      	ldrh	r3, [r7, #26]
 80178dc:	4a3d      	ldr	r2, [pc, #244]	; (80179d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80178de:	8812      	ldrh	r2, [r2, #0]
 80178e0:	fb02 f303 	mul.w	r3, r2, r3
 80178e4:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80178ea:	2300      	movs	r3, #0
 80178ec:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80178ee:	2300      	movs	r3, #0
 80178f0:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80178f2:	797b      	ldrb	r3, [r7, #5]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d005      	beq.n	8017904 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80178f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	4413      	add	r3, r2
 80178fe:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8017900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017902:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8017904:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017908:	2b00      	cmp	r3, #0
 801790a:	d005      	beq.n	8017918 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 801790c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	4413      	add	r3, r2
 8017912:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8017914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017916:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8017918:	88fb      	ldrh	r3, [r7, #6]
 801791a:	3b01      	subs	r3, #1
 801791c:	2b1f      	cmp	r3, #31
 801791e:	d84d      	bhi.n	80179bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8017920:	a201      	add	r2, pc, #4	; (adr r2, 8017928 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8017922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017926:	bf00      	nop
 8017928:	080179a9 	.word	0x080179a9
 801792c:	080179a9 	.word	0x080179a9
 8017930:	080179bd 	.word	0x080179bd
 8017934:	080179a9 	.word	0x080179a9
 8017938:	080179bd 	.word	0x080179bd
 801793c:	080179bd 	.word	0x080179bd
 8017940:	080179bd 	.word	0x080179bd
 8017944:	080179a9 	.word	0x080179a9
 8017948:	080179bd 	.word	0x080179bd
 801794c:	080179bd 	.word	0x080179bd
 8017950:	080179bd 	.word	0x080179bd
 8017954:	080179bd 	.word	0x080179bd
 8017958:	080179bd 	.word	0x080179bd
 801795c:	080179bd 	.word	0x080179bd
 8017960:	080179bd 	.word	0x080179bd
 8017964:	080179a9 	.word	0x080179a9
 8017968:	080179bd 	.word	0x080179bd
 801796c:	080179bd 	.word	0x080179bd
 8017970:	080179bd 	.word	0x080179bd
 8017974:	080179bd 	.word	0x080179bd
 8017978:	080179bd 	.word	0x080179bd
 801797c:	080179bd 	.word	0x080179bd
 8017980:	080179bd 	.word	0x080179bd
 8017984:	080179a9 	.word	0x080179a9
 8017988:	080179bd 	.word	0x080179bd
 801798c:	080179bd 	.word	0x080179bd
 8017990:	080179bd 	.word	0x080179bd
 8017994:	080179bd 	.word	0x080179bd
 8017998:	080179bd 	.word	0x080179bd
 801799c:	080179bd 	.word	0x080179bd
 80179a0:	080179bd 	.word	0x080179bd
 80179a4:	080179a9 	.word	0x080179a9
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	3374      	adds	r3, #116	; 0x74
 80179ae:	681c      	ldr	r4, [r3, #0]
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	6a3a      	ldr	r2, [r7, #32]
 80179b4:	68b9      	ldr	r1, [r7, #8]
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	47a0      	blx	r4
            break;
 80179ba:	e006      	b.n	80179ca <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80179bc:	4b06      	ldr	r3, [pc, #24]	; (80179d8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80179be:	4a07      	ldr	r2, [pc, #28]	; (80179dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80179c0:	f240 3125 	movw	r1, #805	; 0x325
 80179c4:	4806      	ldr	r0, [pc, #24]	; (80179e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80179c6:	f012 f807 	bl	80299d8 <__assert_func>
            break;
        }
    }
 80179ca:	bf00      	nop
 80179cc:	372c      	adds	r7, #44	; 0x2c
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd90      	pop	{r4, r7, pc}
 80179d2:	bf00      	nop
 80179d4:	2000bf12 	.word	0x2000bf12
 80179d8:	0802b344 	.word	0x0802b344
 80179dc:	0802c2a0 	.word	0x0802c2a0
 80179e0:	0802b364 	.word	0x0802b364

080179e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	607a      	str	r2, [r7, #4]
 80179f0:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80179f2:	68bb      	ldr	r3, [r7, #8]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d106      	bne.n	8017a06 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80179f8:	4b11      	ldr	r3, [pc, #68]	; (8017a40 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80179fa:	4a12      	ldr	r2, [pc, #72]	; (8017a44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80179fc:	f240 3137 	movw	r1, #823	; 0x337
 8017a00:	4811      	ldr	r0, [pc, #68]	; (8017a48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8017a02:	f011 ffe9 	bl	80299d8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	68ba      	ldr	r2, [r7, #8]
 8017a0a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	683a      	ldr	r2, [r7, #0]
 8017a16:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	bf14      	ite	ne
 8017a1e:	2301      	movne	r3, #1
 8017a20:	2300      	moveq	r3, #0
 8017a22:	b2da      	uxtb	r2, r3
 8017a24:	4b09      	ldr	r3, [pc, #36]	; (8017a4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8017a26:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	bf14      	ite	ne
 8017a2e:	2301      	movne	r3, #1
 8017a30:	2300      	moveq	r3, #0
 8017a32:	b2da      	uxtb	r2, r3
 8017a34:	4b06      	ldr	r3, [pc, #24]	; (8017a50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8017a36:	701a      	strb	r2, [r3, #0]
    }
 8017a38:	bf00      	nop
 8017a3a:	3710      	adds	r7, #16
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	0802b3a8 	.word	0x0802b3a8
 8017a44:	0802c250 	.word	0x0802c250
 8017a48:	0802b364 	.word	0x0802b364
 8017a4c:	2000bf14 	.word	0x2000bf14
 8017a50:	2000bf15 	.word	0x2000bf15

08017a54 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	460b      	mov	r3, r1
 8017a5e:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d004      	beq.n	8017a72 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a6c:	887a      	ldrh	r2, [r7, #2]
 8017a6e:	4610      	mov	r0, r2
 8017a70:	4798      	blx	r3
        }
    }
 8017a72:	bf00      	nop
 8017a74:	3708      	adds	r7, #8
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}

08017a7a <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8017a7a:	b580      	push	{r7, lr}
 8017a7c:	b082      	sub	sp, #8
 8017a7e:	af00      	add	r7, sp, #0
 8017a80:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	685a      	ldr	r2, [r3, #4]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	3318      	adds	r3, #24
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	4610      	mov	r0, r2
 8017a92:	4798      	blx	r3
 8017a94:	4603      	mov	r3, r0
    }
 8017a96:	4618      	mov	r0, r3
 8017a98:	3708      	adds	r7, #8
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
	...

08017aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8017aa0:	b480      	push	{r7}
 8017aa2:	b083      	sub	sp, #12
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	d017      	beq.n	8017ae8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8017ab8:	4b1a      	ldr	r3, [pc, #104]	; (8017b24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d12a      	bne.n	8017b16 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8017ac0:	4b19      	ldr	r3, [pc, #100]	; (8017b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017ac2:	881a      	ldrh	r2, [r3, #0]
 8017ac4:	4b19      	ldr	r3, [pc, #100]	; (8017b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017ac6:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8017ac8:	4b19      	ldr	r3, [pc, #100]	; (8017b30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017aca:	881a      	ldrh	r2, [r3, #0]
 8017acc:	4b19      	ldr	r3, [pc, #100]	; (8017b34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8017ace:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8017ad0:	4b16      	ldr	r3, [pc, #88]	; (8017b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017ad2:	881a      	ldrh	r2, [r3, #0]
 8017ad4:	4b16      	ldr	r3, [pc, #88]	; (8017b30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017ad6:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8017ad8:	4b16      	ldr	r3, [pc, #88]	; (8017b34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8017ada:	881a      	ldrh	r2, [r3, #0]
 8017adc:	4b12      	ldr	r3, [pc, #72]	; (8017b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017ade:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8017ae0:	4b10      	ldr	r3, [pc, #64]	; (8017b24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8017ae6:	e016      	b.n	8017b16 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8017ae8:	4b0e      	ldr	r3, [pc, #56]	; (8017b24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d012      	beq.n	8017b16 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8017af0:	4b0f      	ldr	r3, [pc, #60]	; (8017b30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017af2:	881a      	ldrh	r2, [r3, #0]
 8017af4:	4b0d      	ldr	r3, [pc, #52]	; (8017b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017af6:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8017af8:	4b0b      	ldr	r3, [pc, #44]	; (8017b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017afa:	881a      	ldrh	r2, [r3, #0]
 8017afc:	4b0d      	ldr	r3, [pc, #52]	; (8017b34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8017afe:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8017b00:	4b0c      	ldr	r3, [pc, #48]	; (8017b34 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8017b02:	881a      	ldrh	r2, [r3, #0]
 8017b04:	4b0a      	ldr	r3, [pc, #40]	; (8017b30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8017b06:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8017b08:	4b08      	ldr	r3, [pc, #32]	; (8017b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8017b0a:	881a      	ldrh	r2, [r3, #0]
 8017b0c:	4b06      	ldr	r3, [pc, #24]	; (8017b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8017b0e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8017b10:	4b04      	ldr	r3, [pc, #16]	; (8017b24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8017b12:	2200      	movs	r2, #0
 8017b14:	701a      	strb	r2, [r3, #0]
    }
 8017b16:	bf00      	nop
 8017b18:	370c      	adds	r7, #12
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr
 8017b22:	bf00      	nop
 8017b24:	2000bf0e 	.word	0x2000bf0e
 8017b28:	2000bf0a 	.word	0x2000bf0a
 8017b2c:	2000bf10 	.word	0x2000bf10
 8017b30:	2000bf0c 	.word	0x2000bf0c
 8017b34:	2000bf12 	.word	0x2000bf12

08017b38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	4618      	mov	r0, r3
 8017b44:	f002 fcdc 	bl	801a500 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8017b48:	bf00      	nop
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b082      	sub	sp, #8
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	4a05      	ldr	r2, [pc, #20]	; (8017b70 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	601a      	str	r2, [r3, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7ff fe43 	bl	80177ec <_ZN8touchgfx3HALD1Ev>
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3708      	adds	r7, #8
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	0802c478 	.word	0x0802c478

08017b74 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f7ff ffe7 	bl	8017b50 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017b82:	2178      	movs	r1, #120	; 0x78
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f011 fefc 	bl	8029982 <_ZdlPvj>
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3708      	adds	r7, #8
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7ff ffca 	bl	8017b38 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8017ba4:	bf00      	nop
 8017ba6:	3708      	adds	r7, #8
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f001 fb08 	bl	80191cc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8017bbc:	bf00      	nop
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f001 fb88 	bl	80192e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8017bd4:	4603      	mov	r3, r0
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3708      	adds	r7, #8
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}

08017bde <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b082      	sub	sp, #8
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	6078      	str	r0, [r7, #4]
 8017be6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	6839      	ldr	r1, [r7, #0]
 8017bec:	4618      	mov	r0, r3
 8017bee:	f001 fb87 	bl	8019300 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8017bf2:	bf00      	nop
 8017bf4:	3708      	adds	r7, #8
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}

08017bfa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017bfa:	b580      	push	{r7, lr}
 8017bfc:	b082      	sub	sp, #8
 8017bfe:	af00      	add	r7, sp, #0
 8017c00:	6078      	str	r0, [r7, #4]
 8017c02:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6839      	ldr	r1, [r7, #0]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f001 fb8f 	bl	801932c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 8017c0e:	bf00      	nop
 8017c10:	3708      	adds	r7, #8
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}

08017c16 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8017c16:	b580      	push	{r7, lr}
 8017c18:	b082      	sub	sp, #8
 8017c1a:	af00      	add	r7, sp, #0
 8017c1c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	4618      	mov	r0, r3
 8017c22:	f001 fb05 	bl	8019230 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8017c26:	bf00      	nop
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}

08017c2e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8017c2e:	b580      	push	{r7, lr}
 8017c30:	b082      	sub	sp, #8
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f001 fb09 	bl	8019250 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8017c3e:	bf00      	nop
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b082      	sub	sp, #8
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	4618      	mov	r0, r3
 8017c52:	f001 fb0b 	bl	801926c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8017c56:	bf00      	nop
 8017c58:	3708      	adds	r7, #8
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}

08017c5e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8017c5e:	b580      	push	{r7, lr}
 8017c60:	b082      	sub	sp, #8
 8017c62:	af00      	add	r7, sp, #0
 8017c64:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f001 fb0d 	bl	8019288 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8017c6e:	bf00      	nop
 8017c70:	3708      	adds	r7, #8
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
	...

08017c78 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	4a05      	ldr	r2, [pc, #20]	; (8017c98 <_ZN11TouchGFXHALD1Ev+0x20>)
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f7ff ff61 	bl	8017b50 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	4618      	mov	r0, r3
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	0802c1a4 	.word	0x0802c1a4

08017c9c <_ZN11TouchGFXHALD0Ev>:
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f7ff ffe7 	bl	8017c78 <_ZN11TouchGFXHALD1Ev>
 8017caa:	2178      	movs	r1, #120	; 0x78
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f011 fe68 	bl	8029982 <_ZdlPvj>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	3708      	adds	r7, #8
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8017cc0:	2203      	movs	r2, #3
 8017cc2:	2100      	movs	r1, #0
 8017cc4:	2001      	movs	r0, #1
 8017cc6:	f7f5 fb4c 	bl	800d362 <xQueueGenericCreate>
 8017cca:	4602      	mov	r2, r0
 8017ccc:	4b0b      	ldr	r3, [pc, #44]	; (8017cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8017cce:	601a      	str	r2, [r3, #0]
 8017cd0:	4b0a      	ldr	r3, [pc, #40]	; (8017cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d006      	beq.n	8017ce6 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8017cd8:	4b08      	ldr	r3, [pc, #32]	; (8017cfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8017cda:	6818      	ldr	r0, [r3, #0]
 8017cdc:	2300      	movs	r3, #0
 8017cde:	2200      	movs	r2, #0
 8017ce0:	2100      	movs	r1, #0
 8017ce2:	f7f5 fb9f 	bl	800d424 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	2101      	movs	r1, #1
 8017cea:	2001      	movs	r0, #1
 8017cec:	f7f5 fb39 	bl	800d362 <xQueueGenericCreate>
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	4b03      	ldr	r3, [pc, #12]	; (8017d00 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8017cf4:	601a      	str	r2, [r3, #0]
}
 8017cf6:	bf00      	nop
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	200087d4 	.word	0x200087d4
 8017d00:	200087d8 	.word	0x200087d8

08017d04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8017d08:	4b04      	ldr	r3, [pc, #16]	; (8017d1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7f5 fe99 	bl	800da48 <xQueueSemaphoreTake>
}
 8017d16:	bf00      	nop
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	200087d4 	.word	0x200087d4

08017d20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8017d24:	4b04      	ldr	r3, [pc, #16]	; (8017d38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8017d26:	6818      	ldr	r0, [r3, #0]
 8017d28:	2300      	movs	r3, #0
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	2100      	movs	r1, #0
 8017d2e:	f7f5 fb79 	bl	800d424 <xQueueGenericSend>
}
 8017d32:	bf00      	nop
 8017d34:	bd80      	pop	{r7, pc}
 8017d36:	bf00      	nop
 8017d38:	200087d4 	.word	0x200087d4

08017d3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8017d40:	4b03      	ldr	r3, [pc, #12]	; (8017d50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	2100      	movs	r1, #0
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7f5 fe7e 	bl	800da48 <xQueueSemaphoreTake>
}
 8017d4c:	bf00      	nop
 8017d4e:	bd80      	pop	{r7, pc}
 8017d50:	200087d4 	.word	0x200087d4

08017d54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8017d5e:	4b0b      	ldr	r3, [pc, #44]	; (8017d8c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	1d3a      	adds	r2, r7, #4
 8017d64:	4611      	mov	r1, r2
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7f5 fcfa 	bl	800d760 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d007      	beq.n	8017d82 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8017d72:	4b07      	ldr	r3, [pc, #28]	; (8017d90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8017d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d78:	601a      	str	r2, [r3, #0]
 8017d7a:	f3bf 8f4f 	dsb	sy
 8017d7e:	f3bf 8f6f 	isb	sy
}
 8017d82:	bf00      	nop
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	200087d4 	.word	0x200087d4
 8017d90:	e000ed04 	.word	0xe000ed04

08017d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
    if (vsync_q)
 8017d9a:	4b0e      	ldr	r3, [pc, #56]	; (8017dd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d013      	beq.n	8017dca <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8017da2:	2300      	movs	r3, #0
 8017da4:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8017da6:	4b0b      	ldr	r3, [pc, #44]	; (8017dd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8017da8:	6818      	ldr	r0, [r3, #0]
 8017daa:	1d3a      	adds	r2, r7, #4
 8017dac:	2300      	movs	r3, #0
 8017dae:	490a      	ldr	r1, [pc, #40]	; (8017dd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8017db0:	f7f5 fc3a 	bl	800d628 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d007      	beq.n	8017dca <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8017dba:	4b08      	ldr	r3, [pc, #32]	; (8017ddc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8017dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dc0:	601a      	str	r2, [r3, #0]
 8017dc2:	f3bf 8f4f 	dsb	sy
 8017dc6:	f3bf 8f6f 	isb	sy
    }
}
 8017dca:	bf00      	nop
 8017dcc:	3708      	adds	r7, #8
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	200087d8 	.word	0x200087d8
 8017dd8:	20000054 	.word	0x20000054
 8017ddc:	e000ed04 	.word	0xe000ed04

08017de0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8017de4:	4b08      	ldr	r3, [pc, #32]	; (8017e08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	2200      	movs	r2, #0
 8017dea:	4908      	ldr	r1, [pc, #32]	; (8017e0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7f5 fd49 	bl	800d884 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8017df2:	4b05      	ldr	r3, [pc, #20]	; (8017e08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f04f 32ff 	mov.w	r2, #4294967295
 8017dfa:	4904      	ldr	r1, [pc, #16]	; (8017e0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7f5 fd41 	bl	800d884 <xQueueReceive>
}
 8017e02:	bf00      	nop
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	200087d8 	.word	0x200087d8
 8017e0c:	20000054 	.word	0x20000054

08017e10 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	4603      	mov	r3, r0
 8017e18:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8017e1a:	88fb      	ldrh	r3, [r7, #6]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f6 fa71 	bl	800e304 <vTaskDelay>
}
 8017e22:	bf00      	nop
 8017e24:	3708      	adds	r7, #8
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
	...

08017e2c <__NVIC_EnableIRQ>:
{
 8017e2c:	b480      	push	{r7}
 8017e2e:	b083      	sub	sp, #12
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	4603      	mov	r3, r0
 8017e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	db0d      	blt.n	8017e5a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e42:	b2db      	uxtb	r3, r3
 8017e44:	f003 021f 	and.w	r2, r3, #31
 8017e48:	4907      	ldr	r1, [pc, #28]	; (8017e68 <__NVIC_EnableIRQ+0x3c>)
 8017e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e4e:	095b      	lsrs	r3, r3, #5
 8017e50:	2001      	movs	r0, #1
 8017e52:	fa00 f202 	lsl.w	r2, r0, r2
 8017e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017e5a:	bf00      	nop
 8017e5c:	370c      	adds	r7, #12
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr
 8017e66:	bf00      	nop
 8017e68:	e000e100 	.word	0xe000e100

08017e6c <__NVIC_DisableIRQ>:
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b083      	sub	sp, #12
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	4603      	mov	r3, r0
 8017e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	db12      	blt.n	8017ea4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	f003 021f 	and.w	r2, r3, #31
 8017e88:	4909      	ldr	r1, [pc, #36]	; (8017eb0 <__NVIC_DisableIRQ+0x44>)
 8017e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e8e:	095b      	lsrs	r3, r3, #5
 8017e90:	2001      	movs	r0, #1
 8017e92:	fa00 f202 	lsl.w	r2, r0, r2
 8017e96:	3320      	adds	r3, #32
 8017e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017ea0:	f3bf 8f6f 	isb	sy
}
 8017ea4:	bf00      	nop
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr
 8017eb0:	e000e100 	.word	0xe000e100

08017eb4 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8017eb4:	b480      	push	{r7}
 8017eb6:	b083      	sub	sp, #12
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
        return color;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
    }
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	370c      	adds	r7, #12
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eca:	4770      	bx	lr

08017ecc <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	b29b      	uxth	r3, r3
    }
 8017eda:	4618      	mov	r0, r3
 8017edc:	370c      	adds	r7, #12
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr
	...

08017ee8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8017ee8:	b480      	push	{r7}
 8017eea:	b083      	sub	sp, #12
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
    {
 8017ef0:	4a04      	ldr	r2, [pc, #16]	; (8017f04 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	601a      	str	r2, [r3, #0]
    }
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	4618      	mov	r0, r3
 8017efa:	370c      	adds	r7, #12
 8017efc:	46bd      	mov	sp, r7
 8017efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f02:	4770      	bx	lr
 8017f04:	0802c34c 	.word	0x0802c34c

08017f08 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
    }
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f7ff ffe9 	bl	8017ee8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017f16:	2104      	movs	r1, #4
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f011 fd32 	bl	8029982 <_ZdlPvj>
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	4618      	mov	r0, r3
 8017f22:	3708      	adds	r7, #8
 8017f24:	46bd      	mov	sp, r7
 8017f26:	bd80      	pop	{r7, pc}

08017f28 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b082      	sub	sp, #8
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	3344      	adds	r3, #68	; 0x44
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	6878      	ldr	r0, [r7, #4]
 8017f3a:	4798      	blx	r3
    }
 8017f3c:	bf00      	nop
 8017f3e:	3708      	adds	r7, #8
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}

08017f44 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8017f44:	b480      	push	{r7}
 8017f46:	b083      	sub	sp, #12
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8017f4c:	2300      	movs	r3, #0
    }
 8017f4e:	4618      	mov	r0, r3
 8017f50:	370c      	adds	r7, #12
 8017f52:	46bd      	mov	sp, r7
 8017f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f58:	4770      	bx	lr
	...

08017f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
    {
 8017f64:	4a04      	ldr	r2, [pc, #16]	; (8017f78 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	601a      	str	r2, [r3, #0]
    }
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	370c      	adds	r7, #12
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr
 8017f78:	0802d388 	.word	0x0802d388

08017f7c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
    }
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f7ff ffe9 	bl	8017f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8017f8a:	210c      	movs	r1, #12
 8017f8c:	6878      	ldr	r0, [r7, #4]
 8017f8e:	f011 fcf8 	bl	8029982 <_ZdlPvj>
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	4618      	mov	r0, r3
 8017f96:	3708      	adds	r7, #8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8017f9c:	b480      	push	{r7}
 8017f9e:	b083      	sub	sp, #12
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8017fa6:	4a09      	ldr	r2, [pc, #36]	; (8017fcc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	601a      	str	r2, [r3, #0]
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	605a      	str	r2, [r3, #4]
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	721a      	strb	r2, [r3, #8]
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	725a      	strb	r2, [r3, #9]
    {
    }
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	370c      	adds	r7, #12
 8017fc4:	46bd      	mov	sp, r7
 8017fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fca:	4770      	bx	lr
 8017fcc:	0802d388 	.word	0x0802d388

08017fd0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b082      	sub	sp, #8
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	685a      	ldr	r2, [r3, #4]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	685b      	ldr	r3, [r3, #4]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	3314      	adds	r3, #20
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4610      	mov	r0, r2
 8017fe8:	4798      	blx	r3
    }
 8017fea:	bf00      	nop
 8017fec:	3708      	adds	r7, #8
 8017fee:	46bd      	mov	sp, r7
 8017ff0:	bd80      	pop	{r7, pc}

08017ff2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8017ff2:	b580      	push	{r7, lr}
 8017ff4:	b082      	sub	sp, #8
 8017ff6:	af00      	add	r7, sp, #0
 8017ff8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8017ffa:	687a      	ldr	r2, [r7, #4]
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	3328      	adds	r3, #40	; 0x28
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4610      	mov	r0, r2
 8018006:	4798      	blx	r3
    }
 8018008:	bf00      	nop
 801800a:	3708      	adds	r7, #8
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}

08018010 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	60f8      	str	r0, [r7, #12]
 8018018:	60b9      	str	r1, [r7, #8]
 801801a:	607a      	str	r2, [r7, #4]
 801801c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8018028:	68ba      	ldr	r2, [r7, #8]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	430a      	orrs	r2, r1
 8018030:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018038:	f023 0107 	bic.w	r1, r3, #7
 801803c:	687a      	ldr	r2, [r7, #4]
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	430a      	orrs	r2, r1
 8018044:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801804c:	4b06      	ldr	r3, [pc, #24]	; (8018068 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801804e:	4013      	ands	r3, r2
 8018050:	6839      	ldr	r1, [r7, #0]
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	6812      	ldr	r2, [r2, #0]
 8018056:	430b      	orrs	r3, r1
 8018058:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801805a:	2300      	movs	r3, #0
}
 801805c:	4618      	mov	r0, r3
 801805e:	3714      	adds	r7, #20
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr
 8018068:	ffffc000 	.word	0xffffc000

0801806c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b082      	sub	sp, #8
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8018074:	f7f8 fda0 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 8018078:	4603      	mov	r3, r0
 801807a:	4618      	mov	r0, r3
 801807c:	f7ff ffa8 	bl	8017fd0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8018080:	bf00      	nop
 8018082:	3708      	adds	r7, #8
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b082      	sub	sp, #8
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
    assert(0);
 8018090:	4b02      	ldr	r3, [pc, #8]	; (801809c <DMA2D_XferErrorCallback+0x14>)
 8018092:	4a03      	ldr	r2, [pc, #12]	; (80180a0 <DMA2D_XferErrorCallback+0x18>)
 8018094:	213e      	movs	r1, #62	; 0x3e
 8018096:	4803      	ldr	r0, [pc, #12]	; (80180a4 <DMA2D_XferErrorCallback+0x1c>)
 8018098:	f011 fc9e 	bl	80299d8 <__assert_func>
 801809c:	0802b3e0 	.word	0x0802b3e0
 80180a0:	0802c368 	.word	0x0802c368
 80180a4:	0802b3e4 	.word	0x0802b3e4

080180a8 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b082      	sub	sp, #8
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	6078      	str	r0, [r7, #4]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	3318      	adds	r3, #24
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7fa fa08 	bl	80124ca <_ZN8touchgfx9colortypeC1Ev>
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 80180c4:	b5b0      	push	{r4, r5, r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80180cc:	687a      	ldr	r2, [r7, #4]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	330c      	adds	r3, #12
 80180d2:	4619      	mov	r1, r3
 80180d4:	4610      	mov	r0, r2
 80180d6:	f7ff ff61 	bl	8017f9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80180da:	4a0e      	ldr	r2, [pc, #56]	; (8018114 <_ZN10STM32F7DMAC1Ev+0x50>)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	601a      	str	r2, [r3, #0]
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f103 000c 	add.w	r0, r3, #12
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	3320      	adds	r3, #32
 80180ea:	2260      	movs	r2, #96	; 0x60
 80180ec:	4619      	mov	r1, r3
 80180ee:	f003 f8ab 	bl	801b248 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	3320      	adds	r3, #32
 80180f6:	245f      	movs	r4, #95	; 0x5f
 80180f8:	461d      	mov	r5, r3
 80180fa:	2c00      	cmp	r4, #0
 80180fc:	db05      	blt.n	801810a <_ZN10STM32F7DMAC1Ev+0x46>
 80180fe:	4628      	mov	r0, r5
 8018100:	f7ff ffd2 	bl	80180a8 <_ZN8touchgfx6BlitOpC1Ev>
 8018104:	3520      	adds	r5, #32
 8018106:	3c01      	subs	r4, #1
 8018108:	e7f7      	b.n	80180fa <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	4618      	mov	r0, r3
 801810e:	3708      	adds	r7, #8
 8018110:	46bd      	mov	sp, r7
 8018112:	bdb0      	pop	{r4, r5, r7, pc}
 8018114:	0802c2fc 	.word	0x0802c2fc

08018118 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
 8018120:	4a0b      	ldr	r2, [pc, #44]	; (8018150 <_ZN10STM32F7DMAD1Ev+0x38>)
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8018126:	480b      	ldr	r0, [pc, #44]	; (8018154 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8018128:	f7ec ffb0 	bl	800508c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801812c:	205a      	movs	r0, #90	; 0x5a
 801812e:	f7ff fe9d 	bl	8017e6c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	330c      	adds	r3, #12
 8018136:	4618      	mov	r0, r3
 8018138:	f000 faa0 	bl	801867c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	4618      	mov	r0, r3
 8018140:	f7ff ff0c 	bl	8017f5c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	4618      	mov	r0, r3
 8018148:	3708      	adds	r7, #8
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	0802c2fc 	.word	0x0802c2fc
 8018154:	2000c6fc 	.word	0x2000c6fc

08018158 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
}
 8018160:	6878      	ldr	r0, [r7, #4]
 8018162:	f7ff ffd9 	bl	8018118 <_ZN10STM32F7DMAD1Ev>
 8018166:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f011 fc09 	bl	8029982 <_ZdlPvj>
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	4618      	mov	r0, r3
 8018174:	3708      	adds	r7, #8
 8018176:	46bd      	mov	sp, r7
 8018178:	bd80      	pop	{r7, pc}
	...

0801817c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8018184:	4b09      	ldr	r3, [pc, #36]	; (80181ac <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018186:	4a0a      	ldr	r2, [pc, #40]	; (80181b0 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8018188:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801818a:	4808      	ldr	r0, [pc, #32]	; (80181ac <_ZN10STM32F7DMA10initializeEv+0x30>)
 801818c:	f7ec ff34 	bl	8004ff8 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8018190:	4b06      	ldr	r3, [pc, #24]	; (80181ac <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018192:	4a08      	ldr	r2, [pc, #32]	; (80181b4 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8018194:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8018196:	4b05      	ldr	r3, [pc, #20]	; (80181ac <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018198:	4a07      	ldr	r2, [pc, #28]	; (80181b8 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801819a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 801819c:	205a      	movs	r0, #90	; 0x5a
 801819e:	f7ff fe45 	bl	8017e2c <__NVIC_EnableIRQ>
}
 80181a2:	bf00      	nop
 80181a4:	3708      	adds	r7, #8
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}
 80181aa:	bf00      	nop
 80181ac:	2000c6fc 	.word	0x2000c6fc
 80181b0:	4002b000 	.word	0x4002b000
 80181b4:	0801806d 	.word	0x0801806d
 80181b8:	08018089 	.word	0x08018089

080181bc <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 80181c4:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	370c      	adds	r7, #12
 80181cc:	46bd      	mov	sp, r7
 80181ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d2:	4770      	bx	lr

080181d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 80181d4:	b590      	push	{r4, r7, lr}
 80181d6:	b08d      	sub	sp, #52	; 0x34
 80181d8:	af02      	add	r7, sp, #8
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80181de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80181e2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80181e4:	2300      	movs	r3, #0
 80181e6:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80181ec:	2b20      	cmp	r3, #32
 80181ee:	d007      	beq.n	8018200 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	2b40      	cmp	r3, #64	; 0x40
 80181f6:	d003      	beq.n	8018200 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	2b04      	cmp	r3, #4
 80181fe:	d101      	bne.n	8018204 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8018200:	2301      	movs	r3, #1
 8018202:	e000      	b.n	8018206 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8018204:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8018206:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 801820c:	2b80      	cmp	r3, #128	; 0x80
 801820e:	d004      	beq.n	801821a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018218:	d101      	bne.n	801821e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801821a:	2301      	movs	r3, #1
 801821c:	e000      	b.n	8018220 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801821e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8018220:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8018222:	f7f8 fcd5 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 8018226:	4602      	mov	r2, r0
 8018228:	6813      	ldr	r3, [r2, #0]
 801822a:	3320      	adds	r3, #32
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4610      	mov	r0, r2
 8018230:	4798      	blx	r3
 8018232:	4603      	mov	r3, r0
 8018234:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2b40      	cmp	r3, #64	; 0x40
 801823c:	d01d      	beq.n	801827a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801823e:	2b40      	cmp	r3, #64	; 0x40
 8018240:	d804      	bhi.n	801824c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8018242:	2b04      	cmp	r3, #4
 8018244:	d00e      	beq.n	8018264 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8018246:	2b20      	cmp	r3, #32
 8018248:	d017      	beq.n	801827a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801824a:	e019      	b.n	8018280 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 801824c:	2b80      	cmp	r3, #128	; 0x80
 801824e:	d003      	beq.n	8018258 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8018250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018254:	d003      	beq.n	801825e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8018256:	e013      	b.n	8018280 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8018258:	230a      	movs	r3, #10
 801825a:	623b      	str	r3, [r7, #32]
        break;
 801825c:	e01a      	b.n	8018294 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 801825e:	2309      	movs	r3, #9
 8018260:	623b      	str	r3, [r7, #32]
        break;
 8018262:	e017      	b.n	8018294 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8018264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018268:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801826a:	7f7b      	ldrb	r3, [r7, #29]
 801826c:	2b10      	cmp	r3, #16
 801826e:	d101      	bne.n	8018274 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8018270:	2302      	movs	r3, #2
 8018272:	e000      	b.n	8018276 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8018274:	2301      	movs	r3, #1
 8018276:	623b      	str	r3, [r7, #32]
        break;
 8018278:	e00c      	b.n	8018294 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 801827a:	2300      	movs	r3, #0
 801827c:	623b      	str	r3, [r7, #32]
        break;
 801827e:	e009      	b.n	8018294 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8018280:	2300      	movs	r3, #0
 8018282:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018284:	7f7b      	ldrb	r3, [r7, #29]
 8018286:	2b10      	cmp	r3, #16
 8018288:	d101      	bne.n	801828e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 801828a:	2302      	movs	r3, #2
 801828c:	e000      	b.n	8018290 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801828e:	2301      	movs	r3, #1
 8018290:	623b      	str	r3, [r7, #32]
        break;
 8018292:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8018294:	4a76      	ldr	r2, [pc, #472]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018298:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801829a:	7f7b      	ldrb	r3, [r7, #29]
 801829c:	2b10      	cmp	r3, #16
 801829e:	d101      	bne.n	80182a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80182a0:	2302      	movs	r3, #2
 80182a2:	e000      	b.n	80182a6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80182a4:	2301      	movs	r3, #1
 80182a6:	4a72      	ldr	r2, [pc, #456]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182a8:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	8adb      	ldrh	r3, [r3, #22]
 80182ae:	461a      	mov	r2, r3
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	8a1b      	ldrh	r3, [r3, #16]
 80182b4:	1ad3      	subs	r3, r2, r3
 80182b6:	461a      	mov	r2, r3
 80182b8:	4b6d      	ldr	r3, [pc, #436]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182ba:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80182bc:	7f7b      	ldrb	r3, [r7, #29]
 80182be:	2b10      	cmp	r3, #16
 80182c0:	d101      	bne.n	80182c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 80182c2:	2202      	movs	r2, #2
 80182c4:	e000      	b.n	80182c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 80182c6:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	8adb      	ldrh	r3, [r3, #22]
 80182cc:	4619      	mov	r1, r3
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	8a1b      	ldrh	r3, [r3, #16]
 80182d2:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80182d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80182d6:	4866      	ldr	r0, [pc, #408]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182d8:	f7ff fe9a 	bl	8018010 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80182dc:	4a64      	ldr	r2, [pc, #400]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182de:	6a3b      	ldr	r3, [r7, #32]
 80182e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	8a9b      	ldrh	r3, [r3, #20]
 80182e6:	461a      	mov	r2, r3
 80182e8:	683b      	ldr	r3, [r7, #0]
 80182ea:	8a1b      	ldrh	r3, [r3, #16]
 80182ec:	1ad3      	subs	r3, r2, r3
 80182ee:	461a      	mov	r2, r3
 80182f0:	4b5f      	ldr	r3, [pc, #380]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80182f4:	7ffb      	ldrb	r3, [r7, #31]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d103      	bne.n	8018302 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80182fa:	7fbb      	ldrb	r3, [r7, #30]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	f000 8082 	beq.w	8018406 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	7f1b      	ldrb	r3, [r3, #28]
 8018306:	2bff      	cmp	r3, #255	; 0xff
 8018308:	d008      	beq.n	801831c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801830a:	4b59      	ldr	r3, [pc, #356]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801830c:	2202      	movs	r2, #2
 801830e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8018310:	683b      	ldr	r3, [r7, #0]
 8018312:	7f1b      	ldrb	r3, [r3, #28]
 8018314:	461a      	mov	r2, r3
 8018316:	4b56      	ldr	r3, [pc, #344]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018318:	635a      	str	r2, [r3, #52]	; 0x34
 801831a:	e002      	b.n	8018322 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801831c:	4b54      	ldr	r3, [pc, #336]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801831e:	2200      	movs	r2, #0
 8018320:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8018322:	7fbb      	ldrb	r3, [r7, #30]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d059      	beq.n	80183dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8018328:	7f7b      	ldrb	r3, [r7, #29]
 801832a:	2b10      	cmp	r3, #16
 801832c:	d14a      	bne.n	80183c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	3318      	adds	r3, #24
 8018332:	4618      	mov	r0, r3
 8018334:	f7ff fdca 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 8018338:	4603      	mov	r3, r0
 801833a:	12db      	asrs	r3, r3, #11
 801833c:	f003 021f 	and.w	r2, r3, #31
 8018340:	4613      	mov	r3, r2
 8018342:	021b      	lsls	r3, r3, #8
 8018344:	1a9b      	subs	r3, r3, r2
 8018346:	4a4b      	ldr	r2, [pc, #300]	; (8018474 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8018348:	fb82 1203 	smull	r1, r2, r2, r3
 801834c:	441a      	add	r2, r3
 801834e:	1112      	asrs	r2, r2, #4
 8018350:	17db      	asrs	r3, r3, #31
 8018352:	1ad3      	subs	r3, r2, r3
 8018354:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8018356:	683b      	ldr	r3, [r7, #0]
 8018358:	3318      	adds	r3, #24
 801835a:	4618      	mov	r0, r3
 801835c:	f7ff fdb6 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 8018360:	4603      	mov	r3, r0
 8018362:	115b      	asrs	r3, r3, #5
 8018364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018368:	4613      	mov	r3, r2
 801836a:	021b      	lsls	r3, r3, #8
 801836c:	1a9b      	subs	r3, r3, r2
 801836e:	4a42      	ldr	r2, [pc, #264]	; (8018478 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8018370:	fb82 1203 	smull	r1, r2, r2, r3
 8018374:	441a      	add	r2, r3
 8018376:	1152      	asrs	r2, r2, #5
 8018378:	17db      	asrs	r3, r3, #31
 801837a:	1ad3      	subs	r3, r2, r3
 801837c:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	3318      	adds	r3, #24
 8018382:	4618      	mov	r0, r3
 8018384:	f7ff fda2 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 8018388:	4603      	mov	r3, r0
 801838a:	f003 021f 	and.w	r2, r3, #31
 801838e:	4613      	mov	r3, r2
 8018390:	021b      	lsls	r3, r3, #8
 8018392:	1a9b      	subs	r3, r3, r2
 8018394:	4a37      	ldr	r2, [pc, #220]	; (8018474 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8018396:	fb82 1203 	smull	r1, r2, r2, r3
 801839a:	441a      	add	r2, r3
 801839c:	1112      	asrs	r2, r2, #4
 801839e:	17db      	asrs	r3, r3, #31
 80183a0:	1ad3      	subs	r3, r2, r3
 80183a2:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	7f1b      	ldrb	r3, [r3, #28]
 80183a8:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	061a      	lsls	r2, r3, #24
 80183ae:	69bb      	ldr	r3, [r7, #24]
 80183b0:	041b      	lsls	r3, r3, #16
 80183b2:	431a      	orrs	r2, r3
 80183b4:	697b      	ldr	r3, [r7, #20]
 80183b6:	021b      	lsls	r3, r3, #8
 80183b8:	431a      	orrs	r2, r3
 80183ba:	693b      	ldr	r3, [r7, #16]
 80183bc:	4313      	orrs	r3, r2
 80183be:	4a2c      	ldr	r2, [pc, #176]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183c0:	6353      	str	r3, [r2, #52]	; 0x34
 80183c2:	e00b      	b.n	80183dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	3318      	adds	r3, #24
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7ff fd73 	bl	8017eb4 <_ZNK8touchgfx9colortype10getColor32Ev>
 80183ce:	4602      	mov	r2, r0
 80183d0:	683b      	ldr	r3, [r7, #0]
 80183d2:	7f1b      	ldrb	r3, [r3, #28]
 80183d4:	061b      	lsls	r3, r3, #24
 80183d6:	4313      	orrs	r3, r2
 80183d8:	4a25      	ldr	r2, [pc, #148]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183da:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	8adb      	ldrh	r3, [r3, #22]
 80183e0:	461a      	mov	r2, r3
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	8a1b      	ldrh	r3, [r3, #16]
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	461a      	mov	r2, r3
 80183ea:	4b21      	ldr	r3, [pc, #132]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183ec:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80183ee:	7f7b      	ldrb	r3, [r7, #29]
 80183f0:	2b10      	cmp	r3, #16
 80183f2:	d101      	bne.n	80183f8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80183f4:	2302      	movs	r3, #2
 80183f6:	e000      	b.n	80183fa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80183f8:	2301      	movs	r3, #1
 80183fa:	4a1d      	ldr	r2, [pc, #116]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183fc:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80183fe:	2100      	movs	r1, #0
 8018400:	481b      	ldr	r0, [pc, #108]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018402:	f7ed f8c3 	bl	800558c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8018406:	2101      	movs	r1, #1
 8018408:	4819      	ldr	r0, [pc, #100]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801840a:	f7ed f8bf 	bl	800558c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801840e:	7ffb      	ldrb	r3, [r7, #31]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d102      	bne.n	801841a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8018414:	7fbb      	ldrb	r3, [r7, #30]
 8018416:	2b00      	cmp	r3, #0
 8018418:	d015      	beq.n	8018446 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801841e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018424:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801842a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018430:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018436:	9301      	str	r3, [sp, #4]
 8018438:	9200      	str	r2, [sp, #0]
 801843a:	4623      	mov	r3, r4
 801843c:	4602      	mov	r2, r0
 801843e:	480c      	ldr	r0, [pc, #48]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018440:	f7ec fec7 	bl	80051d2 <HAL_DMA2D_BlendingStart_IT>
 8018444:	e00f      	b.n	8018466 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8018446:	683b      	ldr	r3, [r7, #0]
 8018448:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801844a:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8018450:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8018456:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 801845c:	9300      	str	r3, [sp, #0]
 801845e:	4603      	mov	r3, r0
 8018460:	4803      	ldr	r0, [pc, #12]	; (8018470 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018462:	f7ec fe83 	bl	800516c <HAL_DMA2D_Start_IT>
    }
}
 8018466:	bf00      	nop
 8018468:	372c      	adds	r7, #44	; 0x2c
 801846a:	46bd      	mov	sp, r7
 801846c:	bd90      	pop	{r4, r7, pc}
 801846e:	bf00      	nop
 8018470:	2000c6fc 	.word	0x2000c6fc
 8018474:	84210843 	.word	0x84210843
 8018478:	82082083 	.word	0x82082083

0801847c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 801847c:	b590      	push	{r4, r7, lr}
 801847e:	b08d      	sub	sp, #52	; 0x34
 8018480:	af02      	add	r7, sp, #8
 8018482:	6078      	str	r0, [r7, #4]
 8018484:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8018486:	f7f8 fba3 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801848a:	4602      	mov	r2, r0
 801848c:	6813      	ldr	r3, [r2, #0]
 801848e:	3320      	adds	r3, #32
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	4610      	mov	r0, r2
 8018494:	4798      	blx	r3
 8018496:	4603      	mov	r3, r0
 8018498:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801849a:	7ffb      	ldrb	r3, [r7, #31]
 801849c:	2b10      	cmp	r3, #16
 801849e:	d101      	bne.n	80184a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80184a0:	2302      	movs	r3, #2
 80184a2:	e000      	b.n	80184a6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80184a4:	2301      	movs	r3, #1
 80184a6:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80184a8:	2300      	movs	r3, #0
 80184aa:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80184ac:	7ffb      	ldrb	r3, [r7, #31]
 80184ae:	2b10      	cmp	r3, #16
 80184b0:	d149      	bne.n	8018546 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80184b2:	683b      	ldr	r3, [r7, #0]
 80184b4:	3318      	adds	r3, #24
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7ff fd08 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 80184bc:	4603      	mov	r3, r0
 80184be:	12db      	asrs	r3, r3, #11
 80184c0:	f003 021f 	and.w	r2, r3, #31
 80184c4:	4613      	mov	r3, r2
 80184c6:	021b      	lsls	r3, r3, #8
 80184c8:	1a9b      	subs	r3, r3, r2
 80184ca:	4a69      	ldr	r2, [pc, #420]	; (8018670 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80184cc:	fb82 1203 	smull	r1, r2, r2, r3
 80184d0:	441a      	add	r2, r3
 80184d2:	1112      	asrs	r2, r2, #4
 80184d4:	17db      	asrs	r3, r3, #31
 80184d6:	1ad3      	subs	r3, r2, r3
 80184d8:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	3318      	adds	r3, #24
 80184de:	4618      	mov	r0, r3
 80184e0:	f7ff fcf4 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 80184e4:	4603      	mov	r3, r0
 80184e6:	115b      	asrs	r3, r3, #5
 80184e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80184ec:	4613      	mov	r3, r2
 80184ee:	021b      	lsls	r3, r3, #8
 80184f0:	1a9b      	subs	r3, r3, r2
 80184f2:	4a60      	ldr	r2, [pc, #384]	; (8018674 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80184f4:	fb82 1203 	smull	r1, r2, r2, r3
 80184f8:	441a      	add	r2, r3
 80184fa:	1152      	asrs	r2, r2, #5
 80184fc:	17db      	asrs	r3, r3, #31
 80184fe:	1ad3      	subs	r3, r2, r3
 8018500:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	3318      	adds	r3, #24
 8018506:	4618      	mov	r0, r3
 8018508:	f7ff fce0 	bl	8017ecc <_ZNK8touchgfx9colortypecvtEv>
 801850c:	4603      	mov	r3, r0
 801850e:	f003 021f 	and.w	r2, r3, #31
 8018512:	4613      	mov	r3, r2
 8018514:	021b      	lsls	r3, r3, #8
 8018516:	1a9b      	subs	r3, r3, r2
 8018518:	4a55      	ldr	r2, [pc, #340]	; (8018670 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801851a:	fb82 1203 	smull	r1, r2, r2, r3
 801851e:	441a      	add	r2, r3
 8018520:	1112      	asrs	r2, r2, #4
 8018522:	17db      	asrs	r3, r3, #31
 8018524:	1ad3      	subs	r3, r2, r3
 8018526:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	7f1b      	ldrb	r3, [r3, #28]
 801852c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	061a      	lsls	r2, r3, #24
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	041b      	lsls	r3, r3, #16
 8018536:	431a      	orrs	r2, r3
 8018538:	693b      	ldr	r3, [r7, #16]
 801853a:	021b      	lsls	r3, r3, #8
 801853c:	4313      	orrs	r3, r2
 801853e:	68fa      	ldr	r2, [r7, #12]
 8018540:	4313      	orrs	r3, r2
 8018542:	623b      	str	r3, [r7, #32]
 8018544:	e00b      	b.n	801855e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	7f1b      	ldrb	r3, [r3, #28]
 801854a:	061b      	lsls	r3, r3, #24
 801854c:	461c      	mov	r4, r3
 801854e:	683b      	ldr	r3, [r7, #0]
 8018550:	3318      	adds	r3, #24
 8018552:	4618      	mov	r0, r3
 8018554:	f7ff fcae 	bl	8017eb4 <_ZNK8touchgfx9colortype10getColor32Ev>
 8018558:	4603      	mov	r3, r0
 801855a:	4323      	orrs	r3, r4
 801855c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	2b08      	cmp	r3, #8
 8018564:	d103      	bne.n	801856e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8018566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801856a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801856c:	e003      	b.n	8018576 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801856e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8018572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018574:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8018576:	4a40      	ldr	r2, [pc, #256]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801857c:	7ffb      	ldrb	r3, [r7, #31]
 801857e:	2b10      	cmp	r3, #16
 8018580:	d101      	bne.n	8018586 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8018582:	2302      	movs	r3, #2
 8018584:	e000      	b.n	8018588 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8018586:	2301      	movs	r3, #1
 8018588:	4a3b      	ldr	r2, [pc, #236]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801858a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	8adb      	ldrh	r3, [r3, #22]
 8018590:	461a      	mov	r2, r3
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	8a1b      	ldrh	r3, [r3, #16]
 8018596:	1ad3      	subs	r3, r2, r3
 8018598:	461a      	mov	r2, r3
 801859a:	4b37      	ldr	r3, [pc, #220]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801859c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801859e:	7ffb      	ldrb	r3, [r7, #31]
 80185a0:	2b10      	cmp	r3, #16
 80185a2:	d101      	bne.n	80185a8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80185a4:	2202      	movs	r2, #2
 80185a6:	e000      	b.n	80185aa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80185a8:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	8adb      	ldrh	r3, [r3, #22]
 80185ae:	4619      	mov	r1, r3
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	8a1b      	ldrh	r3, [r3, #16]
 80185b4:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80185b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80185b8:	482f      	ldr	r0, [pc, #188]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185ba:	f7ff fd29 	bl	8018010 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80185be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80185c4:	d11e      	bne.n	8018604 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80185c6:	4b2c      	ldr	r3, [pc, #176]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185c8:	2201      	movs	r2, #1
 80185ca:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80185cc:	4a2a      	ldr	r2, [pc, #168]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185ce:	6a3b      	ldr	r3, [r7, #32]
 80185d0:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80185d2:	4b29      	ldr	r3, [pc, #164]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185d4:	2209      	movs	r2, #9
 80185d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	8adb      	ldrh	r3, [r3, #22]
 80185dc:	461a      	mov	r2, r3
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	8a1b      	ldrh	r3, [r3, #16]
 80185e2:	1ad3      	subs	r3, r2, r3
 80185e4:	461a      	mov	r2, r3
 80185e6:	4b24      	ldr	r3, [pc, #144]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185e8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80185ea:	7ffb      	ldrb	r3, [r7, #31]
 80185ec:	2b10      	cmp	r3, #16
 80185ee:	d101      	bne.n	80185f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80185f0:	2302      	movs	r3, #2
 80185f2:	e000      	b.n	80185f6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80185f4:	2301      	movs	r3, #1
 80185f6:	4a20      	ldr	r2, [pc, #128]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185f8:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80185fa:	2100      	movs	r1, #0
 80185fc:	481e      	ldr	r0, [pc, #120]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185fe:	f7ec ffc5 	bl	800558c <HAL_DMA2D_ConfigLayer>
 8018602:	e005      	b.n	8018610 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8018604:	4a1c      	ldr	r2, [pc, #112]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018606:	69bb      	ldr	r3, [r7, #24]
 8018608:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801860a:	4b1b      	ldr	r3, [pc, #108]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801860c:	2200      	movs	r2, #0
 801860e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8018610:	2101      	movs	r1, #1
 8018612:	4819      	ldr	r0, [pc, #100]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018614:	f7ec ffba 	bl	800558c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8018618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801861a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801861e:	d115      	bne.n	801864c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018624:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801862a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018630:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8018636:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801863c:	9301      	str	r3, [sp, #4]
 801863e:	9200      	str	r2, [sp, #0]
 8018640:	4623      	mov	r3, r4
 8018642:	4602      	mov	r2, r0
 8018644:	480c      	ldr	r0, [pc, #48]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018646:	f7ec fdc4 	bl	80051d2 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801864a:	e00d      	b.n	8018668 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	68db      	ldr	r3, [r3, #12]
 8018650:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8018652:	683b      	ldr	r3, [r7, #0]
 8018654:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8018656:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801865c:	9300      	str	r3, [sp, #0]
 801865e:	460b      	mov	r3, r1
 8018660:	6a39      	ldr	r1, [r7, #32]
 8018662:	4805      	ldr	r0, [pc, #20]	; (8018678 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018664:	f7ec fd82 	bl	800516c <HAL_DMA2D_Start_IT>
}
 8018668:	bf00      	nop
 801866a:	372c      	adds	r7, #44	; 0x2c
 801866c:	46bd      	mov	sp, r7
 801866e:	bd90      	pop	{r4, r7, pc}
 8018670:	84210843 	.word	0x84210843
 8018674:	82082083 	.word	0x82082083
 8018678:	2000c6fc 	.word	0x2000c6fc

0801867c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	4a05      	ldr	r2, [pc, #20]	; (801869c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	601a      	str	r2, [r3, #0]
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	4618      	mov	r0, r3
 801868e:	f7ff fc2b 	bl	8017ee8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	4618      	mov	r0, r3
 8018696:	3708      	adds	r7, #8
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}
 801869c:	0802d3d8 	.word	0x0802d3d8

080186a0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b082      	sub	sp, #8
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
 80186a8:	6878      	ldr	r0, [r7, #4]
 80186aa:	f7ff ffe7 	bl	801867c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80186ae:	2114      	movs	r1, #20
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f011 f966 	bl	8029982 <_ZdlPvj>
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	4618      	mov	r0, r3
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80186c0:	b480      	push	{r7}
 80186c2:	b083      	sub	sp, #12
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
        texts = t;
 80186c8:	4a04      	ldr	r2, [pc, #16]	; (80186dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	6013      	str	r3, [r2, #0]
    }
 80186ce:	bf00      	nop
 80186d0:	370c      	adds	r7, #12
 80186d2:	46bd      	mov	sp, r7
 80186d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d8:	4770      	bx	lr
 80186da:	bf00      	nop
 80186dc:	2000bfb4 	.word	0x2000bfb4

080186e0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80186e0:	b480      	push	{r7}
 80186e2:	b085      	sub	sp, #20
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]
 80186ec:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80186ee:	4a0b      	ldr	r2, [pc, #44]	; (801871c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	68ba      	ldr	r2, [r7, #8]
 80186f8:	605a      	str	r2, [r3, #4]
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	687a      	ldr	r2, [r7, #4]
 80186fe:	609a      	str	r2, [r3, #8]
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	683a      	ldr	r2, [r7, #0]
 8018704:	60da      	str	r2, [r3, #12]
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	69ba      	ldr	r2, [r7, #24]
 801870a:	611a      	str	r2, [r3, #16]
    {
    }
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	4618      	mov	r0, r3
 8018710:	3714      	adds	r7, #20
 8018712:	46bd      	mov	sp, r7
 8018714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018718:	4770      	bx	lr
 801871a:	bf00      	nop
 801871c:	0802c468 	.word	0x0802c468

08018720 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8018720:	b480      	push	{r7}
 8018722:	b083      	sub	sp, #12
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
    {
 8018728:	4a04      	ldr	r2, [pc, #16]	; (801873c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	601a      	str	r2, [r3, #0]
    }
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	4618      	mov	r0, r3
 8018732:	370c      	adds	r7, #12
 8018734:	46bd      	mov	sp, r7
 8018736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801873a:	4770      	bx	lr
 801873c:	0802c468 	.word	0x0802c468

08018740 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
    }
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f7ff ffe9 	bl	8018720 <_ZN8touchgfx7MVPHeapD1Ev>
 801874e:	2114      	movs	r1, #20
 8018750:	6878      	ldr	r0, [r7, #4]
 8018752:	f011 f916 	bl	8029982 <_ZdlPvj>
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	4618      	mov	r0, r3
 801875a:	3708      	adds	r7, #8
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}

08018760 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8018760:	b480      	push	{r7}
 8018762:	b083      	sub	sp, #12
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
    {
 8018768:	4a04      	ldr	r2, [pc, #16]	; (801877c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	601a      	str	r2, [r3, #0]
    }
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	4618      	mov	r0, r3
 8018772:	370c      	adds	r7, #12
 8018774:	46bd      	mov	sp, r7
 8018776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877a:	4770      	bx	lr
 801877c:	0802dea4 	.word	0x0802dea4

08018780 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8018780:	b580      	push	{r7, lr}
 8018782:	b082      	sub	sp, #8
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
    }
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f7ff ffe9 	bl	8018760 <_ZN8touchgfx3LCDD1Ev>
 801878e:	2108      	movs	r1, #8
 8018790:	6878      	ldr	r0, [r7, #4]
 8018792:	f011 f8f6 	bl	8029982 <_ZdlPvj>
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	4618      	mov	r0, r3
 801879a:	3708      	adds	r7, #8
 801879c:	46bd      	mov	sp, r7
 801879e:	bd80      	pop	{r7, pc}

080187a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80187a0:	b480      	push	{r7}
 80187a2:	b083      	sub	sp, #12
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2200      	movs	r2, #0
 80187ac:	801a      	strh	r2, [r3, #0]
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2200      	movs	r2, #0
 80187b2:	805a      	strh	r2, [r3, #2]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2200      	movs	r2, #0
 80187b8:	809a      	strh	r2, [r3, #4]
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	2200      	movs	r2, #0
 80187be:	80da      	strh	r2, [r3, #6]
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	2200      	movs	r2, #0
 80187c4:	811a      	strh	r2, [r3, #8]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2200      	movs	r2, #0
 80187ca:	815a      	strh	r2, [r3, #10]
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2200      	movs	r2, #0
 80187d0:	819a      	strh	r2, [r3, #12]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	2200      	movs	r2, #0
 80187d6:	739a      	strb	r2, [r3, #14]
        {
        }
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	4618      	mov	r0, r3
 80187dc:	370c      	adds	r7, #12
 80187de:	46bd      	mov	sp, r7
 80187e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e4:	4770      	bx	lr

080187e6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80187e6:	b580      	push	{r7, lr}
 80187e8:	b082      	sub	sp, #8
 80187ea:	af00      	add	r7, sp, #0
 80187ec:	6078      	str	r0, [r7, #4]
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	4618      	mov	r0, r3
 80187f2:	f7ff ffd5 	bl	80187a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2200      	movs	r2, #0
 80187fa:	611a      	str	r2, [r3, #16]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2200      	movs	r2, #0
 8018800:	829a      	strh	r2, [r3, #20]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	4618      	mov	r0, r3
 8018806:	3708      	adds	r7, #8
 8018808:	46bd      	mov	sp, r7
 801880a:	bd80      	pop	{r7, pc}

0801880c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	60f8      	str	r0, [r7, #12]
 8018814:	60b9      	str	r1, [r7, #8]
 8018816:	607a      	str	r2, [r7, #4]
 8018818:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801881a:	4a44      	ldr	r2, [pc, #272]	; (801892c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	601a      	str	r2, [r3, #0]
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	68ba      	ldr	r2, [r7, #8]
 8018824:	605a      	str	r2, [r3, #4]
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	609a      	str	r2, [r3, #8]
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	683a      	ldr	r2, [r7, #0]
 8018830:	60da      	str	r2, [r3, #12]
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	2200      	movs	r2, #0
 8018836:	611a      	str	r2, [r3, #16]
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2200      	movs	r2, #0
 801883c:	615a      	str	r2, [r3, #20]
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2200      	movs	r2, #0
 8018842:	619a      	str	r2, [r3, #24]
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	331c      	adds	r3, #28
 8018848:	4618      	mov	r0, r3
 801884a:	f7ff ffcc 	bl	80187e6 <_ZN8touchgfx8GesturesC1Ev>
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	2200      	movs	r2, #0
 8018852:	639a      	str	r2, [r3, #56]	; 0x38
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	2200      	movs	r2, #0
 8018858:	63da      	str	r2, [r3, #60]	; 0x3c
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	2200      	movs	r2, #0
 801885e:	641a      	str	r2, [r3, #64]	; 0x40
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2200      	movs	r2, #0
 8018864:	645a      	str	r2, [r3, #68]	; 0x44
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2200      	movs	r2, #0
 801886a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	2201      	movs	r2, #1
 8018872:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	2201      	movs	r2, #1
 801887a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	2200      	movs	r2, #0
 8018882:	64da      	str	r2, [r3, #76]	; 0x4c
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	3350      	adds	r3, #80	; 0x50
 8018888:	4618      	mov	r0, r3
 801888a:	f7f9 fe3b 	bl	8012504 <_ZN8touchgfx4RectC1Ev>
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	2201      	movs	r2, #1
 8018892:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2200      	movs	r2, #0
 801889a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	2200      	movs	r2, #0
 80188a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	2201      	movs	r2, #1
 80188aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	2200      	movs	r2, #0
 80188b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	2200      	movs	r2, #0
 80188ba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	2200      	movs	r2, #0
 80188c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	2200      	movs	r2, #0
 80188ca:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2200      	movs	r2, #0
 80188d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	2200      	movs	r2, #0
 80188da:	671a      	str	r2, [r3, #112]	; 0x70
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	2200      	movs	r2, #0
 80188e0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80188e4:	4a12      	ldr	r2, [pc, #72]	; (8018930 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80188e6:	68fb      	ldr	r3, [r7, #12]
 80188e8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80188ea:	4a12      	ldr	r2, [pc, #72]	; (8018934 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80188ec:	8b3b      	ldrh	r3, [r7, #24]
 80188ee:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80188f0:	4a11      	ldr	r2, [pc, #68]	; (8018938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80188f2:	8bbb      	ldrh	r3, [r7, #28]
 80188f4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80188f6:	4b11      	ldr	r3, [pc, #68]	; (801893c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80188f8:	2200      	movs	r2, #0
 80188fa:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80188fc:	4b0d      	ldr	r3, [pc, #52]	; (8018934 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80188fe:	881a      	ldrh	r2, [r3, #0]
 8018900:	4b0f      	ldr	r3, [pc, #60]	; (8018940 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8018902:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018904:	4b0c      	ldr	r3, [pc, #48]	; (8018938 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8018906:	881a      	ldrh	r2, [r3, #0]
 8018908:	4b0e      	ldr	r3, [pc, #56]	; (8018944 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 801890a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801890c:	8b3a      	ldrh	r2, [r7, #24]
 801890e:	8bbb      	ldrh	r3, [r7, #28]
 8018910:	429a      	cmp	r2, r3
 8018912:	d301      	bcc.n	8018918 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8018914:	2200      	movs	r2, #0
 8018916:	e000      	b.n	801891a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8018918:	2201      	movs	r2, #1
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	4618      	mov	r0, r3
 8018924:	3710      	adds	r7, #16
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	0802cf44 	.word	0x0802cf44
 8018930:	2000bf18 	.word	0x2000bf18
 8018934:	2000bf0a 	.word	0x2000bf0a
 8018938:	2000bf0c 	.word	0x2000bf0c
 801893c:	2000bf0e 	.word	0x2000bf0e
 8018940:	2000bf10 	.word	0x2000bf10
 8018944:	2000bf12 	.word	0x2000bf12

08018948 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8018948:	b580      	push	{r7, lr}
 801894a:	b082      	sub	sp, #8
 801894c:	af00      	add	r7, sp, #0
 801894e:	6078      	str	r0, [r7, #4]
 8018950:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	4618      	mov	r0, r3
 8018956:	f7f8 fb5f 	bl	8011018 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801895a:	bf00      	nop
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
	...

08018964 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8018964:	b580      	push	{r7, lr}
 8018966:	b086      	sub	sp, #24
 8018968:	af02      	add	r7, sp, #8
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
 8018970:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8018972:	68f8      	ldr	r0, [r7, #12]
 8018974:	69bb      	ldr	r3, [r7, #24]
 8018976:	9300      	str	r3, [sp, #0]
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	687a      	ldr	r2, [r7, #4]
 801897c:	68b9      	ldr	r1, [r7, #8]
 801897e:	f7ff feaf 	bl	80186e0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8018982:	4a04      	ldr	r2, [pc, #16]	; (8018994 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	601a      	str	r2, [r3, #0]
    {

    }
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	0802c454 	.word	0x0802c454

08018998 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8018998:	b580      	push	{r7, lr}
 801899a:	af00      	add	r7, sp, #0
 801899c:	4801      	ldr	r0, [pc, #4]	; (80189a4 <__tcf_0+0xc>)
 801899e:	f000 f9dd 	bl	8018d5c <_ZN12FrontendHeapD1Ev>
 80189a2:	bd80      	pop	{r7, pc}
 80189a4:	200087dc 	.word	0x200087dc

080189a8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80189a8:	b580      	push	{r7, lr}
 80189aa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80189ac:	4b08      	ldr	r3, [pc, #32]	; (80189d0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	f003 0301 	and.w	r3, r3, #1
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d108      	bne.n	80189ca <_ZN12FrontendHeap11getInstanceEv+0x22>
 80189b8:	4806      	ldr	r0, [pc, #24]	; (80189d4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80189ba:	f000 f831 	bl	8018a20 <_ZN12FrontendHeapC1Ev>
 80189be:	4b04      	ldr	r3, [pc, #16]	; (80189d0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80189c0:	2201      	movs	r2, #1
 80189c2:	601a      	str	r2, [r3, #0]
 80189c4:	4804      	ldr	r0, [pc, #16]	; (80189d8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80189c6:	f011 f825 	bl	8029a14 <atexit>
        return instance;
 80189ca:	4b02      	ldr	r3, [pc, #8]	; (80189d4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80189cc:	4618      	mov	r0, r3
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	2000b204 	.word	0x2000b204
 80189d4:	200087dc 	.word	0x200087dc
 80189d8:	08018999 	.word	0x08018999

080189dc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	4a05      	ldr	r2, [pc, #20]	; (80189fc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	601a      	str	r2, [r3, #0]
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7ff fe97 	bl	8018720 <_ZN8touchgfx7MVPHeapD1Ev>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	4618      	mov	r0, r3
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	0802c454 	.word	0x0802c454

08018a00 <_ZN16FrontendHeapBaseD0Ev>:
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b082      	sub	sp, #8
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f7ff ffe7 	bl	80189dc <_ZN16FrontendHeapBaseD1Ev>
 8018a0e:	2114      	movs	r1, #20
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f010 ffb6 	bl	8029982 <_ZdlPvj>
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	4618      	mov	r0, r3
 8018a1a:	3708      	adds	r7, #8
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8018a20:	b5b0      	push	{r4, r5, r7, lr}
 8018a22:	b084      	sub	sp, #16
 8018a24:	af02      	add	r7, sp, #8
 8018a26:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	f103 0414 	add.w	r4, r3, #20
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	f642 0278 	movw	r2, #10360	; 0x2878
 8018a3c:	441a      	add	r2, r3
 8018a3e:	6879      	ldr	r1, [r7, #4]
 8018a40:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8018a44:	440b      	add	r3, r1
 8018a46:	9300      	str	r3, [sp, #0]
 8018a48:	4613      	mov	r3, r2
 8018a4a:	462a      	mov	r2, r5
 8018a4c:	4621      	mov	r1, r4
 8018a4e:	f7ff ff89 	bl	8018964 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8018a52:	4a1a      	ldr	r2, [pc, #104]	; (8018abc <_ZN12FrontendHeapC1Ev+0x9c>)
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	601a      	str	r2, [r3, #0]
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	3314      	adds	r3, #20
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f000 f8df 	bl	8018c20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	332c      	adds	r3, #44	; 0x2c
 8018a66:	4618      	mov	r0, r3
 8018a68:	f000 f90e 	bl	8018c88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	f642 0378 	movw	r3, #10360	; 0x2878
 8018a72:	4413      	add	r3, r2
 8018a74:	4618      	mov	r0, r3
 8018a76:	f000 f93d 	bl	8018cf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8018a7a:	687a      	ldr	r2, [r7, #4]
 8018a7c:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8018a80:	4413      	add	r3, r2
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	f642 2124 	movw	r1, #10788	; 0x2a24
 8018a88:	4411      	add	r1, r2
 8018a8a:	687a      	ldr	r2, [r7, #4]
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7fd fc1d 	bl	80162cc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8018a92:	687a      	ldr	r2, [r7, #4]
 8018a94:	f642 2324 	movw	r3, #10788	; 0x2a24
 8018a98:	4413      	add	r3, r2
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fe f95c 	bl	8016d58 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8018aa0:	6878      	ldr	r0, [r7, #4]
 8018aa2:	687a      	ldr	r2, [r7, #4]
 8018aa4:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8018aa8:	4413      	add	r3, r2
 8018aaa:	4619      	mov	r1, r3
 8018aac:	f7ff ff4c 	bl	8018948 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3708      	adds	r7, #8
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aba:	bf00      	nop
 8018abc:	0802c3a4 	.word	0x0802c3a4

08018ac0 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
    {
 8018ac8:	4a05      	ldr	r2, [pc, #20]	; (8018ae0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	601a      	str	r2, [r3, #0]
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ff fe45 	bl	8018760 <_ZN8touchgfx3LCDD1Ev>
    }
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	3708      	adds	r7, #8
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	0802f280 	.word	0x0802f280

08018ae4 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
    }
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	f7ff ffe7 	bl	8018ac0 <_ZN8touchgfx8LCD24bppD1Ev>
 8018af2:	2158      	movs	r1, #88	; 0x58
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f010 ff44 	bl	8029982 <_ZdlPvj>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	4618      	mov	r0, r3
 8018afe:	3708      	adds	r7, #8
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b086      	sub	sp, #24
 8018b08:	af02      	add	r7, sp, #8
 8018b0a:	60f8      	str	r0, [r7, #12]
 8018b0c:	60b9      	str	r1, [r7, #8]
 8018b0e:	607a      	str	r2, [r7, #4]
 8018b10:	603b      	str	r3, [r7, #0]
 8018b12:	68f8      	ldr	r0, [r7, #12]
 8018b14:	8bbb      	ldrh	r3, [r7, #28]
 8018b16:	9301      	str	r3, [sp, #4]
 8018b18:	8b3b      	ldrh	r3, [r7, #24]
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	687a      	ldr	r2, [r7, #4]
 8018b20:	68b9      	ldr	r1, [r7, #8]
 8018b22:	f7ff fe73 	bl	801880c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8018b26:	4a04      	ldr	r2, [pc, #16]	; (8018b38 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	601a      	str	r2, [r3, #0]
    }
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3710      	adds	r7, #16
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}
 8018b36:	bf00      	nop
 8018b38:	0802c478 	.word	0x0802c478

08018b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b086      	sub	sp, #24
 8018b40:	af02      	add	r7, sp, #8
 8018b42:	60f8      	str	r0, [r7, #12]
 8018b44:	60b9      	str	r1, [r7, #8]
 8018b46:	607a      	str	r2, [r7, #4]
 8018b48:	603b      	str	r3, [r7, #0]
 8018b4a:	68f8      	ldr	r0, [r7, #12]
 8018b4c:	8bbb      	ldrh	r3, [r7, #28]
 8018b4e:	9301      	str	r3, [sp, #4]
 8018b50:	8b3b      	ldrh	r3, [r7, #24]
 8018b52:	9300      	str	r3, [sp, #0]
 8018b54:	683b      	ldr	r3, [r7, #0]
 8018b56:	687a      	ldr	r2, [r7, #4]
 8018b58:	68b9      	ldr	r1, [r7, #8]
 8018b5a:	f7ff ffd3 	bl	8018b04 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018b5e:	4a04      	ldr	r2, [pc, #16]	; (8018b70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	601a      	str	r2, [r3, #0]
    }
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	4618      	mov	r0, r3
 8018b68:	3710      	adds	r7, #16
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd80      	pop	{r7, pc}
 8018b6e:	bf00      	nop
 8018b70:	0802c1a4 	.word	0x0802c1a4

08018b74 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	4a04      	ldr	r2, [pc, #16]	; (8018b90 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	601a      	str	r2, [r3, #0]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4618      	mov	r0, r3
 8018b86:	370c      	adds	r7, #12
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr
 8018b90:	0802c18c 	.word	0x0802c18c

08018b94 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	6078      	str	r0, [r7, #4]
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7ff ffe8 	bl	8018b74 <_ZN8touchgfx15TouchControllerC1Ev>
 8018ba4:	4a03      	ldr	r2, [pc, #12]	; (8018bb4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	601a      	str	r2, [r3, #0]
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4618      	mov	r0, r3
 8018bae:	3708      	adds	r7, #8
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	0802c174 	.word	0x0802c174

08018bb8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8018bb8:	b590      	push	{r4, r7, lr}
 8018bba:	b085      	sub	sp, #20
 8018bbc:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8018bbe:	f7fd fa61 	bl	8016084 <_ZN14BitmapDatabase11getInstanceEv>
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	f7fd fa68 	bl	8016098 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	4619      	mov	r1, r3
 8018bcc:	2300      	movs	r3, #0
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	f007 f999 	bl	801ff0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8018bda:	4809      	ldr	r0, [pc, #36]	; (8018c00 <touchgfx_init+0x48>)
 8018bdc:	f7ff fd70 	bl	80186c0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8018be0:	2000      	movs	r0, #0
 8018be2:	f7fd fa7d 	bl	80160e0 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8018be6:	4807      	ldr	r0, [pc, #28]	; (8018c04 <touchgfx_init+0x4c>)
 8018be8:	f007 f8de 	bl	801fda8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8018bec:	f7ff fedc 	bl	80189a8 <_ZN12FrontendHeap11getInstanceEv>
 8018bf0:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 8018bf2:	4805      	ldr	r0, [pc, #20]	; (8018c08 <touchgfx_init+0x50>)
 8018bf4:	f7fe ffda 	bl	8017bac <_ZN11TouchGFXHAL10initializeEv>
}
 8018bf8:	bf00      	nop
 8018bfa:	370c      	adds	r7, #12
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd90      	pop	{r4, r7, pc}
 8018c00:	2000be84 	.word	0x2000be84
 8018c04:	20000058 	.word	0x20000058
 8018c08:	2000be88 	.word	0x2000be88

08018c0c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 8018c10:	4802      	ldr	r0, [pc, #8]	; (8018c1c <touchgfx_taskEntry+0x10>)
 8018c12:	f001 fca6 	bl	801a562 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8018c16:	bf00      	nop
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	2000be88 	.word	0x2000be88

08018c20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f000 ff16 	bl	8019a5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018c30:	4a03      	ldr	r2, [pc, #12]	; (8018c40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	601a      	str	r2, [r3, #0]
    {
    }
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	4618      	mov	r0, r3
 8018c3a:	3708      	adds	r7, #8
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	0802c420 	.word	0x0802c420

08018c44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
    {
    }
 8018c4c:	4a05      	ldr	r2, [pc, #20]	; (8018c64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	601a      	str	r2, [r3, #0]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	4618      	mov	r0, r3
 8018c56:	f000 feff 	bl	8019a58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3708      	adds	r7, #8
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}
 8018c64:	0802c420 	.word	0x0802c420

08018c68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b082      	sub	sp, #8
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
    }
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f7ff ffe7 	bl	8018c44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018c76:	2118      	movs	r1, #24
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f010 fe82 	bl	8029982 <_ZdlPvj>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	4618      	mov	r0, r3
 8018c82:	3708      	adds	r7, #8
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}

08018c88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	4618      	mov	r0, r3
 8018c94:	f000 fee2 	bl	8019a5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018c98:	4a03      	ldr	r2, [pc, #12]	; (8018ca8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	601a      	str	r2, [r3, #0]
    }
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3708      	adds	r7, #8
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}
 8018ca8:	0802c3ec 	.word	0x0802c3ec

08018cac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
    }
 8018cb4:	4a05      	ldr	r2, [pc, #20]	; (8018ccc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	601a      	str	r2, [r3, #0]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f000 fecb 	bl	8019a58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	0802c3ec 	.word	0x0802c3ec

08018cd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    }
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f7ff ffe7 	bl	8018cac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018cde:	f642 014c 	movw	r1, #10316	; 0x284c
 8018ce2:	6878      	ldr	r0, [r7, #4]
 8018ce4:	f010 fe4d 	bl	8029982 <_ZdlPvj>
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	4618      	mov	r0, r3
 8018cec:	3708      	adds	r7, #8
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	bd80      	pop	{r7, pc}
	...

08018cf4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f000 feac 	bl	8019a5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018d04:	4a03      	ldr	r2, [pc, #12]	; (8018d14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	601a      	str	r2, [r3, #0]
    }
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	3708      	adds	r7, #8
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	0802c3b8 	.word	0x0802c3b8

08018d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b082      	sub	sp, #8
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
    }
 8018d20:	4a05      	ldr	r2, [pc, #20]	; (8018d38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	601a      	str	r2, [r3, #0]
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f000 fe95 	bl	8019a58 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	4618      	mov	r0, r3
 8018d32:	3708      	adds	r7, #8
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	0802c3b8 	.word	0x0802c3b8

08018d3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
    }
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f7ff ffe7 	bl	8018d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8018d4a:	215c      	movs	r1, #92	; 0x5c
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f010 fe18 	bl	8029982 <_ZdlPvj>
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	4618      	mov	r0, r3
 8018d56:	3708      	adds	r7, #8
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}

08018d5c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
 8018d64:	4a11      	ldr	r2, [pc, #68]	; (8018dac <_ZN12FrontendHeapD1Ev+0x50>)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	601a      	str	r2, [r3, #0]
 8018d6a:	687a      	ldr	r2, [r7, #4]
 8018d6c:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8018d70:	4413      	add	r3, r2
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7fd fa74 	bl	8016260 <_ZN19FrontendApplicationD1Ev>
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	f642 0378 	movw	r3, #10360	; 0x2878
 8018d7e:	4413      	add	r3, r2
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7ff ffc9 	bl	8018d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	332c      	adds	r3, #44	; 0x2c
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7ff ff8e 	bl	8018cac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	3314      	adds	r3, #20
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7ff ff55 	bl	8018c44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7ff fe1d 	bl	80189dc <_ZN16FrontendHeapBaseD1Ev>
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	4618      	mov	r0, r3
 8018da6:	3708      	adds	r7, #8
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}
 8018dac:	0802c3a4 	.word	0x0802c3a4

08018db0 <_ZN12FrontendHeapD0Ev>:
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b082      	sub	sp, #8
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f7ff ffcf 	bl	8018d5c <_ZN12FrontendHeapD1Ev>
 8018dbe:	f642 2128 	movw	r1, #10792	; 0x2a28
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f010 fddd 	bl	8029982 <_ZdlPvj>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3708      	adds	r7, #8
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}
	...

08018dd4 <_Z41__static_initialization_and_destruction_0ii>:
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b084      	sub	sp, #16
 8018dd8:	af02      	add	r7, sp, #8
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	6039      	str	r1, [r7, #0]
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2b01      	cmp	r3, #1
 8018de2:	d119      	bne.n	8018e18 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018dea:	4293      	cmp	r3, r2
 8018dec:	d114      	bne.n	8018e18 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8018dee:	4818      	ldr	r0, [pc, #96]	; (8018e50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018df0:	f7ff fed0 	bl	8018b94 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8018df4:	4817      	ldr	r0, [pc, #92]	; (8018e54 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018df6:	f7ff f965 	bl	80180c4 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8018dfa:	4817      	ldr	r0, [pc, #92]	; (8018e58 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018dfc:	f009 faac 	bl	8022358 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8018e00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018e04:	9301      	str	r3, [sp, #4]
 8018e06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8018e0a:	9300      	str	r3, [sp, #0]
 8018e0c:	4b10      	ldr	r3, [pc, #64]	; (8018e50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018e0e:	4a12      	ldr	r2, [pc, #72]	; (8018e58 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018e10:	4910      	ldr	r1, [pc, #64]	; (8018e54 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018e12:	4812      	ldr	r0, [pc, #72]	; (8018e5c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018e14:	f7ff fe92 	bl	8018b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d113      	bne.n	8018e46 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018e24:	4293      	cmp	r3, r2
 8018e26:	d10e      	bne.n	8018e46 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018e28:	480c      	ldr	r0, [pc, #48]	; (8018e5c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018e2a:	f7fe ff25 	bl	8017c78 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8018e2e:	480c      	ldr	r0, [pc, #48]	; (8018e60 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018e30:	f7f7 f9b2 	bl	8010198 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8018e34:	4808      	ldr	r0, [pc, #32]	; (8018e58 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018e36:	f7ff fe43 	bl	8018ac0 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8018e3a:	4806      	ldr	r0, [pc, #24]	; (8018e54 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018e3c:	f7ff f96c 	bl	8018118 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8018e40:	4803      	ldr	r0, [pc, #12]	; (8018e50 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018e42:	f7fe fc8f 	bl	8017764 <_ZN20STM32TouchControllerD1Ev>
}
 8018e46:	bf00      	nop
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
 8018e4e:	bf00      	nop
 8018e50:	2000b208 	.word	0x2000b208
 8018e54:	2000b20c 	.word	0x2000b20c
 8018e58:	2000be2c 	.word	0x2000be2c
 8018e5c:	2000be88 	.word	0x2000be88
 8018e60:	20000058 	.word	0x20000058

08018e64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8018e64:	b480      	push	{r7}
 8018e66:	b083      	sub	sp, #12
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8018e6c:	2301      	movs	r3, #1
    }
 8018e6e:	4618      	mov	r0, r3
 8018e70:	370c      	adds	r7, #12
 8018e72:	46bd      	mov	sp, r7
 8018e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e78:	4770      	bx	lr

08018e7a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8018e7a:	b480      	push	{r7}
 8018e7c:	b083      	sub	sp, #12
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8018e82:	2354      	movs	r3, #84	; 0x54
    }
 8018e84:	4618      	mov	r0, r3
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	460b      	mov	r3, r1
 8018e9a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8018e9c:	887b      	ldrh	r3, [r7, #2]
 8018e9e:	2254      	movs	r2, #84	; 0x54
 8018ea0:	fb02 f303 	mul.w	r3, r2, r3
 8018ea4:	3308      	adds	r3, #8
 8018ea6:	687a      	ldr	r2, [r7, #4]
 8018ea8:	4413      	add	r3, r2
    }
 8018eaa:	4618      	mov	r0, r3
 8018eac:	370c      	adds	r7, #12
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb4:	4770      	bx	lr

08018eb6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8018eb6:	b480      	push	{r7}
 8018eb8:	b083      	sub	sp, #12
 8018eba:	af00      	add	r7, sp, #0
 8018ebc:	6078      	str	r0, [r7, #4]
 8018ebe:	460b      	mov	r3, r1
 8018ec0:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8018ec2:	887b      	ldrh	r3, [r7, #2]
 8018ec4:	2254      	movs	r2, #84	; 0x54
 8018ec6:	fb02 f303 	mul.w	r3, r2, r3
 8018eca:	3308      	adds	r3, #8
 8018ecc:	687a      	ldr	r2, [r7, #4]
 8018ece:	4413      	add	r3, r2
    }
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	370c      	adds	r7, #12
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eda:	4770      	bx	lr

08018edc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8018edc:	b480      	push	{r7}
 8018ede:	b083      	sub	sp, #12
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8018ee4:	2301      	movs	r3, #1
    }
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	370c      	adds	r7, #12
 8018eea:	46bd      	mov	sp, r7
 8018eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ef0:	4770      	bx	lr

08018ef2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8018ef2:	b480      	push	{r7}
 8018ef4:	b083      	sub	sp, #12
 8018ef6:	af00      	add	r7, sp, #0
 8018ef8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8018efa:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 8018efe:	4618      	mov	r0, r3
 8018f00:	370c      	adds	r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8018f0a:	b480      	push	{r7}
 8018f0c:	b083      	sub	sp, #12
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
 8018f12:	460b      	mov	r3, r1
 8018f14:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018f16:	887b      	ldrh	r3, [r7, #2]
 8018f18:	f642 0244 	movw	r2, #10308	; 0x2844
 8018f1c:	fb02 f303 	mul.w	r3, r2, r3
 8018f20:	3308      	adds	r3, #8
 8018f22:	687a      	ldr	r2, [r7, #4]
 8018f24:	4413      	add	r3, r2
    }
 8018f26:	4618      	mov	r0, r3
 8018f28:	370c      	adds	r7, #12
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f30:	4770      	bx	lr

08018f32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8018f32:	b480      	push	{r7}
 8018f34:	b083      	sub	sp, #12
 8018f36:	af00      	add	r7, sp, #0
 8018f38:	6078      	str	r0, [r7, #4]
 8018f3a:	460b      	mov	r3, r1
 8018f3c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018f3e:	887b      	ldrh	r3, [r7, #2]
 8018f40:	f642 0244 	movw	r2, #10308	; 0x2844
 8018f44:	fb02 f303 	mul.w	r3, r2, r3
 8018f48:	3308      	adds	r3, #8
 8018f4a:	687a      	ldr	r2, [r7, #4]
 8018f4c:	4413      	add	r3, r2
    }
 8018f4e:	4618      	mov	r0, r3
 8018f50:	370c      	adds	r7, #12
 8018f52:	46bd      	mov	sp, r7
 8018f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f58:	4770      	bx	lr

08018f5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8018f5a:	b480      	push	{r7}
 8018f5c:	b083      	sub	sp, #12
 8018f5e:	af00      	add	r7, sp, #0
 8018f60:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8018f62:	2301      	movs	r3, #1
    }
 8018f64:	4618      	mov	r0, r3
 8018f66:	370c      	adds	r7, #12
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr

08018f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8018f70:	b480      	push	{r7}
 8018f72:	b083      	sub	sp, #12
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8018f78:	2310      	movs	r3, #16
    }
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	370c      	adds	r7, #12
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f84:	4770      	bx	lr

08018f86 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8018f86:	b480      	push	{r7}
 8018f88:	b083      	sub	sp, #12
 8018f8a:	af00      	add	r7, sp, #0
 8018f8c:	6078      	str	r0, [r7, #4]
 8018f8e:	460b      	mov	r3, r1
 8018f90:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018f92:	887b      	ldrh	r3, [r7, #2]
 8018f94:	011b      	lsls	r3, r3, #4
 8018f96:	3308      	adds	r3, #8
 8018f98:	687a      	ldr	r2, [r7, #4]
 8018f9a:	4413      	add	r3, r2
    }
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	370c      	adds	r7, #12
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa6:	4770      	bx	lr

08018fa8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8018fa8:	b480      	push	{r7}
 8018faa:	b083      	sub	sp, #12
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	460b      	mov	r3, r1
 8018fb2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018fb4:	887b      	ldrh	r3, [r7, #2]
 8018fb6:	011b      	lsls	r3, r3, #4
 8018fb8:	3308      	adds	r3, #8
 8018fba:	687a      	ldr	r2, [r7, #4]
 8018fbc:	4413      	add	r3, r2
    }
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	370c      	adds	r7, #12
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc8:	4770      	bx	lr

08018fca <_GLOBAL__sub_I_touchgfx_init>:
 8018fca:	b580      	push	{r7, lr}
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018fd2:	2001      	movs	r0, #1
 8018fd4:	f7ff fefe 	bl	8018dd4 <_Z41__static_initialization_and_destruction_0ii>
 8018fd8:	bd80      	pop	{r7, pc}

08018fda <_GLOBAL__sub_D_touchgfx_init>:
 8018fda:	b580      	push	{r7, lr}
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018fe2:	2000      	movs	r0, #0
 8018fe4:	f7ff fef6 	bl	8018dd4 <_Z41__static_initialization_and_destruction_0ii>
 8018fe8:	bd80      	pop	{r7, pc}

08018fea <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8018fea:	b580      	push	{r7, lr}
 8018fec:	b082      	sub	sp, #8
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	3318      	adds	r3, #24
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	4798      	blx	r3
    }
 8018ffe:	bf00      	nop
 8019000:	3708      	adds	r7, #8
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}

08019006 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8019006:	b480      	push	{r7}
 8019008:	b083      	sub	sp, #12
 801900a:	af00      	add	r7, sp, #0
 801900c:	6078      	str	r0, [r7, #4]
 801900e:	460b      	mov	r3, r1
 8019010:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	78fa      	ldrb	r2, [r7, #3]
 8019016:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 801901a:	bf00      	nop
 801901c:	370c      	adds	r7, #12
 801901e:	46bd      	mov	sp, r7
 8019020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019024:	4770      	bx	lr

08019026 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8019026:	b480      	push	{r7}
 8019028:	b083      	sub	sp, #12
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8019034:	3301      	adds	r3, #1
 8019036:	b2da      	uxtb	r2, r3
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801903e:	bf00      	nop
 8019040:	370c      	adds	r7, #12
 8019042:	46bd      	mov	sp, r7
 8019044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019048:	4770      	bx	lr
	...

0801904c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	460b      	mov	r3, r1
 8019056:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8019058:	78fb      	ldrb	r3, [r7, #3]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d002      	beq.n	8019064 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801905e:	78fb      	ldrb	r3, [r7, #3]
 8019060:	2b02      	cmp	r3, #2
 8019062:	d105      	bne.n	8019070 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	78fa      	ldrb	r2, [r7, #3]
 8019068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801906c:	2301      	movs	r3, #1
 801906e:	e027      	b.n	80190c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8019070:	78fb      	ldrb	r3, [r7, #3]
 8019072:	2b01      	cmp	r3, #1
 8019074:	d123      	bne.n	80190be <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801907a:	2b00      	cmp	r3, #0
 801907c:	d014      	beq.n	80190a8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	3380      	adds	r3, #128	; 0x80
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	4798      	blx	r3
 801908a:	4603      	mov	r3, r0
 801908c:	461a      	mov	r2, r3
 801908e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019092:	429a      	cmp	r2, r3
 8019094:	d008      	beq.n	80190a8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8019096:	4b0c      	ldr	r3, [pc, #48]	; (80190c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	f083 0301 	eor.w	r3, r3, #1
 801909e:	b2db      	uxtb	r3, r3
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d001      	beq.n	80190a8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80190a4:	2301      	movs	r3, #1
 80190a6:	e000      	b.n	80190aa <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80190a8:	2300      	movs	r3, #0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d005      	beq.n	80190ba <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	78fa      	ldrb	r2, [r7, #3]
 80190b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80190b6:	2301      	movs	r3, #1
 80190b8:	e002      	b.n	80190c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80190ba:	2300      	movs	r3, #0
 80190bc:	e000      	b.n	80190c0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80190be:	2300      	movs	r3, #0
    }
 80190c0:	4618      	mov	r0, r3
 80190c2:	3708      	adds	r7, #8
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd80      	pop	{r7, pc}
 80190c8:	2000bf14 	.word	0x2000bf14

080190cc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 80190cc:	b480      	push	{r7}
 80190ce:	b083      	sub	sp, #12
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
 80190d4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	683a      	ldr	r2, [r7, #0]
 80190da:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80190dc:	bf00      	nop
 80190de:	370c      	adds	r7, #12
 80190e0:	46bd      	mov	sp, r7
 80190e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e6:	4770      	bx	lr

080190e8 <__NVIC_EnableIRQ>:
{
 80190e8:	b480      	push	{r7}
 80190ea:	b083      	sub	sp, #12
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	4603      	mov	r3, r0
 80190f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80190f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	db0d      	blt.n	8019116 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80190fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	f003 021f 	and.w	r2, r3, #31
 8019104:	4907      	ldr	r1, [pc, #28]	; (8019124 <__NVIC_EnableIRQ+0x3c>)
 8019106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801910a:	095b      	lsrs	r3, r3, #5
 801910c:	2001      	movs	r0, #1
 801910e:	fa00 f202 	lsl.w	r2, r0, r2
 8019112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019116:	bf00      	nop
 8019118:	370c      	adds	r7, #12
 801911a:	46bd      	mov	sp, r7
 801911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019120:	4770      	bx	lr
 8019122:	bf00      	nop
 8019124:	e000e100 	.word	0xe000e100

08019128 <__NVIC_DisableIRQ>:
{
 8019128:	b480      	push	{r7}
 801912a:	b083      	sub	sp, #12
 801912c:	af00      	add	r7, sp, #0
 801912e:	4603      	mov	r3, r0
 8019130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019136:	2b00      	cmp	r3, #0
 8019138:	db12      	blt.n	8019160 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801913a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801913e:	b2db      	uxtb	r3, r3
 8019140:	f003 021f 	and.w	r2, r3, #31
 8019144:	4909      	ldr	r1, [pc, #36]	; (801916c <__NVIC_DisableIRQ+0x44>)
 8019146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801914a:	095b      	lsrs	r3, r3, #5
 801914c:	2001      	movs	r0, #1
 801914e:	fa00 f202 	lsl.w	r2, r0, r2
 8019152:	3320      	adds	r3, #32
 8019154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8019158:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801915c:	f3bf 8f6f 	isb	sy
}
 8019160:	bf00      	nop
 8019162:	370c      	adds	r7, #12
 8019164:	46bd      	mov	sp, r7
 8019166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916a:	4770      	bx	lr
 801916c:	e000e100 	.word	0xe000e100

08019170 <__NVIC_SetPriority>:
{
 8019170:	b480      	push	{r7}
 8019172:	b083      	sub	sp, #12
 8019174:	af00      	add	r7, sp, #0
 8019176:	4603      	mov	r3, r0
 8019178:	6039      	str	r1, [r7, #0]
 801917a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801917c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019180:	2b00      	cmp	r3, #0
 8019182:	db0c      	blt.n	801919e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	b2db      	uxtb	r3, r3
 8019188:	4a0e      	ldr	r2, [pc, #56]	; (80191c4 <__NVIC_SetPriority+0x54>)
 801918a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801918e:	4608      	mov	r0, r1
 8019190:	011b      	lsls	r3, r3, #4
 8019192:	b2d9      	uxtb	r1, r3
 8019194:	1813      	adds	r3, r2, r0
 8019196:	460a      	mov	r2, r1
 8019198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801919c:	e00c      	b.n	80191b8 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801919e:	683b      	ldr	r3, [r7, #0]
 80191a0:	b2da      	uxtb	r2, r3
 80191a2:	4909      	ldr	r1, [pc, #36]	; (80191c8 <__NVIC_SetPriority+0x58>)
 80191a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	f003 030f 	and.w	r3, r3, #15
 80191ae:	3b04      	subs	r3, #4
 80191b0:	0112      	lsls	r2, r2, #4
 80191b2:	b2d2      	uxtb	r2, r2
 80191b4:	440b      	add	r3, r1
 80191b6:	761a      	strb	r2, [r3, #24]
}
 80191b8:	bf00      	nop
 80191ba:	370c      	adds	r7, #12
 80191bc:	46bd      	mov	sp, r7
 80191be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c2:	4770      	bx	lr
 80191c4:	e000e100 	.word	0xe000e100
 80191c8:	e000ed00 	.word	0xe000ed00

080191cc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80191cc:	b5b0      	push	{r4, r5, r7, lr}
 80191ce:	b082      	sub	sp, #8
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	4618      	mov	r0, r3
 80191d8:	f001 fc88 	bl	801aaec <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 80191dc:	687d      	ldr	r5, [r7, #4]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	334c      	adds	r3, #76	; 0x4c
 80191e4:	681c      	ldr	r4, [r3, #0]
 80191e6:	f004 fbc9 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 80191ea:	4603      	mov	r3, r0
 80191ec:	4619      	mov	r1, r3
 80191ee:	4628      	mov	r0, r5
 80191f0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	490d      	ldr	r1, [pc, #52]	; (801922c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 80191f6:	4618      	mov	r0, r3
 80191f8:	f7ff ff68 	bl	80190cc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2101      	movs	r1, #1
 8019200:	4618      	mov	r0, r3
 8019202:	f7ff ff23 	bl	801904c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8019206:	6878      	ldr	r0, [r7, #4]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	3374      	adds	r3, #116	; 0x74
 801920e:	681c      	ldr	r4, [r3, #0]
 8019210:	2300      	movs	r3, #0
 8019212:	2200      	movs	r2, #0
 8019214:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8019218:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2101      	movs	r1, #1
 801921e:	4618      	mov	r0, r3
 8019220:	f7ff fef1 	bl	8019006 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8019224:	bf00      	nop
 8019226:	3708      	adds	r7, #8
 8019228:	46bd      	mov	sp, r7
 801922a:	bdb0      	pop	{r4, r5, r7, pc}
 801922c:	08017e11 	.word	0x08017e11

08019230 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b082      	sub	sp, #8
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8019238:	2109      	movs	r1, #9
 801923a:	205a      	movs	r0, #90	; 0x5a
 801923c:	f7ff ff98 	bl	8019170 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8019240:	2109      	movs	r1, #9
 8019242:	2058      	movs	r0, #88	; 0x58
 8019244:	f7ff ff94 	bl	8019170 <__NVIC_SetPriority>
}
 8019248:	bf00      	nop
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}

08019250 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8019258:	205a      	movs	r0, #90	; 0x5a
 801925a:	f7ff ff45 	bl	80190e8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801925e:	2058      	movs	r0, #88	; 0x58
 8019260:	f7ff ff42 	bl	80190e8 <__NVIC_EnableIRQ>
}
 8019264:	bf00      	nop
 8019266:	3708      	adds	r7, #8
 8019268:	46bd      	mov	sp, r7
 801926a:	bd80      	pop	{r7, pc}

0801926c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8019274:	205a      	movs	r0, #90	; 0x5a
 8019276:	f7ff ff57 	bl	8019128 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801927a:	2058      	movs	r0, #88	; 0x58
 801927c:	f7ff ff54 	bl	8019128 <__NVIC_DisableIRQ>
}
 8019280:	bf00      	nop
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8019288:	b480      	push	{r7}
 801928a:	b083      	sub	sp, #12
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8019290:	4b11      	ldr	r3, [pc, #68]	; (80192d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019292:	68db      	ldr	r3, [r3, #12]
 8019294:	b29b      	uxth	r3, r3
 8019296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801929a:	b29b      	uxth	r3, r3
 801929c:	3b01      	subs	r3, #1
 801929e:	b29a      	uxth	r2, r3
 80192a0:	4b0e      	ldr	r3, [pc, #56]	; (80192dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80192a2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80192a4:	4b0c      	ldr	r3, [pc, #48]	; (80192d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80192a6:	691b      	ldr	r3, [r3, #16]
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	3b01      	subs	r3, #1
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	4b0a      	ldr	r3, [pc, #40]	; (80192e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80192b6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80192b8:	4b08      	ldr	r3, [pc, #32]	; (80192dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80192ba:	881a      	ldrh	r2, [r3, #0]
 80192bc:	4b06      	ldr	r3, [pc, #24]	; (80192d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80192be:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80192c0:	4b05      	ldr	r3, [pc, #20]	; (80192d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80192c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192c4:	4a04      	ldr	r2, [pc, #16]	; (80192d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80192c6:	f043 0301 	orr.w	r3, r3, #1
 80192ca:	6353      	str	r3, [r2, #52]	; 0x34
}
 80192cc:	bf00      	nop
 80192ce:	370c      	adds	r7, #12
 80192d0:	46bd      	mov	sp, r7
 80192d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d6:	4770      	bx	lr
 80192d8:	40016800 	.word	0x40016800
 80192dc:	2000bf00 	.word	0x2000bf00
 80192e0:	2000bf02 	.word	0x2000bf02

080192e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80192e4:	b480      	push	{r7}
 80192e6:	b083      	sub	sp, #12
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80192ec:	4b03      	ldr	r3, [pc, #12]	; (80192fc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80192ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	370c      	adds	r7, #12
 80192f4:	46bd      	mov	sp, r7
 80192f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fa:	4770      	bx	lr
 80192fc:	40016884 	.word	0x40016884

08019300 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8019300:	b480      	push	{r7}
 8019302:	b083      	sub	sp, #12
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
 8019308:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801930a:	4a06      	ldr	r2, [pc, #24]	; (8019324 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8019310:	4b05      	ldr	r3, [pc, #20]	; (8019328 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8019312:	2201      	movs	r2, #1
 8019314:	625a      	str	r2, [r3, #36]	; 0x24
}
 8019316:	bf00      	nop
 8019318:	370c      	adds	r7, #12
 801931a:	46bd      	mov	sp, r7
 801931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop
 8019324:	40016884 	.word	0x40016884
 8019328:	40016800 	.word	0x40016800

0801932c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b082      	sub	sp, #8
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
 8019334:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	6839      	ldr	r1, [r7, #0]
 801933a:	4618      	mov	r0, r3
 801933c:	f001 f8e6 	bl	801a50c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8019340:	bf00      	nop
 8019342:	3708      	adds	r7, #8
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8019348:	b480      	push	{r7}
 801934a:	b085      	sub	sp, #20
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8019350:	4b0d      	ldr	r3, [pc, #52]	; (8019388 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8019352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019354:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8019356:	4b0c      	ldr	r3, [pc, #48]	; (8019388 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8019358:	68db      	ldr	r3, [r3, #12]
 801935a:	b29b      	uxth	r3, r3
 801935c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019360:	b29b      	uxth	r3, r3
 8019362:	3301      	adds	r3, #1
 8019364:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8019366:	89fa      	ldrh	r2, [r7, #14]
 8019368:	89bb      	ldrh	r3, [r7, #12]
 801936a:	429a      	cmp	r2, r3
 801936c:	d201      	bcs.n	8019372 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801936e:	2300      	movs	r3, #0
 8019370:	e003      	b.n	801937a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8019372:	89fa      	ldrh	r2, [r7, #14]
 8019374:	89bb      	ldrh	r3, [r7, #12]
 8019376:	1ad3      	subs	r3, r2, r3
 8019378:	b29b      	uxth	r3, r3
    }
}
 801937a:	4618      	mov	r0, r3
 801937c:	3714      	adds	r7, #20
 801937e:	46bd      	mov	sp, r7
 8019380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019384:	4770      	bx	lr
 8019386:	bf00      	nop
 8019388:	40016800 	.word	0x40016800

0801938c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801938c:	b580      	push	{r7, lr}
 801938e:	b082      	sub	sp, #8
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8019394:	4b1a      	ldr	r3, [pc, #104]	; (8019400 <HAL_LTDC_LineEventCallback+0x74>)
 8019396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019398:	4a1a      	ldr	r2, [pc, #104]	; (8019404 <HAL_LTDC_LineEventCallback+0x78>)
 801939a:	8812      	ldrh	r2, [r2, #0]
 801939c:	4293      	cmp	r3, r2
 801939e:	bf0c      	ite	eq
 80193a0:	2301      	moveq	r3, #1
 80193a2:	2300      	movne	r3, #0
 80193a4:	b2db      	uxtb	r3, r3
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d017      	beq.n	80193da <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80193aa:	4b17      	ldr	r3, [pc, #92]	; (8019408 <HAL_LTDC_LineEventCallback+0x7c>)
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	4619      	mov	r1, r3
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f7ed fae7 	bl	8006984 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80193b6:	f7f7 fbff 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 80193ba:	4603      	mov	r3, r0
 80193bc:	4618      	mov	r0, r3
 80193be:	f7ff fe32 	bl	8019026 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80193c2:	f7fe fce7 	bl	8017d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80193c6:	f7f7 fbf7 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 80193ca:	4603      	mov	r3, r0
 80193cc:	4618      	mov	r0, r3
 80193ce:	f001 fe15 	bl	801affc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80193d2:	2000      	movs	r0, #0
 80193d4:	f7fe f9e8 	bl	80177a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 80193d8:	e00e      	b.n	80193f8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80193da:	4b0a      	ldr	r3, [pc, #40]	; (8019404 <HAL_LTDC_LineEventCallback+0x78>)
 80193dc:	881b      	ldrh	r3, [r3, #0]
 80193de:	4619      	mov	r1, r3
 80193e0:	6878      	ldr	r0, [r7, #4]
 80193e2:	f7ed facf 	bl	8006984 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80193e6:	2000      	movs	r0, #0
 80193e8:	f7fe f9e9 	bl	80177be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 80193ec:	f7f7 fbe4 	bl	8010bb8 <_ZN8touchgfx3HAL11getInstanceEv>
 80193f0:	4603      	mov	r3, r0
 80193f2:	4618      	mov	r0, r3
 80193f4:	f7ff fdf9 	bl	8018fea <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 80193f8:	bf00      	nop
 80193fa:	3708      	adds	r7, #8
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}
 8019400:	40016800 	.word	0x40016800
 8019404:	2000bf00 	.word	0x2000bf00
 8019408:	2000bf02 	.word	0x2000bf02

0801940c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b082      	sub	sp, #8
 8019410:	af00      	add	r7, sp, #0
 8019412:	4603      	mov	r3, r0
 8019414:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8019416:	20c8      	movs	r0, #200	; 0xc8
 8019418:	f7f6 fbdc 	bl	800fbd4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801941c:	f000 fa7a 	bl	8019914 <ft5336_I2C_InitializeIfRequired>
}
 8019420:	bf00      	nop
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8019428:	b480      	push	{r7}
 801942a:	b083      	sub	sp, #12
 801942c:	af00      	add	r7, sp, #0
 801942e:	4603      	mov	r3, r0
 8019430:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8019432:	bf00      	nop
 8019434:	370c      	adds	r7, #12
 8019436:	46bd      	mov	sp, r7
 8019438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943c:	4770      	bx	lr

0801943e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 801943e:	b580      	push	{r7, lr}
 8019440:	b084      	sub	sp, #16
 8019442:	af00      	add	r7, sp, #0
 8019444:	4603      	mov	r3, r0
 8019446:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8019448:	2300      	movs	r3, #0
 801944a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 801944c:	2300      	movs	r3, #0
 801944e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8019450:	2300      	movs	r3, #0
 8019452:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8019454:	f000 fa5e 	bl	8019914 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8019458:	2300      	movs	r3, #0
 801945a:	73fb      	strb	r3, [r7, #15]
 801945c:	e010      	b.n	8019480 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 801945e:	88fb      	ldrh	r3, [r7, #6]
 8019460:	b2db      	uxtb	r3, r3
 8019462:	21a8      	movs	r1, #168	; 0xa8
 8019464:	4618      	mov	r0, r3
 8019466:	f7f6 fb97 	bl	800fb98 <TS_IO_Read>
 801946a:	4603      	mov	r3, r0
 801946c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 801946e:	7b7b      	ldrb	r3, [r7, #13]
 8019470:	b2db      	uxtb	r3, r3
 8019472:	2b51      	cmp	r3, #81	; 0x51
 8019474:	d101      	bne.n	801947a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8019476:	2301      	movs	r3, #1
 8019478:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801947a:	7bfb      	ldrb	r3, [r7, #15]
 801947c:	3301      	adds	r3, #1
 801947e:	73fb      	strb	r3, [r7, #15]
 8019480:	7bfb      	ldrb	r3, [r7, #15]
 8019482:	2b02      	cmp	r3, #2
 8019484:	d802      	bhi.n	801948c <ft5336_ReadID+0x4e>
 8019486:	7bbb      	ldrb	r3, [r7, #14]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d0e8      	beq.n	801945e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 801948c:	7b7b      	ldrb	r3, [r7, #13]
 801948e:	b2db      	uxtb	r3, r3
 8019490:	b29b      	uxth	r3, r3
}
 8019492:	4618      	mov	r0, r3
 8019494:	3710      	adds	r7, #16
 8019496:	46bd      	mov	sp, r7
 8019498:	bd80      	pop	{r7, pc}

0801949a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801949a:	b580      	push	{r7, lr}
 801949c:	b082      	sub	sp, #8
 801949e:	af00      	add	r7, sp, #0
 80194a0:	4603      	mov	r3, r0
 80194a2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80194a4:	88fb      	ldrh	r3, [r7, #6]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f000 fa44 	bl	8019934 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80194ac:	88fb      	ldrh	r3, [r7, #6]
 80194ae:	4618      	mov	r0, r3
 80194b0:	f000 f932 	bl	8019718 <ft5336_TS_DisableIT>
}
 80194b4:	bf00      	nop
 80194b6:	3708      	adds	r7, #8
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	4603      	mov	r3, r0
 80194c4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80194c6:	2300      	movs	r3, #0
 80194c8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80194ca:	88fb      	ldrh	r3, [r7, #6]
 80194cc:	b2db      	uxtb	r3, r3
 80194ce:	2102      	movs	r1, #2
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7f6 fb61 	bl	800fb98 <TS_IO_Read>
 80194d6:	4603      	mov	r3, r0
 80194d8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80194da:	7bfb      	ldrb	r3, [r7, #15]
 80194dc:	b2db      	uxtb	r3, r3
 80194de:	f003 030f 	and.w	r3, r3, #15
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80194e6:	7bfb      	ldrb	r3, [r7, #15]
 80194e8:	b2db      	uxtb	r3, r3
 80194ea:	2b05      	cmp	r3, #5
 80194ec:	d901      	bls.n	80194f2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80194ee:	2300      	movs	r3, #0
 80194f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80194f2:	7bfb      	ldrb	r3, [r7, #15]
 80194f4:	b2da      	uxtb	r2, r3
 80194f6:	4b05      	ldr	r3, [pc, #20]	; (801950c <ft5336_TS_DetectTouch+0x50>)
 80194f8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80194fa:	4b04      	ldr	r3, [pc, #16]	; (801950c <ft5336_TS_DetectTouch+0x50>)
 80194fc:	2200      	movs	r2, #0
 80194fe:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8019500:	7bfb      	ldrb	r3, [r7, #15]
 8019502:	b2db      	uxtb	r3, r3
}
 8019504:	4618      	mov	r0, r3
 8019506:	3710      	adds	r7, #16
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}
 801950c:	2000bf04 	.word	0x2000bf04

08019510 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b086      	sub	sp, #24
 8019514:	af00      	add	r7, sp, #0
 8019516:	4603      	mov	r3, r0
 8019518:	60b9      	str	r1, [r7, #8]
 801951a:	607a      	str	r2, [r7, #4]
 801951c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801951e:	2300      	movs	r3, #0
 8019520:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8019522:	2300      	movs	r3, #0
 8019524:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801952a:	2300      	movs	r3, #0
 801952c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801952e:	2300      	movs	r3, #0
 8019530:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8019532:	4b6d      	ldr	r3, [pc, #436]	; (80196e8 <ft5336_TS_GetXY+0x1d8>)
 8019534:	789a      	ldrb	r2, [r3, #2]
 8019536:	4b6c      	ldr	r3, [pc, #432]	; (80196e8 <ft5336_TS_GetXY+0x1d8>)
 8019538:	785b      	ldrb	r3, [r3, #1]
 801953a:	429a      	cmp	r2, r3
 801953c:	f080 80cf 	bcs.w	80196de <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8019540:	4b69      	ldr	r3, [pc, #420]	; (80196e8 <ft5336_TS_GetXY+0x1d8>)
 8019542:	789b      	ldrb	r3, [r3, #2]
 8019544:	2b09      	cmp	r3, #9
 8019546:	d871      	bhi.n	801962c <ft5336_TS_GetXY+0x11c>
 8019548:	a201      	add	r2, pc, #4	; (adr r2, 8019550 <ft5336_TS_GetXY+0x40>)
 801954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801954e:	bf00      	nop
 8019550:	08019579 	.word	0x08019579
 8019554:	0801958b 	.word	0x0801958b
 8019558:	0801959d 	.word	0x0801959d
 801955c:	080195af 	.word	0x080195af
 8019560:	080195c1 	.word	0x080195c1
 8019564:	080195d3 	.word	0x080195d3
 8019568:	080195e5 	.word	0x080195e5
 801956c:	080195f7 	.word	0x080195f7
 8019570:	08019609 	.word	0x08019609
 8019574:	0801961b 	.word	0x0801961b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8019578:	2304      	movs	r3, #4
 801957a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 801957c:	2303      	movs	r3, #3
 801957e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8019580:	2306      	movs	r3, #6
 8019582:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8019584:	2305      	movs	r3, #5
 8019586:	753b      	strb	r3, [r7, #20]
      break;
 8019588:	e051      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801958a:	230a      	movs	r3, #10
 801958c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 801958e:	2309      	movs	r3, #9
 8019590:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8019592:	230c      	movs	r3, #12
 8019594:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8019596:	230b      	movs	r3, #11
 8019598:	753b      	strb	r3, [r7, #20]
      break;
 801959a:	e048      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 801959c:	2310      	movs	r3, #16
 801959e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80195a0:	230f      	movs	r3, #15
 80195a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80195a4:	2312      	movs	r3, #18
 80195a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80195a8:	2311      	movs	r3, #17
 80195aa:	753b      	strb	r3, [r7, #20]
      break;
 80195ac:	e03f      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80195ae:	2316      	movs	r3, #22
 80195b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80195b2:	2315      	movs	r3, #21
 80195b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80195b6:	2318      	movs	r3, #24
 80195b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80195ba:	2317      	movs	r3, #23
 80195bc:	753b      	strb	r3, [r7, #20]
      break;
 80195be:	e036      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80195c0:	231c      	movs	r3, #28
 80195c2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80195c4:	231b      	movs	r3, #27
 80195c6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80195c8:	231e      	movs	r3, #30
 80195ca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80195cc:	231d      	movs	r3, #29
 80195ce:	753b      	strb	r3, [r7, #20]
      break;
 80195d0:	e02d      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80195d2:	2322      	movs	r3, #34	; 0x22
 80195d4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80195d6:	2321      	movs	r3, #33	; 0x21
 80195d8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80195da:	2324      	movs	r3, #36	; 0x24
 80195dc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80195de:	2323      	movs	r3, #35	; 0x23
 80195e0:	753b      	strb	r3, [r7, #20]
      break;
 80195e2:	e024      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80195e4:	2328      	movs	r3, #40	; 0x28
 80195e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80195e8:	2327      	movs	r3, #39	; 0x27
 80195ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80195ec:	232a      	movs	r3, #42	; 0x2a
 80195ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80195f0:	2329      	movs	r3, #41	; 0x29
 80195f2:	753b      	strb	r3, [r7, #20]
      break;
 80195f4:	e01b      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80195f6:	232e      	movs	r3, #46	; 0x2e
 80195f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80195fa:	232d      	movs	r3, #45	; 0x2d
 80195fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80195fe:	2330      	movs	r3, #48	; 0x30
 8019600:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8019602:	232f      	movs	r3, #47	; 0x2f
 8019604:	753b      	strb	r3, [r7, #20]
      break;
 8019606:	e012      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8019608:	2334      	movs	r3, #52	; 0x34
 801960a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 801960c:	2333      	movs	r3, #51	; 0x33
 801960e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8019610:	2336      	movs	r3, #54	; 0x36
 8019612:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8019614:	2335      	movs	r3, #53	; 0x35
 8019616:	753b      	strb	r3, [r7, #20]
      break;
 8019618:	e009      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 801961a:	233a      	movs	r3, #58	; 0x3a
 801961c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801961e:	2339      	movs	r3, #57	; 0x39
 8019620:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8019622:	233c      	movs	r3, #60	; 0x3c
 8019624:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8019626:	233b      	movs	r3, #59	; 0x3b
 8019628:	753b      	strb	r3, [r7, #20]
      break;
 801962a:	e000      	b.n	801962e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 801962c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801962e:	89fb      	ldrh	r3, [r7, #14]
 8019630:	b2db      	uxtb	r3, r3
 8019632:	7dfa      	ldrb	r2, [r7, #23]
 8019634:	4611      	mov	r1, r2
 8019636:	4618      	mov	r0, r3
 8019638:	f7f6 faae 	bl	800fb98 <TS_IO_Read>
 801963c:	4603      	mov	r3, r0
 801963e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8019640:	7cfb      	ldrb	r3, [r7, #19]
 8019642:	b2db      	uxtb	r3, r3
 8019644:	b29a      	uxth	r2, r3
 8019646:	4b29      	ldr	r3, [pc, #164]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 8019648:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801964a:	89fb      	ldrh	r3, [r7, #14]
 801964c:	b2db      	uxtb	r3, r3
 801964e:	7dba      	ldrb	r2, [r7, #22]
 8019650:	4611      	mov	r1, r2
 8019652:	4618      	mov	r0, r3
 8019654:	f7f6 faa0 	bl	800fb98 <TS_IO_Read>
 8019658:	4603      	mov	r3, r0
 801965a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801965c:	7cfb      	ldrb	r3, [r7, #19]
 801965e:	b2db      	uxtb	r3, r3
 8019660:	021b      	lsls	r3, r3, #8
 8019662:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019666:	b21a      	sxth	r2, r3
 8019668:	4b20      	ldr	r3, [pc, #128]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 801966a:	881b      	ldrh	r3, [r3, #0]
 801966c:	b21b      	sxth	r3, r3
 801966e:	4313      	orrs	r3, r2
 8019670:	b21b      	sxth	r3, r3
 8019672:	b29a      	uxth	r2, r3
 8019674:	4b1d      	ldr	r3, [pc, #116]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 8019676:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8019678:	4b1c      	ldr	r3, [pc, #112]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 801967a:	881a      	ldrh	r2, [r3, #0]
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8019680:	89fb      	ldrh	r3, [r7, #14]
 8019682:	b2db      	uxtb	r3, r3
 8019684:	7d7a      	ldrb	r2, [r7, #21]
 8019686:	4611      	mov	r1, r2
 8019688:	4618      	mov	r0, r3
 801968a:	f7f6 fa85 	bl	800fb98 <TS_IO_Read>
 801968e:	4603      	mov	r3, r0
 8019690:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8019692:	7cfb      	ldrb	r3, [r7, #19]
 8019694:	b2db      	uxtb	r3, r3
 8019696:	b29a      	uxth	r2, r3
 8019698:	4b14      	ldr	r3, [pc, #80]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 801969a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801969c:	89fb      	ldrh	r3, [r7, #14]
 801969e:	b2db      	uxtb	r3, r3
 80196a0:	7d3a      	ldrb	r2, [r7, #20]
 80196a2:	4611      	mov	r1, r2
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7f6 fa77 	bl	800fb98 <TS_IO_Read>
 80196aa:	4603      	mov	r3, r0
 80196ac:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80196ae:	7cfb      	ldrb	r3, [r7, #19]
 80196b0:	b2db      	uxtb	r3, r3
 80196b2:	021b      	lsls	r3, r3, #8
 80196b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80196b8:	b21a      	sxth	r2, r3
 80196ba:	4b0c      	ldr	r3, [pc, #48]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 80196bc:	881b      	ldrh	r3, [r3, #0]
 80196be:	b21b      	sxth	r3, r3
 80196c0:	4313      	orrs	r3, r2
 80196c2:	b21b      	sxth	r3, r3
 80196c4:	b29a      	uxth	r2, r3
 80196c6:	4b09      	ldr	r3, [pc, #36]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 80196c8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80196ca:	4b08      	ldr	r3, [pc, #32]	; (80196ec <ft5336_TS_GetXY+0x1dc>)
 80196cc:	881a      	ldrh	r2, [r3, #0]
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80196d2:	4b05      	ldr	r3, [pc, #20]	; (80196e8 <ft5336_TS_GetXY+0x1d8>)
 80196d4:	789b      	ldrb	r3, [r3, #2]
 80196d6:	3301      	adds	r3, #1
 80196d8:	b2da      	uxtb	r2, r3
 80196da:	4b03      	ldr	r3, [pc, #12]	; (80196e8 <ft5336_TS_GetXY+0x1d8>)
 80196dc:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80196de:	bf00      	nop
 80196e0:	3718      	adds	r7, #24
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}
 80196e6:	bf00      	nop
 80196e8:	2000bf04 	.word	0x2000bf04
 80196ec:	2000bf08 	.word	0x2000bf08

080196f0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	4603      	mov	r3, r0
 80196f8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80196fa:	2300      	movs	r3, #0
 80196fc:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80196fe:	2301      	movs	r3, #1
 8019700:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8019702:	88fb      	ldrh	r3, [r7, #6]
 8019704:	b2db      	uxtb	r3, r3
 8019706:	7bfa      	ldrb	r2, [r7, #15]
 8019708:	21a4      	movs	r1, #164	; 0xa4
 801970a:	4618      	mov	r0, r3
 801970c:	f7f6 fa2a 	bl	800fb64 <TS_IO_Write>
}
 8019710:	bf00      	nop
 8019712:	3710      	adds	r7, #16
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}

08019718 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b084      	sub	sp, #16
 801971c:	af00      	add	r7, sp, #0
 801971e:	4603      	mov	r3, r0
 8019720:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8019722:	2300      	movs	r3, #0
 8019724:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8019726:	2300      	movs	r3, #0
 8019728:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801972a:	88fb      	ldrh	r3, [r7, #6]
 801972c:	b2db      	uxtb	r3, r3
 801972e:	7bfa      	ldrb	r2, [r7, #15]
 8019730:	21a4      	movs	r1, #164	; 0xa4
 8019732:	4618      	mov	r0, r3
 8019734:	f7f6 fa16 	bl	800fb64 <TS_IO_Write>
}
 8019738:	bf00      	nop
 801973a:	3710      	adds	r7, #16
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8019740:	b480      	push	{r7}
 8019742:	b083      	sub	sp, #12
 8019744:	af00      	add	r7, sp, #0
 8019746:	4603      	mov	r3, r0
 8019748:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801974a:	2300      	movs	r3, #0
}
 801974c:	4618      	mov	r0, r3
 801974e:	370c      	adds	r7, #12
 8019750:	46bd      	mov	sp, r7
 8019752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019756:	4770      	bx	lr

08019758 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8019758:	b480      	push	{r7}
 801975a:	b083      	sub	sp, #12
 801975c:	af00      	add	r7, sp, #0
 801975e:	4603      	mov	r3, r0
 8019760:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8019762:	bf00      	nop
 8019764:	370c      	adds	r7, #12
 8019766:	46bd      	mov	sp, r7
 8019768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976c:	4770      	bx	lr

0801976e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 801976e:	b580      	push	{r7, lr}
 8019770:	b084      	sub	sp, #16
 8019772:	af00      	add	r7, sp, #0
 8019774:	4603      	mov	r3, r0
 8019776:	6039      	str	r1, [r7, #0]
 8019778:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 801977a:	2300      	movs	r3, #0
 801977c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801977e:	88fb      	ldrh	r3, [r7, #6]
 8019780:	b2db      	uxtb	r3, r3
 8019782:	2101      	movs	r1, #1
 8019784:	4618      	mov	r0, r3
 8019786:	f7f6 fa07 	bl	800fb98 <TS_IO_Read>
 801978a:	4603      	mov	r3, r0
 801978c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 801978e:	7bfb      	ldrb	r3, [r7, #15]
 8019790:	b2db      	uxtb	r3, r3
 8019792:	461a      	mov	r2, r3
 8019794:	683b      	ldr	r3, [r7, #0]
 8019796:	601a      	str	r2, [r3, #0]
}
 8019798:	bf00      	nop
 801979a:	3710      	adds	r7, #16
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}

080197a0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b086      	sub	sp, #24
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	60b9      	str	r1, [r7, #8]
 80197a8:	607a      	str	r2, [r7, #4]
 80197aa:	603b      	str	r3, [r7, #0]
 80197ac:	4603      	mov	r3, r0
 80197ae:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80197b0:	2300      	movs	r3, #0
 80197b2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80197b8:	2300      	movs	r3, #0
 80197ba:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80197bc:	2300      	movs	r3, #0
 80197be:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80197c0:	4b4d      	ldr	r3, [pc, #308]	; (80198f8 <ft5336_TS_GetTouchInfo+0x158>)
 80197c2:	785b      	ldrb	r3, [r3, #1]
 80197c4:	461a      	mov	r2, r3
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	4293      	cmp	r3, r2
 80197ca:	f080 8090 	bcs.w	80198ee <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80197ce:	68bb      	ldr	r3, [r7, #8]
 80197d0:	2b09      	cmp	r3, #9
 80197d2:	d85d      	bhi.n	8019890 <ft5336_TS_GetTouchInfo+0xf0>
 80197d4:	a201      	add	r2, pc, #4	; (adr r2, 80197dc <ft5336_TS_GetTouchInfo+0x3c>)
 80197d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197da:	bf00      	nop
 80197dc:	08019805 	.word	0x08019805
 80197e0:	08019813 	.word	0x08019813
 80197e4:	08019821 	.word	0x08019821
 80197e8:	0801982f 	.word	0x0801982f
 80197ec:	0801983d 	.word	0x0801983d
 80197f0:	0801984b 	.word	0x0801984b
 80197f4:	08019859 	.word	0x08019859
 80197f8:	08019867 	.word	0x08019867
 80197fc:	08019875 	.word	0x08019875
 8019800:	08019883 	.word	0x08019883
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8019804:	2303      	movs	r3, #3
 8019806:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8019808:	2307      	movs	r3, #7
 801980a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 801980c:	2308      	movs	r3, #8
 801980e:	757b      	strb	r3, [r7, #21]
      break;
 8019810:	e03f      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8019812:	2309      	movs	r3, #9
 8019814:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8019816:	230d      	movs	r3, #13
 8019818:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801981a:	230e      	movs	r3, #14
 801981c:	757b      	strb	r3, [r7, #21]
      break;
 801981e:	e038      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8019820:	230f      	movs	r3, #15
 8019822:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8019824:	2313      	movs	r3, #19
 8019826:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8019828:	2314      	movs	r3, #20
 801982a:	757b      	strb	r3, [r7, #21]
      break;
 801982c:	e031      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801982e:	2315      	movs	r3, #21
 8019830:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8019832:	2319      	movs	r3, #25
 8019834:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8019836:	231a      	movs	r3, #26
 8019838:	757b      	strb	r3, [r7, #21]
      break;
 801983a:	e02a      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 801983c:	231b      	movs	r3, #27
 801983e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8019840:	231f      	movs	r3, #31
 8019842:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8019844:	2320      	movs	r3, #32
 8019846:	757b      	strb	r3, [r7, #21]
      break;
 8019848:	e023      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 801984a:	2321      	movs	r3, #33	; 0x21
 801984c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801984e:	2325      	movs	r3, #37	; 0x25
 8019850:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8019852:	2326      	movs	r3, #38	; 0x26
 8019854:	757b      	strb	r3, [r7, #21]
      break;
 8019856:	e01c      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8019858:	2327      	movs	r3, #39	; 0x27
 801985a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 801985c:	232b      	movs	r3, #43	; 0x2b
 801985e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8019860:	232c      	movs	r3, #44	; 0x2c
 8019862:	757b      	strb	r3, [r7, #21]
      break;
 8019864:	e015      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8019866:	232d      	movs	r3, #45	; 0x2d
 8019868:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801986a:	2331      	movs	r3, #49	; 0x31
 801986c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801986e:	2332      	movs	r3, #50	; 0x32
 8019870:	757b      	strb	r3, [r7, #21]
      break;
 8019872:	e00e      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8019874:	2333      	movs	r3, #51	; 0x33
 8019876:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8019878:	2337      	movs	r3, #55	; 0x37
 801987a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 801987c:	2338      	movs	r3, #56	; 0x38
 801987e:	757b      	strb	r3, [r7, #21]
      break;
 8019880:	e007      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8019882:	2339      	movs	r3, #57	; 0x39
 8019884:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8019886:	233d      	movs	r3, #61	; 0x3d
 8019888:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801988a:	233e      	movs	r3, #62	; 0x3e
 801988c:	757b      	strb	r3, [r7, #21]
      break;
 801988e:	e000      	b.n	8019892 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8019890:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8019892:	89fb      	ldrh	r3, [r7, #14]
 8019894:	b2db      	uxtb	r3, r3
 8019896:	7dfa      	ldrb	r2, [r7, #23]
 8019898:	4611      	mov	r1, r2
 801989a:	4618      	mov	r0, r3
 801989c:	f7f6 f97c 	bl	800fb98 <TS_IO_Read>
 80198a0:	4603      	mov	r3, r0
 80198a2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80198a4:	7d3b      	ldrb	r3, [r7, #20]
 80198a6:	b2db      	uxtb	r3, r3
 80198a8:	119b      	asrs	r3, r3, #6
 80198aa:	f003 0203 	and.w	r2, r3, #3
 80198ae:	6a3b      	ldr	r3, [r7, #32]
 80198b0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80198b2:	89fb      	ldrh	r3, [r7, #14]
 80198b4:	b2db      	uxtb	r3, r3
 80198b6:	7dba      	ldrb	r2, [r7, #22]
 80198b8:	4611      	mov	r1, r2
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7f6 f96c 	bl	800fb98 <TS_IO_Read>
 80198c0:	4603      	mov	r3, r0
 80198c2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80198c4:	7d3b      	ldrb	r3, [r7, #20]
 80198c6:	b2db      	uxtb	r3, r3
 80198c8:	461a      	mov	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80198ce:	89fb      	ldrh	r3, [r7, #14]
 80198d0:	b2db      	uxtb	r3, r3
 80198d2:	7d7a      	ldrb	r2, [r7, #21]
 80198d4:	4611      	mov	r1, r2
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7f6 f95e 	bl	800fb98 <TS_IO_Read>
 80198dc:	4603      	mov	r3, r0
 80198de:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80198e0:	7d3b      	ldrb	r3, [r7, #20]
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	111b      	asrs	r3, r3, #4
 80198e6:	f003 0204 	and.w	r2, r3, #4
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80198ee:	bf00      	nop
 80198f0:	3718      	adds	r7, #24
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	2000bf04 	.word	0x2000bf04

080198fc <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80198fc:	b480      	push	{r7}
 80198fe:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8019900:	4b03      	ldr	r3, [pc, #12]	; (8019910 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8019902:	781b      	ldrb	r3, [r3, #0]
}
 8019904:	4618      	mov	r0, r3
 8019906:	46bd      	mov	sp, r7
 8019908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990c:	4770      	bx	lr
 801990e:	bf00      	nop
 8019910:	2000bf04 	.word	0x2000bf04

08019914 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8019918:	f7ff fff0 	bl	80198fc <ft5336_Get_I2C_InitializedStatus>
 801991c:	4603      	mov	r3, r0
 801991e:	2b00      	cmp	r3, #0
 8019920:	d104      	bne.n	801992c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8019922:	f7f6 f915 	bl	800fb50 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8019926:	4b02      	ldr	r3, [pc, #8]	; (8019930 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8019928:	2201      	movs	r2, #1
 801992a:	701a      	strb	r2, [r3, #0]
  }
}
 801992c:	bf00      	nop
 801992e:	bd80      	pop	{r7, pc}
 8019930:	2000bf04 	.word	0x2000bf04

08019934 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8019934:	b480      	push	{r7}
 8019936:	b085      	sub	sp, #20
 8019938:	af00      	add	r7, sp, #0
 801993a:	4603      	mov	r3, r0
 801993c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801993e:	2300      	movs	r3, #0
 8019940:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8019942:	68fb      	ldr	r3, [r7, #12]
}
 8019944:	4618      	mov	r0, r3
 8019946:	3714      	adds	r7, #20
 8019948:	46bd      	mov	sp, r7
 801994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994e:	4770      	bx	lr

08019950 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019950:	8880      	ldrh	r0, [r0, #4]
 8019952:	4770      	bx	lr

08019954 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019954:	2300      	movs	r3, #0
 8019956:	8083      	strh	r3, [r0, #4]
 8019958:	4770      	bx	lr
	...

0801995c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801995e:	6803      	ldr	r3, [r0, #0]
 8019960:	460e      	mov	r6, r1
 8019962:	2100      	movs	r1, #0
 8019964:	4605      	mov	r5, r0
 8019966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019968:	4798      	blx	r3
 801996a:	4604      	mov	r4, r0
 801996c:	682b      	ldr	r3, [r5, #0]
 801996e:	4628      	mov	r0, r5
 8019970:	1b34      	subs	r4, r6, r4
 8019972:	6a1b      	ldr	r3, [r3, #32]
 8019974:	b2a4      	uxth	r4, r4
 8019976:	4798      	blx	r3
 8019978:	88ab      	ldrh	r3, [r5, #4]
 801997a:	fbb4 f4f0 	udiv	r4, r4, r0
 801997e:	42a3      	cmp	r3, r4
 8019980:	d805      	bhi.n	801998e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8019982:	4b0e      	ldr	r3, [pc, #56]	; (80199bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8019984:	211e      	movs	r1, #30
 8019986:	4a0e      	ldr	r2, [pc, #56]	; (80199c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8019988:	480e      	ldr	r0, [pc, #56]	; (80199c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801998a:	f010 f825 	bl	80299d8 <__assert_func>
 801998e:	682b      	ldr	r3, [r5, #0]
 8019990:	2100      	movs	r1, #0
 8019992:	4628      	mov	r0, r5
 8019994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019996:	4798      	blx	r3
 8019998:	682b      	ldr	r3, [r5, #0]
 801999a:	4607      	mov	r7, r0
 801999c:	4628      	mov	r0, r5
 801999e:	6a1b      	ldr	r3, [r3, #32]
 80199a0:	4798      	blx	r3
 80199a2:	1bf3      	subs	r3, r6, r7
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	fbb3 f2f0 	udiv	r2, r3, r0
 80199aa:	fb02 3010 	mls	r0, r2, r0, r3
 80199ae:	b118      	cbz	r0, 80199b8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80199b0:	4b05      	ldr	r3, [pc, #20]	; (80199c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80199b2:	211f      	movs	r1, #31
 80199b4:	4a02      	ldr	r2, [pc, #8]	; (80199c0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80199b6:	e7e7      	b.n	8019988 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80199b8:	4620      	mov	r0, r4
 80199ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199bc:	0802c524 	.word	0x0802c524
 80199c0:	0802c692 	.word	0x0802c692
 80199c4:	0802c539 	.word	0x0802c539
 80199c8:	0802c567 	.word	0x0802c567

080199cc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80199cc:	b538      	push	{r3, r4, r5, lr}
 80199ce:	6803      	ldr	r3, [r0, #0]
 80199d0:	460d      	mov	r5, r1
 80199d2:	4604      	mov	r4, r0
 80199d4:	6a1b      	ldr	r3, [r3, #32]
 80199d6:	4798      	blx	r3
 80199d8:	4285      	cmp	r5, r0
 80199da:	d905      	bls.n	80199e8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80199dc:	4b0c      	ldr	r3, [pc, #48]	; (8019a10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80199de:	212f      	movs	r1, #47	; 0x2f
 80199e0:	4a0c      	ldr	r2, [pc, #48]	; (8019a14 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80199e2:	480d      	ldr	r0, [pc, #52]	; (8019a18 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80199e4:	f00f fff8 	bl	80299d8 <__assert_func>
 80199e8:	6823      	ldr	r3, [r4, #0]
 80199ea:	4620      	mov	r0, r4
 80199ec:	88a5      	ldrh	r5, [r4, #4]
 80199ee:	69db      	ldr	r3, [r3, #28]
 80199f0:	4798      	blx	r3
 80199f2:	4285      	cmp	r5, r0
 80199f4:	d303      	bcc.n	80199fe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80199f6:	4b09      	ldr	r3, [pc, #36]	; (8019a1c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80199f8:	2130      	movs	r1, #48	; 0x30
 80199fa:	4a06      	ldr	r2, [pc, #24]	; (8019a14 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80199fc:	e7f1      	b.n	80199e2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80199fe:	6823      	ldr	r3, [r4, #0]
 8019a00:	4620      	mov	r0, r4
 8019a02:	88a1      	ldrh	r1, [r4, #4]
 8019a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a06:	4798      	blx	r3
 8019a08:	88a3      	ldrh	r3, [r4, #4]
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	80a3      	strh	r3, [r4, #4]
 8019a0e:	bd38      	pop	{r3, r4, r5, pc}
 8019a10:	0802c5e1 	.word	0x0802c5e1
 8019a14:	0802c6d5 	.word	0x0802c6d5
 8019a18:	0802c539 	.word	0x0802c539
 8019a1c:	0802c5f8 	.word	0x0802c5f8

08019a20 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	6803      	ldr	r3, [r0, #0]
 8019a24:	4616      	mov	r6, r2
 8019a26:	4604      	mov	r4, r0
 8019a28:	460d      	mov	r5, r1
 8019a2a:	6a1b      	ldr	r3, [r3, #32]
 8019a2c:	4798      	blx	r3
 8019a2e:	4286      	cmp	r6, r0
 8019a30:	d905      	bls.n	8019a3e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8019a32:	4b06      	ldr	r3, [pc, #24]	; (8019a4c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8019a34:	2139      	movs	r1, #57	; 0x39
 8019a36:	4a06      	ldr	r2, [pc, #24]	; (8019a50 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8019a38:	4806      	ldr	r0, [pc, #24]	; (8019a54 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8019a3a:	f00f ffcd 	bl	80299d8 <__assert_func>
 8019a3e:	6823      	ldr	r3, [r4, #0]
 8019a40:	4629      	mov	r1, r5
 8019a42:	4620      	mov	r0, r4
 8019a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a4a:	4718      	bx	r3
 8019a4c:	0802c5e1 	.word	0x0802c5e1
 8019a50:	0802c648 	.word	0x0802c648
 8019a54:	0802c539 	.word	0x0802c539

08019a58 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019a58:	4770      	bx	lr
	...

08019a5c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019a5c:	4a02      	ldr	r2, [pc, #8]	; (8019a68 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8019a5e:	6002      	str	r2, [r0, #0]
 8019a60:	2200      	movs	r2, #0
 8019a62:	8082      	strh	r2, [r0, #4]
 8019a64:	4770      	bx	lr
 8019a66:	bf00      	nop
 8019a68:	0802c61c 	.word	0x0802c61c

08019a6c <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 8019a6c:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 8019a70:	4770      	bx	lr

08019a72 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8019a72:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8019a76:	4770      	bx	lr

08019a78 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8019a78:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 8019a7c:	4770      	bx	lr

08019a7e <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 8019a7e:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 8019a82:	4770      	bx	lr

08019a84 <_ZN8touchgfx11BoxProgressD1Ev>:
 8019a84:	4b03      	ldr	r3, [pc, #12]	; (8019a94 <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 8019a86:	b510      	push	{r4, lr}
 8019a88:	4604      	mov	r4, r0
 8019a8a:	6003      	str	r3, [r0, #0]
 8019a8c:	f000 f8b6 	bl	8019bfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8019a90:	4620      	mov	r0, r4
 8019a92:	bd10      	pop	{r4, pc}
 8019a94:	0802c71c 	.word	0x0802c71c

08019a98 <_ZN8touchgfx11BoxProgressD0Ev>:
 8019a98:	b510      	push	{r4, lr}
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	f7ff fff2 	bl	8019a84 <_ZN8touchgfx11BoxProgressD1Ev>
 8019aa0:	21c0      	movs	r1, #192	; 0xc0
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f00f ff6d 	bl	8029982 <_ZdlPvj>
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	bd10      	pop	{r4, pc}

08019aac <_ZN8touchgfx11BoxProgressC1Ev>:
 8019aac:	b510      	push	{r4, lr}
 8019aae:	4604      	mov	r4, r0
 8019ab0:	f000 f8b8 	bl	8019c24 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8019ab4:	2201      	movs	r2, #1
 8019ab6:	4b16      	ldr	r3, [pc, #88]	; (8019b10 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 8019ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019abc:	f104 0190 	add.w	r1, r4, #144	; 0x90
 8019ac0:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 8019ac4:	4a13      	ldr	r2, [pc, #76]	; (8019b14 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8019ac6:	6023      	str	r3, [r4, #0]
 8019ac8:	2300      	movs	r3, #0
 8019aca:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8019ace:	22ff      	movs	r2, #255	; 0xff
 8019ad0:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 8019ad4:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8019ad8:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 8019adc:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8019ae0:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8019ae4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8019ae8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8019aec:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8019af0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8019af4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8019af8:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 8019afc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8019b00:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8019b04:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8019b08:	f000 fbb8 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019b0c:	4620      	mov	r0, r4
 8019b0e:	bd10      	pop	{r4, pc}
 8019b10:	0802c71c 	.word	0x0802c71c
 8019b14:	0802dab0 	.word	0x0802dab0

08019b18 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8019b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019b1c:	4617      	mov	r7, r2
 8019b1e:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8019b22:	2200      	movs	r2, #0
 8019b24:	4604      	mov	r4, r0
 8019b26:	460e      	mov	r6, r1
 8019b28:	4698      	mov	r8, r3
 8019b2a:	4611      	mov	r1, r2
 8019b2c:	9500      	str	r5, [sp, #0]
 8019b2e:	3090      	adds	r0, #144	; 0x90
 8019b30:	f7f6 fffa 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019b34:	4643      	mov	r3, r8
 8019b36:	463a      	mov	r2, r7
 8019b38:	4631      	mov	r1, r6
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	9508      	str	r5, [sp, #32]
 8019b3e:	b002      	add	sp, #8
 8019b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b44:	f000 b9fa 	b.w	8019f3c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08019b48 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8019b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b4a:	4604      	mov	r4, r0
 8019b4c:	f000 fa40 	bl	8019fd0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8019b50:	f104 0590 	add.w	r5, r4, #144	; 0x90
 8019b54:	4628      	mov	r0, r5
 8019b56:	f004 fb3f 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019b5a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8019b5e:	2b03      	cmp	r3, #3
 8019b60:	d814      	bhi.n	8019b8c <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 8019b62:	e8df f003 	tbb	[pc, r3]
 8019b66:	0202      	.short	0x0202
 8019b68:	1010      	.short	0x1010
 8019b6a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f000 fa88 	bl	801a084 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8019b74:	b200      	sxth	r0, r0
 8019b76:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8019b7a:	2b03      	cmp	r3, #3
 8019b7c:	d81a      	bhi.n	8019bb4 <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 8019b7e:	e8df f003 	tbb	[pc, r3]
 8019b82:	0e07      	.short	0x0e07
 8019b84:	231f      	.short	0x231f
 8019b86:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8019b8a:	e7f0      	b.n	8019b6e <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	e7f2      	b.n	8019b76 <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 8019b90:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019b94:	9300      	str	r3, [sp, #0]
 8019b96:	4603      	mov	r3, r0
 8019b98:	2200      	movs	r2, #0
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	e007      	b.n	8019bae <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 8019b9e:	8921      	ldrh	r1, [r4, #8]
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019ba6:	1a09      	subs	r1, r1, r0
 8019ba8:	9300      	str	r3, [sp, #0]
 8019baa:	4603      	mov	r3, r0
 8019bac:	b209      	sxth	r1, r1
 8019bae:	4628      	mov	r0, r5
 8019bb0:	f7f6 ffba 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	b003      	add	sp, #12
 8019bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bbc:	f004 bb0c 	b.w	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019bc0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019bc4:	9000      	str	r0, [sp, #0]
 8019bc6:	e7e7      	b.n	8019b98 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 8019bc8:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8019bcc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019bd0:	1a12      	subs	r2, r2, r0
 8019bd2:	9000      	str	r0, [sp, #0]
 8019bd4:	b212      	sxth	r2, r2
 8019bd6:	e7e0      	b.n	8019b9a <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

08019bd8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8019bd8:	b570      	push	{r4, r5, r6, lr}
 8019bda:	6803      	ldr	r3, [r0, #0]
 8019bdc:	4604      	mov	r4, r0
 8019bde:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 8019be2:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8019be6:	4798      	blx	r3
 8019be8:	4601      	mov	r1, r0
 8019bea:	462b      	mov	r3, r5
 8019bec:	4620      	mov	r0, r4
 8019bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bf2:	4718      	bx	r3

08019bf4 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 8019bf4:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 8019bf8:	4770      	bx	lr
	...

08019bfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 8019bfc:	4b03      	ldr	r3, [pc, #12]	; (8019c0c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 8019bfe:	b510      	push	{r4, lr}
 8019c00:	4604      	mov	r4, r0
 8019c02:	6003      	str	r3, [r0, #0]
 8019c04:	f000 f999 	bl	8019f3a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8019c08:	4620      	mov	r0, r4
 8019c0a:	bd10      	pop	{r4, pc}
 8019c0c:	0802c7f4 	.word	0x0802c7f4

08019c10 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8019c10:	b510      	push	{r4, lr}
 8019c12:	4604      	mov	r4, r0
 8019c14:	f7ff fff2 	bl	8019bfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8019c18:	2190      	movs	r1, #144	; 0x90
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	f00f feb1 	bl	8029982 <_ZdlPvj>
 8019c20:	4620      	mov	r0, r4
 8019c22:	bd10      	pop	{r4, pc}

08019c24 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8019c24:	b510      	push	{r4, lr}
 8019c26:	4604      	mov	r4, r0
 8019c28:	f000 fa4c 	bl	801a0c4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8019c2c:	4b03      	ldr	r3, [pc, #12]	; (8019c3c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 8019c2e:	2100      	movs	r1, #0
 8019c30:	4620      	mov	r0, r4
 8019c32:	6023      	str	r3, [r4, #0]
 8019c34:	f7ff ffd0 	bl	8019bd8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8019c38:	4620      	mov	r0, r4
 8019c3a:	bd10      	pop	{r4, pc}
 8019c3c:	0802c7f4 	.word	0x0802c7f4

08019c40 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8019c40:	b570      	push	{r4, r5, r6, lr}
 8019c42:	6803      	ldr	r3, [r0, #0]
 8019c44:	4604      	mov	r4, r0
 8019c46:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 8019c4a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 8019c4e:	4798      	blx	r3
 8019c50:	4601      	mov	r1, r0
 8019c52:	462b      	mov	r3, r5
 8019c54:	4620      	mov	r0, r4
 8019c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c5a:	4718      	bx	r3

08019c5c <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8019c5c:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 8019c60:	4770      	bx	lr

08019c62 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8019c62:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 8019c66:	4770      	bx	lr

08019c68 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 8019c68:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 8019c6c:	4770      	bx	lr

08019c6e <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8019c6e:	b507      	push	{r0, r1, r2, lr}
 8019c70:	ab02      	add	r3, sp, #8
 8019c72:	30bc      	adds	r0, #188	; 0xbc
 8019c74:	f823 1d04 	strh.w	r1, [r3, #-4]!
 8019c78:	4619      	mov	r1, r3
 8019c7a:	f002 fa73 	bl	801c164 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8019c7e:	b003      	add	sp, #12
 8019c80:	f85d fb04 	ldr.w	pc, [sp], #4

08019c84 <_ZN8touchgfx13ImageProgressD1Ev>:
 8019c84:	4b03      	ldr	r3, [pc, #12]	; (8019c94 <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 8019c86:	b510      	push	{r4, lr}
 8019c88:	4604      	mov	r4, r0
 8019c8a:	6003      	str	r3, [r0, #0]
 8019c8c:	f7ff ffb6 	bl	8019bfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 8019c90:	4620      	mov	r0, r4
 8019c92:	bd10      	pop	{r4, pc}
 8019c94:	0802c920 	.word	0x0802c920

08019c98 <_ZN8touchgfx13ImageProgressD0Ev>:
 8019c98:	b510      	push	{r4, lr}
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	f7ff fff2 	bl	8019c84 <_ZN8touchgfx13ImageProgressD1Ev>
 8019ca0:	21f0      	movs	r1, #240	; 0xf0
 8019ca2:	4620      	mov	r0, r4
 8019ca4:	f00f fe6d 	bl	8029982 <_ZdlPvj>
 8019ca8:	4620      	mov	r0, r4
 8019caa:	bd10      	pop	{r4, pc}

08019cac <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8019cac:	b508      	push	{r3, lr}
 8019cae:	4b06      	ldr	r3, [pc, #24]	; (8019cc8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	b92b      	cbnz	r3, 8019cc0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8019cb4:	4b05      	ldr	r3, [pc, #20]	; (8019ccc <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8019cb6:	21b8      	movs	r1, #184	; 0xb8
 8019cb8:	4a05      	ldr	r2, [pc, #20]	; (8019cd0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8019cba:	4806      	ldr	r0, [pc, #24]	; (8019cd4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8019cbc:	f00f fe8c 	bl	80299d8 <__assert_func>
 8019cc0:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 8019cc4:	bd08      	pop	{r3, pc}
 8019cc6:	bf00      	nop
 8019cc8:	2000bfe0 	.word	0x2000bfe0
 8019ccc:	0802c8b4 	.word	0x0802c8b4
 8019cd0:	0802c9f8 	.word	0x0802c9f8
 8019cd4:	0802c8f0 	.word	0x0802c8f0

08019cd8 <_ZN8touchgfx13ImageProgressC1Ev>:
 8019cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019cdc:	4604      	mov	r4, r0
 8019cde:	f7ff ffa1 	bl	8019c24 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8019ce2:	4b31      	ldr	r3, [pc, #196]	; (8019da8 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8019ce4:	a902      	add	r1, sp, #8
 8019ce6:	4626      	mov	r6, r4
 8019ce8:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 8019cec:	2500      	movs	r5, #0
 8019cee:	4a2f      	ldr	r2, [pc, #188]	; (8019dac <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8019cf0:	f846 3b90 	str.w	r3, [r6], #144
 8019cf4:	2701      	movs	r7, #1
 8019cf6:	4b2e      	ldr	r3, [pc, #184]	; (8019db0 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8019cf8:	4640      	mov	r0, r8
 8019cfa:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 8019cfe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8019d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d06:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 8019d0a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8019d0e:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 8019d12:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 8019d16:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8019d1a:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8019d1e:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 8019d22:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 8019d26:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8019d2a:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8019d2e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8019d32:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 8019d36:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 8019d3a:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 8019d3e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8019d42:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8019d46:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8019d4a:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8019d4e:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 8019d52:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 8019d56:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 8019d5a:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 8019d5e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 8019d62:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 8019d66:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 8019d6a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8019d6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 8019d72:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8019d76:	f002 fd53 	bl	801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019d7a:	4b0e      	ldr	r3, [pc, #56]	; (8019db4 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 8019d7c:	4641      	mov	r1, r8
 8019d7e:	4630      	mov	r0, r6
 8019d80:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 8019d84:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8019d88:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 8019d8c:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 8019d90:	f000 fa74 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019d98:	4631      	mov	r1, r6
 8019d9a:	f000 fa6f 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8019d9e:	4620      	mov	r0, r4
 8019da0:	b002      	add	sp, #8
 8019da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019da6:	bf00      	nop
 8019da8:	0802c920 	.word	0x0802c920
 8019dac:	0802dd24 	.word	0x0802dd24
 8019db0:	0802cc9c 	.word	0x0802cc9c
 8019db4:	0802db18 	.word	0x0802db18

08019db8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8019db8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019dbc:	4617      	mov	r7, r2
 8019dbe:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	4604      	mov	r4, r0
 8019dc6:	460e      	mov	r6, r1
 8019dc8:	4698      	mov	r8, r3
 8019dca:	4611      	mov	r1, r2
 8019dcc:	9500      	str	r5, [sp, #0]
 8019dce:	3090      	adds	r0, #144	; 0x90
 8019dd0:	f7f6 feaa 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019dd4:	4643      	mov	r3, r8
 8019dd6:	463a      	mov	r2, r7
 8019dd8:	4631      	mov	r1, r6
 8019dda:	4620      	mov	r0, r4
 8019ddc:	9508      	str	r5, [sp, #32]
 8019dde:	b002      	add	sp, #8
 8019de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019de4:	f000 b8aa 	b.w	8019f3c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08019de8 <_ZN8touchgfx13ImageProgress8setValueEi>:
 8019de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019dea:	4604      	mov	r4, r0
 8019dec:	f000 f8f0 	bl	8019fd0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8019df0:	f104 0790 	add.w	r7, r4, #144	; 0x90
 8019df4:	4638      	mov	r0, r7
 8019df6:	f004 f9ef 	bl	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019dfa:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8019dfe:	4620      	mov	r0, r4
 8019e00:	2b01      	cmp	r3, #1
 8019e02:	bf94      	ite	ls
 8019e04:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 8019e08:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 8019e0c:	f000 f93a 	bl	801a084 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8019e10:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 8019e14:	4606      	mov	r6, r0
 8019e16:	b205      	sxth	r5, r0
 8019e18:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 8019e1c:	2a00      	cmp	r2, #0
 8019e1e:	d056      	beq.n	8019ece <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 8019e20:	2b03      	cmp	r3, #3
 8019e22:	d82c      	bhi.n	8019e7e <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8019e24:	e8df f003 	tbb	[pc, r3]
 8019e28:	3d311202 	.word	0x3d311202
 8019e2c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019e30:	2200      	movs	r2, #0
 8019e32:	9300      	str	r3, [sp, #0]
 8019e34:	4611      	mov	r1, r2
 8019e36:	462b      	mov	r3, r5
 8019e38:	4638      	mov	r0, r7
 8019e3a:	f7f6 fe75 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e3e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019e42:	9300      	str	r3, [sp, #0]
 8019e44:	462b      	mov	r3, r5
 8019e46:	2200      	movs	r2, #0
 8019e48:	4611      	mov	r1, r2
 8019e4a:	e014      	b.n	8019e76 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8019e4c:	8921      	ldrh	r1, [r4, #8]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019e54:	1a09      	subs	r1, r1, r0
 8019e56:	4638      	mov	r0, r7
 8019e58:	9300      	str	r3, [sp, #0]
 8019e5a:	462b      	mov	r3, r5
 8019e5c:	b209      	sxth	r1, r1
 8019e5e:	f7f6 fe63 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e62:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8019e66:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019e6a:	4249      	negs	r1, r1
 8019e6c:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 8019e70:	9200      	str	r2, [sp, #0]
 8019e72:	b209      	sxth	r1, r1
 8019e74:	2200      	movs	r2, #0
 8019e76:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8019e7a:	f7f6 fe55 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e7e:	4638      	mov	r0, r7
 8019e80:	b003      	add	sp, #12
 8019e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019e86:	f004 b9a7 	b.w	801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019e8a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019e8e:	2200      	movs	r2, #0
 8019e90:	9500      	str	r5, [sp, #0]
 8019e92:	2100      	movs	r1, #0
 8019e94:	4638      	mov	r0, r7
 8019e96:	f7f6 fe47 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019e9a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019e9e:	9500      	str	r5, [sp, #0]
 8019ea0:	e7d1      	b.n	8019e46 <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 8019ea2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8019ea6:	2100      	movs	r1, #0
 8019ea8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019eac:	1a12      	subs	r2, r2, r0
 8019eae:	9500      	str	r5, [sp, #0]
 8019eb0:	4638      	mov	r0, r7
 8019eb2:	b212      	sxth	r2, r2
 8019eb4:	f7f6 fe38 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019eb8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 8019ebc:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8019ec0:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019ec4:	4252      	negs	r2, r2
 8019ec6:	9100      	str	r1, [sp, #0]
 8019ec8:	b212      	sxth	r2, r2
 8019eca:	2100      	movs	r1, #0
 8019ecc:	e7d3      	b.n	8019e76 <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 8019ece:	2b03      	cmp	r3, #3
 8019ed0:	d8d5      	bhi.n	8019e7e <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8019ed2:	e8df f003 	tbb	[pc, r3]
 8019ed6:	1102      	.short	0x1102
 8019ed8:	2a1b      	.short	0x2a1b
 8019eda:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019ede:	2200      	movs	r2, #0
 8019ee0:	4638      	mov	r0, r7
 8019ee2:	4611      	mov	r1, r2
 8019ee4:	9300      	str	r3, [sp, #0]
 8019ee6:	462b      	mov	r3, r5
 8019ee8:	f7f6 fe1e 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019eec:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019ef0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8019ef4:	1af1      	subs	r1, r6, r3
 8019ef6:	e7bb      	b.n	8019e70 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 8019ef8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8019efc:	2200      	movs	r2, #0
 8019efe:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8019f02:	1a09      	subs	r1, r1, r0
 8019f04:	9300      	str	r3, [sp, #0]
 8019f06:	462b      	mov	r3, r5
 8019f08:	b209      	sxth	r1, r1
 8019f0a:	e795      	b.n	8019e38 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019f12:	4638      	mov	r0, r7
 8019f14:	9500      	str	r5, [sp, #0]
 8019f16:	4611      	mov	r1, r2
 8019f18:	f7f6 fe06 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f1c:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 8019f20:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019f24:	1a32      	subs	r2, r6, r0
 8019f26:	9000      	str	r0, [sp, #0]
 8019f28:	e7ce      	b.n	8019ec8 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 8019f2a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8019f2e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8019f32:	1a12      	subs	r2, r2, r0
 8019f34:	9500      	str	r5, [sp, #0]
 8019f36:	b212      	sxth	r2, r2
 8019f38:	e7ab      	b.n	8019e92 <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

08019f3a <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 8019f3a:	4770      	bx	lr

08019f3c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8019f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019f40:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8019f44:	4604      	mov	r4, r0
 8019f46:	460e      	mov	r6, r1
 8019f48:	4698      	mov	r8, r3
 8019f4a:	9700      	str	r7, [sp, #0]
 8019f4c:	3058      	adds	r0, #88	; 0x58
 8019f4e:	4615      	mov	r5, r2
 8019f50:	f7f6 fdea 	bl	8010b28 <_ZN8touchgfx8Drawable11setPositionEssss>
 8019f54:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8019f58:	eb06 0308 	add.w	r3, r6, r8
 8019f5c:	429a      	cmp	r2, r3
 8019f5e:	eb05 0207 	add.w	r2, r5, r7
 8019f62:	bfb8      	it	lt
 8019f64:	8123      	strhlt	r3, [r4, #8]
 8019f66:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019f6a:	4293      	cmp	r3, r2
 8019f6c:	bfb8      	it	lt
 8019f6e:	8162      	strhlt	r2, [r4, #10]
 8019f70:	b002      	add	sp, #8
 8019f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f76 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8019f76:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8019f7a:	4770      	bx	lr

08019f7c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8019f7c:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8019f80:	4770      	bx	lr

08019f82 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8019f82:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8019f86:	4770      	bx	lr

08019f88 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8019f88:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8019f8c:	4770      	bx	lr

08019f8e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 8019f8e:	b510      	push	{r4, lr}
 8019f90:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8019f94:	800c      	strh	r4, [r1, #0]
 8019f96:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8019f9a:	8011      	strh	r1, [r2, #0]
 8019f9c:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8019fa0:	801a      	strh	r2, [r3, #0]
 8019fa2:	9b02      	ldr	r3, [sp, #8]
 8019fa4:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8019fa8:	801a      	strh	r2, [r3, #0]
 8019faa:	bd10      	pop	{r4, pc}

08019fac <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 8019fac:	b510      	push	{r4, lr}
 8019fae:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 8019fb2:	800c      	strh	r4, [r1, #0]
 8019fb4:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 8019fb8:	8011      	strh	r1, [r2, #0]
 8019fba:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 8019fbe:	801a      	strh	r2, [r3, #0]
 8019fc0:	bd10      	pop	{r4, pc}

08019fc2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 8019fc2:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8019fc6:	800b      	strh	r3, [r1, #0]
 8019fc8:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8019fcc:	8013      	strh	r3, [r2, #0]
 8019fce:	4770      	bx	lr

08019fd0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8019fd0:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 8019fd4:	4299      	cmp	r1, r3
 8019fd6:	bfb8      	it	lt
 8019fd8:	4619      	movlt	r1, r3
 8019fda:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 8019fde:	4299      	cmp	r1, r3
 8019fe0:	bfa8      	it	ge
 8019fe2:	4619      	movge	r1, r3
 8019fe4:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 8019fe8:	4770      	bx	lr

08019fea <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8019fea:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 8019fee:	4770      	bx	lr

08019ff0 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8019ff0:	b510      	push	{r4, lr}
 8019ff2:	4604      	mov	r4, r0
 8019ff4:	2190      	movs	r1, #144	; 0x90
 8019ff6:	f00f fcc4 	bl	8029982 <_ZdlPvj>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	bd10      	pop	{r4, pc}

08019ffe <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8019ffe:	b510      	push	{r4, lr}
 801a000:	4604      	mov	r4, r0
 801a002:	302c      	adds	r0, #44	; 0x2c
 801a004:	f002 fc0c 	bl	801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a008:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a00a:	8123      	strh	r3, [r4, #8]
 801a00c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a00e:	8163      	strh	r3, [r4, #10]
 801a010:	bd10      	pop	{r4, pc}
	...

0801a014 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 801a014:	4291      	cmp	r1, r2
 801a016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01a:	4604      	mov	r4, r0
 801a01c:	460e      	mov	r6, r1
 801a01e:	4615      	mov	r5, r2
 801a020:	4698      	mov	r8, r3
 801a022:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a026:	db05      	blt.n	801a034 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801a028:	4b12      	ldr	r3, [pc, #72]	; (801a074 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801a02a:	214d      	movs	r1, #77	; 0x4d
 801a02c:	4a12      	ldr	r2, [pc, #72]	; (801a078 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801a02e:	4813      	ldr	r0, [pc, #76]	; (801a07c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801a030:	f00f fcd2 	bl	80299d8 <__assert_func>
 801a034:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801a038:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801a03c:	6803      	ldr	r3, [r0, #0]
 801a03e:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801a042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a046:	4798      	blx	r3
 801a048:	f1b8 0f00 	cmp.w	r8, #0
 801a04c:	d10c      	bne.n	801a068 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801a04e:	1bad      	subs	r5, r5, r6
 801a050:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 801a054:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801a058:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 801a05c:	42bb      	cmp	r3, r7
 801a05e:	d806      	bhi.n	801a06e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801a060:	4b07      	ldr	r3, [pc, #28]	; (801a080 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801a062:	215a      	movs	r1, #90	; 0x5a
 801a064:	4a04      	ldr	r2, [pc, #16]	; (801a078 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801a066:	e7e2      	b.n	801a02e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801a068:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 801a06c:	e7f2      	b.n	801a054 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a072:	bf00      	nop
 801a074:	0802ca2b 	.word	0x0802ca2b
 801a078:	0802cb68 	.word	0x0802cb68
 801a07c:	0802ca35 	.word	0x0802ca35
 801a080:	0802ca8c 	.word	0x0802ca8c

0801a084 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801a084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a086:	4604      	mov	r4, r0
 801a088:	460d      	mov	r5, r1
 801a08a:	b1b9      	cbz	r1, 801a0bc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 801a08c:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801a090:	ab01      	add	r3, sp, #4
 801a092:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801a096:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801a09a:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801a09e:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801a0a2:	1a12      	subs	r2, r2, r0
 801a0a4:	1b89      	subs	r1, r1, r6
 801a0a6:	1a38      	subs	r0, r7, r0
 801a0a8:	f004 f9d7 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801a0ac:	4629      	mov	r1, r5
 801a0ae:	ab01      	add	r3, sp, #4
 801a0b0:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 801a0b4:	4430      	add	r0, r6
 801a0b6:	f004 f9d0 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801a0ba:	b285      	uxth	r5, r0
 801a0bc:	4628      	mov	r0, r5
 801a0be:	b003      	add	sp, #12
 801a0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a0c4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801a0c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	2600      	movs	r6, #0
 801a0cc:	f7f8 fa6e 	bl	80125ac <_ZN8touchgfx8DrawableC1Ev>
 801a0d0:	4b1b      	ldr	r3, [pc, #108]	; (801a140 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801a0d2:	4625      	mov	r5, r4
 801a0d4:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801a0d8:	af02      	add	r7, sp, #8
 801a0da:	62a6      	str	r6, [r4, #40]	; 0x28
 801a0dc:	f845 3b2c 	str.w	r3, [r5], #44
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801a0e6:	f7f8 fa61 	bl	80125ac <_ZN8touchgfx8DrawableC1Ev>
 801a0ea:	4b16      	ldr	r3, [pc, #88]	; (801a144 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801a0ec:	4639      	mov	r1, r7
 801a0ee:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a0f6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801a0fa:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801a0fe:	f002 fb8f 	bl	801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801a102:	4638      	mov	r0, r7
 801a104:	f7f8 fa52 	bl	80125ac <_ZN8touchgfx8DrawableC1Ev>
 801a108:	4b0f      	ldr	r3, [pc, #60]	; (801a148 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801a10a:	4632      	mov	r2, r6
 801a10c:	4631      	mov	r1, r6
 801a10e:	65a3      	str	r3, [r4, #88]	; 0x58
 801a110:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801a114:	4628      	mov	r0, r5
 801a116:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801a11a:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801a11e:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 801a122:	f7f8 faaf 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
 801a126:	4629      	mov	r1, r5
 801a128:	4620      	mov	r0, r4
 801a12a:	f000 f8a7 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a12e:	4620      	mov	r0, r4
 801a130:	4639      	mov	r1, r7
 801a132:	f000 f8a3 	bl	801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a136:	4620      	mov	r0, r4
 801a138:	b002      	add	sp, #8
 801a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a13e:	bf00      	nop
 801a140:	0802cab0 	.word	0x0802cab0
 801a144:	0802dd24 	.word	0x0802dd24
 801a148:	0802cc9c 	.word	0x0802cc9c

0801a14c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801a14c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a14e:	2000      	movs	r0, #0
 801a150:	b12b      	cbz	r3, 801a15e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801a152:	b920      	cbnz	r0, 801a15e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801a154:	1a5a      	subs	r2, r3, r1
 801a156:	699b      	ldr	r3, [r3, #24]
 801a158:	4250      	negs	r0, r2
 801a15a:	4150      	adcs	r0, r2
 801a15c:	e7f8      	b.n	801a150 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801a15e:	4770      	bx	lr

0801a160 <_ZN8touchgfx9Container9removeAllEv>:
 801a160:	2200      	movs	r2, #0
 801a162:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a164:	b123      	cbz	r3, 801a170 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801a166:	6999      	ldr	r1, [r3, #24]
 801a168:	6281      	str	r1, [r0, #40]	; 0x28
 801a16a:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801a16e:	e7f8      	b.n	801a162 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801a170:	4770      	bx	lr

0801a172 <_ZN8touchgfx9Container6unlinkEv>:
 801a172:	2300      	movs	r3, #0
 801a174:	6283      	str	r3, [r0, #40]	; 0x28
 801a176:	4770      	bx	lr

0801a178 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a17c:	461f      	mov	r7, r3
 801a17e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801a182:	460d      	mov	r5, r1
 801a184:	4616      	mov	r6, r2
 801a186:	b103      	cbz	r3, 801a18a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801a188:	6038      	str	r0, [r7, #0]
 801a18a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a18c:	b314      	cbz	r4, 801a1d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801a18e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a192:	b1eb      	cbz	r3, 801a1d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a194:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a198:	428d      	cmp	r5, r1
 801a19a:	db19      	blt.n	801a1d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a19c:	b289      	uxth	r1, r1
 801a19e:	8923      	ldrh	r3, [r4, #8]
 801a1a0:	440b      	add	r3, r1
 801a1a2:	b21b      	sxth	r3, r3
 801a1a4:	429d      	cmp	r5, r3
 801a1a6:	da13      	bge.n	801a1d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a1a8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a1ac:	4296      	cmp	r6, r2
 801a1ae:	db0f      	blt.n	801a1d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a1b0:	b292      	uxth	r2, r2
 801a1b2:	8963      	ldrh	r3, [r4, #10]
 801a1b4:	4413      	add	r3, r2
 801a1b6:	b21b      	sxth	r3, r3
 801a1b8:	429e      	cmp	r6, r3
 801a1ba:	da09      	bge.n	801a1d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801a1bc:	6823      	ldr	r3, [r4, #0]
 801a1be:	1ab2      	subs	r2, r6, r2
 801a1c0:	1a69      	subs	r1, r5, r1
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801a1c8:	b212      	sxth	r2, r2
 801a1ca:	463b      	mov	r3, r7
 801a1cc:	b209      	sxth	r1, r1
 801a1ce:	47c0      	blx	r8
 801a1d0:	69a4      	ldr	r4, [r4, #24]
 801a1d2:	e7db      	b.n	801a18c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1d8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801a1d8:	2200      	movs	r2, #0
 801a1da:	8002      	strh	r2, [r0, #0]
 801a1dc:	8042      	strh	r2, [r0, #2]
 801a1de:	8082      	strh	r2, [r0, #4]
 801a1e0:	80c2      	strh	r2, [r0, #6]
 801a1e2:	4770      	bx	lr

0801a1e4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801a1e4:	b570      	push	{r4, r5, r6, lr}
 801a1e6:	460d      	mov	r5, r1
 801a1e8:	4616      	mov	r6, r2
 801a1ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a1ec:	b13c      	cbz	r4, 801a1fe <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801a1ee:	6823      	ldr	r3, [r4, #0]
 801a1f0:	4620      	mov	r0, r4
 801a1f2:	4632      	mov	r2, r6
 801a1f4:	4629      	mov	r1, r5
 801a1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a1f8:	4798      	blx	r3
 801a1fa:	69a4      	ldr	r4, [r4, #24]
 801a1fc:	e7f6      	b.n	801a1ec <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801a1fe:	bd70      	pop	{r4, r5, r6, pc}

0801a200 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801a200:	b538      	push	{r3, r4, r5, lr}
 801a202:	460d      	mov	r5, r1
 801a204:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a206:	b134      	cbz	r4, 801a216 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801a208:	682b      	ldr	r3, [r5, #0]
 801a20a:	4621      	mov	r1, r4
 801a20c:	4628      	mov	r0, r5
 801a20e:	689b      	ldr	r3, [r3, #8]
 801a210:	4798      	blx	r3
 801a212:	69a4      	ldr	r4, [r4, #24]
 801a214:	e7f7      	b.n	801a206 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801a216:	bd38      	pop	{r3, r4, r5, pc}

0801a218 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801a218:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a21a:	b19b      	cbz	r3, 801a244 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801a21c:	428b      	cmp	r3, r1
 801a21e:	d109      	bne.n	801a234 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801a220:	699a      	ldr	r2, [r3, #24]
 801a222:	2100      	movs	r1, #0
 801a224:	6159      	str	r1, [r3, #20]
 801a226:	6282      	str	r2, [r0, #40]	; 0x28
 801a228:	b902      	cbnz	r2, 801a22c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801a22a:	4770      	bx	lr
 801a22c:	6199      	str	r1, [r3, #24]
 801a22e:	4770      	bx	lr
 801a230:	4613      	mov	r3, r2
 801a232:	b13a      	cbz	r2, 801a244 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801a234:	699a      	ldr	r2, [r3, #24]
 801a236:	428a      	cmp	r2, r1
 801a238:	d1fa      	bne.n	801a230 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801a23a:	698a      	ldr	r2, [r1, #24]
 801a23c:	619a      	str	r2, [r3, #24]
 801a23e:	2300      	movs	r3, #0
 801a240:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801a244:	4770      	bx	lr

0801a246 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801a246:	b410      	push	{r4}
 801a248:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a24a:	4604      	mov	r4, r0
 801a24c:	b92b      	cbnz	r3, 801a25a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801a24e:	6803      	ldr	r3, [r0, #0]
 801a250:	4611      	mov	r1, r2
 801a252:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a258:	4718      	bx	r3
 801a25a:	b941      	cbnz	r1, 801a26e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801a25c:	6193      	str	r3, [r2, #24]
 801a25e:	6282      	str	r2, [r0, #40]	; 0x28
 801a260:	6154      	str	r4, [r2, #20]
 801a262:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a266:	4770      	bx	lr
 801a268:	4603      	mov	r3, r0
 801a26a:	2800      	cmp	r0, #0
 801a26c:	d0f9      	beq.n	801a262 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801a26e:	4299      	cmp	r1, r3
 801a270:	6998      	ldr	r0, [r3, #24]
 801a272:	d1f9      	bne.n	801a268 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801a274:	6190      	str	r0, [r2, #24]
 801a276:	618a      	str	r2, [r1, #24]
 801a278:	e7f2      	b.n	801a260 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801a27c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801a27c:	4288      	cmp	r0, r1
 801a27e:	b508      	push	{r3, lr}
 801a280:	d105      	bne.n	801a28e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801a282:	4b11      	ldr	r3, [pc, #68]	; (801a2c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801a284:	2123      	movs	r1, #35	; 0x23
 801a286:	4a11      	ldr	r2, [pc, #68]	; (801a2cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801a288:	4811      	ldr	r0, [pc, #68]	; (801a2d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801a28a:	f00f fba5 	bl	80299d8 <__assert_func>
 801a28e:	694b      	ldr	r3, [r1, #20]
 801a290:	b11b      	cbz	r3, 801a29a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801a292:	4b10      	ldr	r3, [pc, #64]	; (801a2d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801a294:	2124      	movs	r1, #36	; 0x24
 801a296:	4a0d      	ldr	r2, [pc, #52]	; (801a2cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801a298:	e7f6      	b.n	801a288 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801a29a:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801a29e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a2a0:	b913      	cbnz	r3, 801a2a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801a2a2:	6281      	str	r1, [r0, #40]	; 0x28
 801a2a4:	bd08      	pop	{r3, pc}
 801a2a6:	4613      	mov	r3, r2
 801a2a8:	699a      	ldr	r2, [r3, #24]
 801a2aa:	b12a      	cbz	r2, 801a2b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801a2ac:	428b      	cmp	r3, r1
 801a2ae:	d1fa      	bne.n	801a2a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801a2b0:	4b09      	ldr	r3, [pc, #36]	; (801a2d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801a2b2:	2135      	movs	r1, #53	; 0x35
 801a2b4:	4a05      	ldr	r2, [pc, #20]	; (801a2cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801a2b6:	e7e7      	b.n	801a288 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801a2b8:	428b      	cmp	r3, r1
 801a2ba:	d103      	bne.n	801a2c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801a2bc:	4b06      	ldr	r3, [pc, #24]	; (801a2d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801a2be:	2138      	movs	r1, #56	; 0x38
 801a2c0:	4a02      	ldr	r2, [pc, #8]	; (801a2cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801a2c2:	e7e1      	b.n	801a288 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801a2c4:	6199      	str	r1, [r3, #24]
 801a2c6:	e7ed      	b.n	801a2a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801a2c8:	0802cbc9 	.word	0x0802cbc9
 801a2cc:	0802cd20 	.word	0x0802cd20
 801a2d0:	0802cbf5 	.word	0x0802cbf5
 801a2d4:	0802cc28 	.word	0x0802cc28
 801a2d8:	0802cc5e 	.word	0x0802cc5e

0801a2dc <_ZN8touchgfx4RectaNERKS0_>:
 801a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2e0:	888b      	ldrh	r3, [r1, #4]
 801a2e2:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a2e6:	f9b0 a000 	ldrsh.w	sl, [r0]
 801a2ea:	444b      	add	r3, r9
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	fa0f f883 	sxth.w	r8, r3
 801a2f2:	45c2      	cmp	sl, r8
 801a2f4:	da30      	bge.n	801a358 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801a2f6:	8882      	ldrh	r2, [r0, #4]
 801a2f8:	4452      	add	r2, sl
 801a2fa:	b292      	uxth	r2, r2
 801a2fc:	fa0f fe82 	sxth.w	lr, r2
 801a300:	45f1      	cmp	r9, lr
 801a302:	da29      	bge.n	801a358 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801a304:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a308:	88cc      	ldrh	r4, [r1, #6]
 801a30a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a30e:	442c      	add	r4, r5
 801a310:	b224      	sxth	r4, r4
 801a312:	42a6      	cmp	r6, r4
 801a314:	da20      	bge.n	801a358 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801a316:	88c7      	ldrh	r7, [r0, #6]
 801a318:	4437      	add	r7, r6
 801a31a:	b2bf      	uxth	r7, r7
 801a31c:	fa0f fc87 	sxth.w	ip, r7
 801a320:	4565      	cmp	r5, ip
 801a322:	da19      	bge.n	801a358 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801a324:	45ca      	cmp	sl, r9
 801a326:	4654      	mov	r4, sl
 801a328:	bfb8      	it	lt
 801a32a:	464c      	movlt	r4, r9
 801a32c:	42b5      	cmp	r5, r6
 801a32e:	bfb8      	it	lt
 801a330:	4635      	movlt	r5, r6
 801a332:	45f0      	cmp	r8, lr
 801a334:	bfc8      	it	gt
 801a336:	4613      	movgt	r3, r2
 801a338:	1b1b      	subs	r3, r3, r4
 801a33a:	8083      	strh	r3, [r0, #4]
 801a33c:	88ca      	ldrh	r2, [r1, #6]
 801a33e:	884b      	ldrh	r3, [r1, #2]
 801a340:	8004      	strh	r4, [r0, #0]
 801a342:	4413      	add	r3, r2
 801a344:	8045      	strh	r5, [r0, #2]
 801a346:	b29b      	uxth	r3, r3
 801a348:	b21a      	sxth	r2, r3
 801a34a:	4594      	cmp	ip, r2
 801a34c:	bfb8      	it	lt
 801a34e:	463b      	movlt	r3, r7
 801a350:	1b5b      	subs	r3, r3, r5
 801a352:	80c3      	strh	r3, [r0, #6]
 801a354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a358:	2300      	movs	r3, #0
 801a35a:	8003      	strh	r3, [r0, #0]
 801a35c:	8043      	strh	r3, [r0, #2]
 801a35e:	8083      	strh	r3, [r0, #4]
 801a360:	80c3      	strh	r3, [r0, #6]
 801a362:	e7f7      	b.n	801a354 <_ZN8touchgfx4RectaNERKS0_+0x78>

0801a364 <_ZNK8touchgfx4Rect7isEmptyEv>:
 801a364:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a368:	b12b      	cbz	r3, 801a376 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801a36a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801a36e:	fab0 f080 	clz	r0, r0
 801a372:	0940      	lsrs	r0, r0, #5
 801a374:	4770      	bx	lr
 801a376:	2001      	movs	r0, #1
 801a378:	4770      	bx	lr

0801a37a <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801a37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a37e:	2300      	movs	r3, #0
 801a380:	4604      	mov	r4, r0
 801a382:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a384:	8003      	strh	r3, [r0, #0]
 801a386:	8043      	strh	r3, [r0, #2]
 801a388:	8083      	strh	r3, [r0, #4]
 801a38a:	80c3      	strh	r3, [r0, #6]
 801a38c:	2d00      	cmp	r5, #0
 801a38e:	d040      	beq.n	801a412 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801a390:	1d28      	adds	r0, r5, #4
 801a392:	f7ff ffe7 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a396:	b988      	cbnz	r0, 801a3bc <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a398:	4620      	mov	r0, r4
 801a39a:	f7ff ffe3 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a39e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801a3a2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a3a6:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801a3aa:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801a3ae:	b138      	cbz	r0, 801a3c0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801a3b0:	8022      	strh	r2, [r4, #0]
 801a3b2:	8063      	strh	r3, [r4, #2]
 801a3b4:	f8a4 e004 	strh.w	lr, [r4, #4]
 801a3b8:	f8a4 c006 	strh.w	ip, [r4, #6]
 801a3bc:	69ad      	ldr	r5, [r5, #24]
 801a3be:	e7e5      	b.n	801a38c <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801a3c0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a3c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a3c8:	4290      	cmp	r0, r2
 801a3ca:	4607      	mov	r7, r0
 801a3cc:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801a3d0:	460e      	mov	r6, r1
 801a3d2:	bfa8      	it	ge
 801a3d4:	4617      	movge	r7, r2
 801a3d6:	4299      	cmp	r1, r3
 801a3d8:	4472      	add	r2, lr
 801a3da:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801a3de:	bfa8      	it	ge
 801a3e0:	461e      	movge	r6, r3
 801a3e2:	4440      	add	r0, r8
 801a3e4:	4471      	add	r1, lr
 801a3e6:	4463      	add	r3, ip
 801a3e8:	b200      	sxth	r0, r0
 801a3ea:	8027      	strh	r7, [r4, #0]
 801a3ec:	b212      	sxth	r2, r2
 801a3ee:	8066      	strh	r6, [r4, #2]
 801a3f0:	b209      	sxth	r1, r1
 801a3f2:	b21b      	sxth	r3, r3
 801a3f4:	4290      	cmp	r0, r2
 801a3f6:	bfac      	ite	ge
 801a3f8:	ebc7 0200 	rsbge	r2, r7, r0
 801a3fc:	ebc7 0202 	rsblt	r2, r7, r2
 801a400:	4299      	cmp	r1, r3
 801a402:	bfac      	ite	ge
 801a404:	ebc6 0301 	rsbge	r3, r6, r1
 801a408:	ebc6 0303 	rsblt	r3, r6, r3
 801a40c:	80a2      	strh	r2, [r4, #4]
 801a40e:	80e3      	strh	r3, [r4, #6]
 801a410:	e7d4      	b.n	801a3bc <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801a412:	4620      	mov	r0, r4
 801a414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a418 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801a418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a41c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a420:	b383      	cbz	r3, 801a484 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a422:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a424:	b374      	cbz	r4, 801a484 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801a426:	f9b1 5000 	ldrsh.w	r5, [r1]
 801a42a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801a42e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801a432:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801a436:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a43a:	b303      	cbz	r3, 801a47e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a43c:	4668      	mov	r0, sp
 801a43e:	1d21      	adds	r1, r4, #4
 801a440:	f8ad 5000 	strh.w	r5, [sp]
 801a444:	f8ad 6002 	strh.w	r6, [sp, #2]
 801a448:	f8ad 7004 	strh.w	r7, [sp, #4]
 801a44c:	f8ad 8006 	strh.w	r8, [sp, #6]
 801a450:	f7ff ff44 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801a454:	4668      	mov	r0, sp
 801a456:	f7ff ff85 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a45a:	b980      	cbnz	r0, 801a47e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801a45c:	f8bd 3000 	ldrh.w	r3, [sp]
 801a460:	4669      	mov	r1, sp
 801a462:	88a2      	ldrh	r2, [r4, #4]
 801a464:	4620      	mov	r0, r4
 801a466:	1a9b      	subs	r3, r3, r2
 801a468:	88e2      	ldrh	r2, [r4, #6]
 801a46a:	f8ad 3000 	strh.w	r3, [sp]
 801a46e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a472:	1a9b      	subs	r3, r3, r2
 801a474:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a478:	6823      	ldr	r3, [r4, #0]
 801a47a:	689b      	ldr	r3, [r3, #8]
 801a47c:	4798      	blx	r3
 801a47e:	69a4      	ldr	r4, [r4, #24]
 801a480:	2c00      	cmp	r4, #0
 801a482:	d1d8      	bne.n	801a436 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801a484:	b002      	add	sp, #8
 801a486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a48a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801a48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a48c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a490:	460d      	mov	r5, r1
 801a492:	4616      	mov	r6, r2
 801a494:	b323      	cbz	r3, 801a4e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a496:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a498:	b314      	cbz	r4, 801a4e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801a49a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a49e:	b1eb      	cbz	r3, 801a4dc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a4a0:	6828      	ldr	r0, [r5, #0]
 801a4a2:	466b      	mov	r3, sp
 801a4a4:	6869      	ldr	r1, [r5, #4]
 801a4a6:	c303      	stmia	r3!, {r0, r1}
 801a4a8:	4668      	mov	r0, sp
 801a4aa:	1d21      	adds	r1, r4, #4
 801a4ac:	f7ff ff16 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801a4b0:	4668      	mov	r0, sp
 801a4b2:	f7ff ff57 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a4b6:	b988      	cbnz	r0, 801a4dc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801a4b8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a4bc:	4669      	mov	r1, sp
 801a4be:	88a2      	ldrh	r2, [r4, #4]
 801a4c0:	4620      	mov	r0, r4
 801a4c2:	1a9b      	subs	r3, r3, r2
 801a4c4:	88e2      	ldrh	r2, [r4, #6]
 801a4c6:	f8ad 3000 	strh.w	r3, [sp]
 801a4ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a4ce:	1a9b      	subs	r3, r3, r2
 801a4d0:	4632      	mov	r2, r6
 801a4d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a4d6:	6823      	ldr	r3, [r4, #0]
 801a4d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a4da:	4798      	blx	r3
 801a4dc:	69a4      	ldr	r4, [r4, #24]
 801a4de:	e7db      	b.n	801a498 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801a4e0:	b002      	add	sp, #8
 801a4e2:	bd70      	pop	{r4, r5, r6, pc}

0801a4e4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801a4e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a4e8:	4770      	bx	lr

0801a4ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801a4ea:	6803      	ldr	r3, [r0, #0]
 801a4ec:	b513      	push	{r0, r1, r4, lr}
 801a4ee:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	e9cd 3300 	strd	r3, r3, [sp]
 801a4f8:	466b      	mov	r3, sp
 801a4fa:	47a0      	blx	r4
 801a4fc:	b002      	add	sp, #8
 801a4fe:	bd10      	pop	{r4, pc}

0801a500 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801a500:	2301      	movs	r3, #1
 801a502:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a506:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a50a:	4770      	bx	lr

0801a50c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801a50c:	2301      	movs	r3, #1
 801a50e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801a512:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801a516:	4770      	bx	lr

0801a518 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801a518:	6843      	ldr	r3, [r0, #4]
 801a51a:	2201      	movs	r2, #1
 801a51c:	725a      	strb	r2, [r3, #9]
 801a51e:	6840      	ldr	r0, [r0, #4]
 801a520:	6803      	ldr	r3, [r0, #0]
 801a522:	691b      	ldr	r3, [r3, #16]
 801a524:	4718      	bx	r3

0801a526 <_ZN8touchgfx3HAL8flushDMAEv>:
 801a526:	6840      	ldr	r0, [r0, #4]
 801a528:	6803      	ldr	r3, [r0, #0]
 801a52a:	689b      	ldr	r3, [r3, #8]
 801a52c:	4718      	bx	r3
	...

0801a530 <_ZN8touchgfx3HAL10beginFrameEv>:
 801a530:	4b04      	ldr	r3, [pc, #16]	; (801a544 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	b123      	cbz	r3, 801a540 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801a536:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801a53a:	f080 0001 	eor.w	r0, r0, #1
 801a53e:	4770      	bx	lr
 801a540:	2001      	movs	r0, #1
 801a542:	4770      	bx	lr
 801a544:	2000bf14 	.word	0x2000bf14

0801a548 <_ZN8touchgfx3HAL8endFrameEv>:
 801a548:	b510      	push	{r4, lr}
 801a54a:	4604      	mov	r4, r0
 801a54c:	6840      	ldr	r0, [r0, #4]
 801a54e:	6803      	ldr	r3, [r0, #0]
 801a550:	689b      	ldr	r3, [r3, #8]
 801a552:	4798      	blx	r3
 801a554:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801a558:	b113      	cbz	r3, 801a560 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801a55a:	2301      	movs	r3, #1
 801a55c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a560:	bd10      	pop	{r4, pc}

0801a562 <_ZN8touchgfx3HAL9taskEntryEv>:
 801a562:	b508      	push	{r3, lr}
 801a564:	6803      	ldr	r3, [r0, #0]
 801a566:	4604      	mov	r4, r0
 801a568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a56a:	4798      	blx	r3
 801a56c:	6823      	ldr	r3, [r4, #0]
 801a56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a570:	4620      	mov	r0, r4
 801a572:	4798      	blx	r3
 801a574:	f7fd fc34 	bl	8017de0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a578:	6823      	ldr	r3, [r4, #0]
 801a57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a57c:	e7f8      	b.n	801a570 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801a580 <_ZN8touchgfx3HAL4tickEv>:
 801a580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a582:	6803      	ldr	r3, [r0, #0]
 801a584:	4604      	mov	r4, r0
 801a586:	4d5c      	ldr	r5, [pc, #368]	; (801a6f8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a58c:	4798      	blx	r3
 801a58e:	2800      	cmp	r0, #0
 801a590:	f000 8097 	beq.w	801a6c2 <_ZN8touchgfx3HAL4tickEv+0x142>
 801a594:	2001      	movs	r0, #1
 801a596:	2600      	movs	r6, #0
 801a598:	f7fd f906 	bl	80177a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a59c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a5a0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a5a4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a5a8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a5ac:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a5b0:	b133      	cbz	r3, 801a5c0 <_ZN8touchgfx3HAL4tickEv+0x40>
 801a5b2:	6823      	ldr	r3, [r4, #0]
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801a5ba:	4798      	blx	r3
 801a5bc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a5c0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a5c4:	2601      	movs	r6, #1
 801a5c6:	6862      	ldr	r2, [r4, #4]
 801a5c8:	f083 0301 	eor.w	r3, r3, #1
 801a5cc:	702e      	strb	r6, [r5, #0]
 801a5ce:	7253      	strb	r3, [r2, #9]
 801a5d0:	f003 f9d4 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801a5d4:	6803      	ldr	r3, [r0, #0]
 801a5d6:	4631      	mov	r1, r6
 801a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5da:	4798      	blx	r3
 801a5dc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a5e0:	b90b      	cbnz	r3, 801a5e6 <_ZN8touchgfx3HAL4tickEv+0x66>
 801a5e2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a5e6:	f003 f9c9 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801a5ea:	6803      	ldr	r3, [r0, #0]
 801a5ec:	695b      	ldr	r3, [r3, #20]
 801a5ee:	4798      	blx	r3
 801a5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5f2:	6803      	ldr	r3, [r0, #0]
 801a5f4:	691b      	ldr	r3, [r3, #16]
 801a5f6:	4798      	blx	r3
 801a5f8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a5fc:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a600:	3b01      	subs	r3, #1
 801a602:	b2db      	uxtb	r3, r3
 801a604:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a608:	b10a      	cbz	r2, 801a60e <_ZN8touchgfx3HAL4tickEv+0x8e>
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d1eb      	bne.n	801a5e6 <_ZN8touchgfx3HAL4tickEv+0x66>
 801a60e:	4a3b      	ldr	r2, [pc, #236]	; (801a6fc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a610:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a614:	7813      	ldrb	r3, [r2, #0]
 801a616:	3301      	adds	r3, #1
 801a618:	b25b      	sxtb	r3, r3
 801a61a:	4299      	cmp	r1, r3
 801a61c:	7013      	strb	r3, [r2, #0]
 801a61e:	dc10      	bgt.n	801a642 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801a620:	2300      	movs	r3, #0
 801a622:	68e0      	ldr	r0, [r4, #12]
 801a624:	a902      	add	r1, sp, #8
 801a626:	7013      	strb	r3, [r2, #0]
 801a628:	aa03      	add	r2, sp, #12
 801a62a:	6803      	ldr	r3, [r0, #0]
 801a62c:	68db      	ldr	r3, [r3, #12]
 801a62e:	4798      	blx	r3
 801a630:	6823      	ldr	r3, [r4, #0]
 801a632:	2800      	cmp	r0, #0
 801a634:	d051      	beq.n	801a6da <_ZN8touchgfx3HAL4tickEv+0x15a>
 801a636:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a63a:	4620      	mov	r0, r4
 801a63c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a640:	4798      	blx	r3
 801a642:	2300      	movs	r3, #0
 801a644:	6960      	ldr	r0, [r4, #20]
 801a646:	f88d 3007 	strb.w	r3, [sp, #7]
 801a64a:	b158      	cbz	r0, 801a664 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801a64c:	6803      	ldr	r3, [r0, #0]
 801a64e:	f10d 0107 	add.w	r1, sp, #7
 801a652:	68db      	ldr	r3, [r3, #12]
 801a654:	4798      	blx	r3
 801a656:	b128      	cbz	r0, 801a664 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801a658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a65a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a65e:	6803      	ldr	r3, [r0, #0]
 801a660:	68db      	ldr	r3, [r3, #12]
 801a662:	4798      	blx	r3
 801a664:	f104 001c 	add.w	r0, r4, #28
 801a668:	f00d fcea 	bl	8028040 <_ZN8touchgfx8Gestures4tickEv>
 801a66c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a670:	b30b      	cbz	r3, 801a6b6 <_ZN8touchgfx3HAL4tickEv+0x136>
 801a672:	6920      	ldr	r0, [r4, #16]
 801a674:	6803      	ldr	r3, [r0, #0]
 801a676:	691b      	ldr	r3, [r3, #16]
 801a678:	4798      	blx	r3
 801a67a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a67c:	4606      	mov	r6, r0
 801a67e:	b903      	cbnz	r3, 801a682 <_ZN8touchgfx3HAL4tickEv+0x102>
 801a680:	6720      	str	r0, [r4, #112]	; 0x70
 801a682:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a684:	4a1e      	ldr	r2, [pc, #120]	; (801a700 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801a686:	1af3      	subs	r3, r6, r3
 801a688:	4293      	cmp	r3, r2
 801a68a:	d914      	bls.n	801a6b6 <_ZN8touchgfx3HAL4tickEv+0x136>
 801a68c:	6920      	ldr	r0, [r4, #16]
 801a68e:	6803      	ldr	r3, [r0, #0]
 801a690:	699b      	ldr	r3, [r3, #24]
 801a692:	4798      	blx	r3
 801a694:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a696:	2264      	movs	r2, #100	; 0x64
 801a698:	1af3      	subs	r3, r6, r3
 801a69a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a69e:	fbb0 f0f3 	udiv	r0, r0, r3
 801a6a2:	2800      	cmp	r0, #0
 801a6a4:	dc1e      	bgt.n	801a6e4 <_ZN8touchgfx3HAL4tickEv+0x164>
 801a6a6:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a6aa:	6920      	ldr	r0, [r4, #16]
 801a6ac:	2100      	movs	r1, #0
 801a6ae:	6803      	ldr	r3, [r0, #0]
 801a6b0:	69db      	ldr	r3, [r3, #28]
 801a6b2:	4798      	blx	r3
 801a6b4:	6726      	str	r6, [r4, #112]	; 0x70
 801a6b6:	f003 f961 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801a6ba:	6803      	ldr	r3, [r0, #0]
 801a6bc:	2100      	movs	r1, #0
 801a6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6c0:	4798      	blx	r3
 801a6c2:	6823      	ldr	r3, [r4, #0]
 801a6c4:	4620      	mov	r0, r4
 801a6c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a6ca:	4798      	blx	r3
 801a6cc:	2001      	movs	r0, #1
 801a6ce:	f7fd f876 	bl	80177be <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	702b      	strb	r3, [r5, #0]
 801a6d6:	b004      	add	sp, #16
 801a6d8:	bd70      	pop	{r4, r5, r6, pc}
 801a6da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a6de:	4620      	mov	r0, r4
 801a6e0:	4798      	blx	r3
 801a6e2:	e7ae      	b.n	801a642 <_ZN8touchgfx3HAL4tickEv+0xc2>
 801a6e4:	2863      	cmp	r0, #99	; 0x63
 801a6e6:	bfcb      	itete	gt
 801a6e8:	2300      	movgt	r3, #0
 801a6ea:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a6ee:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a6f2:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a6f6:	e7d8      	b.n	801a6aa <_ZN8touchgfx3HAL4tickEv+0x12a>
 801a6f8:	2000bf1c 	.word	0x2000bf1c
 801a6fc:	2000bf1d 	.word	0x2000bf1d
 801a700:	05f5e100 	.word	0x05f5e100

0801a704 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a704:	f7fd bb0c 	b.w	8017d20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a708 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a708:	6581      	str	r1, [r0, #88]	; 0x58
 801a70a:	301c      	adds	r0, #28
 801a70c:	f00d bc96 	b.w	802803c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a710 <_ZN8touchgfx3HAL5touchEll>:
 801a710:	b530      	push	{r4, r5, lr}
 801a712:	b087      	sub	sp, #28
 801a714:	4604      	mov	r4, r0
 801a716:	a804      	add	r0, sp, #16
 801a718:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a71c:	f002 ff32 	bl	801d584 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a720:	9b04      	ldr	r3, [sp, #16]
 801a722:	a906      	add	r1, sp, #24
 801a724:	a803      	add	r0, sp, #12
 801a726:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a72a:	9b05      	ldr	r3, [sp, #20]
 801a72c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a730:	f002 ff76 	bl	801d620 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a734:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a738:	f104 001c 	add.w	r0, r4, #28
 801a73c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a740:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a744:	b189      	cbz	r1, 801a76a <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a746:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a74a:	9300      	str	r3, [sp, #0]
 801a74c:	4613      	mov	r3, r2
 801a74e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a752:	462a      	mov	r2, r5
 801a754:	f00d fc82 	bl	802805c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a758:	b128      	cbz	r0, 801a766 <_ZN8touchgfx3HAL5touchEll+0x56>
 801a75a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a75e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a760:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a764:	6623      	str	r3, [r4, #96]	; 0x60
 801a766:	b007      	add	sp, #28
 801a768:	bd30      	pop	{r4, r5, pc}
 801a76a:	f00d fcbb 	bl	80280e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a76e:	2301      	movs	r3, #1
 801a770:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a774:	e7f1      	b.n	801a75a <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a776 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a776:	b570      	push	{r4, r5, r6, lr}
 801a778:	2b00      	cmp	r3, #0
 801a77a:	d050      	beq.n	801a81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801a77c:	ea81 0002 	eor.w	r0, r1, r2
 801a780:	07c6      	lsls	r6, r0, #31
 801a782:	d508      	bpl.n	801a796 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a784:	3a01      	subs	r2, #1
 801a786:	18cc      	adds	r4, r1, r3
 801a788:	42a1      	cmp	r1, r4
 801a78a:	d048      	beq.n	801a81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801a78c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a790:	f801 0b01 	strb.w	r0, [r1], #1
 801a794:	e7f8      	b.n	801a788 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a796:	07d5      	lsls	r5, r2, #31
 801a798:	bf42      	ittt	mi
 801a79a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a79e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a7a2:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	d915      	bls.n	801a7d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801a7aa:	ea82 0001 	eor.w	r0, r2, r1
 801a7ae:	0784      	lsls	r4, r0, #30
 801a7b0:	d02d      	beq.n	801a80e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801a7b2:	1e94      	subs	r4, r2, #2
 801a7b4:	4608      	mov	r0, r1
 801a7b6:	18ce      	adds	r6, r1, r3
 801a7b8:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801a7bc:	f820 5b02 	strh.w	r5, [r0], #2
 801a7c0:	1a35      	subs	r5, r6, r0
 801a7c2:	2d01      	cmp	r5, #1
 801a7c4:	d8f8      	bhi.n	801a7b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801a7c6:	1e98      	subs	r0, r3, #2
 801a7c8:	f003 0301 	and.w	r3, r3, #1
 801a7cc:	f020 0001 	bic.w	r0, r0, #1
 801a7d0:	3002      	adds	r0, #2
 801a7d2:	4401      	add	r1, r0
 801a7d4:	4402      	add	r2, r0
 801a7d6:	1f14      	subs	r4, r2, #4
 801a7d8:	4608      	mov	r0, r1
 801a7da:	18ce      	adds	r6, r1, r3
 801a7dc:	1a35      	subs	r5, r6, r0
 801a7de:	2d03      	cmp	r5, #3
 801a7e0:	d810      	bhi.n	801a804 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801a7e2:	089c      	lsrs	r4, r3, #2
 801a7e4:	00a0      	lsls	r0, r4, #2
 801a7e6:	4401      	add	r1, r0
 801a7e8:	3801      	subs	r0, #1
 801a7ea:	4402      	add	r2, r0
 801a7ec:	f06f 0003 	mvn.w	r0, #3
 801a7f0:	fb00 3404 	mla	r4, r0, r4, r3
 801a7f4:	440c      	add	r4, r1
 801a7f6:	42a1      	cmp	r1, r4
 801a7f8:	d011      	beq.n	801a81e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801a7fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a7fe:	f801 3b01 	strb.w	r3, [r1], #1
 801a802:	e7f8      	b.n	801a7f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801a804:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801a808:	f840 5b04 	str.w	r5, [r0], #4
 801a80c:	e7e6      	b.n	801a7dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801a80e:	0790      	lsls	r0, r2, #30
 801a810:	d0e1      	beq.n	801a7d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801a812:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a816:	3b02      	subs	r3, #2
 801a818:	f821 0b02 	strh.w	r0, [r1], #2
 801a81c:	e7db      	b.n	801a7d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801a81e:	2001      	movs	r0, #1
 801a820:	bd70      	pop	{r4, r5, r6, pc}

0801a822 <_ZN8touchgfx3HAL7noTouchEv>:
 801a822:	b510      	push	{r4, lr}
 801a824:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a828:	4604      	mov	r4, r0
 801a82a:	b153      	cbz	r3, 801a842 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a82c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a830:	2101      	movs	r1, #1
 801a832:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a836:	301c      	adds	r0, #28
 801a838:	f00d fc54 	bl	80280e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a83c:	2300      	movs	r3, #0
 801a83e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a842:	bd10      	pop	{r4, pc}

0801a844 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a848:	4605      	mov	r5, r0
 801a84a:	6980      	ldr	r0, [r0, #24]
 801a84c:	b085      	sub	sp, #20
 801a84e:	460f      	mov	r7, r1
 801a850:	4690      	mov	r8, r2
 801a852:	4699      	mov	r9, r3
 801a854:	b930      	cbnz	r0, 801a864 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801a856:	4b1f      	ldr	r3, [pc, #124]	; (801a8d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801a858:	f44f 7198 	mov.w	r1, #304	; 0x130
 801a85c:	4a1e      	ldr	r2, [pc, #120]	; (801a8d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801a85e:	481f      	ldr	r0, [pc, #124]	; (801a8dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801a860:	f00f f8ba 	bl	80299d8 <__assert_func>
 801a864:	ac04      	add	r4, sp, #16
 801a866:	2600      	movs	r6, #0
 801a868:	f844 6d04 	str.w	r6, [r4, #-4]!
 801a86c:	6806      	ldr	r6, [r0, #0]
 801a86e:	9401      	str	r4, [sp, #4]
 801a870:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801a874:	9400      	str	r4, [sp, #0]
 801a876:	6834      	ldr	r4, [r6, #0]
 801a878:	47a0      	blx	r4
 801a87a:	4c19      	ldr	r4, [pc, #100]	; (801a8e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801a87c:	4606      	mov	r6, r0
 801a87e:	f8a4 9000 	strh.w	r9, [r4]
 801a882:	f7f6 f9a5 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801a886:	6803      	ldr	r3, [r0, #0]
 801a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a88a:	4798      	blx	r3
 801a88c:	280c      	cmp	r0, #12
 801a88e:	d80f      	bhi.n	801a8b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801a890:	e8df f000 	tbb	[pc, r0]
 801a894:	1b1b1207 	.word	0x1b1b1207
 801a898:	1b1b1b1b 	.word	0x1b1b1b1b
 801a89c:	1b1b1b1b 	.word	0x1b1b1b1b
 801a8a0:	1b          	.byte	0x1b
 801a8a1:	00          	.byte	0x00
 801a8a2:	8823      	ldrh	r3, [r4, #0]
 801a8a4:	fb08 7203 	mla	r2, r8, r3, r7
 801a8a8:	9b03      	ldr	r3, [sp, #12]
 801a8aa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a8ae:	63eb      	str	r3, [r5, #60]	; 0x3c
 801a8b0:	4630      	mov	r0, r6
 801a8b2:	b005      	add	sp, #20
 801a8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8b8:	8822      	ldrh	r2, [r4, #0]
 801a8ba:	9b03      	ldr	r3, [sp, #12]
 801a8bc:	fb08 7202 	mla	r2, r8, r2, r7
 801a8c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8c4:	1a9a      	subs	r2, r3, r2
 801a8c6:	63ea      	str	r2, [r5, #60]	; 0x3c
 801a8c8:	e7f2      	b.n	801a8b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801a8ca:	4b06      	ldr	r3, [pc, #24]	; (801a8e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801a8cc:	f240 114d 	movw	r1, #333	; 0x14d
 801a8d0:	4a01      	ldr	r2, [pc, #4]	; (801a8d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801a8d2:	e7c4      	b.n	801a85e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801a8d4:	0802cdc9 	.word	0x0802cdc9
 801a8d8:	0802d0da 	.word	0x0802d0da
 801a8dc:	0802ce0e 	.word	0x0802ce0e
 801a8e0:	2000bf10 	.word	0x2000bf10
 801a8e4:	0802ce34 	.word	0x0802ce34

0801a8e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801a8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8ec:	4698      	mov	r8, r3
 801a8ee:	6803      	ldr	r3, [r0, #0]
 801a8f0:	b087      	sub	sp, #28
 801a8f2:	460e      	mov	r6, r1
 801a8f4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801a8f6:	4617      	mov	r7, r2
 801a8f8:	4b0d      	ldr	r3, [pc, #52]	; (801a930 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	f8b3 9000 	ldrh.w	r9, [r3]
 801a900:	f7f6 f966 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801a904:	6803      	ldr	r3, [r0, #0]
 801a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a908:	4798      	blx	r3
 801a90a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a90e:	463a      	mov	r2, r7
 801a910:	4631      	mov	r1, r6
 801a912:	9302      	str	r3, [sp, #8]
 801a914:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a918:	9301      	str	r3, [sp, #4]
 801a91a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a91e:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801a922:	9300      	str	r3, [sp, #0]
 801a924:	4620      	mov	r0, r4
 801a926:	4643      	mov	r3, r8
 801a928:	47a8      	blx	r5
 801a92a:	b007      	add	sp, #28
 801a92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a930:	2000bf10 	.word	0x2000bf10

0801a934 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a938:	4606      	mov	r6, r0
 801a93a:	b089      	sub	sp, #36	; 0x24
 801a93c:	4610      	mov	r0, r2
 801a93e:	460c      	mov	r4, r1
 801a940:	4691      	mov	r9, r2
 801a942:	4698      	mov	r8, r3
 801a944:	f005 fa36 	bl	801fdb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a948:	2800      	cmp	r0, #0
 801a94a:	f000 8092 	beq.w	801aa72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801a94e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801aa8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801a952:	ad08      	add	r5, sp, #32
 801a954:	f8df b138 	ldr.w	fp, [pc, #312]	; 801aa90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801a958:	f8da 0000 	ldr.w	r0, [sl]
 801a95c:	4f4a      	ldr	r7, [pc, #296]	; (801aa88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801a95e:	6802      	ldr	r2, [r0, #0]
 801a960:	6a12      	ldr	r2, [r2, #32]
 801a962:	4790      	blx	r2
 801a964:	f8da 0000 	ldr.w	r0, [sl]
 801a968:	6802      	ldr	r2, [r0, #0]
 801a96a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a96c:	4790      	blx	r2
 801a96e:	f8bb 3000 	ldrh.w	r3, [fp]
 801a972:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801a976:	4628      	mov	r0, r5
 801a978:	9300      	str	r3, [sp, #0]
 801a97a:	883b      	ldrh	r3, [r7, #0]
 801a97c:	9301      	str	r3, [sp, #4]
 801a97e:	f005 fad9 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a982:	f8ab 0000 	strh.w	r0, [fp]
 801a986:	4628      	mov	r0, r5
 801a988:	f005 fb0e 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a98c:	f8da b000 	ldr.w	fp, [sl]
 801a990:	8038      	strh	r0, [r7, #0]
 801a992:	4648      	mov	r0, r9
 801a994:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801a998:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801a99c:	9302      	str	r3, [sp, #8]
 801a99e:	f005 fa09 	bl	801fdb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a9a2:	f8da 2000 	ldr.w	r2, [sl]
 801a9a6:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801a9aa:	63d0      	str	r0, [r2, #60]	; 0x3c
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	6822      	ldr	r2, [r4, #0]
 801a9b0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801a9b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a9b6:	2200      	movs	r2, #0
 801a9b8:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801a9bc:	4611      	mov	r1, r2
 801a9be:	4798      	blx	r3
 801a9c0:	2201      	movs	r2, #1
 801a9c2:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801a9c6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801a9ca:	1d22      	adds	r2, r4, #4
 801a9cc:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801a9d0:	2900      	cmp	r1, #0
 801a9d2:	d051      	beq.n	801aa78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801a9d4:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801a9d8:	2900      	cmp	r1, #0
 801a9da:	d04d      	beq.n	801aa78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801a9dc:	6810      	ldr	r0, [r2, #0]
 801a9de:	f10d 0c18 	add.w	ip, sp, #24
 801a9e2:	6851      	ldr	r1, [r2, #4]
 801a9e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a9e8:	4641      	mov	r1, r8
 801a9ea:	a806      	add	r0, sp, #24
 801a9ec:	f7ff fc76 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801a9f0:	4628      	mov	r0, r5
 801a9f2:	f005 fc2b 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a9f6:	4680      	mov	r8, r0
 801a9f8:	f7f6 f8ea 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801a9fc:	6802      	ldr	r2, [r0, #0]
 801a9fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801aa00:	4790      	blx	r2
 801aa02:	4580      	cmp	r8, r0
 801aa04:	d03d      	beq.n	801aa82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801aa06:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801aa08:	b150      	cbz	r0, 801aa20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801aa0a:	4628      	mov	r0, r5
 801aa0c:	f005 fc1e 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801aa10:	4605      	mov	r5, r0
 801aa12:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801aa14:	6803      	ldr	r3, [r0, #0]
 801aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa18:	4798      	blx	r3
 801aa1a:	1a2b      	subs	r3, r5, r0
 801aa1c:	4258      	negs	r0, r3
 801aa1e:	4158      	adcs	r0, r3
 801aa20:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801aa24:	2500      	movs	r5, #0
 801aa26:	6963      	ldr	r3, [r4, #20]
 801aa28:	4620      	mov	r0, r4
 801aa2a:	6822      	ldr	r2, [r4, #0]
 801aa2c:	a906      	add	r1, sp, #24
 801aa2e:	6165      	str	r5, [r4, #20]
 801aa30:	9303      	str	r3, [sp, #12]
 801aa32:	6892      	ldr	r2, [r2, #8]
 801aa34:	4790      	blx	r2
 801aa36:	9b03      	ldr	r3, [sp, #12]
 801aa38:	4620      	mov	r0, r4
 801aa3a:	4652      	mov	r2, sl
 801aa3c:	6163      	str	r3, [r4, #20]
 801aa3e:	4649      	mov	r1, r9
 801aa40:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801aa44:	6823      	ldr	r3, [r4, #0]
 801aa46:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801aa4a:	4c10      	ldr	r4, [pc, #64]	; (801aa8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801aa4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa4e:	4798      	blx	r3
 801aa50:	6820      	ldr	r0, [r4, #0]
 801aa52:	9b02      	ldr	r3, [sp, #8]
 801aa54:	9a00      	ldr	r2, [sp, #0]
 801aa56:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801aa5a:	4b0d      	ldr	r3, [pc, #52]	; (801aa90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801aa5c:	801a      	strh	r2, [r3, #0]
 801aa5e:	4b0a      	ldr	r3, [pc, #40]	; (801aa88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801aa60:	9a01      	ldr	r2, [sp, #4]
 801aa62:	801a      	strh	r2, [r3, #0]
 801aa64:	6803      	ldr	r3, [r0, #0]
 801aa66:	6a1b      	ldr	r3, [r3, #32]
 801aa68:	4798      	blx	r3
 801aa6a:	6820      	ldr	r0, [r4, #0]
 801aa6c:	6803      	ldr	r3, [r0, #0]
 801aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa70:	4798      	blx	r3
 801aa72:	b009      	add	sp, #36	; 0x24
 801aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa78:	ab06      	add	r3, sp, #24
 801aa7a:	6810      	ldr	r0, [r2, #0]
 801aa7c:	6851      	ldr	r1, [r2, #4]
 801aa7e:	c303      	stmia	r3!, {r0, r1}
 801aa80:	e7b6      	b.n	801a9f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801aa82:	2000      	movs	r0, #0
 801aa84:	e7cc      	b.n	801aa20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801aa86:	bf00      	nop
 801aa88:	2000bf12 	.word	0x2000bf12
 801aa8c:	2000bf18 	.word	0x2000bf18
 801aa90:	2000bf10 	.word	0x2000bf10

0801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801aa94:	4b07      	ldr	r3, [pc, #28]	; (801aab4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801aa96:	b510      	push	{r4, lr}
 801aa98:	781b      	ldrb	r3, [r3, #0]
 801aa9a:	4604      	mov	r4, r0
 801aa9c:	b13b      	cbz	r3, 801aaae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801aa9e:	6803      	ldr	r3, [r0, #0]
 801aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaa2:	4798      	blx	r3
 801aaa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801aaa6:	4283      	cmp	r3, r0
 801aaa8:	d101      	bne.n	801aaae <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801aaaa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801aaac:	bd10      	pop	{r4, pc}
 801aaae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801aab0:	e7fc      	b.n	801aaac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801aab2:	bf00      	nop
 801aab4:	2000bf14 	.word	0x2000bf14

0801aab8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801aab8:	4b0b      	ldr	r3, [pc, #44]	; (801aae8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801aaba:	b510      	push	{r4, lr}
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	4604      	mov	r4, r0
 801aac0:	b95b      	cbnz	r3, 801aada <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aac2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801aac6:	2b02      	cmp	r3, #2
 801aac8:	d007      	beq.n	801aada <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aaca:	6840      	ldr	r0, [r0, #4]
 801aacc:	f000 fbc8 	bl	801b260 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801aad0:	b118      	cbz	r0, 801aada <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aad2:	6862      	ldr	r2, [r4, #4]
 801aad4:	7a53      	ldrb	r3, [r2, #9]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d0fc      	beq.n	801aad4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801aada:	f7fd f913 	bl	8017d04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801aade:	4620      	mov	r0, r4
 801aae0:	f7ff ffd8 	bl	801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aae4:	bd10      	pop	{r4, pc}
 801aae6:	bf00      	nop
 801aae8:	2000bf14 	.word	0x2000bf14

0801aaec <_ZN8touchgfx3HAL10initializeEv>:
 801aaec:	b510      	push	{r4, lr}
 801aaee:	4604      	mov	r4, r0
 801aaf0:	f7fd f8e4 	bl	8017cbc <_ZN8touchgfx10OSWrappers10initializeEv>
 801aaf4:	6860      	ldr	r0, [r4, #4]
 801aaf6:	6803      	ldr	r3, [r0, #0]
 801aaf8:	68db      	ldr	r3, [r3, #12]
 801aafa:	4798      	blx	r3
 801aafc:	68e0      	ldr	r0, [r4, #12]
 801aafe:	6803      	ldr	r3, [r0, #0]
 801ab00:	689b      	ldr	r3, [r3, #8]
 801ab02:	4798      	blx	r3
 801ab04:	6823      	ldr	r3, [r4, #0]
 801ab06:	4620      	mov	r0, r4
 801ab08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab0e:	4718      	bx	r3

0801ab10 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801ab10:	b508      	push	{r3, lr}
 801ab12:	290c      	cmp	r1, #12
 801ab14:	d817      	bhi.n	801ab46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801ab16:	e8df f001 	tbb	[pc, r1]
 801ab1a:	090b      	.short	0x090b
 801ab1c:	0d0d0d07 	.word	0x0d0d0d07
 801ab20:	1414140d 	.word	0x1414140d
 801ab24:	1414      	.short	0x1414
 801ab26:	0d          	.byte	0x0d
 801ab27:	00          	.byte	0x00
 801ab28:	2020      	movs	r0, #32
 801ab2a:	bd08      	pop	{r3, pc}
 801ab2c:	2018      	movs	r0, #24
 801ab2e:	e7fc      	b.n	801ab2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ab30:	2010      	movs	r0, #16
 801ab32:	e7fa      	b.n	801ab2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ab34:	4b05      	ldr	r3, [pc, #20]	; (801ab4c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801ab36:	f44f 710c 	mov.w	r1, #560	; 0x230
 801ab3a:	4a05      	ldr	r2, [pc, #20]	; (801ab50 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801ab3c:	4805      	ldr	r0, [pc, #20]	; (801ab54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801ab3e:	f00e ff4b 	bl	80299d8 <__assert_func>
 801ab42:	2008      	movs	r0, #8
 801ab44:	e7f1      	b.n	801ab2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ab46:	2000      	movs	r0, #0
 801ab48:	e7ef      	b.n	801ab2a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801ab4a:	bf00      	nop
 801ab4c:	0802cf07 	.word	0x0802cf07
 801ab50:	0802d29c 	.word	0x0802d29c
 801ab54:	0802ce0e 	.word	0x0802ce0e

0801ab58 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801ab58:	b570      	push	{r4, r5, r6, lr}
 801ab5a:	460d      	mov	r5, r1
 801ab5c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801ab60:	4616      	mov	r6, r2
 801ab62:	461c      	mov	r4, r3
 801ab64:	f7ff ffd4 	bl	801ab10 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801ab68:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801ab6c:	10c0      	asrs	r0, r0, #3
 801ab6e:	fb06 5101 	mla	r1, r6, r1, r5
 801ab72:	fb00 4001 	mla	r0, r0, r1, r4
 801ab76:	bd70      	pop	{r4, r5, r6, pc}

0801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801ab78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab7c:	b08a      	sub	sp, #40	; 0x28
 801ab7e:	f04f 0c00 	mov.w	ip, #0
 801ab82:	4604      	mov	r4, r0
 801ab84:	469a      	mov	sl, r3
 801ab86:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801ab8a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801ab8e:	f1b8 0f02 	cmp.w	r8, #2
 801ab92:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801ab96:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801ab9a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801ab9e:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801aba2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801aba6:	f8cd c020 	str.w	ip, [sp, #32]
 801abaa:	d030      	beq.n	801ac0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801abac:	2bff      	cmp	r3, #255	; 0xff
 801abae:	d12c      	bne.n	801ac0a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801abb0:	4560      	cmp	r0, ip
 801abb2:	bf14      	ite	ne
 801abb4:	2004      	movne	r0, #4
 801abb6:	2001      	moveq	r0, #1
 801abb8:	9204      	str	r2, [sp, #16]
 801abba:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801abbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801abc2:	f8ad 201c 	strh.w	r2, [sp, #28]
 801abc6:	f8ad 6018 	strh.w	r6, [sp, #24]
 801abca:	f8ad 501a 	strh.w	r5, [sp, #26]
 801abce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801abd2:	4620      	mov	r0, r4
 801abd4:	f7ff ff5e 	bl	801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801abd8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801abdc:	4603      	mov	r3, r0
 801abde:	4651      	mov	r1, sl
 801abe0:	4620      	mov	r0, r4
 801abe2:	e9cd 9700 	strd	r9, r7, [sp]
 801abe6:	f7ff ffb7 	bl	801ab58 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801abea:	f8ad 901e 	strh.w	r9, [sp, #30]
 801abee:	9005      	str	r0, [sp, #20]
 801abf0:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801abf4:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801abf8:	b106      	cbz	r6, 801abfc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801abfa:	b98d      	cbnz	r5, 801ac20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801abfc:	4b12      	ldr	r3, [pc, #72]	; (801ac48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801abfe:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801ac02:	4a12      	ldr	r2, [pc, #72]	; (801ac4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801ac04:	4812      	ldr	r0, [pc, #72]	; (801ac50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801ac06:	f00e fee7 	bl	80299d8 <__assert_func>
 801ac0a:	2004      	movs	r0, #4
 801ac0c:	e7d4      	b.n	801abb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801ac0e:	2bff      	cmp	r3, #255	; 0xff
 801ac10:	d104      	bne.n	801ac1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801ac12:	2800      	cmp	r0, #0
 801ac14:	bf14      	ite	ne
 801ac16:	2040      	movne	r0, #64	; 0x40
 801ac18:	2020      	moveq	r0, #32
 801ac1a:	e7cd      	b.n	801abb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801ac1c:	2040      	movs	r0, #64	; 0x40
 801ac1e:	e7cb      	b.n	801abb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801ac20:	6823      	ldr	r3, [r4, #0]
 801ac22:	4620      	mov	r0, r4
 801ac24:	9d02      	ldr	r5, [sp, #8]
 801ac26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac28:	4798      	blx	r3
 801ac2a:	4228      	tst	r0, r5
 801ac2c:	d104      	bne.n	801ac38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801ac2e:	4b09      	ldr	r3, [pc, #36]	; (801ac54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801ac30:	f240 11b1 	movw	r1, #433	; 0x1b1
 801ac34:	4a05      	ldr	r2, [pc, #20]	; (801ac4c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801ac36:	e7e5      	b.n	801ac04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801ac38:	6860      	ldr	r0, [r4, #4]
 801ac3a:	a902      	add	r1, sp, #8
 801ac3c:	6803      	ldr	r3, [r0, #0]
 801ac3e:	685b      	ldr	r3, [r3, #4]
 801ac40:	4798      	blx	r3
 801ac42:	b00a      	add	sp, #40	; 0x28
 801ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac48:	0802ce8a 	.word	0x0802ce8a
 801ac4c:	0802d13e 	.word	0x0802d13e
 801ac50:	0802ce0e 	.word	0x0802ce0e
 801ac54:	0802cec2 	.word	0x0802cec2

0801ac58 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801ac58:	b510      	push	{r4, lr}
 801ac5a:	b08a      	sub	sp, #40	; 0x28
 801ac5c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ac60:	9408      	str	r4, [sp, #32]
 801ac62:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801ac66:	9407      	str	r4, [sp, #28]
 801ac68:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801ac6c:	9406      	str	r4, [sp, #24]
 801ac6e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801ac72:	9405      	str	r4, [sp, #20]
 801ac74:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801ac78:	9404      	str	r4, [sp, #16]
 801ac7a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801ac7e:	9403      	str	r4, [sp, #12]
 801ac80:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801ac84:	9402      	str	r4, [sp, #8]
 801ac86:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801ac8a:	e9cd 3400 	strd	r3, r4, [sp]
 801ac8e:	4613      	mov	r3, r2
 801ac90:	2200      	movs	r2, #0
 801ac92:	f7ff ff71 	bl	801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ac96:	b00a      	add	sp, #40	; 0x28
 801ac98:	bd10      	pop	{r4, pc}
	...

0801ac9c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac9e:	b08b      	sub	sp, #44	; 0x2c
 801aca0:	4616      	mov	r6, r2
 801aca2:	460d      	mov	r5, r1
 801aca4:	461f      	mov	r7, r3
 801aca6:	4604      	mov	r4, r0
 801aca8:	f7f5 ff92 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801acac:	6803      	ldr	r3, [r0, #0]
 801acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acb0:	4798      	blx	r3
 801acb2:	4b0e      	ldr	r3, [pc, #56]	; (801acec <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801acb4:	2200      	movs	r2, #0
 801acb6:	4629      	mov	r1, r5
 801acb8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801acbc:	881b      	ldrh	r3, [r3, #0]
 801acbe:	4620      	mov	r0, r4
 801acc0:	9306      	str	r3, [sp, #24]
 801acc2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801acc6:	9305      	str	r3, [sp, #20]
 801acc8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801accc:	9304      	str	r3, [sp, #16]
 801acce:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801acd2:	9303      	str	r3, [sp, #12]
 801acd4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801acd8:	9302      	str	r3, [sp, #8]
 801acda:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801acde:	e9cd 7300 	strd	r7, r3, [sp]
 801ace2:	4633      	mov	r3, r6
 801ace4:	f7ff ff48 	bl	801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ace8:	b00b      	add	sp, #44	; 0x2c
 801acea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acec:	2000bf10 	.word	0x2000bf10

0801acf0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acf4:	461f      	mov	r7, r3
 801acf6:	4b14      	ldr	r3, [pc, #80]	; (801ad48 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801acf8:	b08a      	sub	sp, #40	; 0x28
 801acfa:	4616      	mov	r6, r2
 801acfc:	f8b3 8000 	ldrh.w	r8, [r3]
 801ad00:	460d      	mov	r5, r1
 801ad02:	4604      	mov	r4, r0
 801ad04:	f7f5 ff64 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801ad08:	6803      	ldr	r3, [r0, #0]
 801ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad0c:	4798      	blx	r3
 801ad0e:	2302      	movs	r3, #2
 801ad10:	9008      	str	r0, [sp, #32]
 801ad12:	2200      	movs	r2, #0
 801ad14:	4629      	mov	r1, r5
 801ad16:	4620      	mov	r0, r4
 801ad18:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	9305      	str	r3, [sp, #20]
 801ad20:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801ad24:	9304      	str	r3, [sp, #16]
 801ad26:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ad2a:	9303      	str	r3, [sp, #12]
 801ad2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad30:	9302      	str	r3, [sp, #8]
 801ad32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ad36:	e9cd 7300 	strd	r7, r3, [sp]
 801ad3a:	4633      	mov	r3, r6
 801ad3c:	f7ff ff1c 	bl	801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ad40:	b00a      	add	sp, #40	; 0x28
 801ad42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad46:	bf00      	nop
 801ad48:	2000bf10 	.word	0x2000bf10

0801ad4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad50:	b08b      	sub	sp, #44	; 0x2c
 801ad52:	469b      	mov	fp, r3
 801ad54:	4604      	mov	r4, r0
 801ad56:	4692      	mov	sl, r2
 801ad58:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801ad5c:	2600      	movs	r6, #0
 801ad5e:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801ad62:	4689      	mov	r9, r1
 801ad64:	2fff      	cmp	r7, #255	; 0xff
 801ad66:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801ad6a:	9608      	str	r6, [sp, #32]
 801ad6c:	bf14      	ite	ne
 801ad6e:	2308      	movne	r3, #8
 801ad70:	2302      	moveq	r3, #2
 801ad72:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801ad76:	f7ff fe8d 	bl	801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ad7a:	465a      	mov	r2, fp
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	4651      	mov	r1, sl
 801ad80:	4620      	mov	r0, r4
 801ad82:	e9cd 8500 	strd	r8, r5, [sp]
 801ad86:	f7ff fee7 	bl	801ab58 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801ad8a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801ad8e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801ad92:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ad96:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ad9a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801ad9e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ada2:	6823      	ldr	r3, [r4, #0]
 801ada4:	9d02      	ldr	r5, [sp, #8]
 801ada6:	9005      	str	r0, [sp, #20]
 801ada8:	4620      	mov	r0, r4
 801adaa:	f8ad 601c 	strh.w	r6, [sp, #28]
 801adae:	f8ad 801e 	strh.w	r8, [sp, #30]
 801adb2:	f8cd 9020 	str.w	r9, [sp, #32]
 801adb6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801adbc:	4798      	blx	r3
 801adbe:	4228      	tst	r0, r5
 801adc0:	d106      	bne.n	801add0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801adc2:	4b07      	ldr	r3, [pc, #28]	; (801ade0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801adc4:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801adc8:	4a06      	ldr	r2, [pc, #24]	; (801ade4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801adca:	4807      	ldr	r0, [pc, #28]	; (801ade8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801adcc:	f00e fe04 	bl	80299d8 <__assert_func>
 801add0:	6860      	ldr	r0, [r4, #4]
 801add2:	a902      	add	r1, sp, #8
 801add4:	6803      	ldr	r3, [r0, #0]
 801add6:	685b      	ldr	r3, [r3, #4]
 801add8:	4798      	blx	r3
 801adda:	b00b      	add	sp, #44	; 0x2c
 801addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ade0:	0802cec2 	.word	0x0802cec2
 801ade4:	0802d207 	.word	0x0802d207
 801ade8:	0802ce0e 	.word	0x0802ce0e

0801adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801adec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801adf0:	461f      	mov	r7, r3
 801adf2:	4b0b      	ldr	r3, [pc, #44]	; (801ae20 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801adf4:	460d      	mov	r5, r1
 801adf6:	4616      	mov	r6, r2
 801adf8:	f8b3 8000 	ldrh.w	r8, [r3]
 801adfc:	4604      	mov	r4, r0
 801adfe:	f7f5 fee7 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801ae02:	6803      	ldr	r3, [r0, #0]
 801ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae06:	4798      	blx	r3
 801ae08:	463b      	mov	r3, r7
 801ae0a:	4632      	mov	r2, r6
 801ae0c:	4629      	mov	r1, r5
 801ae0e:	e9cd 8000 	strd	r8, r0, [sp]
 801ae12:	4620      	mov	r0, r4
 801ae14:	f7ff fea0 	bl	801ab58 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801ae18:	b002      	add	sp, #8
 801ae1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae1e:	bf00      	nop
 801ae20:	2000bf10 	.word	0x2000bf10

0801ae24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae28:	4698      	mov	r8, r3
 801ae2a:	b088      	sub	sp, #32
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	4617      	mov	r7, r2
 801ae30:	4604      	mov	r4, r0
 801ae32:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801ae36:	9306      	str	r3, [sp, #24]
 801ae38:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801ae3c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801ae40:	f8ad 6010 	strh.w	r6, [sp, #16]
 801ae44:	f8ad 5012 	strh.w	r5, [sp, #18]
 801ae48:	e9cd 3100 	strd	r3, r1, [sp]
 801ae4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ae50:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ae54:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ae58:	f88d 301c 	strb.w	r3, [sp, #28]
 801ae5c:	f7ff fe1a 	bl	801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ae60:	4642      	mov	r2, r8
 801ae62:	4603      	mov	r3, r0
 801ae64:	4639      	mov	r1, r7
 801ae66:	4620      	mov	r0, r4
 801ae68:	f7ff ffc0 	bl	801adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801ae6c:	4b16      	ldr	r3, [pc, #88]	; (801aec8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801ae6e:	9003      	str	r0, [sp, #12]
 801ae70:	881b      	ldrh	r3, [r3, #0]
 801ae72:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ae76:	f7f5 feab 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801ae7a:	6803      	ldr	r3, [r0, #0]
 801ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae7e:	4798      	blx	r3
 801ae80:	f88d 001e 	strb.w	r0, [sp, #30]
 801ae84:	f88d 001d 	strb.w	r0, [sp, #29]
 801ae88:	b106      	cbz	r6, 801ae8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801ae8a:	b935      	cbnz	r5, 801ae9a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801ae8c:	4b0f      	ldr	r3, [pc, #60]	; (801aecc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801ae8e:	f240 11cd 	movw	r1, #461	; 0x1cd
 801ae92:	4a0f      	ldr	r2, [pc, #60]	; (801aed0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801ae94:	480f      	ldr	r0, [pc, #60]	; (801aed4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801ae96:	f00e fd9f 	bl	80299d8 <__assert_func>
 801ae9a:	6823      	ldr	r3, [r4, #0]
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	9d00      	ldr	r5, [sp, #0]
 801aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aea2:	4798      	blx	r3
 801aea4:	4228      	tst	r0, r5
 801aea6:	d104      	bne.n	801aeb2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801aea8:	4b0b      	ldr	r3, [pc, #44]	; (801aed8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801aeaa:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801aeae:	4a08      	ldr	r2, [pc, #32]	; (801aed0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801aeb0:	e7f0      	b.n	801ae94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801aeb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aeb4:	4669      	mov	r1, sp
 801aeb6:	6860      	ldr	r0, [r4, #4]
 801aeb8:	9306      	str	r3, [sp, #24]
 801aeba:	6803      	ldr	r3, [r0, #0]
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	4798      	blx	r3
 801aec0:	b008      	add	sp, #32
 801aec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec6:	bf00      	nop
 801aec8:	2000bf10 	.word	0x2000bf10
 801aecc:	0802ce8a 	.word	0x0802ce8a
 801aed0:	0802cff0 	.word	0x0802cff0
 801aed4:	0802ce0e 	.word	0x0802ce0e
 801aed8:	0802cec2 	.word	0x0802cec2

0801aedc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801aedc:	b570      	push	{r4, r5, r6, lr}
 801aede:	b08a      	sub	sp, #40	; 0x28
 801aee0:	4604      	mov	r4, r0
 801aee2:	466b      	mov	r3, sp
 801aee4:	e883 0006 	stmia.w	r3, {r1, r2}
 801aee8:	4b1f      	ldr	r3, [pc, #124]	; (801af68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801aeea:	781b      	ldrb	r3, [r3, #0]
 801aeec:	b933      	cbnz	r3, 801aefc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801aeee:	4b1f      	ldr	r3, [pc, #124]	; (801af6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801aef0:	f240 11f9 	movw	r1, #505	; 0x1f9
 801aef4:	4a1e      	ldr	r2, [pc, #120]	; (801af70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801aef6:	481f      	ldr	r0, [pc, #124]	; (801af74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801aef8:	f00e fd6e 	bl	80299d8 <__assert_func>
 801aefc:	2300      	movs	r3, #0
 801aefe:	f8bd 5000 	ldrh.w	r5, [sp]
 801af02:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801af06:	9308      	str	r3, [sp, #32]
 801af08:	2301      	movs	r3, #1
 801af0a:	9302      	str	r3, [sp, #8]
 801af0c:	6803      	ldr	r3, [r0, #0]
 801af0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af10:	4798      	blx	r3
 801af12:	4632      	mov	r2, r6
 801af14:	4629      	mov	r1, r5
 801af16:	4603      	mov	r3, r0
 801af18:	4620      	mov	r0, r4
 801af1a:	f7ff ff67 	bl	801adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801af1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801af20:	9003      	str	r0, [sp, #12]
 801af22:	9305      	str	r3, [sp, #20]
 801af24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801af28:	f8ad 3018 	strh.w	r3, [sp, #24]
 801af2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801af30:	f8ad 301a 	strh.w	r3, [sp, #26]
 801af34:	4b10      	ldr	r3, [pc, #64]	; (801af78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801af36:	881b      	ldrh	r3, [r3, #0]
 801af38:	f8ad 301c 	strh.w	r3, [sp, #28]
 801af3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801af40:	f7f5 fe46 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801af44:	6803      	ldr	r3, [r0, #0]
 801af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af48:	4798      	blx	r3
 801af4a:	23ff      	movs	r3, #255	; 0xff
 801af4c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801af50:	a902      	add	r1, sp, #8
 801af52:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801af56:	6860      	ldr	r0, [r4, #4]
 801af58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801af5c:	6803      	ldr	r3, [r0, #0]
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	4798      	blx	r3
 801af62:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801af64:	b00a      	add	sp, #40	; 0x28
 801af66:	bd70      	pop	{r4, r5, r6, pc}
 801af68:	2000bf15 	.word	0x2000bf15
 801af6c:	0802cd5b 	.word	0x0802cd5b
 801af70:	0802d094 	.word	0x0802d094
 801af74:	0802ce0e 	.word	0x0802ce0e
 801af78:	2000bf10 	.word	0x2000bf10

0801af7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af7e:	b08b      	sub	sp, #44	; 0x2c
 801af80:	4604      	mov	r4, r0
 801af82:	466d      	mov	r5, sp
 801af84:	e885 0006 	stmia.w	r5, {r1, r2}
 801af88:	461d      	mov	r5, r3
 801af8a:	2300      	movs	r3, #0
 801af8c:	f8bd 6000 	ldrh.w	r6, [sp]
 801af90:	9308      	str	r3, [sp, #32]
 801af92:	2301      	movs	r3, #1
 801af94:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801af98:	9302      	str	r3, [sp, #8]
 801af9a:	6803      	ldr	r3, [r0, #0]
 801af9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af9e:	4798      	blx	r3
 801afa0:	463a      	mov	r2, r7
 801afa2:	4631      	mov	r1, r6
 801afa4:	4603      	mov	r3, r0
 801afa6:	4620      	mov	r0, r4
 801afa8:	f7ff ff20 	bl	801adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801afac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801afb0:	9003      	str	r0, [sp, #12]
 801afb2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801afb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801afba:	9505      	str	r5, [sp, #20]
 801afbc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801afc0:	4b0d      	ldr	r3, [pc, #52]	; (801aff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801afc2:	881b      	ldrh	r3, [r3, #0]
 801afc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801afc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801afca:	f8ad 301e 	strh.w	r3, [sp, #30]
 801afce:	f7f5 fdff 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801afd2:	6803      	ldr	r3, [r0, #0]
 801afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afd6:	4798      	blx	r3
 801afd8:	23ff      	movs	r3, #255	; 0xff
 801afda:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801afde:	a902      	add	r1, sp, #8
 801afe0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801afe4:	6860      	ldr	r0, [r4, #4]
 801afe6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801afea:	6803      	ldr	r3, [r0, #0]
 801afec:	685b      	ldr	r3, [r3, #4]
 801afee:	4798      	blx	r3
 801aff0:	4628      	mov	r0, r5
 801aff2:	b00b      	add	sp, #44	; 0x2c
 801aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aff6:	bf00      	nop
 801aff8:	2000bf10 	.word	0x2000bf10

0801affc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801affc:	b570      	push	{r4, r5, r6, lr}
 801affe:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801b002:	4604      	mov	r4, r0
 801b004:	b19b      	cbz	r3, 801b02e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801b006:	2002      	movs	r0, #2
 801b008:	f7fc fbe4 	bl	80177d4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801b00c:	2300      	movs	r3, #0
 801b00e:	4620      	mov	r0, r4
 801b010:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801b014:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801b018:	6823      	ldr	r3, [r4, #0]
 801b01a:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801b01e:	f7ff fd39 	bl	801aa94 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b022:	4601      	mov	r1, r0
 801b024:	4620      	mov	r0, r4
 801b026:	462b      	mov	r3, r5
 801b028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b02c:	4718      	bx	r3
 801b02e:	bd70      	pop	{r4, r5, r6, pc}

0801b030 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801b030:	4770      	bx	lr

0801b032 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801b032:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801b036:	1a13      	subs	r3, r2, r0
 801b038:	4258      	negs	r0, r3
 801b03a:	4158      	adcs	r0, r3
 801b03c:	4770      	bx	lr

0801b03e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801b03e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801b042:	1a9b      	subs	r3, r3, r2
 801b044:	2b00      	cmp	r3, #0
 801b046:	bfdc      	itt	le
 801b048:	6882      	ldrle	r2, [r0, #8]
 801b04a:	189b      	addle	r3, r3, r2
 801b04c:	2b01      	cmp	r3, #1
 801b04e:	bfcc      	ite	gt
 801b050:	2000      	movgt	r0, #0
 801b052:	2001      	movle	r0, #1
 801b054:	4770      	bx	lr

0801b056 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801b056:	6902      	ldr	r2, [r0, #16]
 801b058:	6840      	ldr	r0, [r0, #4]
 801b05a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801b05e:	4770      	bx	lr

0801b060 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801b060:	6803      	ldr	r3, [r0, #0]
 801b062:	691b      	ldr	r3, [r3, #16]
 801b064:	4718      	bx	r3

0801b066 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801b066:	4770      	bx	lr

0801b068 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801b068:	4770      	bx	lr
	...

0801b06c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801b06c:	2301      	movs	r3, #1
 801b06e:	b570      	push	{r4, r5, r6, lr}
 801b070:	7203      	strb	r3, [r0, #8]
 801b072:	4604      	mov	r4, r0
 801b074:	6840      	ldr	r0, [r0, #4]
 801b076:	6803      	ldr	r3, [r0, #0]
 801b078:	699b      	ldr	r3, [r3, #24]
 801b07a:	4798      	blx	r3
 801b07c:	6803      	ldr	r3, [r0, #0]
 801b07e:	4605      	mov	r5, r0
 801b080:	2b08      	cmp	r3, #8
 801b082:	d01e      	beq.n	801b0c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801b084:	d80b      	bhi.n	801b09e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b086:	2b02      	cmp	r3, #2
 801b088:	d027      	beq.n	801b0da <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801b08a:	2b04      	cmp	r3, #4
 801b08c:	d011      	beq.n	801b0b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801b08e:	2b01      	cmp	r3, #1
 801b090:	d028      	beq.n	801b0e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b092:	4b17      	ldr	r3, [pc, #92]	; (801b0f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801b094:	218b      	movs	r1, #139	; 0x8b
 801b096:	4a17      	ldr	r2, [pc, #92]	; (801b0f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801b098:	4817      	ldr	r0, [pc, #92]	; (801b0f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801b09a:	f00e fc9d 	bl	80299d8 <__assert_func>
 801b09e:	2b40      	cmp	r3, #64	; 0x40
 801b0a0:	d020      	beq.n	801b0e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b0a2:	d801      	bhi.n	801b0a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801b0a4:	2b20      	cmp	r3, #32
 801b0a6:	e7f3      	b.n	801b090 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801b0a8:	2b80      	cmp	r3, #128	; 0x80
 801b0aa:	d01b      	beq.n	801b0e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b0b0:	e7ee      	b.n	801b090 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801b0b2:	6823      	ldr	r3, [r4, #0]
 801b0b4:	7f01      	ldrb	r1, [r0, #28]
 801b0b6:	4620      	mov	r0, r4
 801b0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0ba:	4798      	blx	r3
 801b0bc:	6823      	ldr	r3, [r4, #0]
 801b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0c0:	e006      	b.n	801b0d0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	7f01      	ldrb	r1, [r0, #28]
 801b0c6:	4620      	mov	r0, r4
 801b0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b0ca:	4798      	blx	r3
 801b0cc:	6823      	ldr	r3, [r4, #0]
 801b0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0d0:	4629      	mov	r1, r5
 801b0d2:	4620      	mov	r0, r4
 801b0d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0d8:	4718      	bx	r3
 801b0da:	6823      	ldr	r3, [r4, #0]
 801b0dc:	4620      	mov	r0, r4
 801b0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0e0:	4798      	blx	r3
 801b0e2:	e7f3      	b.n	801b0cc <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801b0e4:	6823      	ldr	r3, [r4, #0]
 801b0e6:	4620      	mov	r0, r4
 801b0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0ea:	4798      	blx	r3
 801b0ec:	e7e6      	b.n	801b0bc <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801b0ee:	bf00      	nop
 801b0f0:	0802d2e5 	.word	0x0802d2e5
 801b0f4:	0802d3f4 	.word	0x0802d3f4
 801b0f8:	0802d30a 	.word	0x0802d30a

0801b0fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801b0fc:	b570      	push	{r4, r5, r6, lr}
 801b0fe:	4604      	mov	r4, r0
 801b100:	460e      	mov	r6, r1
 801b102:	6860      	ldr	r0, [r4, #4]
 801b104:	6803      	ldr	r3, [r0, #0]
 801b106:	685b      	ldr	r3, [r3, #4]
 801b108:	4798      	blx	r3
 801b10a:	2800      	cmp	r0, #0
 801b10c:	d1f9      	bne.n	801b102 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801b10e:	4d0b      	ldr	r5, [pc, #44]	; (801b13c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801b110:	6828      	ldr	r0, [r5, #0]
 801b112:	6803      	ldr	r3, [r0, #0]
 801b114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b116:	4798      	blx	r3
 801b118:	f7fc fe10 	bl	8017d3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801b11c:	6860      	ldr	r0, [r4, #4]
 801b11e:	4631      	mov	r1, r6
 801b120:	6803      	ldr	r3, [r0, #0]
 801b122:	689b      	ldr	r3, [r3, #8]
 801b124:	4798      	blx	r3
 801b126:	6823      	ldr	r3, [r4, #0]
 801b128:	4620      	mov	r0, r4
 801b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b12c:	4798      	blx	r3
 801b12e:	6828      	ldr	r0, [r5, #0]
 801b130:	6803      	ldr	r3, [r0, #0]
 801b132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b138:	4718      	bx	r3
 801b13a:	bf00      	nop
 801b13c:	2000bf18 	.word	0x2000bf18

0801b140 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801b140:	b508      	push	{r3, lr}
 801b142:	f7fc fddf 	bl	8017d04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b14a:	f7fc bde9 	b.w	8017d20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b14e <_ZN8touchgfx13DMA_Interface5startEv>:
 801b14e:	b510      	push	{r4, lr}
 801b150:	4604      	mov	r4, r0
 801b152:	6840      	ldr	r0, [r0, #4]
 801b154:	6803      	ldr	r3, [r0, #0]
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	4798      	blx	r3
 801b15a:	b948      	cbnz	r0, 801b170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b15c:	7a63      	ldrb	r3, [r4, #9]
 801b15e:	b13b      	cbz	r3, 801b170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b160:	7a23      	ldrb	r3, [r4, #8]
 801b162:	b92b      	cbnz	r3, 801b170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b164:	6823      	ldr	r3, [r4, #0]
 801b166:	4620      	mov	r0, r4
 801b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b16e:	4718      	bx	r3
 801b170:	bd10      	pop	{r4, pc}
	...

0801b174 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801b174:	b510      	push	{r4, lr}
 801b176:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801b17a:	1b12      	subs	r2, r2, r4
 801b17c:	2a00      	cmp	r2, #0
 801b17e:	bfdc      	itt	le
 801b180:	6883      	ldrle	r3, [r0, #8]
 801b182:	18d2      	addle	r2, r2, r3
 801b184:	2a01      	cmp	r2, #1
 801b186:	dd18      	ble.n	801b1ba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801b188:	6843      	ldr	r3, [r0, #4]
 801b18a:	f101 021c 	add.w	r2, r1, #28
 801b18e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801b192:	f851 4b04 	ldr.w	r4, [r1], #4
 801b196:	4291      	cmp	r1, r2
 801b198:	f843 4b04 	str.w	r4, [r3], #4
 801b19c:	d1f9      	bne.n	801b192 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801b19e:	880a      	ldrh	r2, [r1, #0]
 801b1a0:	801a      	strh	r2, [r3, #0]
 801b1a2:	788a      	ldrb	r2, [r1, #2]
 801b1a4:	709a      	strb	r2, [r3, #2]
 801b1a6:	68c3      	ldr	r3, [r0, #12]
 801b1a8:	6882      	ldr	r2, [r0, #8]
 801b1aa:	f3bf 8f5b 	dmb	ish
 801b1ae:	3301      	adds	r3, #1
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	bfd8      	it	le
 801b1b4:	1a9b      	suble	r3, r3, r2
 801b1b6:	60c3      	str	r3, [r0, #12]
 801b1b8:	bd10      	pop	{r4, pc}
 801b1ba:	4b03      	ldr	r3, [pc, #12]	; (801b1c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801b1bc:	2139      	movs	r1, #57	; 0x39
 801b1be:	4a03      	ldr	r2, [pc, #12]	; (801b1cc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801b1c0:	4803      	ldr	r0, [pc, #12]	; (801b1d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801b1c2:	f00e fc09 	bl	80299d8 <__assert_func>
 801b1c6:	bf00      	nop
 801b1c8:	0802d330 	.word	0x0802d330
 801b1cc:	0802d424 	.word	0x0802d424
 801b1d0:	0802d30a 	.word	0x0802d30a

0801b1d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801b1d4:	b510      	push	{r4, lr}
 801b1d6:	6803      	ldr	r3, [r0, #0]
 801b1d8:	4604      	mov	r4, r0
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	4798      	blx	r3
 801b1de:	b128      	cbz	r0, 801b1ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801b1e0:	4b07      	ldr	r3, [pc, #28]	; (801b200 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801b1e2:	213f      	movs	r1, #63	; 0x3f
 801b1e4:	4a07      	ldr	r2, [pc, #28]	; (801b204 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801b1e6:	4808      	ldr	r0, [pc, #32]	; (801b208 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801b1e8:	f00e fbf6 	bl	80299d8 <__assert_func>
 801b1ec:	6923      	ldr	r3, [r4, #16]
 801b1ee:	68a2      	ldr	r2, [r4, #8]
 801b1f0:	f3bf 8f5b 	dmb	ish
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	429a      	cmp	r2, r3
 801b1f8:	bfd8      	it	le
 801b1fa:	1a9b      	suble	r3, r3, r2
 801b1fc:	6123      	str	r3, [r4, #16]
 801b1fe:	bd10      	pop	{r4, pc}
 801b200:	0802d353 	.word	0x0802d353
 801b204:	0802d472 	.word	0x0802d472
 801b208:	0802d30a 	.word	0x0802d30a

0801b20c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b20c:	b570      	push	{r4, r5, r6, lr}
 801b20e:	4604      	mov	r4, r0
 801b210:	6840      	ldr	r0, [r0, #4]
 801b212:	6803      	ldr	r3, [r0, #0]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	4798      	blx	r3
 801b218:	4605      	mov	r5, r0
 801b21a:	b930      	cbnz	r0, 801b22a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b21c:	7a23      	ldrb	r3, [r4, #8]
 801b21e:	b123      	cbz	r3, 801b22a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801b220:	6860      	ldr	r0, [r4, #4]
 801b222:	6803      	ldr	r3, [r0, #0]
 801b224:	695b      	ldr	r3, [r3, #20]
 801b226:	4798      	blx	r3
 801b228:	7225      	strb	r5, [r4, #8]
 801b22a:	6860      	ldr	r0, [r4, #4]
 801b22c:	6803      	ldr	r3, [r0, #0]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4798      	blx	r3
 801b232:	b928      	cbnz	r0, 801b240 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801b234:	6823      	ldr	r3, [r4, #0]
 801b236:	4620      	mov	r0, r4
 801b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b23e:	4718      	bx	r3
 801b240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b244:	f7fc bd86 	b.w	8017d54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801b248 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b248:	b510      	push	{r4, lr}
 801b24a:	6082      	str	r2, [r0, #8]
 801b24c:	2200      	movs	r2, #0
 801b24e:	4c03      	ldr	r4, [pc, #12]	; (801b25c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b250:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b254:	e9c0 4100 	strd	r4, r1, [r0]
 801b258:	bd10      	pop	{r4, pc}
 801b25a:	bf00      	nop
 801b25c:	0802d3d8 	.word	0x0802d3d8

0801b260 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b260:	6840      	ldr	r0, [r0, #4]
 801b262:	6803      	ldr	r3, [r0, #0]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	4718      	bx	r3

0801b268 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801b268:	2001      	movs	r0, #1
 801b26a:	4770      	bx	lr

0801b26c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801b26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b270:	460d      	mov	r5, r1
 801b272:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b276:	b085      	sub	sp, #20
 801b278:	4690      	mov	r8, r2
 801b27a:	4411      	add	r1, r2
 801b27c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b280:	4699      	mov	r9, r3
 801b282:	6803      	ldr	r3, [r0, #0]
 801b284:	60c1      	str	r1, [r0, #12]
 801b286:	4604      	mov	r4, r0
 801b288:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b28a:	440a      	add	r2, r1
 801b28c:	6102      	str	r2, [r0, #16]
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801b294:	4798      	blx	r3
 801b296:	2800      	cmp	r0, #0
 801b298:	d039      	beq.n	801b30e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801b29a:	44c8      	add	r8, r9
 801b29c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b2a0:	4445      	add	r5, r8
 801b2a2:	6823      	ldr	r3, [r4, #0]
 801b2a4:	f10d 020f 	add.w	r2, sp, #15
 801b2a8:	a903      	add	r1, sp, #12
 801b2aa:	4620      	mov	r0, r4
 801b2ac:	9200      	str	r2, [sp, #0]
 801b2ae:	f10d 020d 	add.w	r2, sp, #13
 801b2b2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801b2b6:	f10d 030e 	add.w	r3, sp, #14
 801b2ba:	47c0      	blx	r8
 801b2bc:	b1f8      	cbz	r0, 801b2fe <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801b2be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801b2c2:	7a20      	ldrb	r0, [r4, #8]
 801b2c4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801b2c8:	4358      	muls	r0, r3
 801b2ca:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801b2ce:	1c43      	adds	r3, r0, #1
 801b2d0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b2d4:	f817 0b01 	ldrb.w	r0, [r7], #1
 801b2d8:	121b      	asrs	r3, r3, #8
 801b2da:	fb10 f003 	smulbb	r0, r0, r3
 801b2de:	b283      	uxth	r3, r0
 801b2e0:	1c58      	adds	r0, r3, #1
 801b2e2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b2e6:	6823      	ldr	r3, [r4, #0]
 801b2e8:	1200      	asrs	r0, r0, #8
 801b2ea:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801b2ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801b2f2:	28ff      	cmp	r0, #255	; 0xff
 801b2f4:	d10e      	bne.n	801b314 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801b2f6:	9100      	str	r1, [sp, #0]
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	47c0      	blx	r8
 801b2fe:	68e3      	ldr	r3, [r4, #12]
 801b300:	3e01      	subs	r6, #1
 801b302:	f105 0503 	add.w	r5, r5, #3
 801b306:	f103 0301 	add.w	r3, r3, #1
 801b30a:	60e3      	str	r3, [r4, #12]
 801b30c:	d1c9      	bne.n	801b2a2 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801b30e:	b005      	add	sp, #20
 801b310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b314:	fa1f fc80 	uxth.w	ip, r0
 801b318:	43c0      	mvns	r0, r0
 801b31a:	f895 e002 	ldrb.w	lr, [r5, #2]
 801b31e:	fb12 f20c 	smulbb	r2, r2, ip
 801b322:	b2c0      	uxtb	r0, r0
 801b324:	fb13 f30c 	smulbb	r3, r3, ip
 801b328:	fb0e 2200 	mla	r2, lr, r0, r2
 801b32c:	f895 e001 	ldrb.w	lr, [r5, #1]
 801b330:	fb11 f10c 	smulbb	r1, r1, ip
 801b334:	fb0e 3300 	mla	r3, lr, r0, r3
 801b338:	f895 e000 	ldrb.w	lr, [r5]
 801b33c:	b292      	uxth	r2, r2
 801b33e:	b29b      	uxth	r3, r3
 801b340:	fb0e 1000 	mla	r0, lr, r0, r1
 801b344:	1c59      	adds	r1, r3, #1
 801b346:	b280      	uxth	r0, r0
 801b348:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b34c:	1c51      	adds	r1, r2, #1
 801b34e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b352:	1c41      	adds	r1, r0, #1
 801b354:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b358:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801b35c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b360:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b364:	9000      	str	r0, [sp, #0]
 801b366:	e7c7      	b.n	801b2f8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801b368 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801b368:	f89d 0000 	ldrb.w	r0, [sp]
 801b36c:	704b      	strb	r3, [r1, #1]
 801b36e:	7008      	strb	r0, [r1, #0]
 801b370:	708a      	strb	r2, [r1, #2]
 801b372:	4770      	bx	lr

0801b374 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801b374:	4413      	add	r3, r2
 801b376:	7dc2      	ldrb	r2, [r0, #23]
 801b378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b37c:	4419      	add	r1, r3
 801b37e:	7a03      	ldrb	r3, [r0, #8]
 801b380:	435a      	muls	r2, r3
 801b382:	1c53      	adds	r3, r2, #1
 801b384:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b388:	121b      	asrs	r3, r3, #8
 801b38a:	2bff      	cmp	r3, #255	; 0xff
 801b38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b38e:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801b392:	d13e      	bne.n	801b412 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801b394:	4427      	add	r7, r4
 801b396:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b39a:	3103      	adds	r1, #3
 801b39c:	7d86      	ldrb	r6, [r0, #22]
 801b39e:	2bff      	cmp	r3, #255	; 0xff
 801b3a0:	d10a      	bne.n	801b3b8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801b3a2:	f801 6c03 	strb.w	r6, [r1, #-3]
 801b3a6:	7d43      	ldrb	r3, [r0, #21]
 801b3a8:	f801 3c02 	strb.w	r3, [r1, #-2]
 801b3ac:	7d03      	ldrb	r3, [r0, #20]
 801b3ae:	f801 3c01 	strb.w	r3, [r1, #-1]
 801b3b2:	42a7      	cmp	r7, r4
 801b3b4:	d1ef      	bne.n	801b396 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801b3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3b8:	b29a      	uxth	r2, r3
 801b3ba:	43db      	mvns	r3, r3
 801b3bc:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801b3c0:	fb16 f602 	smulbb	r6, r6, r2
 801b3c4:	b2db      	uxtb	r3, r3
 801b3c6:	fb05 6503 	mla	r5, r5, r3, r6
 801b3ca:	b2ad      	uxth	r5, r5
 801b3cc:	1c6e      	adds	r6, r5, #1
 801b3ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b3d2:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801b3d6:	fb16 f603 	smulbb	r6, r6, r3
 801b3da:	122d      	asrs	r5, r5, #8
 801b3dc:	f801 5c03 	strb.w	r5, [r1, #-3]
 801b3e0:	7d45      	ldrb	r5, [r0, #21]
 801b3e2:	fb05 6502 	mla	r5, r5, r2, r6
 801b3e6:	b2ad      	uxth	r5, r5
 801b3e8:	1c6e      	adds	r6, r5, #1
 801b3ea:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b3ee:	122d      	asrs	r5, r5, #8
 801b3f0:	f801 5c02 	strb.w	r5, [r1, #-2]
 801b3f4:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801b3f8:	7d06      	ldrb	r6, [r0, #20]
 801b3fa:	fb15 f303 	smulbb	r3, r5, r3
 801b3fe:	fb06 3202 	mla	r2, r6, r2, r3
 801b402:	b292      	uxth	r2, r2
 801b404:	1c53      	adds	r3, r2, #1
 801b406:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b40a:	1212      	asrs	r2, r2, #8
 801b40c:	f801 2c01 	strb.w	r2, [r1, #-1]
 801b410:	e7cf      	b.n	801b3b2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801b412:	b2de      	uxtb	r6, r3
 801b414:	2b00      	cmp	r3, #0
 801b416:	d0ce      	beq.n	801b3b6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801b418:	3103      	adds	r1, #3
 801b41a:	4427      	add	r7, r4
 801b41c:	f814 2b01 	ldrb.w	r2, [r4], #1
 801b420:	3103      	adds	r1, #3
 801b422:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801b426:	fb02 f306 	mul.w	r3, r2, r6
 801b42a:	42bc      	cmp	r4, r7
 801b42c:	f103 0201 	add.w	r2, r3, #1
 801b430:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b434:	ea4f 2222 	mov.w	r2, r2, asr #8
 801b438:	b295      	uxth	r5, r2
 801b43a:	ea6f 0202 	mvn.w	r2, r2
 801b43e:	b2d3      	uxtb	r3, r2
 801b440:	7d82      	ldrb	r2, [r0, #22]
 801b442:	fb1c fc03 	smulbb	ip, ip, r3
 801b446:	fb02 c205 	mla	r2, r2, r5, ip
 801b44a:	b292      	uxth	r2, r2
 801b44c:	f102 0c01 	add.w	ip, r2, #1
 801b450:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b454:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801b458:	fb1c fc03 	smulbb	ip, ip, r3
 801b45c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801b460:	f801 2c06 	strb.w	r2, [r1, #-6]
 801b464:	7d42      	ldrb	r2, [r0, #21]
 801b466:	fb02 c205 	mla	r2, r2, r5, ip
 801b46a:	b292      	uxth	r2, r2
 801b46c:	f102 0c01 	add.w	ip, r2, #1
 801b470:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b474:	ea4f 2222 	mov.w	r2, r2, asr #8
 801b478:	f801 2c05 	strb.w	r2, [r1, #-5]
 801b47c:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801b480:	f890 c014 	ldrb.w	ip, [r0, #20]
 801b484:	fb12 f303 	smulbb	r3, r2, r3
 801b488:	fb0c 3305 	mla	r3, ip, r5, r3
 801b48c:	b29b      	uxth	r3, r3
 801b48e:	f103 0201 	add.w	r2, r3, #1
 801b492:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b496:	ea4f 2323 	mov.w	r3, r3, asr #8
 801b49a:	f801 3c04 	strb.w	r3, [r1, #-4]
 801b49e:	d1bd      	bne.n	801b41c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801b4a0:	e789      	b.n	801b3b6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801b4a2 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801b4a2:	b510      	push	{r4, lr}
 801b4a4:	7d04      	ldrb	r4, [r0, #20]
 801b4a6:	700c      	strb	r4, [r1, #0]
 801b4a8:	7d41      	ldrb	r1, [r0, #21]
 801b4aa:	7011      	strb	r1, [r2, #0]
 801b4ac:	7d82      	ldrb	r2, [r0, #22]
 801b4ae:	701a      	strb	r2, [r3, #0]
 801b4b0:	9b02      	ldr	r3, [sp, #8]
 801b4b2:	7dc2      	ldrb	r2, [r0, #23]
 801b4b4:	2001      	movs	r0, #1
 801b4b6:	701a      	strb	r2, [r3, #0]
 801b4b8:	bd10      	pop	{r4, pc}

0801b4ba <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801b4ba:	b570      	push	{r4, r5, r6, lr}
 801b4bc:	4616      	mov	r6, r2
 801b4be:	4604      	mov	r4, r0
 801b4c0:	460d      	mov	r5, r1
 801b4c2:	f7f5 fb85 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801b4c6:	6803      	ldr	r3, [r0, #0]
 801b4c8:	4629      	mov	r1, r5
 801b4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4cc:	4798      	blx	r3
 801b4ce:	7520      	strb	r0, [r4, #20]
 801b4d0:	f7f5 fb7e 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801b4d4:	6803      	ldr	r3, [r0, #0]
 801b4d6:	4629      	mov	r1, r5
 801b4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4da:	4798      	blx	r3
 801b4dc:	7560      	strb	r0, [r4, #21]
 801b4de:	f7f5 fb77 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801b4e2:	6803      	ldr	r3, [r0, #0]
 801b4e4:	4629      	mov	r1, r5
 801b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4e8:	4798      	blx	r3
 801b4ea:	75e6      	strb	r6, [r4, #23]
 801b4ec:	75a0      	strb	r0, [r4, #22]
 801b4ee:	bd70      	pop	{r4, r5, r6, pc}

0801b4f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4f2:	460e      	mov	r6, r1
 801b4f4:	4617      	mov	r7, r2
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	f000 f832 	bl	801b560 <_ZN8touchgfx15AbstractPainterC1Ev>
 801b4fc:	4b12      	ldr	r3, [pc, #72]	; (801b548 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801b4fe:	6023      	str	r3, [r4, #0]
 801b500:	f7f5 fb66 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801b504:	6803      	ldr	r3, [r0, #0]
 801b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b508:	4798      	blx	r3
 801b50a:	1e43      	subs	r3, r0, #1
 801b50c:	425d      	negs	r5, r3
 801b50e:	415d      	adcs	r5, r3
 801b510:	4b0e      	ldr	r3, [pc, #56]	; (801b54c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b516:	b130      	cbz	r0, 801b526 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801b518:	6803      	ldr	r3, [r0, #0]
 801b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b51c:	4798      	blx	r3
 801b51e:	2801      	cmp	r0, #1
 801b520:	bf08      	it	eq
 801b522:	f045 0501 	orreq.w	r5, r5, #1
 801b526:	b92d      	cbnz	r5, 801b534 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801b528:	4b09      	ldr	r3, [pc, #36]	; (801b550 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801b52a:	2129      	movs	r1, #41	; 0x29
 801b52c:	4a09      	ldr	r2, [pc, #36]	; (801b554 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801b52e:	480a      	ldr	r0, [pc, #40]	; (801b558 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801b530:	f00e fa52 	bl	80299d8 <__assert_func>
 801b534:	4b09      	ldr	r3, [pc, #36]	; (801b55c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801b536:	4620      	mov	r0, r4
 801b538:	463a      	mov	r2, r7
 801b53a:	4631      	mov	r1, r6
 801b53c:	6023      	str	r3, [r4, #0]
 801b53e:	f7ff ffbc 	bl	801b4ba <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801b542:	4620      	mov	r0, r4
 801b544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b546:	bf00      	nop
 801b548:	0802d4ac 	.word	0x0802d4ac
 801b54c:	2000bf18 	.word	0x2000bf18
 801b550:	0802d4c4 	.word	0x0802d4c4
 801b554:	0802d588 	.word	0x0802d588
 801b558:	0802d522 	.word	0x0802d522
 801b55c:	0802d570 	.word	0x0802d570

0801b560 <_ZN8touchgfx15AbstractPainterC1Ev>:
 801b560:	4a03      	ldr	r2, [pc, #12]	; (801b570 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801b562:	6002      	str	r2, [r0, #0]
 801b564:	2200      	movs	r2, #0
 801b566:	6042      	str	r2, [r0, #4]
 801b568:	22ff      	movs	r2, #255	; 0xff
 801b56a:	7202      	strb	r2, [r0, #8]
 801b56c:	4770      	bx	lr
 801b56e:	bf00      	nop
 801b570:	0802d5cc 	.word	0x0802d5cc

0801b574 <_ZN8touchgfx15AbstractPainterD1Ev>:
 801b574:	4770      	bx	lr

0801b576 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801b576:	8081      	strh	r1, [r0, #4]
 801b578:	80c2      	strh	r2, [r0, #6]
 801b57a:	4770      	bx	lr

0801b57c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801b57c:	7201      	strb	r1, [r0, #8]
 801b57e:	4770      	bx	lr

0801b580 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801b580:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801b584:	4770      	bx	lr

0801b586 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801b586:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801b58a:	4770      	bx	lr

0801b58c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801b58c:	6281      	str	r1, [r0, #40]	; 0x28
 801b58e:	4770      	bx	lr

0801b590 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801b590:	b513      	push	{r0, r1, r4, lr}
 801b592:	6803      	ldr	r3, [r0, #0]
 801b594:	4604      	mov	r4, r0
 801b596:	4601      	mov	r1, r0
 801b598:	4668      	mov	r0, sp
 801b59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b59c:	4798      	blx	r3
 801b59e:	6823      	ldr	r3, [r4, #0]
 801b5a0:	4669      	mov	r1, sp
 801b5a2:	4620      	mov	r0, r4
 801b5a4:	691b      	ldr	r3, [r3, #16]
 801b5a6:	4798      	blx	r3
 801b5a8:	b002      	add	sp, #8
 801b5aa:	bd10      	pop	{r4, pc}

0801b5ac <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801b5ac:	b510      	push	{r4, lr}
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801b5b4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801b5b8:	8002      	strh	r2, [r0, #0]
 801b5ba:	8042      	strh	r2, [r0, #2]
 801b5bc:	8084      	strh	r4, [r0, #4]
 801b5be:	80c1      	strh	r1, [r0, #6]
 801b5c0:	bd10      	pop	{r4, pc}

0801b5c2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	8002      	strh	r2, [r0, #0]
 801b5c6:	8042      	strh	r2, [r0, #2]
 801b5c8:	8082      	strh	r2, [r0, #4]
 801b5ca:	80c2      	strh	r2, [r0, #6]
 801b5cc:	4770      	bx	lr
	...

0801b5d0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801b5d0:	b508      	push	{r3, lr}
 801b5d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b5d4:	b928      	cbnz	r0, 801b5e2 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801b5d6:	4b03      	ldr	r3, [pc, #12]	; (801b5e4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801b5d8:	2127      	movs	r1, #39	; 0x27
 801b5da:	4a03      	ldr	r2, [pc, #12]	; (801b5e8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801b5dc:	4803      	ldr	r0, [pc, #12]	; (801b5ec <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801b5de:	f00e f9fb 	bl	80299d8 <__assert_func>
 801b5e2:	bd08      	pop	{r3, pc}
 801b5e4:	0802d5d8 	.word	0x0802d5d8
 801b5e8:	0802d6bc 	.word	0x0802d6bc
 801b5ec:	0802d5ff 	.word	0x0802d5ff

0801b5f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5f4:	b089      	sub	sp, #36	; 0x24
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	6808      	ldr	r0, [r1, #0]
 801b5fa:	f04f 0a00 	mov.w	sl, #0
 801b5fe:	6849      	ldr	r1, [r1, #4]
 801b600:	ab02      	add	r3, sp, #8
 801b602:	f04f 0b01 	mov.w	fp, #1
 801b606:	c303      	stmia	r3!, {r0, r1}
 801b608:	4b3f      	ldr	r3, [pc, #252]	; (801b708 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801b60a:	4621      	mov	r1, r4
 801b60c:	a804      	add	r0, sp, #16
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	2b01      	cmp	r3, #1
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b616:	bf1f      	itttt	ne
 801b618:	f10d 0906 	addne.w	r9, sp, #6
 801b61c:	ae03      	addne	r6, sp, #12
 801b61e:	f10d 050e 	addne.w	r5, sp, #14
 801b622:	f10d 080a 	addne.w	r8, sp, #10
 801b626:	bf01      	itttt	eq
 801b628:	f10d 090e 	addeq.w	r9, sp, #14
 801b62c:	f10d 0606 	addeq.w	r6, sp, #6
 801b630:	ad03      	addeq	r5, sp, #12
 801b632:	f10d 0808 	addeq.w	r8, sp, #8
 801b636:	4798      	blx	r3
 801b638:	f9b5 3000 	ldrsh.w	r3, [r5]
 801b63c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801b640:	2b00      	cmp	r3, #0
 801b642:	d056      	beq.n	801b6f2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801b644:	4293      	cmp	r3, r2
 801b646:	bfa8      	it	ge
 801b648:	4613      	movge	r3, r2
 801b64a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b64e:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801b652:	2f00      	cmp	r7, #0
 801b654:	dd34      	ble.n	801b6c0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801b656:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801b65a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801b65e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801b662:	4484      	add	ip, r0
 801b664:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b668:	f9b6 e000 	ldrsh.w	lr, [r6]
 801b66c:	fa0f fc8c 	sxth.w	ip, ip
 801b670:	f9b9 1000 	ldrsh.w	r1, [r9]
 801b674:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b678:	4562      	cmp	r2, ip
 801b67a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b67e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b682:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b686:	da29      	bge.n	801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b688:	4472      	add	r2, lr
 801b68a:	b212      	sxth	r2, r2
 801b68c:	4290      	cmp	r0, r2
 801b68e:	da25      	bge.n	801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b690:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b694:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b698:	4402      	add	r2, r0
 801b69a:	b212      	sxth	r2, r2
 801b69c:	4293      	cmp	r3, r2
 801b69e:	da1d      	bge.n	801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b6a0:	440b      	add	r3, r1
 801b6a2:	b21b      	sxth	r3, r3
 801b6a4:	4298      	cmp	r0, r3
 801b6a6:	da19      	bge.n	801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b6a8:	6823      	ldr	r3, [r4, #0]
 801b6aa:	a906      	add	r1, sp, #24
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6b0:	4798      	blx	r3
 801b6b2:	b998      	cbnz	r0, 801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b6b4:	107f      	asrs	r7, r7, #1
 801b6b6:	f04f 0a01 	mov.w	sl, #1
 801b6ba:	f8ad 7006 	strh.w	r7, [sp, #6]
 801b6be:	e7c6      	b.n	801b64e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801b6c0:	d10c      	bne.n	801b6dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801b6c2:	f8ad b006 	strh.w	fp, [sp, #6]
 801b6c6:	f8b8 2000 	ldrh.w	r2, [r8]
 801b6ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801b6ce:	440a      	add	r2, r1
 801b6d0:	f8a8 2000 	strh.w	r2, [r8]
 801b6d4:	882b      	ldrh	r3, [r5, #0]
 801b6d6:	1a5b      	subs	r3, r3, r1
 801b6d8:	802b      	strh	r3, [r5, #0]
 801b6da:	e7ad      	b.n	801b638 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801b6dc:	f1ba 0f00 	cmp.w	sl, #0
 801b6e0:	d0f1      	beq.n	801b6c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801b6e2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801b6e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	bf08      	it	eq
 801b6ee:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801b6f0:	e7e9      	b.n	801b6c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801b6f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b6f6:	429a      	cmp	r2, r3
 801b6f8:	bf04      	itt	eq
 801b6fa:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801b6fe:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801b700:	b009      	add	sp, #36	; 0x24
 801b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b706:	bf00      	nop
 801b708:	2000bf0e 	.word	0x2000bf0e

0801b70c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801b70c:	2200      	movs	r2, #0
 801b70e:	2101      	movs	r1, #1
 801b710:	8082      	strh	r2, [r0, #4]
 801b712:	80c2      	strh	r2, [r0, #6]
 801b714:	8102      	strh	r2, [r0, #8]
 801b716:	8142      	strh	r2, [r0, #10]
 801b718:	8182      	strh	r2, [r0, #12]
 801b71a:	81c2      	strh	r2, [r0, #14]
 801b71c:	8202      	strh	r2, [r0, #16]
 801b71e:	8242      	strh	r2, [r0, #18]
 801b720:	61c2      	str	r2, [r0, #28]
 801b722:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801b726:	6282      	str	r2, [r0, #40]	; 0x28
 801b728:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801b72c:	4905      	ldr	r1, [pc, #20]	; (801b744 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801b72e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b732:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b736:	6001      	str	r1, [r0, #0]
 801b738:	8582      	strh	r2, [r0, #44]	; 0x2c
 801b73a:	22ff      	movs	r2, #255	; 0xff
 801b73c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801b740:	4770      	bx	lr
 801b742:	bf00      	nop
 801b744:	0802d644 	.word	0x0802d644

0801b748 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801b748:	4770      	bx	lr

0801b74a <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801b74a:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801b74e:	4602      	mov	r2, r0
 801b750:	cb03      	ldmia	r3!, {r0, r1}
 801b752:	6010      	str	r0, [r2, #0]
 801b754:	4610      	mov	r0, r2
 801b756:	6051      	str	r1, [r2, #4]
 801b758:	4770      	bx	lr

0801b75a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b75e:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801b762:	b395      	cbz	r5, 801b7ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801b764:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801b768:	f1bc 0f00 	cmp.w	ip, #0
 801b76c:	d02d      	beq.n	801b7ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801b76e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b772:	f9b1 e000 	ldrsh.w	lr, [r1]
 801b776:	b354      	cbz	r4, 801b7ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801b778:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801b77c:	b33f      	cbz	r7, 801b7ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801b77e:	f9b0 8000 	ldrsh.w	r8, [r0]
 801b782:	4475      	add	r5, lr
 801b784:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b788:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b78c:	45f0      	cmp	r8, lr
 801b78e:	4646      	mov	r6, r8
 801b790:	4444      	add	r4, r8
 801b792:	bfa8      	it	ge
 801b794:	4676      	movge	r6, lr
 801b796:	4293      	cmp	r3, r2
 801b798:	4619      	mov	r1, r3
 801b79a:	443b      	add	r3, r7
 801b79c:	bfa8      	it	ge
 801b79e:	4611      	movge	r1, r2
 801b7a0:	4462      	add	r2, ip
 801b7a2:	b22d      	sxth	r5, r5
 801b7a4:	8006      	strh	r6, [r0, #0]
 801b7a6:	b224      	sxth	r4, r4
 801b7a8:	8041      	strh	r1, [r0, #2]
 801b7aa:	b212      	sxth	r2, r2
 801b7ac:	b21b      	sxth	r3, r3
 801b7ae:	42a5      	cmp	r5, r4
 801b7b0:	bfac      	ite	ge
 801b7b2:	ebc6 0405 	rsbge	r4, r6, r5
 801b7b6:	ebc6 0404 	rsblt	r4, r6, r4
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	bfac      	ite	ge
 801b7be:	ebc1 0302 	rsbge	r3, r1, r2
 801b7c2:	ebc1 0303 	rsblt	r3, r1, r3
 801b7c6:	8084      	strh	r4, [r0, #4]
 801b7c8:	80c3      	strh	r3, [r0, #6]
 801b7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7ce:	f8a0 e000 	strh.w	lr, [r0]
 801b7d2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b7d6:	8043      	strh	r3, [r0, #2]
 801b7d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b7dc:	8083      	strh	r3, [r0, #4]
 801b7de:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b7e2:	e7f1      	b.n	801b7c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801b7e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801b7e4:	b507      	push	{r0, r1, r2, lr}
 801b7e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801b7ea:	ab01      	add	r3, sp, #4
 801b7ec:	6809      	ldr	r1, [r1, #0]
 801b7ee:	6800      	ldr	r0, [r0, #0]
 801b7f0:	f002 fe33 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801b7f4:	b003      	add	sp, #12
 801b7f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801b7fc <_ZN8touchgfx7CWRUtil4sineEi>:
 801b7fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801b800:	fb90 f3f2 	sdiv	r3, r0, r2
 801b804:	fb03 0312 	mls	r3, r3, r2, r0
 801b808:	4413      	add	r3, r2
 801b80a:	fb93 f0f2 	sdiv	r0, r3, r2
 801b80e:	fb02 3010 	mls	r0, r2, r0, r3
 801b812:	4b0a      	ldr	r3, [pc, #40]	; (801b83c <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801b814:	285a      	cmp	r0, #90	; 0x5a
 801b816:	dc02      	bgt.n	801b81e <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801b818:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b81c:	4770      	bx	lr
 801b81e:	28b4      	cmp	r0, #180	; 0xb4
 801b820:	dc02      	bgt.n	801b828 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801b822:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801b826:	e7f7      	b.n	801b818 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801b828:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801b82c:	bfd4      	ite	le
 801b82e:	38b4      	suble	r0, #180	; 0xb4
 801b830:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801b834:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b838:	4240      	negs	r0, r0
 801b83a:	4770      	bx	lr
 801b83c:	0802d766 	.word	0x0802d766

0801b840 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801b840:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801b844:	f04f 0300 	mov.w	r3, #0
 801b848:	bf2c      	ite	cs
 801b84a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801b84e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801b852:	1899      	adds	r1, r3, r2
 801b854:	4288      	cmp	r0, r1
 801b856:	bf24      	itt	cs
 801b858:	1853      	addcs	r3, r2, r1
 801b85a:	1a40      	subcs	r0, r0, r1
 801b85c:	0892      	lsrs	r2, r2, #2
 801b85e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801b862:	d1f6      	bne.n	801b852 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801b864:	4618      	mov	r0, r3
 801b866:	4770      	bx	lr

0801b868 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801b868:	2800      	cmp	r0, #0
 801b86a:	b508      	push	{r3, lr}
 801b86c:	da05      	bge.n	801b87a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801b86e:	4240      	negs	r0, r0
 801b870:	f7ff fffa 	bl	801b868 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801b874:	4240      	negs	r0, r0
 801b876:	b240      	sxtb	r0, r0
 801b878:	bd08      	pop	{r3, pc}
 801b87a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801b87e:	dc11      	bgt.n	801b8a4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801b880:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801b884:	dd09      	ble.n	801b89a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801b886:	4340      	muls	r0, r0
 801b888:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801b88c:	f7ff ffd8 	bl	801b840 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801b890:	f7ff ffea 	bl	801b868 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801b894:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801b898:	e7ed      	b.n	801b876 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801b89a:	3003      	adds	r0, #3
 801b89c:	4b02      	ldr	r3, [pc, #8]	; (801b8a8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801b89e:	10c0      	asrs	r0, r0, #3
 801b8a0:	5618      	ldrsb	r0, [r3, r0]
 801b8a2:	e7e9      	b.n	801b878 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801b8a4:	2000      	movs	r0, #0
 801b8a6:	e7e7      	b.n	801b878 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801b8a8:	0802d70a 	.word	0x0802d70a

0801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801b8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8ae:	460c      	mov	r4, r1
 801b8b0:	1e01      	subs	r1, r0, #0
 801b8b2:	4615      	mov	r5, r2
 801b8b4:	db01      	blt.n	801b8ba <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801b8b6:	2c00      	cmp	r4, #0
 801b8b8:	da06      	bge.n	801b8c8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801b8ba:	4b11      	ldr	r3, [pc, #68]	; (801b900 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801b8bc:	f240 3197 	movw	r1, #919	; 0x397
 801b8c0:	4a10      	ldr	r2, [pc, #64]	; (801b904 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801b8c2:	4811      	ldr	r0, [pc, #68]	; (801b908 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801b8c4:	f00e f888 	bl	80299d8 <__assert_func>
 801b8c8:	428c      	cmp	r4, r1
 801b8ca:	dd06      	ble.n	801b8da <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f7ff ffed 	bl	801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b8d2:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801b8d6:	b003      	add	sp, #12
 801b8d8:	bd30      	pop	{r4, r5, pc}
 801b8da:	4349      	muls	r1, r1
 801b8dc:	fb04 1004 	mla	r0, r4, r4, r1
 801b8e0:	f7ff ffae 	bl	801b840 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801b8e4:	6028      	str	r0, [r5, #0]
 801b8e6:	2800      	cmp	r0, #0
 801b8e8:	d0f5      	beq.n	801b8d6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801b8ea:	4602      	mov	r2, r0
 801b8ec:	ab01      	add	r3, sp, #4
 801b8ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	f002 fdb1 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801b8f8:	f7ff ffb6 	bl	801b868 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801b8fc:	e7eb      	b.n	801b8d6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801b8fe:	bf00      	nop
 801b900:	0802d81c 	.word	0x0802d81c
 801b904:	0802d8e4 	.word	0x0802d8e4
 801b908:	0802d82d 	.word	0x0802d82d

0801b90c <_ZN8touchgfx4LineC1Ev>:
 801b90c:	b510      	push	{r4, lr}
 801b90e:	4604      	mov	r4, r0
 801b910:	f7ff fefc 	bl	801b70c <_ZN8touchgfx12CanvasWidgetC1Ev>
 801b914:	4b0c      	ldr	r3, [pc, #48]	; (801b948 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801b916:	2220      	movs	r2, #32
 801b918:	4620      	mov	r0, r4
 801b91a:	6023      	str	r3, [r4, #0]
 801b91c:	2300      	movs	r3, #0
 801b91e:	6422      	str	r2, [r4, #64]	; 0x40
 801b920:	2212      	movs	r2, #18
 801b922:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801b926:	6722      	str	r2, [r4, #112]	; 0x70
 801b928:	60a3      	str	r3, [r4, #8]
 801b92a:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801b92e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801b932:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b936:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801b93a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801b93e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801b942:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801b946:	bd10      	pop	{r4, pc}
 801b948:	0802d86c 	.word	0x0802d86c

0801b94c <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801b952:	b085      	sub	sp, #20
 801b954:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b956:	4604      	mov	r4, r0
 801b958:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b95a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801b95c:	1af6      	subs	r6, r6, r3
 801b95e:	eba5 0502 	sub.w	r5, r5, r2
 801b962:	f040 809b 	bne.w	801ba9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801b966:	b955      	cbnz	r5, 801b97e <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801b968:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801b96c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801b970:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801b974:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801b978:	b005      	add	sp, #20
 801b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b97e:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801b982:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801b986:	f04f 0802 	mov.w	r8, #2
 801b98a:	463a      	mov	r2, r7
 801b98c:	4629      	mov	r1, r5
 801b98e:	ab03      	add	r3, sp, #12
 801b990:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801b992:	f002 fd62 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801b996:	ab03      	add	r3, sp, #12
 801b998:	463a      	mov	r2, r7
 801b99a:	4631      	mov	r1, r6
 801b99c:	fb90 f5f8 	sdiv	r5, r0, r8
 801b9a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801b9a2:	f002 fd5a 	bl	801e45a <_ZN8touchgfx6muldivElllRl>
 801b9a6:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801b9aa:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801b9ae:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801b9b2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801b9b4:	fb90 f0f8 	sdiv	r0, r0, r8
 801b9b8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801b9bc:	eba8 0305 	sub.w	r3, r8, r5
 801b9c0:	f1ba 0f00 	cmp.w	sl, #0
 801b9c4:	f040 80c3 	bne.w	801bb4e <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801b9c8:	64a3      	str	r3, [r4, #72]	; 0x48
 801b9ca:	19c3      	adds	r3, r0, r7
 801b9cc:	65a3      	str	r3, [r4, #88]	; 0x58
 801b9ce:	ebae 0305 	sub.w	r3, lr, r5
 801b9d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 801b9d4:	eb00 030c 	add.w	r3, r0, ip
 801b9d8:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b9da:	eb05 030e 	add.w	r3, r5, lr
 801b9de:	6523      	str	r3, [r4, #80]	; 0x50
 801b9e0:	ebac 0300 	sub.w	r3, ip, r0
 801b9e4:	6623      	str	r3, [r4, #96]	; 0x60
 801b9e6:	eb05 0308 	add.w	r3, r5, r8
 801b9ea:	6563      	str	r3, [r4, #84]	; 0x54
 801b9ec:	1a3b      	subs	r3, r7, r0
 801b9ee:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801b9f0:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801b9f4:	6663      	str	r3, [r4, #100]	; 0x64
 801b9f6:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801b9fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b9fc:	4632      	mov	r2, r6
 801b9fe:	9301      	str	r3, [sp, #4]
 801ba00:	9100      	str	r1, [sp, #0]
 801ba02:	f859 bb04 	ldr.w	fp, [r9], #4
 801ba06:	9b00      	ldr	r3, [sp, #0]
 801ba08:	455e      	cmp	r6, fp
 801ba0a:	bfa8      	it	ge
 801ba0c:	465e      	movge	r6, fp
 801ba0e:	455a      	cmp	r2, fp
 801ba10:	bfb8      	it	lt
 801ba12:	465a      	movlt	r2, fp
 801ba14:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801ba18:	4559      	cmp	r1, fp
 801ba1a:	bfa8      	it	ge
 801ba1c:	4659      	movge	r1, fp
 801ba1e:	455b      	cmp	r3, fp
 801ba20:	bfb8      	it	lt
 801ba22:	465b      	movlt	r3, fp
 801ba24:	9300      	str	r3, [sp, #0]
 801ba26:	9b01      	ldr	r3, [sp, #4]
 801ba28:	454b      	cmp	r3, r9
 801ba2a:	d1ea      	bne.n	801ba02 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801ba2c:	f04f 0b20 	mov.w	fp, #32
 801ba30:	b209      	sxth	r1, r1
 801ba32:	b212      	sxth	r2, r2
 801ba34:	f1ba 0f01 	cmp.w	sl, #1
 801ba38:	b236      	sxth	r6, r6
 801ba3a:	fb91 f9fb 	sdiv	r9, r1, fp
 801ba3e:	f9bd 1000 	ldrsh.w	r1, [sp]
 801ba42:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801ba46:	fb92 f2fb 	sdiv	r2, r2, fp
 801ba4a:	fb91 f1fb 	sdiv	r1, r1, fp
 801ba4e:	fb96 f6fb 	sdiv	r6, r6, fp
 801ba52:	f102 0201 	add.w	r2, r2, #1
 801ba56:	f101 0101 	add.w	r1, r1, #1
 801ba5a:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801ba5e:	eba1 0109 	sub.w	r1, r1, r9
 801ba62:	eba2 0606 	sub.w	r6, r2, r6
 801ba66:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801ba6a:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801ba6e:	d183      	bne.n	801b978 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801ba70:	eba8 0305 	sub.w	r3, r8, r5
 801ba74:	64a3      	str	r3, [r4, #72]	; 0x48
 801ba76:	19c3      	adds	r3, r0, r7
 801ba78:	65a3      	str	r3, [r4, #88]	; 0x58
 801ba7a:	ebae 0305 	sub.w	r3, lr, r5
 801ba7e:	64e3      	str	r3, [r4, #76]	; 0x4c
 801ba80:	eb00 030c 	add.w	r3, r0, ip
 801ba84:	65e3      	str	r3, [r4, #92]	; 0x5c
 801ba86:	eb05 030e 	add.w	r3, r5, lr
 801ba8a:	4445      	add	r5, r8
 801ba8c:	6523      	str	r3, [r4, #80]	; 0x50
 801ba8e:	ebac 0300 	sub.w	r3, ip, r0
 801ba92:	1a38      	subs	r0, r7, r0
 801ba94:	6565      	str	r5, [r4, #84]	; 0x54
 801ba96:	6623      	str	r3, [r4, #96]	; 0x60
 801ba98:	6660      	str	r0, [r4, #100]	; 0x64
 801ba9a:	e76d      	b.n	801b978 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801ba9c:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801baa0:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801baa4:	2d00      	cmp	r5, #0
 801baa6:	f43f af6e 	beq.w	801b986 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801baaa:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801baae:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801bab2:	fb93 f2f7 	sdiv	r2, r3, r7
 801bab6:	fb07 3312 	mls	r3, r7, r2, r3
 801baba:	b34b      	cbz	r3, 801bb10 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801babc:	fb97 f2f3 	sdiv	r2, r7, r3
 801bac0:	fb03 7712 	mls	r7, r3, r2, r7
 801bac4:	2f00      	cmp	r7, #0
 801bac6:	d1f4      	bne.n	801bab2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801bac8:	2b01      	cmp	r3, #1
 801baca:	f24b 5204 	movw	r2, #46340	; 0xb504
 801bace:	bf18      	it	ne
 801bad0:	fb96 f6f3 	sdivne	r6, r6, r3
 801bad4:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801bad8:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801badc:	bf18      	it	ne
 801bade:	fb95 f5f3 	sdivne	r5, r5, r3
 801bae2:	4291      	cmp	r1, r2
 801bae4:	dd16      	ble.n	801bb14 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801bae6:	2d00      	cmp	r5, #0
 801bae8:	da4d      	bge.n	801bb86 <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801baea:	4b29      	ldr	r3, [pc, #164]	; (801bb90 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801baec:	429d      	cmp	r5, r3
 801baee:	da27      	bge.n	801bb40 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801baf0:	426a      	negs	r2, r5
 801baf2:	f24b 5304 	movw	r3, #46340	; 0xb504
 801baf6:	fb91 f1f3 	sdiv	r1, r1, r3
 801bafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801bafe:	4299      	cmp	r1, r3
 801bb00:	bfcc      	ite	gt
 801bb02:	1c4b      	addgt	r3, r1, #1
 801bb04:	3301      	addle	r3, #1
 801bb06:	fb96 f6f3 	sdiv	r6, r6, r3
 801bb0a:	fb95 f5f3 	sdiv	r5, r5, r3
 801bb0e:	e00f      	b.n	801bb30 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801bb10:	463b      	mov	r3, r7
 801bb12:	e7d9      	b.n	801bac8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801bb14:	2d00      	cmp	r5, #0
 801bb16:	fb92 f2f1 	sdiv	r2, r2, r1
 801bb1a:	da13      	bge.n	801bb44 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801bb1c:	4269      	negs	r1, r5
 801bb1e:	f24b 5304 	movw	r3, #46340	; 0xb504
 801bb22:	fb93 f3f1 	sdiv	r3, r3, r1
 801bb26:	429a      	cmp	r2, r3
 801bb28:	bfa8      	it	ge
 801bb2a:	461a      	movge	r2, r3
 801bb2c:	4356      	muls	r6, r2
 801bb2e:	4355      	muls	r5, r2
 801bb30:	fb05 f005 	mul.w	r0, r5, r5
 801bb34:	fb06 0006 	mla	r0, r6, r6, r0
 801bb38:	f7ff fe82 	bl	801b840 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801bb3c:	4607      	mov	r7, r0
 801bb3e:	e722      	b.n	801b986 <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801bb40:	2200      	movs	r2, #0
 801bb42:	e7eb      	b.n	801bb1c <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801bb44:	4629      	mov	r1, r5
 801bb46:	e7ea      	b.n	801bb1e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801bb48:	4629      	mov	r1, r5
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	e7e7      	b.n	801bb1e <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801bb4e:	1a1b      	subs	r3, r3, r0
 801bb50:	64a3      	str	r3, [r4, #72]	; 0x48
 801bb52:	19c3      	adds	r3, r0, r7
 801bb54:	1b5b      	subs	r3, r3, r5
 801bb56:	65a3      	str	r3, [r4, #88]	; 0x58
 801bb58:	ebae 0305 	sub.w	r3, lr, r5
 801bb5c:	4403      	add	r3, r0
 801bb5e:	64e3      	str	r3, [r4, #76]	; 0x4c
 801bb60:	eb00 030c 	add.w	r3, r0, ip
 801bb64:	442b      	add	r3, r5
 801bb66:	65e3      	str	r3, [r4, #92]	; 0x5c
 801bb68:	eb05 030e 	add.w	r3, r5, lr
 801bb6c:	4403      	add	r3, r0
 801bb6e:	6523      	str	r3, [r4, #80]	; 0x50
 801bb70:	ebac 0300 	sub.w	r3, ip, r0
 801bb74:	442b      	add	r3, r5
 801bb76:	6623      	str	r3, [r4, #96]	; 0x60
 801bb78:	eb05 0308 	add.w	r3, r5, r8
 801bb7c:	1a1b      	subs	r3, r3, r0
 801bb7e:	6563      	str	r3, [r4, #84]	; 0x54
 801bb80:	1a3b      	subs	r3, r7, r0
 801bb82:	1b5b      	subs	r3, r3, r5
 801bb84:	e733      	b.n	801b9ee <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801bb86:	4295      	cmp	r5, r2
 801bb88:	ddde      	ble.n	801bb48 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801bb8a:	462a      	mov	r2, r5
 801bb8c:	e7b1      	b.n	801baf2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801bb8e:	bf00      	nop
 801bb90:	ffff4afc 	.word	0xffff4afc

0801bb94 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801bb94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801bb96:	428b      	cmp	r3, r1
 801bb98:	d102      	bne.n	801bba0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801bb9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801bb9c:	4293      	cmp	r3, r2
 801bb9e:	d003      	beq.n	801bba8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801bba0:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801bba4:	f7ff bed2 	b.w	801b94c <_ZN8touchgfx4Line17updateCachedShapeEv>
 801bba8:	4770      	bx	lr

0801bbaa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801bbaa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801bbac:	428b      	cmp	r3, r1
 801bbae:	d102      	bne.n	801bbb6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801bbb0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801bbb2:	4293      	cmp	r3, r2
 801bbb4:	d003      	beq.n	801bbbe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801bbb6:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801bbba:	f7ff bec7 	b.w	801b94c <_ZN8touchgfx4Line17updateCachedShapeEv>
 801bbbe:	4770      	bx	lr

0801bbc0 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801bbc0:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801bbc4:	f7ff bec2 	b.w	801b94c <_ZN8touchgfx4Line17updateCachedShapeEv>

0801bbc8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801bbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbcc:	b0b3      	sub	sp, #204	; 0xcc
 801bbce:	4604      	mov	r4, r0
 801bbd0:	460a      	mov	r2, r1
 801bbd2:	4601      	mov	r1, r0
 801bbd4:	a804      	add	r0, sp, #16
 801bbd6:	ad32      	add	r5, sp, #200	; 0xc8
 801bbd8:	f00c fb32 	bl	8028240 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801bbdc:	2300      	movs	r3, #0
 801bbde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801bbe0:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801bbe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bbe6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bbe8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bbea:	1ac0      	subs	r0, r0, r3
 801bbec:	eba1 0102 	sub.w	r1, r1, r2
 801bbf0:	d43c      	bmi.n	801bc6c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801bbf2:	2900      	cmp	r1, #0
 801bbf4:	462a      	mov	r2, r5
 801bbf6:	db33      	blt.n	801bc60 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801bbf8:	f7ff fe58 	bl	801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801bbfc:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801bc00:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801bc02:	a804      	add	r0, sp, #16
 801bc04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bc06:	f00c fce4 	bl	80285d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801bc0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801bc0c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801bc0e:	a804      	add	r0, sp, #16
 801bc10:	f00c fc6e 	bl	80284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bc14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801bc18:	2b01      	cmp	r3, #1
 801bc1a:	d137      	bne.n	801bc8c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801bc1c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801bc1e:	2eb3      	cmp	r6, #179	; 0xb3
 801bc20:	dc34      	bgt.n	801bc8c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801bc22:	eba7 0906 	sub.w	r9, r7, r6
 801bc26:	4648      	mov	r0, r9
 801bc28:	f7ff fde8 	bl	801b7fc <_ZN8touchgfx7CWRUtil4sineEi>
 801bc2c:	a902      	add	r1, sp, #8
 801bc2e:	9002      	str	r0, [sp, #8]
 801bc30:	4628      	mov	r0, r5
 801bc32:	f7ff fdd7 	bl	801b7e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bc38:	eb00 0801 	add.w	r8, r0, r1
 801bc3c:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801bc40:	f7ff fddc 	bl	801b7fc <_ZN8touchgfx7CWRUtil4sineEi>
 801bc44:	a903      	add	r1, sp, #12
 801bc46:	9003      	str	r0, [sp, #12]
 801bc48:	4628      	mov	r0, r5
 801bc4a:	f7ff fdcb 	bl	801b7e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bc4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801bc50:	4641      	mov	r1, r8
 801bc52:	1a12      	subs	r2, r2, r0
 801bc54:	a804      	add	r0, sp, #16
 801bc56:	f00c fc4b 	bl	80284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bc5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bc5c:	441e      	add	r6, r3
 801bc5e:	e7de      	b.n	801bc1e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801bc60:	4249      	negs	r1, r1
 801bc62:	f7ff fe23 	bl	801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801bc66:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801bc6a:	e7c9      	b.n	801bc00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801bc6c:	2900      	cmp	r1, #0
 801bc6e:	f1c0 0000 	rsb	r0, r0, #0
 801bc72:	462a      	mov	r2, r5
 801bc74:	db04      	blt.n	801bc80 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801bc76:	f7ff fe19 	bl	801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801bc7a:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801bc7e:	e7bf      	b.n	801bc00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801bc80:	4249      	negs	r1, r1
 801bc82:	f7ff fe13 	bl	801b8ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801bc86:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801bc8a:	e7b9      	b.n	801bc00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801bc8c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801bc8e:	a804      	add	r0, sp, #16
 801bc90:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801bc92:	f00c fc2d 	bl	80284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bc96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bc98:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801bc9a:	a804      	add	r0, sp, #16
 801bc9c:	f00c fc28 	bl	80284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bca0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801bca4:	2b01      	cmp	r3, #1
 801bca6:	d123      	bne.n	801bcf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801bca8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801bcaa:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801bcae:	2e00      	cmp	r6, #0
 801bcb0:	dd1e      	ble.n	801bcf0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801bcb2:	eb06 0907 	add.w	r9, r6, r7
 801bcb6:	4648      	mov	r0, r9
 801bcb8:	f7ff fda0 	bl	801b7fc <_ZN8touchgfx7CWRUtil4sineEi>
 801bcbc:	a902      	add	r1, sp, #8
 801bcbe:	9002      	str	r0, [sp, #8]
 801bcc0:	4628      	mov	r0, r5
 801bcc2:	f7ff fd8f 	bl	801b7e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bcc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bcc8:	eb00 0801 	add.w	r8, r0, r1
 801bccc:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801bcd0:	f7ff fd94 	bl	801b7fc <_ZN8touchgfx7CWRUtil4sineEi>
 801bcd4:	a903      	add	r1, sp, #12
 801bcd6:	9003      	str	r0, [sp, #12]
 801bcd8:	4628      	mov	r0, r5
 801bcda:	f7ff fd83 	bl	801b7e4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801bcde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bce0:	4641      	mov	r1, r8
 801bce2:	1a12      	subs	r2, r2, r0
 801bce4:	a804      	add	r0, sp, #16
 801bce6:	f00c fc03 	bl	80284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801bcea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bcec:	1af6      	subs	r6, r6, r3
 801bcee:	e7de      	b.n	801bcae <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801bcf0:	a804      	add	r0, sp, #16
 801bcf2:	f00c fd72 	bl	80287da <_ZN8touchgfx6Canvas6renderEv>
 801bcf6:	4604      	mov	r4, r0
 801bcf8:	a804      	add	r0, sp, #16
 801bcfa:	f00c fdaf 	bl	802885c <_ZN8touchgfx6CanvasD1Ev>
 801bcfe:	4620      	mov	r0, r4
 801bd00:	b033      	add	sp, #204	; 0xcc
 801bd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801bd06 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801bd06:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801bd0a:	4770      	bx	lr

0801bd0c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801bd0c:	b570      	push	{r4, r5, r6, lr}
 801bd0e:	790b      	ldrb	r3, [r1, #4]
 801bd10:	4604      	mov	r4, r0
 801bd12:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801bd16:	460e      	mov	r6, r1
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	bf0c      	ite	eq
 801bd1c:	2301      	moveq	r3, #1
 801bd1e:	2300      	movne	r3, #0
 801bd20:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801bd24:	d110      	bne.n	801bd48 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801bd26:	b185      	cbz	r5, 801bd4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801bd28:	7933      	ldrb	r3, [r6, #4]
 801bd2a:	2b01      	cmp	r3, #1
 801bd2c:	d113      	bne.n	801bd56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801bd2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801bd30:	b188      	cbz	r0, 801bd56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801bd32:	6803      	ldr	r3, [r0, #0]
 801bd34:	68db      	ldr	r3, [r3, #12]
 801bd36:	4798      	blx	r3
 801bd38:	b168      	cbz	r0, 801bd56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801bd3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801bd3c:	4621      	mov	r1, r4
 801bd3e:	6803      	ldr	r3, [r0, #0]
 801bd40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd44:	689b      	ldr	r3, [r3, #8]
 801bd46:	4718      	bx	r3
 801bd48:	b12d      	cbz	r5, 801bd56 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801bd4a:	6823      	ldr	r3, [r4, #0]
 801bd4c:	4620      	mov	r0, r4
 801bd4e:	695b      	ldr	r3, [r3, #20]
 801bd50:	4798      	blx	r3
 801bd52:	2d00      	cmp	r5, #0
 801bd54:	d1e8      	bne.n	801bd28 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801bd56:	bd70      	pop	{r4, r5, r6, pc}

0801bd58 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801bd58:	4770      	bx	lr

0801bd5a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801bd5a:	6803      	ldr	r3, [r0, #0]
 801bd5c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801bd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bd62:	4718      	bx	r3

0801bd64 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801bd64:	b510      	push	{r4, lr}
 801bd66:	4604      	mov	r4, r0
 801bd68:	212c      	movs	r1, #44	; 0x2c
 801bd6a:	f00d fe0a 	bl	8029982 <_ZdlPvj>
 801bd6e:	4620      	mov	r0, r4
 801bd70:	bd10      	pop	{r4, pc}

0801bd72 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801bd72:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801bd76:	2bff      	cmp	r3, #255	; 0xff
 801bd78:	b510      	push	{r4, lr}
 801bd7a:	d104      	bne.n	801bd86 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801bd7c:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801bd7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d105      	bne.n	801bd92 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801bd86:	2300      	movs	r3, #0
 801bd88:	8003      	strh	r3, [r0, #0]
 801bd8a:	8043      	strh	r3, [r0, #2]
 801bd8c:	8083      	strh	r3, [r0, #4]
 801bd8e:	80c3      	strh	r3, [r0, #6]
 801bd90:	bd10      	pop	{r4, pc}
 801bd92:	2300      	movs	r3, #0
 801bd94:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801bd98:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801bd9c:	8003      	strh	r3, [r0, #0]
 801bd9e:	8043      	strh	r3, [r0, #2]
 801bda0:	8084      	strh	r4, [r0, #4]
 801bda2:	80c2      	strh	r2, [r0, #6]
 801bda4:	e7f4      	b.n	801bd90 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801bda6 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801bda6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bdaa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801bdae:	b087      	sub	sp, #28
 801bdb0:	4604      	mov	r4, r0
 801bdb2:	4689      	mov	r9, r1
 801bdb4:	b363      	cbz	r3, 801be10 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bdb6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801bdb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	d027      	beq.n	801be10 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bdc0:	ad06      	add	r5, sp, #24
 801bdc2:	2700      	movs	r7, #0
 801bdc4:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801bdc8:	4628      	mov	r0, r5
 801bdca:	f004 f8b3 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bdce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801bdd2:	a904      	add	r1, sp, #16
 801bdd4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bdd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bddc:	4620      	mov	r0, r4
 801bdde:	6823      	ldr	r3, [r4, #0]
 801bde0:	9704      	str	r7, [sp, #16]
 801bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bde4:	4798      	blx	r3
 801bde6:	f7f4 fef3 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801bdea:	6803      	ldr	r3, [r0, #0]
 801bdec:	4606      	mov	r6, r0
 801bdee:	4628      	mov	r0, r5
 801bdf0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801bdf4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801bdf6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bdfa:	f004 f9a3 	bl	8020144 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bdfe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801be02:	4601      	mov	r1, r0
 801be04:	9701      	str	r7, [sp, #4]
 801be06:	aa04      	add	r2, sp, #16
 801be08:	9300      	str	r3, [sp, #0]
 801be0a:	4630      	mov	r0, r6
 801be0c:	464b      	mov	r3, r9
 801be0e:	47c0      	blx	r8
 801be10:	b007      	add	sp, #28
 801be12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801be16 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801be16:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801be18:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801be1c:	460d      	mov	r5, r1
 801be1e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801be22:	2100      	movs	r1, #0
 801be24:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be28:	4604      	mov	r4, r0
 801be2a:	6803      	ldr	r3, [r0, #0]
 801be2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be30:	6a1b      	ldr	r3, [r3, #32]
 801be32:	9100      	str	r1, [sp, #0]
 801be34:	4669      	mov	r1, sp
 801be36:	4798      	blx	r3
 801be38:	4621      	mov	r1, r4
 801be3a:	a802      	add	r0, sp, #8
 801be3c:	f002 fa73 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be40:	f7f4 fec6 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801be44:	6803      	ldr	r3, [r0, #0]
 801be46:	aa02      	add	r2, sp, #8
 801be48:	4669      	mov	r1, sp
 801be4a:	699e      	ldr	r6, [r3, #24]
 801be4c:	462b      	mov	r3, r5
 801be4e:	47b0      	blx	r6
 801be50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be54:	2800      	cmp	r0, #0
 801be56:	bf08      	it	eq
 801be58:	461d      	moveq	r5, r3
 801be5a:	84e5      	strh	r5, [r4, #38]	; 0x26
 801be5c:	b004      	add	sp, #16
 801be5e:	bd70      	pop	{r4, r5, r6, pc}

0801be60 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801be60:	2200      	movs	r2, #0
 801be62:	8082      	strh	r2, [r0, #4]
 801be64:	80c2      	strh	r2, [r0, #6]
 801be66:	8102      	strh	r2, [r0, #8]
 801be68:	8142      	strh	r2, [r0, #10]
 801be6a:	8182      	strh	r2, [r0, #12]
 801be6c:	81c2      	strh	r2, [r0, #14]
 801be6e:	8202      	strh	r2, [r0, #16]
 801be70:	8242      	strh	r2, [r0, #18]
 801be72:	61c2      	str	r2, [r0, #28]
 801be74:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801be78:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801be7c:	2201      	movs	r2, #1
 801be7e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801be82:	4a04      	ldr	r2, [pc, #16]	; (801be94 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801be84:	6002      	str	r2, [r0, #0]
 801be86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be8a:	84c2      	strh	r2, [r0, #38]	; 0x26
 801be8c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801be90:	4770      	bx	lr
 801be92:	bf00      	nop
 801be94:	0802d9c4 	.word	0x0802d9c4

0801be98 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801be98:	b570      	push	{r4, r5, r6, lr}
 801be9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be9e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801bea0:	4604      	mov	r4, r0
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d00c      	beq.n	801bec0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801bea6:	f850 3b26 	ldr.w	r3, [r0], #38
 801beaa:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801beac:	f7f6 fe3a 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801beb0:	2300      	movs	r3, #0
 801beb2:	4601      	mov	r1, r0
 801beb4:	46ac      	mov	ip, r5
 801beb6:	4620      	mov	r0, r4
 801beb8:	461a      	mov	r2, r3
 801beba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bebe:	4760      	bx	ip
 801bec0:	2000      	movs	r0, #0
 801bec2:	bd70      	pop	{r4, r5, r6, pc}

0801bec4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801bec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801beca:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801becc:	429a      	cmp	r2, r3
 801bece:	d016      	beq.n	801befe <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801bed0:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7f4 fa53 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 801beda:	6803      	ldr	r3, [r0, #0]
 801bedc:	4605      	mov	r5, r0
 801bede:	4620      	mov	r0, r4
 801bee0:	69de      	ldr	r6, [r3, #28]
 801bee2:	f7f4 fa69 	bl	80103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801bee6:	4607      	mov	r7, r0
 801bee8:	4620      	mov	r0, r4
 801beea:	f7f6 fe1b 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801beee:	2300      	movs	r3, #0
 801bef0:	4602      	mov	r2, r0
 801bef2:	4639      	mov	r1, r7
 801bef4:	9300      	str	r3, [sp, #0]
 801bef6:	4628      	mov	r0, r5
 801bef8:	47b0      	blx	r6
 801befa:	b003      	add	sp, #12
 801befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801befe:	2000      	movs	r0, #0
 801bf00:	e7fb      	b.n	801befa <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801bf02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801bf02:	b40e      	push	{r1, r2, r3}
 801bf04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf0c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801bf0e:	b09b      	sub	sp, #108	; 0x6c
 801bf10:	4604      	mov	r4, r0
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d03f      	beq.n	801bf96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801bf16:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801bf1a:	ab22      	add	r3, sp, #136	; 0x88
 801bf1c:	4638      	mov	r0, r7
 801bf1e:	9303      	str	r3, [sp, #12]
 801bf20:	f7f4 fa2e 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 801bf24:	6803      	ldr	r3, [r0, #0]
 801bf26:	4680      	mov	r8, r0
 801bf28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf2a:	4798      	blx	r3
 801bf2c:	4606      	mov	r6, r0
 801bf2e:	b205      	sxth	r5, r0
 801bf30:	a804      	add	r0, sp, #16
 801bf32:	f003 f8d3 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801bf36:	f8d8 3000 	ldr.w	r3, [r8]
 801bf3a:	4640      	mov	r0, r8
 801bf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf3e:	4798      	blx	r3
 801bf40:	9a03      	ldr	r2, [sp, #12]
 801bf42:	4603      	mov	r3, r0
 801bf44:	9921      	ldr	r1, [sp, #132]	; 0x84
 801bf46:	a804      	add	r0, sp, #16
 801bf48:	f003 f8e5 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801bf4c:	4638      	mov	r0, r7
 801bf4e:	f7f4 fa33 	bl	80103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801bf52:	4680      	mov	r8, r0
 801bf54:	4638      	mov	r0, r7
 801bf56:	f7f4 fa13 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 801bf5a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801bf5e:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801bf62:	4642      	mov	r2, r8
 801bf64:	9300      	str	r3, [sp, #0]
 801bf66:	4603      	mov	r3, r0
 801bf68:	a804      	add	r0, sp, #16
 801bf6a:	f001 f930 	bl	801d1ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801bf6e:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801bf72:	b203      	sxth	r3, r0
 801bf74:	18a9      	adds	r1, r5, r2
 801bf76:	2900      	cmp	r1, #0
 801bf78:	dd0b      	ble.n	801bf92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801bf7a:	3b01      	subs	r3, #1
 801bf7c:	fb13 f302 	smulbb	r3, r3, r2
 801bf80:	fb16 3300 	smlabb	r3, r6, r0, r3
 801bf84:	b21d      	sxth	r5, r3
 801bf86:	4628      	mov	r0, r5
 801bf88:	b01b      	add	sp, #108	; 0x6c
 801bf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf8e:	b003      	add	sp, #12
 801bf90:	4770      	bx	lr
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	dcf7      	bgt.n	801bf86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801bf96:	2500      	movs	r5, #0
 801bf98:	e7f5      	b.n	801bf86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801bf9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bfa4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801bfa6:	b08d      	sub	sp, #52	; 0x34
 801bfa8:	4604      	mov	r4, r0
 801bfaa:	429e      	cmp	r6, r3
 801bfac:	4688      	mov	r8, r1
 801bfae:	d04b      	beq.n	801c048 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801bfb0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801bfb4:	4628      	mov	r0, r5
 801bfb6:	f7f4 f9e3 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 801bfba:	4607      	mov	r7, r0
 801bfbc:	2800      	cmp	r0, #0
 801bfbe:	d043      	beq.n	801c048 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801bfc0:	4628      	mov	r0, r5
 801bfc2:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801bfc6:	f7f4 fa0f 	bl	80103e8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801bfca:	4b21      	ldr	r3, [pc, #132]	; (801c050 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801bfcc:	4628      	mov	r0, r5
 801bfce:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801bfd8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801bfdc:	785e      	ldrb	r6, [r3, #1]
 801bfde:	f7f4 f9eb 	bl	80103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801bfe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bfe4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801bfe8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801bfec:	9309      	str	r3, [sp, #36]	; 0x24
 801bfee:	4b19      	ldr	r3, [pc, #100]	; (801c054 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801bff0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801bffa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bffe:	9707      	str	r7, [sp, #28]
 801c000:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801c004:	f88d 6020 	strb.w	r6, [sp, #32]
 801c008:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801c00c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801c010:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c014:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801c018:	b10a      	cbz	r2, 801c01e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801c01a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801c01c:	b906      	cbnz	r6, 801c020 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801c01e:	689e      	ldr	r6, [r3, #8]
 801c020:	af05      	add	r7, sp, #20
 801c022:	4621      	mov	r1, r4
 801c024:	4638      	mov	r0, r7
 801c026:	f002 f97e 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c02a:	4628      	mov	r0, r5
 801c02c:	f7f6 fd7a 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801c030:	2300      	movs	r3, #0
 801c032:	9001      	str	r0, [sp, #4]
 801c034:	4630      	mov	r0, r6
 801c036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c03a:	ab07      	add	r3, sp, #28
 801c03c:	9300      	str	r3, [sp, #0]
 801c03e:	4643      	mov	r3, r8
 801c040:	e897 0006 	ldmia.w	r7, {r1, r2}
 801c044:	f000 fe90 	bl	801cd68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801c048:	b00d      	add	sp, #52	; 0x34
 801c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c04e:	bf00      	nop
 801c050:	2000bfa8 	.word	0x2000bfa8
 801c054:	2000bf18 	.word	0x2000bf18

0801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801c058:	b570      	push	{r4, r5, r6, lr}
 801c05a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c05e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801c060:	4604      	mov	r4, r0
 801c062:	429a      	cmp	r2, r3
 801c064:	d021      	beq.n	801c0aa <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801c066:	6803      	ldr	r3, [r0, #0]
 801c068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c06a:	4798      	blx	r3
 801c06c:	6823      	ldr	r3, [r4, #0]
 801c06e:	4605      	mov	r5, r0
 801c070:	4620      	mov	r0, r4
 801c072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c074:	4798      	blx	r3
 801c076:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801c07a:	4606      	mov	r6, r0
 801c07c:	b22d      	sxth	r5, r5
 801c07e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801c082:	6823      	ldr	r3, [r4, #0]
 801c084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c086:	d109      	bne.n	801c09c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801c088:	4629      	mov	r1, r5
 801c08a:	4620      	mov	r0, r4
 801c08c:	4798      	blx	r3
 801c08e:	6823      	ldr	r3, [r4, #0]
 801c090:	4631      	mov	r1, r6
 801c092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c094:	4620      	mov	r0, r4
 801c096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c09a:	4718      	bx	r3
 801c09c:	4601      	mov	r1, r0
 801c09e:	4620      	mov	r0, r4
 801c0a0:	4798      	blx	r3
 801c0a2:	6823      	ldr	r3, [r4, #0]
 801c0a4:	4629      	mov	r1, r5
 801c0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c0a8:	e7f4      	b.n	801c094 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801c0aa:	bd70      	pop	{r4, r5, r6, pc}

0801c0ac <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801c0ac:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801c0b0:	84c1      	strh	r1, [r0, #38]	; 0x26
 801c0b2:	b922      	cbnz	r2, 801c0be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801c0b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c0b8:	b90b      	cbnz	r3, 801c0be <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801c0ba:	f7ff bfcd 	b.w	801c058 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801c0be:	4770      	bx	lr

0801c0c0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	8003      	strh	r3, [r0, #0]
 801c0c4:	8043      	strh	r3, [r0, #2]
 801c0c6:	8083      	strh	r3, [r0, #4]
 801c0c8:	80c3      	strh	r3, [r0, #6]
 801c0ca:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801c0ce:	b91b      	cbnz	r3, 801c0d8 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801c0d0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801c0d4:	2bff      	cmp	r3, #255	; 0xff
 801c0d6:	d103      	bne.n	801c0e0 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801c0d8:	890b      	ldrh	r3, [r1, #8]
 801c0da:	8083      	strh	r3, [r0, #4]
 801c0dc:	894b      	ldrh	r3, [r1, #10]
 801c0de:	80c3      	strh	r3, [r0, #6]
 801c0e0:	4770      	bx	lr
	...

0801c0e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801c0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c0e6:	4604      	mov	r4, r0
 801c0e8:	466b      	mov	r3, sp
 801c0ea:	6808      	ldr	r0, [r1, #0]
 801c0ec:	6849      	ldr	r1, [r1, #4]
 801c0ee:	c303      	stmia	r3!, {r0, r1}
 801c0f0:	6823      	ldr	r3, [r4, #0]
 801c0f2:	4669      	mov	r1, sp
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0f8:	4798      	blx	r3
 801c0fa:	4b08      	ldr	r3, [pc, #32]	; (801c11c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c102:	b10a      	cbz	r2, 801c108 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801c104:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c106:	b900      	cbnz	r0, 801c10a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801c108:	6898      	ldr	r0, [r3, #8]
 801c10a:	6803      	ldr	r3, [r0, #0]
 801c10c:	4669      	mov	r1, sp
 801c10e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801c110:	69dd      	ldr	r5, [r3, #28]
 801c112:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801c116:	47a8      	blx	r5
 801c118:	b003      	add	sp, #12
 801c11a:	bd30      	pop	{r4, r5, pc}
 801c11c:	2000bf18 	.word	0x2000bf18

0801c120 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801c120:	b570      	push	{r4, r5, r6, lr}
 801c122:	6803      	ldr	r3, [r0, #0]
 801c124:	4604      	mov	r4, r0
 801c126:	4615      	mov	r5, r2
 801c128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c12a:	4798      	blx	r3
 801c12c:	6823      	ldr	r3, [r4, #0]
 801c12e:	4629      	mov	r1, r5
 801c130:	4620      	mov	r0, r4
 801c132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c138:	4718      	bx	r3

0801c13a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801c13a:	b570      	push	{r4, r5, r6, lr}
 801c13c:	6803      	ldr	r3, [r0, #0]
 801c13e:	4604      	mov	r4, r0
 801c140:	460e      	mov	r6, r1
 801c142:	4615      	mov	r5, r2
 801c144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c146:	4798      	blx	r3
 801c148:	8030      	strh	r0, [r6, #0]
 801c14a:	6823      	ldr	r3, [r4, #0]
 801c14c:	4620      	mov	r0, r4
 801c14e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c150:	4798      	blx	r3
 801c152:	8028      	strh	r0, [r5, #0]
 801c154:	bd70      	pop	{r4, r5, r6, pc}

0801c156 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801c156:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801c15a:	4770      	bx	lr

0801c15c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801c15c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801c160:	4770      	bx	lr

0801c162 <_ZN8touchgfx10TiledImageD1Ev>:
 801c162:	4770      	bx	lr

0801c164 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801c164:	b510      	push	{r4, lr}
 801c166:	4604      	mov	r4, r0
 801c168:	f000 fb5a 	bl	801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801c16c:	6823      	ldr	r3, [r4, #0]
 801c16e:	4620      	mov	r0, r4
 801c170:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c174:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801c178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c17a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c17e:	4718      	bx	r3

0801c180 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c182:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c186:	4605      	mov	r5, r0
 801c188:	8541      	strh	r1, [r0, #42]	; 0x2a
 801c18a:	4630      	mov	r0, r6
 801c18c:	f003 fed2 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c190:	b1a0      	cbz	r0, 801c1bc <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801c192:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801c196:	4630      	mov	r0, r6
 801c198:	f003 fecc 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c19c:	fb97 f4f0 	sdiv	r4, r7, r0
 801c1a0:	fb04 7410 	mls	r4, r4, r0, r7
 801c1a4:	4630      	mov	r0, r6
 801c1a6:	f003 fec5 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c1aa:	4404      	add	r4, r0
 801c1ac:	4630      	mov	r0, r6
 801c1ae:	f003 fec1 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c1b2:	fb94 f3f0 	sdiv	r3, r4, r0
 801c1b6:	fb03 4010 	mls	r0, r3, r0, r4
 801c1ba:	8568      	strh	r0, [r5, #42]	; 0x2a
 801c1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c1be <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801c1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1c0:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c1c4:	4605      	mov	r5, r0
 801c1c6:	8581      	strh	r1, [r0, #44]	; 0x2c
 801c1c8:	4630      	mov	r0, r6
 801c1ca:	f003 feed 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c1ce:	b1a0      	cbz	r0, 801c1fa <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801c1d0:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	f003 fee7 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c1da:	fb97 f4f0 	sdiv	r4, r7, r0
 801c1de:	fb04 7410 	mls	r4, r4, r0, r7
 801c1e2:	4630      	mov	r0, r6
 801c1e4:	f003 fee0 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c1e8:	4404      	add	r4, r0
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	f003 fedc 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c1f0:	fb94 f3f0 	sdiv	r3, r4, r0
 801c1f4:	fb03 4010 	mls	r0, r3, r0, r4
 801c1f8:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801c1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c1fc <_ZN8touchgfx10TiledImageD0Ev>:
 801c1fc:	b510      	push	{r4, lr}
 801c1fe:	4604      	mov	r4, r0
 801c200:	2130      	movs	r1, #48	; 0x30
 801c202:	f00d fbbe 	bl	8029982 <_ZdlPvj>
 801c206:	4620      	mov	r0, r4
 801c208:	bd10      	pop	{r4, pc}
	...

0801c20c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c210:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801c214:	b093      	sub	sp, #76	; 0x4c
 801c216:	4607      	mov	r7, r0
 801c218:	460e      	mov	r6, r1
 801c21a:	4658      	mov	r0, fp
 801c21c:	f003 fe8a 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c220:	4605      	mov	r5, r0
 801c222:	4658      	mov	r0, fp
 801c224:	f003 fec0 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c228:	4680      	mov	r8, r0
 801c22a:	2d00      	cmp	r5, #0
 801c22c:	f000 80c5 	beq.w	801c3ba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c230:	2800      	cmp	r0, #0
 801c232:	f000 80c2 	beq.w	801c3ba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c236:	2300      	movs	r3, #0
 801c238:	a90e      	add	r1, sp, #56	; 0x38
 801c23a:	4638      	mov	r0, r7
 801c23c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c244:	4798      	blx	r3
 801c246:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801c24a:	f9b6 3000 	ldrsh.w	r3, [r6]
 801c24e:	88b1      	ldrh	r1, [r6, #4]
 801c250:	189c      	adds	r4, r3, r2
 801c252:	440b      	add	r3, r1
 801c254:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801c258:	fa02 f383 	sxtah	r3, r2, r3
 801c25c:	3b01      	subs	r3, #1
 801c25e:	fb93 f3f5 	sdiv	r3, r3, r5
 801c262:	fb94 f4f5 	sdiv	r4, r4, r5
 801c266:	fb13 f305 	smulbb	r3, r3, r5
 801c26a:	fb14 f405 	smulbb	r4, r4, r5
 801c26e:	b21b      	sxth	r3, r3
 801c270:	1aa4      	subs	r4, r4, r2
 801c272:	930b      	str	r3, [sp, #44]	; 0x2c
 801c274:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c278:	b2a4      	uxth	r4, r4
 801c27a:	185a      	adds	r2, r3, r1
 801c27c:	fb92 f2f8 	sdiv	r2, r2, r8
 801c280:	fb12 f208 	smulbb	r2, r2, r8
 801c284:	1a52      	subs	r2, r2, r1
 801c286:	b212      	sxth	r2, r2
 801c288:	920c      	str	r2, [sp, #48]	; 0x30
 801c28a:	88f2      	ldrh	r2, [r6, #6]
 801c28c:	4413      	add	r3, r2
 801c28e:	fa01 f383 	sxtah	r3, r1, r3
 801c292:	3b01      	subs	r3, #1
 801c294:	fb93 f3f8 	sdiv	r3, r3, r8
 801c298:	fb13 f308 	smulbb	r3, r3, r8
 801c29c:	b21b      	sxth	r3, r3
 801c29e:	930d      	str	r3, [sp, #52]	; 0x34
 801c2a0:	1963      	adds	r3, r4, r5
 801c2a2:	fa1f fa83 	uxth.w	sl, r3
 801c2a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c2a8:	b223      	sxth	r3, r4
 801c2aa:	4293      	cmp	r3, r2
 801c2ac:	9305      	str	r3, [sp, #20]
 801c2ae:	f300 8084 	bgt.w	801c3ba <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c2b2:	fa0f f38a 	sxth.w	r3, sl
 801c2b6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801c2ba:	9309      	str	r3, [sp, #36]	; 0x24
 801c2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2be:	4599      	cmp	r9, r3
 801c2c0:	dd04      	ble.n	801c2cc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801c2c2:	442c      	add	r4, r5
 801c2c4:	eb05 030a 	add.w	r3, r5, sl
 801c2c8:	b2a4      	uxth	r4, r4
 801c2ca:	e7ea      	b.n	801c2a2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801c2cc:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c2d0:	88b2      	ldrh	r2, [r6, #4]
 801c2d2:	4462      	add	r2, ip
 801c2d4:	b292      	uxth	r2, r2
 801c2d6:	b213      	sxth	r3, r2
 801c2d8:	9308      	str	r3, [sp, #32]
 801c2da:	fa1f f389 	uxth.w	r3, r9
 801c2de:	eb08 0103 	add.w	r1, r8, r3
 801c2e2:	9307      	str	r3, [sp, #28]
 801c2e4:	b289      	uxth	r1, r1
 801c2e6:	b208      	sxth	r0, r1
 801c2e8:	9006      	str	r0, [sp, #24]
 801c2ea:	9805      	ldr	r0, [sp, #20]
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	9808      	ldr	r0, [sp, #32]
 801c2f0:	4283      	cmp	r3, r0
 801c2f2:	da5e      	bge.n	801c3b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c2f6:	4584      	cmp	ip, r0
 801c2f8:	da5b      	bge.n	801c3b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c2fa:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801c2fe:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801c302:	4486      	add	lr, r0
 801c304:	fa1f fe8e 	uxth.w	lr, lr
 801c308:	fa0f f38e 	sxth.w	r3, lr
 801c30c:	4599      	cmp	r9, r3
 801c30e:	930a      	str	r3, [sp, #40]	; 0x28
 801c310:	da4f      	bge.n	801c3b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c312:	9b06      	ldr	r3, [sp, #24]
 801c314:	4298      	cmp	r0, r3
 801c316:	da4c      	bge.n	801c3b2 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c318:	9b05      	ldr	r3, [sp, #20]
 801c31a:	459c      	cmp	ip, r3
 801c31c:	bfb8      	it	lt
 801c31e:	469c      	movlt	ip, r3
 801c320:	4548      	cmp	r0, r9
 801c322:	9b08      	ldr	r3, [sp, #32]
 801c324:	bfb8      	it	lt
 801c326:	4648      	movlt	r0, r9
 801c328:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801c32c:	4699      	mov	r9, r3
 801c32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c330:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801c334:	4599      	cmp	r9, r3
 801c336:	bfc8      	it	gt
 801c338:	4652      	movgt	r2, sl
 801c33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c33c:	eba2 020c 	sub.w	r2, r2, ip
 801c340:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801c344:	9a06      	ldr	r2, [sp, #24]
 801c346:	4293      	cmp	r3, r2
 801c348:	bfd8      	it	le
 801c34a:	4671      	movle	r1, lr
 801c34c:	1a09      	subs	r1, r1, r0
 801c34e:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801c352:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801c356:	9b07      	ldr	r3, [sp, #28]
 801c358:	1b12      	subs	r2, r2, r4
 801c35a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c35e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c362:	1ad2      	subs	r2, r2, r3
 801c364:	4b16      	ldr	r3, [pc, #88]	; (801c3c0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801c366:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c36a:	681a      	ldr	r2, [r3, #0]
 801c36c:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801c370:	b109      	cbz	r1, 801c376 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801c372:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801c374:	b900      	cbnz	r0, 801c378 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801c376:	6890      	ldr	r0, [r2, #8]
 801c378:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c37c:	f04f 0c01 	mov.w	ip, #1
 801c380:	9b07      	ldr	r3, [sp, #28]
 801c382:	6801      	ldr	r1, [r0, #0]
 801c384:	4413      	add	r3, r2
 801c386:	f8cd c008 	str.w	ip, [sp, #8]
 801c38a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801c38e:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801c392:	b21b      	sxth	r3, r3
 801c394:	4422      	add	r2, r4
 801c396:	f8cd c004 	str.w	ip, [sp, #4]
 801c39a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c39e:	b212      	sxth	r2, r2
 801c3a0:	f8cd c000 	str.w	ip, [sp]
 801c3a4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801c3a8:	4659      	mov	r1, fp
 801c3aa:	47c8      	blx	r9
 801c3ac:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801c3b0:	e784      	b.n	801c2bc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801c3b8:	e7cb      	b.n	801c352 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801c3ba:	b013      	add	sp, #76	; 0x4c
 801c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c0:	2000bf18 	.word	0x2000bf18

0801c3c4 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801c3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c3cc:	4606      	mov	r6, r0
 801c3ce:	4689      	mov	r9, r1
 801c3d0:	2bff      	cmp	r3, #255	; 0xff
 801c3d2:	d008      	beq.n	801c3e6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	8003      	strh	r3, [r0, #0]
 801c3d8:	8043      	strh	r3, [r0, #2]
 801c3da:	8083      	strh	r3, [r0, #4]
 801c3dc:	4630      	mov	r0, r6
 801c3de:	80f3      	strh	r3, [r6, #6]
 801c3e0:	b003      	add	sp, #12
 801c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3e6:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801c3ea:	4668      	mov	r0, sp
 801c3ec:	4659      	mov	r1, fp
 801c3ee:	f003 fe15 	bl	802001c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c3f2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801c3f6:	4658      	mov	r0, fp
 801c3f8:	f9bd 7000 	ldrsh.w	r7, [sp]
 801c3fc:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801c400:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801c404:	f003 fd96 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c408:	4284      	cmp	r4, r0
 801c40a:	d10d      	bne.n	801c428 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801c40c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801c410:	4658      	mov	r0, fp
 801c412:	f003 fdc9 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c416:	4580      	cmp	r8, r0
 801c418:	d12a      	bne.n	801c470 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801c41a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801c41e:	8037      	strh	r7, [r6, #0]
 801c420:	f8a6 a002 	strh.w	sl, [r6, #2]
 801c424:	80b5      	strh	r5, [r6, #4]
 801c426:	e7d9      	b.n	801c3dc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801c428:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801c42c:	4658      	mov	r0, fp
 801c42e:	f003 fd81 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c432:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801c436:	1b7f      	subs	r7, r7, r5
 801c438:	b2a3      	uxth	r3, r4
 801c43a:	b2bd      	uxth	r5, r7
 801c43c:	b22f      	sxth	r7, r5
 801c43e:	4428      	add	r0, r5
 801c440:	2f00      	cmp	r7, #0
 801c442:	b280      	uxth	r0, r0
 801c444:	bfb8      	it	lt
 801c446:	18ed      	addlt	r5, r5, r3
 801c448:	4403      	add	r3, r0
 801c44a:	bfac      	ite	ge
 801c44c:	4625      	movge	r5, r4
 801c44e:	2700      	movlt	r7, #0
 801c450:	b29b      	uxth	r3, r3
 801c452:	bfb8      	it	lt
 801c454:	b22d      	sxthlt	r5, r5
 801c456:	b219      	sxth	r1, r3
 801c458:	bfb8      	it	lt
 801c45a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801c45e:	4291      	cmp	r1, r2
 801c460:	bfc4      	itt	gt
 801c462:	1a9c      	subgt	r4, r3, r2
 801c464:	b224      	sxthgt	r4, r4
 801c466:	42ac      	cmp	r4, r5
 801c468:	bfc4      	itt	gt
 801c46a:	b207      	sxthgt	r7, r0
 801c46c:	4625      	movgt	r5, r4
 801c46e:	e7cf      	b.n	801c410 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801c470:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801c474:	4658      	mov	r0, fp
 801c476:	f003 fd97 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c47a:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801c47e:	ebaa 0404 	sub.w	r4, sl, r4
 801c482:	fa1f f288 	uxth.w	r2, r8
 801c486:	b2a4      	uxth	r4, r4
 801c488:	fa0f fa84 	sxth.w	sl, r4
 801c48c:	4420      	add	r0, r4
 801c48e:	f1ba 0f00 	cmp.w	sl, #0
 801c492:	b280      	uxth	r0, r0
 801c494:	bfb8      	it	lt
 801c496:	18a3      	addlt	r3, r4, r2
 801c498:	4402      	add	r2, r0
 801c49a:	bfac      	ite	ge
 801c49c:	4643      	movge	r3, r8
 801c49e:	f04f 0a00 	movlt.w	sl, #0
 801c4a2:	b292      	uxth	r2, r2
 801c4a4:	bfb8      	it	lt
 801c4a6:	b21b      	sxthlt	r3, r3
 801c4a8:	b214      	sxth	r4, r2
 801c4aa:	bfb8      	it	lt
 801c4ac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c4b0:	428c      	cmp	r4, r1
 801c4b2:	bfc4      	itt	gt
 801c4b4:	eba2 0801 	subgt.w	r8, r2, r1
 801c4b8:	fa0f f888 	sxthgt.w	r8, r8
 801c4bc:	4543      	cmp	r3, r8
 801c4be:	bfbc      	itt	lt
 801c4c0:	fa0f fa80 	sxthlt.w	sl, r0
 801c4c4:	4643      	movlt	r3, r8
 801c4c6:	e7aa      	b.n	801c41e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801c4c8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801c4c8:	b538      	push	{r3, r4, r5, lr}
 801c4ca:	880b      	ldrh	r3, [r1, #0]
 801c4cc:	4605      	mov	r5, r0
 801c4ce:	4604      	mov	r4, r0
 801c4d0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c4d2:	8813      	ldrh	r3, [r2, #0]
 801c4d4:	f825 3f30 	strh.w	r3, [r5, #48]!
 801c4d8:	4628      	mov	r0, r5
 801c4da:	f003 fd2b 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c4de:	8120      	strh	r0, [r4, #8]
 801c4e0:	4628      	mov	r0, r5
 801c4e2:	f003 fd61 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c4e6:	8160      	strh	r0, [r4, #10]
 801c4e8:	bd38      	pop	{r3, r4, r5, pc}

0801c4ea <_ZNK8touchgfx6Button12getSolidRectEv>:
 801c4ea:	b510      	push	{r4, lr}
 801c4ec:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801c4f0:	4604      	mov	r4, r0
 801c4f2:	2bff      	cmp	r3, #255	; 0xff
 801c4f4:	d006      	beq.n	801c504 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	8003      	strh	r3, [r0, #0]
 801c4fa:	8043      	strh	r3, [r0, #2]
 801c4fc:	8083      	strh	r3, [r0, #4]
 801c4fe:	80c3      	strh	r3, [r0, #6]
 801c500:	4620      	mov	r0, r4
 801c502:	bd10      	pop	{r4, pc}
 801c504:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801c508:	b11b      	cbz	r3, 801c512 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801c50a:	3130      	adds	r1, #48	; 0x30
 801c50c:	f003 fd86 	bl	802001c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c510:	e7f6      	b.n	801c500 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801c512:	312e      	adds	r1, #46	; 0x2e
 801c514:	e7fa      	b.n	801c50c <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801c518 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801c518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c51c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801c520:	b08b      	sub	sp, #44	; 0x2c
 801c522:	4604      	mov	r4, r0
 801c524:	4689      	mov	r9, r1
 801c526:	2b00      	cmp	r3, #0
 801c528:	d043      	beq.n	801c5b2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801c52a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c52c:	a805      	add	r0, sp, #20
 801c52e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c532:	f003 fcff 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c536:	4607      	mov	r7, r0
 801c538:	fa0f f880 	sxth.w	r8, r0
 801c53c:	a805      	add	r0, sp, #20
 801c53e:	f003 fd33 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c542:	f9b9 6000 	ldrsh.w	r6, [r9]
 801c546:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801c54a:	2300      	movs	r3, #0
 801c54c:	fa0f fc80 	sxth.w	ip, r0
 801c550:	4432      	add	r2, r6
 801c552:	9306      	str	r3, [sp, #24]
 801c554:	b292      	uxth	r2, r2
 801c556:	fa0f fe82 	sxth.w	lr, r2
 801c55a:	459e      	cmp	lr, r3
 801c55c:	dd2b      	ble.n	801c5b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801c55e:	45b0      	cmp	r8, r6
 801c560:	dd29      	ble.n	801c5b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801c562:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801c566:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801c56a:	442b      	add	r3, r5
 801c56c:	b29b      	uxth	r3, r3
 801c56e:	b219      	sxth	r1, r3
 801c570:	2900      	cmp	r1, #0
 801c572:	dd20      	ble.n	801c5b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801c574:	45ac      	cmp	ip, r5
 801c576:	dd1e      	ble.n	801c5b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801c578:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801c57c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801c580:	45f0      	cmp	r8, lr
 801c582:	bfb8      	it	lt
 801c584:	463a      	movlt	r2, r7
 801c586:	458c      	cmp	ip, r1
 801c588:	bfb8      	it	lt
 801c58a:	4603      	movlt	r3, r0
 801c58c:	f8ad 6018 	strh.w	r6, [sp, #24]
 801c590:	1b92      	subs	r2, r2, r6
 801c592:	1b5b      	subs	r3, r3, r5
 801c594:	f8ad 501a 	strh.w	r5, [sp, #26]
 801c598:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c59c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c5a0:	4b1d      	ldr	r3, [pc, #116]	; (801c618 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	b953      	cbnz	r3, 801c5bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801c5a6:	4b1d      	ldr	r3, [pc, #116]	; (801c61c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801c5a8:	21b8      	movs	r1, #184	; 0xb8
 801c5aa:	4a1d      	ldr	r2, [pc, #116]	; (801c620 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801c5ac:	481d      	ldr	r0, [pc, #116]	; (801c624 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801c5ae:	f00d fa13 	bl	80299d8 <__assert_func>
 801c5b2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c5b4:	e7ba      	b.n	801c52c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	9307      	str	r3, [sp, #28]
 801c5ba:	e7f1      	b.n	801c5a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 801c5bc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d024      	beq.n	801c612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801c5c8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c5cc:	b30b      	cbz	r3, 801c612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801c5ce:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c5d2:	b1f3      	cbz	r3, 801c612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	a908      	add	r1, sp, #32
 801c5d8:	4620      	mov	r0, r4
 801c5da:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c5de:	6823      	ldr	r3, [r4, #0]
 801c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5e2:	4798      	blx	r3
 801c5e4:	4b10      	ldr	r3, [pc, #64]	; (801c628 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c5ec:	b10a      	cbz	r2, 801c5f2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801c5ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c5f0:	b900      	cbnz	r0, 801c5f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801c5f2:	6898      	ldr	r0, [r3, #8]
 801c5f4:	2501      	movs	r5, #1
 801c5f6:	6801      	ldr	r1, [r0, #0]
 801c5f8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c5fc:	9502      	str	r5, [sp, #8]
 801c5fe:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801c602:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c606:	9401      	str	r4, [sp, #4]
 801c608:	ac06      	add	r4, sp, #24
 801c60a:	9400      	str	r4, [sp, #0]
 801c60c:	68cc      	ldr	r4, [r1, #12]
 801c60e:	a905      	add	r1, sp, #20
 801c610:	47a0      	blx	r4
 801c612:	b00b      	add	sp, #44	; 0x2c
 801c614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c618:	2000bfe0 	.word	0x2000bfe0
 801c61c:	0802c8b4 	.word	0x0802c8b4
 801c620:	0802dc04 	.word	0x0802dc04
 801c624:	0802c8f0 	.word	0x0802c8f0
 801c628:	2000bf18 	.word	0x2000bf18

0801c62c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801c62c:	b570      	push	{r4, r5, r6, lr}
 801c62e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c632:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801c634:	4604      	mov	r4, r0
 801c636:	429a      	cmp	r2, r3
 801c638:	d00c      	beq.n	801c654 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801c63a:	f850 3b26 	ldr.w	r3, [r0], #38
 801c63e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801c640:	f7f6 fa70 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801c644:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c646:	4601      	mov	r1, r0
 801c648:	46ac      	mov	ip, r5
 801c64a:	4620      	mov	r0, r4
 801c64c:	2300      	movs	r3, #0
 801c64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c652:	4760      	bx	ip
 801c654:	2000      	movs	r0, #0
 801c656:	bd70      	pop	{r4, r5, r6, pc}

0801c658 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c660:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801c662:	b08d      	sub	sp, #52	; 0x34
 801c664:	4604      	mov	r4, r0
 801c666:	429e      	cmp	r6, r3
 801c668:	460f      	mov	r7, r1
 801c66a:	d048      	beq.n	801c6fe <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801c66c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801c670:	4628      	mov	r0, r5
 801c672:	f7f3 fe85 	bl	8010380 <_ZNK8touchgfx9TypedText7getFontEv>
 801c676:	4680      	mov	r8, r0
 801c678:	2800      	cmp	r0, #0
 801c67a:	d040      	beq.n	801c6fe <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801c67c:	4628      	mov	r0, r5
 801c67e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801c682:	f7f3 feb1 	bl	80103e8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801c686:	4b1f      	ldr	r3, [pc, #124]	; (801c704 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801c688:	4628      	mov	r0, r5
 801c68a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801c694:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801c698:	785e      	ldrb	r6, [r3, #1]
 801c69a:	f7f3 fe8d 	bl	80103b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801c69e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801c6a2:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801c6a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c6a8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801c6ac:	f88d 6020 	strb.w	r6, [sp, #32]
 801c6b0:	ae05      	add	r6, sp, #20
 801c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6b4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801c6b8:	f8cd 801c 	str.w	r8, [sp, #28]
 801c6bc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801c6c0:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801c6c4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801c6c8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801c6cc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801c6d0:	f7f4 fa7e 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801c6d4:	4621      	mov	r1, r4
 801c6d6:	4680      	mov	r8, r0
 801c6d8:	4630      	mov	r0, r6
 801c6da:	f001 fe24 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f7f6 fa20 	bl	8012b24 <_ZNK8touchgfx9TypedText7getTextEv>
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	9303      	str	r3, [sp, #12]
 801c6e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c6ea:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801c6ee:	ab07      	add	r3, sp, #28
 801c6f0:	4640      	mov	r0, r8
 801c6f2:	9300      	str	r3, [sp, #0]
 801c6f4:	463b      	mov	r3, r7
 801c6f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c6fa:	f000 fb35 	bl	801cd68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801c6fe:	b00d      	add	sp, #52	; 0x34
 801c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c704:	2000bfa8 	.word	0x2000bfa8

0801c708 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801c708:	2300      	movs	r3, #0
 801c70a:	8083      	strh	r3, [r0, #4]
 801c70c:	80c3      	strh	r3, [r0, #6]
 801c70e:	8003      	strh	r3, [r0, #0]
 801c710:	8043      	strh	r3, [r0, #2]
 801c712:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801c716:	2bff      	cmp	r3, #255	; 0xff
 801c718:	bf01      	itttt	eq
 801c71a:	890b      	ldrheq	r3, [r1, #8]
 801c71c:	8083      	strheq	r3, [r0, #4]
 801c71e:	894b      	ldrheq	r3, [r1, #10]
 801c720:	80c3      	strheq	r3, [r0, #6]
 801c722:	4770      	bx	lr

0801c724 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c728:	4604      	mov	r4, r0
 801c72a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801c72e:	460e      	mov	r6, r1
 801c730:	b08c      	sub	sp, #48	; 0x30
 801c732:	8962      	ldrh	r2, [r4, #10]
 801c734:	b218      	sxth	r0, r3
 801c736:	8921      	ldrh	r1, [r4, #8]
 801c738:	005b      	lsls	r3, r3, #1
 801c73a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c73e:	1ac9      	subs	r1, r1, r3
 801c740:	1ad3      	subs	r3, r2, r3
 801c742:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c746:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c74a:	6830      	ldr	r0, [r6, #0]
 801c74c:	6871      	ldr	r1, [r6, #4]
 801c74e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c752:	466b      	mov	r3, sp
 801c754:	c303      	stmia	r3!, {r0, r1}
 801c756:	a904      	add	r1, sp, #16
 801c758:	4668      	mov	r0, sp
 801c75a:	f7fd fdbf 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801c75e:	6823      	ldr	r3, [r4, #0]
 801c760:	4669      	mov	r1, sp
 801c762:	4620      	mov	r0, r4
 801c764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c766:	4798      	blx	r3
 801c768:	f7f4 fa32 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801c76c:	6803      	ldr	r3, [r0, #0]
 801c76e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801c770:	4669      	mov	r1, sp
 801c772:	69dd      	ldr	r5, [r3, #28]
 801c774:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801c778:	47a8      	blx	r5
 801c77a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801c77e:	2a00      	cmp	r2, #0
 801c780:	d04b      	beq.n	801c81a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801c782:	b211      	sxth	r1, r2
 801c784:	8963      	ldrh	r3, [r4, #10]
 801c786:	b292      	uxth	r2, r2
 801c788:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801c78c:	2500      	movs	r5, #0
 801c78e:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c792:	1a9f      	subs	r7, r3, r2
 801c794:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801c798:	1a82      	subs	r2, r0, r2
 801c79a:	9504      	str	r5, [sp, #16]
 801c79c:	b21b      	sxth	r3, r3
 801c79e:	f8ad 701a 	strh.w	r7, [sp, #26]
 801c7a2:	af02      	add	r7, sp, #8
 801c7a4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c7a8:	f8ad 5018 	strh.w	r5, [sp, #24]
 801c7ac:	f8ad 001c 	strh.w	r0, [sp, #28]
 801c7b0:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c7b4:	f8ad 5020 	strh.w	r5, [sp, #32]
 801c7b8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801c7bc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801c7c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c7c4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801c7c8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801c7cc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801c7d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c7d4:	ab04      	add	r3, sp, #16
 801c7d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c7da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c7de:	e887 0003 	stmia.w	r7, {r0, r1}
 801c7e2:	4631      	mov	r1, r6
 801c7e4:	4638      	mov	r0, r7
 801c7e6:	f7fd fd79 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801c7ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c7ee:	b18b      	cbz	r3, 801c814 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801c7f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c7f4:	b173      	cbz	r3, 801c814 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801c7f6:	6823      	ldr	r3, [r4, #0]
 801c7f8:	4639      	mov	r1, r7
 801c7fa:	4620      	mov	r0, r4
 801c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7fe:	4798      	blx	r3
 801c800:	f7f4 f9e6 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 801c804:	6803      	ldr	r3, [r0, #0]
 801c806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c808:	4639      	mov	r1, r7
 801c80a:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801c80e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801c812:	47c0      	blx	r8
 801c814:	3501      	adds	r5, #1
 801c816:	2d04      	cmp	r5, #4
 801c818:	d1dc      	bne.n	801c7d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801c81a:	b00c      	add	sp, #48	; 0x30
 801c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c820 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801c820:	b570      	push	{r4, r5, r6, lr}
 801c822:	4605      	mov	r5, r0
 801c824:	880b      	ldrh	r3, [r1, #0]
 801c826:	4604      	mov	r4, r0
 801c828:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c82a:	f855 3b26 	ldr.w	r3, [r5], #38
 801c82e:	4628      	mov	r0, r5
 801c830:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801c832:	f003 fb7f 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c836:	b201      	sxth	r1, r0
 801c838:	4620      	mov	r0, r4
 801c83a:	47b0      	blx	r6
 801c83c:	6823      	ldr	r3, [r4, #0]
 801c83e:	4628      	mov	r0, r5
 801c840:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801c842:	f003 fbb1 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c846:	b201      	sxth	r1, r0
 801c848:	4620      	mov	r0, r4
 801c84a:	47b0      	blx	r6
 801c84c:	4628      	mov	r0, r5
 801c84e:	f003 fc3f 	bl	80200d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c852:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801c856:	bd70      	pop	{r4, r5, r6, pc}

0801c858 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801c858:	b510      	push	{r4, lr}
 801c85a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c85e:	4604      	mov	r4, r0
 801c860:	2bff      	cmp	r3, #255	; 0xff
 801c862:	d006      	beq.n	801c872 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801c864:	2300      	movs	r3, #0
 801c866:	8003      	strh	r3, [r0, #0]
 801c868:	8043      	strh	r3, [r0, #2]
 801c86a:	8083      	strh	r3, [r0, #4]
 801c86c:	80c3      	strh	r3, [r0, #6]
 801c86e:	4620      	mov	r0, r4
 801c870:	bd10      	pop	{r4, pc}
 801c872:	3126      	adds	r1, #38	; 0x26
 801c874:	f003 fbd2 	bl	802001c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c878:	e7f9      	b.n	801c86e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801c87c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c880:	4604      	mov	r4, r0
 801c882:	b088      	sub	sp, #32
 801c884:	2500      	movs	r5, #0
 801c886:	460f      	mov	r7, r1
 801c888:	f854 3b26 	ldr.w	r3, [r4], #38
 801c88c:	a904      	add	r1, sp, #16
 801c88e:	4606      	mov	r6, r0
 801c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c892:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c896:	4798      	blx	r3
 801c898:	4620      	mov	r0, r4
 801c89a:	f003 fb4b 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c89e:	4680      	mov	r8, r0
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f003 fb81 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c8a6:	9506      	str	r5, [sp, #24]
 801c8a8:	ad06      	add	r5, sp, #24
 801c8aa:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c8ae:	4639      	mov	r1, r7
 801c8b0:	f8ad 801c 	strh.w	r8, [sp, #28]
 801c8b4:	4628      	mov	r0, r5
 801c8b6:	f7fd fd11 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801c8ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c8be:	b1c3      	cbz	r3, 801c8f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801c8c0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c8c4:	b1ab      	cbz	r3, 801c8f2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801c8c6:	4b0c      	ldr	r3, [pc, #48]	; (801c8f8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c8ce:	b10a      	cbz	r2, 801c8d4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801c8d0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c8d2:	b900      	cbnz	r0, 801c8d6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801c8d4:	6898      	ldr	r0, [r3, #8]
 801c8d6:	2701      	movs	r7, #1
 801c8d8:	6801      	ldr	r1, [r0, #0]
 801c8da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c8de:	9702      	str	r7, [sp, #8]
 801c8e0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801c8e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c8e8:	e9cd 5600 	strd	r5, r6, [sp]
 801c8ec:	68cd      	ldr	r5, [r1, #12]
 801c8ee:	4621      	mov	r1, r4
 801c8f0:	47a8      	blx	r5
 801c8f2:	b008      	add	sp, #32
 801c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8f8:	2000bf18 	.word	0x2000bf18

0801c8fc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801c8fc:	4b02      	ldr	r3, [pc, #8]	; (801c908 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801c8fe:	6018      	str	r0, [r3, #0]
 801c900:	4b02      	ldr	r3, [pc, #8]	; (801c90c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801c902:	6019      	str	r1, [r3, #0]
 801c904:	4770      	bx	lr
 801c906:	bf00      	nop
 801c908:	2000bf20 	.word	0x2000bf20
 801c90c:	2000bf34 	.word	0x2000bf34

0801c910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801c910:	b538      	push	{r3, r4, r5, lr}
 801c912:	4c2b      	ldr	r4, [pc, #172]	; (801c9c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801c914:	4b2b      	ldr	r3, [pc, #172]	; (801c9c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801c916:	6821      	ldr	r1, [r4, #0]
 801c918:	681a      	ldr	r2, [r3, #0]
 801c91a:	4281      	cmp	r1, r0
 801c91c:	4d2a      	ldr	r5, [pc, #168]	; (801c9c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801c91e:	492b      	ldr	r1, [pc, #172]	; (801c9cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801c920:	d108      	bne.n	801c934 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801c922:	682b      	ldr	r3, [r5, #0]
 801c924:	4293      	cmp	r3, r2
 801c926:	d105      	bne.n	801c934 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801c928:	6808      	ldr	r0, [r1, #0]
 801c92a:	280f      	cmp	r0, #15
 801c92c:	bf94      	ite	ls
 801c92e:	2000      	movls	r0, #0
 801c930:	2001      	movhi	r0, #1
 801c932:	bd38      	pop	{r3, r4, r5, pc}
 801c934:	4b26      	ldr	r3, [pc, #152]	; (801c9d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801c936:	6020      	str	r0, [r4, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	602a      	str	r2, [r5, #0]
 801c93c:	4298      	cmp	r0, r3
 801c93e:	d905      	bls.n	801c94c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801c940:	4b24      	ldr	r3, [pc, #144]	; (801c9d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801c942:	2137      	movs	r1, #55	; 0x37
 801c944:	4a24      	ldr	r2, [pc, #144]	; (801c9d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801c946:	4825      	ldr	r0, [pc, #148]	; (801c9dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801c948:	f00d f846 	bl	80299d8 <__assert_func>
 801c94c:	f010 0403 	ands.w	r4, r0, #3
 801c950:	bf1f      	itttt	ne
 801c952:	f1c4 0504 	rsbne	r5, r4, #4
 801c956:	3b04      	subne	r3, #4
 801c958:	1952      	addne	r2, r2, r5
 801c95a:	191b      	addne	r3, r3, r4
 801c95c:	4d20      	ldr	r5, [pc, #128]	; (801c9e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801c95e:	4402      	add	r2, r0
 801c960:	1a1b      	subs	r3, r3, r0
 801c962:	3001      	adds	r0, #1
 801c964:	602a      	str	r2, [r5, #0]
 801c966:	f020 0401 	bic.w	r4, r0, #1
 801c96a:	42a3      	cmp	r3, r4
 801c96c:	d203      	bcs.n	801c976 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801c96e:	4b19      	ldr	r3, [pc, #100]	; (801c9d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801c970:	214a      	movs	r1, #74	; 0x4a
 801c972:	4a19      	ldr	r2, [pc, #100]	; (801c9d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801c974:	e7e7      	b.n	801c946 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801c976:	f010 0002 	ands.w	r0, r0, #2
 801c97a:	bf1f      	itttt	ne
 801c97c:	f1c0 0504 	rsbne	r5, r0, #4
 801c980:	1952      	addne	r2, r2, r5
 801c982:	1f05      	subne	r5, r0, #4
 801c984:	195b      	addne	r3, r3, r5
 801c986:	4422      	add	r2, r4
 801c988:	4d16      	ldr	r5, [pc, #88]	; (801c9e4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801c98a:	1b1b      	subs	r3, r3, r4
 801c98c:	602a      	str	r2, [r5, #0]
 801c98e:	429c      	cmp	r4, r3
 801c990:	d903      	bls.n	801c99a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801c992:	4b10      	ldr	r3, [pc, #64]	; (801c9d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801c994:	215d      	movs	r1, #93	; 0x5d
 801c996:	4a10      	ldr	r2, [pc, #64]	; (801c9d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801c998:	e7d5      	b.n	801c946 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801c99a:	b120      	cbz	r0, 801c9a6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801c99c:	f1c0 0504 	rsb	r5, r0, #4
 801c9a0:	3804      	subs	r0, #4
 801c9a2:	442a      	add	r2, r5
 801c9a4:	4403      	add	r3, r0
 801c9a6:	1b1b      	subs	r3, r3, r4
 801c9a8:	4422      	add	r2, r4
 801c9aa:	480f      	ldr	r0, [pc, #60]	; (801c9e8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801c9ac:	2b0f      	cmp	r3, #15
 801c9ae:	600b      	str	r3, [r1, #0]
 801c9b0:	6002      	str	r2, [r0, #0]
 801c9b2:	d803      	bhi.n	801c9bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801c9b4:	4b0d      	ldr	r3, [pc, #52]	; (801c9ec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801c9b6:	2170      	movs	r1, #112	; 0x70
 801c9b8:	4a07      	ldr	r2, [pc, #28]	; (801c9d8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801c9ba:	e7c4      	b.n	801c946 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801c9bc:	2001      	movs	r0, #1
 801c9be:	e7b8      	b.n	801c932 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801c9c0:	2000bf28 	.word	0x2000bf28
 801c9c4:	2000bf20 	.word	0x2000bf20
 801c9c8:	2000bf30 	.word	0x2000bf30
 801c9cc:	2000bf38 	.word	0x2000bf38
 801c9d0:	2000bf34 	.word	0x2000bf34
 801c9d4:	0802dd88 	.word	0x0802dd88
 801c9d8:	0802de50 	.word	0x0802de50
 801c9dc:	0802ddc1 	.word	0x0802ddc1
 801c9e0:	2000bf3c 	.word	0x2000bf3c
 801c9e4:	2000bf2c 	.word	0x2000bf2c
 801c9e8:	2000bf24 	.word	0x2000bf24
 801c9ec:	0802de0b 	.word	0x0802de0b

0801c9f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801c9f0:	4b04      	ldr	r3, [pc, #16]	; (801ca04 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801c9f2:	6818      	ldr	r0, [r3, #0]
 801c9f4:	b120      	cbz	r0, 801ca00 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801c9f6:	4b04      	ldr	r3, [pc, #16]	; (801ca08 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801c9f8:	6818      	ldr	r0, [r3, #0]
 801c9fa:	3000      	adds	r0, #0
 801c9fc:	bf18      	it	ne
 801c9fe:	2001      	movne	r0, #1
 801ca00:	4770      	bx	lr
 801ca02:	bf00      	nop
 801ca04:	2000bf20 	.word	0x2000bf20
 801ca08:	2000bf34 	.word	0x2000bf34

0801ca0c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801ca0c:	4b01      	ldr	r3, [pc, #4]	; (801ca14 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801ca0e:	6818      	ldr	r0, [r3, #0]
 801ca10:	4770      	bx	lr
 801ca12:	bf00      	nop
 801ca14:	2000bf28 	.word	0x2000bf28

0801ca18 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801ca18:	4b01      	ldr	r3, [pc, #4]	; (801ca20 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801ca1a:	6818      	ldr	r0, [r3, #0]
 801ca1c:	4770      	bx	lr
 801ca1e:	bf00      	nop
 801ca20:	2000bf30 	.word	0x2000bf30

0801ca24 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801ca24:	4b01      	ldr	r3, [pc, #4]	; (801ca2c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801ca26:	6818      	ldr	r0, [r3, #0]
 801ca28:	4770      	bx	lr
 801ca2a:	bf00      	nop
 801ca2c:	2000bf3c 	.word	0x2000bf3c

0801ca30 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801ca30:	4b01      	ldr	r3, [pc, #4]	; (801ca38 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801ca32:	6818      	ldr	r0, [r3, #0]
 801ca34:	4770      	bx	lr
 801ca36:	bf00      	nop
 801ca38:	2000bf2c 	.word	0x2000bf2c

0801ca3c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801ca3c:	4b01      	ldr	r3, [pc, #4]	; (801ca44 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801ca3e:	6818      	ldr	r0, [r3, #0]
 801ca40:	4770      	bx	lr
 801ca42:	bf00      	nop
 801ca44:	2000bf24 	.word	0x2000bf24

0801ca48 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801ca48:	4b01      	ldr	r3, [pc, #4]	; (801ca50 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801ca4a:	6818      	ldr	r0, [r3, #0]
 801ca4c:	4770      	bx	lr
 801ca4e:	bf00      	nop
 801ca50:	2000bf38 	.word	0x2000bf38

0801ca54 <_ZN8touchgfx3LCD4initEv>:
 801ca54:	4770      	bx	lr

0801ca56 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ca56:	2000      	movs	r0, #0
 801ca58:	4770      	bx	lr

0801ca5a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801ca5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca5e:	b091      	sub	sp, #68	; 0x44
 801ca60:	4699      	mov	r9, r3
 801ca62:	4617      	mov	r7, r2
 801ca64:	2500      	movs	r5, #0
 801ca66:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801ca6a:	4680      	mov	r8, r0
 801ca6c:	a80e      	add	r0, sp, #56	; 0x38
 801ca6e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801ca70:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801ca74:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801ca78:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801ca7c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ca80:	910d      	str	r1, [sp, #52]	; 0x34
 801ca82:	950e      	str	r5, [sp, #56]	; 0x38
 801ca84:	f000 fe3a 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca88:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ca8a:	f8d9 6000 	ldr.w	r6, [r9]
 801ca8e:	6818      	ldr	r0, [r3, #0]
 801ca90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca92:	f9b4 b000 	ldrsh.w	fp, [r4]
 801ca96:	1b80      	subs	r0, r0, r6
 801ca98:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ca9c:	eb02 0c06 	add.w	ip, r2, r6
 801caa0:	ebab 0e0c 	sub.w	lr, fp, ip
 801caa4:	4570      	cmp	r0, lr
 801caa6:	f340 80bc 	ble.w	801cc22 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801caaa:	88a1      	ldrh	r1, [r4, #4]
 801caac:	4459      	add	r1, fp
 801caae:	b209      	sxth	r1, r1
 801cab0:	458c      	cmp	ip, r1
 801cab2:	f300 80b6 	bgt.w	801cc22 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801cab6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801caba:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801cabe:	4283      	cmp	r3, r0
 801cac0:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801cac4:	edd9 6a07 	vldr	s13, [r9, #28]
 801cac8:	bfa8      	it	ge
 801caca:	4603      	movge	r3, r0
 801cacc:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801cad0:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801cad4:	45e3      	cmp	fp, ip
 801cad6:	ee07 3a90 	vmov	s15, r3
 801cada:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801cade:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801cae2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801cae6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801caea:	ee25 5a27 	vmul.f32	s10, s10, s15
 801caee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801caf2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801caf6:	ee32 1a05 	vadd.f32	s2, s4, s10
 801cafa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cafe:	ee36 0a84 	vadd.f32	s0, s13, s8
 801cb02:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cb06:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cb0a:	f340 808d 	ble.w	801cc28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801cb0e:	fb9e f5f3 	sdiv	r5, lr, r3
 801cb12:	ee07 5a10 	vmov	s14, r5
 801cb16:	2d00      	cmp	r5, #0
 801cb18:	fb03 e415 	mls	r4, r3, r5, lr
 801cb1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cb20:	eea7 0a04 	vfma.f32	s0, s14, s8
 801cb24:	eee7 0a24 	vfma.f32	s1, s14, s9
 801cb28:	eea7 1a05 	vfma.f32	s2, s14, s10
 801cb2c:	dd12      	ble.n	801cb54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801cb2e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801cb32:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801cb36:	ee31 2a45 	vsub.f32	s4, s2, s10
 801cb3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb42:	bf14      	ite	ne
 801cb44:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801cb48:	eeb0 7a67 	vmoveq.f32	s14, s15
 801cb4c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cb50:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cb54:	fb05 f703 	mul.w	r7, r5, r3
 801cb58:	1bc0      	subs	r0, r0, r7
 801cb5a:	443e      	add	r6, r7
 801cb5c:	1997      	adds	r7, r2, r6
 801cb5e:	4407      	add	r7, r0
 801cb60:	42b9      	cmp	r1, r7
 801cb62:	bfbc      	itt	lt
 801cb64:	1a88      	sublt	r0, r1, r2
 801cb66:	1b80      	sublt	r0, r0, r6
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	dd5a      	ble.n	801cc22 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801cb6c:	fb90 f1f3 	sdiv	r1, r0, r3
 801cb70:	fb03 0211 	mls	r2, r3, r1, r0
 801cb74:	b90a      	cbnz	r2, 801cb7a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801cb76:	3901      	subs	r1, #1
 801cb78:	461a      	mov	r2, r3
 801cb7a:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801cb7e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801cb82:	44a4      	add	ip, r4
 801cb84:	2900      	cmp	r1, #0
 801cb86:	bfcc      	ite	gt
 801cb88:	469e      	movgt	lr, r3
 801cb8a:	4696      	movle	lr, r2
 801cb8c:	fb03 c505 	mla	r5, r3, r5, ip
 801cb90:	eef0 6a42 	vmov.f32	s13, s4
 801cb94:	eeb0 7a61 	vmov.f32	s14, s3
 801cb98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb9c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cba0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801cba4:	ee21 3a23 	vmul.f32	s6, s2, s7
 801cba8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801cbac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cbb0:	ee17 0a90 	vmov	r0, s15
 801cbb4:	ee73 7a42 	vsub.f32	s15, s6, s4
 801cbb8:	fb90 f6f3 	sdiv	r6, r0, r3
 801cbbc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cbc0:	ee17 0a90 	vmov	r0, s15
 801cbc4:	fb90 f7f3 	sdiv	r7, r0, r3
 801cbc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cbcc:	f8d0 8000 	ldr.w	r8, [r0]
 801cbd0:	900c      	str	r0, [sp, #48]	; 0x30
 801cbd2:	981c      	ldr	r0, [sp, #112]	; 0x70
 801cbd4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801cbd8:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801cbdc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801cbe0:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801cbe4:	f8cd a020 	str.w	sl, [sp, #32]
 801cbe8:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801cbec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cbee:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801cbf2:	9603      	str	r6, [sp, #12]
 801cbf4:	44ca      	add	sl, r9
 801cbf6:	9506      	str	r5, [sp, #24]
 801cbf8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801cbfc:	ee16 0a90 	vmov	r0, s13
 801cc00:	f8cd a01c 	str.w	sl, [sp, #28]
 801cc04:	fb07 0704 	mla	r7, r7, r4, r0
 801cc08:	ee17 0a10 	vmov	r0, s14
 801cc0c:	fb06 0604 	mla	r6, r6, r4, r0
 801cc10:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cc12:	9702      	str	r7, [sp, #8]
 801cc14:	e9cd 3600 	strd	r3, r6, [sp]
 801cc18:	ebae 0304 	sub.w	r3, lr, r4
 801cc1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801cc20:	47a8      	blx	r5
 801cc22:	b011      	add	sp, #68	; 0x44
 801cc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc28:	462c      	mov	r4, r5
 801cc2a:	e797      	b.n	801cb5c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801cc2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801cc2c:	b570      	push	{r4, r5, r6, lr}
 801cc2e:	4604      	mov	r4, r0
 801cc30:	2500      	movs	r5, #0
 801cc32:	9804      	ldr	r0, [sp, #16]
 801cc34:	7223      	strb	r3, [r4, #8]
 801cc36:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801cc3a:	8025      	strh	r5, [r4, #0]
 801cc3c:	6061      	str	r1, [r4, #4]
 801cc3e:	7263      	strb	r3, [r4, #9]
 801cc40:	60e0      	str	r0, [r4, #12]
 801cc42:	8222      	strh	r2, [r4, #16]
 801cc44:	8265      	strh	r5, [r4, #18]
 801cc46:	82a5      	strh	r5, [r4, #20]
 801cc48:	82e5      	strh	r5, [r4, #22]
 801cc4a:	8325      	strh	r5, [r4, #24]
 801cc4c:	8365      	strh	r5, [r4, #26]
 801cc4e:	83a5      	strh	r5, [r4, #28]
 801cc50:	77a5      	strb	r5, [r4, #30]
 801cc52:	6803      	ldr	r3, [r0, #0]
 801cc54:	695b      	ldr	r3, [r3, #20]
 801cc56:	4798      	blx	r3
 801cc58:	4606      	mov	r6, r0
 801cc5a:	b1f8      	cbz	r0, 801cc9c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801cc5c:	68e0      	ldr	r0, [r4, #12]
 801cc5e:	4631      	mov	r1, r6
 801cc60:	6803      	ldr	r3, [r0, #0]
 801cc62:	68db      	ldr	r3, [r3, #12]
 801cc64:	4798      	blx	r3
 801cc66:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801cc6a:	4605      	mov	r5, r0
 801cc6c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cc70:	7a83      	ldrb	r3, [r0, #10]
 801cc72:	4313      	orrs	r3, r2
 801cc74:	83a3      	strh	r3, [r4, #28]
 801cc76:	7a63      	ldrb	r3, [r4, #9]
 801cc78:	2b04      	cmp	r3, #4
 801cc7a:	d10f      	bne.n	801cc9c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801cc7c:	68e0      	ldr	r0, [r4, #12]
 801cc7e:	462a      	mov	r2, r5
 801cc80:	4631      	mov	r1, r6
 801cc82:	6803      	ldr	r3, [r0, #0]
 801cc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc86:	4798      	blx	r3
 801cc88:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801cc8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cc90:	7aab      	ldrb	r3, [r5, #10]
 801cc92:	4313      	orrs	r3, r2
 801cc94:	4418      	add	r0, r3
 801cc96:	8ba3      	ldrh	r3, [r4, #28]
 801cc98:	4418      	add	r0, r3
 801cc9a:	83a0      	strh	r0, [r4, #28]
 801cc9c:	4620      	mov	r0, r4
 801cc9e:	bd70      	pop	{r4, r5, r6, pc}

0801cca0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca4:	2400      	movs	r4, #0
 801cca6:	b085      	sub	sp, #20
 801cca8:	4681      	mov	r9, r0
 801ccaa:	460f      	mov	r7, r1
 801ccac:	4692      	mov	sl, r2
 801ccae:	469b      	mov	fp, r3
 801ccb0:	46a0      	mov	r8, r4
 801ccb2:	4626      	mov	r6, r4
 801ccb4:	4554      	cmp	r4, sl
 801ccb6:	da21      	bge.n	801ccfc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801ccb8:	2300      	movs	r3, #0
 801ccba:	463a      	mov	r2, r7
 801ccbc:	4659      	mov	r1, fp
 801ccbe:	4648      	mov	r0, r9
 801ccc0:	9303      	str	r3, [sp, #12]
 801ccc2:	ab03      	add	r3, sp, #12
 801ccc4:	f002 fb8c 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ccc8:	4605      	mov	r5, r0
 801ccca:	b1b8      	cbz	r0, 801ccfc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801cccc:	280a      	cmp	r0, #10
 801ccce:	d015      	beq.n	801ccfc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801ccd0:	9a03      	ldr	r2, [sp, #12]
 801ccd2:	b182      	cbz	r2, 801ccf6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801ccd4:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801ccd8:	4641      	mov	r1, r8
 801ccda:	7a93      	ldrb	r3, [r2, #10]
 801ccdc:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801cce0:	8895      	ldrh	r5, [r2, #4]
 801cce2:	4303      	orrs	r3, r0
 801cce4:	4638      	mov	r0, r7
 801cce6:	9301      	str	r3, [sp, #4]
 801cce8:	683b      	ldr	r3, [r7, #0]
 801ccea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ccec:	4798      	blx	r3
 801ccee:	9b01      	ldr	r3, [sp, #4]
 801ccf0:	4418      	add	r0, r3
 801ccf2:	4406      	add	r6, r0
 801ccf4:	b2b6      	uxth	r6, r6
 801ccf6:	3401      	adds	r4, #1
 801ccf8:	46a8      	mov	r8, r5
 801ccfa:	e7db      	b.n	801ccb4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801ccfc:	4630      	mov	r0, r6
 801ccfe:	b005      	add	sp, #20
 801cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801cd04:	2a02      	cmp	r2, #2
 801cd06:	b530      	push	{r4, r5, lr}
 801cd08:	d011      	beq.n	801cd2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801cd0a:	2a03      	cmp	r2, #3
 801cd0c:	d01c      	beq.n	801cd48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801cd0e:	2a01      	cmp	r2, #1
 801cd10:	d10c      	bne.n	801cd2c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cd12:	888b      	ldrh	r3, [r1, #4]
 801cd14:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801cd18:	8801      	ldrh	r1, [r0, #0]
 801cd1a:	1a9b      	subs	r3, r3, r2
 801cd1c:	8844      	ldrh	r4, [r0, #2]
 801cd1e:	1a5b      	subs	r3, r3, r1
 801cd20:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801cd24:	8004      	strh	r4, [r0, #0]
 801cd26:	8043      	strh	r3, [r0, #2]
 801cd28:	8081      	strh	r1, [r0, #4]
 801cd2a:	80c2      	strh	r2, [r0, #6]
 801cd2c:	bd30      	pop	{r4, r5, pc}
 801cd2e:	88cb      	ldrh	r3, [r1, #6]
 801cd30:	88c2      	ldrh	r2, [r0, #6]
 801cd32:	1a9b      	subs	r3, r3, r2
 801cd34:	8842      	ldrh	r2, [r0, #2]
 801cd36:	1a9b      	subs	r3, r3, r2
 801cd38:	888a      	ldrh	r2, [r1, #4]
 801cd3a:	8881      	ldrh	r1, [r0, #4]
 801cd3c:	8043      	strh	r3, [r0, #2]
 801cd3e:	1a52      	subs	r2, r2, r1
 801cd40:	8801      	ldrh	r1, [r0, #0]
 801cd42:	1a52      	subs	r2, r2, r1
 801cd44:	8002      	strh	r2, [r0, #0]
 801cd46:	e7f1      	b.n	801cd2c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801cd48:	88cb      	ldrh	r3, [r1, #6]
 801cd4a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801cd4e:	8841      	ldrh	r1, [r0, #2]
 801cd50:	1a9b      	subs	r3, r3, r2
 801cd52:	f9b0 5000 	ldrsh.w	r5, [r0]
 801cd56:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801cd5a:	1a5b      	subs	r3, r3, r1
 801cd5c:	8045      	strh	r5, [r0, #2]
 801cd5e:	8082      	strh	r2, [r0, #4]
 801cd60:	8003      	strh	r3, [r0, #0]
 801cd62:	80c4      	strh	r4, [r0, #6]
 801cd64:	e7e2      	b.n	801cd2c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801cd68 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801cd68:	b570      	push	{r4, r5, r6, lr}
 801cd6a:	b086      	sub	sp, #24
 801cd6c:	ac02      	add	r4, sp, #8
 801cd6e:	e884 0006 	stmia.w	r4, {r1, r2}
 801cd72:	461a      	mov	r2, r3
 801cd74:	ab0c      	add	r3, sp, #48	; 0x30
 801cd76:	9305      	str	r3, [sp, #20]
 801cd78:	4b0a      	ldr	r3, [pc, #40]	; (801cda4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801cd7a:	685d      	ldr	r5, [r3, #4]
 801cd7c:	1069      	asrs	r1, r5, #1
 801cd7e:	07ed      	lsls	r5, r5, #31
 801cd80:	eb00 0601 	add.w	r6, r0, r1
 801cd84:	bf46      	itte	mi
 801cd86:	681b      	ldrmi	r3, [r3, #0]
 801cd88:	5841      	ldrmi	r1, [r0, r1]
 801cd8a:	681d      	ldrpl	r5, [r3, #0]
 801cd8c:	4630      	mov	r0, r6
 801cd8e:	bf48      	it	mi
 801cd90:	58cd      	ldrmi	r5, [r1, r3]
 801cd92:	4621      	mov	r1, r4
 801cd94:	9b05      	ldr	r3, [sp, #20]
 801cd96:	9301      	str	r3, [sp, #4]
 801cd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd9a:	9300      	str	r3, [sp, #0]
 801cd9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd9e:	47a8      	blx	r5
 801cda0:	b006      	add	sp, #24
 801cda2:	bd70      	pop	{r4, r5, r6, pc}
 801cda4:	20000030 	.word	0x20000030

0801cda8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdac:	b09d      	sub	sp, #116	; 0x74
 801cdae:	9114      	str	r1, [sp, #80]	; 0x50
 801cdb0:	9315      	str	r3, [sp, #84]	; 0x54
 801cdb2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801cdb4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cdb6:	8809      	ldrh	r1, [r1, #0]
 801cdb8:	889b      	ldrh	r3, [r3, #4]
 801cdba:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801cdbc:	440b      	add	r3, r1
 801cdbe:	9210      	str	r2, [sp, #64]	; 0x40
 801cdc0:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801cdc4:	b21b      	sxth	r3, r3
 801cdc6:	900f      	str	r0, [sp, #60]	; 0x3c
 801cdc8:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801cdcc:	930e      	str	r3, [sp, #56]	; 0x38
 801cdce:	6833      	ldr	r3, [r6, #0]
 801cdd0:	7a59      	ldrb	r1, [r3, #9]
 801cdd2:	7a1b      	ldrb	r3, [r3, #8]
 801cdd4:	9113      	str	r1, [sp, #76]	; 0x4c
 801cdd6:	9312      	str	r3, [sp, #72]	; 0x48
 801cdd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cdda:	f9b3 4000 	ldrsh.w	r4, [r3]
 801cdde:	2a00      	cmp	r2, #0
 801cde0:	d059      	beq.n	801ce96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801cde2:	7c33      	ldrb	r3, [r6, #16]
 801cde4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cde6:	2b04      	cmp	r3, #4
 801cde8:	bf14      	ite	ne
 801cdea:	2301      	movne	r3, #1
 801cdec:	2302      	moveq	r3, #2
 801cdee:	4413      	add	r3, r2
 801cdf0:	f04f 0800 	mov.w	r8, #0
 801cdf4:	930d      	str	r3, [sp, #52]	; 0x34
 801cdf6:	4645      	mov	r5, r8
 801cdf8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801cdfc:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801ce00:	4293      	cmp	r3, r2
 801ce02:	da75      	bge.n	801cef0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801ce04:	2300      	movs	r3, #0
 801ce06:	992b      	ldr	r1, [sp, #172]	; 0xac
 801ce08:	6832      	ldr	r2, [r6, #0]
 801ce0a:	931a      	str	r3, [sp, #104]	; 0x68
 801ce0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce0e:	428b      	cmp	r3, r1
 801ce10:	db43      	blt.n	801ce9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801ce12:	6813      	ldr	r3, [r2, #0]
 801ce14:	4610      	mov	r0, r2
 801ce16:	695b      	ldr	r3, [r3, #20]
 801ce18:	4798      	blx	r3
 801ce1a:	4681      	mov	r9, r0
 801ce1c:	6830      	ldr	r0, [r6, #0]
 801ce1e:	aa1b      	add	r2, sp, #108	; 0x6c
 801ce20:	4649      	mov	r1, r9
 801ce22:	6803      	ldr	r3, [r0, #0]
 801ce24:	689f      	ldr	r7, [r3, #8]
 801ce26:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801ce2a:	47b8      	blx	r7
 801ce2c:	901a      	str	r0, [sp, #104]	; 0x68
 801ce2e:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801ce32:	45d1      	cmp	r9, sl
 801ce34:	d045      	beq.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ce36:	f242 070b 	movw	r7, #8203	; 0x200b
 801ce3a:	45b9      	cmp	r9, r7
 801ce3c:	d041      	beq.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ce3e:	f1b9 0f00 	cmp.w	r9, #0
 801ce42:	f000 80ee 	beq.w	801d022 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801ce46:	f1b9 0f0a 	cmp.w	r9, #10
 801ce4a:	d057      	beq.n	801cefc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ce4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ce4e:	b383      	cbz	r3, 801ceb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801ce50:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801ce54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ce56:	2a00      	cmp	r2, #0
 801ce58:	f000 80d2 	beq.w	801d000 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801ce5c:	f1bb 0f00 	cmp.w	fp, #0
 801ce60:	d100      	bne.n	801ce64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801ce62:	4444      	add	r4, r8
 801ce64:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801ce68:	f1bb 0f01 	cmp.w	fp, #1
 801ce6c:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801ce70:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ce74:	ea48 0803 	orr.w	r8, r8, r3
 801ce78:	d128      	bne.n	801cecc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801ce7a:	eba4 0408 	sub.w	r4, r4, r8
 801ce7e:	2d00      	cmp	r5, #0
 801ce80:	d143      	bne.n	801cf0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801ce82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce84:	eb08 0304 	add.w	r3, r8, r4
 801ce88:	4413      	add	r3, r2
 801ce8a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ce8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ce90:	4293      	cmp	r3, r2
 801ce92:	da44      	bge.n	801cf1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ce94:	e02b      	b.n	801ceee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801ce96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ce98:	e7aa      	b.n	801cdf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801ce9a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801ce9e:	4659      	mov	r1, fp
 801cea0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801cea2:	9301      	str	r3, [sp, #4]
 801cea4:	ab1b      	add	r3, sp, #108	; 0x6c
 801cea6:	9300      	str	r3, [sp, #0]
 801cea8:	ab1a      	add	r3, sp, #104	; 0x68
 801ceaa:	f002 facd 	bl	801f448 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801ceae:	4681      	mov	r9, r0
 801ceb0:	e7bd      	b.n	801ce2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801ceb2:	6830      	ldr	r0, [r6, #0]
 801ceb4:	6803      	ldr	r3, [r0, #0]
 801ceb6:	691b      	ldr	r3, [r3, #16]
 801ceb8:	4798      	blx	r3
 801ceba:	4550      	cmp	r0, sl
 801cebc:	d001      	beq.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801cebe:	42b8      	cmp	r0, r7
 801cec0:	d1c8      	bne.n	801ce54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801cec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cec4:	464d      	mov	r5, r9
 801cec6:	3301      	adds	r3, #1
 801cec8:	930c      	str	r3, [sp, #48]	; 0x30
 801ceca:	e797      	b.n	801cdfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801cecc:	2d00      	cmp	r5, #0
 801cece:	f000 80aa 	beq.w	801d026 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801ced2:	f1bb 0f00 	cmp.w	fp, #0
 801ced6:	d118      	bne.n	801cf0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801ced8:	6830      	ldr	r0, [r6, #0]
 801ceda:	4629      	mov	r1, r5
 801cedc:	6803      	ldr	r3, [r0, #0]
 801cede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cee0:	4798      	blx	r3
 801cee2:	4404      	add	r4, r0
 801cee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cee8:	1ae3      	subs	r3, r4, r3
 801ceea:	4293      	cmp	r3, r2
 801ceec:	dd17      	ble.n	801cf1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ceee:	464d      	mov	r5, r9
 801cef0:	2d00      	cmp	r5, #0
 801cef2:	f000 8096 	beq.w	801d022 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801cef6:	2d0a      	cmp	r5, #10
 801cef8:	f040 8084 	bne.w	801d004 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801cefc:	250a      	movs	r5, #10
 801cefe:	fab5 f085 	clz	r0, r5
 801cf02:	0940      	lsrs	r0, r0, #5
 801cf04:	b01d      	add	sp, #116	; 0x74
 801cf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf0a:	6830      	ldr	r0, [r6, #0]
 801cf0c:	4629      	mov	r1, r5
 801cf0e:	6803      	ldr	r3, [r0, #0]
 801cf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cf12:	4798      	blx	r3
 801cf14:	f1bb 0f01 	cmp.w	fp, #1
 801cf18:	eba4 0400 	sub.w	r4, r4, r0
 801cf1c:	d0b1      	beq.n	801ce82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801cf1e:	981a      	ldr	r0, [sp, #104]	; 0x68
 801cf20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cf22:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801cf26:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cf2a:	7b43      	ldrb	r3, [r0, #13]
 801cf2c:	4421      	add	r1, r4
 801cf2e:	015b      	lsls	r3, r3, #5
 801cf30:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cf34:	7983      	ldrb	r3, [r0, #6]
 801cf36:	4313      	orrs	r3, r2
 801cf38:	440b      	add	r3, r1
 801cf3a:	42ab      	cmp	r3, r5
 801cf3c:	dbc1      	blt.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801cf3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf40:	4299      	cmp	r1, r3
 801cf42:	dabe      	bge.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801cf44:	6830      	ldr	r0, [r6, #0]
 801cf46:	42a5      	cmp	r5, r4
 801cf48:	6803      	ldr	r3, [r0, #0]
 801cf4a:	bfcc      	ite	gt
 801cf4c:	1b2d      	subgt	r5, r5, r4
 801cf4e:	2500      	movle	r5, #0
 801cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf52:	bfc8      	it	gt
 801cf54:	b2ad      	uxthgt	r5, r5
 801cf56:	4798      	blx	r3
 801cf58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801cf5a:	4935      	ldr	r1, [pc, #212]	; (801d030 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801cf5c:	7b5a      	ldrb	r2, [r3, #13]
 801cf5e:	f893 e008 	ldrb.w	lr, [r3, #8]
 801cf62:	f012 0f40 	tst.w	r2, #64	; 0x40
 801cf66:	bf18      	it	ne
 801cf68:	468c      	movne	ip, r1
 801cf6a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801cf6c:	bf08      	it	eq
 801cf6e:	f04f 0c00 	moveq.w	ip, #0
 801cf72:	4408      	add	r0, r1
 801cf74:	00d1      	lsls	r1, r2, #3
 801cf76:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cf7a:	ea41 070e 	orr.w	r7, r1, lr
 801cf7e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801cf80:	ea4c 0707 	orr.w	r7, ip, r7
 801cf84:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801cf88:	1bc7      	subs	r7, r0, r7
 801cf8a:	b2bf      	uxth	r7, r7
 801cf8c:	fa0f fa87 	sxth.w	sl, r7
 801cf90:	4551      	cmp	r1, sl
 801cf92:	dd33      	ble.n	801cffc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801cf94:	0112      	lsls	r2, r2, #4
 801cf96:	79d8      	ldrb	r0, [r3, #7]
 801cf98:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cf9c:	4302      	orrs	r2, r0
 801cf9e:	4492      	add	sl, r2
 801cfa0:	4551      	cmp	r1, sl
 801cfa2:	dc8e      	bgt.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801cfa4:	1bcf      	subs	r7, r1, r7
 801cfa6:	468a      	mov	sl, r1
 801cfa8:	b2bf      	uxth	r7, r7
 801cfaa:	9317      	str	r3, [sp, #92]	; 0x5c
 801cfac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfae:	6830      	ldr	r0, [r6, #0]
 801cfb0:	681a      	ldr	r2, [r3, #0]
 801cfb2:	6801      	ldr	r1, [r0, #0]
 801cfb4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801cfb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cfb8:	9311      	str	r3, [sp, #68]	; 0x44
 801cfba:	9216      	str	r2, [sp, #88]	; 0x58
 801cfbc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801cfbe:	4788      	blx	r1
 801cfc0:	79b1      	ldrb	r1, [r6, #6]
 801cfc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cfc4:	910b      	str	r1, [sp, #44]	; 0x2c
 801cfc6:	7bb1      	ldrb	r1, [r6, #14]
 801cfc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cfca:	910a      	str	r1, [sp, #40]	; 0x28
 801cfcc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801cfd0:	9109      	str	r1, [sp, #36]	; 0x24
 801cfd2:	68b1      	ldr	r1, [r6, #8]
 801cfd4:	9305      	str	r3, [sp, #20]
 801cfd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cfd8:	9206      	str	r2, [sp, #24]
 801cfda:	e9cd a501 	strd	sl, r5, [sp, #4]
 801cfde:	4425      	add	r5, r4
 801cfe0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801cfe4:	b22d      	sxth	r5, r5
 801cfe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cfe8:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801cfec:	9500      	str	r5, [sp, #0]
 801cfee:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cff0:	681a      	ldr	r2, [r3, #0]
 801cff2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801cff4:	685b      	ldr	r3, [r3, #4]
 801cff6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cff8:	47a8      	blx	r5
 801cffa:	e762      	b.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801cffc:	2700      	movs	r7, #0
 801cffe:	e7d4      	b.n	801cfaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801d000:	4690      	mov	r8, r2
 801d002:	e75e      	b.n	801cec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801d004:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d006:	3401      	adds	r4, #1
 801d008:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d00a:	429c      	cmp	r4, r3
 801d00c:	f6bf af77 	bge.w	801cefe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801d010:	4659      	mov	r1, fp
 801d012:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801d014:	f002 f9a4 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d018:	4605      	mov	r5, r0
 801d01a:	b110      	cbz	r0, 801d022 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801d01c:	280a      	cmp	r0, #10
 801d01e:	d1f2      	bne.n	801d006 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801d020:	e76c      	b.n	801cefc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801d022:	2500      	movs	r5, #0
 801d024:	e76b      	b.n	801cefe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801d026:	f1bb 0f00 	cmp.w	fp, #0
 801d02a:	f43f af5b 	beq.w	801cee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801d02e:	e776      	b.n	801cf1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801d030:	fffffe00 	.word	0xfffffe00

0801d034 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801d034:	b530      	push	{r4, r5, lr}
 801d036:	8a44      	ldrh	r4, [r0, #18]
 801d038:	8ac5      	ldrh	r5, [r0, #22]
 801d03a:	82c3      	strh	r3, [r0, #22]
 801d03c:	442c      	add	r4, r5
 801d03e:	1ae4      	subs	r4, r4, r3
 801d040:	8b03      	ldrh	r3, [r0, #24]
 801d042:	8244      	strh	r4, [r0, #18]
 801d044:	8a84      	ldrh	r4, [r0, #20]
 801d046:	4422      	add	r2, r4
 801d048:	440c      	add	r4, r1
 801d04a:	1a59      	subs	r1, r3, r1
 801d04c:	8342      	strh	r2, [r0, #26]
 801d04e:	8284      	strh	r4, [r0, #20]
 801d050:	8301      	strh	r1, [r0, #24]
 801d052:	bd30      	pop	{r4, r5, pc}

0801d054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d058:	7a45      	ldrb	r5, [r0, #9]
 801d05a:	b085      	sub	sp, #20
 801d05c:	4604      	mov	r4, r0
 801d05e:	4689      	mov	r9, r1
 801d060:	1eeb      	subs	r3, r5, #3
 801d062:	b2db      	uxtb	r3, r3
 801d064:	b329      	cbz	r1, 801d0b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801d066:	2b01      	cmp	r3, #1
 801d068:	d921      	bls.n	801d0ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801d06a:	1e69      	subs	r1, r5, #1
 801d06c:	f1d1 0b00 	rsbs	fp, r1, #0
 801d070:	eb4b 0b01 	adc.w	fp, fp, r1
 801d074:	1eaa      	subs	r2, r5, #2
 801d076:	2500      	movs	r5, #0
 801d078:	4253      	negs	r3, r2
 801d07a:	9500      	str	r5, [sp, #0]
 801d07c:	4153      	adcs	r3, r2
 801d07e:	9301      	str	r3, [sp, #4]
 801d080:	2600      	movs	r6, #0
 801d082:	f242 080b 	movw	r8, #8203	; 0x200b
 801d086:	8266      	strh	r6, [r4, #18]
 801d088:	82a6      	strh	r6, [r4, #20]
 801d08a:	2300      	movs	r3, #0
 801d08c:	68e2      	ldr	r2, [r4, #12]
 801d08e:	7a21      	ldrb	r1, [r4, #8]
 801d090:	9303      	str	r3, [sp, #12]
 801d092:	ab03      	add	r3, sp, #12
 801d094:	6860      	ldr	r0, [r4, #4]
 801d096:	8827      	ldrh	r7, [r4, #0]
 801d098:	f002 f9a2 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d09c:	8020      	strh	r0, [r4, #0]
 801d09e:	b9b0      	cbnz	r0, 801d0ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801d0a0:	8b22      	ldrh	r2, [r4, #24]
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	4611      	mov	r1, r2
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	f7ff ffc4 	bl	801d034 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d0ac:	e062      	b.n	801d174 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801d0ae:	468b      	mov	fp, r1
 801d0b0:	e7e0      	b.n	801d074 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801d0b2:	2b01      	cmp	r3, #1
 801d0b4:	f105 35ff 	add.w	r5, r5, #4294967295
 801d0b8:	9101      	str	r1, [sp, #4]
 801d0ba:	468b      	mov	fp, r1
 801d0bc:	bf8c      	ite	hi
 801d0be:	2300      	movhi	r3, #0
 801d0c0:	2301      	movls	r3, #1
 801d0c2:	2d01      	cmp	r5, #1
 801d0c4:	9300      	str	r3, [sp, #0]
 801d0c6:	bf8c      	ite	hi
 801d0c8:	2500      	movhi	r5, #0
 801d0ca:	2501      	movls	r5, #1
 801d0cc:	e7d8      	b.n	801d080 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801d0ce:	8ae3      	ldrh	r3, [r4, #22]
 801d0d0:	280a      	cmp	r0, #10
 801d0d2:	f103 0301 	add.w	r3, r3, #1
 801d0d6:	82e3      	strh	r3, [r4, #22]
 801d0d8:	d0e2      	beq.n	801d0a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801d0da:	9a03      	ldr	r2, [sp, #12]
 801d0dc:	b972      	cbnz	r2, 801d0fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801d0de:	4540      	cmp	r0, r8
 801d0e0:	d1d3      	bne.n	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d0e2:	8823      	ldrh	r3, [r4, #0]
 801d0e4:	8b21      	ldrh	r1, [r4, #24]
 801d0e6:	2b20      	cmp	r3, #32
 801d0e8:	d001      	beq.n	801d0ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801d0ea:	4543      	cmp	r3, r8
 801d0ec:	d11d      	bne.n	801d12a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801d0ee:	2f20      	cmp	r7, #32
 801d0f0:	d002      	beq.n	801d0f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801d0f2:	4547      	cmp	r7, r8
 801d0f4:	bf18      	it	ne
 801d0f6:	460e      	movne	r6, r1
 801d0f8:	2001      	movs	r0, #1
 801d0fa:	e017      	b.n	801d12c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801d0fc:	4540      	cmp	r0, r8
 801d0fe:	d012      	beq.n	801d126 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801d100:	8893      	ldrh	r3, [r2, #4]
 801d102:	4639      	mov	r1, r7
 801d104:	8023      	strh	r3, [r4, #0]
 801d106:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801d10a:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801d10e:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801d112:	ea4a 0a00 	orr.w	sl, sl, r0
 801d116:	68e0      	ldr	r0, [r4, #12]
 801d118:	6803      	ldr	r3, [r0, #0]
 801d11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d11c:	4798      	blx	r3
 801d11e:	eb0a 0200 	add.w	r2, sl, r0
 801d122:	b292      	uxth	r2, r2
 801d124:	e7dd      	b.n	801d0e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801d126:	2200      	movs	r2, #0
 801d128:	e7db      	b.n	801d0e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801d12a:	2000      	movs	r0, #0
 801d12c:	440a      	add	r2, r1
 801d12e:	8aa3      	ldrh	r3, [r4, #20]
 801d130:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801d134:	b292      	uxth	r2, r2
 801d136:	8322      	strh	r2, [r4, #24]
 801d138:	4413      	add	r3, r2
 801d13a:	f1b9 0f00 	cmp.w	r9, #0
 801d13e:	d022      	beq.n	801d186 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801d140:	f1bb 0f00 	cmp.w	fp, #0
 801d144:	d102      	bne.n	801d14c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801d146:	9901      	ldr	r1, [sp, #4]
 801d148:	b149      	cbz	r1, 801d15e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801d14a:	b140      	cbz	r0, 801d15e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801d14c:	8ba1      	ldrh	r1, [r4, #28]
 801d14e:	4419      	add	r1, r3
 801d150:	458c      	cmp	ip, r1
 801d152:	da12      	bge.n	801d17a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801d154:	8a61      	ldrh	r1, [r4, #18]
 801d156:	b181      	cbz	r1, 801d17a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801d158:	4563      	cmp	r3, ip
 801d15a:	dd96      	ble.n	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d15c:	e004      	b.n	801d168 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801d15e:	4563      	cmp	r3, ip
 801d160:	dd93      	ble.n	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d162:	8a63      	ldrh	r3, [r4, #18]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d090      	beq.n	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d168:	2301      	movs	r3, #1
 801d16a:	8ba2      	ldrh	r2, [r4, #28]
 801d16c:	77a3      	strb	r3, [r4, #30]
 801d16e:	8b63      	ldrh	r3, [r4, #26]
 801d170:	4413      	add	r3, r2
 801d172:	8363      	strh	r3, [r4, #26]
 801d174:	b005      	add	sp, #20
 801d176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d17a:	2300      	movs	r3, #0
 801d17c:	4611      	mov	r1, r2
 801d17e:	4620      	mov	r0, r4
 801d180:	f7ff ff58 	bl	801d034 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d184:	e781      	b.n	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d186:	4563      	cmp	r3, ip
 801d188:	dd16      	ble.n	801d1b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801d18a:	9b00      	ldr	r3, [sp, #0]
 801d18c:	b113      	cbz	r3, 801d194 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801d18e:	2301      	movs	r3, #1
 801d190:	460a      	mov	r2, r1
 801d192:	e787      	b.n	801d0a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801d194:	2d00      	cmp	r5, #0
 801d196:	f43f af78 	beq.w	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d19a:	2800      	cmp	r0, #0
 801d19c:	f47f af75 	bne.w	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d1a0:	2f20      	cmp	r7, #32
 801d1a2:	d001      	beq.n	801d1a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801d1a4:	4547      	cmp	r7, r8
 801d1a6:	d102      	bne.n	801d1ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	4632      	mov	r2, r6
 801d1ac:	e77b      	b.n	801d0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801d1ae:	8a63      	ldrh	r3, [r4, #18]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	f43f af6a 	beq.w	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d1b6:	e7dd      	b.n	801d174 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	f47f af66 	bne.w	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d1be:	2f20      	cmp	r7, #32
 801d1c0:	d002      	beq.n	801d1c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801d1c2:	4547      	cmp	r7, r8
 801d1c4:	f47f af61 	bne.w	801d08a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801d1c8:	2301      	movs	r3, #1
 801d1ca:	4632      	mov	r2, r6
 801d1cc:	e7d7      	b.n	801d17e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801d1ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801d1ce:	b570      	push	{r4, r5, r6, lr}
 801d1d0:	4606      	mov	r6, r0
 801d1d2:	b08a      	sub	sp, #40	; 0x28
 801d1d4:	4615      	mov	r5, r2
 801d1d6:	b191      	cbz	r1, 801d1fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801d1d8:	2401      	movs	r4, #1
 801d1da:	e9cd 3100 	strd	r3, r1, [sp]
 801d1de:	4613      	mov	r3, r2
 801d1e0:	4601      	mov	r1, r0
 801d1e2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801d1e6:	a802      	add	r0, sp, #8
 801d1e8:	f7ff fd20 	bl	801cc2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801d1ec:	2100      	movs	r1, #0
 801d1ee:	a802      	add	r0, sp, #8
 801d1f0:	f7ff ff30 	bl	801d054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d1f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d1f8:	b173      	cbz	r3, 801d218 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801d1fa:	3401      	adds	r4, #1
 801d1fc:	e7f6      	b.n	801d1ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801d1fe:	2401      	movs	r4, #1
 801d200:	4611      	mov	r1, r2
 801d202:	f002 f8ad 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d206:	280a      	cmp	r0, #10
 801d208:	4629      	mov	r1, r5
 801d20a:	4630      	mov	r0, r6
 801d20c:	bf08      	it	eq
 801d20e:	3401      	addeq	r4, #1
 801d210:	f002 f8a6 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d214:	2800      	cmp	r0, #0
 801d216:	d1f6      	bne.n	801d206 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801d218:	b2a0      	uxth	r0, r4
 801d21a:	b00a      	add	sp, #40	; 0x28
 801d21c:	bd70      	pop	{r4, r5, r6, pc}

0801d21e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801d21e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d222:	b0db      	sub	sp, #364	; 0x16c
 801d224:	468a      	mov	sl, r1
 801d226:	461c      	mov	r4, r3
 801d228:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801d22c:	9009      	str	r0, [sp, #36]	; 0x24
 801d22e:	f1bb 0f00 	cmp.w	fp, #0
 801d232:	f000 80c7 	beq.w	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f000 80c3 	beq.w	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d23e:	7ba3      	ldrb	r3, [r4, #14]
 801d240:	2b00      	cmp	r3, #0
 801d242:	f000 80bf 	beq.w	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d246:	af0c      	add	r7, sp, #48	; 0x30
 801d248:	6810      	ldr	r0, [r2, #0]
 801d24a:	6851      	ldr	r1, [r2, #4]
 801d24c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801d250:	463b      	mov	r3, r7
 801d252:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801d256:	c303      	stmia	r3!, {r0, r1}
 801d258:	2100      	movs	r1, #0
 801d25a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801d25e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801d262:	4638      	mov	r0, r7
 801d264:	910e      	str	r1, [sp, #56]	; 0x38
 801d266:	a90e      	add	r1, sp, #56	; 0x38
 801d268:	79a2      	ldrb	r2, [r4, #6]
 801d26a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d26e:	f7ff fd49 	bl	801cd04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d272:	a90e      	add	r1, sp, #56	; 0x38
 801d274:	79a2      	ldrb	r2, [r4, #6]
 801d276:	4608      	mov	r0, r1
 801d278:	f7ff fd44 	bl	801cd04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d27c:	4648      	mov	r0, r9
 801d27e:	f001 ff2d 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801d282:	6820      	ldr	r0, [r4, #0]
 801d284:	6803      	ldr	r3, [r0, #0]
 801d286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d288:	4798      	blx	r3
 801d28a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801d28c:	4603      	mov	r3, r0
 801d28e:	4659      	mov	r1, fp
 801d290:	4648      	mov	r0, r9
 801d292:	f001 ff40 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d296:	a82e      	add	r0, sp, #184	; 0xb8
 801d298:	f001 ff20 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801d29c:	f894 8004 	ldrb.w	r8, [r4, #4]
 801d2a0:	f1b8 0f00 	cmp.w	r8, #0
 801d2a4:	d009      	beq.n	801d2ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801d2a6:	6820      	ldr	r0, [r4, #0]
 801d2a8:	6803      	ldr	r3, [r0, #0]
 801d2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2ac:	4798      	blx	r3
 801d2ae:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801d2b0:	4603      	mov	r3, r0
 801d2b2:	4659      	mov	r1, fp
 801d2b4:	a82e      	add	r0, sp, #184	; 0xb8
 801d2b6:	f001 ff2e 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d2ba:	6820      	ldr	r0, [r4, #0]
 801d2bc:	6803      	ldr	r3, [r0, #0]
 801d2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2c0:	4798      	blx	r3
 801d2c2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d2c6:	182e      	adds	r6, r5, r0
 801d2c8:	2e00      	cmp	r6, #0
 801d2ca:	dd45      	ble.n	801d358 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801d2cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d2d0:	4283      	cmp	r3, r0
 801d2d2:	db41      	blt.n	801d358 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801d2d4:	441d      	add	r5, r3
 801d2d6:	fb95 f5f6 	sdiv	r5, r5, r6
 801d2da:	a844      	add	r0, sp, #272	; 0x110
 801d2dc:	f001 fefe 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801d2e0:	7c23      	ldrb	r3, [r4, #16]
 801d2e2:	b14b      	cbz	r3, 801d2f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801d2e4:	6820      	ldr	r0, [r4, #0]
 801d2e6:	6803      	ldr	r3, [r0, #0]
 801d2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2ea:	4798      	blx	r3
 801d2ec:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	4659      	mov	r1, fp
 801d2f2:	a844      	add	r0, sp, #272	; 0x110
 801d2f4:	f001 ff0f 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801d2f8:	7c21      	ldrb	r1, [r4, #16]
 801d2fa:	a810      	add	r0, sp, #64	; 0x40
 801d2fc:	7963      	ldrb	r3, [r4, #5]
 801d2fe:	9101      	str	r1, [sp, #4]
 801d300:	6821      	ldr	r1, [r4, #0]
 801d302:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d306:	9100      	str	r1, [sp, #0]
 801d308:	a944      	add	r1, sp, #272	; 0x110
 801d30a:	f7ff fc8f 	bl	801cc2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801d30e:	7c23      	ldrb	r3, [r4, #16]
 801d310:	bb23      	cbnz	r3, 801d35c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801d312:	fa1f fb86 	uxth.w	fp, r6
 801d316:	2d00      	cmp	r5, #0
 801d318:	dd57      	ble.n	801d3ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801d31a:	7961      	ldrb	r1, [r4, #5]
 801d31c:	4648      	mov	r0, r9
 801d31e:	f002 f81f 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d322:	4603      	mov	r3, r0
 801d324:	f1b8 0f00 	cmp.w	r8, #0
 801d328:	d005      	beq.n	801d336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801d32a:	9008      	str	r0, [sp, #32]
 801d32c:	a82e      	add	r0, sp, #184	; 0xb8
 801d32e:	7961      	ldrb	r1, [r4, #5]
 801d330:	f002 f816 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d334:	9b08      	ldr	r3, [sp, #32]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d044      	beq.n	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d33a:	2b0a      	cmp	r3, #10
 801d33c:	d1eb      	bne.n	801d316 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801d33e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801d342:	3d01      	subs	r5, #1
 801d344:	445b      	add	r3, fp
 801d346:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d34a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801d34e:	eba3 030b 	sub.w	r3, r3, fp
 801d352:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d356:	e7de      	b.n	801d316 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801d358:	2500      	movs	r5, #0
 801d35a:	e7be      	b.n	801d2da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801d35c:	0073      	lsls	r3, r6, #1
 801d35e:	9308      	str	r3, [sp, #32]
 801d360:	2d00      	cmp	r5, #0
 801d362:	dd32      	ble.n	801d3ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801d364:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801d368:	a810      	add	r0, sp, #64	; 0x40
 801d36a:	9b08      	ldr	r3, [sp, #32]
 801d36c:	428b      	cmp	r3, r1
 801d36e:	bfd4      	ite	le
 801d370:	2100      	movle	r1, #0
 801d372:	2101      	movgt	r1, #1
 801d374:	f7ff fe6e 	bl	801d054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d378:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801d37c:	f10b 33ff 	add.w	r3, fp, #4294967295
 801d380:	fa1f fb83 	uxth.w	fp, r3
 801d384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d388:	459b      	cmp	fp, r3
 801d38a:	d00b      	beq.n	801d3a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801d38c:	7961      	ldrb	r1, [r4, #5]
 801d38e:	4648      	mov	r0, r9
 801d390:	f001 ffe6 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d394:	f1b8 0f00 	cmp.w	r8, #0
 801d398:	d0f0      	beq.n	801d37c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801d39a:	7961      	ldrb	r1, [r4, #5]
 801d39c:	a82e      	add	r0, sp, #184	; 0xb8
 801d39e:	f001 ffdf 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d3a2:	e7eb      	b.n	801d37c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801d3a4:	b2b3      	uxth	r3, r6
 801d3a6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d3aa:	3d01      	subs	r5, #1
 801d3ac:	441a      	add	r2, r3
 801d3ae:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801d3b2:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801d3b6:	1ad3      	subs	r3, r2, r3
 801d3b8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d3bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d1cd      	bne.n	801d360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801d3c4:	b05b      	add	sp, #364	; 0x16c
 801d3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ca:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801d3ce:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801d3d2:	7c23      	ldrb	r3, [r4, #16]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d05f      	beq.n	801d498 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801d3d8:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801d3dc:	a810      	add	r0, sp, #64	; 0x40
 801d3de:	458b      	cmp	fp, r1
 801d3e0:	bfd4      	ite	le
 801d3e2:	2100      	movle	r1, #0
 801d3e4:	2101      	movgt	r1, #1
 801d3e6:	f7ff fe35 	bl	801d054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d3ea:	f1b8 0f00 	cmp.w	r8, #0
 801d3ee:	d04c      	beq.n	801d48a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801d3f0:	7c23      	ldrb	r3, [r4, #16]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d053      	beq.n	801d49e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801d3f6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801d3fa:	7922      	ldrb	r2, [r4, #4]
 801d3fc:	2a01      	cmp	r2, #1
 801d3fe:	d13c      	bne.n	801d47a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801d400:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801d404:	1ac0      	subs	r0, r0, r3
 801d406:	2302      	movs	r3, #2
 801d408:	fb90 f0f3 	sdiv	r0, r0, r3
 801d40c:	b200      	sxth	r0, r0
 801d40e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d412:	4418      	add	r0, r3
 801d414:	7c23      	ldrb	r3, [r4, #16]
 801d416:	8028      	strh	r0, [r5, #0]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d03a      	beq.n	801d492 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801d41c:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801d420:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801d424:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d428:	f8cd 9010 	str.w	r9, [sp, #16]
 801d42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d42e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801d432:	2200      	movs	r2, #0
 801d434:	2100      	movs	r1, #0
 801d436:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801d43a:	e9cd 5700 	strd	r5, r7, [sp]
 801d43e:	4652      	mov	r2, sl
 801d440:	f7ff fcb2 	bl	801cda8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801d444:	2800      	cmp	r0, #0
 801d446:	d1bd      	bne.n	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d448:	b2b2      	uxth	r2, r6
 801d44a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801d44e:	4611      	mov	r1, r2
 801d450:	4413      	add	r3, r2
 801d452:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801d456:	b21b      	sxth	r3, r3
 801d458:	1a52      	subs	r2, r2, r1
 801d45a:	7c21      	ldrb	r1, [r4, #16]
 801d45c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d460:	b212      	sxth	r2, r2
 801d462:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801d466:	b109      	cbz	r1, 801d46c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801d468:	42b2      	cmp	r2, r6
 801d46a:	dbab      	blt.n	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d46c:	887a      	ldrh	r2, [r7, #2]
 801d46e:	88f9      	ldrh	r1, [r7, #6]
 801d470:	440a      	add	r2, r1
 801d472:	b212      	sxth	r2, r2
 801d474:	4293      	cmp	r3, r2
 801d476:	ddac      	ble.n	801d3d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801d478:	e7a4      	b.n	801d3c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801d47a:	2a02      	cmp	r2, #2
 801d47c:	d107      	bne.n	801d48e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801d47e:	7be2      	ldrb	r2, [r4, #15]
 801d480:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801d484:	1a80      	subs	r0, r0, r2
 801d486:	1ac0      	subs	r0, r0, r3
 801d488:	e7c0      	b.n	801d40c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801d48a:	7be0      	ldrb	r0, [r4, #15]
 801d48c:	e7bf      	b.n	801d40e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801d48e:	2000      	movs	r0, #0
 801d490:	e7bd      	b.n	801d40e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801d492:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d496:	e7c3      	b.n	801d420 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801d498:	f1b8 0f00 	cmp.w	r8, #0
 801d49c:	d0f5      	beq.n	801d48a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801d49e:	2300      	movs	r3, #0
 801d4a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d4a4:	6821      	ldr	r1, [r4, #0]
 801d4a6:	a82e      	add	r0, sp, #184	; 0xb8
 801d4a8:	f7ff fbfa 	bl	801cca0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801d4ac:	b203      	sxth	r3, r0
 801d4ae:	e7a4      	b.n	801d3fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801d4b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801d4b0:	2b02      	cmp	r3, #2
 801d4b2:	b510      	push	{r4, lr}
 801d4b4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d4b8:	d00b      	beq.n	801d4d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801d4ba:	2b03      	cmp	r3, #3
 801d4bc:	d00e      	beq.n	801d4dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801d4be:	2b01      	cmp	r3, #1
 801d4c0:	d001      	beq.n	801d4c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801d4c2:	1860      	adds	r0, r4, r1
 801d4c4:	bd10      	pop	{r4, pc}
 801d4c6:	8880      	ldrh	r0, [r0, #4]
 801d4c8:	4420      	add	r0, r4
 801d4ca:	b200      	sxth	r0, r0
 801d4cc:	1a80      	subs	r0, r0, r2
 801d4ce:	3801      	subs	r0, #1
 801d4d0:	e7f8      	b.n	801d4c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801d4d2:	8880      	ldrh	r0, [r0, #4]
 801d4d4:	4420      	add	r0, r4
 801d4d6:	b200      	sxth	r0, r0
 801d4d8:	1a40      	subs	r0, r0, r1
 801d4da:	e7f8      	b.n	801d4ce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801d4dc:	18a0      	adds	r0, r4, r2
 801d4de:	e7f1      	b.n	801d4c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801d4e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801d4e0:	2b02      	cmp	r3, #2
 801d4e2:	b510      	push	{r4, lr}
 801d4e4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801d4e8:	d006      	beq.n	801d4f8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801d4ea:	2b03      	cmp	r3, #3
 801d4ec:	d00a      	beq.n	801d504 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801d4ee:	2b01      	cmp	r3, #1
 801d4f0:	bf14      	ite	ne
 801d4f2:	18a0      	addne	r0, r4, r2
 801d4f4:	1860      	addeq	r0, r4, r1
 801d4f6:	bd10      	pop	{r4, pc}
 801d4f8:	88c0      	ldrh	r0, [r0, #6]
 801d4fa:	4420      	add	r0, r4
 801d4fc:	b200      	sxth	r0, r0
 801d4fe:	1a80      	subs	r0, r0, r2
 801d500:	3801      	subs	r0, #1
 801d502:	e7f8      	b.n	801d4f6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801d504:	88c0      	ldrh	r0, [r0, #6]
 801d506:	4420      	add	r0, r4
 801d508:	b200      	sxth	r0, r0
 801d50a:	1a40      	subs	r0, r0, r1
 801d50c:	e7f8      	b.n	801d500 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801d510 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801d510:	4b01      	ldr	r3, [pc, #4]	; (801d518 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801d512:	2200      	movs	r2, #0
 801d514:	601a      	str	r2, [r3, #0]
 801d516:	4770      	bx	lr
 801d518:	2000bf40 	.word	0x2000bf40

0801d51c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801d51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d51e:	1e05      	subs	r5, r0, #0
 801d520:	f04f 0601 	mov.w	r6, #1
 801d524:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801d528:	bfba      	itte	lt
 801d52a:	f04f 37ff 	movlt.w	r7, #4294967295
 801d52e:	426d      	neglt	r5, r5
 801d530:	2701      	movge	r7, #1
 801d532:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801d536:	f1be 0f00 	cmp.w	lr, #0
 801d53a:	bfbc      	itt	lt
 801d53c:	f1ce 0e00 	rsblt	lr, lr, #0
 801d540:	427f      	neglt	r7, r7
 801d542:	2c00      	cmp	r4, #0
 801d544:	fa4e f001 	asr.w	r0, lr, r1
 801d548:	fa06 f101 	lsl.w	r1, r6, r1
 801d54c:	bfbc      	itt	lt
 801d54e:	4264      	neglt	r4, r4
 801d550:	427f      	neglt	r7, r7
 801d552:	3901      	subs	r1, #1
 801d554:	ea01 010e 	and.w	r1, r1, lr
 801d558:	434d      	muls	r5, r1
 801d55a:	f8dc 1000 	ldr.w	r1, [ip]
 801d55e:	fb03 1300 	mla	r3, r3, r0, r1
 801d562:	fb95 f1f4 	sdiv	r1, r5, r4
 801d566:	fb04 5511 	mls	r5, r4, r1, r5
 801d56a:	441d      	add	r5, r3
 801d56c:	fb95 f3f4 	sdiv	r3, r5, r4
 801d570:	4419      	add	r1, r3
 801d572:	fb04 5413 	mls	r4, r4, r3, r5
 801d576:	fb02 1000 	mla	r0, r2, r0, r1
 801d57a:	f8cc 4000 	str.w	r4, [ip]
 801d57e:	4378      	muls	r0, r7
 801d580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801d584 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d588:	4c24      	ldr	r4, [pc, #144]	; (801d61c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801d58a:	b086      	sub	sp, #24
 801d58c:	4605      	mov	r5, r0
 801d58e:	6807      	ldr	r7, [r0, #0]
 801d590:	69a3      	ldr	r3, [r4, #24]
 801d592:	b92b      	cbnz	r3, 801d5a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801d594:	6840      	ldr	r0, [r0, #4]
 801d596:	e9c5 7000 	strd	r7, r0, [r5]
 801d59a:	b006      	add	sp, #24
 801d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5a0:	f04f 0802 	mov.w	r8, #2
 801d5a4:	68a2      	ldr	r2, [r4, #8]
 801d5a6:	ae06      	add	r6, sp, #24
 801d5a8:	6820      	ldr	r0, [r4, #0]
 801d5aa:	fb93 f1f8 	sdiv	r1, r3, r8
 801d5ae:	440a      	add	r2, r1
 801d5b0:	69e1      	ldr	r1, [r4, #28]
 801d5b2:	f846 2d04 	str.w	r2, [r6, #-4]!
 801d5b6:	9700      	str	r7, [sp, #0]
 801d5b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801d5ba:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801d5be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d5c0:	f7ff ffac 	bl	801d51c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801d5c4:	69a3      	ldr	r3, [r4, #24]
 801d5c6:	4607      	mov	r7, r0
 801d5c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801d5ca:	9301      	str	r3, [sp, #4]
 801d5cc:	686b      	ldr	r3, [r5, #4]
 801d5ce:	6a21      	ldr	r1, [r4, #32]
 801d5d0:	9300      	str	r3, [sp, #0]
 801d5d2:	9602      	str	r6, [sp, #8]
 801d5d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d5d6:	6860      	ldr	r0, [r4, #4]
 801d5d8:	f7ff ffa0 	bl	801d51c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801d5dc:	69a2      	ldr	r2, [r4, #24]
 801d5de:	6963      	ldr	r3, [r4, #20]
 801d5e0:	4407      	add	r7, r0
 801d5e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d5e4:	68e0      	ldr	r0, [r4, #12]
 801d5e6:	fb92 f8f8 	sdiv	r8, r2, r8
 801d5ea:	4443      	add	r3, r8
 801d5ec:	9305      	str	r3, [sp, #20]
 801d5ee:	682b      	ldr	r3, [r5, #0]
 801d5f0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801d5f4:	9300      	str	r3, [sp, #0]
 801d5f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d5f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801d5fa:	f7ff ff8f 	bl	801d51c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801d5fe:	69a3      	ldr	r3, [r4, #24]
 801d600:	4680      	mov	r8, r0
 801d602:	9602      	str	r6, [sp, #8]
 801d604:	9301      	str	r3, [sp, #4]
 801d606:	686b      	ldr	r3, [r5, #4]
 801d608:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801d60a:	9300      	str	r3, [sp, #0]
 801d60c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801d60e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801d610:	6920      	ldr	r0, [r4, #16]
 801d612:	f7ff ff83 	bl	801d51c <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801d616:	4440      	add	r0, r8
 801d618:	e7bd      	b.n	801d596 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801d61a:	bf00      	nop
 801d61c:	2000bf44 	.word	0x2000bf44

0801d620 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801d620:	4b07      	ldr	r3, [pc, #28]	; (801d640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801d622:	b510      	push	{r4, lr}
 801d624:	781b      	ldrb	r3, [r3, #0]
 801d626:	2b01      	cmp	r3, #1
 801d628:	d108      	bne.n	801d63c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801d62a:	4b06      	ldr	r3, [pc, #24]	; (801d644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801d62c:	880c      	ldrh	r4, [r1, #0]
 801d62e:	881b      	ldrh	r3, [r3, #0]
 801d630:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d634:	3b01      	subs	r3, #1
 801d636:	1b1b      	subs	r3, r3, r4
 801d638:	8003      	strh	r3, [r0, #0]
 801d63a:	800a      	strh	r2, [r1, #0]
 801d63c:	bd10      	pop	{r4, pc}
 801d63e:	bf00      	nop
 801d640:	2000bf0e 	.word	0x2000bf0e
 801d644:	2000bf12 	.word	0x2000bf12

0801d648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801d648:	4b0a      	ldr	r3, [pc, #40]	; (801d674 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801d64a:	b510      	push	{r4, lr}
 801d64c:	781b      	ldrb	r3, [r3, #0]
 801d64e:	2b01      	cmp	r3, #1
 801d650:	d10e      	bne.n	801d670 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801d652:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d656:	8843      	ldrh	r3, [r0, #2]
 801d658:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d65c:	18ca      	adds	r2, r1, r3
 801d65e:	4b06      	ldr	r3, [pc, #24]	; (801d678 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801d660:	8044      	strh	r4, [r0, #2]
 801d662:	881b      	ldrh	r3, [r3, #0]
 801d664:	1a9b      	subs	r3, r3, r2
 801d666:	8003      	strh	r3, [r0, #0]
 801d668:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d66c:	8081      	strh	r1, [r0, #4]
 801d66e:	80c3      	strh	r3, [r0, #6]
 801d670:	bd10      	pop	{r4, pc}
 801d672:	bf00      	nop
 801d674:	2000bf0e 	.word	0x2000bf0e
 801d678:	2000bf0a 	.word	0x2000bf0a

0801d67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801d67c:	4b07      	ldr	r3, [pc, #28]	; (801d69c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801d67e:	b510      	push	{r4, lr}
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	2b01      	cmp	r3, #1
 801d684:	d108      	bne.n	801d698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801d686:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d68a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d68e:	8003      	strh	r3, [r0, #0]
 801d690:	8893      	ldrh	r3, [r2, #4]
 801d692:	3b01      	subs	r3, #1
 801d694:	1b1b      	subs	r3, r3, r4
 801d696:	800b      	strh	r3, [r1, #0]
 801d698:	bd10      	pop	{r4, pc}
 801d69a:	bf00      	nop
 801d69c:	2000bf0e 	.word	0x2000bf0e

0801d6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801d6a0:	4b08      	ldr	r3, [pc, #32]	; (801d6c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801d6a2:	b513      	push	{r0, r1, r4, lr}
 801d6a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d6a8:	2400      	movs	r4, #0
 801d6aa:	4b07      	ldr	r3, [pc, #28]	; (801d6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801d6ac:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d6b0:	466a      	mov	r2, sp
 801d6b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6b6:	9400      	str	r4, [sp, #0]
 801d6b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d6bc:	f7ff ffde 	bl	801d67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d6c0:	b002      	add	sp, #8
 801d6c2:	bd10      	pop	{r4, pc}
 801d6c4:	2000bf0a 	.word	0x2000bf0a
 801d6c8:	2000bf0c 	.word	0x2000bf0c

0801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801d6cc:	4b0a      	ldr	r3, [pc, #40]	; (801d6f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801d6ce:	460a      	mov	r2, r1
 801d6d0:	b510      	push	{r4, lr}
 801d6d2:	781b      	ldrb	r3, [r3, #0]
 801d6d4:	2b01      	cmp	r3, #1
 801d6d6:	d10d      	bne.n	801d6f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801d6d8:	8881      	ldrh	r1, [r0, #4]
 801d6da:	8803      	ldrh	r3, [r0, #0]
 801d6dc:	440b      	add	r3, r1
 801d6de:	4601      	mov	r1, r0
 801d6e0:	3b01      	subs	r3, #1
 801d6e2:	f821 3b02 	strh.w	r3, [r1], #2
 801d6e6:	f7ff ffc9 	bl	801d67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d6ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d6ee:	88c2      	ldrh	r2, [r0, #6]
 801d6f0:	80c3      	strh	r3, [r0, #6]
 801d6f2:	8082      	strh	r2, [r0, #4]
 801d6f4:	bd10      	pop	{r4, pc}
 801d6f6:	bf00      	nop
 801d6f8:	2000bf0e 	.word	0x2000bf0e

0801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801d6fc:	4b09      	ldr	r3, [pc, #36]	; (801d724 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801d6fe:	b507      	push	{r0, r1, r2, lr}
 801d700:	2100      	movs	r1, #0
 801d702:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d706:	4b08      	ldr	r3, [pc, #32]	; (801d728 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801d708:	9100      	str	r1, [sp, #0]
 801d70a:	4669      	mov	r1, sp
 801d70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d710:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d714:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d718:	f7ff ffd8 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d71c:	b003      	add	sp, #12
 801d71e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d722:	bf00      	nop
 801d724:	2000bf0a 	.word	0x2000bf0a
 801d728:	2000bf0c 	.word	0x2000bf0c

0801d72c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801d72c:	4b03      	ldr	r3, [pc, #12]	; (801d73c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801d72e:	6818      	ldr	r0, [r3, #0]
 801d730:	b110      	cbz	r0, 801d738 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801d732:	6803      	ldr	r3, [r0, #0]
 801d734:	699b      	ldr	r3, [r3, #24]
 801d736:	4718      	bx	r3
 801d738:	4770      	bx	lr
 801d73a:	bf00      	nop
 801d73c:	2000bf94 	.word	0x2000bf94

0801d740 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801d740:	4770      	bx	lr
	...

0801d744 <_ZN8touchgfx11Application4drawEv>:
 801d744:	4b09      	ldr	r3, [pc, #36]	; (801d76c <_ZN8touchgfx11Application4drawEv+0x28>)
 801d746:	b507      	push	{r0, r1, r2, lr}
 801d748:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d74c:	2100      	movs	r1, #0
 801d74e:	4b08      	ldr	r3, [pc, #32]	; (801d770 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801d750:	9100      	str	r1, [sp, #0]
 801d752:	4669      	mov	r1, sp
 801d754:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d758:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d75c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d760:	6803      	ldr	r3, [r0, #0]
 801d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d764:	4798      	blx	r3
 801d766:	b003      	add	sp, #12
 801d768:	f85d fb04 	ldr.w	pc, [sp], #4
 801d76c:	2000bf0a 	.word	0x2000bf0a
 801d770:	2000bf0c 	.word	0x2000bf0c

0801d774 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801d774:	4b03      	ldr	r3, [pc, #12]	; (801d784 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801d776:	6818      	ldr	r0, [r3, #0]
 801d778:	b110      	cbz	r0, 801d780 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801d77a:	6803      	ldr	r3, [r0, #0]
 801d77c:	69db      	ldr	r3, [r3, #28]
 801d77e:	4718      	bx	r3
 801d780:	4770      	bx	lr
 801d782:	bf00      	nop
 801d784:	2000bf94 	.word	0x2000bf94

0801d788 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801d788:	4b03      	ldr	r3, [pc, #12]	; (801d798 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801d78a:	6818      	ldr	r0, [r3, #0]
 801d78c:	b110      	cbz	r0, 801d794 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801d78e:	6803      	ldr	r3, [r0, #0]
 801d790:	6a1b      	ldr	r3, [r3, #32]
 801d792:	4718      	bx	r3
 801d794:	4770      	bx	lr
 801d796:	bf00      	nop
 801d798:	2000bf94 	.word	0x2000bf94

0801d79c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801d79c:	4b03      	ldr	r3, [pc, #12]	; (801d7ac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801d79e:	6818      	ldr	r0, [r3, #0]
 801d7a0:	b110      	cbz	r0, 801d7a8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801d7a2:	6803      	ldr	r3, [r0, #0]
 801d7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7a6:	4718      	bx	r3
 801d7a8:	4770      	bx	lr
 801d7aa:	bf00      	nop
 801d7ac:	2000bf94 	.word	0x2000bf94

0801d7b0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801d7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7b4:	4d3a      	ldr	r5, [pc, #232]	; (801d8a0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801d7b6:	4604      	mov	r4, r0
 801d7b8:	6828      	ldr	r0, [r5, #0]
 801d7ba:	b140      	cbz	r0, 801d7ce <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801d7bc:	7a03      	ldrb	r3, [r0, #8]
 801d7be:	b933      	cbnz	r3, 801d7ce <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801d7c0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801d7c4:	6803      	ldr	r3, [r0, #0]
 801d7c6:	689b      	ldr	r3, [r3, #8]
 801d7c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7cc:	4718      	bx	r3
 801d7ce:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801d7d2:	b97b      	cbnz	r3, 801d7f4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801d7d4:	b170      	cbz	r0, 801d7f4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801d7d6:	7a03      	ldrb	r3, [r0, #8]
 801d7d8:	b163      	cbz	r3, 801d7f4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801d7da:	4b32      	ldr	r3, [pc, #200]	; (801d8a4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801d7dc:	6818      	ldr	r0, [r3, #0]
 801d7de:	b110      	cbz	r0, 801d7e6 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801d7e0:	6803      	ldr	r3, [r0, #0]
 801d7e2:	691b      	ldr	r3, [r3, #16]
 801d7e4:	4798      	blx	r3
 801d7e6:	6828      	ldr	r0, [r5, #0]
 801d7e8:	6803      	ldr	r3, [r0, #0]
 801d7ea:	68db      	ldr	r3, [r3, #12]
 801d7ec:	4798      	blx	r3
 801d7ee:	2301      	movs	r3, #1
 801d7f0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801d7f4:	2500      	movs	r5, #0
 801d7f6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801d7fa:	42a8      	cmp	r0, r5
 801d7fc:	dd0c      	ble.n	801d818 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801d7fe:	1963      	adds	r3, r4, r5
 801d800:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801d804:	b132      	cbz	r2, 801d814 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801d806:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801d80a:	4413      	add	r3, r2
 801d80c:	6858      	ldr	r0, [r3, #4]
 801d80e:	6803      	ldr	r3, [r0, #0]
 801d810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d812:	4798      	blx	r3
 801d814:	3501      	adds	r5, #1
 801d816:	e7ee      	b.n	801d7f6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801d818:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801d81c:	3801      	subs	r0, #1
 801d81e:	f04f 0c00 	mov.w	ip, #0
 801d822:	3678      	adds	r6, #120	; 0x78
 801d824:	1c43      	adds	r3, r0, #1
 801d826:	d033      	beq.n	801d890 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801d828:	1823      	adds	r3, r4, r0
 801d82a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801d82e:	bb6a      	cbnz	r2, 801d88c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801d830:	b281      	uxth	r1, r0
 801d832:	1d25      	adds	r5, r4, #4
 801d834:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801d838:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801d83c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801d840:	4293      	cmp	r3, r2
 801d842:	dc0a      	bgt.n	801d85a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801d844:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801d848:	4422      	add	r2, r4
 801d84a:	18b1      	adds	r1, r6, r2
 801d84c:	b289      	uxth	r1, r1
 801d84e:	428b      	cmp	r3, r1
 801d850:	d919      	bls.n	801d886 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801d852:	7851      	ldrb	r1, [r2, #1]
 801d854:	f802 1b01 	strb.w	r1, [r2], #1
 801d858:	e7f7      	b.n	801d84a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801d85a:	682f      	ldr	r7, [r5, #0]
 801d85c:	f105 0804 	add.w	r8, r5, #4
 801d860:	45b9      	cmp	r9, r7
 801d862:	d10d      	bne.n	801d880 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801d864:	4696      	mov	lr, r2
 801d866:	f1be 0f1e 	cmp.w	lr, #30
 801d86a:	dc06      	bgt.n	801d87a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801d86c:	f10e 0e01 	add.w	lr, lr, #1
 801d870:	686f      	ldr	r7, [r5, #4]
 801d872:	4573      	cmp	r3, lr
 801d874:	f845 7b04 	str.w	r7, [r5], #4
 801d878:	dcf5      	bgt.n	801d866 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801d87a:	3b01      	subs	r3, #1
 801d87c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801d880:	3201      	adds	r2, #1
 801d882:	4645      	mov	r5, r8
 801d884:	e7da      	b.n	801d83c <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801d886:	4423      	add	r3, r4
 801d888:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801d88c:	3801      	subs	r0, #1
 801d88e:	e7c9      	b.n	801d824 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801d890:	4b04      	ldr	r3, [pc, #16]	; (801d8a4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801d892:	6818      	ldr	r0, [r3, #0]
 801d894:	b110      	cbz	r0, 801d89c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801d896:	6803      	ldr	r3, [r0, #0]
 801d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d89a:	e795      	b.n	801d7c8 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801d89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8a0:	2000bf98 	.word	0x2000bf98
 801d8a4:	2000bf94 	.word	0x2000bf94

0801d8a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801d8a8:	b570      	push	{r4, r5, r6, lr}
 801d8aa:	4606      	mov	r6, r0
 801d8ac:	460c      	mov	r4, r1
 801d8ae:	b929      	cbnz	r1, 801d8bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801d8b0:	4b0c      	ldr	r3, [pc, #48]	; (801d8e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801d8b2:	2164      	movs	r1, #100	; 0x64
 801d8b4:	4a0c      	ldr	r2, [pc, #48]	; (801d8e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801d8b6:	480d      	ldr	r0, [pc, #52]	; (801d8ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801d8b8:	f00c f88e 	bl	80299d8 <__assert_func>
 801d8bc:	2300      	movs	r3, #0
 801d8be:	4d0c      	ldr	r5, [pc, #48]	; (801d8f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801d8c0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801d8c4:	6828      	ldr	r0, [r5, #0]
 801d8c6:	b110      	cbz	r0, 801d8ce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801d8c8:	6803      	ldr	r3, [r0, #0]
 801d8ca:	695b      	ldr	r3, [r3, #20]
 801d8cc:	4798      	blx	r3
 801d8ce:	602c      	str	r4, [r5, #0]
 801d8d0:	4620      	mov	r0, r4
 801d8d2:	6823      	ldr	r3, [r4, #0]
 801d8d4:	68db      	ldr	r3, [r3, #12]
 801d8d6:	4798      	blx	r3
 801d8d8:	6833      	ldr	r3, [r6, #0]
 801d8da:	4630      	mov	r0, r6
 801d8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d8e2:	4718      	bx	r3
 801d8e4:	0802deec 	.word	0x0802deec
 801d8e8:	0802dfb4 	.word	0x0802dfb4
 801d8ec:	0802def6 	.word	0x0802def6
 801d8f0:	2000bf94 	.word	0x2000bf94

0801d8f4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801d8f4:	b510      	push	{r4, lr}
 801d8f6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801d8fa:	888a      	ldrh	r2, [r1, #4]
 801d8fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d900:	4422      	add	r2, r4
 801d902:	b212      	sxth	r2, r2
 801d904:	4293      	cmp	r3, r2
 801d906:	da15      	bge.n	801d934 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d908:	8882      	ldrh	r2, [r0, #4]
 801d90a:	4413      	add	r3, r2
 801d90c:	b21b      	sxth	r3, r3
 801d90e:	429c      	cmp	r4, r3
 801d910:	da10      	bge.n	801d934 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d912:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801d916:	88c9      	ldrh	r1, [r1, #6]
 801d918:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d91c:	4419      	add	r1, r3
 801d91e:	b209      	sxth	r1, r1
 801d920:	428a      	cmp	r2, r1
 801d922:	da07      	bge.n	801d934 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d924:	88c0      	ldrh	r0, [r0, #6]
 801d926:	4410      	add	r0, r2
 801d928:	b200      	sxth	r0, r0
 801d92a:	4283      	cmp	r3, r0
 801d92c:	bfac      	ite	ge
 801d92e:	2000      	movge	r0, #0
 801d930:	2001      	movlt	r0, #1
 801d932:	bd10      	pop	{r4, pc}
 801d934:	2000      	movs	r0, #0
 801d936:	e7fc      	b.n	801d932 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801d938 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801d938:	b570      	push	{r4, r5, r6, lr}
 801d93a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801d93e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801d942:	42ac      	cmp	r4, r5
 801d944:	db18      	blt.n	801d978 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801d946:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801d94a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d94e:	429a      	cmp	r2, r3
 801d950:	db12      	blt.n	801d978 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801d952:	8886      	ldrh	r6, [r0, #4]
 801d954:	4435      	add	r5, r6
 801d956:	888e      	ldrh	r6, [r1, #4]
 801d958:	4434      	add	r4, r6
 801d95a:	b22d      	sxth	r5, r5
 801d95c:	b224      	sxth	r4, r4
 801d95e:	42a5      	cmp	r5, r4
 801d960:	db0a      	blt.n	801d978 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801d962:	88c0      	ldrh	r0, [r0, #6]
 801d964:	4418      	add	r0, r3
 801d966:	88cb      	ldrh	r3, [r1, #6]
 801d968:	441a      	add	r2, r3
 801d96a:	b200      	sxth	r0, r0
 801d96c:	b212      	sxth	r2, r2
 801d96e:	4290      	cmp	r0, r2
 801d970:	bfb4      	ite	lt
 801d972:	2000      	movlt	r0, #0
 801d974:	2001      	movge	r0, #1
 801d976:	bd70      	pop	{r4, r5, r6, pc}
 801d978:	2000      	movs	r0, #0
 801d97a:	e7fc      	b.n	801d976 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801d97c <_ZN8touchgfx11Application11getInstanceEv>:
 801d97c:	4b01      	ldr	r3, [pc, #4]	; (801d984 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801d97e:	6818      	ldr	r0, [r3, #0]
 801d980:	4770      	bx	lr
 801d982:	bf00      	nop
 801d984:	2000bfa4 	.word	0x2000bfa4

0801d988 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801d988:	2300      	movs	r3, #0
 801d98a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801d98e:	30a8      	adds	r0, #168	; 0xa8
 801d990:	f820 3c24 	strh.w	r3, [r0, #-36]
 801d994:	f802 3b01 	strb.w	r3, [r2], #1
 801d998:	4282      	cmp	r2, r0
 801d99a:	d1fb      	bne.n	801d994 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801d99c:	4770      	bx	lr

0801d99e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801d99e:	4603      	mov	r3, r0
 801d9a0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801d9a4:	2200      	movs	r2, #0
 801d9a6:	801a      	strh	r2, [r3, #0]
 801d9a8:	3308      	adds	r3, #8
 801d9aa:	f823 2c06 	strh.w	r2, [r3, #-6]
 801d9ae:	f823 2c04 	strh.w	r2, [r3, #-4]
 801d9b2:	f823 2c02 	strh.w	r2, [r3, #-2]
 801d9b6:	428b      	cmp	r3, r1
 801d9b8:	d1f5      	bne.n	801d9a6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801d9ba:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801d9be:	4770      	bx	lr

0801d9c0 <_ZN8touchgfx11ApplicationC1Ev>:
 801d9c0:	b570      	push	{r4, r5, r6, lr}
 801d9c2:	4b16      	ldr	r3, [pc, #88]	; (801da1c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801d9c4:	2500      	movs	r5, #0
 801d9c6:	4604      	mov	r4, r0
 801d9c8:	30a8      	adds	r0, #168	; 0xa8
 801d9ca:	f840 3ca8 	str.w	r3, [r0, #-168]
 801d9ce:	f820 5c24 	strh.w	r5, [r0, #-36]
 801d9d2:	f7ff ffe4 	bl	801d99e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d9d6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801d9da:	f7ff ffe0 	bl	801d99e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d9de:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801d9e2:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801d9e6:	490e      	ldr	r1, [pc, #56]	; (801da20 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801d9e8:	480e      	ldr	r0, [pc, #56]	; (801da24 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801d9ea:	f00a fadb 	bl	8027fa4 <CRC_Lock>
 801d9ee:	4e0e      	ldr	r6, [pc, #56]	; (801da28 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801d9f0:	4b0e      	ldr	r3, [pc, #56]	; (801da2c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801d9f2:	b158      	cbz	r0, 801da0c <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801d9f4:	801d      	strh	r5, [r3, #0]
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	4a0d      	ldr	r2, [pc, #52]	; (801da30 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	6013      	str	r3, [r2, #0]
 801d9fe:	4a0d      	ldr	r2, [pc, #52]	; (801da34 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801da00:	6033      	str	r3, [r6, #0]
 801da02:	6013      	str	r3, [r2, #0]
 801da04:	f7ff ffc0 	bl	801d988 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801da08:	4620      	mov	r0, r4
 801da0a:	bd70      	pop	{r4, r5, r6, pc}
 801da0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801da10:	2002      	movs	r0, #2
 801da12:	801a      	strh	r2, [r3, #0]
 801da14:	6030      	str	r0, [r6, #0]
 801da16:	f000 ff81 	bl	801e91c <_ZN8touchgfx6Screen4drawEv>
 801da1a:	e7ec      	b.n	801d9f6 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801da1c:	0802df80 	.word	0x0802df80
 801da20:	b5e8b5cd 	.word	0xb5e8b5cd
 801da24:	f407a5c2 	.word	0xf407a5c2
 801da28:	2000bf94 	.word	0x2000bf94
 801da2c:	20000084 	.word	0x20000084
 801da30:	2000bfa4 	.word	0x2000bfa4
 801da34:	2000bf98 	.word	0x2000bf98

0801da38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801da38:	2300      	movs	r3, #0
 801da3a:	8003      	strh	r3, [r0, #0]
 801da3c:	8043      	strh	r3, [r0, #2]
 801da3e:	8083      	strh	r3, [r0, #4]
 801da40:	80c3      	strh	r3, [r0, #6]
 801da42:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801da46:	4293      	cmp	r3, r2
 801da48:	b530      	push	{r4, r5, lr}
 801da4a:	d912      	bls.n	801da72 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801da4c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801da50:	3b01      	subs	r3, #1
 801da52:	6825      	ldr	r5, [r4, #0]
 801da54:	b29b      	uxth	r3, r3
 801da56:	6005      	str	r5, [r0, #0]
 801da58:	4293      	cmp	r3, r2
 801da5a:	6865      	ldr	r5, [r4, #4]
 801da5c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801da60:	6045      	str	r5, [r0, #4]
 801da62:	d906      	bls.n	801da72 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801da64:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801da68:	681d      	ldr	r5, [r3, #0]
 801da6a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801da6e:	685d      	ldr	r5, [r3, #4]
 801da70:	6065      	str	r5, [r4, #4]
 801da72:	bd30      	pop	{r4, r5, pc}

0801da74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801da74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801da76:	466b      	mov	r3, sp
 801da78:	4604      	mov	r4, r0
 801da7a:	e883 0006 	stmia.w	r3, {r1, r2}
 801da7e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801da82:	2a07      	cmp	r2, #7
 801da84:	d906      	bls.n	801da94 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801da86:	4b09      	ldr	r3, [pc, #36]	; (801daac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801da88:	f44f 7102 	mov.w	r1, #520	; 0x208
 801da8c:	4a08      	ldr	r2, [pc, #32]	; (801dab0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801da8e:	4809      	ldr	r0, [pc, #36]	; (801dab4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801da90:	f00b ffa2 	bl	80299d8 <__assert_func>
 801da94:	1c51      	adds	r1, r2, #1
 801da96:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801da9a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801da9e:	cb03      	ldmia	r3!, {r0, r1}
 801daa0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801daa4:	6069      	str	r1, [r5, #4]
 801daa6:	b003      	add	sp, #12
 801daa8:	bd30      	pop	{r4, r5, pc}
 801daaa:	bf00      	nop
 801daac:	0802df20 	.word	0x0802df20
 801dab0:	0802dff8 	.word	0x0802dff8
 801dab4:	0802df4f 	.word	0x0802df4f

0801dab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801dab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dabc:	b089      	sub	sp, #36	; 0x24
 801dabe:	4606      	mov	r6, r0
 801dac0:	466c      	mov	r4, sp
 801dac2:	4620      	mov	r0, r4
 801dac4:	e884 0006 	stmia.w	r4, {r1, r2}
 801dac8:	f7fc fc4c 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801dacc:	bbb0      	cbnz	r0, 801db3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801dace:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801dad2:	b1fd      	cbz	r5, 801db14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801dad4:	3d01      	subs	r5, #1
 801dad6:	af04      	add	r7, sp, #16
 801dad8:	f04f 090a 	mov.w	r9, #10
 801dadc:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801dae0:	ab02      	add	r3, sp, #8
 801dae2:	fa1f f885 	uxth.w	r8, r5
 801dae6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801daea:	6851      	ldr	r1, [r2, #4]
 801daec:	c303      	stmia	r3!, {r0, r1}
 801daee:	4621      	mov	r1, r4
 801daf0:	a802      	add	r0, sp, #8
 801daf2:	f7ff ff21 	bl	801d938 <_ZNK8touchgfx4Rect8includesERKS0_>
 801daf6:	bb08      	cbnz	r0, 801db3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801daf8:	a902      	add	r1, sp, #8
 801dafa:	4620      	mov	r0, r4
 801dafc:	f7ff ff1c 	bl	801d938 <_ZNK8touchgfx4Rect8includesERKS0_>
 801db00:	b1f8      	cbz	r0, 801db42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801db02:	4642      	mov	r2, r8
 801db04:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801db08:	a806      	add	r0, sp, #24
 801db0a:	f7ff ff95 	bl	801da38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801db0e:	f115 35ff 	adds.w	r5, r5, #4294967295
 801db12:	d2e3      	bcs.n	801dadc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801db14:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801db18:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801db1c:	2b08      	cmp	r3, #8
 801db1e:	d108      	bne.n	801db32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801db20:	4629      	mov	r1, r5
 801db22:	a806      	add	r0, sp, #24
 801db24:	2207      	movs	r2, #7
 801db26:	f7ff ff87 	bl	801da38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801db2a:	a906      	add	r1, sp, #24
 801db2c:	4620      	mov	r0, r4
 801db2e:	f7fd fe14 	bl	801b75a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801db32:	4628      	mov	r0, r5
 801db34:	e894 0006 	ldmia.w	r4, {r1, r2}
 801db38:	f7ff ff9c 	bl	801da74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801db3c:	b009      	add	sp, #36	; 0x24
 801db3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db42:	4621      	mov	r1, r4
 801db44:	a802      	add	r0, sp, #8
 801db46:	f7ff fed5 	bl	801d8f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801db4a:	b150      	cbz	r0, 801db62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801db4c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801db50:	a806      	add	r0, sp, #24
 801db52:	4642      	mov	r2, r8
 801db54:	f7ff ff70 	bl	801da38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801db58:	a902      	add	r1, sp, #8
 801db5a:	4620      	mov	r0, r4
 801db5c:	f7fd fdfd 	bl	801b75a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801db60:	e7d5      	b.n	801db0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801db62:	e894 0003 	ldmia.w	r4, {r0, r1}
 801db66:	e887 0003 	stmia.w	r7, {r0, r1}
 801db6a:	a902      	add	r1, sp, #8
 801db6c:	4638      	mov	r0, r7
 801db6e:	f7fd fdf4 	bl	801b75a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801db72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801db76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801db7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801db7e:	fb13 f302 	smulbb	r3, r3, r2
 801db82:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801db86:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801db8a:	fb11 f102 	smulbb	r1, r1, r2
 801db8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801db92:	fb09 f303 	mul.w	r3, r9, r3
 801db96:	fb12 1100 	smlabb	r1, r2, r0, r1
 801db9a:	220b      	movs	r2, #11
 801db9c:	434a      	muls	r2, r1
 801db9e:	4293      	cmp	r3, r2
 801dba0:	dab5      	bge.n	801db0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801dba2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801dba6:	a806      	add	r0, sp, #24
 801dba8:	4642      	mov	r2, r8
 801dbaa:	f7ff ff45 	bl	801da38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801dbae:	e897 0003 	ldmia.w	r7, {r0, r1}
 801dbb2:	e884 0003 	stmia.w	r4, {r0, r1}
 801dbb6:	e7aa      	b.n	801db0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801dbb8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801dbb8:	4b1d      	ldr	r3, [pc, #116]	; (801dc30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801dbba:	b530      	push	{r4, r5, lr}
 801dbbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dbc0:	b085      	sub	sp, #20
 801dbc2:	4b1c      	ldr	r3, [pc, #112]	; (801dc34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801dbc4:	460c      	mov	r4, r1
 801dbc6:	2100      	movs	r1, #0
 801dbc8:	4605      	mov	r5, r0
 801dbca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dbce:	6820      	ldr	r0, [r4, #0]
 801dbd0:	9100      	str	r1, [sp, #0]
 801dbd2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dbd6:	ab02      	add	r3, sp, #8
 801dbd8:	6861      	ldr	r1, [r4, #4]
 801dbda:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dbde:	c303      	stmia	r3!, {r0, r1}
 801dbe0:	4669      	mov	r1, sp
 801dbe2:	a802      	add	r0, sp, #8
 801dbe4:	f7fc fb7a 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801dbe8:	ab02      	add	r3, sp, #8
 801dbea:	cb03      	ldmia	r3!, {r0, r1}
 801dbec:	4b12      	ldr	r3, [pc, #72]	; (801dc38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801dbee:	6020      	str	r0, [r4, #0]
 801dbf0:	6818      	ldr	r0, [r3, #0]
 801dbf2:	6061      	str	r1, [r4, #4]
 801dbf4:	b138      	cbz	r0, 801dc06 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801dbf6:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801dbfa:	b133      	cbz	r3, 801dc0a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801dbfc:	6821      	ldr	r1, [r4, #0]
 801dbfe:	4628      	mov	r0, r5
 801dc00:	6862      	ldr	r2, [r4, #4]
 801dc02:	f7ff ff59 	bl	801dab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dc06:	b005      	add	sp, #20
 801dc08:	bd30      	pop	{r4, r5, pc}
 801dc0a:	6803      	ldr	r3, [r0, #0]
 801dc0c:	4621      	mov	r1, r4
 801dc0e:	689b      	ldr	r3, [r3, #8]
 801dc10:	4798      	blx	r3
 801dc12:	4b0a      	ldr	r3, [pc, #40]	; (801dc3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801dc14:	6818      	ldr	r0, [r3, #0]
 801dc16:	b118      	cbz	r0, 801dc20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801dc18:	6803      	ldr	r3, [r0, #0]
 801dc1a:	4621      	mov	r1, r4
 801dc1c:	689b      	ldr	r3, [r3, #8]
 801dc1e:	4798      	blx	r3
 801dc20:	4b07      	ldr	r3, [pc, #28]	; (801dc40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801dc22:	4621      	mov	r1, r4
 801dc24:	6818      	ldr	r0, [r3, #0]
 801dc26:	6803      	ldr	r3, [r0, #0]
 801dc28:	695b      	ldr	r3, [r3, #20]
 801dc2a:	4798      	blx	r3
 801dc2c:	e7eb      	b.n	801dc06 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801dc2e:	bf00      	nop
 801dc30:	2000bf0a 	.word	0x2000bf0a
 801dc34:	2000bf0c 	.word	0x2000bf0c
 801dc38:	2000bf94 	.word	0x2000bf94
 801dc3c:	2000bf90 	.word	0x2000bf90
 801dc40:	2000bf18 	.word	0x2000bf18

0801dc44 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc48:	4604      	mov	r4, r0
 801dc4a:	b09b      	sub	sp, #108	; 0x6c
 801dc4c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801dc50:	b129      	cbz	r1, 801dc5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801dc52:	2300      	movs	r3, #0
 801dc54:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801dc58:	b01b      	add	sp, #108	; 0x6c
 801dc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc5e:	4baf      	ldr	r3, [pc, #700]	; (801df1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	b33b      	cbz	r3, 801dcb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801dc64:	4dae      	ldr	r5, [pc, #696]	; (801df20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801dc66:	4628      	mov	r0, r5
 801dc68:	f7fc fb7c 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801dc6c:	4606      	mov	r6, r0
 801dc6e:	bb08      	cbnz	r0, 801dcb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801dc70:	4628      	mov	r0, r5
 801dc72:	f7ff fce9 	bl	801d648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801dc76:	6829      	ldr	r1, [r5, #0]
 801dc78:	686a      	ldr	r2, [r5, #4]
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f7ff ff1c 	bl	801dab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dc80:	802e      	strh	r6, [r5, #0]
 801dc82:	806e      	strh	r6, [r5, #2]
 801dc84:	80ae      	strh	r6, [r5, #4]
 801dc86:	80ee      	strh	r6, [r5, #6]
 801dc88:	4fa6      	ldr	r7, [pc, #664]	; (801df24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801dc8a:	a809      	add	r0, sp, #36	; 0x24
 801dc8c:	f7ff fe87 	bl	801d99e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dc90:	883d      	ldrh	r5, [r7, #0]
 801dc92:	462e      	mov	r6, r5
 801dc94:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801dc98:	42b3      	cmp	r3, r6
 801dc9a:	d910      	bls.n	801dcbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801dc9c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801dca0:	3601      	adds	r6, #1
 801dca2:	a809      	add	r0, sp, #36	; 0x24
 801dca4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801dca8:	b2b6      	uxth	r6, r6
 801dcaa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801dcae:	f7ff fee1 	bl	801da74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801dcb2:	e7ef      	b.n	801dc94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801dcb4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d1e5      	bne.n	801dc88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801dcbc:	e7cc      	b.n	801dc58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801dcbe:	462e      	mov	r6, r5
 801dcc0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801dcc4:	42b3      	cmp	r3, r6
 801dcc6:	d90b      	bls.n	801dce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801dcc8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801dccc:	3601      	adds	r6, #1
 801dcce:	4620      	mov	r0, r4
 801dcd0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801dcd4:	b2b6      	uxth	r6, r6
 801dcd6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801dcda:	f7ff feed 	bl	801dab8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dcde:	e7ef      	b.n	801dcc0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801dce0:	4e91      	ldr	r6, [pc, #580]	; (801df28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801dce2:	6833      	ldr	r3, [r6, #0]
 801dce4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801dce8:	2b01      	cmp	r3, #1
 801dcea:	f040 8092 	bne.w	801de12 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801dcee:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801dcf2:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801dcf6:	f04f 0900 	mov.w	r9, #0
 801dcfa:	33aa      	adds	r3, #170	; 0xaa
 801dcfc:	42a8      	cmp	r0, r5
 801dcfe:	f103 0308 	add.w	r3, r3, #8
 801dd02:	dd0a      	ble.n	801dd1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801dd04:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801dd08:	3501      	adds	r5, #1
 801dd0a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801dd0e:	440a      	add	r2, r1
 801dd10:	b212      	sxth	r2, r2
 801dd12:	4591      	cmp	r9, r2
 801dd14:	bfb8      	it	lt
 801dd16:	4691      	movlt	r9, r2
 801dd18:	e7f0      	b.n	801dcfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801dd1a:	4b84      	ldr	r3, [pc, #528]	; (801df2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801dd1c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801df34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801dd20:	881d      	ldrh	r5, [r3, #0]
 801dd22:	2300      	movs	r3, #0
 801dd24:	2d0f      	cmp	r5, #15
 801dd26:	bf8c      	ite	hi
 801dd28:	08ed      	lsrhi	r5, r5, #3
 801dd2a:	2501      	movls	r5, #1
 801dd2c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801dd30:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801dd34:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801dd38:	6830      	ldr	r0, [r6, #0]
 801dd3a:	440b      	add	r3, r1
 801dd3c:	6802      	ldr	r2, [r0, #0]
 801dd3e:	b21b      	sxth	r3, r3
 801dd40:	4599      	cmp	r9, r3
 801dd42:	dd49      	ble.n	801ddd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801dd44:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801dd48:	4798      	blx	r3
 801dd4a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dd4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801dd52:	4413      	add	r3, r2
 801dd54:	b21b      	sxth	r3, r3
 801dd56:	195a      	adds	r2, r3, r5
 801dd58:	4290      	cmp	r0, r2
 801dd5a:	da07      	bge.n	801dd6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801dd5c:	4581      	cmp	r9, r0
 801dd5e:	dd05      	ble.n	801dd6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801dd60:	4298      	cmp	r0, r3
 801dd62:	da33      	bge.n	801ddcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	dd31      	ble.n	801ddcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801dd68:	4648      	mov	r0, r9
 801dd6a:	e004      	b.n	801dd76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801dd6c:	4298      	cmp	r0, r3
 801dd6e:	dbfb      	blt.n	801dd68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801dd70:	4548      	cmp	r0, r9
 801dd72:	bfa8      	it	ge
 801dd74:	4648      	movge	r0, r9
 801dd76:	f9b8 2000 	ldrsh.w	r2, [r8]
 801dd7a:	2100      	movs	r1, #0
 801dd7c:	1ac0      	subs	r0, r0, r3
 801dd7e:	f8b7 a000 	ldrh.w	sl, [r7]
 801dd82:	f8ad 1014 	strh.w	r1, [sp, #20]
 801dd86:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dd8a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801dd8e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dd92:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801dd96:	4553      	cmp	r3, sl
 801dd98:	d9ca      	bls.n	801dd30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801dd9a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801dd9e:	ab07      	add	r3, sp, #28
 801dda0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801dda4:	6851      	ldr	r1, [r2, #4]
 801dda6:	c303      	stmia	r3!, {r0, r1}
 801dda8:	a807      	add	r0, sp, #28
 801ddaa:	a905      	add	r1, sp, #20
 801ddac:	f7fc fa96 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801ddb0:	a807      	add	r0, sp, #28
 801ddb2:	f7fc fad7 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ddb6:	b920      	cbnz	r0, 801ddc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801ddb8:	6823      	ldr	r3, [r4, #0]
 801ddba:	a907      	add	r1, sp, #28
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddc0:	4798      	blx	r3
 801ddc2:	f10a 0a01 	add.w	sl, sl, #1
 801ddc6:	fa1f fa8a 	uxth.w	sl, sl
 801ddca:	e7e2      	b.n	801dd92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801ddcc:	6830      	ldr	r0, [r6, #0]
 801ddce:	2101      	movs	r1, #1
 801ddd0:	6803      	ldr	r3, [r0, #0]
 801ddd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ddd4:	4798      	blx	r3
 801ddd6:	e7ab      	b.n	801dd30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801ddd8:	69d3      	ldr	r3, [r2, #28]
 801ddda:	4798      	blx	r3
 801dddc:	4b54      	ldr	r3, [pc, #336]	; (801df30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801ddde:	781b      	ldrb	r3, [r3, #0]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	f43f af39 	beq.w	801dc58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801dde6:	2300      	movs	r3, #0
 801dde8:	883d      	ldrh	r5, [r7, #0]
 801ddea:	34ea      	adds	r4, #234	; 0xea
 801ddec:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ddf0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ddf4:	42ab      	cmp	r3, r5
 801ddf6:	f67f af2f 	bls.w	801dc58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ddfa:	ab1a      	add	r3, sp, #104	; 0x68
 801ddfc:	4620      	mov	r0, r4
 801ddfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801de02:	3501      	adds	r5, #1
 801de04:	3b44      	subs	r3, #68	; 0x44
 801de06:	b2ad      	uxth	r5, r5
 801de08:	e893 0006 	ldmia.w	r3, {r1, r2}
 801de0c:	f7ff fe32 	bl	801da74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801de10:	e7ee      	b.n	801ddf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801de12:	2b02      	cmp	r3, #2
 801de14:	d16a      	bne.n	801deec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801de16:	f8df a120 	ldr.w	sl, [pc, #288]	; 801df38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801de1a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801de1e:	42ab      	cmp	r3, r5
 801de20:	d9dc      	bls.n	801dddc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801de22:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801de26:	ab03      	add	r3, sp, #12
 801de28:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801de2c:	6851      	ldr	r1, [r2, #4]
 801de2e:	c303      	stmia	r3!, {r0, r1}
 801de30:	f89a 3000 	ldrb.w	r3, [sl]
 801de34:	2b01      	cmp	r3, #1
 801de36:	d102      	bne.n	801de3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801de38:	a803      	add	r0, sp, #12
 801de3a:	f7ff fc5f 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de3e:	a803      	add	r0, sp, #12
 801de40:	f7fc fa90 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801de44:	2800      	cmp	r0, #0
 801de46:	d14a      	bne.n	801dede <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801de48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801de4c:	f10d 0914 	add.w	r9, sp, #20
 801de50:	f10d 081c 	add.w	r8, sp, #28
 801de54:	f8ad 001a 	strh.w	r0, [sp, #26]
 801de58:	f8ad 3014 	strh.w	r3, [sp, #20]
 801de5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801de60:	f8ad 3016 	strh.w	r3, [sp, #22]
 801de64:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801de68:	f8ad 3018 	strh.w	r3, [sp, #24]
 801de6c:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801de70:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801de74:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801de78:	44dc      	add	ip, fp
 801de7a:	6830      	ldr	r0, [r6, #0]
 801de7c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801de80:	ebac 0c02 	sub.w	ip, ip, r2
 801de84:	f8d0 e000 	ldr.w	lr, [r0]
 801de88:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801de8c:	fa1f fc8c 	uxth.w	ip, ip
 801de90:	f8cd c000 	str.w	ip, [sp]
 801de94:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801de98:	47d8      	blx	fp
 801de9a:	f89a 3000 	ldrb.w	r3, [sl]
 801de9e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801dea2:	2b01      	cmp	r3, #1
 801dea4:	d11e      	bne.n	801dee4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801dea6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801deaa:	e888 0003 	stmia.w	r8, {r0, r1}
 801deae:	4640      	mov	r0, r8
 801deb0:	f7ff fbca 	bl	801d648 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801deb4:	6823      	ldr	r3, [r4, #0]
 801deb6:	4641      	mov	r1, r8
 801deb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801deba:	4620      	mov	r0, r4
 801debc:	4798      	blx	r3
 801debe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801dec2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dec6:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801deca:	4413      	add	r3, r2
 801decc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ded0:	440a      	add	r2, r1
 801ded2:	b21b      	sxth	r3, r3
 801ded4:	b212      	sxth	r2, r2
 801ded6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801deda:	4293      	cmp	r3, r2
 801dedc:	dbc6      	blt.n	801de6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801dede:	3501      	adds	r5, #1
 801dee0:	b2ad      	uxth	r5, r5
 801dee2:	e79a      	b.n	801de1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801dee4:	6823      	ldr	r3, [r4, #0]
 801dee6:	4649      	mov	r1, r9
 801dee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801deea:	e7e6      	b.n	801deba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801deec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801def0:	42ab      	cmp	r3, r5
 801def2:	f67f af73 	bls.w	801dddc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801def6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801defa:	ab07      	add	r3, sp, #28
 801defc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801df00:	6851      	ldr	r1, [r2, #4]
 801df02:	c303      	stmia	r3!, {r0, r1}
 801df04:	a807      	add	r0, sp, #28
 801df06:	f7fc fa2d 	bl	801a364 <_ZNK8touchgfx4Rect7isEmptyEv>
 801df0a:	b920      	cbnz	r0, 801df16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801df0c:	6823      	ldr	r3, [r4, #0]
 801df0e:	a907      	add	r1, sp, #28
 801df10:	4620      	mov	r0, r4
 801df12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df14:	4798      	blx	r3
 801df16:	3501      	adds	r5, #1
 801df18:	b2ad      	uxth	r5, r5
 801df1a:	e7e7      	b.n	801deec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801df1c:	2000bf90 	.word	0x2000bf90
 801df20:	2000bf9c 	.word	0x2000bf9c
 801df24:	20000084 	.word	0x20000084
 801df28:	2000bf18 	.word	0x2000bf18
 801df2c:	2000bf0c 	.word	0x2000bf0c
 801df30:	2000bf14 	.word	0x2000bf14
 801df34:	2000bf0a 	.word	0x2000bf0a
 801df38:	2000bf0e 	.word	0x2000bf0e

0801df3c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801df3c:	4b03      	ldr	r3, [pc, #12]	; (801df4c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801df3e:	2200      	movs	r2, #0
 801df40:	801a      	strh	r2, [r3, #0]
 801df42:	805a      	strh	r2, [r3, #2]
 801df44:	809a      	strh	r2, [r3, #4]
 801df46:	80da      	strh	r2, [r3, #6]
 801df48:	4770      	bx	lr
 801df4a:	bf00      	nop
 801df4c:	2000bf9c 	.word	0x2000bf9c

0801df50 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801df50:	2000      	movs	r0, #0
 801df52:	4770      	bx	lr

0801df54 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801df54:	2000      	movs	r0, #0
 801df56:	4770      	bx	lr

0801df58 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801df58:	b508      	push	{r3, lr}
 801df5a:	6803      	ldr	r3, [r0, #0]
 801df5c:	68db      	ldr	r3, [r3, #12]
 801df5e:	4798      	blx	r3
 801df60:	b128      	cbz	r0, 801df6e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801df62:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801df66:	7a80      	ldrb	r0, [r0, #10]
 801df68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801df6c:	4318      	orrs	r0, r3
 801df6e:	bd08      	pop	{r3, pc}

0801df70 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801df70:	b40e      	push	{r1, r2, r3}
 801df72:	b533      	push	{r0, r1, r4, r5, lr}
 801df74:	ab05      	add	r3, sp, #20
 801df76:	f853 2b04 	ldr.w	r2, [r3], #4
 801df7a:	9301      	str	r3, [sp, #4]
 801df7c:	4b0a      	ldr	r3, [pc, #40]	; (801dfa8 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801df7e:	685c      	ldr	r4, [r3, #4]
 801df80:	1061      	asrs	r1, r4, #1
 801df82:	07e4      	lsls	r4, r4, #31
 801df84:	eb00 0501 	add.w	r5, r0, r1
 801df88:	bf46      	itte	mi
 801df8a:	681b      	ldrmi	r3, [r3, #0]
 801df8c:	5841      	ldrmi	r1, [r0, r1]
 801df8e:	681c      	ldrpl	r4, [r3, #0]
 801df90:	4628      	mov	r0, r5
 801df92:	bf48      	it	mi
 801df94:	58cc      	ldrmi	r4, [r1, r3]
 801df96:	2100      	movs	r1, #0
 801df98:	9b01      	ldr	r3, [sp, #4]
 801df9a:	47a0      	blx	r4
 801df9c:	b002      	add	sp, #8
 801df9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dfa2:	b003      	add	sp, #12
 801dfa4:	4770      	bx	lr
 801dfa6:	bf00      	nop
 801dfa8:	20000028 	.word	0x20000028

0801dfac <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801dfac:	b40c      	push	{r2, r3}
 801dfae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dfb0:	ab06      	add	r3, sp, #24
 801dfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfb6:	9301      	str	r3, [sp, #4]
 801dfb8:	4b09      	ldr	r3, [pc, #36]	; (801dfe0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801dfba:	685d      	ldr	r5, [r3, #4]
 801dfbc:	106c      	asrs	r4, r5, #1
 801dfbe:	07ed      	lsls	r5, r5, #31
 801dfc0:	eb00 0604 	add.w	r6, r0, r4
 801dfc4:	bf45      	ittet	mi
 801dfc6:	681b      	ldrmi	r3, [r3, #0]
 801dfc8:	5900      	ldrmi	r0, [r0, r4]
 801dfca:	681c      	ldrpl	r4, [r3, #0]
 801dfcc:	58c4      	ldrmi	r4, [r0, r3]
 801dfce:	4630      	mov	r0, r6
 801dfd0:	9b01      	ldr	r3, [sp, #4]
 801dfd2:	47a0      	blx	r4
 801dfd4:	b002      	add	sp, #8
 801dfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfda:	b002      	add	sp, #8
 801dfdc:	4770      	bx	lr
 801dfde:	bf00      	nop
 801dfe0:	20000028 	.word	0x20000028

0801dfe4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801dfe4:	b40e      	push	{r1, r2, r3}
 801dfe6:	b530      	push	{r4, r5, lr}
 801dfe8:	b098      	sub	sp, #96	; 0x60
 801dfea:	4604      	mov	r4, r0
 801dfec:	ab1b      	add	r3, sp, #108	; 0x6c
 801dfee:	a802      	add	r0, sp, #8
 801dff0:	f853 5b04 	ldr.w	r5, [r3], #4
 801dff4:	9301      	str	r3, [sp, #4]
 801dff6:	f001 f871 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801dffa:	6823      	ldr	r3, [r4, #0]
 801dffc:	4620      	mov	r0, r4
 801dffe:	2401      	movs	r4, #1
 801e000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e002:	4798      	blx	r3
 801e004:	9a01      	ldr	r2, [sp, #4]
 801e006:	4603      	mov	r3, r0
 801e008:	4629      	mov	r1, r5
 801e00a:	a802      	add	r0, sp, #8
 801e00c:	f001 f883 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e010:	a802      	add	r0, sp, #8
 801e012:	f001 f8b9 	bl	801f188 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e016:	b2a3      	uxth	r3, r4
 801e018:	b138      	cbz	r0, 801e02a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801e01a:	280a      	cmp	r0, #10
 801e01c:	a802      	add	r0, sp, #8
 801e01e:	bf04      	itt	eq
 801e020:	3301      	addeq	r3, #1
 801e022:	b21c      	sxtheq	r4, r3
 801e024:	f001 f8b0 	bl	801f188 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e028:	e7f5      	b.n	801e016 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801e02a:	4618      	mov	r0, r3
 801e02c:	b018      	add	sp, #96	; 0x60
 801e02e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e032:	b003      	add	sp, #12
 801e034:	4770      	bx	lr
	...

0801e038 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801e038:	b40e      	push	{r1, r2, r3}
 801e03a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e03c:	b098      	sub	sp, #96	; 0x60
 801e03e:	4605      	mov	r5, r0
 801e040:	4f25      	ldr	r7, [pc, #148]	; (801e0d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801e042:	ab1d      	add	r3, sp, #116	; 0x74
 801e044:	a802      	add	r0, sp, #8
 801e046:	ae18      	add	r6, sp, #96	; 0x60
 801e048:	f853 4b04 	ldr.w	r4, [r3], #4
 801e04c:	9300      	str	r3, [sp, #0]
 801e04e:	f001 f845 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801e052:	682b      	ldr	r3, [r5, #0]
 801e054:	4628      	mov	r0, r5
 801e056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e058:	4798      	blx	r3
 801e05a:	4621      	mov	r1, r4
 801e05c:	2400      	movs	r4, #0
 801e05e:	4603      	mov	r3, r0
 801e060:	9a00      	ldr	r2, [sp, #0]
 801e062:	a802      	add	r0, sp, #8
 801e064:	f001 f857 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e068:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801e06c:	462a      	mov	r2, r5
 801e06e:	4633      	mov	r3, r6
 801e070:	4621      	mov	r1, r4
 801e072:	a802      	add	r0, sp, #8
 801e074:	f001 f9b4 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e078:	b340      	cbz	r0, 801e0cc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801e07a:	280a      	cmp	r0, #10
 801e07c:	d01f      	beq.n	801e0be <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801e07e:	9901      	ldr	r1, [sp, #4]
 801e080:	b1e9      	cbz	r1, 801e0be <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801e082:	7b4b      	ldrb	r3, [r1, #13]
 801e084:	f891 c008 	ldrb.w	ip, [r1, #8]
 801e088:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e08c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801e090:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801e094:	79c9      	ldrb	r1, [r1, #7]
 801e096:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801e09a:	bf18      	it	ne
 801e09c:	4638      	movne	r0, r7
 801e09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e0a2:	bf08      	it	eq
 801e0a4:	2000      	moveq	r0, #0
 801e0a6:	88aa      	ldrh	r2, [r5, #4]
 801e0a8:	ea41 010e 	orr.w	r1, r1, lr
 801e0ac:	ea43 030c 	orr.w	r3, r3, ip
 801e0b0:	440a      	add	r2, r1
 801e0b2:	4303      	orrs	r3, r0
 801e0b4:	1ad3      	subs	r3, r2, r3
 801e0b6:	b29b      	uxth	r3, r3
 801e0b8:	42a3      	cmp	r3, r4
 801e0ba:	bfc8      	it	gt
 801e0bc:	b21c      	sxthgt	r4, r3
 801e0be:	4633      	mov	r3, r6
 801e0c0:	462a      	mov	r2, r5
 801e0c2:	2100      	movs	r1, #0
 801e0c4:	a802      	add	r0, sp, #8
 801e0c6:	f001 f98b 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e0ca:	e7d5      	b.n	801e078 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801e0cc:	b2a0      	uxth	r0, r4
 801e0ce:	b018      	add	sp, #96	; 0x60
 801e0d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e0d4:	b003      	add	sp, #12
 801e0d6:	4770      	bx	lr
 801e0d8:	fffffe00 	.word	0xfffffe00

0801e0dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801e0dc:	b40e      	push	{r1, r2, r3}
 801e0de:	b570      	push	{r4, r5, r6, lr}
 801e0e0:	b099      	sub	sp, #100	; 0x64
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	26ff      	movs	r6, #255	; 0xff
 801e0e6:	ab1d      	add	r3, sp, #116	; 0x74
 801e0e8:	a802      	add	r0, sp, #8
 801e0ea:	f853 5b04 	ldr.w	r5, [r3], #4
 801e0ee:	9300      	str	r3, [sp, #0]
 801e0f0:	f000 fff4 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801e0f4:	6823      	ldr	r3, [r4, #0]
 801e0f6:	4620      	mov	r0, r4
 801e0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e0fa:	4798      	blx	r3
 801e0fc:	4629      	mov	r1, r5
 801e0fe:	4603      	mov	r3, r0
 801e100:	9a00      	ldr	r2, [sp, #0]
 801e102:	a802      	add	r0, sp, #8
 801e104:	ad18      	add	r5, sp, #96	; 0x60
 801e106:	f001 f806 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e10a:	2100      	movs	r1, #0
 801e10c:	4622      	mov	r2, r4
 801e10e:	a802      	add	r0, sp, #8
 801e110:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801e114:	462b      	mov	r3, r5
 801e116:	f001 f963 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e11a:	b190      	cbz	r0, 801e142 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801e11c:	280a      	cmp	r0, #10
 801e11e:	d009      	beq.n	801e134 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801e120:	9a01      	ldr	r2, [sp, #4]
 801e122:	b13a      	cbz	r2, 801e134 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801e124:	7923      	ldrb	r3, [r4, #4]
 801e126:	7a12      	ldrb	r2, [r2, #8]
 801e128:	1a9b      	subs	r3, r3, r2
 801e12a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801e12e:	429e      	cmp	r6, r3
 801e130:	bf28      	it	cs
 801e132:	461e      	movcs	r6, r3
 801e134:	462b      	mov	r3, r5
 801e136:	4622      	mov	r2, r4
 801e138:	2100      	movs	r1, #0
 801e13a:	a802      	add	r0, sp, #8
 801e13c:	f001 f950 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e140:	e7eb      	b.n	801e11a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801e142:	4630      	mov	r0, r6
 801e144:	b019      	add	sp, #100	; 0x64
 801e146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e14a:	b003      	add	sp, #12
 801e14c:	4770      	bx	lr

0801e14e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801e14e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e152:	b099      	sub	sp, #100	; 0x64
 801e154:	4606      	mov	r6, r0
 801e156:	4614      	mov	r4, r2
 801e158:	4688      	mov	r8, r1
 801e15a:	a802      	add	r0, sp, #8
 801e15c:	461d      	mov	r5, r3
 801e15e:	f04f 0b00 	mov.w	fp, #0
 801e162:	f000 ffbb 	bl	801f0dc <_ZN8touchgfx12TextProviderC1Ev>
 801e166:	6833      	ldr	r3, [r6, #0]
 801e168:	4630      	mov	r0, r6
 801e16a:	465f      	mov	r7, fp
 801e16c:	46da      	mov	sl, fp
 801e16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e170:	46d9      	mov	r9, fp
 801e172:	4798      	blx	r3
 801e174:	462a      	mov	r2, r5
 801e176:	4603      	mov	r3, r0
 801e178:	4621      	mov	r1, r4
 801e17a:	a802      	add	r0, sp, #8
 801e17c:	f000 ffcb 	bl	801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e180:	ab01      	add	r3, sp, #4
 801e182:	4632      	mov	r2, r6
 801e184:	4641      	mov	r1, r8
 801e186:	a802      	add	r0, sp, #8
 801e188:	f8cd 9004 	str.w	r9, [sp, #4]
 801e18c:	f001 f928 	bl	801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e190:	4605      	mov	r5, r0
 801e192:	b108      	cbz	r0, 801e198 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801e194:	280a      	cmp	r0, #10
 801e196:	d10b      	bne.n	801e1b0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801e198:	4557      	cmp	r7, sl
 801e19a:	bf38      	it	cc
 801e19c:	4657      	movcc	r7, sl
 801e19e:	f04f 0a00 	mov.w	sl, #0
 801e1a2:	b91d      	cbnz	r5, 801e1ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801e1a4:	4638      	mov	r0, r7
 801e1a6:	b019      	add	sp, #100	; 0x64
 801e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ac:	46ab      	mov	fp, r5
 801e1ae:	e7e7      	b.n	801e180 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801e1b0:	9a01      	ldr	r2, [sp, #4]
 801e1b2:	2a00      	cmp	r2, #0
 801e1b4:	d0fa      	beq.n	801e1ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801e1b6:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801e1ba:	4659      	mov	r1, fp
 801e1bc:	6833      	ldr	r3, [r6, #0]
 801e1be:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801e1c2:	7a94      	ldrb	r4, [r2, #10]
 801e1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e1c6:	4304      	orrs	r4, r0
 801e1c8:	4630      	mov	r0, r6
 801e1ca:	8895      	ldrh	r5, [r2, #4]
 801e1cc:	4798      	blx	r3
 801e1ce:	4420      	add	r0, r4
 801e1d0:	4450      	add	r0, sl
 801e1d2:	fa1f fa80 	uxth.w	sl, r0
 801e1d6:	e7e4      	b.n	801e1a2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801e1d8 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801e1d8:	b513      	push	{r0, r1, r4, lr}
 801e1da:	1d01      	adds	r1, r0, #4
 801e1dc:	4603      	mov	r3, r0
 801e1de:	466a      	mov	r2, sp
 801e1e0:	c903      	ldmia	r1, {r0, r1}
 801e1e2:	e882 0003 	stmia.w	r2, {r0, r1}
 801e1e6:	2100      	movs	r1, #0
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	9100      	str	r1, [sp, #0]
 801e1ec:	6819      	ldr	r1, [r3, #0]
 801e1ee:	690c      	ldr	r4, [r1, #16]
 801e1f0:	4611      	mov	r1, r2
 801e1f2:	47a0      	blx	r4
 801e1f4:	b002      	add	sp, #8
 801e1f6:	bd10      	pop	{r4, pc}

0801e1f8 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801e1f8:	b538      	push	{r3, r4, r5, lr}
 801e1fa:	680b      	ldr	r3, [r1, #0]
 801e1fc:	460c      	mov	r4, r1
 801e1fe:	4605      	mov	r5, r0
 801e200:	68db      	ldr	r3, [r3, #12]
 801e202:	4798      	blx	r3
 801e204:	6823      	ldr	r3, [r4, #0]
 801e206:	4620      	mov	r0, r4
 801e208:	4629      	mov	r1, r5
 801e20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e20c:	4798      	blx	r3
 801e20e:	4628      	mov	r0, r5
 801e210:	bd38      	pop	{r3, r4, r5, pc}

0801e212 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801e212:	b410      	push	{r4}
 801e214:	880a      	ldrh	r2, [r1, #0]
 801e216:	8884      	ldrh	r4, [r0, #4]
 801e218:	4422      	add	r2, r4
 801e21a:	800a      	strh	r2, [r1, #0]
 801e21c:	884a      	ldrh	r2, [r1, #2]
 801e21e:	88c4      	ldrh	r4, [r0, #6]
 801e220:	4422      	add	r2, r4
 801e222:	804a      	strh	r2, [r1, #2]
 801e224:	6940      	ldr	r0, [r0, #20]
 801e226:	b120      	cbz	r0, 801e232 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801e228:	6803      	ldr	r3, [r0, #0]
 801e22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e230:	4718      	bx	r3
 801e232:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e236:	4770      	bx	lr

0801e238 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801e238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e23a:	460b      	mov	r3, r1
 801e23c:	b085      	sub	sp, #20
 801e23e:	4604      	mov	r4, r0
 801e240:	b901      	cbnz	r1, 801e244 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801e242:	b1fa      	cbz	r2, 801e284 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801e244:	1d27      	adds	r7, r4, #4
 801e246:	466e      	mov	r6, sp
 801e248:	ad02      	add	r5, sp, #8
 801e24a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e24e:	e886 0003 	stmia.w	r6, {r0, r1}
 801e252:	88e1      	ldrh	r1, [r4, #6]
 801e254:	4620      	mov	r0, r4
 801e256:	440a      	add	r2, r1
 801e258:	88a1      	ldrh	r1, [r4, #4]
 801e25a:	4419      	add	r1, r3
 801e25c:	6823      	ldr	r3, [r4, #0]
 801e25e:	b212      	sxth	r2, r2
 801e260:	b209      	sxth	r1, r1
 801e262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e264:	4798      	blx	r3
 801e266:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e26a:	e885 0003 	stmia.w	r5, {r0, r1}
 801e26e:	6960      	ldr	r0, [r4, #20]
 801e270:	b150      	cbz	r0, 801e288 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801e272:	6803      	ldr	r3, [r0, #0]
 801e274:	4631      	mov	r1, r6
 801e276:	691b      	ldr	r3, [r3, #16]
 801e278:	4798      	blx	r3
 801e27a:	6960      	ldr	r0, [r4, #20]
 801e27c:	6803      	ldr	r3, [r0, #0]
 801e27e:	691b      	ldr	r3, [r3, #16]
 801e280:	4629      	mov	r1, r5
 801e282:	4798      	blx	r3
 801e284:	b005      	add	sp, #20
 801e286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e288:	f7ff fb78 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801e28c:	6803      	ldr	r3, [r0, #0]
 801e28e:	4631      	mov	r1, r6
 801e290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e292:	4798      	blx	r3
 801e294:	f7ff fb72 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801e298:	6803      	ldr	r3, [r0, #0]
 801e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e29c:	e7f0      	b.n	801e280 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801e29e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801e29e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2a0:	8882      	ldrh	r2, [r0, #4]
 801e2a2:	4605      	mov	r5, r0
 801e2a4:	880b      	ldrh	r3, [r1, #0]
 801e2a6:	460c      	mov	r4, r1
 801e2a8:	4413      	add	r3, r2
 801e2aa:	800b      	strh	r3, [r1, #0]
 801e2ac:	884b      	ldrh	r3, [r1, #2]
 801e2ae:	88c2      	ldrh	r2, [r0, #6]
 801e2b0:	4413      	add	r3, r2
 801e2b2:	4602      	mov	r2, r0
 801e2b4:	804b      	strh	r3, [r1, #2]
 801e2b6:	466b      	mov	r3, sp
 801e2b8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801e2bc:	6851      	ldr	r1, [r2, #4]
 801e2be:	c303      	stmia	r3!, {r0, r1}
 801e2c0:	4621      	mov	r1, r4
 801e2c2:	4668      	mov	r0, sp
 801e2c4:	f7fc f80a 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801e2c8:	466b      	mov	r3, sp
 801e2ca:	cb03      	ldmia	r3!, {r0, r1}
 801e2cc:	6020      	str	r0, [r4, #0]
 801e2ce:	6061      	str	r1, [r4, #4]
 801e2d0:	6968      	ldr	r0, [r5, #20]
 801e2d2:	b128      	cbz	r0, 801e2e0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801e2d4:	6803      	ldr	r3, [r0, #0]
 801e2d6:	691b      	ldr	r3, [r3, #16]
 801e2d8:	4621      	mov	r1, r4
 801e2da:	4798      	blx	r3
 801e2dc:	b003      	add	sp, #12
 801e2de:	bd30      	pop	{r4, r5, pc}
 801e2e0:	f7ff fb4c 	bl	801d97c <_ZN8touchgfx11Application11getInstanceEv>
 801e2e4:	6803      	ldr	r3, [r0, #0]
 801e2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2e8:	e7f6      	b.n	801e2d8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801e2ea <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801e2ea:	b570      	push	{r4, r5, r6, lr}
 801e2ec:	8882      	ldrh	r2, [r0, #4]
 801e2ee:	460c      	mov	r4, r1
 801e2f0:	880b      	ldrh	r3, [r1, #0]
 801e2f2:	4605      	mov	r5, r0
 801e2f4:	4413      	add	r3, r2
 801e2f6:	800b      	strh	r3, [r1, #0]
 801e2f8:	884b      	ldrh	r3, [r1, #2]
 801e2fa:	88c2      	ldrh	r2, [r0, #6]
 801e2fc:	4413      	add	r3, r2
 801e2fe:	804b      	strh	r3, [r1, #2]
 801e300:	1d01      	adds	r1, r0, #4
 801e302:	4620      	mov	r0, r4
 801e304:	f7fb ffea 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801e308:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e30c:	b153      	cbz	r3, 801e324 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801e30e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e312:	b13b      	cbz	r3, 801e324 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801e314:	6968      	ldr	r0, [r5, #20]
 801e316:	b128      	cbz	r0, 801e324 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801e318:	6803      	ldr	r3, [r0, #0]
 801e31a:	4621      	mov	r1, r4
 801e31c:	6a1b      	ldr	r3, [r3, #32]
 801e31e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e322:	4718      	bx	r3
 801e324:	bd70      	pop	{r4, r5, r6, pc}

0801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801e326:	b510      	push	{r4, lr}
 801e328:	2300      	movs	r3, #0
 801e32a:	4604      	mov	r4, r0
 801e32c:	4608      	mov	r0, r1
 801e32e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801e332:	8023      	strh	r3, [r4, #0]
 801e334:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e338:	8063      	strh	r3, [r4, #2]
 801e33a:	6803      	ldr	r3, [r0, #0]
 801e33c:	80a1      	strh	r1, [r4, #4]
 801e33e:	4621      	mov	r1, r4
 801e340:	80e2      	strh	r2, [r4, #6]
 801e342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e344:	4798      	blx	r3
 801e346:	4620      	mov	r0, r4
 801e348:	bd10      	pop	{r4, pc}
	...

0801e34c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801e34c:	b530      	push	{r4, r5, lr}
 801e34e:	8083      	strh	r3, [r0, #4]
 801e350:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801e354:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801e358:	7183      	strb	r3, [r0, #6]
 801e35a:	79c3      	ldrb	r3, [r0, #7]
 801e35c:	6101      	str	r1, [r0, #16]
 801e35e:	f365 0306 	bfi	r3, r5, #0, #7
 801e362:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801e366:	8282      	strh	r2, [r0, #20]
 801e368:	f365 13c7 	bfi	r3, r5, #7, #1
 801e36c:	71c3      	strb	r3, [r0, #7]
 801e36e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801e372:	7203      	strb	r3, [r0, #8]
 801e374:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e378:	7243      	strb	r3, [r0, #9]
 801e37a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e37e:	8143      	strh	r3, [r0, #10]
 801e380:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e384:	8183      	strh	r3, [r0, #12]
 801e386:	4b01      	ldr	r3, [pc, #4]	; (801e38c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801e388:	6003      	str	r3, [r0, #0]
 801e38a:	bd30      	pop	{r4, r5, pc}
 801e38c:	0802e120 	.word	0x0802e120

0801e390 <_ZNK8touchgfx9ConstFont4findEt>:
 801e390:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e392:	8a84      	ldrh	r4, [r0, #20]
 801e394:	2500      	movs	r5, #0
 801e396:	260e      	movs	r6, #14
 801e398:	3c01      	subs	r4, #1
 801e39a:	42a5      	cmp	r5, r4
 801e39c:	dc0c      	bgt.n	801e3b8 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801e39e:	192a      	adds	r2, r5, r4
 801e3a0:	6903      	ldr	r3, [r0, #16]
 801e3a2:	1052      	asrs	r2, r2, #1
 801e3a4:	fb06 3302 	mla	r3, r6, r2, r3
 801e3a8:	889f      	ldrh	r7, [r3, #4]
 801e3aa:	428f      	cmp	r7, r1
 801e3ac:	d901      	bls.n	801e3b2 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801e3ae:	1e54      	subs	r4, r2, #1
 801e3b0:	e7f3      	b.n	801e39a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801e3b2:	d202      	bcs.n	801e3ba <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801e3b4:	1c55      	adds	r5, r2, #1
 801e3b6:	e7f0      	b.n	801e39a <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	4618      	mov	r0, r3
 801e3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e3be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801e3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3c0:	4605      	mov	r5, r0
 801e3c2:	4617      	mov	r7, r2
 801e3c4:	461e      	mov	r6, r3
 801e3c6:	f7ff ffe3 	bl	801e390 <_ZNK8touchgfx9ConstFont4findEt>
 801e3ca:	b9e0      	cbnz	r0, 801e406 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801e3cc:	b911      	cbnz	r1, 801e3d4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801e3ce:	2400      	movs	r4, #0
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3d4:	290a      	cmp	r1, #10
 801e3d6:	d0fa      	beq.n	801e3ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e3d8:	682b      	ldr	r3, [r5, #0]
 801e3da:	4628      	mov	r0, r5
 801e3dc:	691b      	ldr	r3, [r3, #16]
 801e3de:	4798      	blx	r3
 801e3e0:	4601      	mov	r1, r0
 801e3e2:	4628      	mov	r0, r5
 801e3e4:	f7ff ffd4 	bl	801e390 <_ZNK8touchgfx9ConstFont4findEt>
 801e3e8:	4604      	mov	r4, r0
 801e3ea:	2800      	cmp	r0, #0
 801e3ec:	d0ef      	beq.n	801e3ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e3ee:	682b      	ldr	r3, [r5, #0]
 801e3f0:	4621      	mov	r1, r4
 801e3f2:	4628      	mov	r0, r5
 801e3f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e3f6:	4798      	blx	r3
 801e3f8:	6038      	str	r0, [r7, #0]
 801e3fa:	682b      	ldr	r3, [r5, #0]
 801e3fc:	4628      	mov	r0, r5
 801e3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e400:	4798      	blx	r3
 801e402:	7030      	strb	r0, [r6, #0]
 801e404:	e7e4      	b.n	801e3d0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801e406:	4604      	mov	r4, r0
 801e408:	e7f1      	b.n	801e3ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801e40a <_ZN8touchgfx6memsetEPvhm>:
 801e40a:	4402      	add	r2, r0
 801e40c:	4290      	cmp	r0, r2
 801e40e:	d002      	beq.n	801e416 <_ZN8touchgfx6memsetEPvhm+0xc>
 801e410:	f800 1b01 	strb.w	r1, [r0], #1
 801e414:	e7fa      	b.n	801e40c <_ZN8touchgfx6memsetEPvhm+0x2>
 801e416:	4770      	bx	lr

0801e418 <_ZN8touchgfx3clzEl>:
 801e418:	b1e8      	cbz	r0, 801e456 <_ZN8touchgfx3clzEl+0x3e>
 801e41a:	2800      	cmp	r0, #0
 801e41c:	bfb8      	it	lt
 801e41e:	4240      	neglt	r0, r0
 801e420:	0c03      	lsrs	r3, r0, #16
 801e422:	041b      	lsls	r3, r3, #16
 801e424:	b9ab      	cbnz	r3, 801e452 <_ZN8touchgfx3clzEl+0x3a>
 801e426:	0400      	lsls	r0, r0, #16
 801e428:	2310      	movs	r3, #16
 801e42a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e42e:	bf04      	itt	eq
 801e430:	0200      	lsleq	r0, r0, #8
 801e432:	3308      	addeq	r3, #8
 801e434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e438:	bf04      	itt	eq
 801e43a:	0100      	lsleq	r0, r0, #4
 801e43c:	3304      	addeq	r3, #4
 801e43e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e442:	bf04      	itt	eq
 801e444:	0080      	lsleq	r0, r0, #2
 801e446:	3302      	addeq	r3, #2
 801e448:	2800      	cmp	r0, #0
 801e44a:	bfa8      	it	ge
 801e44c:	3301      	addge	r3, #1
 801e44e:	1e58      	subs	r0, r3, #1
 801e450:	4770      	bx	lr
 801e452:	2300      	movs	r3, #0
 801e454:	e7e9      	b.n	801e42a <_ZN8touchgfx3clzEl+0x12>
 801e456:	201f      	movs	r0, #31
 801e458:	4770      	bx	lr

0801e45a <_ZN8touchgfx6muldivElllRl>:
 801e45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e45e:	4604      	mov	r4, r0
 801e460:	4698      	mov	r8, r3
 801e462:	2601      	movs	r6, #1
 801e464:	f7ff ffd8 	bl	801e418 <_ZN8touchgfx3clzEl>
 801e468:	2c00      	cmp	r4, #0
 801e46a:	fa04 f500 	lsl.w	r5, r4, r0
 801e46e:	fa06 f600 	lsl.w	r6, r6, r0
 801e472:	bfba      	itte	lt
 801e474:	f04f 37ff 	movlt.w	r7, #4294967295
 801e478:	4264      	neglt	r4, r4
 801e47a:	2701      	movge	r7, #1
 801e47c:	2900      	cmp	r1, #0
 801e47e:	f106 36ff 	add.w	r6, r6, #4294967295
 801e482:	bfbc      	itt	lt
 801e484:	4249      	neglt	r1, r1
 801e486:	427f      	neglt	r7, r7
 801e488:	2a00      	cmp	r2, #0
 801e48a:	fa41 fc00 	asr.w	ip, r1, r0
 801e48e:	ea01 0106 	and.w	r1, r1, r6
 801e492:	bfb8      	it	lt
 801e494:	427f      	neglt	r7, r7
 801e496:	fb04 f401 	mul.w	r4, r4, r1
 801e49a:	fb95 f3f2 	sdiv	r3, r5, r2
 801e49e:	fb02 5513 	mls	r5, r2, r3, r5
 801e4a2:	bfb8      	it	lt
 801e4a4:	4252      	neglt	r2, r2
 801e4a6:	fb94 f0f2 	sdiv	r0, r4, r2
 801e4aa:	fb02 4410 	mls	r4, r2, r0, r4
 801e4ae:	fb0c 4405 	mla	r4, ip, r5, r4
 801e4b2:	fb94 f1f2 	sdiv	r1, r4, r2
 801e4b6:	4408      	add	r0, r1
 801e4b8:	fb02 4211 	mls	r2, r2, r1, r4
 801e4bc:	fb0c 0003 	mla	r0, ip, r3, r0
 801e4c0:	f8c8 2000 	str.w	r2, [r8]
 801e4c4:	4378      	muls	r0, r7
 801e4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e4ca <_ZN8touchgfx10ClickEventD1Ev>:
 801e4ca:	4770      	bx	lr

0801e4cc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801e4cc:	2000      	movs	r0, #0
 801e4ce:	4770      	bx	lr

0801e4d0 <_ZN8touchgfx9DragEventD1Ev>:
 801e4d0:	4770      	bx	lr

0801e4d2 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801e4d2:	2001      	movs	r0, #1
 801e4d4:	4770      	bx	lr

0801e4d6 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801e4d6:	2002      	movs	r0, #2
 801e4d8:	4770      	bx	lr

0801e4da <_ZN8touchgfx12GestureEventD1Ev>:
 801e4da:	4770      	bx	lr

0801e4dc <_ZN8touchgfx10ClickEventD0Ev>:
 801e4dc:	b510      	push	{r4, lr}
 801e4de:	4604      	mov	r4, r0
 801e4e0:	210c      	movs	r1, #12
 801e4e2:	f00b fa4e 	bl	8029982 <_ZdlPvj>
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	bd10      	pop	{r4, pc}

0801e4ea <_ZN8touchgfx9DragEventD0Ev>:
 801e4ea:	b510      	push	{r4, lr}
 801e4ec:	4604      	mov	r4, r0
 801e4ee:	2110      	movs	r1, #16
 801e4f0:	f00b fa47 	bl	8029982 <_ZdlPvj>
 801e4f4:	4620      	mov	r0, r4
 801e4f6:	bd10      	pop	{r4, pc}

0801e4f8 <_ZN8touchgfx12GestureEventD0Ev>:
 801e4f8:	b510      	push	{r4, lr}
 801e4fa:	4604      	mov	r4, r0
 801e4fc:	210c      	movs	r1, #12
 801e4fe:	f00b fa40 	bl	8029982 <_ZdlPvj>
 801e502:	4620      	mov	r0, r4
 801e504:	bd10      	pop	{r4, pc}
	...

0801e508 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e508:	b530      	push	{r4, r5, lr}
 801e50a:	460d      	mov	r5, r1
 801e50c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e50e:	b087      	sub	sp, #28
 801e510:	4604      	mov	r4, r0
 801e512:	b301      	cbz	r1, 801e556 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e514:	a801      	add	r0, sp, #4
 801e516:	f7ff ff06 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e51a:	892a      	ldrh	r2, [r5, #8]
 801e51c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e520:	7928      	ldrb	r0, [r5, #4]
 801e522:	1ad2      	subs	r2, r2, r3
 801e524:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e526:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e52a:	441a      	add	r2, r3
 801e52c:	896b      	ldrh	r3, [r5, #10]
 801e52e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e532:	f88d 0010 	strb.w	r0, [sp, #16]
 801e536:	1b5b      	subs	r3, r3, r5
 801e538:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801e53a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e53c:	442b      	add	r3, r5
 801e53e:	4d07      	ldr	r5, [pc, #28]	; (801e55c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e540:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e544:	a903      	add	r1, sp, #12
 801e546:	9503      	str	r5, [sp, #12]
 801e548:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e54c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e550:	6803      	ldr	r3, [r0, #0]
 801e552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e554:	4798      	blx	r3
 801e556:	b007      	add	sp, #28
 801e558:	bd30      	pop	{r4, r5, pc}
 801e55a:	bf00      	nop
 801e55c:	0802e19c 	.word	0x0802e19c

0801e560 <_ZNK8touchgfx4Rect9intersectEss>:
 801e560:	b510      	push	{r4, lr}
 801e562:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e566:	428b      	cmp	r3, r1
 801e568:	dc10      	bgt.n	801e58c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801e56a:	8884      	ldrh	r4, [r0, #4]
 801e56c:	4423      	add	r3, r4
 801e56e:	b21b      	sxth	r3, r3
 801e570:	4299      	cmp	r1, r3
 801e572:	da0b      	bge.n	801e58c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801e574:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e578:	4293      	cmp	r3, r2
 801e57a:	dc07      	bgt.n	801e58c <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801e57c:	88c0      	ldrh	r0, [r0, #6]
 801e57e:	4418      	add	r0, r3
 801e580:	b200      	sxth	r0, r0
 801e582:	4282      	cmp	r2, r0
 801e584:	bfac      	ite	ge
 801e586:	2000      	movge	r0, #0
 801e588:	2001      	movlt	r0, #1
 801e58a:	bd10      	pop	{r4, pc}
 801e58c:	2000      	movs	r0, #0
 801e58e:	e7fc      	b.n	801e58a <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801e590 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801e590:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e592:	460c      	mov	r4, r1
 801e594:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e596:	b089      	sub	sp, #36	; 0x24
 801e598:	4605      	mov	r5, r0
 801e59a:	2900      	cmp	r1, #0
 801e59c:	d054      	beq.n	801e648 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801e59e:	4668      	mov	r0, sp
 801e5a0:	f7ff fec1 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e5a4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801e5a6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801e5a8:	4668      	mov	r0, sp
 801e5aa:	8922      	ldrh	r2, [r4, #8]
 801e5ac:	88e1      	ldrh	r1, [r4, #6]
 801e5ae:	443a      	add	r2, r7
 801e5b0:	4431      	add	r1, r6
 801e5b2:	b212      	sxth	r2, r2
 801e5b4:	b209      	sxth	r1, r1
 801e5b6:	f7ff ffd3 	bl	801e560 <_ZNK8touchgfx4Rect9intersectEss>
 801e5ba:	b1d0      	cbz	r0, 801e5f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801e5bc:	89a2      	ldrh	r2, [r4, #12]
 801e5be:	4668      	mov	r0, sp
 801e5c0:	8961      	ldrh	r1, [r4, #10]
 801e5c2:	443a      	add	r2, r7
 801e5c4:	4431      	add	r1, r6
 801e5c6:	b212      	sxth	r2, r2
 801e5c8:	b209      	sxth	r1, r1
 801e5ca:	f7ff ffc9 	bl	801e560 <_ZNK8touchgfx4Rect9intersectEss>
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	b978      	cbnz	r0, 801e5f2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801e5d2:	4a1e      	ldr	r2, [pc, #120]	; (801e64c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801e5d4:	a904      	add	r1, sp, #16
 801e5d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e5d8:	9204      	str	r2, [sp, #16]
 801e5da:	2202      	movs	r2, #2
 801e5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e5e0:	f88d 2014 	strb.w	r2, [sp, #20]
 801e5e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e5e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e5ec:	6803      	ldr	r3, [r0, #0]
 801e5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e5f0:	4798      	blx	r3
 801e5f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801e5f4:	a802      	add	r0, sp, #8
 801e5f6:	f7ff fe96 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e5fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801e5fe:	88e0      	ldrh	r0, [r4, #6]
 801e600:	8961      	ldrh	r1, [r4, #10]
 801e602:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e606:	1a80      	subs	r0, r0, r2
 801e608:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801e60c:	1a89      	subs	r1, r1, r2
 801e60e:	8923      	ldrh	r3, [r4, #8]
 801e610:	4460      	add	r0, ip
 801e612:	89a2      	ldrh	r2, [r4, #12]
 801e614:	4461      	add	r1, ip
 801e616:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e618:	eba3 030e 	sub.w	r3, r3, lr
 801e61c:	eba2 020e 	sub.w	r2, r2, lr
 801e620:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e624:	7927      	ldrb	r7, [r4, #4]
 801e626:	4433      	add	r3, r6
 801e628:	4432      	add	r2, r6
 801e62a:	4c09      	ldr	r4, [pc, #36]	; (801e650 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801e62c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e62e:	f8ad 101a 	strh.w	r1, [sp, #26]
 801e632:	a904      	add	r1, sp, #16
 801e634:	9404      	str	r4, [sp, #16]
 801e636:	f88d 7014 	strb.w	r7, [sp, #20]
 801e63a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e63e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801e642:	6803      	ldr	r3, [r0, #0]
 801e644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e646:	4798      	blx	r3
 801e648:	b009      	add	sp, #36	; 0x24
 801e64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e64c:	0802e174 	.word	0x0802e174
 801e650:	0802e188 	.word	0x0802e188

0801e654 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e658:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801e65c:	b0a1      	sub	sp, #132	; 0x84
 801e65e:	4604      	mov	r4, r0
 801e660:	460d      	mov	r5, r1
 801e662:	790b      	ldrb	r3, [r1, #4]
 801e664:	f1b9 0f00 	cmp.w	r9, #0
 801e668:	d00f      	beq.n	801e68a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	f040 80a2 	bne.w	801e7b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801e670:	b021      	add	sp, #132	; 0x84
 801e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e676:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e67a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801e67e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e682:	1d20      	adds	r0, r4, #4
 801e684:	f7fb fd78 	bl	801a178 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801e688:	e094      	b.n	801e7b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d1f0      	bne.n	801e670 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801e68e:	4b5f      	ldr	r3, [pc, #380]	; (801e80c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801e696:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801e69a:	f1ba 0f03 	cmp.w	sl, #3
 801e69e:	ddea      	ble.n	801e676 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801e6a0:	f1ba 0f0c 	cmp.w	sl, #12
 801e6a4:	f04f 0303 	mov.w	r3, #3
 801e6a8:	f04f 0600 	mov.w	r6, #0
 801e6ac:	4958      	ldr	r1, [pc, #352]	; (801e810 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801e6ae:	bfd8      	it	le
 801e6b0:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801e6b4:	960a      	str	r6, [sp, #40]	; 0x28
 801e6b6:	bfd8      	it	le
 801e6b8:	fb92 f3f3 	sdivle	r3, r2, r3
 801e6bc:	9301      	str	r3, [sp, #4]
 801e6be:	4b55      	ldr	r3, [pc, #340]	; (801e814 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801e6c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e6c4:	4b54      	ldr	r3, [pc, #336]	; (801e818 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801e6c6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801e6ca:	2248      	movs	r2, #72	; 0x48
 801e6cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e6d4:	ab0e      	add	r3, sp, #56	; 0x38
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	f00b f9fc 	bl	8029ad4 <memcpy>
 801e6dc:	f04f 32ff 	mov.w	r2, #4294967295
 801e6e0:	f8cd a008 	str.w	sl, [sp, #8]
 801e6e4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801e6e8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e6ec:	46b3      	mov	fp, r6
 801e6ee:	fb93 f3f2 	sdiv	r3, r3, r2
 801e6f2:	b29b      	uxth	r3, r3
 801e6f4:	9303      	str	r3, [sp, #12]
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	9a03      	ldr	r2, [sp, #12]
 801e6fa:	88ef      	ldrh	r7, [r5, #6]
 801e6fc:	a80a      	add	r0, sp, #40	; 0x28
 801e6fe:	9309      	str	r3, [sp, #36]	; 0x24
 801e700:	9b07      	ldr	r3, [sp, #28]
 801e702:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801e706:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801e70a:	fb13 f302 	smulbb	r3, r3, r2
 801e70e:	b29b      	uxth	r3, r3
 801e710:	9304      	str	r3, [sp, #16]
 801e712:	9b07      	ldr	r3, [sp, #28]
 801e714:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e718:	685b      	ldr	r3, [r3, #4]
 801e71a:	fb13 f302 	smulbb	r3, r3, r2
 801e71e:	b29b      	uxth	r3, r3
 801e720:	9305      	str	r3, [sp, #20]
 801e722:	9b04      	ldr	r3, [sp, #16]
 801e724:	441f      	add	r7, r3
 801e726:	9b05      	ldr	r3, [sp, #20]
 801e728:	4498      	add	r8, r3
 801e72a:	b23f      	sxth	r7, r7
 801e72c:	fa0f f888 	sxth.w	r8, r8
 801e730:	4639      	mov	r1, r7
 801e732:	4642      	mov	r2, r8
 801e734:	f7ff ff14 	bl	801e560 <_ZNK8touchgfx4Rect9intersectEss>
 801e738:	b380      	cbz	r0, 801e79c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801e73a:	4639      	mov	r1, r7
 801e73c:	ab09      	add	r3, sp, #36	; 0x24
 801e73e:	4642      	mov	r2, r8
 801e740:	1d20      	adds	r0, r4, #4
 801e742:	f7fb fd19 	bl	801a178 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801e746:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e748:	b341      	cbz	r1, 801e79c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801e74a:	4549      	cmp	r1, r9
 801e74c:	d026      	beq.n	801e79c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801e74e:	a80c      	add	r0, sp, #48	; 0x30
 801e750:	f7ff fde9 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e754:	2002      	movs	r0, #2
 801e756:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e75a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801e75e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801e762:	fb92 f2f0 	sdiv	r2, r2, r0
 801e766:	440a      	add	r2, r1
 801e768:	1a99      	subs	r1, r3, r2
 801e76a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e76e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801e772:	fb93 f3f0 	sdiv	r3, r3, r0
 801e776:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801e77a:	4403      	add	r3, r0
 801e77c:	1ad3      	subs	r3, r2, r3
 801e77e:	9a06      	ldr	r2, [sp, #24]
 801e780:	435b      	muls	r3, r3
 801e782:	fb01 3301 	mla	r3, r1, r1, r3
 801e786:	4293      	cmp	r3, r2
 801e788:	d208      	bcs.n	801e79c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801e78a:	9a04      	ldr	r2, [sp, #16]
 801e78c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e790:	86a2      	strh	r2, [r4, #52]	; 0x34
 801e792:	9a05      	ldr	r2, [sp, #20]
 801e794:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801e798:	86e2      	strh	r2, [r4, #54]	; 0x36
 801e79a:	9306      	str	r3, [sp, #24]
 801e79c:	f10b 0b02 	add.w	fp, fp, #2
 801e7a0:	f1bb 0f08 	cmp.w	fp, #8
 801e7a4:	dda7      	ble.n	801e6f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801e7a6:	9b02      	ldr	r3, [sp, #8]
 801e7a8:	3601      	adds	r6, #1
 801e7aa:	4453      	add	r3, sl
 801e7ac:	9302      	str	r3, [sp, #8]
 801e7ae:	9b01      	ldr	r3, [sp, #4]
 801e7b0:	42b3      	cmp	r3, r6
 801e7b2:	d199      	bne.n	801e6e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801e7b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e7b6:	2900      	cmp	r1, #0
 801e7b8:	f43f af5a 	beq.w	801e670 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801e7bc:	a80c      	add	r0, sp, #48	; 0x30
 801e7be:	2600      	movs	r6, #0
 801e7c0:	f7ff fdb1 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e7c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801e7c8:	88ea      	ldrh	r2, [r5, #6]
 801e7ca:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801e7ce:	1ad2      	subs	r2, r2, r3
 801e7d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e7d2:	7929      	ldrb	r1, [r5, #4]
 801e7d4:	441a      	add	r2, r3
 801e7d6:	892b      	ldrh	r3, [r5, #8]
 801e7d8:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801e7dc:	a90e      	add	r1, sp, #56	; 0x38
 801e7de:	1a1b      	subs	r3, r3, r0
 801e7e0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801e7e2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801e7e6:	4403      	add	r3, r0
 801e7e8:	480c      	ldr	r0, [pc, #48]	; (801e81c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801e7ea:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801e7ee:	900e      	str	r0, [sp, #56]	; 0x38
 801e7f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e7f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801e7f6:	6803      	ldr	r3, [r0, #0]
 801e7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e7fa:	4798      	blx	r3
 801e7fc:	792b      	ldrb	r3, [r5, #4]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	f43f af36 	beq.w	801e670 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801e804:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801e808:	e732      	b.n	801e670 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801e80a:	bf00      	nop
 801e80c:	2000bf18 	.word	0x2000bf18
 801e810:	0802b410 	.word	0x0802b410
 801e814:	2000bf0a 	.word	0x2000bf0a
 801e818:	2000bf0c 	.word	0x2000bf0c
 801e81c:	0802e174 	.word	0x0802e174

0801e820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e822:	4604      	mov	r4, r0
 801e824:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e828:	3201      	adds	r2, #1
 801e82a:	d112      	bne.n	801e852 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e82c:	2500      	movs	r5, #0
 801e82e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e832:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e836:	6803      	ldr	r3, [r0, #0]
 801e838:	9500      	str	r5, [sp, #0]
 801e83a:	466d      	mov	r5, sp
 801e83c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e840:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e844:	4629      	mov	r1, r5
 801e846:	6a1b      	ldr	r3, [r3, #32]
 801e848:	4798      	blx	r3
 801e84a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e84e:	e884 0003 	stmia.w	r4, {r0, r1}
 801e852:	4620      	mov	r0, r4
 801e854:	b003      	add	sp, #12
 801e856:	bd30      	pop	{r4, r5, pc}

0801e858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e858:	b513      	push	{r0, r1, r4, lr}
 801e85a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e85e:	4604      	mov	r4, r0
 801e860:	3301      	adds	r3, #1
 801e862:	d109      	bne.n	801e878 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e864:	4601      	mov	r1, r0
 801e866:	4668      	mov	r0, sp
 801e868:	f7ff fd5d 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e86c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e870:	8423      	strh	r3, [r4, #32]
 801e872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e876:	8463      	strh	r3, [r4, #34]	; 0x22
 801e878:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e87c:	b002      	add	sp, #8
 801e87e:	bd10      	pop	{r4, pc}

0801e880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e880:	b513      	push	{r0, r1, r4, lr}
 801e882:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e886:	4604      	mov	r4, r0
 801e888:	3301      	adds	r3, #1
 801e88a:	d109      	bne.n	801e8a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e88c:	4601      	mov	r1, r0
 801e88e:	4668      	mov	r0, sp
 801e890:	f7ff fd49 	bl	801e326 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e894:	f8bd 3000 	ldrh.w	r3, [sp]
 801e898:	8423      	strh	r3, [r4, #32]
 801e89a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e89e:	8463      	strh	r3, [r4, #34]	; 0x22
 801e8a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e8a4:	b002      	add	sp, #8
 801e8a6:	bd10      	pop	{r4, pc}

0801e8a8 <_ZN8touchgfx6ScreenC1Ev>:
 801e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8aa:	4605      	mov	r5, r0
 801e8ac:	4b17      	ldr	r3, [pc, #92]	; (801e90c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e8ae:	2200      	movs	r2, #0
 801e8b0:	4917      	ldr	r1, [pc, #92]	; (801e910 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e8b2:	f845 3b04 	str.w	r3, [r5], #4
 801e8b6:	2301      	movs	r3, #1
 801e8b8:	8102      	strh	r2, [r0, #8]
 801e8ba:	4604      	mov	r4, r0
 801e8bc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801e8c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801e8c4:	4b13      	ldr	r3, [pc, #76]	; (801e914 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e8c6:	8142      	strh	r2, [r0, #10]
 801e8c8:	f9b3 7000 	ldrsh.w	r7, [r3]
 801e8cc:	4b12      	ldr	r3, [pc, #72]	; (801e918 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801e8ce:	8182      	strh	r2, [r0, #12]
 801e8d0:	81c2      	strh	r2, [r0, #14]
 801e8d2:	8202      	strh	r2, [r0, #16]
 801e8d4:	8242      	strh	r2, [r0, #18]
 801e8d6:	8282      	strh	r2, [r0, #20]
 801e8d8:	82c2      	strh	r2, [r0, #22]
 801e8da:	6202      	str	r2, [r0, #32]
 801e8dc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801e8e0:	6342      	str	r2, [r0, #52]	; 0x34
 801e8e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e8e6:	6041      	str	r1, [r0, #4]
 801e8e8:	4611      	mov	r1, r2
 801e8ea:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e8ee:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801e8f2:	4628      	mov	r0, r5
 801e8f4:	f7f3 fec6 	bl	8012684 <_ZN8touchgfx8Drawable5setXYEss>
 801e8f8:	4639      	mov	r1, r7
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	f7f3 fee0 	bl	80126c0 <_ZN8touchgfx8Drawable8setWidthEs>
 801e900:	4628      	mov	r0, r5
 801e902:	4631      	mov	r1, r6
 801e904:	f7f3 feeb 	bl	80126de <_ZN8touchgfx8Drawable9setHeightEs>
 801e908:	4620      	mov	r0, r4
 801e90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e90c:	0802e1b0 	.word	0x0802e1b0
 801e910:	0802cc9c 	.word	0x0802cc9c
 801e914:	2000bf0a 	.word	0x2000bf0a
 801e918:	2000bf0c 	.word	0x2000bf0c

0801e91c <_ZN8touchgfx6Screen4drawEv>:
 801e91c:	4b09      	ldr	r3, [pc, #36]	; (801e944 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e91e:	b507      	push	{r0, r1, r2, lr}
 801e920:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e924:	2100      	movs	r1, #0
 801e926:	4b08      	ldr	r3, [pc, #32]	; (801e948 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e928:	9100      	str	r1, [sp, #0]
 801e92a:	4669      	mov	r1, sp
 801e92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e930:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e934:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e938:	6803      	ldr	r3, [r0, #0]
 801e93a:	689b      	ldr	r3, [r3, #8]
 801e93c:	4798      	blx	r3
 801e93e:	b003      	add	sp, #12
 801e940:	f85d fb04 	ldr.w	pc, [sp], #4
 801e944:	2000bf0a 	.word	0x2000bf0a
 801e948:	2000bf0c 	.word	0x2000bf0c

0801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e950:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e954:	b089      	sub	sp, #36	; 0x24
 801e956:	4680      	mov	r8, r0
 801e958:	460c      	mov	r4, r1
 801e95a:	4615      	mov	r5, r2
 801e95c:	b16b      	cbz	r3, 801e97a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801e95e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e962:	b153      	cbz	r3, 801e97a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801e964:	4628      	mov	r0, r5
 801e966:	f7ff ff5b 	bl	801e820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e96a:	4621      	mov	r1, r4
 801e96c:	f7fe ffc2 	bl	801d8f4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e970:	69eb      	ldr	r3, [r5, #28]
 801e972:	b928      	cbnz	r0, 801e980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801e974:	461d      	mov	r5, r3
 801e976:	2b00      	cmp	r3, #0
 801e978:	d1f4      	bne.n	801e964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801e97a:	b009      	add	sp, #36	; 0x24
 801e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e980:	ae04      	add	r6, sp, #16
 801e982:	2b00      	cmp	r3, #0
 801e984:	d051      	beq.n	801ea2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801e986:	682b      	ldr	r3, [r5, #0]
 801e988:	4629      	mov	r1, r5
 801e98a:	a802      	add	r0, sp, #8
 801e98c:	68db      	ldr	r3, [r3, #12]
 801e98e:	4798      	blx	r3
 801e990:	4628      	mov	r0, r5
 801e992:	f7ff ff61 	bl	801e858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801e996:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801e99a:	4407      	add	r7, r0
 801e99c:	4628      	mov	r0, r5
 801e99e:	f7ff ff6f 	bl	801e880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801e9a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e9a6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801e9aa:	b23f      	sxth	r7, r7
 801e9ac:	4418      	add	r0, r3
 801e9ae:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e9b2:	4621      	mov	r1, r4
 801e9b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e9b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e9bc:	4630      	mov	r0, r6
 801e9be:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e9c2:	f8ad 7010 	strh.w	r7, [sp, #16]
 801e9c6:	f7fb fc89 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801e9ca:	4628      	mov	r0, r5
 801e9cc:	f7ff ff28 	bl	801e820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801e9d0:	ab06      	add	r3, sp, #24
 801e9d2:	4602      	mov	r2, r0
 801e9d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e9d8:	e883 0003 	stmia.w	r3, {r0, r1}
 801e9dc:	4611      	mov	r1, r2
 801e9de:	4618      	mov	r0, r3
 801e9e0:	f7fb fc7c 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801e9e4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801e9e8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e9ec:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801e9f0:	4299      	cmp	r1, r3
 801e9f2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801e9f6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801e9fa:	d10b      	bne.n	801ea14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801e9fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ea00:	4552      	cmp	r2, sl
 801ea02:	d107      	bne.n	801ea14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801ea04:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ea08:	455a      	cmp	r2, fp
 801ea0a:	d103      	bne.n	801ea14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801ea0c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801ea10:	454a      	cmp	r2, r9
 801ea12:	d00a      	beq.n	801ea2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801ea14:	f1bb 0f00 	cmp.w	fp, #0
 801ea18:	d002      	beq.n	801ea20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801ea1a:	f1b9 0f00 	cmp.w	r9, #0
 801ea1e:	d12e      	bne.n	801ea7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801ea20:	69ea      	ldr	r2, [r5, #28]
 801ea22:	4621      	mov	r1, r4
 801ea24:	4640      	mov	r0, r8
 801ea26:	f7ff ff91 	bl	801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ea2a:	4628      	mov	r0, r5
 801ea2c:	f7ff fef8 	bl	801e820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ea30:	6861      	ldr	r1, [r4, #4]
 801ea32:	4602      	mov	r2, r0
 801ea34:	4633      	mov	r3, r6
 801ea36:	6820      	ldr	r0, [r4, #0]
 801ea38:	c303      	stmia	r3!, {r0, r1}
 801ea3a:	4611      	mov	r1, r2
 801ea3c:	4630      	mov	r0, r6
 801ea3e:	f7fb fc4d 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801ea42:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d097      	beq.n	801e97a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ea4a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d093      	beq.n	801e97a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ea52:	4628      	mov	r0, r5
 801ea54:	f7ff ff00 	bl	801e858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ea58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ea5c:	1a18      	subs	r0, r3, r0
 801ea5e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ea62:	4628      	mov	r0, r5
 801ea64:	f7ff ff0c 	bl	801e880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ea68:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ea6c:	4631      	mov	r1, r6
 801ea6e:	1a18      	subs	r0, r3, r0
 801ea70:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ea74:	4628      	mov	r0, r5
 801ea76:	682b      	ldr	r3, [r5, #0]
 801ea78:	689b      	ldr	r3, [r3, #8]
 801ea7a:	4798      	blx	r3
 801ea7c:	e77d      	b.n	801e97a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ea7e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ea82:	fa1f f08a 	uxth.w	r0, sl
 801ea86:	4552      	cmp	r2, sl
 801ea88:	9000      	str	r0, [sp, #0]
 801ea8a:	da12      	bge.n	801eab2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801ea8c:	9301      	str	r3, [sp, #4]
 801ea8e:	9b00      	ldr	r3, [sp, #0]
 801ea90:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ea94:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ea98:	1a9a      	subs	r2, r3, r2
 801ea9a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ea9e:	4631      	mov	r1, r6
 801eaa0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801eaa4:	4640      	mov	r0, r8
 801eaa6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801eaaa:	69ea      	ldr	r2, [r5, #28]
 801eaac:	f7ff ff4e 	bl	801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eab0:	9b01      	ldr	r3, [sp, #4]
 801eab2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eab6:	b29f      	uxth	r7, r3
 801eab8:	429a      	cmp	r2, r3
 801eaba:	da0d      	bge.n	801ead8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801eabc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801eac0:	1aba      	subs	r2, r7, r2
 801eac2:	f8ad a012 	strh.w	sl, [sp, #18]
 801eac6:	4631      	mov	r1, r6
 801eac8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801eacc:	4640      	mov	r0, r8
 801eace:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ead2:	69ea      	ldr	r2, [r5, #28]
 801ead4:	f7ff ff3a 	bl	801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ead8:	8822      	ldrh	r2, [r4, #0]
 801eada:	445f      	add	r7, fp
 801eadc:	88a3      	ldrh	r3, [r4, #4]
 801eade:	b2bf      	uxth	r7, r7
 801eae0:	4413      	add	r3, r2
 801eae2:	b23a      	sxth	r2, r7
 801eae4:	b29b      	uxth	r3, r3
 801eae6:	b219      	sxth	r1, r3
 801eae8:	4291      	cmp	r1, r2
 801eaea:	dd0d      	ble.n	801eb08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801eaec:	1bdb      	subs	r3, r3, r7
 801eaee:	f8ad 2010 	strh.w	r2, [sp, #16]
 801eaf2:	f8ad a012 	strh.w	sl, [sp, #18]
 801eaf6:	4631      	mov	r1, r6
 801eaf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801eafc:	4640      	mov	r0, r8
 801eafe:	f8ad 9016 	strh.w	r9, [sp, #22]
 801eb02:	69ea      	ldr	r2, [r5, #28]
 801eb04:	f7ff ff22 	bl	801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eb08:	88e2      	ldrh	r2, [r4, #6]
 801eb0a:	8863      	ldrh	r3, [r4, #2]
 801eb0c:	4413      	add	r3, r2
 801eb0e:	9a00      	ldr	r2, [sp, #0]
 801eb10:	444a      	add	r2, r9
 801eb12:	b29b      	uxth	r3, r3
 801eb14:	fa1f f982 	uxth.w	r9, r2
 801eb18:	b219      	sxth	r1, r3
 801eb1a:	fa0f f289 	sxth.w	r2, r9
 801eb1e:	428a      	cmp	r2, r1
 801eb20:	da83      	bge.n	801ea2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801eb22:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801eb26:	eba3 0309 	sub.w	r3, r3, r9
 801eb2a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801eb2e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801eb32:	4631      	mov	r1, r6
 801eb34:	f8ad 0010 	strh.w	r0, [sp, #16]
 801eb38:	f8ad 2012 	strh.w	r2, [sp, #18]
 801eb3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eb40:	69ea      	ldr	r2, [r5, #28]
 801eb42:	e76f      	b.n	801ea24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801eb44 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801eb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb46:	2300      	movs	r3, #0
 801eb48:	aa02      	add	r2, sp, #8
 801eb4a:	4604      	mov	r4, r0
 801eb4c:	3004      	adds	r0, #4
 801eb4e:	f842 3d04 	str.w	r3, [r2, #-4]!
 801eb52:	460d      	mov	r5, r1
 801eb54:	f7fb fc99 	bl	801a48a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801eb58:	9a01      	ldr	r2, [sp, #4]
 801eb5a:	b11a      	cbz	r2, 801eb64 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801eb5c:	4629      	mov	r1, r5
 801eb5e:	4620      	mov	r0, r4
 801eb60:	f7ff fef4 	bl	801e94c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eb64:	b003      	add	sp, #12
 801eb66:	bd30      	pop	{r4, r5, pc}

0801eb68 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801eb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eb6a:	4602      	mov	r2, r0
 801eb6c:	4604      	mov	r4, r0
 801eb6e:	460d      	mov	r5, r1
 801eb70:	466b      	mov	r3, sp
 801eb72:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801eb76:	6851      	ldr	r1, [r2, #4]
 801eb78:	c303      	stmia	r3!, {r0, r1}
 801eb7a:	4629      	mov	r1, r5
 801eb7c:	4668      	mov	r0, sp
 801eb7e:	f7fb fbad 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 801eb82:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801eb86:	4669      	mov	r1, sp
 801eb88:	b123      	cbz	r3, 801eb94 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801eb8a:	4620      	mov	r0, r4
 801eb8c:	f7ff ffda 	bl	801eb44 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801eb90:	b003      	add	sp, #12
 801eb92:	bd30      	pop	{r4, r5, pc}
 801eb94:	1d20      	adds	r0, r4, #4
 801eb96:	f7fb fc3f 	bl	801a418 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801eb9a:	e7f9      	b.n	801eb90 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801eb9c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801eb9c:	460b      	mov	r3, r1
 801eb9e:	680a      	ldr	r2, [r1, #0]
 801eba0:	1d01      	adds	r1, r0, #4
 801eba2:	6952      	ldr	r2, [r2, #20]
 801eba4:	4618      	mov	r0, r3
 801eba6:	4710      	bx	r2

0801eba8 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801eba8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ebac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ebb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebb4:	bfcc      	ite	gt
 801ebb6:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801ebba:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801ebbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ebc2:	ee10 3a10 	vmov	r3, s0
 801ebc6:	b218      	sxth	r0, r3
 801ebc8:	4770      	bx	lr

0801ebca <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801ebca:	b510      	push	{r4, lr}
 801ebcc:	4298      	cmp	r0, r3
 801ebce:	eb01 0402 	add.w	r4, r1, r2
 801ebd2:	b224      	sxth	r4, r4
 801ebd4:	d21f      	bcs.n	801ec16 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801ebd6:	b1f3      	cbz	r3, 801ec16 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801ebd8:	ee07 0a90 	vmov	s15, r0
 801ebdc:	ee06 1a10 	vmov	s12, r1
 801ebe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebe4:	ee07 3a90 	vmov	s15, r3
 801ebe8:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801ebec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ebf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ebf4:	ee06 2a90 	vmov	s13, r2
 801ebf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ebfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ec00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801ec08:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ec0c:	eea6 0a87 	vfma.f32	s0, s13, s14
 801ec10:	f7ff ffca 	bl	801eba8 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801ec14:	4604      	mov	r4, r0
 801ec16:	4620      	mov	r0, r4
 801ec18:	bd10      	pop	{r4, pc}
	...

0801ec1c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801ec1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801ec20:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801ec24:	4b03      	ldr	r3, [pc, #12]	; (801ec34 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801ec26:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ec2a:	bf08      	it	eq
 801ec2c:	2300      	moveq	r3, #0
 801ec2e:	4308      	orrs	r0, r1
 801ec30:	4318      	orrs	r0, r3
 801ec32:	4770      	bx	lr
 801ec34:	fffffe00 	.word	0xfffffe00

0801ec38 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801ec38:	7b43      	ldrb	r3, [r0, #13]
 801ec3a:	7201      	strb	r1, [r0, #8]
 801ec3c:	b289      	uxth	r1, r1
 801ec3e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801ec42:	05ca      	lsls	r2, r1, #23
 801ec44:	bf48      	it	mi
 801ec46:	f043 0320 	orrmi.w	r3, r3, #32
 801ec4a:	7343      	strb	r3, [r0, #13]
 801ec4c:	058b      	lsls	r3, r1, #22
 801ec4e:	bf42      	ittt	mi
 801ec50:	7b43      	ldrbmi	r3, [r0, #13]
 801ec52:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ec56:	7343      	strbmi	r3, [r0, #13]
 801ec58:	4770      	bx	lr

0801ec5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ec5a:	b530      	push	{r4, r5, lr}
 801ec5c:	2500      	movs	r5, #0
 801ec5e:	2401      	movs	r4, #1
 801ec60:	6843      	ldr	r3, [r0, #4]
 801ec62:	b913      	cbnz	r3, 801ec6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ec64:	6803      	ldr	r3, [r0, #0]
 801ec66:	b1f3      	cbz	r3, 801eca6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ec68:	6043      	str	r3, [r0, #4]
 801ec6a:	7c03      	ldrb	r3, [r0, #16]
 801ec6c:	b143      	cbz	r3, 801ec80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ec6e:	68c3      	ldr	r3, [r0, #12]
 801ec70:	b12b      	cbz	r3, 801ec7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ec72:	881a      	ldrh	r2, [r3, #0]
 801ec74:	b11a      	cbz	r2, 801ec7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ec76:	1c9a      	adds	r2, r3, #2
 801ec78:	60c2      	str	r2, [r0, #12]
 801ec7a:	8818      	ldrh	r0, [r3, #0]
 801ec7c:	bd30      	pop	{r4, r5, pc}
 801ec7e:	7405      	strb	r5, [r0, #16]
 801ec80:	6843      	ldr	r3, [r0, #4]
 801ec82:	8819      	ldrh	r1, [r3, #0]
 801ec84:	b179      	cbz	r1, 801eca6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801ec86:	1c9a      	adds	r2, r3, #2
 801ec88:	2902      	cmp	r1, #2
 801ec8a:	6042      	str	r2, [r0, #4]
 801ec8c:	d1f5      	bne.n	801ec7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ec8e:	6883      	ldr	r3, [r0, #8]
 801ec90:	1d1a      	adds	r2, r3, #4
 801ec92:	6082      	str	r2, [r0, #8]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	60c3      	str	r3, [r0, #12]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d0e1      	beq.n	801ec60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ec9c:	881b      	ldrh	r3, [r3, #0]
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d0de      	beq.n	801ec60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801eca2:	7404      	strb	r4, [r0, #16]
 801eca4:	e7dc      	b.n	801ec60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801eca6:	2000      	movs	r0, #0
 801eca8:	e7e8      	b.n	801ec7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ecaa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ecaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecac:	4605      	mov	r5, r0
 801ecae:	4608      	mov	r0, r1
 801ecb0:	b1f1      	cbz	r1, 801ecf0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ecb2:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801ecb6:	460b      	mov	r3, r1
 801ecb8:	f101 0708 	add.w	r7, r1, #8
 801ecbc:	4622      	mov	r2, r4
 801ecbe:	6818      	ldr	r0, [r3, #0]
 801ecc0:	3308      	adds	r3, #8
 801ecc2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ecc6:	4626      	mov	r6, r4
 801ecc8:	42bb      	cmp	r3, r7
 801ecca:	c603      	stmia	r6!, {r0, r1}
 801eccc:	4634      	mov	r4, r6
 801ecce:	d1f6      	bne.n	801ecbe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ecd0:	6818      	ldr	r0, [r3, #0]
 801ecd2:	6030      	str	r0, [r6, #0]
 801ecd4:	4610      	mov	r0, r2
 801ecd6:	889b      	ldrh	r3, [r3, #4]
 801ecd8:	80b3      	strh	r3, [r6, #4]
 801ecda:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ecde:	015b      	lsls	r3, r3, #5
 801ece0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ece4:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801ece8:	430b      	orrs	r3, r1
 801ecea:	425b      	negs	r3, r3
 801ecec:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ecf2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ecf2:	b538      	push	{r3, r4, r5, lr}
 801ecf4:	460c      	mov	r4, r1
 801ecf6:	6811      	ldr	r1, [r2, #0]
 801ecf8:	4610      	mov	r0, r2
 801ecfa:	68cd      	ldr	r5, [r1, #12]
 801ecfc:	4619      	mov	r1, r3
 801ecfe:	47a8      	blx	r5
 801ed00:	2800      	cmp	r0, #0
 801ed02:	bf08      	it	eq
 801ed04:	4620      	moveq	r0, r4
 801ed06:	bd38      	pop	{r3, r4, r5, pc}

0801ed08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ed08:	b570      	push	{r4, r5, r6, lr}
 801ed0a:	8810      	ldrh	r0, [r2, #0]
 801ed0c:	4298      	cmp	r0, r3
 801ed0e:	d817      	bhi.n	801ed40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed10:	1e48      	subs	r0, r1, #1
 801ed12:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ed16:	4298      	cmp	r0, r3
 801ed18:	d312      	bcc.n	801ed40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed1a:	2400      	movs	r4, #0
 801ed1c:	428c      	cmp	r4, r1
 801ed1e:	d20f      	bcs.n	801ed40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ed20:	1860      	adds	r0, r4, r1
 801ed22:	1040      	asrs	r0, r0, #1
 801ed24:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ed28:	0085      	lsls	r5, r0, #2
 801ed2a:	42b3      	cmp	r3, r6
 801ed2c:	d902      	bls.n	801ed34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ed2e:	3001      	adds	r0, #1
 801ed30:	b284      	uxth	r4, r0
 801ed32:	e7f3      	b.n	801ed1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ed34:	d102      	bne.n	801ed3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801ed36:	442a      	add	r2, r5
 801ed38:	8850      	ldrh	r0, [r2, #2]
 801ed3a:	bd70      	pop	{r4, r5, r6, pc}
 801ed3c:	b281      	uxth	r1, r0
 801ed3e:	e7ed      	b.n	801ed1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ed40:	2000      	movs	r0, #0
 801ed42:	e7fa      	b.n	801ed3a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801ed44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801ed44:	b510      	push	{r4, lr}
 801ed46:	8ac3      	ldrh	r3, [r0, #22]
 801ed48:	428b      	cmp	r3, r1
 801ed4a:	d805      	bhi.n	801ed58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801ed4c:	4b07      	ldr	r3, [pc, #28]	; (801ed6c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801ed4e:	21fd      	movs	r1, #253	; 0xfd
 801ed50:	4a07      	ldr	r2, [pc, #28]	; (801ed70 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801ed52:	4808      	ldr	r0, [pc, #32]	; (801ed74 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801ed54:	f00a fe40 	bl	80299d8 <__assert_func>
 801ed58:	8a83      	ldrh	r3, [r0, #20]
 801ed5a:	240a      	movs	r4, #10
 801ed5c:	4419      	add	r1, r3
 801ed5e:	fbb1 f3f4 	udiv	r3, r1, r4
 801ed62:	fb04 1113 	mls	r1, r4, r3, r1
 801ed66:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ed6a:	bd10      	pop	{r4, pc}
 801ed6c:	0802e1fd 	.word	0x0802e1fd
 801ed70:	0802e62c 	.word	0x0802e62c
 801ed74:	0802e20b 	.word	0x0802e20b

0801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801ed78:	b508      	push	{r3, lr}
 801ed7a:	8ac3      	ldrh	r3, [r0, #22]
 801ed7c:	428b      	cmp	r3, r1
 801ed7e:	d805      	bhi.n	801ed8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801ed80:	4b07      	ldr	r3, [pc, #28]	; (801eda0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801ed82:	21d3      	movs	r1, #211	; 0xd3
 801ed84:	4a07      	ldr	r2, [pc, #28]	; (801eda4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801ed86:	4808      	ldr	r0, [pc, #32]	; (801eda8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801ed88:	f00a fe26 	bl	80299d8 <__assert_func>
 801ed8c:	8a83      	ldrh	r3, [r0, #20]
 801ed8e:	220a      	movs	r2, #10
 801ed90:	4419      	add	r1, r3
 801ed92:	fbb1 f3f2 	udiv	r3, r1, r2
 801ed96:	fb02 1113 	mls	r1, r2, r3, r1
 801ed9a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801ed9e:	bd08      	pop	{r3, pc}
 801eda0:	0802e1fd 	.word	0x0802e1fd
 801eda4:	0802e37c 	.word	0x0802e37c
 801eda8:	0802e20b 	.word	0x0802e20b

0801edac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801edac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb0:	4604      	mov	r4, r0
 801edb2:	4688      	mov	r8, r1
 801edb4:	4615      	mov	r5, r2
 801edb6:	b94a      	cbnz	r2, 801edcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801edb8:	4691      	mov	r9, r2
 801edba:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801edbe:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801edc2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801edc6:	4648      	mov	r0, r9
 801edc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edcc:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801edd0:	8892      	ldrh	r2, [r2, #4]
 801edd2:	462b      	mov	r3, r5
 801edd4:	f105 0c08 	add.w	ip, r5, #8
 801edd8:	46b3      	mov	fp, r6
 801edda:	6818      	ldr	r0, [r3, #0]
 801eddc:	3308      	adds	r3, #8
 801edde:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ede2:	4637      	mov	r7, r6
 801ede4:	4563      	cmp	r3, ip
 801ede6:	c703      	stmia	r7!, {r0, r1}
 801ede8:	463e      	mov	r6, r7
 801edea:	d1f6      	bne.n	801edda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801edec:	6818      	ldr	r0, [r3, #0]
 801edee:	46d9      	mov	r9, fp
 801edf0:	6038      	str	r0, [r7, #0]
 801edf2:	889b      	ldrh	r3, [r3, #4]
 801edf4:	80bb      	strh	r3, [r7, #4]
 801edf6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801edfa:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801edfe:	18d3      	adds	r3, r2, r3
 801ee00:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801ee04:	b298      	uxth	r0, r3
 801ee06:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801ee0a:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801ee0e:	281d      	cmp	r0, #29
 801ee10:	ea4a 0a01 	orr.w	sl, sl, r1
 801ee14:	fa1f f68a 	uxth.w	r6, sl
 801ee18:	d842      	bhi.n	801eea0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801ee1a:	2301      	movs	r3, #1
 801ee1c:	4950      	ldr	r1, [pc, #320]	; (801ef60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801ee1e:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801ee22:	4083      	lsls	r3, r0
 801ee24:	420b      	tst	r3, r1
 801ee26:	d114      	bne.n	801ee52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801ee28:	f413 7f60 	tst.w	r3, #896	; 0x380
 801ee2c:	d03c      	beq.n	801eea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801ee2e:	fa1f fa8a 	uxth.w	sl, sl
 801ee32:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801ee36:	4658      	mov	r0, fp
 801ee38:	eba1 010a 	sub.w	r1, r1, sl
 801ee3c:	b209      	sxth	r1, r1
 801ee3e:	f7ff fefb 	bl	801ec38 <_ZN8touchgfx9GlyphNode6setTopEs>
 801ee42:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801ee46:	1b86      	subs	r6, r0, r6
 801ee48:	eba6 0a0a 	sub.w	sl, r6, sl
 801ee4c:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801ee50:	e7b9      	b.n	801edc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ee52:	2100      	movs	r1, #0
 801ee54:	f104 001a 	add.w	r0, r4, #26
 801ee58:	f7ff ff8e 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801ee5c:	f640 6333 	movw	r3, #3635	; 0xe33
 801ee60:	4601      	mov	r1, r0
 801ee62:	4298      	cmp	r0, r3
 801ee64:	d10a      	bne.n	801ee7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801ee66:	f8d8 3000 	ldr.w	r3, [r8]
 801ee6a:	4640      	mov	r0, r8
 801ee6c:	68db      	ldr	r3, [r3, #12]
 801ee6e:	4798      	blx	r3
 801ee70:	7b41      	ldrb	r1, [r0, #13]
 801ee72:	7a00      	ldrb	r0, [r0, #8]
 801ee74:	f7ff fed2 	bl	801ec1c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801ee78:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801ee7c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801ee80:	4658      	mov	r0, fp
 801ee82:	4431      	add	r1, r6
 801ee84:	4451      	add	r1, sl
 801ee86:	b209      	sxth	r1, r1
 801ee88:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801ee8c:	f7ff fed4 	bl	801ec38 <_ZN8touchgfx9GlyphNode6setTopEs>
 801ee90:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801ee94:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801ee98:	1a9b      	subs	r3, r3, r2
 801ee9a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801ee9e:	e792      	b.n	801edc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801eea0:	f640 631b 	movw	r3, #3611	; 0xe1b
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d005      	beq.n	801eeb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801eea8:	f022 0302 	bic.w	r3, r2, #2
 801eeac:	f640 611d 	movw	r1, #3613	; 0xe1d
 801eeb0:	428b      	cmp	r3, r1
 801eeb2:	d119      	bne.n	801eee8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801eeb4:	1e53      	subs	r3, r2, #1
 801eeb6:	4629      	mov	r1, r5
 801eeb8:	4642      	mov	r2, r8
 801eeba:	4620      	mov	r0, r4
 801eebc:	b29b      	uxth	r3, r3
 801eebe:	f7ff ff18 	bl	801ecf2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801eec2:	7b41      	ldrb	r1, [r0, #13]
 801eec4:	7a00      	ldrb	r0, [r0, #8]
 801eec6:	f7ff fea9 	bl	801ec1c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801eeca:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801eece:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801eed2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eed6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801eeda:	4313      	orrs	r3, r2
 801eedc:	115a      	asrs	r2, r3, #5
 801eede:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801eee2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801eee6:	e02e      	b.n	801ef46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801eee8:	4639      	mov	r1, r7
 801eeea:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801eeee:	f7ff fe95 	bl	801ec1c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801eef2:	f640 6109 	movw	r1, #3593	; 0xe09
 801eef6:	f022 0310 	bic.w	r3, r2, #16
 801eefa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801eefe:	428b      	cmp	r3, r1
 801ef00:	d003      	beq.n	801ef0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801ef02:	f640 6313 	movw	r3, #3603	; 0xe13
 801ef06:	429a      	cmp	r2, r3
 801ef08:	d127      	bne.n	801ef5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801ef0a:	b27f      	sxtb	r7, r7
 801ef0c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801ef10:	4629      	mov	r1, r5
 801ef12:	4620      	mov	r0, r4
 801ef14:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801ef18:	431f      	orrs	r7, r3
 801ef1a:	f640 6313 	movw	r3, #3603	; 0xe13
 801ef1e:	429a      	cmp	r2, r3
 801ef20:	bf14      	ite	ne
 801ef22:	f102 33ff 	addne.w	r3, r2, #4294967295
 801ef26:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ef2a:	4642      	mov	r2, r8
 801ef2c:	bf18      	it	ne
 801ef2e:	b29b      	uxthne	r3, r3
 801ef30:	f7ff fedf 	bl	801ecf2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ef34:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801ef38:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ef3c:	7a83      	ldrb	r3, [r0, #10]
 801ef3e:	4313      	orrs	r3, r2
 801ef40:	1aff      	subs	r7, r7, r3
 801ef42:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801ef46:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801ef4a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801ef4e:	f7ff fe65 	bl	801ec1c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801ef52:	1b80      	subs	r0, r0, r6
 801ef54:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801ef58:	e735      	b.n	801edc6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ef5a:	2300      	movs	r3, #0
 801ef5c:	e7c1      	b.n	801eee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801ef5e:	bf00      	nop
 801ef60:	3fc00079 	.word	0x3fc00079

0801ef64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ef64:	3a01      	subs	r2, #1
 801ef66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef6a:	b292      	uxth	r2, r2
 801ef6c:	460c      	mov	r4, r1
 801ef6e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801ef72:	42b2      	cmp	r2, r6
 801ef74:	d018      	beq.n	801efa8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801ef76:	8b01      	ldrh	r1, [r0, #24]
 801ef78:	f834 5b02 	ldrh.w	r5, [r4], #2
 801ef7c:	4291      	cmp	r1, r2
 801ef7e:	d805      	bhi.n	801ef8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801ef80:	4b13      	ldr	r3, [pc, #76]	; (801efd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801ef82:	21d3      	movs	r1, #211	; 0xd3
 801ef84:	4a13      	ldr	r2, [pc, #76]	; (801efd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801ef86:	4814      	ldr	r0, [pc, #80]	; (801efd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801ef88:	f00a fd26 	bl	80299d8 <__assert_func>
 801ef8c:	8ac1      	ldrh	r1, [r0, #22]
 801ef8e:	4411      	add	r1, r2
 801ef90:	3a01      	subs	r2, #1
 801ef92:	f001 0101 	and.w	r1, r1, #1
 801ef96:	b292      	uxth	r2, r2
 801ef98:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ef9c:	8a49      	ldrh	r1, [r1, #18]
 801ef9e:	428d      	cmp	r5, r1
 801efa0:	d0e7      	beq.n	801ef72 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801efa2:	2000      	movs	r0, #0
 801efa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efa8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801efac:	2600      	movs	r6, #0
 801efae:	f100 051a 	add.w	r5, r0, #26
 801efb2:	441f      	add	r7, r3
 801efb4:	b2b1      	uxth	r1, r6
 801efb6:	42b9      	cmp	r1, r7
 801efb8:	da08      	bge.n	801efcc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801efba:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801efbe:	4628      	mov	r0, r5
 801efc0:	f7ff feda 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801efc4:	3601      	adds	r6, #1
 801efc6:	4540      	cmp	r0, r8
 801efc8:	d0f4      	beq.n	801efb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801efca:	e7ea      	b.n	801efa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801efcc:	2001      	movs	r0, #1
 801efce:	e7e9      	b.n	801efa4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801efd0:	0802e1fd 	.word	0x0802e1fd
 801efd4:	0802e78c 	.word	0x0802e78c
 801efd8:	0802e20b 	.word	0x0802e20b

0801efdc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801efdc:	b538      	push	{r3, r4, r5, lr}
 801efde:	8ac3      	ldrh	r3, [r0, #22]
 801efe0:	428b      	cmp	r3, r1
 801efe2:	d205      	bcs.n	801eff0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801efe4:	4b08      	ldr	r3, [pc, #32]	; (801f008 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801efe6:	21d8      	movs	r1, #216	; 0xd8
 801efe8:	4a08      	ldr	r2, [pc, #32]	; (801f00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801efea:	4809      	ldr	r0, [pc, #36]	; (801f010 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801efec:	f00a fcf4 	bl	80299d8 <__assert_func>
 801eff0:	8a82      	ldrh	r2, [r0, #20]
 801eff2:	250a      	movs	r5, #10
 801eff4:	1a5b      	subs	r3, r3, r1
 801eff6:	440a      	add	r2, r1
 801eff8:	82c3      	strh	r3, [r0, #22]
 801effa:	fbb2 f4f5 	udiv	r4, r2, r5
 801effe:	fb05 2214 	mls	r2, r5, r4, r2
 801f002:	8282      	strh	r2, [r0, #20]
 801f004:	bd38      	pop	{r3, r4, r5, pc}
 801f006:	bf00      	nop
 801f008:	0802e1f1 	.word	0x0802e1f1
 801f00c:	0802e5a8 	.word	0x0802e5a8
 801f010:	0802e20b 	.word	0x0802e20b

0801f014 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801f014:	b538      	push	{r3, r4, r5, lr}
 801f016:	8ac3      	ldrh	r3, [r0, #22]
 801f018:	2b09      	cmp	r3, #9
 801f01a:	d905      	bls.n	801f028 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801f01c:	4b08      	ldr	r3, [pc, #32]	; (801f040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801f01e:	21f7      	movs	r1, #247	; 0xf7
 801f020:	4a08      	ldr	r2, [pc, #32]	; (801f044 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801f022:	4809      	ldr	r0, [pc, #36]	; (801f048 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801f024:	f00a fcd8 	bl	80299d8 <__assert_func>
 801f028:	8a82      	ldrh	r2, [r0, #20]
 801f02a:	250a      	movs	r5, #10
 801f02c:	441a      	add	r2, r3
 801f02e:	3301      	adds	r3, #1
 801f030:	fbb2 f4f5 	udiv	r4, r2, r5
 801f034:	fb05 2214 	mls	r2, r5, r4, r2
 801f038:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801f03c:	82c3      	strh	r3, [r0, #22]
 801f03e:	bd38      	pop	{r3, r4, r5, pc}
 801f040:	0802e1e5 	.word	0x0802e1e5
 801f044:	0802e4f9 	.word	0x0802e4f9
 801f048:	0802e20b 	.word	0x0802e20b

0801f04c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801f04c:	b538      	push	{r3, r4, r5, lr}
 801f04e:	4604      	mov	r4, r0
 801f050:	f100 051a 	add.w	r5, r0, #26
 801f054:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801f056:	2b0a      	cmp	r3, #10
 801f058:	d01c      	beq.n	801f094 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801f05a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801f05c:	b962      	cbnz	r2, 801f078 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801f05e:	f104 051a 	add.w	r5, r4, #26
 801f062:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801f064:	2b0a      	cmp	r3, #10
 801f066:	d015      	beq.n	801f094 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801f068:	4620      	mov	r0, r4
 801f06a:	f7ff fdf6 	bl	801ec5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f06e:	4601      	mov	r1, r0
 801f070:	4628      	mov	r0, r5
 801f072:	f7ff ffcf 	bl	801f014 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801f076:	e7f4      	b.n	801f062 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801f078:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f07a:	3a01      	subs	r2, #1
 801f07c:	4628      	mov	r0, r5
 801f07e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801f082:	3301      	adds	r3, #1
 801f084:	f003 0301 	and.w	r3, r3, #1
 801f088:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801f08a:	8722      	strh	r2, [r4, #56]	; 0x38
 801f08c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801f08e:	f7ff ffc1 	bl	801f014 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801f092:	e7df      	b.n	801f054 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801f094:	bd38      	pop	{r3, r4, r5, pc}
	...

0801f098 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801f098:	2300      	movs	r3, #0
 801f09a:	b510      	push	{r4, lr}
 801f09c:	6043      	str	r3, [r0, #4]
 801f09e:	4604      	mov	r4, r0
 801f0a0:	60c3      	str	r3, [r0, #12]
 801f0a2:	7403      	strb	r3, [r0, #16]
 801f0a4:	8603      	strh	r3, [r0, #48]	; 0x30
 801f0a6:	8303      	strh	r3, [r0, #24]
 801f0a8:	8703      	strh	r3, [r0, #56]	; 0x38
 801f0aa:	f7ff ffcf 	bl	801f04c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801f0ae:	4a0a      	ldr	r2, [pc, #40]	; (801f0d8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801f0b0:	6813      	ldr	r3, [r2, #0]
 801f0b2:	4611      	mov	r1, r2
 801f0b4:	b913      	cbnz	r3, 801f0bc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801f0b6:	6852      	ldr	r2, [r2, #4]
 801f0b8:	07d0      	lsls	r0, r2, #31
 801f0ba:	d50b      	bpl.n	801f0d4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801f0bc:	6849      	ldr	r1, [r1, #4]
 801f0be:	104a      	asrs	r2, r1, #1
 801f0c0:	07c9      	lsls	r1, r1, #31
 801f0c2:	eb04 0002 	add.w	r0, r4, r2
 801f0c6:	bf48      	it	mi
 801f0c8:	58a2      	ldrmi	r2, [r4, r2]
 801f0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0ce:	bf48      	it	mi
 801f0d0:	58d3      	ldrmi	r3, [r2, r3]
 801f0d2:	4718      	bx	r3
 801f0d4:	bd10      	pop	{r4, pc}
 801f0d6:	bf00      	nop
 801f0d8:	200086ec 	.word	0x200086ec

0801f0dc <_ZN8touchgfx12TextProviderC1Ev>:
 801f0dc:	2300      	movs	r3, #0
 801f0de:	2201      	movs	r2, #1
 801f0e0:	b510      	push	{r4, lr}
 801f0e2:	4604      	mov	r4, r0
 801f0e4:	60c3      	str	r3, [r0, #12]
 801f0e6:	7403      	strb	r3, [r0, #16]
 801f0e8:	82c3      	strh	r3, [r0, #22]
 801f0ea:	8303      	strh	r3, [r0, #24]
 801f0ec:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801f0ee:	8603      	strh	r3, [r0, #48]	; 0x30
 801f0f0:	86c3      	strh	r3, [r0, #54]	; 0x36
 801f0f2:	8703      	strh	r3, [r0, #56]	; 0x38
 801f0f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f0f6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801f0fa:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801f0fe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801f102:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801f106:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801f10a:	e9c0 3300 	strd	r3, r3, [r0]
 801f10e:	f7ff ffc3 	bl	801f098 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801f112:	4620      	mov	r0, r4
 801f114:	bd10      	pop	{r4, pc}

0801f116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801f116:	b410      	push	{r4}
 801f118:	6082      	str	r2, [r0, #8]
 801f11a:	6001      	str	r1, [r0, #0]
 801f11c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f11e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f122:	f7ff bfb9 	b.w	801f098 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801f128 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801f128:	b508      	push	{r3, lr}
 801f12a:	88c2      	ldrh	r2, [r0, #6]
 801f12c:	440a      	add	r2, r1
 801f12e:	2a02      	cmp	r2, #2
 801f130:	dd05      	ble.n	801f13e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801f132:	4b06      	ldr	r3, [pc, #24]	; (801f14c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801f134:	21ec      	movs	r1, #236	; 0xec
 801f136:	4a06      	ldr	r2, [pc, #24]	; (801f150 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801f138:	4806      	ldr	r0, [pc, #24]	; (801f154 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801f13a:	f00a fc4d 	bl	80299d8 <__assert_func>
 801f13e:	8883      	ldrh	r3, [r0, #4]
 801f140:	80c2      	strh	r2, [r0, #6]
 801f142:	1a59      	subs	r1, r3, r1
 801f144:	f001 0101 	and.w	r1, r1, #1
 801f148:	8081      	strh	r1, [r0, #4]
 801f14a:	bd08      	pop	{r3, pc}
 801f14c:	0802e237 	.word	0x0802e237
 801f150:	0802e705 	.word	0x0802e705
 801f154:	0802e20b 	.word	0x0802e20b

0801f158 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801f158:	b508      	push	{r3, lr}
 801f15a:	88c3      	ldrh	r3, [r0, #6]
 801f15c:	428b      	cmp	r3, r1
 801f15e:	d805      	bhi.n	801f16c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801f160:	4b06      	ldr	r3, [pc, #24]	; (801f17c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801f162:	21fd      	movs	r1, #253	; 0xfd
 801f164:	4a06      	ldr	r2, [pc, #24]	; (801f180 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801f166:	4807      	ldr	r0, [pc, #28]	; (801f184 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801f168:	f00a fc36 	bl	80299d8 <__assert_func>
 801f16c:	8883      	ldrh	r3, [r0, #4]
 801f16e:	4419      	add	r1, r3
 801f170:	f001 0101 	and.w	r1, r1, #1
 801f174:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801f178:	bd08      	pop	{r3, pc}
 801f17a:	bf00      	nop
 801f17c:	0802e1fd 	.word	0x0802e1fd
 801f180:	0802e85d 	.word	0x0802e85d
 801f184:	0802e20b 	.word	0x0802e20b

0801f188 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801f188:	b570      	push	{r4, r5, r6, lr}
 801f18a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801f18c:	4604      	mov	r4, r0
 801f18e:	b92a      	cbnz	r2, 801f19c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801f190:	4b12      	ldr	r3, [pc, #72]	; (801f1dc <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801f192:	21de      	movs	r1, #222	; 0xde
 801f194:	4a12      	ldr	r2, [pc, #72]	; (801f1e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801f196:	4813      	ldr	r0, [pc, #76]	; (801f1e4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801f198:	f00a fc1e 	bl	80299d8 <__assert_func>
 801f19c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801f19e:	260a      	movs	r6, #10
 801f1a0:	3a01      	subs	r2, #1
 801f1a2:	3412      	adds	r4, #18
 801f1a4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801f1a8:	3301      	adds	r3, #1
 801f1aa:	8b4d      	ldrh	r5, [r1, #26]
 801f1ac:	8602      	strh	r2, [r0, #48]	; 0x30
 801f1ae:	fbb3 f1f6 	udiv	r1, r3, r6
 801f1b2:	fb06 3311 	mls	r3, r6, r1, r3
 801f1b6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801f1b8:	f7ff ff48 	bl	801f04c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801f1bc:	88e3      	ldrh	r3, [r4, #6]
 801f1be:	2101      	movs	r1, #1
 801f1c0:	2b02      	cmp	r3, #2
 801f1c2:	bf04      	itt	eq
 801f1c4:	2301      	moveq	r3, #1
 801f1c6:	80e3      	strheq	r3, [r4, #6]
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f7ff ffad 	bl	801f128 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801f1ce:	4620      	mov	r0, r4
 801f1d0:	462a      	mov	r2, r5
 801f1d2:	2100      	movs	r1, #0
 801f1d4:	f7ff ffc0 	bl	801f158 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801f1d8:	4628      	mov	r0, r5
 801f1da:	bd70      	pop	{r4, r5, r6, pc}
 801f1dc:	0802e1dc 	.word	0x0802e1dc
 801f1e0:	0802e44e 	.word	0x0802e44e
 801f1e4:	0802e20b 	.word	0x0802e20b

0801f1e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801f1e8:	428a      	cmp	r2, r1
 801f1ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1ee:	4604      	mov	r4, r0
 801f1f0:	460e      	mov	r6, r1
 801f1f2:	4615      	mov	r5, r2
 801f1f4:	469a      	mov	sl, r3
 801f1f6:	d92b      	bls.n	801f250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801f1f8:	1a57      	subs	r7, r2, r1
 801f1fa:	f04f 0800 	mov.w	r8, #0
 801f1fe:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801f202:	f04f 0b0a 	mov.w	fp, #10
 801f206:	b2bf      	uxth	r7, r7
 801f208:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801f20a:	b92b      	cbnz	r3, 801f218 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801f20c:	4b24      	ldr	r3, [pc, #144]	; (801f2a0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801f20e:	21e6      	movs	r1, #230	; 0xe6
 801f210:	4a24      	ldr	r2, [pc, #144]	; (801f2a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801f212:	4825      	ldr	r0, [pc, #148]	; (801f2a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801f214:	f00a fbe0 	bl	80299d8 <__assert_func>
 801f218:	3b01      	subs	r3, #1
 801f21a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801f21c:	2101      	movs	r1, #1
 801f21e:	4648      	mov	r0, r9
 801f220:	b29b      	uxth	r3, r3
 801f222:	f108 0801 	add.w	r8, r8, #1
 801f226:	441a      	add	r2, r3
 801f228:	8623      	strh	r3, [r4, #48]	; 0x30
 801f22a:	fbb2 f3fb 	udiv	r3, r2, fp
 801f22e:	fb0b 2313 	mls	r3, fp, r3, r2
 801f232:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f236:	8b5a      	ldrh	r2, [r3, #26]
 801f238:	9201      	str	r2, [sp, #4]
 801f23a:	f7ff ff75 	bl	801f128 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801f23e:	9a01      	ldr	r2, [sp, #4]
 801f240:	2100      	movs	r1, #0
 801f242:	4648      	mov	r0, r9
 801f244:	f7ff ff88 	bl	801f158 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801f248:	fa1f f388 	uxth.w	r3, r8
 801f24c:	429f      	cmp	r7, r3
 801f24e:	d8db      	bhi.n	801f208 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801f250:	f104 071a 	add.w	r7, r4, #26
 801f254:	4631      	mov	r1, r6
 801f256:	260a      	movs	r6, #10
 801f258:	4638      	mov	r0, r7
 801f25a:	f7ff febf 	bl	801efdc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801f25e:	b1c5      	cbz	r5, 801f292 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801f260:	3d01      	subs	r5, #1
 801f262:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801f264:	b2ad      	uxth	r5, r5
 801f266:	2b09      	cmp	r3, #9
 801f268:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801f26c:	d903      	bls.n	801f276 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801f26e:	4b0f      	ldr	r3, [pc, #60]	; (801f2ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801f270:	21ec      	movs	r1, #236	; 0xec
 801f272:	4a0f      	ldr	r2, [pc, #60]	; (801f2b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801f274:	e7cd      	b.n	801f212 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801f276:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801f278:	3301      	adds	r3, #1
 801f27a:	3109      	adds	r1, #9
 801f27c:	8623      	strh	r3, [r4, #48]	; 0x30
 801f27e:	fbb1 f0f6 	udiv	r0, r1, r6
 801f282:	fb06 1110 	mls	r1, r6, r0, r1
 801f286:	4638      	mov	r0, r7
 801f288:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801f28a:	2100      	movs	r1, #0
 801f28c:	f7ff fd5a 	bl	801ed44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801f290:	e7e5      	b.n	801f25e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801f292:	4620      	mov	r0, r4
 801f294:	b003      	add	sp, #12
 801f296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29a:	f7ff bed7 	b.w	801f04c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801f29e:	bf00      	nop
 801f2a0:	0802e1dc 	.word	0x0802e1dc
 801f2a4:	0802e2d2 	.word	0x0802e2d2
 801f2a8:	0802e20b 	.word	0x0802e20b
 801f2ac:	0802e237 	.word	0x0802e237
 801f2b0:	0802e24a 	.word	0x0802e24a

0801f2b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801f2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2b8:	4605      	mov	r5, r0
 801f2ba:	4616      	mov	r6, r2
 801f2bc:	1c8c      	adds	r4, r1, #2
 801f2be:	8809      	ldrh	r1, [r1, #0]
 801f2c0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801f2c4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801f2c8:	42b3      	cmp	r3, r6
 801f2ca:	d124      	bne.n	801f316 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801f2cc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801f2d0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801f2d4:	f001 070f 	and.w	r7, r1, #15
 801f2d8:	4652      	mov	r2, sl
 801f2da:	f8cd 8000 	str.w	r8, [sp]
 801f2de:	464b      	mov	r3, r9
 801f2e0:	4621      	mov	r1, r4
 801f2e2:	4628      	mov	r0, r5
 801f2e4:	f7ff fe3e 	bl	801ef64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801f2e8:	4683      	mov	fp, r0
 801f2ea:	b168      	cbz	r0, 801f308 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801f2ec:	eb0a 0109 	add.w	r1, sl, r9
 801f2f0:	463a      	mov	r2, r7
 801f2f2:	4628      	mov	r0, r5
 801f2f4:	4441      	add	r1, r8
 801f2f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801f2fa:	4649      	mov	r1, r9
 801f2fc:	f7ff ff74 	bl	801f1e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801f300:	4658      	mov	r0, fp
 801f302:	b003      	add	sp, #12
 801f304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f308:	eb07 010a 	add.w	r1, r7, sl
 801f30c:	4449      	add	r1, r9
 801f30e:	4441      	add	r1, r8
 801f310:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801f314:	e7d2      	b.n	801f2bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801f316:	f04f 0b00 	mov.w	fp, #0
 801f31a:	e7f1      	b.n	801f300 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801f31c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801f31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f320:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801f322:	4604      	mov	r4, r0
 801f324:	260b      	movs	r6, #11
 801f326:	f100 091a 	add.w	r9, r0, #26
 801f32a:	886f      	ldrh	r7, [r5, #2]
 801f32c:	087f      	lsrs	r7, r7, #1
 801f32e:	3e01      	subs	r6, #1
 801f330:	d013      	beq.n	801f35a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801f332:	2100      	movs	r1, #0
 801f334:	4648      	mov	r0, r9
 801f336:	f7ff fd1f 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801f33a:	462a      	mov	r2, r5
 801f33c:	4680      	mov	r8, r0
 801f33e:	4603      	mov	r3, r0
 801f340:	4639      	mov	r1, r7
 801f342:	4620      	mov	r0, r4
 801f344:	f7ff fce0 	bl	801ed08 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f348:	b138      	cbz	r0, 801f35a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801f34a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f34e:	4642      	mov	r2, r8
 801f350:	4620      	mov	r0, r4
 801f352:	f7ff ffaf 	bl	801f2b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f356:	2800      	cmp	r0, #0
 801f358:	d1e9      	bne.n	801f32e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801f35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801f360:	4b1e      	ldr	r3, [pc, #120]	; (801f3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801f362:	b570      	push	{r4, r5, r6, lr}
 801f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f368:	4604      	mov	r4, r0
 801f36a:	f003 0501 	and.w	r5, r3, #1
 801f36e:	b902      	cbnz	r2, 801f372 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801f370:	b165      	cbz	r5, 801f38c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801f372:	105b      	asrs	r3, r3, #1
 801f374:	f104 061a 	add.w	r6, r4, #26
 801f378:	18e0      	adds	r0, r4, r3
 801f37a:	b10d      	cbz	r5, 801f380 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801f37c:	58e3      	ldr	r3, [r4, r3]
 801f37e:	589a      	ldr	r2, [r3, r2]
 801f380:	4790      	blx	r2
 801f382:	2100      	movs	r1, #0
 801f384:	4602      	mov	r2, r0
 801f386:	4630      	mov	r0, r6
 801f388:	f7ff fcdc 	bl	801ed44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801f38c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f38e:	b303      	cbz	r3, 801f3d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801f390:	f104 051a 	add.w	r5, r4, #26
 801f394:	2100      	movs	r1, #0
 801f396:	4628      	mov	r0, r5
 801f398:	f7ff fcee 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801f39c:	b1c8      	cbz	r0, 801f3d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801f39e:	4620      	mov	r0, r4
 801f3a0:	f7ff ffbc 	bl	801f31c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801f3a4:	2101      	movs	r1, #1
 801f3a6:	4628      	mov	r0, r5
 801f3a8:	f7ff fce6 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801f3ac:	f640 133f 	movw	r3, #2367	; 0x93f
 801f3b0:	4606      	mov	r6, r0
 801f3b2:	4298      	cmp	r0, r3
 801f3b4:	d10d      	bne.n	801f3d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801f3b6:	2100      	movs	r1, #0
 801f3b8:	4628      	mov	r0, r5
 801f3ba:	f7ff fcdd 	bl	801ed78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801f3be:	2101      	movs	r1, #1
 801f3c0:	4602      	mov	r2, r0
 801f3c2:	4628      	mov	r0, r5
 801f3c4:	f7ff fcbe 	bl	801ed44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801f3c8:	4632      	mov	r2, r6
 801f3ca:	2100      	movs	r1, #0
 801f3cc:	4628      	mov	r0, r5
 801f3ce:	f7ff fcb9 	bl	801ed44 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801f3d2:	4620      	mov	r0, r4
 801f3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f3d8:	f7ff bed6 	b.w	801f188 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f3dc:	200086f4 	.word	0x200086f4

0801f3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801f3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3e2:	4617      	mov	r7, r2
 801f3e4:	461e      	mov	r6, r3
 801f3e6:	4605      	mov	r5, r0
 801f3e8:	f7ff ffba 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f3ec:	683b      	ldr	r3, [r7, #0]
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	4601      	mov	r1, r0
 801f3f2:	4638      	mov	r0, r7
 801f3f4:	68db      	ldr	r3, [r3, #12]
 801f3f6:	4798      	blx	r3
 801f3f8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801f3fc:	4602      	mov	r2, r0
 801f3fe:	6030      	str	r0, [r6, #0]
 801f400:	b29b      	uxth	r3, r3
 801f402:	2b7f      	cmp	r3, #127	; 0x7f
 801f404:	d813      	bhi.n	801f42e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801f406:	4639      	mov	r1, r7
 801f408:	4628      	mov	r0, r5
 801f40a:	f7ff fccf 	bl	801edac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f40e:	6030      	str	r0, [r6, #0]
 801f410:	6833      	ldr	r3, [r6, #0]
 801f412:	b143      	cbz	r3, 801f426 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801f414:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801f418:	7a9b      	ldrb	r3, [r3, #10]
 801f41a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f41e:	4313      	orrs	r3, r2
 801f420:	bf0c      	ite	eq
 801f422:	2301      	moveq	r3, #1
 801f424:	2300      	movne	r3, #0
 801f426:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801f42a:	4620      	mov	r0, r4
 801f42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f42e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801f432:	2b00      	cmp	r3, #0
 801f434:	d0ec      	beq.n	801f410 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801f436:	f640 1302 	movw	r3, #2306	; 0x902
 801f43a:	429c      	cmp	r4, r3
 801f43c:	d1e8      	bne.n	801f410 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801f43e:	4601      	mov	r1, r0
 801f440:	4628      	mov	r0, r5
 801f442:	f7ff fc32 	bl	801ecaa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f446:	e7e2      	b.n	801f40e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801f448 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801f448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f44c:	4617      	mov	r7, r2
 801f44e:	461e      	mov	r6, r3
 801f450:	4605      	mov	r5, r0
 801f452:	f7ff ff85 	bl	801f360 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	4604      	mov	r4, r0
 801f45a:	4601      	mov	r1, r0
 801f45c:	4638      	mov	r0, r7
 801f45e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801f462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f466:	47c0      	blx	r8
 801f468:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801f46c:	4602      	mov	r2, r0
 801f46e:	6030      	str	r0, [r6, #0]
 801f470:	b29b      	uxth	r3, r3
 801f472:	2b7f      	cmp	r3, #127	; 0x7f
 801f474:	d814      	bhi.n	801f4a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801f476:	4639      	mov	r1, r7
 801f478:	4628      	mov	r0, r5
 801f47a:	f7ff fc97 	bl	801edac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f47e:	6030      	str	r0, [r6, #0]
 801f480:	6833      	ldr	r3, [r6, #0]
 801f482:	b143      	cbz	r3, 801f496 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801f484:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801f488:	7a9b      	ldrb	r3, [r3, #10]
 801f48a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f48e:	4313      	orrs	r3, r2
 801f490:	bf0c      	ite	eq
 801f492:	2301      	moveq	r3, #1
 801f494:	2300      	movne	r3, #0
 801f496:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801f49a:	4620      	mov	r0, r4
 801f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4a0:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d0eb      	beq.n	801f480 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801f4a8:	f640 1302 	movw	r3, #2306	; 0x902
 801f4ac:	429c      	cmp	r4, r3
 801f4ae:	d1e7      	bne.n	801f480 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801f4b0:	4601      	mov	r1, r0
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	f7ff fbf9 	bl	801ecaa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f4b8:	e7e1      	b.n	801f47e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801f4ba <_ZN8touchgfx7Unicode6strlenEPKt>:
 801f4ba:	4602      	mov	r2, r0
 801f4bc:	b148      	cbz	r0, 801f4d2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801f4be:	2300      	movs	r3, #0
 801f4c0:	b298      	uxth	r0, r3
 801f4c2:	3301      	adds	r3, #1
 801f4c4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801f4c8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801f4cc:	2900      	cmp	r1, #0
 801f4ce:	d1f7      	bne.n	801f4c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801f4d0:	4770      	bx	lr
 801f4d2:	4770      	bx	lr

0801f4d4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801f4d4:	b140      	cbz	r0, 801f4e8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	1a13      	subs	r3, r2, r0
 801f4da:	f812 1b01 	ldrb.w	r1, [r2], #1
 801f4de:	b29b      	uxth	r3, r3
 801f4e0:	2900      	cmp	r1, #0
 801f4e2:	d1f9      	bne.n	801f4d8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801f4e4:	4618      	mov	r0, r3
 801f4e6:	4770      	bx	lr
 801f4e8:	4603      	mov	r3, r0
 801f4ea:	e7fb      	b.n	801f4e4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801f4ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801f4ec:	b530      	push	{r4, r5, lr}
 801f4ee:	4604      	mov	r4, r0
 801f4f0:	b159      	cbz	r1, 801f50a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801f4f2:	b148      	cbz	r0, 801f508 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801f4f4:	2300      	movs	r3, #0
 801f4f6:	b298      	uxth	r0, r3
 801f4f8:	4282      	cmp	r2, r0
 801f4fa:	d905      	bls.n	801f508 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801f4fc:	5ccd      	ldrb	r5, [r1, r3]
 801f4fe:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801f502:	3301      	adds	r3, #1
 801f504:	2d00      	cmp	r5, #0
 801f506:	d1f6      	bne.n	801f4f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801f508:	bd30      	pop	{r4, r5, pc}
 801f50a:	4608      	mov	r0, r1
 801f50c:	e7fc      	b.n	801f508 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801f50e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801f50e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f510:	468c      	mov	ip, r1
 801f512:	b08b      	sub	sp, #44	; 0x2c
 801f514:	2100      	movs	r1, #0
 801f516:	ae01      	add	r6, sp, #4
 801f518:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f51c:	211f      	movs	r1, #31
 801f51e:	fbb0 f7f3 	udiv	r7, r0, r3
 801f522:	fb03 0517 	mls	r5, r3, r7, r0
 801f526:	4638      	mov	r0, r7
 801f528:	b2ec      	uxtb	r4, r5
 801f52a:	2d09      	cmp	r5, #9
 801f52c:	bfd4      	ite	le
 801f52e:	3430      	addle	r4, #48	; 0x30
 801f530:	3457      	addgt	r4, #87	; 0x57
 801f532:	b2e4      	uxtb	r4, r4
 801f534:	558c      	strb	r4, [r1, r6]
 801f536:	1e4c      	subs	r4, r1, #1
 801f538:	b92f      	cbnz	r7, 801f546 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801f53a:	4431      	add	r1, r6
 801f53c:	4660      	mov	r0, ip
 801f53e:	f7ff ffd5 	bl	801f4ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f542:	b00b      	add	sp, #44	; 0x2c
 801f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f546:	4621      	mov	r1, r4
 801f548:	e7e9      	b.n	801f51e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801f54a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801f54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f54c:	4607      	mov	r7, r0
 801f54e:	b08b      	sub	sp, #44	; 0x2c
 801f550:	4608      	mov	r0, r1
 801f552:	b341      	cbz	r1, 801f5a6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f554:	1e99      	subs	r1, r3, #2
 801f556:	290e      	cmp	r1, #14
 801f558:	d825      	bhi.n	801f5a6 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f55a:	2100      	movs	r1, #0
 801f55c:	463c      	mov	r4, r7
 801f55e:	261f      	movs	r6, #31
 801f560:	f10d 0c04 	add.w	ip, sp, #4
 801f564:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f568:	1e71      	subs	r1, r6, #1
 801f56a:	fb94 fef3 	sdiv	lr, r4, r3
 801f56e:	fb03 441e 	mls	r4, r3, lr, r4
 801f572:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801f576:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801f57a:	b2ec      	uxtb	r4, r5
 801f57c:	2d09      	cmp	r5, #9
 801f57e:	bfd4      	ite	le
 801f580:	3430      	addle	r4, #48	; 0x30
 801f582:	3457      	addgt	r4, #87	; 0x57
 801f584:	b2e4      	uxtb	r4, r4
 801f586:	f80c 4006 	strb.w	r4, [ip, r6]
 801f58a:	4674      	mov	r4, lr
 801f58c:	b96c      	cbnz	r4, 801f5aa <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801f58e:	2f00      	cmp	r7, #0
 801f590:	da05      	bge.n	801f59e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801f592:	ab0a      	add	r3, sp, #40	; 0x28
 801f594:	4419      	add	r1, r3
 801f596:	232d      	movs	r3, #45	; 0x2d
 801f598:	f801 3c24 	strb.w	r3, [r1, #-36]
 801f59c:	1eb1      	subs	r1, r6, #2
 801f59e:	3101      	adds	r1, #1
 801f5a0:	4461      	add	r1, ip
 801f5a2:	f7ff ffa3 	bl	801f4ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f5a6:	b00b      	add	sp, #44	; 0x2c
 801f5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5aa:	460e      	mov	r6, r1
 801f5ac:	e7dc      	b.n	801f568 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801f5ae <_ZN8touchgfx7Unicode4atoiEPKt>:
 801f5ae:	b510      	push	{r4, lr}
 801f5b0:	b158      	cbz	r0, 801f5ca <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801f5b2:	1e82      	subs	r2, r0, #2
 801f5b4:	210a      	movs	r1, #10
 801f5b6:	2000      	movs	r0, #0
 801f5b8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f5bc:	3b30      	subs	r3, #48	; 0x30
 801f5be:	b29c      	uxth	r4, r3
 801f5c0:	2c09      	cmp	r4, #9
 801f5c2:	d802      	bhi.n	801f5ca <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801f5c4:	fb01 3000 	mla	r0, r1, r0, r3
 801f5c8:	e7f6      	b.n	801f5b8 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801f5ca:	bd10      	pop	{r4, pc}

0801f5cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5d0:	b085      	sub	sp, #20
 801f5d2:	f8d0 8000 	ldr.w	r8, [r0]
 801f5d6:	468a      	mov	sl, r1
 801f5d8:	461c      	mov	r4, r3
 801f5da:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801f5de:	4681      	mov	r9, r0
 801f5e0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f5e4:	4640      	mov	r0, r8
 801f5e6:	9203      	str	r2, [sp, #12]
 801f5e8:	9102      	str	r1, [sp, #8]
 801f5ea:	9301      	str	r3, [sp, #4]
 801f5ec:	f7ff ff65 	bl	801f4ba <_ZN8touchgfx7Unicode6strlenEPKt>
 801f5f0:	9a03      	ldr	r2, [sp, #12]
 801f5f2:	f1ba 0f00 	cmp.w	sl, #0
 801f5f6:	bf0c      	ite	eq
 801f5f8:	4684      	moveq	ip, r0
 801f5fa:	f100 0c01 	addne.w	ip, r0, #1
 801f5fe:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801f602:	8812      	ldrh	r2, [r2, #0]
 801f604:	fa1f fc8c 	uxth.w	ip, ip
 801f608:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801f60a:	2a69      	cmp	r2, #105	; 0x69
 801f60c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f60e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f610:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801f614:	d004      	beq.n	801f620 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801f616:	d844      	bhi.n	801f6a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801f618:	2a58      	cmp	r2, #88	; 0x58
 801f61a:	d001      	beq.n	801f620 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801f61c:	2a64      	cmp	r2, #100	; 0x64
 801f61e:	d14b      	bne.n	801f6b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801f620:	b1a4      	cbz	r4, 801f64c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801f622:	b956      	cbnz	r6, 801f63a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801f624:	2801      	cmp	r0, #1
 801f626:	d108      	bne.n	801f63a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801f628:	f8b8 2000 	ldrh.w	r2, [r8]
 801f62c:	2a30      	cmp	r2, #48	; 0x30
 801f62e:	bf02      	ittt	eq
 801f630:	f108 0202 	addeq.w	r2, r8, #2
 801f634:	4630      	moveq	r0, r6
 801f636:	f8c9 2000 	streq.w	r2, [r9]
 801f63a:	45b4      	cmp	ip, r6
 801f63c:	da3e      	bge.n	801f6bc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801f63e:	b2b6      	uxth	r6, r6
 801f640:	eba6 040c 	sub.w	r4, r6, ip
 801f644:	46b4      	mov	ip, r6
 801f646:	b2a4      	uxth	r4, r4
 801f648:	f04f 0b00 	mov.w	fp, #0
 801f64c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f650:	3a01      	subs	r2, #1
 801f652:	b169      	cbz	r1, 801f670 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801f654:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f656:	458c      	cmp	ip, r1
 801f658:	da09      	bge.n	801f66e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801f65a:	eba1 010c 	sub.w	r1, r1, ip
 801f65e:	b289      	uxth	r1, r1
 801f660:	b933      	cbnz	r3, 801f670 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801f662:	f1bb 0f00 	cmp.w	fp, #0
 801f666:	d02b      	beq.n	801f6c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801f668:	b350      	cbz	r0, 801f6c0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801f66a:	440c      	add	r4, r1
 801f66c:	b2a4      	uxth	r4, r4
 801f66e:	2100      	movs	r1, #0
 801f670:	682b      	ldr	r3, [r5, #0]
 801f672:	4293      	cmp	r3, r2
 801f674:	da07      	bge.n	801f686 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801f676:	f1ba 0f00 	cmp.w	sl, #0
 801f67a:	d004      	beq.n	801f686 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801f67c:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801f680:	682b      	ldr	r3, [r5, #0]
 801f682:	3301      	adds	r3, #1
 801f684:	602b      	str	r3, [r5, #0]
 801f686:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801f68a:	b354      	cbz	r4, 801f6e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801f68c:	682e      	ldr	r6, [r5, #0]
 801f68e:	3c01      	subs	r4, #1
 801f690:	42b2      	cmp	r2, r6
 801f692:	b2a4      	uxth	r4, r4
 801f694:	dd25      	ble.n	801f6e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801f696:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801f69a:	682b      	ldr	r3, [r5, #0]
 801f69c:	3301      	adds	r3, #1
 801f69e:	602b      	str	r3, [r5, #0]
 801f6a0:	e7f3      	b.n	801f68a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801f6a2:	2a73      	cmp	r2, #115	; 0x73
 801f6a4:	d003      	beq.n	801f6ae <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801f6a6:	2a78      	cmp	r2, #120	; 0x78
 801f6a8:	d0ba      	beq.n	801f620 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801f6aa:	2a6f      	cmp	r2, #111	; 0x6f
 801f6ac:	e7b7      	b.n	801f61e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801f6ae:	2c00      	cmp	r4, #0
 801f6b0:	d0cc      	beq.n	801f64c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801f6b2:	42b0      	cmp	r0, r6
 801f6b4:	dd00      	ble.n	801f6b8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801f6b6:	b2b0      	uxth	r0, r6
 801f6b8:	2400      	movs	r4, #0
 801f6ba:	e7c7      	b.n	801f64c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801f6bc:	2400      	movs	r4, #0
 801f6be:	e7c3      	b.n	801f648 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801f6c0:	2900      	cmp	r1, #0
 801f6c2:	d0d5      	beq.n	801f670 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801f6c4:	f04f 0c20 	mov.w	ip, #32
 801f6c8:	682e      	ldr	r6, [r5, #0]
 801f6ca:	2900      	cmp	r1, #0
 801f6cc:	d0d0      	beq.n	801f670 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801f6ce:	3901      	subs	r1, #1
 801f6d0:	4296      	cmp	r6, r2
 801f6d2:	b289      	uxth	r1, r1
 801f6d4:	dacb      	bge.n	801f66e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801f6d6:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801f6da:	682b      	ldr	r3, [r5, #0]
 801f6dc:	3301      	adds	r3, #1
 801f6de:	602b      	str	r3, [r5, #0]
 801f6e0:	e7f2      	b.n	801f6c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801f6e2:	b198      	cbz	r0, 801f70c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801f6e4:	f8d9 3000 	ldr.w	r3, [r9]
 801f6e8:	881c      	ldrh	r4, [r3, #0]
 801f6ea:	b17c      	cbz	r4, 801f70c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801f6ec:	682c      	ldr	r4, [r5, #0]
 801f6ee:	3801      	subs	r0, #1
 801f6f0:	42a2      	cmp	r2, r4
 801f6f2:	b280      	uxth	r0, r0
 801f6f4:	dd0a      	ble.n	801f70c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801f6f6:	1c9c      	adds	r4, r3, #2
 801f6f8:	f8c9 4000 	str.w	r4, [r9]
 801f6fc:	881c      	ldrh	r4, [r3, #0]
 801f6fe:	682b      	ldr	r3, [r5, #0]
 801f700:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801f704:	682b      	ldr	r3, [r5, #0]
 801f706:	3301      	adds	r3, #1
 801f708:	602b      	str	r3, [r5, #0]
 801f70a:	e7ea      	b.n	801f6e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801f70c:	2620      	movs	r6, #32
 801f70e:	b151      	cbz	r1, 801f726 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801f710:	6828      	ldr	r0, [r5, #0]
 801f712:	3901      	subs	r1, #1
 801f714:	4282      	cmp	r2, r0
 801f716:	b289      	uxth	r1, r1
 801f718:	dd05      	ble.n	801f726 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801f71a:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801f71e:	682b      	ldr	r3, [r5, #0]
 801f720:	3301      	adds	r3, #1
 801f722:	602b      	str	r3, [r5, #0]
 801f724:	e7f3      	b.n	801f70e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801f726:	b005      	add	sp, #20
 801f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f72c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801f72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f730:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f732:	4604      	mov	r4, r0
 801f734:	f04f 0801 	mov.w	r8, #1
 801f738:	2000      	movs	r0, #0
 801f73a:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801f73e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801f742:	8008      	strh	r0, [r1, #0]
 801f744:	7010      	strb	r0, [r2, #0]
 801f746:	7018      	strb	r0, [r3, #0]
 801f748:	f88c 0000 	strb.w	r0, [ip]
 801f74c:	f88e 0000 	strb.w	r0, [lr]
 801f750:	7030      	strb	r0, [r6, #0]
 801f752:	6820      	ldr	r0, [r4, #0]
 801f754:	8800      	ldrh	r0, [r0, #0]
 801f756:	b190      	cbz	r0, 801f77e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801f758:	282b      	cmp	r0, #43	; 0x2b
 801f75a:	d001      	beq.n	801f760 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801f75c:	2820      	cmp	r0, #32
 801f75e:	d104      	bne.n	801f76a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801f760:	8008      	strh	r0, [r1, #0]
 801f762:	6820      	ldr	r0, [r4, #0]
 801f764:	3002      	adds	r0, #2
 801f766:	6020      	str	r0, [r4, #0]
 801f768:	e7f3      	b.n	801f752 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801f76a:	282d      	cmp	r0, #45	; 0x2d
 801f76c:	d102      	bne.n	801f774 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801f76e:	f882 8000 	strb.w	r8, [r2]
 801f772:	e7f6      	b.n	801f762 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801f774:	2823      	cmp	r0, #35	; 0x23
 801f776:	d102      	bne.n	801f77e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801f778:	f883 8000 	strb.w	r8, [r3]
 801f77c:	e7f1      	b.n	801f762 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801f77e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f782:	2b09      	cmp	r3, #9
 801f784:	d901      	bls.n	801f78a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801f786:	282a      	cmp	r0, #42	; 0x2a
 801f788:	d114      	bne.n	801f7b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801f78a:	2201      	movs	r2, #1
 801f78c:	f88e 2000 	strb.w	r2, [lr]
 801f790:	6823      	ldr	r3, [r4, #0]
 801f792:	8819      	ldrh	r1, [r3, #0]
 801f794:	2930      	cmp	r1, #48	; 0x30
 801f796:	bf02      	ittt	eq
 801f798:	3302      	addeq	r3, #2
 801f79a:	6023      	streq	r3, [r4, #0]
 801f79c:	f88c 2000 	strbeq.w	r2, [ip]
 801f7a0:	6820      	ldr	r0, [r4, #0]
 801f7a2:	8803      	ldrh	r3, [r0, #0]
 801f7a4:	2b2a      	cmp	r3, #42	; 0x2a
 801f7a6:	d11e      	bne.n	801f7e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801f7a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f7ac:	603b      	str	r3, [r7, #0]
 801f7ae:	6823      	ldr	r3, [r4, #0]
 801f7b0:	3302      	adds	r3, #2
 801f7b2:	6023      	str	r3, [r4, #0]
 801f7b4:	6823      	ldr	r3, [r4, #0]
 801f7b6:	881b      	ldrh	r3, [r3, #0]
 801f7b8:	2b2e      	cmp	r3, #46	; 0x2e
 801f7ba:	d112      	bne.n	801f7e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801f7bc:	2301      	movs	r3, #1
 801f7be:	7033      	strb	r3, [r6, #0]
 801f7c0:	6823      	ldr	r3, [r4, #0]
 801f7c2:	1c98      	adds	r0, r3, #2
 801f7c4:	6020      	str	r0, [r4, #0]
 801f7c6:	885b      	ldrh	r3, [r3, #2]
 801f7c8:	2b2a      	cmp	r3, #42	; 0x2a
 801f7ca:	d117      	bne.n	801f7fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801f7cc:	f04f 33ff 	mov.w	r3, #4294967295
 801f7d0:	602b      	str	r3, [r5, #0]
 801f7d2:	6823      	ldr	r3, [r4, #0]
 801f7d4:	3302      	adds	r3, #2
 801f7d6:	6023      	str	r3, [r4, #0]
 801f7d8:	682b      	ldr	r3, [r5, #0]
 801f7da:	2b06      	cmp	r3, #6
 801f7dc:	bfa8      	it	ge
 801f7de:	2306      	movge	r3, #6
 801f7e0:	602b      	str	r3, [r5, #0]
 801f7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f7e6:	f7ff fee2 	bl	801f5ae <_ZN8touchgfx7Unicode4atoiEPKt>
 801f7ea:	6038      	str	r0, [r7, #0]
 801f7ec:	6823      	ldr	r3, [r4, #0]
 801f7ee:	881a      	ldrh	r2, [r3, #0]
 801f7f0:	3a30      	subs	r2, #48	; 0x30
 801f7f2:	2a09      	cmp	r2, #9
 801f7f4:	d8de      	bhi.n	801f7b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801f7f6:	3302      	adds	r3, #2
 801f7f8:	6023      	str	r3, [r4, #0]
 801f7fa:	e7f7      	b.n	801f7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801f7fc:	f7ff fed7 	bl	801f5ae <_ZN8touchgfx7Unicode4atoiEPKt>
 801f800:	6028      	str	r0, [r5, #0]
 801f802:	6823      	ldr	r3, [r4, #0]
 801f804:	881a      	ldrh	r2, [r3, #0]
 801f806:	3a30      	subs	r2, #48	; 0x30
 801f808:	2a09      	cmp	r2, #9
 801f80a:	d8e5      	bhi.n	801f7d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801f80c:	3302      	adds	r3, #2
 801f80e:	6023      	str	r3, [r4, #0]
 801f810:	e7f7      	b.n	801f802 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801f812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801f812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f816:	b0a2      	sub	sp, #136	; 0x88
 801f818:	2500      	movs	r5, #0
 801f81a:	4606      	mov	r6, r0
 801f81c:	460f      	mov	r7, r1
 801f81e:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801f822:	9209      	str	r2, [sp, #36]	; 0x24
 801f824:	4629      	mov	r1, r5
 801f826:	2242      	movs	r2, #66	; 0x42
 801f828:	4640      	mov	r0, r8
 801f82a:	461c      	mov	r4, r3
 801f82c:	950d      	str	r5, [sp, #52]	; 0x34
 801f82e:	f7fe fdec 	bl	801e40a <_ZN8touchgfx6memsetEPvhm>
 801f832:	b30e      	cbz	r6, 801f878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801f834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f836:	b1f3      	cbz	r3, 801f876 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801f838:	f107 3aff 	add.w	sl, r7, #4294967295
 801f83c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f840:	8812      	ldrh	r2, [r2, #0]
 801f842:	2a00      	cmp	r2, #0
 801f844:	f000 80b3 	beq.w	801f9ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801f848:	459a      	cmp	sl, r3
 801f84a:	f340 80b0 	ble.w	801f9ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801f84e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f854:	f8b9 2000 	ldrh.w	r2, [r9]
 801f858:	2a00      	cmp	r2, #0
 801f85a:	d0ef      	beq.n	801f83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801f85c:	2a25      	cmp	r2, #37	; 0x25
 801f85e:	f000 80aa 	beq.w	801f9b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801f862:	459a      	cmp	sl, r3
 801f864:	ddea      	ble.n	801f83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801f866:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801f86a:	f109 0202 	add.w	r2, r9, #2
 801f86e:	3301      	adds	r3, #1
 801f870:	9209      	str	r2, [sp, #36]	; 0x24
 801f872:	930d      	str	r3, [sp, #52]	; 0x34
 801f874:	e7eb      	b.n	801f84e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801f876:	8033      	strh	r3, [r6, #0]
 801f878:	4630      	mov	r0, r6
 801f87a:	b022      	add	sp, #136	; 0x88
 801f87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f880:	3b63      	subs	r3, #99	; 0x63
 801f882:	2b01      	cmp	r3, #1
 801f884:	f200 80df 	bhi.w	801fa46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801f888:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801f88c:	8813      	ldrh	r3, [r2, #0]
 801f88e:	2b69      	cmp	r3, #105	; 0x69
 801f890:	d058      	beq.n	801f944 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801f892:	d81b      	bhi.n	801f8cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801f894:	2b63      	cmp	r3, #99	; 0x63
 801f896:	d02e      	beq.n	801f8f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801f898:	2b64      	cmp	r3, #100	; 0x64
 801f89a:	d053      	beq.n	801f944 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801f89c:	2b58      	cmp	r3, #88	; 0x58
 801f89e:	d06f      	beq.n	801f980 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801f8a0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801f8a4:	46a1      	mov	r9, r4
 801f8a6:	e02d      	b.n	801f904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801f8a8:	2b73      	cmp	r3, #115	; 0x73
 801f8aa:	d0ed      	beq.n	801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801f8ac:	d803      	bhi.n	801f8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801f8ae:	2b6f      	cmp	r3, #111	; 0x6f
 801f8b0:	f040 80c9 	bne.w	801fa46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801f8b4:	e7e8      	b.n	801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801f8b6:	2b75      	cmp	r3, #117	; 0x75
 801f8b8:	d0e6      	beq.n	801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801f8ba:	2b78      	cmp	r3, #120	; 0x78
 801f8bc:	e7f8      	b.n	801f8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801f8be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8c0:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801f8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8c6:	3302      	adds	r3, #2
 801f8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8ca:	e7b7      	b.n	801f83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801f8cc:	2b73      	cmp	r3, #115	; 0x73
 801f8ce:	d034      	beq.n	801f93a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801f8d0:	d807      	bhi.n	801f8e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801f8d2:	2b6f      	cmp	r3, #111	; 0x6f
 801f8d4:	d1e4      	bne.n	801f8a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801f8d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8d8:	f104 0904 	add.w	r9, r4, #4
 801f8dc:	2308      	movs	r3, #8
 801f8de:	1aba      	subs	r2, r7, r2
 801f8e0:	e048      	b.n	801f974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801f8e2:	2b75      	cmp	r3, #117	; 0x75
 801f8e4:	d041      	beq.n	801f96a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801f8e6:	2b78      	cmp	r3, #120	; 0x78
 801f8e8:	d1da      	bne.n	801f8a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801f8ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8ec:	f104 0904 	add.w	r9, r4, #4
 801f8f0:	2310      	movs	r3, #16
 801f8f2:	1aba      	subs	r2, r7, r2
 801f8f4:	e03e      	b.n	801f974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801f8f6:	7823      	ldrb	r3, [r4, #0]
 801f8f8:	f104 0904 	add.w	r9, r4, #4
 801f8fc:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801f900:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f904:	aa0d      	add	r2, sp, #52	; 0x34
 801f906:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f90a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f90e:	a810      	add	r0, sp, #64	; 0x40
 801f910:	9205      	str	r2, [sp, #20]
 801f912:	464c      	mov	r4, r9
 801f914:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801f918:	9204      	str	r2, [sp, #16]
 801f91a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f91c:	9203      	str	r2, [sp, #12]
 801f91e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801f922:	9202      	str	r2, [sp, #8]
 801f924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f926:	9201      	str	r2, [sp, #4]
 801f928:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801f92c:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801f930:	9200      	str	r2, [sp, #0]
 801f932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f934:	f7ff fe4a 	bl	801f5cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801f938:	e7c4      	b.n	801f8c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801f93a:	f104 0904 	add.w	r9, r4, #4
 801f93e:	6823      	ldr	r3, [r4, #0]
 801f940:	9310      	str	r3, [sp, #64]	; 0x40
 801f942:	e7df      	b.n	801f904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801f944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f946:	230a      	movs	r3, #10
 801f948:	4641      	mov	r1, r8
 801f94a:	6820      	ldr	r0, [r4, #0]
 801f94c:	1aba      	subs	r2, r7, r2
 801f94e:	f104 0904 	add.w	r9, r4, #4
 801f952:	b292      	uxth	r2, r2
 801f954:	f7ff fdf9 	bl	801f54a <_ZN8touchgfx7Unicode4itoaElPtti>
 801f958:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f95c:	2b2d      	cmp	r3, #45	; 0x2d
 801f95e:	d1d1      	bne.n	801f904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801f960:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f966:	3302      	adds	r3, #2
 801f968:	e7ea      	b.n	801f940 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801f96a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f96c:	f104 0904 	add.w	r9, r4, #4
 801f970:	230a      	movs	r3, #10
 801f972:	1aba      	subs	r2, r7, r2
 801f974:	b292      	uxth	r2, r2
 801f976:	4641      	mov	r1, r8
 801f978:	6820      	ldr	r0, [r4, #0]
 801f97a:	f7ff fdc8 	bl	801f50e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801f97e:	e7c1      	b.n	801f904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801f980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f982:	2310      	movs	r3, #16
 801f984:	4641      	mov	r1, r8
 801f986:	6820      	ldr	r0, [r4, #0]
 801f988:	1aba      	subs	r2, r7, r2
 801f98a:	f104 0904 	add.w	r9, r4, #4
 801f98e:	b292      	uxth	r2, r2
 801f990:	f7ff fdbd 	bl	801f50e <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801f994:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801f998:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d0b1      	beq.n	801f904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801f9a0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f9a4:	2919      	cmp	r1, #25
 801f9a6:	d8f7      	bhi.n	801f998 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801f9a8:	3b20      	subs	r3, #32
 801f9aa:	8013      	strh	r3, [r2, #0]
 801f9ac:	e7f4      	b.n	801f998 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801f9ae:	2200      	movs	r2, #0
 801f9b0:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801f9b4:	e760      	b.n	801f878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801f9b6:	459a      	cmp	sl, r3
 801f9b8:	f77f af40 	ble.w	801f83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801f9bc:	f109 0302 	add.w	r3, r9, #2
 801f9c0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801f9c4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801f9c8:	a809      	add	r0, sp, #36	; 0x24
 801f9ca:	9309      	str	r3, [sp, #36]	; 0x24
 801f9cc:	ab0f      	add	r3, sp, #60	; 0x3c
 801f9ce:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801f9d2:	9304      	str	r3, [sp, #16]
 801f9d4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f9d8:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801f9dc:	9303      	str	r3, [sp, #12]
 801f9de:	ab0e      	add	r3, sp, #56	; 0x38
 801f9e0:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801f9e4:	9302      	str	r3, [sp, #8]
 801f9e6:	ab0c      	add	r3, sp, #48	; 0x30
 801f9e8:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801f9ec:	9301      	str	r3, [sp, #4]
 801f9ee:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f9f2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801f9f6:	9300      	str	r3, [sp, #0]
 801f9f8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f9fc:	950e      	str	r5, [sp, #56]	; 0x38
 801f9fe:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801fa02:	950f      	str	r5, [sp, #60]	; 0x3c
 801fa04:	f7ff fe92 	bl	801f72c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801fa08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	bfbf      	itttt	lt
 801fa10:	6823      	ldrlt	r3, [r4, #0]
 801fa12:	3404      	addlt	r4, #4
 801fa14:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801fa18:	930e      	strlt	r3, [sp, #56]	; 0x38
 801fa1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	bfbf      	itttt	lt
 801fa20:	6823      	ldrlt	r3, [r4, #0]
 801fa22:	3404      	addlt	r4, #4
 801fa24:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801fa28:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801fa2a:	8813      	ldrh	r3, [r2, #0]
 801fa2c:	2b69      	cmp	r3, #105	; 0x69
 801fa2e:	f43f af2b 	beq.w	801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801fa32:	f63f af39 	bhi.w	801f8a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801fa36:	2b58      	cmp	r3, #88	; 0x58
 801fa38:	f43f af26 	beq.w	801f888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801fa3c:	f63f af20 	bhi.w	801f880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801fa40:	2b25      	cmp	r3, #37	; 0x25
 801fa42:	f43f af3c 	beq.w	801f8be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801fa46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fa48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801fa4c:	f8b9 2000 	ldrh.w	r2, [r9]
 801fa50:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801fa54:	3301      	adds	r3, #1
 801fa56:	930d      	str	r3, [sp, #52]	; 0x34
 801fa58:	e734      	b.n	801f8c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801fa5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa5e:	4605      	mov	r5, r0
 801fa60:	b0a1      	sub	sp, #132	; 0x84
 801fa62:	4610      	mov	r0, r2
 801fa64:	460e      	mov	r6, r1
 801fa66:	4614      	mov	r4, r2
 801fa68:	461f      	mov	r7, r3
 801fa6a:	f7ff fd33 	bl	801f4d4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801fa6e:	283f      	cmp	r0, #63	; 0x3f
 801fa70:	d906      	bls.n	801fa80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801fa72:	4b0a      	ldr	r3, [pc, #40]	; (801fa9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801fa74:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801fa78:	4a09      	ldr	r2, [pc, #36]	; (801faa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801fa7a:	480a      	ldr	r0, [pc, #40]	; (801faa4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801fa7c:	f009 ffac 	bl	80299d8 <__assert_func>
 801fa80:	4621      	mov	r1, r4
 801fa82:	2240      	movs	r2, #64	; 0x40
 801fa84:	4668      	mov	r0, sp
 801fa86:	f7ff fd31 	bl	801f4ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fa8a:	463b      	mov	r3, r7
 801fa8c:	466a      	mov	r2, sp
 801fa8e:	4631      	mov	r1, r6
 801fa90:	4628      	mov	r0, r5
 801fa92:	f7ff febe 	bl	801f812 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801fa96:	b021      	add	sp, #132	; 0x84
 801fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa9a:	bf00      	nop
 801fa9c:	0802e935 	.word	0x0802e935
 801faa0:	0802ea07 	.word	0x0802ea07
 801faa4:	0802e952 	.word	0x0802e952

0801faa8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801faa8:	b40c      	push	{r2, r3}
 801faaa:	b507      	push	{r0, r1, r2, lr}
 801faac:	ab04      	add	r3, sp, #16
 801faae:	f853 2b04 	ldr.w	r2, [r3], #4
 801fab2:	9301      	str	r3, [sp, #4]
 801fab4:	f7ff ffd2 	bl	801fa5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801fab8:	b003      	add	sp, #12
 801faba:	f85d eb04 	ldr.w	lr, [sp], #4
 801fabe:	b002      	add	sp, #8
 801fac0:	4770      	bx	lr
	...

0801fac4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 801fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac8:	b0c3      	sub	sp, #268	; 0x10c
 801faca:	2400      	movs	r4, #0
 801facc:	4606      	mov	r6, r0
 801face:	4689      	mov	r9, r1
 801fad0:	af10      	add	r7, sp, #64	; 0x40
 801fad2:	9209      	str	r2, [sp, #36]	; 0x24
 801fad4:	4621      	mov	r1, r4
 801fad6:	22c8      	movs	r2, #200	; 0xc8
 801fad8:	4638      	mov	r0, r7
 801fada:	469a      	mov	sl, r3
 801fadc:	940c      	str	r4, [sp, #48]	; 0x30
 801fade:	f7fe fc94 	bl	801e40a <_ZN8touchgfx6memsetEPvhm>
 801fae2:	b116      	cbz	r6, 801faea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801fae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fae6:	b923      	cbnz	r3, 801faf2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801fae8:	8033      	strh	r3, [r6, #0]
 801faea:	4630      	mov	r0, r6
 801faec:	b043      	add	sp, #268	; 0x10c
 801faee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf2:	f109 3bff 	add.w	fp, r9, #4294967295
 801faf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801faf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fafa:	8812      	ldrh	r2, [r2, #0]
 801fafc:	2a00      	cmp	r2, #0
 801fafe:	f000 80d1 	beq.w	801fca4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801fb02:	459b      	cmp	fp, r3
 801fb04:	f340 80ce 	ble.w	801fca4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801fb08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fb0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb0c:	882a      	ldrh	r2, [r5, #0]
 801fb0e:	2a00      	cmp	r2, #0
 801fb10:	d0f1      	beq.n	801faf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801fb12:	2a25      	cmp	r2, #37	; 0x25
 801fb14:	f000 80ca 	beq.w	801fcac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801fb18:	459b      	cmp	fp, r3
 801fb1a:	ddec      	ble.n	801faf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801fb1c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801fb20:	3502      	adds	r5, #2
 801fb22:	3301      	adds	r3, #1
 801fb24:	9509      	str	r5, [sp, #36]	; 0x24
 801fb26:	930c      	str	r3, [sp, #48]	; 0x30
 801fb28:	e7ee      	b.n	801fb08 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801fb2a:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801fb2e:	3202      	adds	r2, #2
 801fb30:	920c      	str	r2, [sp, #48]	; 0x30
 801fb32:	e0ac      	b.n	801fc8e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 801fb34:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801fb38:	970f      	str	r7, [sp, #60]	; 0x3c
 801fb3a:	3401      	adds	r4, #1
 801fb3c:	edd3 7a00 	vldr	s15, [r3]
 801fb40:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801fb44:	b923      	cbnz	r3, 801fb50 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801fb46:	2301      	movs	r3, #1
 801fb48:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801fb4c:	2303      	movs	r3, #3
 801fb4e:	930e      	str	r3, [sp, #56]	; 0x38
 801fb50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fb54:	980e      	ldr	r0, [sp, #56]	; 0x38
 801fb56:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801fb5a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801fd58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 801fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb62:	bf42      	ittt	mi
 801fb64:	232d      	movmi	r3, #45	; 0x2d
 801fb66:	eef1 7a67 	vnegmi.f32	s15, s15
 801fb6a:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801fb6e:	2300      	movs	r3, #0
 801fb70:	4298      	cmp	r0, r3
 801fb72:	dd03      	ble.n	801fb7c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 801fb74:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801fb78:	3301      	adds	r3, #1
 801fb7a:	e7f9      	b.n	801fb70 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 801fb7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fb80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb84:	eeb0 7a67 	vmov.f32	s14, s15
 801fb88:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801fb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb90:	da26      	bge.n	801fbe0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 801fb92:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801fb96:	eba9 0202 	sub.w	r2, r9, r2
 801fb9a:	2100      	movs	r1, #0
 801fb9c:	eef4 6ae5 	vcmpe.f32	s13, s11
 801fba0:	b28d      	uxth	r5, r1
 801fba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fba6:	db21      	blt.n	801fbec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801fba8:	1a53      	subs	r3, r2, r1
 801fbaa:	2b00      	cmp	r3, #0
 801fbac:	dd1e      	ble.n	801fbec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 801fbae:	2963      	cmp	r1, #99	; 0x63
 801fbb0:	d01b      	beq.n	801fbea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 801fbb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801fbb6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801fbba:	ee17 3a10 	vmov	r3, s14
 801fbbe:	2b09      	cmp	r3, #9
 801fbc0:	bfa8      	it	ge
 801fbc2:	2309      	movge	r3, #9
 801fbc4:	ee07 3a10 	vmov	s14, r3
 801fbc8:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801fbcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fbd0:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 801fbd4:	3101      	adds	r1, #1
 801fbd6:	eee7 7a66 	vfms.f32	s15, s14, s13
 801fbda:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801fbde:	e7dd      	b.n	801fb9c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 801fbe0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801fbe4:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801fbe8:	e7ce      	b.n	801fb88 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 801fbea:	460d      	mov	r5, r1
 801fbec:	2a63      	cmp	r2, #99	; 0x63
 801fbee:	bfd4      	ite	le
 801fbf0:	ebc5 0202 	rsble	r2, r5, r2
 801fbf4:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801fbf8:	2a00      	cmp	r2, #0
 801fbfa:	dd4e      	ble.n	801fc9a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 801fbfc:	4603      	mov	r3, r0
 801fbfe:	f04f 0801 	mov.w	r8, #1
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	dd0e      	ble.n	801fc24 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 801fc06:	ee67 7a86 	vmul.f32	s15, s15, s12
 801fc0a:	210a      	movs	r1, #10
 801fc0c:	3b01      	subs	r3, #1
 801fc0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801fc12:	ee17 ca10 	vmov	ip, s14
 801fc16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fc1a:	fb01 c808 	mla	r8, r1, r8, ip
 801fc1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fc22:	e7ee      	b.n	801fc02 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 801fc24:	2800      	cmp	r0, #0
 801fc26:	f100 33ff 	add.w	r3, r0, #4294967295
 801fc2a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 801fc2e:	bfac      	ite	ge
 801fc30:	1a18      	subge	r0, r3, r0
 801fc32:	4618      	movlt	r0, r3
 801fc34:	b292      	uxth	r2, r2
 801fc36:	230a      	movs	r3, #10
 801fc38:	900e      	str	r0, [sp, #56]	; 0x38
 801fc3a:	1979      	adds	r1, r7, r5
 801fc3c:	4640      	mov	r0, r8
 801fc3e:	f7ff fc84 	bl	801f54a <_ZN8touchgfx7Unicode4itoaElPtti>
 801fc42:	f1b8 0f01 	cmp.w	r8, #1
 801fc46:	dc26      	bgt.n	801fc96 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801fc48:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	bf0c      	ite	eq
 801fc50:	2300      	moveq	r3, #0
 801fc52:	232e      	movne	r3, #46	; 0x2e
 801fc54:	aa42      	add	r2, sp, #264	; 0x108
 801fc56:	4415      	add	r5, r2
 801fc58:	aa0c      	add	r2, sp, #48	; 0x30
 801fc5a:	f825 3cc8 	strh.w	r3, [r5, #-200]
 801fc5e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801fc62:	a80f      	add	r0, sp, #60	; 0x3c
 801fc64:	9205      	str	r2, [sp, #20]
 801fc66:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801fc6a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801fc6e:	9204      	str	r2, [sp, #16]
 801fc70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc72:	9203      	str	r2, [sp, #12]
 801fc74:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801fc78:	9202      	str	r2, [sp, #8]
 801fc7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fc7c:	9201      	str	r2, [sp, #4]
 801fc7e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801fc82:	e9cd 9606 	strd	r9, r6, [sp, #24]
 801fc86:	9200      	str	r2, [sp, #0]
 801fc88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc8a:	f7ff fc9f 	bl	801f5cc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801fc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc90:	3302      	adds	r3, #2
 801fc92:	9309      	str	r3, [sp, #36]	; 0x24
 801fc94:	e72f      	b.n	801faf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801fc96:	232e      	movs	r3, #46	; 0x2e
 801fc98:	e7dc      	b.n	801fc54 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 801fc9a:	ab42      	add	r3, sp, #264	; 0x108
 801fc9c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801fca0:	2300      	movs	r3, #0
 801fca2:	e7d9      	b.n	801fc58 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 801fca4:	2200      	movs	r2, #0
 801fca6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801fcaa:	e71e      	b.n	801faea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 801fcac:	459b      	cmp	fp, r3
 801fcae:	f77f af22 	ble.w	801faf6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 801fcb8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801fcbc:	a809      	add	r0, sp, #36	; 0x24
 801fcbe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fcc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fcc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fcca:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801fcce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801fcd2:	930d      	str	r3, [sp, #52]	; 0x34
 801fcd4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801fcd8:	930e      	str	r3, [sp, #56]	; 0x38
 801fcda:	1cab      	adds	r3, r5, #2
 801fcdc:	9309      	str	r3, [sp, #36]	; 0x24
 801fcde:	ab0e      	add	r3, sp, #56	; 0x38
 801fce0:	9304      	str	r3, [sp, #16]
 801fce2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801fce6:	9303      	str	r3, [sp, #12]
 801fce8:	ab0d      	add	r3, sp, #52	; 0x34
 801fcea:	9302      	str	r3, [sp, #8]
 801fcec:	ab0b      	add	r3, sp, #44	; 0x2c
 801fcee:	9301      	str	r3, [sp, #4]
 801fcf0:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801fcf4:	9300      	str	r3, [sp, #0]
 801fcf6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801fcfa:	f7ff fd17 	bl	801f72c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801fcfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	da0b      	bge.n	801fd1c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 801fd04:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801fd08:	3401      	adds	r4, #1
 801fd0a:	edd3 7a00 	vldr	s15, [r3]
 801fd0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd12:	ee17 3a90 	vmov	r3, s15
 801fd16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd1a:	930d      	str	r3, [sp, #52]	; 0x34
 801fd1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	da0b      	bge.n	801fd3a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 801fd22:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801fd26:	3401      	adds	r4, #1
 801fd28:	edd3 7a00 	vldr	s15, [r3]
 801fd2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd30:	ee17 3a90 	vmov	r3, s15
 801fd34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd38:	930e      	str	r3, [sp, #56]	; 0x38
 801fd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fd3e:	881b      	ldrh	r3, [r3, #0]
 801fd40:	2b25      	cmp	r3, #37	; 0x25
 801fd42:	f43f aef2 	beq.w	801fb2a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801fd46:	2b66      	cmp	r3, #102	; 0x66
 801fd48:	f43f aef4 	beq.w	801fb34 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 801fd4c:	9509      	str	r5, [sp, #36]	; 0x24
 801fd4e:	882b      	ldrh	r3, [r5, #0]
 801fd50:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801fd54:	3201      	adds	r2, #1
 801fd56:	e6eb      	b.n	801fb30 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801fd58:	3f000002 	.word	0x3f000002

0801fd5c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd5e:	4605      	mov	r5, r0
 801fd60:	b0a1      	sub	sp, #132	; 0x84
 801fd62:	4610      	mov	r0, r2
 801fd64:	460e      	mov	r6, r1
 801fd66:	4614      	mov	r4, r2
 801fd68:	461f      	mov	r7, r3
 801fd6a:	f7ff fbb3 	bl	801f4d4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801fd6e:	283f      	cmp	r0, #63	; 0x3f
 801fd70:	d906      	bls.n	801fd80 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 801fd72:	4b0a      	ldr	r3, [pc, #40]	; (801fd9c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 801fd74:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801fd78:	4a09      	ldr	r2, [pc, #36]	; (801fda0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801fd7a:	480a      	ldr	r0, [pc, #40]	; (801fda4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801fd7c:	f009 fe2c 	bl	80299d8 <__assert_func>
 801fd80:	4621      	mov	r1, r4
 801fd82:	2240      	movs	r2, #64	; 0x40
 801fd84:	4668      	mov	r0, sp
 801fd86:	f7ff fbb1 	bl	801f4ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fd8a:	463b      	mov	r3, r7
 801fd8c:	466a      	mov	r2, sp
 801fd8e:	4631      	mov	r1, r6
 801fd90:	4628      	mov	r0, r5
 801fd92:	f7ff fe97 	bl	801fac4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 801fd96:	b021      	add	sp, #132	; 0x84
 801fd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd9a:	bf00      	nop
 801fd9c:	0802e935 	.word	0x0802e935
 801fda0:	0802e978 	.word	0x0802e978
 801fda4:	0802e952 	.word	0x0802e952

0801fda8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801fda8:	4b01      	ldr	r3, [pc, #4]	; (801fdb0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801fdaa:	6018      	str	r0, [r3, #0]
 801fdac:	4770      	bx	lr
 801fdae:	bf00      	nop
 801fdb0:	2000bfb8 	.word	0x2000bfb8

0801fdb4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801fdb4:	4b07      	ldr	r3, [pc, #28]	; (801fdd4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801fdb6:	881a      	ldrh	r2, [r3, #0]
 801fdb8:	4282      	cmp	r2, r0
 801fdba:	d809      	bhi.n	801fdd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801fdbc:	4b06      	ldr	r3, [pc, #24]	; (801fdd8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801fdbe:	881b      	ldrh	r3, [r3, #0]
 801fdc0:	4413      	add	r3, r2
 801fdc2:	4298      	cmp	r0, r3
 801fdc4:	da04      	bge.n	801fdd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801fdc6:	4b05      	ldr	r3, [pc, #20]	; (801fddc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801fdc8:	681b      	ldr	r3, [r3, #0]
 801fdca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801fdce:	4770      	bx	lr
 801fdd0:	2000      	movs	r0, #0
 801fdd2:	4770      	bx	lr
 801fdd4:	2000bfd8 	.word	0x2000bfd8
 801fdd8:	2000bfdc 	.word	0x2000bfdc
 801fddc:	2000bfbc 	.word	0x2000bfbc

0801fde0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801fde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fde4:	4d26      	ldr	r5, [pc, #152]	; (801fe80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801fde6:	682b      	ldr	r3, [r5, #0]
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d046      	beq.n	801fe7a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801fdec:	4a25      	ldr	r2, [pc, #148]	; (801fe84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801fdee:	4f26      	ldr	r7, [pc, #152]	; (801fe88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801fdf0:	8810      	ldrh	r0, [r2, #0]
 801fdf2:	883c      	ldrh	r4, [r7, #0]
 801fdf4:	4e25      	ldr	r6, [pc, #148]	; (801fe8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801fdf6:	4420      	add	r0, r4
 801fdf8:	1c42      	adds	r2, r0, #1
 801fdfa:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801fdfe:	f022 0201 	bic.w	r2, r2, #1
 801fe02:	0412      	lsls	r2, r2, #16
 801fe04:	0c12      	lsrs	r2, r2, #16
 801fe06:	0051      	lsls	r1, r2, #1
 801fe08:	220e      	movs	r2, #14
 801fe0a:	eb08 0e01 	add.w	lr, r8, r1
 801fe0e:	fb02 fc04 	mul.w	ip, r2, r4
 801fe12:	eb03 0208 	add.w	r2, r3, r8
 801fe16:	4c1e      	ldr	r4, [pc, #120]	; (801fe90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801fe18:	6022      	str	r2, [r4, #0]
 801fe1a:	eb03 020e 	add.w	r2, r3, lr
 801fe1e:	44e6      	add	lr, ip
 801fe20:	6032      	str	r2, [r6, #0]
 801fe22:	4473      	add	r3, lr
 801fe24:	4a1b      	ldr	r2, [pc, #108]	; (801fe94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801fe26:	6013      	str	r3, [r2, #0]
 801fe28:	2300      	movs	r3, #0
 801fe2a:	4a1b      	ldr	r2, [pc, #108]	; (801fe98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801fe2c:	8013      	strh	r3, [r2, #0]
 801fe2e:	4a1b      	ldr	r2, [pc, #108]	; (801fe9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801fe30:	6812      	ldr	r2, [r2, #0]
 801fe32:	eba2 0208 	sub.w	r2, r2, r8
 801fe36:	1a52      	subs	r2, r2, r1
 801fe38:	4919      	ldr	r1, [pc, #100]	; (801fea0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801fe3a:	eba2 020c 	sub.w	r2, r2, ip
 801fe3e:	469c      	mov	ip, r3
 801fe40:	600a      	str	r2, [r1, #0]
 801fe42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fe46:	4a17      	ldr	r2, [pc, #92]	; (801fea4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801fe48:	8013      	strh	r3, [r2, #0]
 801fe4a:	4283      	cmp	r3, r0
 801fe4c:	d10d      	bne.n	801fe6a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801fe4e:	883d      	ldrh	r5, [r7, #0]
 801fe50:	2300      	movs	r3, #0
 801fe52:	6830      	ldr	r0, [r6, #0]
 801fe54:	240e      	movs	r4, #14
 801fe56:	429d      	cmp	r5, r3
 801fe58:	d90f      	bls.n	801fe7a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801fe5a:	fb04 0203 	mla	r2, r4, r3, r0
 801fe5e:	3301      	adds	r3, #1
 801fe60:	7b11      	ldrb	r1, [r2, #12]
 801fe62:	f36f 1145 	bfc	r1, #5, #1
 801fe66:	7311      	strb	r1, [r2, #12]
 801fe68:	e7f5      	b.n	801fe56 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801fe6a:	682a      	ldr	r2, [r5, #0]
 801fe6c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801fe70:	6822      	ldr	r2, [r4, #0]
 801fe72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801fe76:	3301      	adds	r3, #1
 801fe78:	e7e7      	b.n	801fe4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801fe7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe7e:	bf00      	nop
 801fe80:	2000bfbc 	.word	0x2000bfbc
 801fe84:	2000bfd8 	.word	0x2000bfd8
 801fe88:	2000bfdc 	.word	0x2000bfdc
 801fe8c:	2000bfc0 	.word	0x2000bfc0
 801fe90:	2000bfd0 	.word	0x2000bfd0
 801fe94:	2000bfc8 	.word	0x2000bfc8
 801fe98:	2000bfda 	.word	0x2000bfda
 801fe9c:	2000bfc4 	.word	0x2000bfc4
 801fea0:	2000bfd4 	.word	0x2000bfd4
 801fea4:	2000bfcc 	.word	0x2000bfcc

0801fea8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fea8:	4b10      	ldr	r3, [pc, #64]	; (801feec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801feaa:	b510      	push	{r4, lr}
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	b9db      	cbnz	r3, 801fee8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801feb0:	b1d1      	cbz	r1, 801fee8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801feb2:	4b0f      	ldr	r3, [pc, #60]	; (801fef0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801feb4:	240e      	movs	r4, #14
 801feb6:	801a      	strh	r2, [r3, #0]
 801feb8:	b292      	uxth	r2, r2
 801feba:	4b0e      	ldr	r3, [pc, #56]	; (801fef4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801febc:	881b      	ldrh	r3, [r3, #0]
 801febe:	4413      	add	r3, r2
 801fec0:	4362      	muls	r2, r4
 801fec2:	2406      	movs	r4, #6
 801fec4:	fb04 2203 	mla	r2, r4, r3, r2
 801fec8:	428a      	cmp	r2, r1
 801feca:	d305      	bcc.n	801fed8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801fecc:	4b0a      	ldr	r3, [pc, #40]	; (801fef8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801fece:	2137      	movs	r1, #55	; 0x37
 801fed0:	4a0a      	ldr	r2, [pc, #40]	; (801fefc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801fed2:	480b      	ldr	r0, [pc, #44]	; (801ff00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801fed4:	f009 fd80 	bl	80299d8 <__assert_func>
 801fed8:	4b0a      	ldr	r3, [pc, #40]	; (801ff04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801feda:	6019      	str	r1, [r3, #0]
 801fedc:	4b0a      	ldr	r3, [pc, #40]	; (801ff08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801fede:	6018      	str	r0, [r3, #0]
 801fee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fee4:	f7ff bf7c 	b.w	801fde0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fee8:	bd10      	pop	{r4, pc}
 801feea:	bf00      	nop
 801feec:	2000bfc8 	.word	0x2000bfc8
 801fef0:	2000bfdc 	.word	0x2000bfdc
 801fef4:	2000bfd8 	.word	0x2000bfd8
 801fef8:	0802eae9 	.word	0x0802eae9
 801fefc:	0802eb42 	.word	0x0802eb42
 801ff00:	0802eac4 	.word	0x0802eac4
 801ff04:	2000bfc4 	.word	0x2000bfc4
 801ff08:	2000bfbc 	.word	0x2000bfbc

0801ff0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ff0c:	b470      	push	{r4, r5, r6}
 801ff0e:	4c07      	ldr	r4, [pc, #28]	; (801ff2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ff10:	4605      	mov	r5, r0
 801ff12:	4610      	mov	r0, r2
 801ff14:	9a03      	ldr	r2, [sp, #12]
 801ff16:	6826      	ldr	r6, [r4, #0]
 801ff18:	b936      	cbnz	r6, 801ff28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ff1a:	6025      	str	r5, [r4, #0]
 801ff1c:	4c04      	ldr	r4, [pc, #16]	; (801ff30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ff1e:	8021      	strh	r1, [r4, #0]
 801ff20:	4619      	mov	r1, r3
 801ff22:	bc70      	pop	{r4, r5, r6}
 801ff24:	f7ff bfc0 	b.w	801fea8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ff28:	bc70      	pop	{r4, r5, r6}
 801ff2a:	4770      	bx	lr
 801ff2c:	2000bfe0 	.word	0x2000bfe0
 801ff30:	2000bfd8 	.word	0x2000bfd8

0801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ff34:	b508      	push	{r3, lr}
 801ff36:	4b14      	ldr	r3, [pc, #80]	; (801ff88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ff38:	6819      	ldr	r1, [r3, #0]
 801ff3a:	b931      	cbnz	r1, 801ff4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ff3c:	4b13      	ldr	r3, [pc, #76]	; (801ff8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ff3e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801ff42:	4a13      	ldr	r2, [pc, #76]	; (801ff90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ff44:	4813      	ldr	r0, [pc, #76]	; (801ff94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ff46:	f009 fd47 	bl	80299d8 <__assert_func>
 801ff4a:	4a13      	ldr	r2, [pc, #76]	; (801ff98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ff4c:	8803      	ldrh	r3, [r0, #0]
 801ff4e:	8812      	ldrh	r2, [r2, #0]
 801ff50:	4293      	cmp	r3, r2
 801ff52:	d204      	bcs.n	801ff5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ff54:	2214      	movs	r2, #20
 801ff56:	fb02 1303 	mla	r3, r2, r3, r1
 801ff5a:	8918      	ldrh	r0, [r3, #8]
 801ff5c:	bd08      	pop	{r3, pc}
 801ff5e:	490f      	ldr	r1, [pc, #60]	; (801ff9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ff60:	8809      	ldrh	r1, [r1, #0]
 801ff62:	4411      	add	r1, r2
 801ff64:	428b      	cmp	r3, r1
 801ff66:	da06      	bge.n	801ff76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ff68:	1a9b      	subs	r3, r3, r2
 801ff6a:	4a0d      	ldr	r2, [pc, #52]	; (801ffa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ff6c:	210e      	movs	r1, #14
 801ff6e:	6812      	ldr	r2, [r2, #0]
 801ff70:	fb01 2303 	mla	r3, r1, r3, r2
 801ff74:	e7f1      	b.n	801ff5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ff76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ff7a:	4293      	cmp	r3, r2
 801ff7c:	bf0a      	itet	eq
 801ff7e:	4b09      	ldreq	r3, [pc, #36]	; (801ffa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ff80:	2000      	movne	r0, #0
 801ff82:	8818      	ldrheq	r0, [r3, #0]
 801ff84:	e7ea      	b.n	801ff5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ff86:	bf00      	nop
 801ff88:	2000bfe0 	.word	0x2000bfe0
 801ff8c:	0802c8b4 	.word	0x0802c8b4
 801ff90:	0802ebef 	.word	0x0802ebef
 801ff94:	0802eac4 	.word	0x0802eac4
 801ff98:	2000bfd8 	.word	0x2000bfd8
 801ff9c:	2000bfdc 	.word	0x2000bfdc
 801ffa0:	2000bfc0 	.word	0x2000bfc0
 801ffa4:	2000bf0a 	.word	0x2000bf0a

0801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ffa8:	b508      	push	{r3, lr}
 801ffaa:	4b14      	ldr	r3, [pc, #80]	; (801fffc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ffac:	6819      	ldr	r1, [r3, #0]
 801ffae:	b931      	cbnz	r1, 801ffbe <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ffb0:	4b13      	ldr	r3, [pc, #76]	; (8020000 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ffb2:	f240 21fa 	movw	r1, #762	; 0x2fa
 801ffb6:	4a13      	ldr	r2, [pc, #76]	; (8020004 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ffb8:	4813      	ldr	r0, [pc, #76]	; (8020008 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ffba:	f009 fd0d 	bl	80299d8 <__assert_func>
 801ffbe:	4a13      	ldr	r2, [pc, #76]	; (802000c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ffc0:	8803      	ldrh	r3, [r0, #0]
 801ffc2:	8812      	ldrh	r2, [r2, #0]
 801ffc4:	4293      	cmp	r3, r2
 801ffc6:	d204      	bcs.n	801ffd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ffc8:	2214      	movs	r2, #20
 801ffca:	fb02 1303 	mla	r3, r2, r3, r1
 801ffce:	8958      	ldrh	r0, [r3, #10]
 801ffd0:	bd08      	pop	{r3, pc}
 801ffd2:	490f      	ldr	r1, [pc, #60]	; (8020010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ffd4:	8809      	ldrh	r1, [r1, #0]
 801ffd6:	4411      	add	r1, r2
 801ffd8:	428b      	cmp	r3, r1
 801ffda:	da06      	bge.n	801ffea <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ffdc:	1a9b      	subs	r3, r3, r2
 801ffde:	4a0d      	ldr	r2, [pc, #52]	; (8020014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ffe0:	210e      	movs	r1, #14
 801ffe2:	6812      	ldr	r2, [r2, #0]
 801ffe4:	fb01 2303 	mla	r3, r1, r3, r2
 801ffe8:	e7f1      	b.n	801ffce <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ffea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ffee:	4293      	cmp	r3, r2
 801fff0:	bf0a      	itet	eq
 801fff2:	4b09      	ldreq	r3, [pc, #36]	; (8020018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801fff4:	2000      	movne	r0, #0
 801fff6:	8818      	ldrheq	r0, [r3, #0]
 801fff8:	e7ea      	b.n	801ffd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801fffa:	bf00      	nop
 801fffc:	2000bfe0 	.word	0x2000bfe0
 8020000:	0802c8b4 	.word	0x0802c8b4
 8020004:	0802ec1b 	.word	0x0802ec1b
 8020008:	0802eac4 	.word	0x0802eac4
 802000c:	2000bfd8 	.word	0x2000bfd8
 8020010:	2000bfdc 	.word	0x2000bfdc
 8020014:	2000bfc0 	.word	0x2000bfc0
 8020018:	2000bf0c 	.word	0x2000bf0c

0802001c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 802001c:	4b23      	ldr	r3, [pc, #140]	; (80200ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802001e:	b510      	push	{r4, lr}
 8020020:	681c      	ldr	r4, [r3, #0]
 8020022:	b934      	cbnz	r4, 8020032 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8020024:	4b22      	ldr	r3, [pc, #136]	; (80200b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020026:	f240 310e 	movw	r1, #782	; 0x30e
 802002a:	4a22      	ldr	r2, [pc, #136]	; (80200b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 802002c:	4822      	ldr	r0, [pc, #136]	; (80200b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802002e:	f009 fcd3 	bl	80299d8 <__assert_func>
 8020032:	4a22      	ldr	r2, [pc, #136]	; (80200bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8020034:	880b      	ldrh	r3, [r1, #0]
 8020036:	8812      	ldrh	r2, [r2, #0]
 8020038:	4293      	cmp	r3, r2
 802003a:	d211      	bcs.n	8020060 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 802003c:	2214      	movs	r2, #20
 802003e:	fb02 4303 	mla	r3, r2, r3, r4
 8020042:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8020046:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 802004a:	8a1a      	ldrh	r2, [r3, #16]
 802004c:	8a5b      	ldrh	r3, [r3, #18]
 802004e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020052:	8004      	strh	r4, [r0, #0]
 8020054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020058:	8041      	strh	r1, [r0, #2]
 802005a:	8082      	strh	r2, [r0, #4]
 802005c:	80c3      	strh	r3, [r0, #6]
 802005e:	e00e      	b.n	802007e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8020060:	4917      	ldr	r1, [pc, #92]	; (80200c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8020062:	8809      	ldrh	r1, [r1, #0]
 8020064:	4411      	add	r1, r2
 8020066:	428b      	cmp	r3, r1
 8020068:	da0a      	bge.n	8020080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 802006a:	1a9b      	subs	r3, r3, r2
 802006c:	4a15      	ldr	r2, [pc, #84]	; (80200c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 802006e:	210e      	movs	r1, #14
 8020070:	6812      	ldr	r2, [r2, #0]
 8020072:	fb01 2303 	mla	r3, r1, r3, r2
 8020076:	681a      	ldr	r2, [r3, #0]
 8020078:	6002      	str	r2, [r0, #0]
 802007a:	685a      	ldr	r2, [r3, #4]
 802007c:	6042      	str	r2, [r0, #4]
 802007e:	bd10      	pop	{r4, pc}
 8020080:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020084:	4293      	cmp	r3, r2
 8020086:	d10b      	bne.n	80200a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8020088:	4b0f      	ldr	r3, [pc, #60]	; (80200c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 802008a:	f9b3 1000 	ldrsh.w	r1, [r3]
 802008e:	4b0f      	ldr	r3, [pc, #60]	; (80200cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8020090:	8081      	strh	r1, [r0, #4]
 8020092:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020096:	2300      	movs	r3, #0
 8020098:	80c2      	strh	r2, [r0, #6]
 802009a:	8003      	strh	r3, [r0, #0]
 802009c:	8043      	strh	r3, [r0, #2]
 802009e:	e7ee      	b.n	802007e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80200a0:	2300      	movs	r3, #0
 80200a2:	8003      	strh	r3, [r0, #0]
 80200a4:	8043      	strh	r3, [r0, #2]
 80200a6:	8083      	strh	r3, [r0, #4]
 80200a8:	e7d8      	b.n	802005c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80200aa:	bf00      	nop
 80200ac:	2000bfe0 	.word	0x2000bfe0
 80200b0:	0802c8b4 	.word	0x0802c8b4
 80200b4:	0802eb88 	.word	0x0802eb88
 80200b8:	0802eac4 	.word	0x0802eac4
 80200bc:	2000bfd8 	.word	0x2000bfd8
 80200c0:	2000bfdc 	.word	0x2000bfdc
 80200c4:	2000bfc0 	.word	0x2000bfc0
 80200c8:	2000bf0a 	.word	0x2000bf0a
 80200cc:	2000bf0c 	.word	0x2000bf0c

080200d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80200d0:	4b18      	ldr	r3, [pc, #96]	; (8020134 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	b34b      	cbz	r3, 802012a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80200d6:	4a18      	ldr	r2, [pc, #96]	; (8020138 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80200d8:	8800      	ldrh	r0, [r0, #0]
 80200da:	8812      	ldrh	r2, [r2, #0]
 80200dc:	4290      	cmp	r0, r2
 80200de:	d211      	bcs.n	8020104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80200e0:	2214      	movs	r2, #20
 80200e2:	fb02 3300 	mla	r3, r2, r0, r3
 80200e6:	8a1a      	ldrh	r2, [r3, #16]
 80200e8:	8919      	ldrh	r1, [r3, #8]
 80200ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80200ee:	428a      	cmp	r2, r1
 80200f0:	db1d      	blt.n	802012e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80200f2:	8a58      	ldrh	r0, [r3, #18]
 80200f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80200f8:	895b      	ldrh	r3, [r3, #10]
 80200fa:	4298      	cmp	r0, r3
 80200fc:	bfac      	ite	ge
 80200fe:	2000      	movge	r0, #0
 8020100:	2001      	movlt	r0, #1
 8020102:	4770      	bx	lr
 8020104:	4b0d      	ldr	r3, [pc, #52]	; (802013c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8020106:	881b      	ldrh	r3, [r3, #0]
 8020108:	4413      	add	r3, r2
 802010a:	4298      	cmp	r0, r3
 802010c:	da0d      	bge.n	802012a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 802010e:	4b0c      	ldr	r3, [pc, #48]	; (8020140 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8020110:	1a80      	subs	r0, r0, r2
 8020112:	220e      	movs	r2, #14
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	fb02 3300 	mla	r3, r2, r0, r3
 802011a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802011e:	891a      	ldrh	r2, [r3, #8]
 8020120:	4291      	cmp	r1, r2
 8020122:	db04      	blt.n	802012e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8020124:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8020128:	e7e6      	b.n	80200f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 802012a:	2000      	movs	r0, #0
 802012c:	4770      	bx	lr
 802012e:	2001      	movs	r0, #1
 8020130:	4770      	bx	lr
 8020132:	bf00      	nop
 8020134:	2000bfe0 	.word	0x2000bfe0
 8020138:	2000bfd8 	.word	0x2000bfd8
 802013c:	2000bfdc 	.word	0x2000bfdc
 8020140:	2000bfc0 	.word	0x2000bfc0

08020144 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8020144:	b508      	push	{r3, lr}
 8020146:	4b12      	ldr	r3, [pc, #72]	; (8020190 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8020148:	6819      	ldr	r1, [r3, #0]
 802014a:	b931      	cbnz	r1, 802015a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 802014c:	4b11      	ldr	r3, [pc, #68]	; (8020194 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 802014e:	f240 3132 	movw	r1, #818	; 0x332
 8020152:	4a11      	ldr	r2, [pc, #68]	; (8020198 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020154:	4811      	ldr	r0, [pc, #68]	; (802019c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8020156:	f009 fc3f 	bl	80299d8 <__assert_func>
 802015a:	8803      	ldrh	r3, [r0, #0]
 802015c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020160:	4293      	cmp	r3, r2
 8020162:	d012      	beq.n	802018a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8020164:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020168:	4293      	cmp	r3, r2
 802016a:	d103      	bne.n	8020174 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 802016c:	4b0c      	ldr	r3, [pc, #48]	; (80201a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8020172:	bd08      	pop	{r3, pc}
 8020174:	4a0b      	ldr	r2, [pc, #44]	; (80201a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8020176:	6812      	ldr	r2, [r2, #0]
 8020178:	b11a      	cbz	r2, 8020182 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 802017a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802017e:	2800      	cmp	r0, #0
 8020180:	d1f7      	bne.n	8020172 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8020182:	2214      	movs	r2, #20
 8020184:	4353      	muls	r3, r2
 8020186:	58c8      	ldr	r0, [r1, r3]
 8020188:	e7f3      	b.n	8020172 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802018a:	2000      	movs	r0, #0
 802018c:	e7f1      	b.n	8020172 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802018e:	bf00      	nop
 8020190:	2000bfe0 	.word	0x2000bfe0
 8020194:	0802c8b4 	.word	0x0802c8b4
 8020198:	0802ebbe 	.word	0x0802ebbe
 802019c:	0802eac4 	.word	0x0802eac4
 80201a0:	2000bf18 	.word	0x2000bf18
 80201a4:	2000bfbc 	.word	0x2000bfbc

080201a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80201a8:	8802      	ldrh	r2, [r0, #0]
 80201aa:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80201ae:	429a      	cmp	r2, r3
 80201b0:	d840      	bhi.n	8020234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80201b2:	4b21      	ldr	r3, [pc, #132]	; (8020238 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 80201b4:	881b      	ldrh	r3, [r3, #0]
 80201b6:	429a      	cmp	r2, r3
 80201b8:	d220      	bcs.n	80201fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 80201ba:	4b20      	ldr	r3, [pc, #128]	; (802023c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80201bc:	6819      	ldr	r1, [r3, #0]
 80201be:	2314      	movs	r3, #20
 80201c0:	fb03 1302 	mla	r3, r3, r2, r1
 80201c4:	6858      	ldr	r0, [r3, #4]
 80201c6:	2800      	cmp	r0, #0
 80201c8:	d035      	beq.n	8020236 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80201ca:	491d      	ldr	r1, [pc, #116]	; (8020240 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80201cc:	6809      	ldr	r1, [r1, #0]
 80201ce:	2900      	cmp	r1, #0
 80201d0:	d031      	beq.n	8020236 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80201d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80201d6:	b371      	cbz	r1, 8020236 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80201d8:	895a      	ldrh	r2, [r3, #10]
 80201da:	8918      	ldrh	r0, [r3, #8]
 80201dc:	4350      	muls	r0, r2
 80201de:	7c5a      	ldrb	r2, [r3, #17]
 80201e0:	7cdb      	ldrb	r3, [r3, #19]
 80201e2:	0952      	lsrs	r2, r2, #5
 80201e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80201e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80201ec:	2b0b      	cmp	r3, #11
 80201ee:	bf18      	it	ne
 80201f0:	0040      	lslne	r0, r0, #1
 80201f2:	3003      	adds	r0, #3
 80201f4:	f020 0003 	bic.w	r0, r0, #3
 80201f8:	4408      	add	r0, r1
 80201fa:	4770      	bx	lr
 80201fc:	4911      	ldr	r1, [pc, #68]	; (8020244 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80201fe:	8809      	ldrh	r1, [r1, #0]
 8020200:	4419      	add	r1, r3
 8020202:	428a      	cmp	r2, r1
 8020204:	da16      	bge.n	8020234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8020206:	4910      	ldr	r1, [pc, #64]	; (8020248 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8020208:	1ad3      	subs	r3, r2, r3
 802020a:	200e      	movs	r0, #14
 802020c:	6809      	ldr	r1, [r1, #0]
 802020e:	fb00 1303 	mla	r3, r0, r3, r1
 8020212:	7b19      	ldrb	r1, [r3, #12]
 8020214:	f001 011f 	and.w	r1, r1, #31
 8020218:	290b      	cmp	r1, #11
 802021a:	d10b      	bne.n	8020234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 802021c:	8919      	ldrh	r1, [r3, #8]
 802021e:	8958      	ldrh	r0, [r3, #10]
 8020220:	4b07      	ldr	r3, [pc, #28]	; (8020240 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8020222:	4348      	muls	r0, r1
 8020224:	6819      	ldr	r1, [r3, #0]
 8020226:	3003      	adds	r0, #3
 8020228:	f020 0303 	bic.w	r3, r0, #3
 802022c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8020230:	4418      	add	r0, r3
 8020232:	4770      	bx	lr
 8020234:	2000      	movs	r0, #0
 8020236:	4770      	bx	lr
 8020238:	2000bfd8 	.word	0x2000bfd8
 802023c:	2000bfe0 	.word	0x2000bfe0
 8020240:	2000bfbc 	.word	0x2000bfbc
 8020244:	2000bfdc 	.word	0x2000bfdc
 8020248:	2000bfc0 	.word	0x2000bfc0

0802024c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 802024c:	4b19      	ldr	r3, [pc, #100]	; (80202b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 802024e:	6819      	ldr	r1, [r3, #0]
 8020250:	8803      	ldrh	r3, [r0, #0]
 8020252:	b1e9      	cbz	r1, 8020290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8020254:	4a18      	ldr	r2, [pc, #96]	; (80202b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8020256:	8812      	ldrh	r2, [r2, #0]
 8020258:	429a      	cmp	r2, r3
 802025a:	d90a      	bls.n	8020272 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 802025c:	2214      	movs	r2, #20
 802025e:	fb02 1303 	mla	r3, r2, r3, r1
 8020262:	7c58      	ldrb	r0, [r3, #17]
 8020264:	0942      	lsrs	r2, r0, #5
 8020266:	7cd8      	ldrb	r0, [r3, #19]
 8020268:	f3c0 1042 	ubfx	r0, r0, #5, #3
 802026c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8020270:	4770      	bx	lr
 8020272:	4912      	ldr	r1, [pc, #72]	; (80202bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8020274:	8809      	ldrh	r1, [r1, #0]
 8020276:	4411      	add	r1, r2
 8020278:	428b      	cmp	r3, r1
 802027a:	da09      	bge.n	8020290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 802027c:	1a9b      	subs	r3, r3, r2
 802027e:	4a10      	ldr	r2, [pc, #64]	; (80202c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8020280:	210e      	movs	r1, #14
 8020282:	6812      	ldr	r2, [r2, #0]
 8020284:	fb01 2303 	mla	r3, r1, r3, r2
 8020288:	7b18      	ldrb	r0, [r3, #12]
 802028a:	f000 001f 	and.w	r0, r0, #31
 802028e:	4770      	bx	lr
 8020290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020294:	4293      	cmp	r3, r2
 8020296:	d10a      	bne.n	80202ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8020298:	4b0a      	ldr	r3, [pc, #40]	; (80202c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80202a0:	b10a      	cbz	r2, 80202a6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80202a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80202a4:	b900      	cbnz	r0, 80202a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80202a6:	6898      	ldr	r0, [r3, #8]
 80202a8:	6803      	ldr	r3, [r0, #0]
 80202aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202ac:	4718      	bx	r3
 80202ae:	2000      	movs	r0, #0
 80202b0:	4770      	bx	lr
 80202b2:	bf00      	nop
 80202b4:	2000bfe0 	.word	0x2000bfe0
 80202b8:	2000bfd8 	.word	0x2000bfd8
 80202bc:	2000bfdc 	.word	0x2000bfdc
 80202c0:	2000bfc0 	.word	0x2000bfc0
 80202c4:	2000bf18 	.word	0x2000bf18

080202c8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80202c8:	2018      	movs	r0, #24
 80202ca:	4770      	bx	lr

080202cc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80202cc:	2001      	movs	r0, #1
 80202ce:	4770      	bx	lr

080202d0 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 80202d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80202d4:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80202d8:	4770      	bx	lr

080202da <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80202da:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80202de:	4770      	bx	lr

080202e0 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80202e0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80202e4:	4770      	bx	lr

080202e6 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80202e6:	b2c8      	uxtb	r0, r1
 80202e8:	4770      	bx	lr

080202ea <_ZN8touchgfx8LCD24bpp4initEv>:
 80202ea:	4770      	bx	lr

080202ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80202ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f0:	b085      	sub	sp, #20
 80202f2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80202f4:	9203      	str	r2, [sp, #12]
 80202f6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80202fa:	6878      	ldr	r0, [r7, #4]
 80202fc:	9201      	str	r2, [sp, #4]
 80202fe:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8020300:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8020304:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8020308:	fa1f fc84 	uxth.w	ip, r4
 802030c:	43e4      	mvns	r4, r4
 802030e:	9100      	str	r1, [sp, #0]
 8020310:	b2e4      	uxtb	r4, r4
 8020312:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8020316:	fb00 2505 	mla	r5, r0, r5, r2
 802031a:	683a      	ldr	r2, [r7, #0]
 802031c:	6877      	ldr	r7, [r6, #4]
 802031e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020322:	3704      	adds	r7, #4
 8020324:	4415      	add	r5, r2
 8020326:	6832      	ldr	r2, [r6, #0]
 8020328:	9202      	str	r2, [sp, #8]
 802032a:	9a00      	ldr	r2, [sp, #0]
 802032c:	2a00      	cmp	r2, #0
 802032e:	dc03      	bgt.n	8020338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8020330:	9a03      	ldr	r2, [sp, #12]
 8020332:	2a00      	cmp	r2, #0
 8020334:	f340 8116 	ble.w	8020564 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802033a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802033e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020340:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020344:	2b00      	cmp	r3, #0
 8020346:	dd0f      	ble.n	8020368 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8020348:	1406      	asrs	r6, r0, #16
 802034a:	d406      	bmi.n	802035a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802034c:	4546      	cmp	r6, r8
 802034e:	da04      	bge.n	802035a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020350:	1416      	asrs	r6, r2, #16
 8020352:	d402      	bmi.n	802035a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020354:	9901      	ldr	r1, [sp, #4]
 8020356:	428e      	cmp	r6, r1
 8020358:	db07      	blt.n	802036a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802035a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802035c:	3b01      	subs	r3, #1
 802035e:	3503      	adds	r5, #3
 8020360:	4408      	add	r0, r1
 8020362:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020364:	440a      	add	r2, r1
 8020366:	e7ed      	b.n	8020344 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8020368:	d011      	beq.n	802038e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 802036a:	1e5e      	subs	r6, r3, #1
 802036c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802036e:	fb01 0e06 	mla	lr, r1, r6, r0
 8020372:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8020376:	d548      	bpl.n	802040a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020378:	4699      	mov	r9, r3
 802037a:	462e      	mov	r6, r5
 802037c:	f1b9 0f00 	cmp.w	r9, #0
 8020380:	f300 809e 	bgt.w	80204c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8020384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802038c:	441d      	add	r5, r3
 802038e:	9b00      	ldr	r3, [sp, #0]
 8020390:	2b00      	cmp	r3, #0
 8020392:	f340 80e7 	ble.w	8020564 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802039a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802039c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203a4:	eef0 6a62 	vmov.f32	s13, s5
 80203a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80203ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203b4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80203b8:	eef0 6a43 	vmov.f32	s13, s6
 80203bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80203c0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80203c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203dc:	ee12 2a90 	vmov	r2, s5
 80203e0:	eef0 2a47 	vmov.f32	s5, s14
 80203e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203e8:	ee13 2a10 	vmov	r2, s6
 80203ec:	9311      	str	r3, [sp, #68]	; 0x44
 80203ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203f0:	eeb0 3a67 	vmov.f32	s6, s15
 80203f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80203f8:	9312      	str	r3, [sp, #72]	; 0x48
 80203fa:	9b00      	ldr	r3, [sp, #0]
 80203fc:	9a03      	ldr	r2, [sp, #12]
 80203fe:	3b01      	subs	r3, #1
 8020400:	9300      	str	r3, [sp, #0]
 8020402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020404:	bf08      	it	eq
 8020406:	4613      	moveq	r3, r2
 8020408:	e78f      	b.n	802032a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 802040a:	45c6      	cmp	lr, r8
 802040c:	dab4      	bge.n	8020378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 802040e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020410:	fb01 2606 	mla	r6, r1, r6, r2
 8020414:	1436      	asrs	r6, r6, #16
 8020416:	d4af      	bmi.n	8020378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8020418:	9901      	ldr	r1, [sp, #4]
 802041a:	428e      	cmp	r6, r1
 802041c:	daac      	bge.n	8020378 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 802041e:	1cee      	adds	r6, r5, #3
 8020420:	4699      	mov	r9, r3
 8020422:	f1b9 0f00 	cmp.w	r9, #0
 8020426:	f106 0603 	add.w	r6, r6, #3
 802042a:	ddab      	ble.n	8020384 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802042c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8020430:	9902      	ldr	r1, [sp, #8]
 8020432:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020436:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 802043a:	fb08 1e0e 	mla	lr, r8, lr, r1
 802043e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020440:	fb1b fb04 	smulbb	fp, fp, r4
 8020444:	f109 39ff 	add.w	r9, r9, #4294967295
 8020448:	f81e e00a 	ldrb.w	lr, [lr, sl]
 802044c:	4408      	add	r0, r1
 802044e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020450:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020454:	440a      	add	r2, r1
 8020456:	eb07 0a0e 	add.w	sl, r7, lr
 802045a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802045e:	fb0e be0c 	mla	lr, lr, ip, fp
 8020462:	fa1f fe8e 	uxth.w	lr, lr
 8020466:	f10e 0b01 	add.w	fp, lr, #1
 802046a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802046e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8020472:	fb1b fb04 	smulbb	fp, fp, r4
 8020476:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802047a:	f806 ec06 	strb.w	lr, [r6, #-6]
 802047e:	f89a e001 	ldrb.w	lr, [sl, #1]
 8020482:	fb0e be0c 	mla	lr, lr, ip, fp
 8020486:	fa1f fe8e 	uxth.w	lr, lr
 802048a:	f10e 0b01 	add.w	fp, lr, #1
 802048e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020492:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020496:	f806 ec05 	strb.w	lr, [r6, #-5]
 802049a:	f89a e002 	ldrb.w	lr, [sl, #2]
 802049e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80204a2:	fb1a fa04 	smulbb	sl, sl, r4
 80204a6:	fb0e ae0c 	mla	lr, lr, ip, sl
 80204aa:	fa1f fe8e 	uxth.w	lr, lr
 80204ae:	f10e 0a01 	add.w	sl, lr, #1
 80204b2:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80204b6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80204ba:	f806 ec04 	strb.w	lr, [r6, #-4]
 80204be:	e7b0      	b.n	8020422 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80204c0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80204c4:	d446      	bmi.n	8020554 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80204c6:	45c2      	cmp	sl, r8
 80204c8:	da44      	bge.n	8020554 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80204ca:	ea5f 4e22 	movs.w	lr, r2, asr #16
 80204ce:	d441      	bmi.n	8020554 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80204d0:	9901      	ldr	r1, [sp, #4]
 80204d2:	458e      	cmp	lr, r1
 80204d4:	da3e      	bge.n	8020554 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80204d6:	9902      	ldr	r1, [sp, #8]
 80204d8:	f896 b000 	ldrb.w	fp, [r6]
 80204dc:	fb08 1e0e 	mla	lr, r8, lr, r1
 80204e0:	fb1b fb04 	smulbb	fp, fp, r4
 80204e4:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80204e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80204ec:	eb07 0a0e 	add.w	sl, r7, lr
 80204f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80204f4:	fb0e be0c 	mla	lr, lr, ip, fp
 80204f8:	fa1f fe8e 	uxth.w	lr, lr
 80204fc:	f10e 0b01 	add.w	fp, lr, #1
 8020500:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020504:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020508:	fb1b fb04 	smulbb	fp, fp, r4
 802050c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020510:	f886 e000 	strb.w	lr, [r6]
 8020514:	f89a e001 	ldrb.w	lr, [sl, #1]
 8020518:	fb0e be0c 	mla	lr, lr, ip, fp
 802051c:	fa1f fe8e 	uxth.w	lr, lr
 8020520:	f10e 0b01 	add.w	fp, lr, #1
 8020524:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020528:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802052c:	f886 e001 	strb.w	lr, [r6, #1]
 8020530:	f89a e002 	ldrb.w	lr, [sl, #2]
 8020534:	f896 a002 	ldrb.w	sl, [r6, #2]
 8020538:	fb1a fa04 	smulbb	sl, sl, r4
 802053c:	fb0e ae0c 	mla	lr, lr, ip, sl
 8020540:	fa1f fe8e 	uxth.w	lr, lr
 8020544:	f10e 0a01 	add.w	sl, lr, #1
 8020548:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 802054c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020550:	f886 e002 	strb.w	lr, [r6, #2]
 8020554:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020556:	3603      	adds	r6, #3
 8020558:	f109 39ff 	add.w	r9, r9, #4294967295
 802055c:	4408      	add	r0, r1
 802055e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020560:	440a      	add	r2, r1
 8020562:	e70b      	b.n	802037c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8020564:	b005      	add	sp, #20
 8020566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802056a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802056a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802056e:	b085      	sub	sp, #20
 8020570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020574:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020576:	9203      	str	r2, [sp, #12]
 8020578:	6870      	ldr	r0, [r6, #4]
 802057a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 802057c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020580:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8020584:	9101      	str	r1, [sp, #4]
 8020586:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802058a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 802058e:	fb00 2404 	mla	r4, r0, r4, r2
 8020592:	6832      	ldr	r2, [r6, #0]
 8020594:	686e      	ldr	r6, [r5, #4]
 8020596:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802059a:	3604      	adds	r6, #4
 802059c:	4414      	add	r4, r2
 802059e:	682a      	ldr	r2, [r5, #0]
 80205a0:	9202      	str	r2, [sp, #8]
 80205a2:	9a01      	ldr	r2, [sp, #4]
 80205a4:	2a00      	cmp	r2, #0
 80205a6:	dc03      	bgt.n	80205b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80205a8:	9a03      	ldr	r2, [sp, #12]
 80205aa:	2a00      	cmp	r2, #0
 80205ac:	f340 80b2 	ble.w	8020714 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 80205b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80205b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80205b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80205b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80205bc:	2b00      	cmp	r3, #0
 80205be:	dd0c      	ble.n	80205da <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80205c0:	1405      	asrs	r5, r0, #16
 80205c2:	d405      	bmi.n	80205d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80205c4:	4575      	cmp	r5, lr
 80205c6:	da03      	bge.n	80205d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80205c8:	1415      	asrs	r5, r2, #16
 80205ca:	d401      	bmi.n	80205d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80205cc:	4545      	cmp	r5, r8
 80205ce:	db05      	blt.n	80205dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80205d0:	4460      	add	r0, ip
 80205d2:	443a      	add	r2, r7
 80205d4:	3b01      	subs	r3, #1
 80205d6:	3403      	adds	r4, #3
 80205d8:	e7f0      	b.n	80205bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80205da:	d03d      	beq.n	8020658 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80205dc:	1e5d      	subs	r5, r3, #1
 80205de:	fb0c 0905 	mla	r9, ip, r5, r0
 80205e2:	ea5f 4929 	movs.w	r9, r9, asr #16
 80205e6:	d42c      	bmi.n	8020642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80205e8:	45f1      	cmp	r9, lr
 80205ea:	da2a      	bge.n	8020642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80205ec:	fb07 2505 	mla	r5, r7, r5, r2
 80205f0:	142d      	asrs	r5, r5, #16
 80205f2:	d426      	bmi.n	8020642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80205f4:	4545      	cmp	r5, r8
 80205f6:	da24      	bge.n	8020642 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80205f8:	1ce5      	adds	r5, r4, #3
 80205fa:	469a      	mov	sl, r3
 80205fc:	f1ba 0f00 	cmp.w	sl, #0
 8020600:	f105 0503 	add.w	r5, r5, #3
 8020604:	dd23      	ble.n	802064e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8020606:	ea4f 4922 	mov.w	r9, r2, asr #16
 802060a:	9902      	ldr	r1, [sp, #8]
 802060c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8020610:	443a      	add	r2, r7
 8020612:	fb0e 1909 	mla	r9, lr, r9, r1
 8020616:	4460      	add	r0, ip
 8020618:	f10a 3aff 	add.w	sl, sl, #4294967295
 802061c:	f819 900b 	ldrb.w	r9, [r9, fp]
 8020620:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020624:	eb06 0b09 	add.w	fp, r6, r9
 8020628:	f816 9009 	ldrb.w	r9, [r6, r9]
 802062c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8020630:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020634:	f805 9c05 	strb.w	r9, [r5, #-5]
 8020638:	f89b 9002 	ldrb.w	r9, [fp, #2]
 802063c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8020640:	e7dc      	b.n	80205fc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8020642:	2500      	movs	r5, #0
 8020644:	eba3 0905 	sub.w	r9, r3, r5
 8020648:	f1b9 0f00 	cmp.w	r9, #0
 802064c:	dc3c      	bgt.n	80206c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 802064e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020656:	441c      	add	r4, r3
 8020658:	9b01      	ldr	r3, [sp, #4]
 802065a:	2b00      	cmp	r3, #0
 802065c:	dd5a      	ble.n	8020714 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 802065e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020664:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020668:	eeb0 6a62 	vmov.f32	s12, s5
 802066c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020670:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020678:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802067c:	eeb0 6a43 	vmov.f32	s12, s6
 8020680:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020684:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020688:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802068c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020690:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020694:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020698:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802069c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206a0:	ee12 2a90 	vmov	r2, s5
 80206a4:	eef0 2a47 	vmov.f32	s5, s14
 80206a8:	fb92 fcf3 	sdiv	ip, r2, r3
 80206ac:	ee13 2a10 	vmov	r2, s6
 80206b0:	eeb0 3a67 	vmov.f32	s6, s15
 80206b4:	fb92 f7f3 	sdiv	r7, r2, r3
 80206b8:	9b01      	ldr	r3, [sp, #4]
 80206ba:	9a03      	ldr	r2, [sp, #12]
 80206bc:	3b01      	subs	r3, #1
 80206be:	9301      	str	r3, [sp, #4]
 80206c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80206c2:	bf08      	it	eq
 80206c4:	4613      	moveq	r3, r2
 80206c6:	e76c      	b.n	80205a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80206c8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80206cc:	d41e      	bmi.n	802070c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80206ce:	45f2      	cmp	sl, lr
 80206d0:	da1c      	bge.n	802070c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80206d2:	ea5f 4922 	movs.w	r9, r2, asr #16
 80206d6:	d419      	bmi.n	802070c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80206d8:	45c1      	cmp	r9, r8
 80206da:	da17      	bge.n	802070c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80206dc:	9902      	ldr	r1, [sp, #8]
 80206de:	fb0e 1909 	mla	r9, lr, r9, r1
 80206e2:	f819 900a 	ldrb.w	r9, [r9, sl]
 80206e6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80206ea:	f816 b009 	ldrb.w	fp, [r6, r9]
 80206ee:	eb06 0a09 	add.w	sl, r6, r9
 80206f2:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80206f6:	f804 b009 	strb.w	fp, [r4, r9]
 80206fa:	44a1      	add	r9, r4
 80206fc:	f89a b001 	ldrb.w	fp, [sl, #1]
 8020700:	f889 b001 	strb.w	fp, [r9, #1]
 8020704:	f89a a002 	ldrb.w	sl, [sl, #2]
 8020708:	f889 a002 	strb.w	sl, [r9, #2]
 802070c:	4460      	add	r0, ip
 802070e:	443a      	add	r2, r7
 8020710:	3501      	adds	r5, #1
 8020712:	e797      	b.n	8020644 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8020714:	b005      	add	sp, #20
 8020716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802071a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802071a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802071e:	b087      	sub	sp, #28
 8020720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020724:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8020726:	9204      	str	r2, [sp, #16]
 8020728:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 802072c:	6870      	ldr	r0, [r6, #4]
 802072e:	9205      	str	r2, [sp, #20]
 8020730:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020732:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8020736:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 802073a:	9101      	str	r1, [sp, #4]
 802073c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020740:	fb00 2505 	mla	r5, r0, r5, r2
 8020744:	6832      	ldr	r2, [r6, #0]
 8020746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802074a:	4415      	add	r5, r2
 802074c:	6822      	ldr	r2, [r4, #0]
 802074e:	9202      	str	r2, [sp, #8]
 8020750:	6862      	ldr	r2, [r4, #4]
 8020752:	3204      	adds	r2, #4
 8020754:	9203      	str	r2, [sp, #12]
 8020756:	9a01      	ldr	r2, [sp, #4]
 8020758:	2a00      	cmp	r2, #0
 802075a:	dc03      	bgt.n	8020764 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 802075c:	9a04      	ldr	r2, [sp, #16]
 802075e:	2a00      	cmp	r2, #0
 8020760:	f340 8124 	ble.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8020764:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020766:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 802076a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802076c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020770:	2b00      	cmp	r3, #0
 8020772:	dd0e      	ble.n	8020792 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8020774:	1422      	asrs	r2, r4, #16
 8020776:	d405      	bmi.n	8020784 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020778:	4572      	cmp	r2, lr
 802077a:	da03      	bge.n	8020784 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802077c:	1402      	asrs	r2, r0, #16
 802077e:	d401      	bmi.n	8020784 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8020780:	4542      	cmp	r2, r8
 8020782:	db07      	blt.n	8020794 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020786:	3b01      	subs	r3, #1
 8020788:	3503      	adds	r5, #3
 802078a:	4414      	add	r4, r2
 802078c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802078e:	4410      	add	r0, r2
 8020790:	e7ee      	b.n	8020770 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8020792:	d010      	beq.n	80207b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8020794:	1e5a      	subs	r2, r3, #1
 8020796:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020798:	fb06 4602 	mla	r6, r6, r2, r4
 802079c:	1436      	asrs	r6, r6, #16
 802079e:	d546      	bpl.n	802082e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80207a0:	4699      	mov	r9, r3
 80207a2:	462f      	mov	r7, r5
 80207a4:	f1b9 0f00 	cmp.w	r9, #0
 80207a8:	f300 80a5 	bgt.w	80208f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 80207ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80207b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207b4:	441d      	add	r5, r3
 80207b6:	9b01      	ldr	r3, [sp, #4]
 80207b8:	2b00      	cmp	r3, #0
 80207ba:	f340 80f7 	ble.w	80209ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80207be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80207c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80207c8:	eeb0 6a62 	vmov.f32	s12, s5
 80207cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80207d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207d8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80207dc:	eeb0 6a43 	vmov.f32	s12, s6
 80207e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80207e4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80207e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020800:	ee12 2a90 	vmov	r2, s5
 8020804:	eef0 2a47 	vmov.f32	s5, s14
 8020808:	fb92 f3f3 	sdiv	r3, r2, r3
 802080c:	ee13 2a10 	vmov	r2, s6
 8020810:	9313      	str	r3, [sp, #76]	; 0x4c
 8020812:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020814:	eeb0 3a67 	vmov.f32	s6, s15
 8020818:	fb92 f3f3 	sdiv	r3, r2, r3
 802081c:	9314      	str	r3, [sp, #80]	; 0x50
 802081e:	9b01      	ldr	r3, [sp, #4]
 8020820:	9a04      	ldr	r2, [sp, #16]
 8020822:	3b01      	subs	r3, #1
 8020824:	9301      	str	r3, [sp, #4]
 8020826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020828:	bf08      	it	eq
 802082a:	4613      	moveq	r3, r2
 802082c:	e793      	b.n	8020756 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 802082e:	4576      	cmp	r6, lr
 8020830:	dab6      	bge.n	80207a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8020832:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020834:	fb06 0202 	mla	r2, r6, r2, r0
 8020838:	1412      	asrs	r2, r2, #16
 802083a:	d4b1      	bmi.n	80207a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 802083c:	4542      	cmp	r2, r8
 802083e:	daaf      	bge.n	80207a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8020840:	1cef      	adds	r7, r5, #3
 8020842:	4699      	mov	r9, r3
 8020844:	f1b9 0f00 	cmp.w	r9, #0
 8020848:	ddb0      	ble.n	80207ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802084a:	9902      	ldr	r1, [sp, #8]
 802084c:	1402      	asrs	r2, r0, #16
 802084e:	1426      	asrs	r6, r4, #16
 8020850:	fb0e 1202 	mla	r2, lr, r2, r1
 8020854:	9903      	ldr	r1, [sp, #12]
 8020856:	5d92      	ldrb	r2, [r2, r6]
 8020858:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 802085c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8020860:	d041      	beq.n	80208e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8020862:	9a05      	ldr	r2, [sp, #20]
 8020864:	fa5f fb86 	uxtb.w	fp, r6
 8020868:	fb02 fc0c 	mul.w	ip, r2, ip
 802086c:	f10c 0201 	add.w	r2, ip, #1
 8020870:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8020874:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8020878:	1212      	asrs	r2, r2, #8
 802087a:	fa1f fa82 	uxth.w	sl, r2
 802087e:	43d2      	mvns	r2, r2
 8020880:	fb1b fb0a 	smulbb	fp, fp, sl
 8020884:	b2d2      	uxtb	r2, r2
 8020886:	fb0c bc02 	mla	ip, ip, r2, fp
 802088a:	fa1f fc8c 	uxth.w	ip, ip
 802088e:	f10c 0b01 	add.w	fp, ip, #1
 8020892:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020896:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 802089a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802089e:	fb1b fb0a 	smulbb	fp, fp, sl
 80208a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80208a6:	fb16 fa0a 	smulbb	sl, r6, sl
 80208aa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80208ae:	f807 cc03 	strb.w	ip, [r7, #-3]
 80208b2:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 80208b6:	fb06 aa02 	mla	sl, r6, r2, sl
 80208ba:	fb0c bc02 	mla	ip, ip, r2, fp
 80208be:	fa1f fa8a 	uxth.w	sl, sl
 80208c2:	fa1f fc8c 	uxth.w	ip, ip
 80208c6:	f10a 0601 	add.w	r6, sl, #1
 80208ca:	f10c 0b01 	add.w	fp, ip, #1
 80208ce:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80208d2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80208d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80208da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80208de:	f807 ac01 	strb.w	sl, [r7, #-1]
 80208e2:	f807 cc02 	strb.w	ip, [r7, #-2]
 80208e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80208e8:	3703      	adds	r7, #3
 80208ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80208ee:	4414      	add	r4, r2
 80208f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80208f2:	4410      	add	r0, r2
 80208f4:	e7a6      	b.n	8020844 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80208f6:	1426      	asrs	r6, r4, #16
 80208f8:	d450      	bmi.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80208fa:	4576      	cmp	r6, lr
 80208fc:	da4e      	bge.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80208fe:	1402      	asrs	r2, r0, #16
 8020900:	d44c      	bmi.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020902:	4542      	cmp	r2, r8
 8020904:	da4a      	bge.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020906:	9902      	ldr	r1, [sp, #8]
 8020908:	fb0e 1202 	mla	r2, lr, r2, r1
 802090c:	9903      	ldr	r1, [sp, #12]
 802090e:	5d92      	ldrb	r2, [r2, r6]
 8020910:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8020914:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8020918:	d040      	beq.n	802099c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802091a:	9a05      	ldr	r2, [sp, #20]
 802091c:	fa5f fb86 	uxtb.w	fp, r6
 8020920:	fb02 fc0c 	mul.w	ip, r2, ip
 8020924:	f10c 0201 	add.w	r2, ip, #1
 8020928:	eb02 222c 	add.w	r2, r2, ip, asr #8
 802092c:	f897 c000 	ldrb.w	ip, [r7]
 8020930:	1212      	asrs	r2, r2, #8
 8020932:	fa1f fa82 	uxth.w	sl, r2
 8020936:	43d2      	mvns	r2, r2
 8020938:	fb1b fb0a 	smulbb	fp, fp, sl
 802093c:	b2d2      	uxtb	r2, r2
 802093e:	fb0c bc02 	mla	ip, ip, r2, fp
 8020942:	fa1f fc8c 	uxth.w	ip, ip
 8020946:	f10c 0b01 	add.w	fp, ip, #1
 802094a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802094e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8020952:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020956:	fb1b fb0a 	smulbb	fp, fp, sl
 802095a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802095e:	fb16 fa0a 	smulbb	sl, r6, sl
 8020962:	78be      	ldrb	r6, [r7, #2]
 8020964:	f887 c000 	strb.w	ip, [r7]
 8020968:	f897 c001 	ldrb.w	ip, [r7, #1]
 802096c:	fb06 aa02 	mla	sl, r6, r2, sl
 8020970:	fb0c bc02 	mla	ip, ip, r2, fp
 8020974:	fa1f fa8a 	uxth.w	sl, sl
 8020978:	fa1f fc8c 	uxth.w	ip, ip
 802097c:	f10a 0601 	add.w	r6, sl, #1
 8020980:	f10c 0b01 	add.w	fp, ip, #1
 8020984:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8020988:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802098c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020990:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020994:	f887 a002 	strb.w	sl, [r7, #2]
 8020998:	f887 c001 	strb.w	ip, [r7, #1]
 802099c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802099e:	3703      	adds	r7, #3
 80209a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80209a4:	4414      	add	r4, r2
 80209a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209a8:	4410      	add	r0, r2
 80209aa:	e6fb      	b.n	80207a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80209ac:	b007      	add	sp, #28
 80209ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80209b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209b6:	b085      	sub	sp, #20
 80209b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80209bc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80209be:	9203      	str	r2, [sp, #12]
 80209c0:	6870      	ldr	r0, [r6, #4]
 80209c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80209c4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80209c8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80209cc:	9100      	str	r1, [sp, #0]
 80209ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80209d2:	fb00 2404 	mla	r4, r0, r4, r2
 80209d6:	6832      	ldr	r2, [r6, #0]
 80209d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80209dc:	4414      	add	r4, r2
 80209de:	682a      	ldr	r2, [r5, #0]
 80209e0:	9201      	str	r2, [sp, #4]
 80209e2:	686a      	ldr	r2, [r5, #4]
 80209e4:	3204      	adds	r2, #4
 80209e6:	9202      	str	r2, [sp, #8]
 80209e8:	9a00      	ldr	r2, [sp, #0]
 80209ea:	2a00      	cmp	r2, #0
 80209ec:	dc03      	bgt.n	80209f6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80209ee:	9a03      	ldr	r2, [sp, #12]
 80209f0:	2a00      	cmp	r2, #0
 80209f2:	f340 8131 	ble.w	8020c58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80209f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80209fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80209fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	dd0e      	ble.n	8020a24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020a06:	1405      	asrs	r5, r0, #16
 8020a08:	d405      	bmi.n	8020a16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020a0a:	4575      	cmp	r5, lr
 8020a0c:	da03      	bge.n	8020a16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020a0e:	1415      	asrs	r5, r2, #16
 8020a10:	d401      	bmi.n	8020a16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020a12:	4545      	cmp	r5, r8
 8020a14:	db07      	blt.n	8020a26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8020a16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020a18:	3b01      	subs	r3, #1
 8020a1a:	3403      	adds	r4, #3
 8020a1c:	4428      	add	r0, r5
 8020a1e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020a20:	442a      	add	r2, r5
 8020a22:	e7ee      	b.n	8020a02 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8020a24:	d06f      	beq.n	8020b06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8020a26:	1e5d      	subs	r5, r3, #1
 8020a28:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020a2a:	fb06 0605 	mla	r6, r6, r5, r0
 8020a2e:	1436      	asrs	r6, r6, #16
 8020a30:	d460      	bmi.n	8020af4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020a32:	4576      	cmp	r6, lr
 8020a34:	da5e      	bge.n	8020af4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020a36:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020a38:	fb06 2505 	mla	r5, r6, r5, r2
 8020a3c:	142d      	asrs	r5, r5, #16
 8020a3e:	d459      	bmi.n	8020af4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020a40:	4545      	cmp	r5, r8
 8020a42:	da57      	bge.n	8020af4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8020a44:	1ce5      	adds	r5, r4, #3
 8020a46:	469a      	mov	sl, r3
 8020a48:	f1ba 0f00 	cmp.w	sl, #0
 8020a4c:	dd56      	ble.n	8020afc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 8020a4e:	9901      	ldr	r1, [sp, #4]
 8020a50:	1416      	asrs	r6, r2, #16
 8020a52:	1407      	asrs	r7, r0, #16
 8020a54:	fb0e 1606 	mla	r6, lr, r6, r1
 8020a58:	9902      	ldr	r1, [sp, #8]
 8020a5a:	5df6      	ldrb	r6, [r6, r7]
 8020a5c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8020a60:	0e37      	lsrs	r7, r6, #24
 8020a62:	2fff      	cmp	r7, #255	; 0xff
 8020a64:	f000 80ef 	beq.w	8020c46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8020a68:	fa5f fc87 	uxtb.w	ip, r7
 8020a6c:	b3d7      	cbz	r7, 8020ae4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8020a6e:	fa1f f78c 	uxth.w	r7, ip
 8020a72:	ea6f 0c0c 	mvn.w	ip, ip
 8020a76:	fa5f fb86 	uxtb.w	fp, r6
 8020a7a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8020a7e:	fa5f fc8c 	uxtb.w	ip, ip
 8020a82:	fb1b fb07 	smulbb	fp, fp, r7
 8020a86:	fb09 b90c 	mla	r9, r9, ip, fp
 8020a8a:	fa1f f989 	uxth.w	r9, r9
 8020a8e:	f109 0b01 	add.w	fp, r9, #1
 8020a92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020a96:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8020a9a:	fb1b fb0c 	smulbb	fp, fp, ip
 8020a9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020aa2:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020aa6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8020aaa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8020aae:	fb09 b907 	mla	r9, r9, r7, fp
 8020ab2:	fa1f f989 	uxth.w	r9, r9
 8020ab6:	f109 0b01 	add.w	fp, r9, #1
 8020aba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020abe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ac2:	f805 9c02 	strb.w	r9, [r5, #-2]
 8020ac6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8020aca:	fb19 fc0c 	smulbb	ip, r9, ip
 8020ace:	fb06 c607 	mla	r6, r6, r7, ip
 8020ad2:	b2b6      	uxth	r6, r6
 8020ad4:	f106 0c01 	add.w	ip, r6, #1
 8020ad8:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8020adc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020ae0:	f805 cc01 	strb.w	ip, [r5, #-1]
 8020ae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020ae6:	3503      	adds	r5, #3
 8020ae8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020aec:	4408      	add	r0, r1
 8020aee:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020af0:	440a      	add	r2, r1
 8020af2:	e7a9      	b.n	8020a48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8020af4:	2600      	movs	r6, #0
 8020af6:	1b9d      	subs	r5, r3, r6
 8020af8:	2d00      	cmp	r5, #0
 8020afa:	dc40      	bgt.n	8020b7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8020afc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b04:	441c      	add	r4, r3
 8020b06:	9b00      	ldr	r3, [sp, #0]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f340 80a5 	ble.w	8020c58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 8020b0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b18:	eeb0 6a62 	vmov.f32	s12, s5
 8020b1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b28:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020b2c:	eeb0 6a43 	vmov.f32	s12, s6
 8020b30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b34:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020b38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b50:	ee12 2a90 	vmov	r2, s5
 8020b54:	eef0 2a47 	vmov.f32	s5, s14
 8020b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b5c:	ee13 2a10 	vmov	r2, s6
 8020b60:	9311      	str	r3, [sp, #68]	; 0x44
 8020b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b64:	eeb0 3a67 	vmov.f32	s6, s15
 8020b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b6c:	9312      	str	r3, [sp, #72]	; 0x48
 8020b6e:	9b00      	ldr	r3, [sp, #0]
 8020b70:	9a03      	ldr	r2, [sp, #12]
 8020b72:	3b01      	subs	r3, #1
 8020b74:	9300      	str	r3, [sp, #0]
 8020b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b78:	bf08      	it	eq
 8020b7a:	4613      	moveq	r3, r2
 8020b7c:	e734      	b.n	80209e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8020b7e:	1407      	asrs	r7, r0, #16
 8020b80:	d450      	bmi.n	8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020b82:	4577      	cmp	r7, lr
 8020b84:	da4e      	bge.n	8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020b86:	1415      	asrs	r5, r2, #16
 8020b88:	d44c      	bmi.n	8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020b8a:	4545      	cmp	r5, r8
 8020b8c:	da4a      	bge.n	8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020b8e:	9901      	ldr	r1, [sp, #4]
 8020b90:	fb0e 1505 	mla	r5, lr, r5, r1
 8020b94:	9902      	ldr	r1, [sp, #8]
 8020b96:	5ded      	ldrb	r5, [r5, r7]
 8020b98:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8020b9c:	0e2f      	lsrs	r7, r5, #24
 8020b9e:	2fff      	cmp	r7, #255	; 0xff
 8020ba0:	d046      	beq.n	8020c30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8020ba2:	fa5f f987 	uxtb.w	r9, r7
 8020ba6:	b3ef      	cbz	r7, 8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020ba8:	fa1f fc89 	uxth.w	ip, r9
 8020bac:	ea6f 0909 	mvn.w	r9, r9
 8020bb0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020bb4:	fa5f fb85 	uxtb.w	fp, r5
 8020bb8:	f814 a007 	ldrb.w	sl, [r4, r7]
 8020bbc:	fa5f f989 	uxtb.w	r9, r9
 8020bc0:	fb1b fb0c 	smulbb	fp, fp, ip
 8020bc4:	fb0a ba09 	mla	sl, sl, r9, fp
 8020bc8:	fa1f fa8a 	uxth.w	sl, sl
 8020bcc:	f10a 0b01 	add.w	fp, sl, #1
 8020bd0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020bd4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020bd8:	f804 a007 	strb.w	sl, [r4, r7]
 8020bdc:	4427      	add	r7, r4
 8020bde:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020be2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8020be6:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020bea:	fb1b fb09 	smulbb	fp, fp, r9
 8020bee:	fb0a ba0c 	mla	sl, sl, ip, fp
 8020bf2:	fa1f fa8a 	uxth.w	sl, sl
 8020bf6:	f10a 0b01 	add.w	fp, sl, #1
 8020bfa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8020bfe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020c02:	f887 a001 	strb.w	sl, [r7, #1]
 8020c06:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020c0a:	fb1a f909 	smulbb	r9, sl, r9
 8020c0e:	fb05 950c 	mla	r5, r5, ip, r9
 8020c12:	b2ad      	uxth	r5, r5
 8020c14:	f105 0901 	add.w	r9, r5, #1
 8020c18:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8020c1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020c20:	f887 9002 	strb.w	r9, [r7, #2]
 8020c24:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020c26:	3601      	adds	r6, #1
 8020c28:	4408      	add	r0, r1
 8020c2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020c2c:	440a      	add	r2, r1
 8020c2e:	e762      	b.n	8020af6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8020c30:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8020c34:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8020c38:	55e5      	strb	r5, [r4, r7]
 8020c3a:	4427      	add	r7, r4
 8020c3c:	0c2d      	lsrs	r5, r5, #16
 8020c3e:	f887 c001 	strb.w	ip, [r7, #1]
 8020c42:	70bd      	strb	r5, [r7, #2]
 8020c44:	e7ee      	b.n	8020c24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8020c46:	0a37      	lsrs	r7, r6, #8
 8020c48:	f805 6c03 	strb.w	r6, [r5, #-3]
 8020c4c:	0c36      	lsrs	r6, r6, #16
 8020c4e:	f805 7c02 	strb.w	r7, [r5, #-2]
 8020c52:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020c56:	e745      	b.n	8020ae4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8020c58:	b005      	add	sp, #20
 8020c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8020c64:	9201      	str	r2, [sp, #4]
 8020c66:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8020c6a:	6870      	ldr	r0, [r6, #4]
 8020c6c:	9200      	str	r2, [sp, #0]
 8020c6e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8020c72:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8020c76:	fa1f fc85 	uxth.w	ip, r5
 8020c7a:	43ed      	mvns	r5, r5
 8020c7c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020c80:	b2ed      	uxtb	r5, r5
 8020c82:	fb00 2404 	mla	r4, r0, r4, r2
 8020c86:	6832      	ldr	r2, [r6, #0]
 8020c88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020c8c:	4414      	add	r4, r2
 8020c8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020c90:	f8d2 8000 	ldr.w	r8, [r2]
 8020c94:	2900      	cmp	r1, #0
 8020c96:	dc03      	bgt.n	8020ca0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8020c98:	9a01      	ldr	r2, [sp, #4]
 8020c9a:	2a00      	cmp	r2, #0
 8020c9c:	f340 8104 	ble.w	8020ea8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8020ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020ca2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ca8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	dd0f      	ble.n	8020cd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8020cb0:	1406      	asrs	r6, r0, #16
 8020cb2:	d406      	bmi.n	8020cc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020cb4:	4576      	cmp	r6, lr
 8020cb6:	da04      	bge.n	8020cc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020cb8:	1416      	asrs	r6, r2, #16
 8020cba:	d402      	bmi.n	8020cc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8020cbc:	9f00      	ldr	r7, [sp, #0]
 8020cbe:	42be      	cmp	r6, r7
 8020cc0:	db07      	blt.n	8020cd2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8020cc2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020cc4:	3b01      	subs	r3, #1
 8020cc6:	3403      	adds	r4, #3
 8020cc8:	4430      	add	r0, r6
 8020cca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020ccc:	4432      	add	r2, r6
 8020cce:	e7ed      	b.n	8020cac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8020cd0:	d05f      	beq.n	8020d92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8020cd2:	1e5e      	subs	r6, r3, #1
 8020cd4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020cd6:	fb07 0706 	mla	r7, r7, r6, r0
 8020cda:	143f      	asrs	r7, r7, #16
 8020cdc:	d450      	bmi.n	8020d80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8020cde:	4577      	cmp	r7, lr
 8020ce0:	da4e      	bge.n	8020d80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8020ce2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020ce4:	fb07 2606 	mla	r6, r7, r6, r2
 8020ce8:	1436      	asrs	r6, r6, #16
 8020cea:	d449      	bmi.n	8020d80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8020cec:	9f00      	ldr	r7, [sp, #0]
 8020cee:	42be      	cmp	r6, r7
 8020cf0:	da46      	bge.n	8020d80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8020cf2:	1ce6      	adds	r6, r4, #3
 8020cf4:	4699      	mov	r9, r3
 8020cf6:	f1b9 0f00 	cmp.w	r9, #0
 8020cfa:	f106 0603 	add.w	r6, r6, #3
 8020cfe:	dd43      	ble.n	8020d88 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8020d00:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020d04:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8020d08:	1417      	asrs	r7, r2, #16
 8020d0a:	f109 39ff 	add.w	r9, r9, #4294967295
 8020d0e:	fb1b fb05 	smulbb	fp, fp, r5
 8020d12:	fb0e a707 	mla	r7, lr, r7, sl
 8020d16:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020d1a:	eb08 0a07 	add.w	sl, r8, r7
 8020d1e:	f818 7007 	ldrb.w	r7, [r8, r7]
 8020d22:	fb07 b70c 	mla	r7, r7, ip, fp
 8020d26:	b2bf      	uxth	r7, r7
 8020d28:	f107 0b01 	add.w	fp, r7, #1
 8020d2c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020d30:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8020d34:	fb1b fb05 	smulbb	fp, fp, r5
 8020d38:	123f      	asrs	r7, r7, #8
 8020d3a:	f806 7c06 	strb.w	r7, [r6, #-6]
 8020d3e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8020d42:	fb07 b70c 	mla	r7, r7, ip, fp
 8020d46:	b2bf      	uxth	r7, r7
 8020d48:	f107 0b01 	add.w	fp, r7, #1
 8020d4c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8020d50:	123f      	asrs	r7, r7, #8
 8020d52:	f806 7c05 	strb.w	r7, [r6, #-5]
 8020d56:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8020d5a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8020d5e:	fb1a fa05 	smulbb	sl, sl, r5
 8020d62:	fb07 a70c 	mla	r7, r7, ip, sl
 8020d66:	b2bf      	uxth	r7, r7
 8020d68:	f107 0a01 	add.w	sl, r7, #1
 8020d6c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8020d70:	123f      	asrs	r7, r7, #8
 8020d72:	f806 7c04 	strb.w	r7, [r6, #-4]
 8020d76:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020d78:	4438      	add	r0, r7
 8020d7a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020d7c:	443a      	add	r2, r7
 8020d7e:	e7ba      	b.n	8020cf6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020d80:	2700      	movs	r7, #0
 8020d82:	1bde      	subs	r6, r3, r7
 8020d84:	2e00      	cmp	r6, #0
 8020d86:	dc3f      	bgt.n	8020e08 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8020d88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020d8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d90:	441c      	add	r4, r3
 8020d92:	2900      	cmp	r1, #0
 8020d94:	f340 8088 	ble.w	8020ea8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8020d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020da2:	3901      	subs	r1, #1
 8020da4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020da8:	eef0 6a62 	vmov.f32	s13, s5
 8020dac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020db0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020db4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020db8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8020dbc:	eef0 6a43 	vmov.f32	s13, s6
 8020dc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020dc4:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8020dc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020dcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020dd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020dd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ddc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020de0:	ee12 2a90 	vmov	r2, s5
 8020de4:	eef0 2a47 	vmov.f32	s5, s14
 8020de8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dec:	ee13 2a10 	vmov	r2, s6
 8020df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8020df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020df4:	eeb0 3a67 	vmov.f32	s6, s15
 8020df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dfc:	9a01      	ldr	r2, [sp, #4]
 8020dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8020e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e02:	bf08      	it	eq
 8020e04:	4613      	moveq	r3, r2
 8020e06:	e745      	b.n	8020c94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8020e08:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8020e0c:	d446      	bmi.n	8020e9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020e0e:	45f2      	cmp	sl, lr
 8020e10:	da44      	bge.n	8020e9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020e12:	ea5f 4922 	movs.w	r9, r2, asr #16
 8020e16:	d441      	bmi.n	8020e9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020e18:	9e00      	ldr	r6, [sp, #0]
 8020e1a:	45b1      	cmp	r9, r6
 8020e1c:	da3e      	bge.n	8020e9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8020e1e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8020e22:	fb0e a909 	mla	r9, lr, r9, sl
 8020e26:	f814 b006 	ldrb.w	fp, [r4, r6]
 8020e2a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8020e2e:	fb1b fb05 	smulbb	fp, fp, r5
 8020e32:	eb08 0a09 	add.w	sl, r8, r9
 8020e36:	f818 9009 	ldrb.w	r9, [r8, r9]
 8020e3a:	fb09 b90c 	mla	r9, r9, ip, fp
 8020e3e:	fa1f f989 	uxth.w	r9, r9
 8020e42:	f109 0b01 	add.w	fp, r9, #1
 8020e46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020e4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e4e:	f804 9006 	strb.w	r9, [r4, r6]
 8020e52:	4426      	add	r6, r4
 8020e54:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8020e58:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020e5c:	fb1b fb05 	smulbb	fp, fp, r5
 8020e60:	fb09 b90c 	mla	r9, r9, ip, fp
 8020e64:	fa1f f989 	uxth.w	r9, r9
 8020e68:	f109 0b01 	add.w	fp, r9, #1
 8020e6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8020e70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e74:	f886 9001 	strb.w	r9, [r6, #1]
 8020e78:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8020e7c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8020e80:	fb1a fa05 	smulbb	sl, sl, r5
 8020e84:	fb09 a90c 	mla	r9, r9, ip, sl
 8020e88:	fa1f f989 	uxth.w	r9, r9
 8020e8c:	f109 0a01 	add.w	sl, r9, #1
 8020e90:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020e94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e98:	f886 9002 	strb.w	r9, [r6, #2]
 8020e9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8020e9e:	3701      	adds	r7, #1
 8020ea0:	4430      	add	r0, r6
 8020ea2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020ea4:	4432      	add	r2, r6
 8020ea6:	e76c      	b.n	8020d82 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8020ea8:	b003      	add	sp, #12
 8020eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020eae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020eae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020eb8:	9201      	str	r2, [sp, #4]
 8020eba:	6868      	ldr	r0, [r5, #4]
 8020ebc:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8020ec0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8020ec4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8020ec8:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8020ecc:	fb00 2404 	mla	r4, r0, r4, r2
 8020ed0:	682a      	ldr	r2, [r5, #0]
 8020ed2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ed6:	4414      	add	r4, r2
 8020ed8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8020eda:	f8d2 9000 	ldr.w	r9, [r2]
 8020ede:	2900      	cmp	r1, #0
 8020ee0:	dc03      	bgt.n	8020eea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8020ee2:	9a01      	ldr	r2, [sp, #4]
 8020ee4:	2a00      	cmp	r2, #0
 8020ee6:	f340 80a8 	ble.w	802103a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020eea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020eec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ef2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	dd0c      	ble.n	8020f14 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8020efa:	1405      	asrs	r5, r0, #16
 8020efc:	d405      	bmi.n	8020f0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020efe:	4565      	cmp	r5, ip
 8020f00:	da03      	bge.n	8020f0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020f02:	1415      	asrs	r5, r2, #16
 8020f04:	d401      	bmi.n	8020f0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8020f06:	4575      	cmp	r5, lr
 8020f08:	db05      	blt.n	8020f16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020f0a:	4438      	add	r0, r7
 8020f0c:	4432      	add	r2, r6
 8020f0e:	3b01      	subs	r3, #1
 8020f10:	3403      	adds	r4, #3
 8020f12:	e7f0      	b.n	8020ef6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8020f14:	d03a      	beq.n	8020f8c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8020f16:	1e5d      	subs	r5, r3, #1
 8020f18:	fb07 0805 	mla	r8, r7, r5, r0
 8020f1c:	ea5f 4828 	movs.w	r8, r8, asr #16
 8020f20:	d429      	bmi.n	8020f76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020f22:	45e0      	cmp	r8, ip
 8020f24:	da27      	bge.n	8020f76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020f26:	fb06 2505 	mla	r5, r6, r5, r2
 8020f2a:	142d      	asrs	r5, r5, #16
 8020f2c:	d423      	bmi.n	8020f76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020f2e:	4575      	cmp	r5, lr
 8020f30:	da21      	bge.n	8020f76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8020f32:	f104 0803 	add.w	r8, r4, #3
 8020f36:	469a      	mov	sl, r3
 8020f38:	f1ba 0f00 	cmp.w	sl, #0
 8020f3c:	f108 0803 	add.w	r8, r8, #3
 8020f40:	dd1f      	ble.n	8020f82 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8020f42:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8020f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020f4a:	1415      	asrs	r5, r2, #16
 8020f4c:	4438      	add	r0, r7
 8020f4e:	4432      	add	r2, r6
 8020f50:	fb0c b505 	mla	r5, ip, r5, fp
 8020f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f58:	eb09 0b05 	add.w	fp, r9, r5
 8020f5c:	f819 5005 	ldrb.w	r5, [r9, r5]
 8020f60:	f808 5c06 	strb.w	r5, [r8, #-6]
 8020f64:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8020f68:	f808 5c05 	strb.w	r5, [r8, #-5]
 8020f6c:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8020f70:	f808 5c04 	strb.w	r5, [r8, #-4]
 8020f74:	e7e0      	b.n	8020f38 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8020f76:	2500      	movs	r5, #0
 8020f78:	eba3 0805 	sub.w	r8, r3, r5
 8020f7c:	f1b8 0f00 	cmp.w	r8, #0
 8020f80:	dc38      	bgt.n	8020ff4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 8020f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f8a:	441c      	add	r4, r3
 8020f8c:	2900      	cmp	r1, #0
 8020f8e:	dd54      	ble.n	802103a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020f90:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f9a:	3901      	subs	r1, #1
 8020f9c:	eeb0 6a62 	vmov.f32	s12, s5
 8020fa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020fa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020fa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fac:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8020fb0:	eeb0 6a43 	vmov.f32	s12, s6
 8020fb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fb8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8020fbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020fc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020fc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020fc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020fcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020fd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fd4:	ee12 2a90 	vmov	r2, s5
 8020fd8:	eef0 2a47 	vmov.f32	s5, s14
 8020fdc:	fb92 f7f3 	sdiv	r7, r2, r3
 8020fe0:	ee13 2a10 	vmov	r2, s6
 8020fe4:	eeb0 3a67 	vmov.f32	s6, s15
 8020fe8:	fb92 f6f3 	sdiv	r6, r2, r3
 8020fec:	9a01      	ldr	r2, [sp, #4]
 8020fee:	bf08      	it	eq
 8020ff0:	4613      	moveq	r3, r2
 8020ff2:	e774      	b.n	8020ede <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8020ff4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8020ff8:	d41b      	bmi.n	8021032 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8020ffa:	45e2      	cmp	sl, ip
 8020ffc:	da19      	bge.n	8021032 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8020ffe:	ea5f 4822 	movs.w	r8, r2, asr #16
 8021002:	d416      	bmi.n	8021032 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021004:	45f0      	cmp	r8, lr
 8021006:	da14      	bge.n	8021032 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021008:	fb0c a808 	mla	r8, ip, r8, sl
 802100c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021010:	f819 b008 	ldrb.w	fp, [r9, r8]
 8021014:	eb09 0a08 	add.w	sl, r9, r8
 8021018:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 802101c:	f804 b008 	strb.w	fp, [r4, r8]
 8021020:	44a0      	add	r8, r4
 8021022:	f89a b001 	ldrb.w	fp, [sl, #1]
 8021026:	f888 b001 	strb.w	fp, [r8, #1]
 802102a:	f89a a002 	ldrb.w	sl, [sl, #2]
 802102e:	f888 a002 	strb.w	sl, [r8, #2]
 8021032:	4438      	add	r0, r7
 8021034:	4432      	add	r2, r6
 8021036:	3501      	adds	r5, #1
 8021038:	e79e      	b.n	8020f78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 802103a:	b003      	add	sp, #12
 802103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021040 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021044:	b085      	sub	sp, #20
 8021046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802104a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802104c:	9202      	str	r2, [sp, #8]
 802104e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021052:	6860      	ldr	r0, [r4, #4]
 8021054:	9203      	str	r2, [sp, #12]
 8021056:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802105a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 802105e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021062:	fb00 2505 	mla	r5, r0, r5, r2
 8021066:	6822      	ldr	r2, [r4, #0]
 8021068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802106c:	4415      	add	r5, r2
 802106e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021070:	6812      	ldr	r2, [r2, #0]
 8021072:	9201      	str	r2, [sp, #4]
 8021074:	2900      	cmp	r1, #0
 8021076:	dc03      	bgt.n	8021080 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8021078:	9a02      	ldr	r2, [sp, #8]
 802107a:	2a00      	cmp	r2, #0
 802107c:	f340 811c 	ble.w	80212b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021082:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021088:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802108c:	2b00      	cmp	r3, #0
 802108e:	dd0e      	ble.n	80210ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021090:	1422      	asrs	r2, r4, #16
 8021092:	d405      	bmi.n	80210a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021094:	4572      	cmp	r2, lr
 8021096:	da03      	bge.n	80210a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021098:	1402      	asrs	r2, r0, #16
 802109a:	d401      	bmi.n	80210a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 802109c:	4542      	cmp	r2, r8
 802109e:	db07      	blt.n	80210b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80210a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80210a2:	3b01      	subs	r3, #1
 80210a4:	3503      	adds	r5, #3
 80210a6:	4414      	add	r4, r2
 80210a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80210aa:	4410      	add	r0, r2
 80210ac:	e7ee      	b.n	802108c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80210ae:	d072      	beq.n	8021196 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 80210b0:	1e5a      	subs	r2, r3, #1
 80210b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80210b4:	fb06 4602 	mla	r6, r6, r2, r4
 80210b8:	1436      	asrs	r6, r6, #16
 80210ba:	d461      	bmi.n	8021180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80210bc:	4576      	cmp	r6, lr
 80210be:	da5f      	bge.n	8021180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80210c0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80210c2:	fb06 0202 	mla	r2, r6, r2, r0
 80210c6:	1412      	asrs	r2, r2, #16
 80210c8:	d45a      	bmi.n	8021180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80210ca:	4542      	cmp	r2, r8
 80210cc:	da58      	bge.n	8021180 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 80210ce:	1cef      	adds	r7, r5, #3
 80210d0:	4699      	mov	r9, r3
 80210d2:	f1b9 0f00 	cmp.w	r9, #0
 80210d6:	dd59      	ble.n	802118c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80210d8:	1426      	asrs	r6, r4, #16
 80210da:	1402      	asrs	r2, r0, #16
 80210dc:	fb0e 6202 	mla	r2, lr, r2, r6
 80210e0:	9e01      	ldr	r6, [sp, #4]
 80210e2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80210e6:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80210ea:	d041      	beq.n	8021170 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80210ec:	9a03      	ldr	r2, [sp, #12]
 80210ee:	fa5f fb86 	uxtb.w	fp, r6
 80210f2:	fb02 fc0c 	mul.w	ip, r2, ip
 80210f6:	f10c 0201 	add.w	r2, ip, #1
 80210fa:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80210fe:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8021102:	1212      	asrs	r2, r2, #8
 8021104:	fa1f fa82 	uxth.w	sl, r2
 8021108:	43d2      	mvns	r2, r2
 802110a:	fb1b fb0a 	smulbb	fp, fp, sl
 802110e:	b2d2      	uxtb	r2, r2
 8021110:	fb0c bc02 	mla	ip, ip, r2, fp
 8021114:	fa1f fc8c 	uxth.w	ip, ip
 8021118:	f10c 0b01 	add.w	fp, ip, #1
 802111c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021120:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021124:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021128:	fb1b fb0a 	smulbb	fp, fp, sl
 802112c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021130:	fb16 fa0a 	smulbb	sl, r6, sl
 8021134:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021138:	f807 cc03 	strb.w	ip, [r7, #-3]
 802113c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8021140:	fb06 aa02 	mla	sl, r6, r2, sl
 8021144:	fb0c bc02 	mla	ip, ip, r2, fp
 8021148:	fa1f fa8a 	uxth.w	sl, sl
 802114c:	fa1f fc8c 	uxth.w	ip, ip
 8021150:	f10a 0601 	add.w	r6, sl, #1
 8021154:	f10c 0b01 	add.w	fp, ip, #1
 8021158:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 802115c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021160:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021164:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021168:	f807 ac01 	strb.w	sl, [r7, #-1]
 802116c:	f807 cc02 	strb.w	ip, [r7, #-2]
 8021170:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021172:	3703      	adds	r7, #3
 8021174:	f109 39ff 	add.w	r9, r9, #4294967295
 8021178:	4414      	add	r4, r2
 802117a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802117c:	4410      	add	r0, r2
 802117e:	e7a8      	b.n	80210d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021180:	f04f 0c00 	mov.w	ip, #0
 8021184:	eba3 020c 	sub.w	r2, r3, ip
 8021188:	2a00      	cmp	r2, #0
 802118a:	dc3d      	bgt.n	8021208 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 802118c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021190:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021194:	441d      	add	r5, r3
 8021196:	2900      	cmp	r1, #0
 8021198:	f340 808e 	ble.w	80212b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802119c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80211a6:	3901      	subs	r1, #1
 80211a8:	eeb0 6a62 	vmov.f32	s12, s5
 80211ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80211b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80211b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80211bc:	eeb0 6a43 	vmov.f32	s12, s6
 80211c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211c4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80211c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211e0:	ee12 2a90 	vmov	r2, s5
 80211e4:	eef0 2a47 	vmov.f32	s5, s14
 80211e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80211ec:	ee13 2a10 	vmov	r2, s6
 80211f0:	9311      	str	r3, [sp, #68]	; 0x44
 80211f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211f4:	eeb0 3a67 	vmov.f32	s6, s15
 80211f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80211fc:	9a02      	ldr	r2, [sp, #8]
 80211fe:	9312      	str	r3, [sp, #72]	; 0x48
 8021200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021202:	bf08      	it	eq
 8021204:	4613      	moveq	r3, r2
 8021206:	e735      	b.n	8021074 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8021208:	1426      	asrs	r6, r4, #16
 802120a:	d44e      	bmi.n	80212aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 802120c:	4576      	cmp	r6, lr
 802120e:	da4c      	bge.n	80212aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021210:	1402      	asrs	r2, r0, #16
 8021212:	d44a      	bmi.n	80212aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021214:	4542      	cmp	r2, r8
 8021216:	da48      	bge.n	80212aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021218:	fb0e 6202 	mla	r2, lr, r2, r6
 802121c:	9e01      	ldr	r6, [sp, #4]
 802121e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8021222:	0e3a      	lsrs	r2, r7, #24
 8021224:	d041      	beq.n	80212aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021226:	9e03      	ldr	r6, [sp, #12]
 8021228:	fa5f fb87 	uxtb.w	fp, r7
 802122c:	4372      	muls	r2, r6
 802122e:	1c56      	adds	r6, r2, #1
 8021230:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021234:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8021238:	1212      	asrs	r2, r2, #8
 802123a:	f815 9006 	ldrb.w	r9, [r5, r6]
 802123e:	fa1f fa82 	uxth.w	sl, r2
 8021242:	43d2      	mvns	r2, r2
 8021244:	fb1b fb0a 	smulbb	fp, fp, sl
 8021248:	b2d2      	uxtb	r2, r2
 802124a:	fb09 b902 	mla	r9, r9, r2, fp
 802124e:	fa1f f989 	uxth.w	r9, r9
 8021252:	f109 0b01 	add.w	fp, r9, #1
 8021256:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802125a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802125e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8021262:	fb1b fb0a 	smulbb	fp, fp, sl
 8021266:	ea4f 2929 	mov.w	r9, r9, asr #8
 802126a:	fb17 fa0a 	smulbb	sl, r7, sl
 802126e:	f805 9006 	strb.w	r9, [r5, r6]
 8021272:	442e      	add	r6, r5
 8021274:	78b7      	ldrb	r7, [r6, #2]
 8021276:	f896 9001 	ldrb.w	r9, [r6, #1]
 802127a:	fb07 aa02 	mla	sl, r7, r2, sl
 802127e:	fb09 b902 	mla	r9, r9, r2, fp
 8021282:	fa1f fa8a 	uxth.w	sl, sl
 8021286:	fa1f f989 	uxth.w	r9, r9
 802128a:	f10a 0701 	add.w	r7, sl, #1
 802128e:	f109 0b01 	add.w	fp, r9, #1
 8021292:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021296:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802129a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802129e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80212a2:	f886 a002 	strb.w	sl, [r6, #2]
 80212a6:	f886 9001 	strb.w	r9, [r6, #1]
 80212aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80212ac:	f10c 0c01 	add.w	ip, ip, #1
 80212b0:	4414      	add	r4, r2
 80212b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80212b4:	4410      	add	r0, r2
 80212b6:	e765      	b.n	8021184 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 80212b8:	b005      	add	sp, #20
 80212ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080212be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80212be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c2:	b085      	sub	sp, #20
 80212c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80212c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212ca:	9203      	str	r2, [sp, #12]
 80212cc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80212d0:	6860      	ldr	r0, [r4, #4]
 80212d2:	9201      	str	r2, [sp, #4]
 80212d4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80212d8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80212dc:	fb00 2505 	mla	r5, r0, r5, r2
 80212e0:	6822      	ldr	r2, [r4, #0]
 80212e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212e6:	4415      	add	r5, r2
 80212e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80212ea:	6812      	ldr	r2, [r2, #0]
 80212ec:	9202      	str	r2, [sp, #8]
 80212ee:	2900      	cmp	r1, #0
 80212f0:	dc03      	bgt.n	80212fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80212f2:	9a03      	ldr	r2, [sp, #12]
 80212f4:	2a00      	cmp	r2, #0
 80212f6:	f340 8122 	ble.w	802153e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80212fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80212fc:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021300:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021302:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021306:	2b00      	cmp	r3, #0
 8021308:	dd0f      	ble.n	802132a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802130a:	1422      	asrs	r2, r4, #16
 802130c:	d406      	bmi.n	802131c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 802130e:	4572      	cmp	r2, lr
 8021310:	da04      	bge.n	802131c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8021312:	1402      	asrs	r2, r0, #16
 8021314:	d402      	bmi.n	802131c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8021316:	9e01      	ldr	r6, [sp, #4]
 8021318:	42b2      	cmp	r2, r6
 802131a:	db07      	blt.n	802132c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802131c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802131e:	3b01      	subs	r3, #1
 8021320:	3503      	adds	r5, #3
 8021322:	4414      	add	r4, r2
 8021324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021326:	4410      	add	r0, r2
 8021328:	e7ed      	b.n	8021306 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 802132a:	d06e      	beq.n	802140a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 802132c:	1e5a      	subs	r2, r3, #1
 802132e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021330:	fb06 4602 	mla	r6, r6, r2, r4
 8021334:	1436      	asrs	r6, r6, #16
 8021336:	d45d      	bmi.n	80213f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8021338:	4576      	cmp	r6, lr
 802133a:	da5b      	bge.n	80213f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 802133c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802133e:	fb06 0202 	mla	r2, r6, r2, r0
 8021342:	1412      	asrs	r2, r2, #16
 8021344:	d456      	bmi.n	80213f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8021346:	9e01      	ldr	r6, [sp, #4]
 8021348:	42b2      	cmp	r2, r6
 802134a:	da53      	bge.n	80213f4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 802134c:	1cee      	adds	r6, r5, #3
 802134e:	469a      	mov	sl, r3
 8021350:	f1ba 0f00 	cmp.w	sl, #0
 8021354:	dd54      	ble.n	8021400 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021356:	1427      	asrs	r7, r4, #16
 8021358:	1402      	asrs	r2, r0, #16
 802135a:	fb0e 7202 	mla	r2, lr, r2, r7
 802135e:	9f02      	ldr	r7, [sp, #8]
 8021360:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8021364:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8021368:	d03c      	beq.n	80213e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 802136a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802136e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8021372:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8021376:	fa5f f28c 	uxtb.w	r2, ip
 802137a:	b2ff      	uxtb	r7, r7
 802137c:	f000 80d8 	beq.w	8021530 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021380:	fa1f f882 	uxth.w	r8, r2
 8021384:	43d2      	mvns	r2, r2
 8021386:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 802138a:	fb17 f708 	smulbb	r7, r7, r8
 802138e:	b2d2      	uxtb	r2, r2
 8021390:	fb19 f908 	smulbb	r9, r9, r8
 8021394:	fb0c 7702 	mla	r7, ip, r2, r7
 8021398:	fb1b f808 	smulbb	r8, fp, r8
 802139c:	b2bf      	uxth	r7, r7
 802139e:	f107 0c01 	add.w	ip, r7, #1
 80213a2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80213a6:	123f      	asrs	r7, r7, #8
 80213a8:	f806 7c03 	strb.w	r7, [r6, #-3]
 80213ac:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80213b0:	fb07 9902 	mla	r9, r7, r2, r9
 80213b4:	fa1f f989 	uxth.w	r9, r9
 80213b8:	f109 0701 	add.w	r7, r9, #1
 80213bc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80213c0:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80213c4:	fb07 8802 	mla	r8, r7, r2, r8
 80213c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80213cc:	fa1f f888 	uxth.w	r8, r8
 80213d0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80213d4:	f108 0201 	add.w	r2, r8, #1
 80213d8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80213dc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80213e0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80213e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80213e6:	3603      	adds	r6, #3
 80213e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213ec:	4414      	add	r4, r2
 80213ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213f0:	4410      	add	r0, r2
 80213f2:	e7ad      	b.n	8021350 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80213f4:	f04f 0c00 	mov.w	ip, #0
 80213f8:	eba3 020c 	sub.w	r2, r3, ip
 80213fc:	2a00      	cmp	r2, #0
 80213fe:	dc3d      	bgt.n	802147c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8021400:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021408:	441d      	add	r5, r3
 802140a:	2900      	cmp	r1, #0
 802140c:	f340 8097 	ble.w	802153e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 8021410:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021416:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802141a:	3901      	subs	r1, #1
 802141c:	eeb0 6a62 	vmov.f32	s12, s5
 8021420:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021424:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802142c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021430:	eeb0 6a43 	vmov.f32	s12, s6
 8021434:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021438:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802143c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021440:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021444:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021448:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802144c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021450:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021454:	ee12 2a90 	vmov	r2, s5
 8021458:	eef0 2a47 	vmov.f32	s5, s14
 802145c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021460:	ee13 2a10 	vmov	r2, s6
 8021464:	9311      	str	r3, [sp, #68]	; 0x44
 8021466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021468:	eeb0 3a67 	vmov.f32	s6, s15
 802146c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021470:	9a03      	ldr	r2, [sp, #12]
 8021472:	9312      	str	r3, [sp, #72]	; 0x48
 8021474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021476:	bf08      	it	eq
 8021478:	4613      	moveq	r3, r2
 802147a:	e738      	b.n	80212ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 802147c:	1426      	asrs	r6, r4, #16
 802147e:	d448      	bmi.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8021480:	4576      	cmp	r6, lr
 8021482:	da46      	bge.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8021484:	1402      	asrs	r2, r0, #16
 8021486:	d444      	bmi.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8021488:	9f01      	ldr	r7, [sp, #4]
 802148a:	42ba      	cmp	r2, r7
 802148c:	da41      	bge.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802148e:	fb0e 6202 	mla	r2, lr, r2, r6
 8021492:	9e02      	ldr	r6, [sp, #8]
 8021494:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8021498:	0e3a      	lsrs	r2, r7, #24
 802149a:	d03a      	beq.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802149c:	2aff      	cmp	r2, #255	; 0xff
 802149e:	b2d6      	uxtb	r6, r2
 80214a0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80214a4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80214a8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 80214ac:	b2ff      	uxtb	r7, r7
 80214ae:	d037      	beq.n	8021520 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 80214b0:	fa1f f986 	uxth.w	r9, r6
 80214b4:	4462      	add	r2, ip
 80214b6:	43f6      	mvns	r6, r6
 80214b8:	f815 8002 	ldrb.w	r8, [r5, r2]
 80214bc:	fb17 f709 	smulbb	r7, r7, r9
 80214c0:	fb1a fa09 	smulbb	sl, sl, r9
 80214c4:	b2f6      	uxtb	r6, r6
 80214c6:	fb1b f909 	smulbb	r9, fp, r9
 80214ca:	fb08 7706 	mla	r7, r8, r6, r7
 80214ce:	b2bf      	uxth	r7, r7
 80214d0:	f107 0801 	add.w	r8, r7, #1
 80214d4:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80214d8:	123f      	asrs	r7, r7, #8
 80214da:	54af      	strb	r7, [r5, r2]
 80214dc:	442a      	add	r2, r5
 80214de:	7857      	ldrb	r7, [r2, #1]
 80214e0:	fb07 aa06 	mla	sl, r7, r6, sl
 80214e4:	fa1f fa8a 	uxth.w	sl, sl
 80214e8:	f10a 0701 	add.w	r7, sl, #1
 80214ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80214f0:	7897      	ldrb	r7, [r2, #2]
 80214f2:	fb07 9906 	mla	r9, r7, r6, r9
 80214f6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80214fa:	fa1f f989 	uxth.w	r9, r9
 80214fe:	f882 a001 	strb.w	sl, [r2, #1]
 8021502:	f109 0601 	add.w	r6, r9, #1
 8021506:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802150a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802150e:	f882 9002 	strb.w	r9, [r2, #2]
 8021512:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021514:	f10c 0c01 	add.w	ip, ip, #1
 8021518:	4414      	add	r4, r2
 802151a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802151c:	4410      	add	r0, r2
 802151e:	e76b      	b.n	80213f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 8021520:	4462      	add	r2, ip
 8021522:	54af      	strb	r7, [r5, r2]
 8021524:	442a      	add	r2, r5
 8021526:	f882 a001 	strb.w	sl, [r2, #1]
 802152a:	f882 b002 	strb.w	fp, [r2, #2]
 802152e:	e7f0      	b.n	8021512 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8021530:	f806 7c03 	strb.w	r7, [r6, #-3]
 8021534:	f806 9c02 	strb.w	r9, [r6, #-2]
 8021538:	f806 bc01 	strb.w	fp, [r6, #-1]
 802153c:	e752      	b.n	80213e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 802153e:	b005      	add	sp, #20
 8021540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021544 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021548:	b087      	sub	sp, #28
 802154a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802154e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021550:	9204      	str	r2, [sp, #16]
 8021552:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8021556:	6860      	ldr	r0, [r4, #4]
 8021558:	9205      	str	r2, [sp, #20]
 802155a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 802155e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8021562:	9101      	str	r1, [sp, #4]
 8021564:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021568:	fb00 2505 	mla	r5, r0, r5, r2
 802156c:	6822      	ldr	r2, [r4, #0]
 802156e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021572:	4415      	add	r5, r2
 8021574:	f10e 0201 	add.w	r2, lr, #1
 8021578:	f022 0201 	bic.w	r2, r2, #1
 802157c:	9202      	str	r2, [sp, #8]
 802157e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8021580:	6812      	ldr	r2, [r2, #0]
 8021582:	9203      	str	r2, [sp, #12]
 8021584:	9a01      	ldr	r2, [sp, #4]
 8021586:	2a00      	cmp	r2, #0
 8021588:	dc03      	bgt.n	8021592 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 802158a:	9a04      	ldr	r2, [sp, #16]
 802158c:	2a00      	cmp	r2, #0
 802158e:	f340 8132 	ble.w	80217f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8021592:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021594:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802159a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802159e:	2b00      	cmp	r3, #0
 80215a0:	dd0e      	ble.n	80215c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80215a2:	1422      	asrs	r2, r4, #16
 80215a4:	d405      	bmi.n	80215b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80215a6:	4596      	cmp	lr, r2
 80215a8:	dd03      	ble.n	80215b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80215aa:	1402      	asrs	r2, r0, #16
 80215ac:	d401      	bmi.n	80215b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80215ae:	4542      	cmp	r2, r8
 80215b0:	db07      	blt.n	80215c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80215b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80215b4:	3b01      	subs	r3, #1
 80215b6:	3503      	adds	r5, #3
 80215b8:	4414      	add	r4, r2
 80215ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215bc:	4410      	add	r0, r2
 80215be:	e7ee      	b.n	802159e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 80215c0:	d010      	beq.n	80215e4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80215c2:	1e5a      	subs	r2, r3, #1
 80215c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80215c6:	fb06 4602 	mla	r6, r6, r2, r4
 80215ca:	1436      	asrs	r6, r6, #16
 80215cc:	d546      	bpl.n	802165c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80215ce:	4699      	mov	r9, r3
 80215d0:	462e      	mov	r6, r5
 80215d2:	f1b9 0f00 	cmp.w	r9, #0
 80215d6:	f300 80ac 	bgt.w	8021732 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 80215da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80215de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80215e2:	441d      	add	r5, r3
 80215e4:	9b01      	ldr	r3, [sp, #4]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	f340 8105 	ble.w	80217f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80215ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215f6:	eeb0 6a62 	vmov.f32	s12, s5
 80215fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80215fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021602:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021606:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802160a:	eeb0 6a43 	vmov.f32	s12, s6
 802160e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021612:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021616:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802161a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802161e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021622:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021626:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802162a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802162e:	ee12 2a90 	vmov	r2, s5
 8021632:	eef0 2a47 	vmov.f32	s5, s14
 8021636:	fb92 f3f3 	sdiv	r3, r2, r3
 802163a:	ee13 2a10 	vmov	r2, s6
 802163e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021640:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021642:	eeb0 3a67 	vmov.f32	s6, s15
 8021646:	fb92 f3f3 	sdiv	r3, r2, r3
 802164a:	9314      	str	r3, [sp, #80]	; 0x50
 802164c:	9b01      	ldr	r3, [sp, #4]
 802164e:	9a04      	ldr	r2, [sp, #16]
 8021650:	3b01      	subs	r3, #1
 8021652:	9301      	str	r3, [sp, #4]
 8021654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021656:	bf08      	it	eq
 8021658:	4613      	moveq	r3, r2
 802165a:	e793      	b.n	8021584 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 802165c:	45b6      	cmp	lr, r6
 802165e:	ddb6      	ble.n	80215ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021660:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021662:	fb06 0202 	mla	r2, r6, r2, r0
 8021666:	1412      	asrs	r2, r2, #16
 8021668:	d4b1      	bmi.n	80215ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802166a:	4542      	cmp	r2, r8
 802166c:	daaf      	bge.n	80215ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 802166e:	1cee      	adds	r6, r5, #3
 8021670:	4699      	mov	r9, r3
 8021672:	f1b9 0f00 	cmp.w	r9, #0
 8021676:	ddb0      	ble.n	80215da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8021678:	1422      	asrs	r2, r4, #16
 802167a:	9902      	ldr	r1, [sp, #8]
 802167c:	1407      	asrs	r7, r0, #16
 802167e:	fb01 2707 	mla	r7, r1, r7, r2
 8021682:	9903      	ldr	r1, [sp, #12]
 8021684:	087a      	lsrs	r2, r7, #1
 8021686:	5c8a      	ldrb	r2, [r1, r2]
 8021688:	07f9      	lsls	r1, r7, #31
 802168a:	bf54      	ite	pl
 802168c:	f002 020f 	andpl.w	r2, r2, #15
 8021690:	1112      	asrmi	r2, r2, #4
 8021692:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021696:	b2d2      	uxtb	r2, r2
 8021698:	2a00      	cmp	r2, #0
 802169a:	d042      	beq.n	8021722 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 802169c:	4957      	ldr	r1, [pc, #348]	; (80217fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 802169e:	680f      	ldr	r7, [r1, #0]
 80216a0:	9905      	ldr	r1, [sp, #20]
 80216a2:	fa5f fb87 	uxtb.w	fp, r7
 80216a6:	434a      	muls	r2, r1
 80216a8:	f102 0c01 	add.w	ip, r2, #1
 80216ac:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 80216b0:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 80216b4:	1212      	asrs	r2, r2, #8
 80216b6:	fa1f fa82 	uxth.w	sl, r2
 80216ba:	43d2      	mvns	r2, r2
 80216bc:	fb1b fb0a 	smulbb	fp, fp, sl
 80216c0:	b2d2      	uxtb	r2, r2
 80216c2:	fb0c bc02 	mla	ip, ip, r2, fp
 80216c6:	fa1f fc8c 	uxth.w	ip, ip
 80216ca:	f10c 0b01 	add.w	fp, ip, #1
 80216ce:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80216d2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80216d6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80216da:	fb1b fb0a 	smulbb	fp, fp, sl
 80216de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80216e2:	fb17 fa0a 	smulbb	sl, r7, sl
 80216e6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80216ea:	f806 cc03 	strb.w	ip, [r6, #-3]
 80216ee:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80216f2:	fb07 aa02 	mla	sl, r7, r2, sl
 80216f6:	fb0c bc02 	mla	ip, ip, r2, fp
 80216fa:	fa1f fa8a 	uxth.w	sl, sl
 80216fe:	fa1f fc8c 	uxth.w	ip, ip
 8021702:	f10a 0701 	add.w	r7, sl, #1
 8021706:	f10c 0b01 	add.w	fp, ip, #1
 802170a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802170e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021712:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021716:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802171a:	f806 ac01 	strb.w	sl, [r6, #-1]
 802171e:	f806 cc02 	strb.w	ip, [r6, #-2]
 8021722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021724:	3603      	adds	r6, #3
 8021726:	f109 39ff 	add.w	r9, r9, #4294967295
 802172a:	4414      	add	r4, r2
 802172c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802172e:	4410      	add	r0, r2
 8021730:	e79f      	b.n	8021672 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 8021732:	1422      	asrs	r2, r4, #16
 8021734:	d457      	bmi.n	80217e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8021736:	4596      	cmp	lr, r2
 8021738:	dd55      	ble.n	80217e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802173a:	1407      	asrs	r7, r0, #16
 802173c:	d453      	bmi.n	80217e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802173e:	4547      	cmp	r7, r8
 8021740:	da51      	bge.n	80217e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8021742:	9902      	ldr	r1, [sp, #8]
 8021744:	fb07 2701 	mla	r7, r7, r1, r2
 8021748:	9903      	ldr	r1, [sp, #12]
 802174a:	087a      	lsrs	r2, r7, #1
 802174c:	07ff      	lsls	r7, r7, #31
 802174e:	5c8a      	ldrb	r2, [r1, r2]
 8021750:	bf54      	ite	pl
 8021752:	f002 020f 	andpl.w	r2, r2, #15
 8021756:	1112      	asrmi	r2, r2, #4
 8021758:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802175c:	b2d2      	uxtb	r2, r2
 802175e:	2a00      	cmp	r2, #0
 8021760:	d041      	beq.n	80217e6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8021762:	4926      	ldr	r1, [pc, #152]	; (80217fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8021764:	680f      	ldr	r7, [r1, #0]
 8021766:	9905      	ldr	r1, [sp, #20]
 8021768:	fa5f fb87 	uxtb.w	fp, r7
 802176c:	434a      	muls	r2, r1
 802176e:	f102 0c01 	add.w	ip, r2, #1
 8021772:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8021776:	f896 c000 	ldrb.w	ip, [r6]
 802177a:	1212      	asrs	r2, r2, #8
 802177c:	fa1f fa82 	uxth.w	sl, r2
 8021780:	43d2      	mvns	r2, r2
 8021782:	fb1b fb0a 	smulbb	fp, fp, sl
 8021786:	b2d2      	uxtb	r2, r2
 8021788:	fb0c bc02 	mla	ip, ip, r2, fp
 802178c:	fa1f fc8c 	uxth.w	ip, ip
 8021790:	f10c 0b01 	add.w	fp, ip, #1
 8021794:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021798:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802179c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80217a0:	fb1b fb0a 	smulbb	fp, fp, sl
 80217a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80217a8:	fb17 fa0a 	smulbb	sl, r7, sl
 80217ac:	78b7      	ldrb	r7, [r6, #2]
 80217ae:	f886 c000 	strb.w	ip, [r6]
 80217b2:	f896 c001 	ldrb.w	ip, [r6, #1]
 80217b6:	fb07 aa02 	mla	sl, r7, r2, sl
 80217ba:	fb0c bc02 	mla	ip, ip, r2, fp
 80217be:	fa1f fa8a 	uxth.w	sl, sl
 80217c2:	fa1f fc8c 	uxth.w	ip, ip
 80217c6:	f10a 0701 	add.w	r7, sl, #1
 80217ca:	f10c 0b01 	add.w	fp, ip, #1
 80217ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217d2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80217d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80217da:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80217de:	f886 a002 	strb.w	sl, [r6, #2]
 80217e2:	f886 c001 	strb.w	ip, [r6, #1]
 80217e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80217e8:	3603      	adds	r6, #3
 80217ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80217ee:	4414      	add	r4, r2
 80217f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80217f2:	4410      	add	r0, r2
 80217f4:	e6ed      	b.n	80215d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80217f6:	b007      	add	sp, #28
 80217f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217fc:	2000bf40 	.word	0x2000bf40

08021800 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021804:	b087      	sub	sp, #28
 8021806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802180a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802180c:	9205      	str	r2, [sp, #20]
 802180e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8021812:	6860      	ldr	r0, [r4, #4]
 8021814:	9202      	str	r2, [sp, #8]
 8021816:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 802181a:	9101      	str	r1, [sp, #4]
 802181c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 8021820:	fb00 2606 	mla	r6, r0, r6, r2
 8021824:	6822      	ldr	r2, [r4, #0]
 8021826:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802182a:	4416      	add	r6, r2
 802182c:	f108 0201 	add.w	r2, r8, #1
 8021830:	f022 0201 	bic.w	r2, r2, #1
 8021834:	9203      	str	r2, [sp, #12]
 8021836:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8021838:	6812      	ldr	r2, [r2, #0]
 802183a:	9204      	str	r2, [sp, #16]
 802183c:	9a01      	ldr	r2, [sp, #4]
 802183e:	2a00      	cmp	r2, #0
 8021840:	dc03      	bgt.n	802184a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8021842:	9a05      	ldr	r2, [sp, #20]
 8021844:	2a00      	cmp	r2, #0
 8021846:	f340 813a 	ble.w	8021abe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802184a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802184c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8021850:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021852:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021856:	2b00      	cmp	r3, #0
 8021858:	dd0f      	ble.n	802187a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802185a:	142a      	asrs	r2, r5, #16
 802185c:	d406      	bmi.n	802186c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802185e:	4590      	cmp	r8, r2
 8021860:	dd04      	ble.n	802186c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021862:	1422      	asrs	r2, r4, #16
 8021864:	d402      	bmi.n	802186c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8021866:	9802      	ldr	r0, [sp, #8]
 8021868:	4282      	cmp	r2, r0
 802186a:	db07      	blt.n	802187c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 802186c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802186e:	3b01      	subs	r3, #1
 8021870:	3603      	adds	r6, #3
 8021872:	4415      	add	r5, r2
 8021874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021876:	4414      	add	r4, r2
 8021878:	e7ed      	b.n	8021856 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 802187a:	d073      	beq.n	8021964 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 802187c:	1e5a      	subs	r2, r3, #1
 802187e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021880:	fb00 5002 	mla	r0, r0, r2, r5
 8021884:	1400      	asrs	r0, r0, #16
 8021886:	d464      	bmi.n	8021952 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8021888:	4580      	cmp	r8, r0
 802188a:	dd62      	ble.n	8021952 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 802188c:	9814      	ldr	r0, [sp, #80]	; 0x50
 802188e:	fb00 4202 	mla	r2, r0, r2, r4
 8021892:	1412      	asrs	r2, r2, #16
 8021894:	d45d      	bmi.n	8021952 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8021896:	9802      	ldr	r0, [sp, #8]
 8021898:	4282      	cmp	r2, r0
 802189a:	da5a      	bge.n	8021952 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 802189c:	1cf0      	adds	r0, r6, #3
 802189e:	469a      	mov	sl, r3
 80218a0:	f1ba 0f00 	cmp.w	sl, #0
 80218a4:	dd59      	ble.n	802195a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80218a6:	142a      	asrs	r2, r5, #16
 80218a8:	9903      	ldr	r1, [sp, #12]
 80218aa:	1427      	asrs	r7, r4, #16
 80218ac:	fb01 2707 	mla	r7, r1, r7, r2
 80218b0:	9904      	ldr	r1, [sp, #16]
 80218b2:	087a      	lsrs	r2, r7, #1
 80218b4:	5c8a      	ldrb	r2, [r1, r2]
 80218b6:	07f9      	lsls	r1, r7, #31
 80218b8:	bf54      	ite	pl
 80218ba:	f002 020f 	andpl.w	r2, r2, #15
 80218be:	1112      	asrmi	r2, r2, #4
 80218c0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80218c4:	b2d2      	uxtb	r2, r2
 80218c6:	2a00      	cmp	r2, #0
 80218c8:	d03b      	beq.n	8021942 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80218ca:	497e      	ldr	r1, [pc, #504]	; (8021ac4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80218cc:	2aff      	cmp	r2, #255	; 0xff
 80218ce:	680f      	ldr	r7, [r1, #0]
 80218d0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80218d4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80218d8:	b2ff      	uxtb	r7, r7
 80218da:	f000 80e9 	beq.w	8021ab0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80218de:	fa1f fe82 	uxth.w	lr, r2
 80218e2:	43d2      	mvns	r2, r2
 80218e4:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80218e8:	fb17 f70e 	smulbb	r7, r7, lr
 80218ec:	b2d2      	uxtb	r2, r2
 80218ee:	fb19 f90e 	smulbb	r9, r9, lr
 80218f2:	fb0c 7702 	mla	r7, ip, r2, r7
 80218f6:	fb1b fe0e 	smulbb	lr, fp, lr
 80218fa:	b2bf      	uxth	r7, r7
 80218fc:	f107 0c01 	add.w	ip, r7, #1
 8021900:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8021904:	123f      	asrs	r7, r7, #8
 8021906:	f800 7c03 	strb.w	r7, [r0, #-3]
 802190a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802190e:	fb07 9902 	mla	r9, r7, r2, r9
 8021912:	fa1f f989 	uxth.w	r9, r9
 8021916:	f109 0701 	add.w	r7, r9, #1
 802191a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802191e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8021922:	fb07 ee02 	mla	lr, r7, r2, lr
 8021926:	ea4f 2929 	mov.w	r9, r9, asr #8
 802192a:	fa1f fe8e 	uxth.w	lr, lr
 802192e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021932:	f10e 0201 	add.w	r2, lr, #1
 8021936:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802193a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802193e:	f800 ec01 	strb.w	lr, [r0, #-1]
 8021942:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021944:	3003      	adds	r0, #3
 8021946:	f10a 3aff 	add.w	sl, sl, #4294967295
 802194a:	4415      	add	r5, r2
 802194c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802194e:	4414      	add	r4, r2
 8021950:	e7a6      	b.n	80218a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8021952:	2700      	movs	r7, #0
 8021954:	1bda      	subs	r2, r3, r7
 8021956:	2a00      	cmp	r2, #0
 8021958:	dc40      	bgt.n	80219dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 802195a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802195e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021962:	441e      	add	r6, r3
 8021964:	9b01      	ldr	r3, [sp, #4]
 8021966:	2b00      	cmp	r3, #0
 8021968:	f340 80a9 	ble.w	8021abe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 802196c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021972:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021976:	eeb0 6a62 	vmov.f32	s12, s5
 802197a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802197e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021982:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021986:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802198a:	eeb0 6a43 	vmov.f32	s12, s6
 802198e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021992:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021996:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802199a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802199e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80219a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80219aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219ae:	ee12 2a90 	vmov	r2, s5
 80219b2:	eef0 2a47 	vmov.f32	s5, s14
 80219b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ba:	ee13 2a10 	vmov	r2, s6
 80219be:	9313      	str	r3, [sp, #76]	; 0x4c
 80219c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219c2:	eeb0 3a67 	vmov.f32	s6, s15
 80219c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80219ca:	9314      	str	r3, [sp, #80]	; 0x50
 80219cc:	9b01      	ldr	r3, [sp, #4]
 80219ce:	9a05      	ldr	r2, [sp, #20]
 80219d0:	3b01      	subs	r3, #1
 80219d2:	9301      	str	r3, [sp, #4]
 80219d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219d6:	bf08      	it	eq
 80219d8:	4613      	moveq	r3, r2
 80219da:	e72f      	b.n	802183c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80219dc:	142a      	asrs	r2, r5, #16
 80219de:	d458      	bmi.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80219e0:	4590      	cmp	r8, r2
 80219e2:	dd56      	ble.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80219e4:	1420      	asrs	r0, r4, #16
 80219e6:	d454      	bmi.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80219e8:	9902      	ldr	r1, [sp, #8]
 80219ea:	4288      	cmp	r0, r1
 80219ec:	da51      	bge.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80219ee:	9903      	ldr	r1, [sp, #12]
 80219f0:	fb00 2001 	mla	r0, r0, r1, r2
 80219f4:	9904      	ldr	r1, [sp, #16]
 80219f6:	0842      	lsrs	r2, r0, #1
 80219f8:	07c0      	lsls	r0, r0, #31
 80219fa:	5c8a      	ldrb	r2, [r1, r2]
 80219fc:	bf54      	ite	pl
 80219fe:	f002 020f 	andpl.w	r2, r2, #15
 8021a02:	1112      	asrmi	r2, r2, #4
 8021a04:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021a08:	b2d2      	uxtb	r2, r2
 8021a0a:	2a00      	cmp	r2, #0
 8021a0c:	d041      	beq.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8021a0e:	492d      	ldr	r1, [pc, #180]	; (8021ac4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8021a10:	2aff      	cmp	r2, #255	; 0xff
 8021a12:	6808      	ldr	r0, [r1, #0]
 8021a14:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8021a18:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021a1c:	fa5f fc80 	uxtb.w	ip, r0
 8021a20:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8021a24:	d03b      	beq.n	8021a9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 8021a26:	fa1f f982 	uxth.w	r9, r2
 8021a2a:	4438      	add	r0, r7
 8021a2c:	43d2      	mvns	r2, r2
 8021a2e:	f816 e000 	ldrb.w	lr, [r6, r0]
 8021a32:	fb1c fc09 	smulbb	ip, ip, r9
 8021a36:	fb1a fa09 	smulbb	sl, sl, r9
 8021a3a:	b2d2      	uxtb	r2, r2
 8021a3c:	fb1b f909 	smulbb	r9, fp, r9
 8021a40:	fb0e cc02 	mla	ip, lr, r2, ip
 8021a44:	fa1f fc8c 	uxth.w	ip, ip
 8021a48:	f10c 0e01 	add.w	lr, ip, #1
 8021a4c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8021a50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021a54:	f806 c000 	strb.w	ip, [r6, r0]
 8021a58:	4430      	add	r0, r6
 8021a5a:	f890 c001 	ldrb.w	ip, [r0, #1]
 8021a5e:	fb0c aa02 	mla	sl, ip, r2, sl
 8021a62:	fa1f fa8a 	uxth.w	sl, sl
 8021a66:	f10a 0c01 	add.w	ip, sl, #1
 8021a6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021a6e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021a72:	fb0c 9902 	mla	r9, ip, r2, r9
 8021a76:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021a7a:	fa1f f989 	uxth.w	r9, r9
 8021a7e:	f880 a001 	strb.w	sl, [r0, #1]
 8021a82:	f109 0201 	add.w	r2, r9, #1
 8021a86:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8021a8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021a8e:	f880 9002 	strb.w	r9, [r0, #2]
 8021a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a94:	3701      	adds	r7, #1
 8021a96:	4415      	add	r5, r2
 8021a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a9a:	4414      	add	r4, r2
 8021a9c:	e75a      	b.n	8021954 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8021a9e:	4438      	add	r0, r7
 8021aa0:	f806 c000 	strb.w	ip, [r6, r0]
 8021aa4:	4430      	add	r0, r6
 8021aa6:	f880 a001 	strb.w	sl, [r0, #1]
 8021aaa:	f880 b002 	strb.w	fp, [r0, #2]
 8021aae:	e7f0      	b.n	8021a92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8021ab0:	f800 7c03 	strb.w	r7, [r0, #-3]
 8021ab4:	f800 9c02 	strb.w	r9, [r0, #-2]
 8021ab8:	f800 bc01 	strb.w	fp, [r0, #-1]
 8021abc:	e741      	b.n	8021942 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8021abe:	b007      	add	sp, #28
 8021ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ac4:	2000bf40 	.word	0x2000bf40

08021ac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021ac8:	4770      	bx	lr

08021aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021aca:	4770      	bx	lr

08021acc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021acc:	4770      	bx	lr

08021ace <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021ace:	4770      	bx	lr

08021ad0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021ad0:	4770      	bx	lr

08021ad2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021ad2:	4770      	bx	lr

08021ad4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021ad4:	4770      	bx	lr

08021ad6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021ad6:	4770      	bx	lr

08021ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021ad8:	4770      	bx	lr

08021ada <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021ada:	4770      	bx	lr

08021adc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021adc:	4770      	bx	lr

08021ade <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021ade:	4770      	bx	lr

08021ae0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021ae0:	4770      	bx	lr

08021ae2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021ae2:	4770      	bx	lr

08021ae4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021ae4:	4770      	bx	lr

08021ae6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021ae6:	4770      	bx	lr

08021ae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021ae8:	4770      	bx	lr

08021aea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8021aea:	4770      	bx	lr

08021aec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021aec:	4770      	bx	lr

08021aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021aee:	4770      	bx	lr

08021af0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021af0:	2bff      	cmp	r3, #255	; 0xff
 8021af2:	b508      	push	{r3, lr}
 8021af4:	d04f      	beq.n	8021b96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8021af6:	2a2c      	cmp	r2, #44	; 0x2c
 8021af8:	d032      	beq.n	8021b60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 8021afa:	d80f      	bhi.n	8021b1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8021afc:	2a08      	cmp	r2, #8
 8021afe:	d046      	beq.n	8021b8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021b00:	d805      	bhi.n	8021b0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8021b02:	2a04      	cmp	r2, #4
 8021b04:	d041      	beq.n	8021b8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021b06:	2a05      	cmp	r2, #5
 8021b08:	d03d      	beq.n	8021b86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8021b0a:	2000      	movs	r0, #0
 8021b0c:	e027      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b0e:	2a0a      	cmp	r2, #10
 8021b10:	d03d      	beq.n	8021b8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021b12:	d301      	bcc.n	8021b18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8021b14:	2a0b      	cmp	r2, #11
 8021b16:	d1f8      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b18:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8021b1a:	e020      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b1c:	2a30      	cmp	r2, #48	; 0x30
 8021b1e:	d038      	beq.n	8021b92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021b20:	d808      	bhi.n	8021b34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8021b22:	2a2e      	cmp	r2, #46	; 0x2e
 8021b24:	684b      	ldr	r3, [r1, #4]
 8021b26:	d029      	beq.n	8021b7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8021b28:	d90b      	bls.n	8021b42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8021b2a:	781b      	ldrb	r3, [r3, #0]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d1ec      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b30:	6a00      	ldr	r0, [r0, #32]
 8021b32:	e014      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b34:	2a32      	cmp	r2, #50	; 0x32
 8021b36:	d02c      	beq.n	8021b92 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021b38:	d301      	bcc.n	8021b3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8021b3a:	2a33      	cmp	r2, #51	; 0x33
 8021b3c:	d1e5      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b3e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8021b40:	e00d      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b42:	781b      	ldrb	r3, [r3, #0]
 8021b44:	2b01      	cmp	r3, #1
 8021b46:	d009      	beq.n	8021b5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8021b48:	d3f2      	bcc.n	8021b30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8021b4a:	2b02      	cmp	r3, #2
 8021b4c:	d1dd      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b4e:	4b39      	ldr	r3, [pc, #228]	; (8021c34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8021b50:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8021b54:	4a38      	ldr	r2, [pc, #224]	; (8021c38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8021b56:	4839      	ldr	r0, [pc, #228]	; (8021c3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8021b58:	f007 ff3e 	bl	80299d8 <__assert_func>
 8021b5c:	6900      	ldr	r0, [r0, #16]
 8021b5e:	bd08      	pop	{r3, pc}
 8021b60:	684b      	ldr	r3, [r1, #4]
 8021b62:	781b      	ldrb	r3, [r3, #0]
 8021b64:	2b01      	cmp	r3, #1
 8021b66:	d007      	beq.n	8021b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8021b68:	d30b      	bcc.n	8021b82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8021b6a:	2b02      	cmp	r3, #2
 8021b6c:	d1cd      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b6e:	4b31      	ldr	r3, [pc, #196]	; (8021c34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8021b70:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8021b74:	4a30      	ldr	r2, [pc, #192]	; (8021c38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8021b76:	e7ee      	b.n	8021b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021b78:	6880      	ldr	r0, [r0, #8]
 8021b7a:	e7f0      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d1c3      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021b82:	6980      	ldr	r0, [r0, #24]
 8021b84:	e7eb      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b86:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8021b88:	e7e9      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8021b8c:	e7e7      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021b90:	e7e5      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b92:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8021b94:	e7e3      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021b96:	2a2c      	cmp	r2, #44	; 0x2c
 8021b98:	d030      	beq.n	8021bfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8021b9a:	d80f      	bhi.n	8021bbc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8021b9c:	2a08      	cmp	r2, #8
 8021b9e:	d044      	beq.n	8021c2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8021ba0:	d805      	bhi.n	8021bae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8021ba2:	2a04      	cmp	r2, #4
 8021ba4:	d03f      	beq.n	8021c26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8021ba6:	2a05      	cmp	r2, #5
 8021ba8:	d1af      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021baa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8021bac:	e7d7      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021bae:	2a0a      	cmp	r2, #10
 8021bb0:	d03b      	beq.n	8021c2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8021bb2:	d301      	bcc.n	8021bb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8021bb4:	2a0b      	cmp	r2, #11
 8021bb6:	d1a8      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021bb8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8021bba:	e7d0      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021bbc:	2a30      	cmp	r2, #48	; 0x30
 8021bbe:	d036      	beq.n	8021c2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021bc0:	d808      	bhi.n	8021bd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8021bc2:	2a2e      	cmp	r2, #46	; 0x2e
 8021bc4:	684b      	ldr	r3, [r1, #4]
 8021bc6:	d028      	beq.n	8021c1a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8021bc8:	d90b      	bls.n	8021be2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8021bca:	781b      	ldrb	r3, [r3, #0]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d19c      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021bd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021bd2:	e7c4      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021bd4:	2a32      	cmp	r2, #50	; 0x32
 8021bd6:	d02a      	beq.n	8021c2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021bd8:	d301      	bcc.n	8021bde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8021bda:	2a33      	cmp	r2, #51	; 0x33
 8021bdc:	d195      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021bde:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8021be0:	e7bd      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021be2:	781b      	ldrb	r3, [r3, #0]
 8021be4:	2b01      	cmp	r3, #1
 8021be6:	d007      	beq.n	8021bf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8021be8:	d3f2      	bcc.n	8021bd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8021bea:	2b02      	cmp	r3, #2
 8021bec:	d18d      	bne.n	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021bee:	4b11      	ldr	r3, [pc, #68]	; (8021c34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8021bf0:	f240 31e1 	movw	r1, #993	; 0x3e1
 8021bf4:	4a10      	ldr	r2, [pc, #64]	; (8021c38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8021bf6:	e7ae      	b.n	8021b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021bf8:	6940      	ldr	r0, [r0, #20]
 8021bfa:	e7b0      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021bfc:	684b      	ldr	r3, [r1, #4]
 8021bfe:	781b      	ldrb	r3, [r3, #0]
 8021c00:	2b01      	cmp	r3, #1
 8021c02:	d008      	beq.n	8021c16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8021c04:	d30d      	bcc.n	8021c22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8021c06:	2b02      	cmp	r3, #2
 8021c08:	f47f af7f 	bne.w	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021c0c:	4b09      	ldr	r3, [pc, #36]	; (8021c34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8021c0e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 8021c12:	4a09      	ldr	r2, [pc, #36]	; (8021c38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8021c14:	e79f      	b.n	8021b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8021c16:	68c0      	ldr	r0, [r0, #12]
 8021c18:	e7a1      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c1a:	781b      	ldrb	r3, [r3, #0]
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	f47f af74 	bne.w	8021b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021c22:	69c0      	ldr	r0, [r0, #28]
 8021c24:	e79b      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8021c28:	e799      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c2a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8021c2c:	e797      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c2e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8021c30:	e795      	b.n	8021b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021c32:	bf00      	nop
 8021c34:	0802edd7 	.word	0x0802edd7
 8021c38:	0802f58b 	.word	0x0802f58b
 8021c3c:	0802ee23 	.word	0x0802ee23

08021c40 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8021c40:	b508      	push	{r3, lr}
 8021c42:	4b06      	ldr	r3, [pc, #24]	; (8021c5c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8021c44:	8818      	ldrh	r0, [r3, #0]
 8021c46:	b928      	cbnz	r0, 8021c54 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8021c48:	4b05      	ldr	r3, [pc, #20]	; (8021c60 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8021c4a:	21d7      	movs	r1, #215	; 0xd7
 8021c4c:	4a05      	ldr	r2, [pc, #20]	; (8021c64 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8021c4e:	4806      	ldr	r0, [pc, #24]	; (8021c68 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8021c50:	f007 fec2 	bl	80299d8 <__assert_func>
 8021c54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021c58:	b280      	uxth	r0, r0
 8021c5a:	bd08      	pop	{r3, pc}
 8021c5c:	2000bf10 	.word	0x2000bf10
 8021c60:	0802f072 	.word	0x0802f072
 8021c64:	0802f550 	.word	0x0802f550
 8021c68:	0802f0b4 	.word	0x0802f0b4

08021c6c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c70:	4616      	mov	r6, r2
 8021c72:	b087      	sub	sp, #28
 8021c74:	461f      	mov	r7, r3
 8021c76:	b33b      	cbz	r3, 8021cc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021c78:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8021c7c:	b323      	cbz	r3, 8021cc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021c7e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021c82:	b30b      	cbz	r3, 8021cc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021c84:	6808      	ldr	r0, [r1, #0]
 8021c86:	ab04      	add	r3, sp, #16
 8021c88:	6849      	ldr	r1, [r1, #4]
 8021c8a:	4c5a      	ldr	r4, [pc, #360]	; (8021df4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8021c8c:	c303      	stmia	r3!, {r0, r1}
 8021c8e:	a804      	add	r0, sp, #16
 8021c90:	f7fb fd34 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c94:	6820      	ldr	r0, [r4, #0]
 8021c96:	6803      	ldr	r3, [r0, #0]
 8021c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c9a:	4798      	blx	r3
 8021c9c:	2fff      	cmp	r7, #255	; 0xff
 8021c9e:	4623      	mov	r3, r4
 8021ca0:	d015      	beq.n	8021cce <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021ca2:	f010 0f08 	tst.w	r0, #8
 8021ca6:	d015      	beq.n	8021cd4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8021ca8:	6818      	ldr	r0, [r3, #0]
 8021caa:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021cae:	6801      	ldr	r1, [r0, #0]
 8021cb0:	9401      	str	r4, [sp, #4]
 8021cb2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021cb6:	9702      	str	r7, [sp, #8]
 8021cb8:	9400      	str	r4, [sp, #0]
 8021cba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021cbe:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8021cc0:	4631      	mov	r1, r6
 8021cc2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021cc6:	47a0      	blx	r4
 8021cc8:	b007      	add	sp, #28
 8021cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cce:	f010 0f02 	tst.w	r0, #2
 8021cd2:	e7e8      	b.n	8021ca6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8021cd4:	6818      	ldr	r0, [r3, #0]
 8021cd6:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8021cda:	6803      	ldr	r3, [r0, #0]
 8021cdc:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021ce0:	6a1b      	ldr	r3, [r3, #32]
 8021ce2:	4798      	blx	r3
 8021ce4:	4944      	ldr	r1, [pc, #272]	; (8021df8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8021ce6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021cea:	2fff      	cmp	r7, #255	; 0xff
 8021cec:	f8b1 c000 	ldrh.w	ip, [r1]
 8021cf0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8021cf4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021cf8:	4688      	mov	r8, r1
 8021cfa:	fb0c 2303 	mla	r3, ip, r3, r2
 8021cfe:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8021d02:	b2f2      	uxtb	r2, r6
 8021d04:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8021d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d0c:	4418      	add	r0, r3
 8021d0e:	d112      	bne.n	8021d36 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 8021d10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021d14:	2100      	movs	r1, #0
 8021d16:	42a9      	cmp	r1, r5
 8021d18:	da66      	bge.n	8021de8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	2700      	movs	r7, #0
 8021d1e:	42a7      	cmp	r7, r4
 8021d20:	f103 0303 	add.w	r3, r3, #3
 8021d24:	da57      	bge.n	8021dd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8021d26:	f803 2c03 	strb.w	r2, [r3, #-3]
 8021d2a:	3701      	adds	r7, #1
 8021d2c:	f803 ec02 	strb.w	lr, [r3, #-2]
 8021d30:	f803 cc01 	strb.w	ip, [r3, #-1]
 8021d34:	e7f3      	b.n	8021d1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8021d36:	b2bb      	uxth	r3, r7
 8021d38:	f04f 0800 	mov.w	r8, #0
 8021d3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021d40:	fb0c fc03 	mul.w	ip, ip, r3
 8021d44:	fb0e fe03 	mul.w	lr, lr, r3
 8021d48:	435a      	muls	r2, r3
 8021d4a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8021d4e:	460f      	mov	r7, r1
 8021d50:	b29b      	uxth	r3, r3
 8021d52:	45a8      	cmp	r8, r5
 8021d54:	da48      	bge.n	8021de8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8021d56:	4601      	mov	r1, r0
 8021d58:	f04f 0a00 	mov.w	sl, #0
 8021d5c:	45a2      	cmp	sl, r4
 8021d5e:	f101 0103 	add.w	r1, r1, #3
 8021d62:	da2f      	bge.n	8021dc4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8021d64:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8021d68:	f10a 0a01 	add.w	sl, sl, #1
 8021d6c:	fb19 f903 	smulbb	r9, r9, r3
 8021d70:	4491      	add	r9, r2
 8021d72:	fa1f f989 	uxth.w	r9, r9
 8021d76:	f109 0b01 	add.w	fp, r9, #1
 8021d7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021d7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d82:	f801 9c03 	strb.w	r9, [r1, #-3]
 8021d86:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8021d8a:	fb19 f903 	smulbb	r9, r9, r3
 8021d8e:	44f1      	add	r9, lr
 8021d90:	fa1f f989 	uxth.w	r9, r9
 8021d94:	f109 0b01 	add.w	fp, r9, #1
 8021d98:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021d9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021da0:	f801 9c02 	strb.w	r9, [r1, #-2]
 8021da4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8021da8:	fb19 f903 	smulbb	r9, r9, r3
 8021dac:	44e1      	add	r9, ip
 8021dae:	fa1f f989 	uxth.w	r9, r9
 8021db2:	f109 0b01 	add.w	fp, r9, #1
 8021db6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021dba:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021dbe:	f801 9c01 	strb.w	r9, [r1, #-1]
 8021dc2:	e7cb      	b.n	8021d5c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8021dc4:	8839      	ldrh	r1, [r7, #0]
 8021dc6:	f108 0801 	add.w	r8, r8, #1
 8021dca:	1b09      	subs	r1, r1, r4
 8021dcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021dd0:	4431      	add	r1, r6
 8021dd2:	4408      	add	r0, r1
 8021dd4:	e7bd      	b.n	8021d52 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8021dd6:	f8b8 3000 	ldrh.w	r3, [r8]
 8021dda:	3101      	adds	r1, #1
 8021ddc:	1b1b      	subs	r3, r3, r4
 8021dde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021de2:	4433      	add	r3, r6
 8021de4:	4418      	add	r0, r3
 8021de6:	e796      	b.n	8021d16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8021de8:	4b02      	ldr	r3, [pc, #8]	; (8021df4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8021dea:	6818      	ldr	r0, [r3, #0]
 8021dec:	6803      	ldr	r3, [r0, #0]
 8021dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021df0:	4798      	blx	r3
 8021df2:	e769      	b.n	8021cc8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021df4:	2000bf18 	.word	0x2000bf18
 8021df8:	2000bf10 	.word	0x2000bf10

08021dfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e00:	b08d      	sub	sp, #52	; 0x34
 8021e02:	460c      	mov	r4, r1
 8021e04:	4617      	mov	r7, r2
 8021e06:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8021e0a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8021e0e:	2e00      	cmp	r6, #0
 8021e10:	d04a      	beq.n	8021ea8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021e12:	6810      	ldr	r0, [r2, #0]
 8021e14:	ad08      	add	r5, sp, #32
 8021e16:	6851      	ldr	r1, [r2, #4]
 8021e18:	c503      	stmia	r5!, {r0, r1}
 8021e1a:	6818      	ldr	r0, [r3, #0]
 8021e1c:	ad0a      	add	r5, sp, #40	; 0x28
 8021e1e:	6859      	ldr	r1, [r3, #4]
 8021e20:	c503      	stmia	r5!, {r0, r1}
 8021e22:	a808      	add	r0, sp, #32
 8021e24:	f7fb fc6a 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e28:	4639      	mov	r1, r7
 8021e2a:	a80a      	add	r0, sp, #40	; 0x28
 8021e2c:	4f59      	ldr	r7, [pc, #356]	; (8021f94 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8021e2e:	f7fb fc4d 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e32:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8021e36:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8021e3a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8021e3e:	6838      	ldr	r0, [r7, #0]
 8021e40:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021e44:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8021e48:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8021e4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021e50:	440c      	add	r4, r1
 8021e52:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8021e56:	440a      	add	r2, r1
 8021e58:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021e5c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8021e60:	4413      	add	r3, r2
 8021e62:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8021e66:	6803      	ldr	r3, [r0, #0]
 8021e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e6a:	4798      	blx	r3
 8021e6c:	2eff      	cmp	r6, #255	; 0xff
 8021e6e:	f000 8089 	beq.w	8021f84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8021e72:	0743      	lsls	r3, r0, #29
 8021e74:	d405      	bmi.n	8021e82 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8021e76:	f1b9 0f00 	cmp.w	r9, #0
 8021e7a:	d018      	beq.n	8021eae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021e7c:	f010 0f10 	tst.w	r0, #16
 8021e80:	d015      	beq.n	8021eae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021e82:	6838      	ldr	r0, [r7, #0]
 8021e84:	b2ad      	uxth	r5, r5
 8021e86:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021e8a:	6801      	ldr	r1, [r0, #0]
 8021e8c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021e90:	9500      	str	r5, [sp, #0]
 8021e92:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8021e96:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8021e9a:	9602      	str	r6, [sp, #8]
 8021e9c:	fa1f f688 	uxth.w	r6, r8
 8021ea0:	9601      	str	r6, [sp, #4]
 8021ea2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8021ea4:	4621      	mov	r1, r4
 8021ea6:	47a8      	blx	r5
 8021ea8:	b00d      	add	sp, #52	; 0x34
 8021eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eae:	6838      	ldr	r0, [r7, #0]
 8021eb0:	6803      	ldr	r3, [r0, #0]
 8021eb2:	6a1b      	ldr	r3, [r3, #32]
 8021eb4:	4798      	blx	r3
 8021eb6:	4a38      	ldr	r2, [pc, #224]	; (8021f98 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8021eb8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021ebc:	2eff      	cmp	r6, #255	; 0xff
 8021ebe:	8813      	ldrh	r3, [r2, #0]
 8021ec0:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8021ec4:	fb0c 1303 	mla	r3, ip, r3, r1
 8021ec8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8021ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ed0:	4418      	add	r0, r3
 8021ed2:	d032      	beq.n	8021f3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8021ed4:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8021ed8:	f04f 0c00 	mov.w	ip, #0
 8021edc:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8021ee0:	9306      	str	r3, [sp, #24]
 8021ee2:	45c4      	cmp	ip, r8
 8021ee4:	da49      	bge.n	8021f7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8021ee6:	4686      	mov	lr, r0
 8021ee8:	46a1      	mov	r9, r4
 8021eea:	eba9 0304 	sub.w	r3, r9, r4
 8021eee:	428b      	cmp	r3, r1
 8021ef0:	da13      	bge.n	8021f1a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8021ef2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021ef6:	f89e b000 	ldrb.w	fp, [lr]
 8021efa:	9307      	str	r3, [sp, #28]
 8021efc:	9b06      	ldr	r3, [sp, #24]
 8021efe:	fb1b fb03 	smulbb	fp, fp, r3
 8021f02:	9b07      	ldr	r3, [sp, #28]
 8021f04:	fb03 b306 	mla	r3, r3, r6, fp
 8021f08:	b29b      	uxth	r3, r3
 8021f0a:	f103 0b01 	add.w	fp, r3, #1
 8021f0e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8021f12:	121b      	asrs	r3, r3, #8
 8021f14:	f80e 3b01 	strb.w	r3, [lr], #1
 8021f18:	e7e7      	b.n	8021eea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8021f1a:	8813      	ldrh	r3, [r2, #0]
 8021f1c:	f10c 0c01 	add.w	ip, ip, #1
 8021f20:	1b5b      	subs	r3, r3, r5
 8021f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f26:	4453      	add	r3, sl
 8021f28:	4418      	add	r0, r3
 8021f2a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8021f2e:	1b5b      	subs	r3, r3, r5
 8021f30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f34:	4453      	add	r3, sl
 8021f36:	441c      	add	r4, r3
 8021f38:	e7d3      	b.n	8021ee2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8021f3a:	2600      	movs	r6, #0
 8021f3c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8021f40:	4546      	cmp	r6, r8
 8021f42:	da1a      	bge.n	8021f7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8021f44:	f100 3eff 	add.w	lr, r0, #4294967295
 8021f48:	4623      	mov	r3, r4
 8021f4a:	eba3 0904 	sub.w	r9, r3, r4
 8021f4e:	4589      	cmp	r9, r1
 8021f50:	da04      	bge.n	8021f5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8021f52:	f813 9b01 	ldrb.w	r9, [r3], #1
 8021f56:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8021f5a:	e7f6      	b.n	8021f4a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8021f5c:	8813      	ldrh	r3, [r2, #0]
 8021f5e:	3601      	adds	r6, #1
 8021f60:	1b5b      	subs	r3, r3, r5
 8021f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f66:	4463      	add	r3, ip
 8021f68:	4418      	add	r0, r3
 8021f6a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8021f6e:	1b5b      	subs	r3, r3, r5
 8021f70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f74:	4463      	add	r3, ip
 8021f76:	441c      	add	r4, r3
 8021f78:	e7e2      	b.n	8021f40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8021f7a:	6838      	ldr	r0, [r7, #0]
 8021f7c:	6803      	ldr	r3, [r0, #0]
 8021f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f80:	4798      	blx	r3
 8021f82:	e791      	b.n	8021ea8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021f84:	f1b9 0f00 	cmp.w	r9, #0
 8021f88:	f47f af78 	bne.w	8021e7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8021f8c:	f010 0f01 	tst.w	r0, #1
 8021f90:	e776      	b.n	8021e80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8021f92:	bf00      	nop
 8021f94:	2000bf18 	.word	0x2000bf18
 8021f98:	2000bf10 	.word	0x2000bf10

08021f9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021f9c:	b510      	push	{r4, lr}
 8021f9e:	4604      	mov	r4, r0
 8021fa0:	2104      	movs	r1, #4
 8021fa2:	f007 fcee 	bl	8029982 <_ZdlPvj>
 8021fa6:	4620      	mov	r0, r4
 8021fa8:	bd10      	pop	{r4, pc}

08021faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021faa:	b510      	push	{r4, lr}
 8021fac:	4604      	mov	r4, r0
 8021fae:	2104      	movs	r1, #4
 8021fb0:	f007 fce7 	bl	8029982 <_ZdlPvj>
 8021fb4:	4620      	mov	r0, r4
 8021fb6:	bd10      	pop	{r4, pc}

08021fb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021fb8:	b510      	push	{r4, lr}
 8021fba:	4604      	mov	r4, r0
 8021fbc:	2104      	movs	r1, #4
 8021fbe:	f007 fce0 	bl	8029982 <_ZdlPvj>
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	bd10      	pop	{r4, pc}

08021fc6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021fc6:	b510      	push	{r4, lr}
 8021fc8:	4604      	mov	r4, r0
 8021fca:	2104      	movs	r1, #4
 8021fcc:	f007 fcd9 	bl	8029982 <_ZdlPvj>
 8021fd0:	4620      	mov	r0, r4
 8021fd2:	bd10      	pop	{r4, pc}

08021fd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021fd4:	b510      	push	{r4, lr}
 8021fd6:	4604      	mov	r4, r0
 8021fd8:	2104      	movs	r1, #4
 8021fda:	f007 fcd2 	bl	8029982 <_ZdlPvj>
 8021fde:	4620      	mov	r0, r4
 8021fe0:	bd10      	pop	{r4, pc}

08021fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021fe2:	b510      	push	{r4, lr}
 8021fe4:	4604      	mov	r4, r0
 8021fe6:	2104      	movs	r1, #4
 8021fe8:	f007 fccb 	bl	8029982 <_ZdlPvj>
 8021fec:	4620      	mov	r0, r4
 8021fee:	bd10      	pop	{r4, pc}

08021ff0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021ff0:	b510      	push	{r4, lr}
 8021ff2:	4604      	mov	r4, r0
 8021ff4:	2104      	movs	r1, #4
 8021ff6:	f007 fcc4 	bl	8029982 <_ZdlPvj>
 8021ffa:	4620      	mov	r0, r4
 8021ffc:	bd10      	pop	{r4, pc}

08021ffe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021ffe:	b510      	push	{r4, lr}
 8022000:	4604      	mov	r4, r0
 8022002:	2104      	movs	r1, #4
 8022004:	f007 fcbd 	bl	8029982 <_ZdlPvj>
 8022008:	4620      	mov	r0, r4
 802200a:	bd10      	pop	{r4, pc}

0802200c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802200c:	b510      	push	{r4, lr}
 802200e:	4604      	mov	r4, r0
 8022010:	2104      	movs	r1, #4
 8022012:	f007 fcb6 	bl	8029982 <_ZdlPvj>
 8022016:	4620      	mov	r0, r4
 8022018:	bd10      	pop	{r4, pc}

0802201a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802201a:	b510      	push	{r4, lr}
 802201c:	4604      	mov	r4, r0
 802201e:	2104      	movs	r1, #4
 8022020:	f007 fcaf 	bl	8029982 <_ZdlPvj>
 8022024:	4620      	mov	r0, r4
 8022026:	bd10      	pop	{r4, pc}

08022028 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022028:	b510      	push	{r4, lr}
 802202a:	4604      	mov	r4, r0
 802202c:	2104      	movs	r1, #4
 802202e:	f007 fca8 	bl	8029982 <_ZdlPvj>
 8022032:	4620      	mov	r0, r4
 8022034:	bd10      	pop	{r4, pc}

08022036 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022036:	b510      	push	{r4, lr}
 8022038:	4604      	mov	r4, r0
 802203a:	2104      	movs	r1, #4
 802203c:	f007 fca1 	bl	8029982 <_ZdlPvj>
 8022040:	4620      	mov	r0, r4
 8022042:	bd10      	pop	{r4, pc}

08022044 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022044:	b510      	push	{r4, lr}
 8022046:	4604      	mov	r4, r0
 8022048:	2104      	movs	r1, #4
 802204a:	f007 fc9a 	bl	8029982 <_ZdlPvj>
 802204e:	4620      	mov	r0, r4
 8022050:	bd10      	pop	{r4, pc}

08022052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022052:	b510      	push	{r4, lr}
 8022054:	4604      	mov	r4, r0
 8022056:	2104      	movs	r1, #4
 8022058:	f007 fc93 	bl	8029982 <_ZdlPvj>
 802205c:	4620      	mov	r0, r4
 802205e:	bd10      	pop	{r4, pc}

08022060 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022060:	b510      	push	{r4, lr}
 8022062:	4604      	mov	r4, r0
 8022064:	2104      	movs	r1, #4
 8022066:	f007 fc8c 	bl	8029982 <_ZdlPvj>
 802206a:	4620      	mov	r0, r4
 802206c:	bd10      	pop	{r4, pc}

0802206e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802206e:	b510      	push	{r4, lr}
 8022070:	4604      	mov	r4, r0
 8022072:	2104      	movs	r1, #4
 8022074:	f007 fc85 	bl	8029982 <_ZdlPvj>
 8022078:	4620      	mov	r0, r4
 802207a:	bd10      	pop	{r4, pc}

0802207c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 802207c:	b510      	push	{r4, lr}
 802207e:	4604      	mov	r4, r0
 8022080:	2104      	movs	r1, #4
 8022082:	f007 fc7e 	bl	8029982 <_ZdlPvj>
 8022086:	4620      	mov	r0, r4
 8022088:	bd10      	pop	{r4, pc}

0802208a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802208a:	b510      	push	{r4, lr}
 802208c:	4604      	mov	r4, r0
 802208e:	2104      	movs	r1, #4
 8022090:	f007 fc77 	bl	8029982 <_ZdlPvj>
 8022094:	4620      	mov	r0, r4
 8022096:	bd10      	pop	{r4, pc}

08022098 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022098:	b510      	push	{r4, lr}
 802209a:	4604      	mov	r4, r0
 802209c:	2104      	movs	r1, #4
 802209e:	f007 fc70 	bl	8029982 <_ZdlPvj>
 80220a2:	4620      	mov	r0, r4
 80220a4:	bd10      	pop	{r4, pc}

080220a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80220a6:	b510      	push	{r4, lr}
 80220a8:	4604      	mov	r4, r0
 80220aa:	2104      	movs	r1, #4
 80220ac:	f007 fc69 	bl	8029982 <_ZdlPvj>
 80220b0:	4620      	mov	r0, r4
 80220b2:	bd10      	pop	{r4, pc}

080220b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80220b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220b8:	4d9e      	ldr	r5, [pc, #632]	; (8022334 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80220ba:	4690      	mov	r8, r2
 80220bc:	b08f      	sub	sp, #60	; 0x3c
 80220be:	4604      	mov	r4, r0
 80220c0:	682a      	ldr	r2, [r5, #0]
 80220c2:	4689      	mov	r9, r1
 80220c4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80220c8:	2a02      	cmp	r2, #2
 80220ca:	d106      	bne.n	80220da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80220cc:	4b9a      	ldr	r3, [pc, #616]	; (8022338 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80220ce:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80220d2:	4a9a      	ldr	r2, [pc, #616]	; (802233c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80220d4:	489a      	ldr	r0, [pc, #616]	; (8022340 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 80220d6:	f007 fc7f 	bl	80299d8 <__assert_func>
 80220da:	ae0e      	add	r6, sp, #56	; 0x38
 80220dc:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80220e0:	4630      	mov	r0, r6
 80220e2:	f7fe f8b3 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80220e6:	6823      	ldr	r3, [r4, #0]
 80220e8:	4607      	mov	r7, r0
 80220ea:	4620      	mov	r0, r4
 80220ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220ee:	4798      	blx	r3
 80220f0:	4287      	cmp	r7, r0
 80220f2:	d004      	beq.n	80220fe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80220f4:	4b93      	ldr	r3, [pc, #588]	; (8022344 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 80220f6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80220fa:	4a90      	ldr	r2, [pc, #576]	; (802233c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80220fc:	e7ea      	b.n	80220d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80220fe:	4630      	mov	r0, r6
 8022100:	f7fe f820 	bl	8020144 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022104:	4607      	mov	r7, r0
 8022106:	b920      	cbnz	r0, 8022112 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022108:	4b8f      	ldr	r3, [pc, #572]	; (8022348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 802210a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 802210e:	4a8b      	ldr	r2, [pc, #556]	; (802233c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022110:	e7e0      	b.n	80220d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022112:	f8d8 0000 	ldr.w	r0, [r8]
 8022116:	ab06      	add	r3, sp, #24
 8022118:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802211c:	f9b8 a000 	ldrsh.w	sl, [r8]
 8022120:	c303      	stmia	r3!, {r0, r1}
 8022122:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022126:	ab08      	add	r3, sp, #32
 8022128:	f8d9 0000 	ldr.w	r0, [r9]
 802212c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8022130:	c303      	stmia	r3!, {r0, r1}
 8022132:	4630      	mov	r0, r6
 8022134:	f7fd fefe 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022138:	4680      	mov	r8, r0
 802213a:	4630      	mov	r0, r6
 802213c:	4e83      	ldr	r6, [pc, #524]	; (802234c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 802213e:	f7fd ff33 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022142:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8022146:	f10d 0920 	add.w	r9, sp, #32
 802214a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 802214e:	a806      	add	r0, sp, #24
 8022150:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8022154:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8022158:	f7fb fad0 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802215c:	4648      	mov	r0, r9
 802215e:	f7fb facd 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022162:	a80a      	add	r0, sp, #40	; 0x28
 8022164:	f7fb faca 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022168:	4b79      	ldr	r3, [pc, #484]	; (8022350 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 802216a:	2100      	movs	r1, #0
 802216c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8022170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022174:	4648      	mov	r0, r9
 8022176:	910c      	str	r1, [sp, #48]	; 0x30
 8022178:	a90c      	add	r1, sp, #48	; 0x30
 802217a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802217e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022182:	f7f8 f8ab 	bl	801a2dc <_ZN8touchgfx4RectaNERKS0_>
 8022186:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 802218a:	9602      	str	r6, [sp, #8]
 802218c:	f1bc 0f00 	cmp.w	ip, #0
 8022190:	f000 80a4 	beq.w	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022194:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8022198:	2e00      	cmp	r6, #0
 802219a:	f000 809f 	beq.w	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802219e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80221a2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80221a6:	4288      	cmp	r0, r1
 80221a8:	db36      	blt.n	8022218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80221aa:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80221ae:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80221b2:	429a      	cmp	r2, r3
 80221b4:	db30      	blt.n	8022218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80221b6:	4460      	add	r0, ip
 80221b8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80221bc:	4461      	add	r1, ip
 80221be:	b200      	sxth	r0, r0
 80221c0:	b209      	sxth	r1, r1
 80221c2:	4288      	cmp	r0, r1
 80221c4:	dc28      	bgt.n	8022218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80221c6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80221ca:	4432      	add	r2, r6
 80221cc:	440b      	add	r3, r1
 80221ce:	b212      	sxth	r2, r2
 80221d0:	b21b      	sxth	r3, r3
 80221d2:	429a      	cmp	r2, r3
 80221d4:	dc20      	bgt.n	8022218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80221d6:	6823      	ldr	r3, [r4, #0]
 80221d8:	4620      	mov	r0, r4
 80221da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221dc:	4798      	blx	r3
 80221de:	4682      	mov	sl, r0
 80221e0:	6828      	ldr	r0, [r5, #0]
 80221e2:	6803      	ldr	r3, [r0, #0]
 80221e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221e6:	4798      	blx	r3
 80221e8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80221ec:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80221f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80221f4:	9303      	str	r3, [sp, #12]
 80221f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80221fa:	1a9b      	subs	r3, r3, r2
 80221fc:	b29b      	uxth	r3, r3
 80221fe:	b21c      	sxth	r4, r3
 8022200:	2c00      	cmp	r4, #0
 8022202:	dc0e      	bgt.n	8022222 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8022204:	b134      	cbz	r4, 8022214 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8022206:	f8ad 2020 	strh.w	r2, [sp, #32]
 802220a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802220e:	4413      	add	r3, r2
 8022210:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8022214:	463c      	mov	r4, r7
 8022216:	e00b      	b.n	8022230 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8022218:	4b4e      	ldr	r3, [pc, #312]	; (8022354 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 802221a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802221e:	4a47      	ldr	r2, [pc, #284]	; (802233c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022220:	e758      	b.n	80220d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022222:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022226:	ebab 0303 	sub.w	r3, fp, r3
 802222a:	443c      	add	r4, r7
 802222c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022230:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022234:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022238:	1a9b      	subs	r3, r3, r2
 802223a:	b29b      	uxth	r3, r3
 802223c:	b219      	sxth	r1, r3
 802223e:	2900      	cmp	r1, #0
 8022240:	dd50      	ble.n	80222e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8022242:	9a03      	ldr	r2, [sp, #12]
 8022244:	fb02 4401 	mla	r4, r2, r1, r4
 8022248:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 802224c:	1ad3      	subs	r3, r2, r3
 802224e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022252:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022256:	f1bc 0f00 	cmp.w	ip, #0
 802225a:	dd3f      	ble.n	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802225c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022260:	2e00      	cmp	r6, #0
 8022262:	dd3b      	ble.n	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022264:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8022268:	2203      	movs	r2, #3
 802226a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 802226e:	fb0a f801 	mul.w	r8, sl, r1
 8022272:	fb13 8802 	smlabb	r8, r3, r2, r8
 8022276:	9a02      	ldr	r2, [sp, #8]
 8022278:	4480      	add	r8, r0
 802227a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 802227e:	8812      	ldrh	r2, [r2, #0]
 8022280:	4584      	cmp	ip, r0
 8022282:	eba2 0303 	sub.w	r3, r2, r3
 8022286:	bfa8      	it	ge
 8022288:	4684      	movge	ip, r0
 802228a:	459c      	cmp	ip, r3
 802228c:	bfa8      	it	ge
 802228e:	469c      	movge	ip, r3
 8022290:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8022294:	429e      	cmp	r6, r3
 8022296:	bfa8      	it	ge
 8022298:	461e      	movge	r6, r3
 802229a:	4b2d      	ldr	r3, [pc, #180]	; (8022350 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 802229c:	881b      	ldrh	r3, [r3, #0]
 802229e:	1a59      	subs	r1, r3, r1
 80222a0:	4633      	mov	r3, r6
 80222a2:	428e      	cmp	r6, r1
 80222a4:	bfa8      	it	ge
 80222a6:	460b      	movge	r3, r1
 80222a8:	4562      	cmp	r2, ip
 80222aa:	9302      	str	r3, [sp, #8]
 80222ac:	d12d      	bne.n	802230a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 80222ae:	455a      	cmp	r2, fp
 80222b0:	d12b      	bne.n	802230a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 80222b2:	6828      	ldr	r0, [r5, #0]
 80222b4:	6803      	ldr	r3, [r0, #0]
 80222b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222b8:	4798      	blx	r3
 80222ba:	07c3      	lsls	r3, r0, #31
 80222bc:	d51b      	bpl.n	80222f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 80222be:	6828      	ldr	r0, [r5, #0]
 80222c0:	9b02      	ldr	r3, [sp, #8]
 80222c2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80222c6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80222ca:	6803      	ldr	r3, [r0, #0]
 80222cc:	f8cd b000 	str.w	fp, [sp]
 80222d0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80222d2:	4623      	mov	r3, r4
 80222d4:	e899 0006 	ldmia.w	r9, {r1, r2}
 80222d8:	47a8      	blx	r5
 80222da:	4607      	mov	r7, r0
 80222dc:	4638      	mov	r0, r7
 80222de:	b00f      	add	sp, #60	; 0x3c
 80222e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222e4:	bf1f      	itttt	ne
 80222e6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 80222ea:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80222ee:	189b      	addne	r3, r3, r2
 80222f0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80222f4:	e7ad      	b.n	8022252 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 80222f6:	6828      	ldr	r0, [r5, #0]
 80222f8:	4642      	mov	r2, r8
 80222fa:	4621      	mov	r1, r4
 80222fc:	6803      	ldr	r3, [r0, #0]
 80222fe:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8022300:	9b02      	ldr	r3, [sp, #8]
 8022302:	fb03 f30a 	mul.w	r3, r3, sl
 8022306:	47a8      	blx	r5
 8022308:	e7e8      	b.n	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802230a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 802230e:	f04f 0900 	mov.w	r9, #0
 8022312:	9b02      	ldr	r3, [sp, #8]
 8022314:	454b      	cmp	r3, r9
 8022316:	dde1      	ble.n	80222dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022318:	6828      	ldr	r0, [r5, #0]
 802231a:	4642      	mov	r2, r8
 802231c:	4621      	mov	r1, r4
 802231e:	44d0      	add	r8, sl
 8022320:	6803      	ldr	r3, [r0, #0]
 8022322:	f109 0901 	add.w	r9, r9, #1
 8022326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022328:	461e      	mov	r6, r3
 802232a:	465b      	mov	r3, fp
 802232c:	47b0      	blx	r6
 802232e:	9b03      	ldr	r3, [sp, #12]
 8022330:	441c      	add	r4, r3
 8022332:	e7ee      	b.n	8022312 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8022334:	2000bf18 	.word	0x2000bf18
 8022338:	0802ee55 	.word	0x0802ee55
 802233c:	0802f635 	.word	0x0802f635
 8022340:	0802ee23 	.word	0x0802ee23
 8022344:	0802ef09 	.word	0x0802ef09
 8022348:	0802ef5e 	.word	0x0802ef5e
 802234c:	2000bf10 	.word	0x2000bf10
 8022350:	2000bf12 	.word	0x2000bf12
 8022354:	0802ef9c 	.word	0x0802ef9c

08022358 <_ZN8touchgfx8LCD24bppC1Ev>:
 8022358:	4a0b      	ldr	r2, [pc, #44]	; (8022388 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 802235a:	6002      	str	r2, [r0, #0]
 802235c:	2200      	movs	r2, #0
 802235e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022362:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022366:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802236a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802236e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022372:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022376:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802237a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802237e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022382:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022386:	4770      	bx	lr
 8022388:	0802f280 	.word	0x0802f280

0802238c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022390:	b093      	sub	sp, #76	; 0x4c
 8022392:	880c      	ldrh	r4, [r1, #0]
 8022394:	4605      	mov	r5, r0
 8022396:	460f      	mov	r7, r1
 8022398:	4691      	mov	r9, r2
 802239a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 802239e:	b12c      	cbz	r4, 80223ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80223a0:	4b71      	ldr	r3, [pc, #452]	; (8022568 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80223a2:	2167      	movs	r1, #103	; 0x67
 80223a4:	4a71      	ldr	r2, [pc, #452]	; (802256c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80223a6:	4872      	ldr	r0, [pc, #456]	; (8022570 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80223a8:	f007 fb16 	bl	80299d8 <__assert_func>
 80223ac:	6810      	ldr	r0, [r2, #0]
 80223ae:	ae0e      	add	r6, sp, #56	; 0x38
 80223b0:	6851      	ldr	r1, [r2, #4]
 80223b2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8022578 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 80223b6:	c603      	stmia	r6!, {r0, r1}
 80223b8:	6818      	ldr	r0, [r3, #0]
 80223ba:	ae10      	add	r6, sp, #64	; 0x40
 80223bc:	6859      	ldr	r1, [r3, #4]
 80223be:	c603      	stmia	r6!, {r0, r1}
 80223c0:	a80e      	add	r0, sp, #56	; 0x38
 80223c2:	f7fb f99b 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223c6:	4649      	mov	r1, r9
 80223c8:	a810      	add	r0, sp, #64	; 0x40
 80223ca:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8022574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80223ce:	f7fb f97d 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80223d6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80223da:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80223de:	f8d9 0000 	ldr.w	r0, [r9]
 80223e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80223e6:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 80223ea:	440d      	add	r5, r1
 80223ec:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80223f0:	440a      	add	r2, r1
 80223f2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80223f6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80223fa:	4413      	add	r3, r2
 80223fc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022400:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8022404:	930b      	str	r3, [sp, #44]	; 0x2c
 8022406:	6803      	ldr	r3, [r0, #0]
 8022408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802240c:	4798      	blx	r3
 802240e:	2801      	cmp	r0, #1
 8022410:	d11e      	bne.n	8022450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 8022412:	220b      	movs	r2, #11
 8022414:	9008      	str	r0, [sp, #32]
 8022416:	b2b6      	uxth	r6, r6
 8022418:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802241c:	9207      	str	r2, [sp, #28]
 802241e:	4629      	mov	r1, r5
 8022420:	f8ba 2000 	ldrh.w	r2, [sl]
 8022424:	f8cd 8010 	str.w	r8, [sp, #16]
 8022428:	9601      	str	r6, [sp, #4]
 802242a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 802242e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8022432:	9203      	str	r2, [sp, #12]
 8022434:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8022438:	9202      	str	r2, [sp, #8]
 802243a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 802243e:	9200      	str	r2, [sp, #0]
 8022440:	463a      	mov	r2, r7
 8022442:	f8d9 0000 	ldr.w	r0, [r9]
 8022446:	f7f8 fb97 	bl	801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802244a:	b013      	add	sp, #76	; 0x4c
 802244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022450:	f8d9 0000 	ldr.w	r0, [r9]
 8022454:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8022458:	6803      	ldr	r3, [r0, #0]
 802245a:	6a1b      	ldr	r3, [r3, #32]
 802245c:	4798      	blx	r3
 802245e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8022462:	f8ba 3000 	ldrh.w	r3, [sl]
 8022466:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802246a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802246e:	fb01 2303 	mla	r3, r1, r3, r2
 8022472:	4621      	mov	r1, r4
 8022474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022478:	4418      	add	r0, r3
 802247a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 802247e:	930c      	str	r3, [sp, #48]	; 0x30
 8022480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022482:	4299      	cmp	r1, r3
 8022484:	da6a      	bge.n	802255c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8022486:	1cc2      	adds	r2, r0, #3
 8022488:	46aa      	mov	sl, r5
 802248a:	ebaa 0305 	sub.w	r3, sl, r5
 802248e:	429e      	cmp	r6, r3
 8022490:	dd55      	ble.n	802253e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8022492:	2404      	movs	r4, #4
 8022494:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8022498:	fb14 4303 	smlabb	r3, r4, r3, r4
 802249c:	eb07 0e03 	add.w	lr, r7, r3
 80224a0:	f89e 4003 	ldrb.w	r4, [lr, #3]
 80224a4:	b184      	cbz	r4, 80224c8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 80224a6:	2cff      	cmp	r4, #255	; 0xff
 80224a8:	f817 b003 	ldrb.w	fp, [r7, r3]
 80224ac:	d10e      	bne.n	80224cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80224ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80224b2:	d10b      	bne.n	80224cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 80224b4:	f802 bc03 	strb.w	fp, [r2, #-3]
 80224b8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80224bc:	f802 3c02 	strb.w	r3, [r2, #-2]
 80224c0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80224c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80224c8:	3203      	adds	r2, #3
 80224ca:	e7de      	b.n	802248a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 80224cc:	fb08 f404 	mul.w	r4, r8, r4
 80224d0:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 80224d4:	1c63      	adds	r3, r4, #1
 80224d6:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80224da:	121b      	asrs	r3, r3, #8
 80224dc:	b29c      	uxth	r4, r3
 80224de:	43db      	mvns	r3, r3
 80224e0:	fb1b fb04 	smulbb	fp, fp, r4
 80224e4:	b2db      	uxtb	r3, r3
 80224e6:	fb0c bc03 	mla	ip, ip, r3, fp
 80224ea:	fa1f fc8c 	uxth.w	ip, ip
 80224ee:	f10c 0b01 	add.w	fp, ip, #1
 80224f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80224f6:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 80224fa:	fb1b fb03 	smulbb	fp, fp, r3
 80224fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022502:	f802 cc03 	strb.w	ip, [r2, #-3]
 8022506:	f89e c001 	ldrb.w	ip, [lr, #1]
 802250a:	fb0c bc04 	mla	ip, ip, r4, fp
 802250e:	fa1f fc8c 	uxth.w	ip, ip
 8022512:	f10c 0b01 	add.w	fp, ip, #1
 8022516:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802251a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802251e:	f802 cc02 	strb.w	ip, [r2, #-2]
 8022522:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8022526:	f89e e002 	ldrb.w	lr, [lr, #2]
 802252a:	fb1c f303 	smulbb	r3, ip, r3
 802252e:	fb0e 3304 	mla	r3, lr, r4, r3
 8022532:	b29b      	uxth	r3, r3
 8022534:	1c5c      	adds	r4, r3, #1
 8022536:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802253a:	121b      	asrs	r3, r3, #8
 802253c:	e7c2      	b.n	80224c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 802253e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022540:	3101      	adds	r1, #1
 8022542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022544:	881b      	ldrh	r3, [r3, #0]
 8022546:	1b9b      	subs	r3, r3, r6
 8022548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802254c:	4413      	add	r3, r2
 802254e:	4418      	add	r0, r3
 8022550:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8022554:	1b9b      	subs	r3, r3, r6
 8022556:	444b      	add	r3, r9
 8022558:	441d      	add	r5, r3
 802255a:	e791      	b.n	8022480 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 802255c:	4b05      	ldr	r3, [pc, #20]	; (8022574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 802255e:	6818      	ldr	r0, [r3, #0]
 8022560:	6803      	ldr	r3, [r0, #0]
 8022562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022564:	4798      	blx	r3
 8022566:	e770      	b.n	802244a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8022568:	0802ed87 	.word	0x0802ed87
 802256c:	0802f457 	.word	0x0802f457
 8022570:	0802ee23 	.word	0x0802ee23
 8022574:	2000bf18 	.word	0x2000bf18
 8022578:	2000bf10 	.word	0x2000bf10

0802257c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022580:	4614      	mov	r4, r2
 8022582:	880a      	ldrh	r2, [r1, #0]
 8022584:	b091      	sub	sp, #68	; 0x44
 8022586:	4680      	mov	r8, r0
 8022588:	2a01      	cmp	r2, #1
 802258a:	460e      	mov	r6, r1
 802258c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8022590:	d005      	beq.n	802259e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 8022592:	4b6d      	ldr	r3, [pc, #436]	; (8022748 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8022594:	21b5      	movs	r1, #181	; 0xb5
 8022596:	4a6d      	ldr	r2, [pc, #436]	; (802274c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8022598:	486d      	ldr	r0, [pc, #436]	; (8022750 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 802259a:	f007 fa1d 	bl	80299d8 <__assert_func>
 802259e:	6820      	ldr	r0, [r4, #0]
 80225a0:	ad0c      	add	r5, sp, #48	; 0x30
 80225a2:	6861      	ldr	r1, [r4, #4]
 80225a4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8022754 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 80225a8:	c503      	stmia	r5!, {r0, r1}
 80225aa:	6818      	ldr	r0, [r3, #0]
 80225ac:	ad0e      	add	r5, sp, #56	; 0x38
 80225ae:	6859      	ldr	r1, [r3, #4]
 80225b0:	c503      	stmia	r5!, {r0, r1}
 80225b2:	a80c      	add	r0, sp, #48	; 0x30
 80225b4:	f7fb f8a2 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80225b8:	4621      	mov	r1, r4
 80225ba:	a80e      	add	r0, sp, #56	; 0x38
 80225bc:	f7fb f886 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80225c0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80225c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80225c8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80225cc:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80225d0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80225d4:	eb08 0401 	add.w	r4, r8, r1
 80225d8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80225dc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8022758 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 80225e0:	440a      	add	r2, r1
 80225e2:	f8d8 0000 	ldr.w	r0, [r8]
 80225e6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80225ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80225ee:	4413      	add	r3, r2
 80225f0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80225f4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80225f8:	930a      	str	r3, [sp, #40]	; 0x28
 80225fa:	6803      	ldr	r3, [r0, #0]
 80225fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022600:	4798      	blx	r3
 8022602:	2801      	cmp	r0, #1
 8022604:	d11e      	bne.n	8022644 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 8022606:	220b      	movs	r2, #11
 8022608:	9008      	str	r0, [sp, #32]
 802260a:	b2ad      	uxth	r5, r5
 802260c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022610:	9207      	str	r2, [sp, #28]
 8022612:	4621      	mov	r1, r4
 8022614:	f8b9 2000 	ldrh.w	r2, [r9]
 8022618:	9501      	str	r5, [sp, #4]
 802261a:	9206      	str	r2, [sp, #24]
 802261c:	2200      	movs	r2, #0
 802261e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8022622:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022626:	9203      	str	r2, [sp, #12]
 8022628:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802262c:	9202      	str	r2, [sp, #8]
 802262e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022632:	9200      	str	r2, [sp, #0]
 8022634:	4632      	mov	r2, r6
 8022636:	f8d8 0000 	ldr.w	r0, [r8]
 802263a:	f7f8 fa9d 	bl	801ab78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802263e:	b011      	add	sp, #68	; 0x44
 8022640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022644:	f8d8 0000 	ldr.w	r0, [r8]
 8022648:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 802264c:	6803      	ldr	r3, [r0, #0]
 802264e:	6a1b      	ldr	r3, [r3, #32]
 8022650:	4798      	blx	r3
 8022652:	f8b9 3000 	ldrh.w	r3, [r9]
 8022656:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 802265a:	f04f 0e00 	mov.w	lr, #0
 802265e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8022662:	fa1f f987 	uxth.w	r9, r7
 8022666:	fb01 2303 	mla	r3, r1, r3, r2
 802266a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 802266e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022672:	b289      	uxth	r1, r1
 8022674:	4418      	add	r0, r3
 8022676:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 802267a:	930b      	str	r3, [sp, #44]	; 0x2c
 802267c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802267e:	459e      	cmp	lr, r3
 8022680:	da5c      	bge.n	802273c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 8022682:	1cc3      	adds	r3, r0, #3
 8022684:	46a2      	mov	sl, r4
 8022686:	ebaa 0204 	sub.w	r2, sl, r4
 802268a:	4295      	cmp	r5, r2
 802268c:	dd46      	ble.n	802271c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 802268e:	f04f 0c03 	mov.w	ip, #3
 8022692:	f04f 0b04 	mov.w	fp, #4
 8022696:	f81a 2b01 	ldrb.w	r2, [sl], #1
 802269a:	2fff      	cmp	r7, #255	; 0xff
 802269c:	fb1c b202 	smlabb	r2, ip, r2, fp
 80226a0:	eb06 0c02 	add.w	ip, r6, r2
 80226a4:	f816 b002 	ldrb.w	fp, [r6, r2]
 80226a8:	d02f      	beq.n	802270a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 80226aa:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80226ae:	fb12 f201 	smulbb	r2, r2, r1
 80226b2:	fb0b 2209 	mla	r2, fp, r9, r2
 80226b6:	b292      	uxth	r2, r2
 80226b8:	f102 0b01 	add.w	fp, r2, #1
 80226bc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80226c0:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 80226c4:	fb1b fb01 	smulbb	fp, fp, r1
 80226c8:	1212      	asrs	r2, r2, #8
 80226ca:	f803 2c03 	strb.w	r2, [r3, #-3]
 80226ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80226d2:	fb02 b209 	mla	r2, r2, r9, fp
 80226d6:	b292      	uxth	r2, r2
 80226d8:	f102 0b01 	add.w	fp, r2, #1
 80226dc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80226e0:	1212      	asrs	r2, r2, #8
 80226e2:	f803 2c02 	strb.w	r2, [r3, #-2]
 80226e6:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80226ea:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 80226ee:	fb1c fc01 	smulbb	ip, ip, r1
 80226f2:	fb02 c209 	mla	r2, r2, r9, ip
 80226f6:	b292      	uxth	r2, r2
 80226f8:	f102 0c01 	add.w	ip, r2, #1
 80226fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022700:	1212      	asrs	r2, r2, #8
 8022702:	f803 2c01 	strb.w	r2, [r3, #-1]
 8022706:	3303      	adds	r3, #3
 8022708:	e7bd      	b.n	8022686 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 802270a:	f803 bc03 	strb.w	fp, [r3, #-3]
 802270e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022712:	f803 2c02 	strb.w	r2, [r3, #-2]
 8022716:	f89c 2002 	ldrb.w	r2, [ip, #2]
 802271a:	e7f2      	b.n	8022702 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 802271c:	4b0d      	ldr	r3, [pc, #52]	; (8022754 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 802271e:	f10e 0e01 	add.w	lr, lr, #1
 8022722:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022724:	881b      	ldrh	r3, [r3, #0]
 8022726:	1b5b      	subs	r3, r3, r5
 8022728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802272c:	4413      	add	r3, r2
 802272e:	4418      	add	r0, r3
 8022730:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022734:	1b5b      	subs	r3, r3, r5
 8022736:	4443      	add	r3, r8
 8022738:	441c      	add	r4, r3
 802273a:	e79f      	b.n	802267c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 802273c:	4b06      	ldr	r3, [pc, #24]	; (8022758 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802273e:	6818      	ldr	r0, [r3, #0]
 8022740:	6803      	ldr	r3, [r0, #0]
 8022742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022744:	4798      	blx	r3
 8022746:	e77a      	b.n	802263e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 8022748:	0802ec93 	.word	0x0802ec93
 802274c:	0802f34a 	.word	0x0802f34a
 8022750:	0802ee23 	.word	0x0802ee23
 8022754:	2000bf10 	.word	0x2000bf10
 8022758:	2000bf18 	.word	0x2000bf18

0802275c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802275c:	b570      	push	{r4, r5, r6, lr}
 802275e:	780d      	ldrb	r5, [r1, #0]
 8022760:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8022764:	2d01      	cmp	r5, #1
 8022766:	d00d      	beq.n	8022784 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8022768:	d307      	bcc.n	802277a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 802276a:	2d02      	cmp	r5, #2
 802276c:	d10f      	bne.n	802278e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 802276e:	4b08      	ldr	r3, [pc, #32]	; (8022790 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8022770:	215a      	movs	r1, #90	; 0x5a
 8022772:	4a08      	ldr	r2, [pc, #32]	; (8022794 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8022774:	4808      	ldr	r0, [pc, #32]	; (8022798 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8022776:	f007 f92f 	bl	80299d8 <__assert_func>
 802277a:	9404      	str	r4, [sp, #16]
 802277c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022780:	f7ff be04 	b.w	802238c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022784:	9404      	str	r4, [sp, #16]
 8022786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802278a:	f7ff bef7 	b.w	802257c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802278e:	bd70      	pop	{r4, r5, r6, pc}
 8022790:	0802ec48 	.word	0x0802ec48
 8022794:	0802f2c8 	.word	0x0802f2c8
 8022798:	0802ee23 	.word	0x0802ee23

0802279c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802279c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227a0:	b08b      	sub	sp, #44	; 0x2c
 80227a2:	460c      	mov	r4, r1
 80227a4:	4680      	mov	r8, r0
 80227a6:	469a      	mov	sl, r3
 80227a8:	6808      	ldr	r0, [r1, #0]
 80227aa:	ab06      	add	r3, sp, #24
 80227ac:	6849      	ldr	r1, [r1, #4]
 80227ae:	c303      	stmia	r3!, {r0, r1}
 80227b0:	6810      	ldr	r0, [r2, #0]
 80227b2:	ab08      	add	r3, sp, #32
 80227b4:	6851      	ldr	r1, [r2, #4]
 80227b6:	c303      	stmia	r3!, {r0, r1}
 80227b8:	a806      	add	r0, sp, #24
 80227ba:	f7fa ff9f 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80227be:	4621      	mov	r1, r4
 80227c0:	a808      	add	r0, sp, #32
 80227c2:	4c61      	ldr	r4, [pc, #388]	; (8022948 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80227c4:	f7fa ff82 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80227c8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80227cc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80227d0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80227d4:	6820      	ldr	r0, [r4, #0]
 80227d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80227da:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 80227de:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 80227e2:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80227e6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80227ea:	440a      	add	r2, r1
 80227ec:	f8ad 2020 	strh.w	r2, [sp, #32]
 80227f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80227f4:	4413      	add	r3, r2
 80227f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80227fa:	6803      	ldr	r3, [r0, #0]
 80227fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227fe:	4798      	blx	r3
 8022800:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022804:	d118      	bne.n	8022838 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8022806:	f010 0f20 	tst.w	r0, #32
 802280a:	6820      	ldr	r0, [r4, #0]
 802280c:	d017      	beq.n	802283e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 802280e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8022812:	b2bf      	uxth	r7, r7
 8022814:	6801      	ldr	r1, [r0, #0]
 8022816:	9402      	str	r4, [sp, #8]
 8022818:	fa1f f489 	uxth.w	r4, r9
 802281c:	f8cd a00c 	str.w	sl, [sp, #12]
 8022820:	9401      	str	r4, [sp, #4]
 8022822:	9700      	str	r7, [sp, #0]
 8022824:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022828:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802282a:	4641      	mov	r1, r8
 802282c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022830:	47a0      	blx	r4
 8022832:	b00b      	add	sp, #44	; 0x2c
 8022834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022838:	f010 0f40 	tst.w	r0, #64	; 0x40
 802283c:	e7e5      	b.n	802280a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 802283e:	6803      	ldr	r3, [r0, #0]
 8022840:	6a1b      	ldr	r3, [r3, #32]
 8022842:	4798      	blx	r3
 8022844:	4b41      	ldr	r3, [pc, #260]	; (802294c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 8022846:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802284a:	f04f 0c00 	mov.w	ip, #0
 802284e:	881a      	ldrh	r2, [r3, #0]
 8022850:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8022854:	fb04 1202 	mla	r2, r4, r2, r1
 8022858:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802285c:	4410      	add	r0, r2
 802285e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 8022862:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8022866:	0092      	lsls	r2, r2, #2
 8022868:	9105      	str	r1, [sp, #20]
 802286a:	9204      	str	r2, [sp, #16]
 802286c:	45cc      	cmp	ip, r9
 802286e:	da65      	bge.n	802293c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8022870:	1cc4      	adds	r4, r0, #3
 8022872:	f108 0504 	add.w	r5, r8, #4
 8022876:	f04f 0e00 	mov.w	lr, #0
 802287a:	45be      	cmp	lr, r7
 802287c:	da4d      	bge.n	802291a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 802287e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022882:	b181      	cbz	r1, 80228a6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8022884:	29ff      	cmp	r1, #255	; 0xff
 8022886:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 802288a:	d111      	bne.n	80228b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802288c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022890:	d10e      	bne.n	80228b0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8022892:	f804 bc03 	strb.w	fp, [r4, #-3]
 8022896:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 802289a:	f804 2c02 	strb.w	r2, [r4, #-2]
 802289e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80228a2:	f804 2c01 	strb.w	r2, [r4, #-1]
 80228a6:	f10e 0e01 	add.w	lr, lr, #1
 80228aa:	3403      	adds	r4, #3
 80228ac:	3504      	adds	r5, #4
 80228ae:	e7e4      	b.n	802287a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80228b0:	fb0a f101 	mul.w	r1, sl, r1
 80228b4:	1c4a      	adds	r2, r1, #1
 80228b6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80228ba:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80228be:	1212      	asrs	r2, r2, #8
 80228c0:	b296      	uxth	r6, r2
 80228c2:	43d2      	mvns	r2, r2
 80228c4:	fb1b fb06 	smulbb	fp, fp, r6
 80228c8:	b2d2      	uxtb	r2, r2
 80228ca:	fb01 b102 	mla	r1, r1, r2, fp
 80228ce:	b289      	uxth	r1, r1
 80228d0:	f101 0b01 	add.w	fp, r1, #1
 80228d4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80228d8:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 80228dc:	fb1b fb02 	smulbb	fp, fp, r2
 80228e0:	1209      	asrs	r1, r1, #8
 80228e2:	f804 1c03 	strb.w	r1, [r4, #-3]
 80228e6:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 80228ea:	fb01 b106 	mla	r1, r1, r6, fp
 80228ee:	b289      	uxth	r1, r1
 80228f0:	f101 0b01 	add.w	fp, r1, #1
 80228f4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80228f8:	1209      	asrs	r1, r1, #8
 80228fa:	f804 1c02 	strb.w	r1, [r4, #-2]
 80228fe:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022902:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8022906:	fb11 f202 	smulbb	r2, r1, r2
 802290a:	fb0b 2206 	mla	r2, fp, r6, r2
 802290e:	b292      	uxth	r2, r2
 8022910:	1c56      	adds	r6, r2, #1
 8022912:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022916:	1212      	asrs	r2, r2, #8
 8022918:	e7c3      	b.n	80228a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 802291a:	881a      	ldrh	r2, [r3, #0]
 802291c:	f10c 0c01 	add.w	ip, ip, #1
 8022920:	9905      	ldr	r1, [sp, #20]
 8022922:	1bd2      	subs	r2, r2, r7
 8022924:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022928:	440a      	add	r2, r1
 802292a:	9904      	ldr	r1, [sp, #16]
 802292c:	4410      	add	r0, r2
 802292e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8022932:	1bd2      	subs	r2, r2, r7
 8022934:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8022938:	4490      	add	r8, r2
 802293a:	e797      	b.n	802286c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 802293c:	4b02      	ldr	r3, [pc, #8]	; (8022948 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802293e:	6818      	ldr	r0, [r3, #0]
 8022940:	6803      	ldr	r3, [r0, #0]
 8022942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022944:	4798      	blx	r3
 8022946:	e774      	b.n	8022832 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8022948:	2000bf18 	.word	0x2000bf18
 802294c:	2000bf10 	.word	0x2000bf10

08022950 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022954:	b085      	sub	sp, #20
 8022956:	4606      	mov	r6, r0
 8022958:	460c      	mov	r4, r1
 802295a:	4691      	mov	r9, r2
 802295c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022960:	4698      	mov	r8, r3
 8022962:	b385      	cbz	r5, 80229c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8022964:	4608      	mov	r0, r1
 8022966:	f7fd fae5 	bl	801ff34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802296a:	4607      	mov	r7, r0
 802296c:	4620      	mov	r0, r4
 802296e:	f7fd fb1b 	bl	801ffa8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022972:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022976:	4620      	mov	r0, r4
 8022978:	f8ad 9008 	strh.w	r9, [sp, #8]
 802297c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022980:	f8ad 700c 	strh.w	r7, [sp, #12]
 8022984:	f7fd fc62 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022988:	2801      	cmp	r0, #1
 802298a:	d00f      	beq.n	80229ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802298c:	4620      	mov	r0, r4
 802298e:	f7fd fc5d 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022992:	2802      	cmp	r0, #2
 8022994:	d00a      	beq.n	80229ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8022996:	4620      	mov	r0, r4
 8022998:	f7fd fc58 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 802299c:	280b      	cmp	r0, #11
 802299e:	d005      	beq.n	80229ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80229a0:	4b1b      	ldr	r3, [pc, #108]	; (8022a10 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 80229a2:	2142      	movs	r1, #66	; 0x42
 80229a4:	4a1b      	ldr	r2, [pc, #108]	; (8022a14 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 80229a6:	481c      	ldr	r0, [pc, #112]	; (8022a18 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 80229a8:	f007 f816 	bl	80299d8 <__assert_func>
 80229ac:	4620      	mov	r0, r4
 80229ae:	f7fd fc4d 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80229b2:	2802      	cmp	r0, #2
 80229b4:	4620      	mov	r0, r4
 80229b6:	d109      	bne.n	80229cc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 80229b8:	f7fd fbc4 	bl	8020144 <_ZNK8touchgfx6Bitmap7getDataEv>
 80229bc:	462b      	mov	r3, r5
 80229be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80229c0:	a902      	add	r1, sp, #8
 80229c2:	f7ff feeb 	bl	802279c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80229c6:	b005      	add	sp, #20
 80229c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80229cc:	f7fd fc3e 	bl	802024c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80229d0:	280b      	cmp	r0, #11
 80229d2:	d10e      	bne.n	80229f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80229d4:	4620      	mov	r0, r4
 80229d6:	f7fd fbb5 	bl	8020144 <_ZNK8touchgfx6Bitmap7getDataEv>
 80229da:	4606      	mov	r6, r0
 80229dc:	4620      	mov	r0, r4
 80229de:	f7fd fbe3 	bl	80201a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80229e2:	9500      	str	r5, [sp, #0]
 80229e4:	4601      	mov	r1, r0
 80229e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229e8:	aa02      	add	r2, sp, #8
 80229ea:	4630      	mov	r0, r6
 80229ec:	f7ff feb6 	bl	802275c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80229f0:	e7e9      	b.n	80229c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80229f2:	6833      	ldr	r3, [r6, #0]
 80229f4:	4620      	mov	r0, r4
 80229f6:	691f      	ldr	r7, [r3, #16]
 80229f8:	f7fd fba4 	bl	8020144 <_ZNK8touchgfx6Bitmap7getDataEv>
 80229fc:	2300      	movs	r3, #0
 80229fe:	4601      	mov	r1, r0
 8022a00:	aa02      	add	r2, sp, #8
 8022a02:	4630      	mov	r0, r6
 8022a04:	e9cd 5300 	strd	r5, r3, [sp]
 8022a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022a0a:	47b8      	blx	r7
 8022a0c:	e7db      	b.n	80229c6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8022a0e:	bf00      	nop
 8022a10:	0802ece1 	.word	0x0802ece1
 8022a14:	0802f3d3 	.word	0x0802f3d3
 8022a18:	0802ee23 	.word	0x0802ee23

08022a1c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022a1c:	b570      	push	{r4, r5, r6, lr}
 8022a1e:	9d04      	ldr	r5, [sp, #16]
 8022a20:	460c      	mov	r4, r1
 8022a22:	4619      	mov	r1, r3
 8022a24:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022a28:	2a0c      	cmp	r2, #12
 8022a2a:	d826      	bhi.n	8022a7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 8022a2c:	e8df f002 	tbb	[pc, r2]
 8022a30:	200e1407 	.word	0x200e1407
 8022a34:	20202020 	.word	0x20202020
 8022a38:	20202020 	.word	0x20202020
 8022a3c:	20          	.byte	0x20
 8022a3d:	00          	.byte	0x00
 8022a3e:	4b0f      	ldr	r3, [pc, #60]	; (8022a7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8022a40:	f240 117f 	movw	r1, #383	; 0x17f
 8022a44:	4a0e      	ldr	r2, [pc, #56]	; (8022a80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022a46:	480f      	ldr	r0, [pc, #60]	; (8022a84 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8022a48:	f006 ffc6 	bl	80299d8 <__assert_func>
 8022a4c:	462a      	mov	r2, r5
 8022a4e:	4620      	mov	r0, r4
 8022a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022a54:	f7ff bea2 	b.w	802279c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022a58:	6802      	ldr	r2, [r0, #0]
 8022a5a:	2600      	movs	r6, #0
 8022a5c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022a60:	6916      	ldr	r6, [r2, #16]
 8022a62:	462b      	mov	r3, r5
 8022a64:	460a      	mov	r2, r1
 8022a66:	4621      	mov	r1, r4
 8022a68:	46b4      	mov	ip, r6
 8022a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022a6e:	4760      	bx	ip
 8022a70:	4b05      	ldr	r3, [pc, #20]	; (8022a88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8022a72:	f240 1191 	movw	r1, #401	; 0x191
 8022a76:	4a02      	ldr	r2, [pc, #8]	; (8022a80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022a78:	e7e5      	b.n	8022a46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8022a7a:	bd70      	pop	{r4, r5, r6, pc}
 8022a7c:	0802effc 	.word	0x0802effc
 8022a80:	0802f6bb 	.word	0x0802f6bb
 8022a84:	0802ee23 	.word	0x0802ee23
 8022a88:	0802f03d 	.word	0x0802f03d

08022a8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8022a8c:	b158      	cbz	r0, 8022aa6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8022a8e:	2902      	cmp	r1, #2
 8022a90:	d00f      	beq.n	8022ab2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022a92:	2903      	cmp	r1, #3
 8022a94:	d010      	beq.n	8022ab8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8022a96:	2901      	cmp	r1, #1
 8022a98:	d101      	bne.n	8022a9e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022a9a:	2001      	movs	r0, #1
 8022a9c:	4770      	bx	lr
 8022a9e:	4b08      	ldr	r3, [pc, #32]	; (8022ac0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8022aa0:	8819      	ldrh	r1, [r3, #0]
 8022aa2:	4248      	negs	r0, r1
 8022aa4:	4770      	bx	lr
 8022aa6:	2902      	cmp	r1, #2
 8022aa8:	d006      	beq.n	8022ab8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8022aaa:	2903      	cmp	r1, #3
 8022aac:	d0f7      	beq.n	8022a9e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022aae:	2901      	cmp	r1, #1
 8022ab0:	d1f3      	bne.n	8022a9a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8022ab2:	4b03      	ldr	r3, [pc, #12]	; (8022ac0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8022ab4:	8818      	ldrh	r0, [r3, #0]
 8022ab6:	4770      	bx	lr
 8022ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8022abc:	4770      	bx	lr
 8022abe:	bf00      	nop
 8022ac0:	2000bf10 	.word	0x2000bf10

08022ac4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8022ac4:	b170      	cbz	r0, 8022ae4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 8022ac6:	2902      	cmp	r1, #2
 8022ac8:	d012      	beq.n	8022af0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8022aca:	2903      	cmp	r1, #3
 8022acc:	d006      	beq.n	8022adc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8022ace:	2901      	cmp	r1, #1
 8022ad0:	d001      	beq.n	8022ad6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8022ad2:	2001      	movs	r0, #1
 8022ad4:	4770      	bx	lr
 8022ad6:	4b08      	ldr	r3, [pc, #32]	; (8022af8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8022ad8:	8818      	ldrh	r0, [r3, #0]
 8022ada:	4770      	bx	lr
 8022adc:	4b06      	ldr	r3, [pc, #24]	; (8022af8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8022ade:	8818      	ldrh	r0, [r3, #0]
 8022ae0:	4240      	negs	r0, r0
 8022ae2:	4770      	bx	lr
 8022ae4:	2902      	cmp	r1, #2
 8022ae6:	d0f9      	beq.n	8022adc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8022ae8:	2903      	cmp	r1, #3
 8022aea:	d0f2      	beq.n	8022ad2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8022aec:	2901      	cmp	r1, #1
 8022aee:	d1f2      	bne.n	8022ad6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8022af0:	f04f 30ff 	mov.w	r0, #4294967295
 8022af4:	4770      	bx	lr
 8022af6:	bf00      	nop
 8022af8:	2000bf10 	.word	0x2000bf10

08022afc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b00:	b095      	sub	sp, #84	; 0x54
 8022b02:	9109      	str	r1, [sp, #36]	; 0x24
 8022b04:	a910      	add	r1, sp, #64	; 0x40
 8022b06:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 8022b0a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 8022b0e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8022b12:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 8022b16:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 8022b1a:	e881 000c 	stmia.w	r1, {r2, r3}
 8022b1e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 8022b22:	9306      	str	r3, [sp, #24]
 8022b24:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8022b28:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 8022b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8022b2e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 8022b32:	798f      	ldrb	r7, [r1, #6]
 8022b34:	930a      	str	r3, [sp, #40]	; 0x28
 8022b36:	7b4b      	ldrb	r3, [r1, #13]
 8022b38:	0158      	lsls	r0, r3, #5
 8022b3a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8022b3e:	4338      	orrs	r0, r7
 8022b40:	9008      	str	r0, [sp, #32]
 8022b42:	f000 8174 	beq.w	8022e2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022b46:	011b      	lsls	r3, r3, #4
 8022b48:	79c8      	ldrb	r0, [r1, #7]
 8022b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022b4e:	4303      	orrs	r3, r0
 8022b50:	9307      	str	r3, [sp, #28]
 8022b52:	f000 816c 	beq.w	8022e2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022b56:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022b5a:	b29b      	uxth	r3, r3
 8022b5c:	2e00      	cmp	r6, #0
 8022b5e:	f000 8112 	beq.w	8022d86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 8022b62:	1af6      	subs	r6, r6, r3
 8022b64:	b2b6      	uxth	r6, r6
 8022b66:	0433      	lsls	r3, r6, #16
 8022b68:	d502      	bpl.n	8022b70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022b6a:	1bad      	subs	r5, r5, r6
 8022b6c:	2600      	movs	r6, #0
 8022b6e:	b22d      	sxth	r5, r5
 8022b70:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022b74:	a810      	add	r0, sp, #64	; 0x40
 8022b76:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8022b7a:	428d      	cmp	r5, r1
 8022b7c:	b28b      	uxth	r3, r1
 8022b7e:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8022b82:	bfbf      	itttt	lt
 8022b84:	18f6      	addlt	r6, r6, r3
 8022b86:	1b75      	sublt	r5, r6, r5
 8022b88:	b2ae      	uxthlt	r6, r5
 8022b8a:	460d      	movlt	r5, r1
 8022b8c:	8891      	ldrh	r1, [r2, #4]
 8022b8e:	440b      	add	r3, r1
 8022b90:	4629      	mov	r1, r5
 8022b92:	b21b      	sxth	r3, r3
 8022b94:	930d      	str	r3, [sp, #52]	; 0x34
 8022b96:	88d3      	ldrh	r3, [r2, #6]
 8022b98:	9a06      	ldr	r2, [sp, #24]
 8022b9a:	449a      	add	sl, r3
 8022b9c:	fa0f f38a 	sxth.w	r3, sl
 8022ba0:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8022ba4:	930c      	str	r3, [sp, #48]	; 0x30
 8022ba6:	4bb8      	ldr	r3, [pc, #736]	; (8022e88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8022ba8:	f893 b000 	ldrb.w	fp, [r3]
 8022bac:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022bb0:	f1dc 0300 	rsbs	r3, ip, #0
 8022bb4:	eb43 030c 	adc.w	r3, r3, ip
 8022bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bba:	464b      	mov	r3, r9
 8022bbc:	f7fa fc78 	bl	801d4b0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022bc0:	4629      	mov	r1, r5
 8022bc2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8022bc6:	464b      	mov	r3, r9
 8022bc8:	9a06      	ldr	r2, [sp, #24]
 8022bca:	a810      	add	r0, sp, #64	; 0x40
 8022bcc:	f7fa fc88 	bl	801d4e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022bd0:	a914      	add	r1, sp, #80	; 0x50
 8022bd2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022bd6:	a813      	add	r0, sp, #76	; 0x4c
 8022bd8:	f7fa fd62 	bl	801d6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022bdc:	f1b9 0f00 	cmp.w	r9, #0
 8022be0:	f040 80d4 	bne.w	8022d8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 8022be4:	f1bb 0f01 	cmp.w	fp, #1
 8022be8:	f040 80d8 	bne.w	8022d9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8022bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	f040 8122 	bne.w	8022e38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 8022bf4:	4ba5      	ldr	r3, [pc, #660]	; (8022e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8022bf6:	6818      	ldr	r0, [r3, #0]
 8022bf8:	6803      	ldr	r3, [r0, #0]
 8022bfa:	6a1b      	ldr	r3, [r3, #32]
 8022bfc:	4798      	blx	r3
 8022bfe:	4aa4      	ldr	r2, [pc, #656]	; (8022e90 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 8022c00:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8022c04:	8811      	ldrh	r1, [r2, #0]
 8022c06:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8022c0a:	fb01 2303 	mla	r3, r1, r3, r2
 8022c0e:	2201      	movs	r2, #1
 8022c10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c14:	4590      	cmp	r8, r2
 8022c16:	4403      	add	r3, r0
 8022c18:	9307      	str	r3, [sp, #28]
 8022c1a:	fa02 f308 	lsl.w	r3, r2, r8
 8022c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8022c22:	b2db      	uxtb	r3, r3
 8022c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c26:	f000 8109 	beq.w	8022e3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 8022c2a:	f1b8 0f02 	cmp.w	r8, #2
 8022c2e:	f000 813e 	beq.w	8022eae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 8022c32:	f1b8 0f04 	cmp.w	r8, #4
 8022c36:	f000 8132 	beq.w	8022e9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8022c3a:	b906      	cbnz	r6, 8022c3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 8022c3c:	b174      	cbz	r4, 8022c5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 8022c3e:	fb17 6304 	smlabb	r3, r7, r4, r6
 8022c42:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022c44:	ebaa 0a04 	sub.w	sl, sl, r4
 8022c48:	fb13 f308 	smulbb	r3, r3, r8
 8022c4c:	fa1f fa8a 	uxth.w	sl, sl
 8022c50:	b29b      	uxth	r3, r3
 8022c52:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 8022c56:	f003 0407 	and.w	r4, r3, #7
 8022c5a:	9124      	str	r1, [sp, #144]	; 0x90
 8022c5c:	4649      	mov	r1, r9
 8022c5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022c60:	f7ff ff14 	bl	8022a8c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8022c64:	4649      	mov	r1, r9
 8022c66:	4683      	mov	fp, r0
 8022c68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022c6a:	f7ff ff2b 	bl	8022ac4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8022c6e:	9906      	ldr	r1, [sp, #24]
 8022c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c72:	1bad      	subs	r5, r5, r6
 8022c74:	1a5b      	subs	r3, r3, r1
 8022c76:	459a      	cmp	sl, r3
 8022c78:	bfa8      	it	ge
 8022c7a:	469a      	movge	sl, r3
 8022c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c7e:	1b5d      	subs	r5, r3, r5
 8022c80:	9b08      	ldr	r3, [sp, #32]
 8022c82:	429d      	cmp	r5, r3
 8022c84:	bfd4      	ite	le
 8022c86:	ebc6 0605 	rsble	r6, r6, r5
 8022c8a:	ebc6 0603 	rsbgt	r6, r6, r3
 8022c8e:	1bbf      	subs	r7, r7, r6
 8022c90:	fb0b 0016 	mls	r0, fp, r6, r0
 8022c94:	fb08 f307 	mul.w	r3, r8, r7
 8022c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022c9c:	9308      	str	r3, [sp, #32]
 8022c9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ca0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ca8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022cac:	930c      	str	r3, [sp, #48]	; 0x30
 8022cae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022cb0:	b2db      	uxtb	r3, r3
 8022cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8022cb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cb6:	7819      	ldrb	r1, [r3, #0]
 8022cb8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8022cbc:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 8022cc0:	4121      	asrs	r1, r4
 8022cc2:	9306      	str	r3, [sp, #24]
 8022cc4:	fb03 0b0b 	mla	fp, r3, fp, r0
 8022cc8:	b2c9      	uxtb	r1, r1
 8022cca:	f1ba 0f00 	cmp.w	sl, #0
 8022cce:	f340 80d1 	ble.w	8022e74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8022cd2:	46b6      	mov	lr, r6
 8022cd4:	9807      	ldr	r0, [sp, #28]
 8022cd6:	f1be 0f00 	cmp.w	lr, #0
 8022cda:	f340 80b8 	ble.w	8022e4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8022cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ce0:	400b      	ands	r3, r1
 8022ce2:	d03e      	beq.n	8022d62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8022ce4:	fb13 f302 	smulbb	r3, r3, r2
 8022ce8:	2bfe      	cmp	r3, #254	; 0xfe
 8022cea:	dd03      	ble.n	8022cf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8022cec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022cee:	2dff      	cmp	r5, #255	; 0xff
 8022cf0:	f000 80a6 	beq.w	8022e40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8022cf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022cf6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022cf8:	fb15 f303 	smulbb	r3, r5, r3
 8022cfc:	b29b      	uxth	r3, r3
 8022cfe:	1c5d      	adds	r5, r3, #1
 8022d00:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022d04:	7805      	ldrb	r5, [r0, #0]
 8022d06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d0a:	fa1f fc83 	uxth.w	ip, r3
 8022d0e:	43db      	mvns	r3, r3
 8022d10:	fb17 f90c 	smulbb	r9, r7, ip
 8022d14:	b2db      	uxtb	r3, r3
 8022d16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022d18:	fb05 9503 	mla	r5, r5, r3, r9
 8022d1c:	b2ad      	uxth	r5, r5
 8022d1e:	f105 0901 	add.w	r9, r5, #1
 8022d22:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022d26:	fb17 f90c 	smulbb	r9, r7, ip
 8022d2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022d2c:	122d      	asrs	r5, r5, #8
 8022d2e:	fb17 fc0c 	smulbb	ip, r7, ip
 8022d32:	7005      	strb	r5, [r0, #0]
 8022d34:	7845      	ldrb	r5, [r0, #1]
 8022d36:	fb05 9503 	mla	r5, r5, r3, r9
 8022d3a:	b2ad      	uxth	r5, r5
 8022d3c:	f105 0901 	add.w	r9, r5, #1
 8022d40:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8022d44:	122d      	asrs	r5, r5, #8
 8022d46:	7045      	strb	r5, [r0, #1]
 8022d48:	7885      	ldrb	r5, [r0, #2]
 8022d4a:	fb05 cc03 	mla	ip, r5, r3, ip
 8022d4e:	fa1f fc8c 	uxth.w	ip, ip
 8022d52:	f10c 0301 	add.w	r3, ip, #1
 8022d56:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022d5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022d5e:	f880 c002 	strb.w	ip, [r0, #2]
 8022d62:	4444      	add	r4, r8
 8022d64:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022d68:	b2a4      	uxth	r4, r4
 8022d6a:	2c07      	cmp	r4, #7
 8022d6c:	bf89      	itett	hi
 8022d6e:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 8022d70:	fa41 f108 	asrls.w	r1, r1, r8
 8022d74:	2400      	movhi	r4, #0
 8022d76:	7859      	ldrbhi	r1, [r3, #1]
 8022d78:	bf8a      	itet	hi
 8022d7a:	3301      	addhi	r3, #1
 8022d7c:	b2c9      	uxtbls	r1, r1
 8022d7e:	9324      	strhi	r3, [sp, #144]	; 0x90
 8022d80:	9b06      	ldr	r3, [sp, #24]
 8022d82:	4418      	add	r0, r3
 8022d84:	e7a7      	b.n	8022cd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8022d86:	441d      	add	r5, r3
 8022d88:	b22d      	sxth	r5, r5
 8022d8a:	e6f1      	b.n	8022b70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8022d8c:	f1b9 0f01 	cmp.w	r9, #1
 8022d90:	f47f af2c 	bne.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022d94:	f1bb 0f01 	cmp.w	fp, #1
 8022d98:	f47f af28 	bne.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022d9c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8022e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022da0:	f8db 0000 	ldr.w	r0, [fp]
 8022da4:	6803      	ldr	r3, [r0, #0]
 8022da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022da8:	4798      	blx	r3
 8022daa:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8022dae:	465a      	mov	r2, fp
 8022db0:	d006      	beq.n	8022dc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8022db2:	f1b8 0f04 	cmp.w	r8, #4
 8022db6:	d13d      	bne.n	8022e34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8022db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dba:	3300      	adds	r3, #0
 8022dbc:	bf18      	it	ne
 8022dbe:	2301      	movne	r3, #1
 8022dc0:	05c0      	lsls	r0, r0, #23
 8022dc2:	d567      	bpl.n	8022e94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8022dc4:	f1b8 0f08 	cmp.w	r8, #8
 8022dc8:	d164      	bne.n	8022e94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	bf0c      	ite	eq
 8022dce:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8022dd2:	2180      	movne	r1, #128	; 0x80
 8022dd4:	2e00      	cmp	r6, #0
 8022dd6:	f47f af09 	bne.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022dda:	2c00      	cmp	r4, #0
 8022ddc:	f47f af06 	bne.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022de0:	9b08      	ldr	r3, [sp, #32]
 8022de2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022de4:	442b      	add	r3, r5
 8022de6:	4283      	cmp	r3, r0
 8022de8:	f73f af00 	bgt.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022dec:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8022df0:	4403      	add	r3, r0
 8022df2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022df4:	4283      	cmp	r3, r0
 8022df6:	f73f aef9 	bgt.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022dfa:	f1b8 0f08 	cmp.w	r8, #8
 8022dfe:	6810      	ldr	r0, [r2, #0]
 8022e00:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8022e04:	bf18      	it	ne
 8022e06:	3701      	addne	r7, #1
 8022e08:	6804      	ldr	r4, [r0, #0]
 8022e0a:	9105      	str	r1, [sp, #20]
 8022e0c:	bf18      	it	ne
 8022e0e:	f027 0701 	bicne.w	r7, r7, #1
 8022e12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022e14:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8022e18:	bf18      	it	ne
 8022e1a:	b2bf      	uxthne	r7, r7
 8022e1c:	9104      	str	r1, [sp, #16]
 8022e1e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022e20:	e9cd 7a00 	strd	r7, sl, [sp]
 8022e24:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8022e28:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022e2a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8022e2c:	47a0      	blx	r4
 8022e2e:	b015      	add	sp, #84	; 0x54
 8022e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e34:	2300      	movs	r3, #0
 8022e36:	e7c3      	b.n	8022dc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8022e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022e3a:	e6e0      	b.n	8022bfe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8022e3c:	22ff      	movs	r2, #255	; 0xff
 8022e3e:	e6fc      	b.n	8022c3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8022e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e42:	7003      	strb	r3, [r0, #0]
 8022e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e46:	7043      	strb	r3, [r0, #1]
 8022e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e4a:	7083      	strb	r3, [r0, #2]
 8022e4c:	e789      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8022e4e:	9b08      	ldr	r3, [sp, #32]
 8022e50:	b153      	cbz	r3, 8022e68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 8022e52:	441c      	add	r4, r3
 8022e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022e56:	b2a4      	uxth	r4, r4
 8022e58:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8022e5c:	f004 0407 	and.w	r4, r4, #7
 8022e60:	7819      	ldrb	r1, [r3, #0]
 8022e62:	9324      	str	r3, [sp, #144]	; 0x90
 8022e64:	4121      	asrs	r1, r4
 8022e66:	b2c9      	uxtb	r1, r1
 8022e68:	9b07      	ldr	r3, [sp, #28]
 8022e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022e6e:	445b      	add	r3, fp
 8022e70:	9307      	str	r3, [sp, #28]
 8022e72:	e72a      	b.n	8022cca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8022e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d1d9      	bne.n	8022e2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022e7a:	4b04      	ldr	r3, [pc, #16]	; (8022e8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8022e7c:	6818      	ldr	r0, [r3, #0]
 8022e7e:	6803      	ldr	r3, [r0, #0]
 8022e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e82:	4798      	blx	r3
 8022e84:	e7d3      	b.n	8022e2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022e86:	bf00      	nop
 8022e88:	2000bf0e 	.word	0x2000bf0e
 8022e8c:	2000bf18 	.word	0x2000bf18
 8022e90:	2000bf10 	.word	0x2000bf10
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	f43f aea9 	beq.w	8022bec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8022e9a:	2180      	movs	r1, #128	; 0x80
 8022e9c:	e79a      	b.n	8022dd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8022e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022ea0:	b11b      	cbz	r3, 8022eaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8022ea2:	07fb      	lsls	r3, r7, #31
 8022ea4:	d501      	bpl.n	8022eaa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8022ea6:	3701      	adds	r7, #1
 8022ea8:	b2bf      	uxth	r7, r7
 8022eaa:	2211      	movs	r2, #17
 8022eac:	e6c5      	b.n	8022c3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8022eae:	2255      	movs	r2, #85	; 0x55
 8022eb0:	e6c3      	b.n	8022c3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8022eb2:	bf00      	nop

08022eb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022eb4:	b538      	push	{r3, r4, r5, lr}
 8022eb6:	4c15      	ldr	r4, [pc, #84]	; (8022f0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022eb8:	4605      	mov	r5, r0
 8022eba:	7823      	ldrb	r3, [r4, #0]
 8022ebc:	f3bf 8f5b 	dmb	ish
 8022ec0:	07da      	lsls	r2, r3, #31
 8022ec2:	d40b      	bmi.n	8022edc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022ec4:	4620      	mov	r0, r4
 8022ec6:	f006 fd5e 	bl	8029986 <__cxa_guard_acquire>
 8022eca:	b138      	cbz	r0, 8022edc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022ecc:	4620      	mov	r0, r4
 8022ece:	f006 fd66 	bl	802999e <__cxa_guard_release>
 8022ed2:	4a0f      	ldr	r2, [pc, #60]	; (8022f10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022ed4:	490f      	ldr	r1, [pc, #60]	; (8022f14 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022ed6:	4810      	ldr	r0, [pc, #64]	; (8022f18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022ed8:	f006 fd4b 	bl	8029972 <__aeabi_atexit>
 8022edc:	4c0f      	ldr	r4, [pc, #60]	; (8022f1c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022ede:	7823      	ldrb	r3, [r4, #0]
 8022ee0:	f3bf 8f5b 	dmb	ish
 8022ee4:	07db      	lsls	r3, r3, #31
 8022ee6:	d40b      	bmi.n	8022f00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022ee8:	4620      	mov	r0, r4
 8022eea:	f006 fd4c 	bl	8029986 <__cxa_guard_acquire>
 8022eee:	b138      	cbz	r0, 8022f00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022ef0:	4620      	mov	r0, r4
 8022ef2:	f006 fd54 	bl	802999e <__cxa_guard_release>
 8022ef6:	4a06      	ldr	r2, [pc, #24]	; (8022f10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022ef8:	4909      	ldr	r1, [pc, #36]	; (8022f20 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022efa:	480a      	ldr	r0, [pc, #40]	; (8022f24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022efc:	f006 fd39 	bl	8029972 <__aeabi_atexit>
 8022f00:	4b05      	ldr	r3, [pc, #20]	; (8022f18 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022f02:	612b      	str	r3, [r5, #16]
 8022f04:	4b07      	ldr	r3, [pc, #28]	; (8022f24 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022f06:	616b      	str	r3, [r5, #20]
 8022f08:	bd38      	pop	{r3, r4, r5, pc}
 8022f0a:	bf00      	nop
 8022f0c:	2000c024 	.word	0x2000c024
 8022f10:	20000000 	.word	0x20000000
 8022f14:	08021aeb 	.word	0x08021aeb
 8022f18:	200000c8 	.word	0x200000c8
 8022f1c:	2000c028 	.word	0x2000c028
 8022f20:	08021ae9 	.word	0x08021ae9
 8022f24:	200000cc 	.word	0x200000cc

08022f28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022f28:	b538      	push	{r3, r4, r5, lr}
 8022f2a:	4c15      	ldr	r4, [pc, #84]	; (8022f80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022f2c:	4605      	mov	r5, r0
 8022f2e:	7823      	ldrb	r3, [r4, #0]
 8022f30:	f3bf 8f5b 	dmb	ish
 8022f34:	07da      	lsls	r2, r3, #31
 8022f36:	d40b      	bmi.n	8022f50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022f38:	4620      	mov	r0, r4
 8022f3a:	f006 fd24 	bl	8029986 <__cxa_guard_acquire>
 8022f3e:	b138      	cbz	r0, 8022f50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022f40:	4620      	mov	r0, r4
 8022f42:	f006 fd2c 	bl	802999e <__cxa_guard_release>
 8022f46:	4a0f      	ldr	r2, [pc, #60]	; (8022f84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022f48:	490f      	ldr	r1, [pc, #60]	; (8022f88 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022f4a:	4810      	ldr	r0, [pc, #64]	; (8022f8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022f4c:	f006 fd11 	bl	8029972 <__aeabi_atexit>
 8022f50:	4c0f      	ldr	r4, [pc, #60]	; (8022f90 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022f52:	7823      	ldrb	r3, [r4, #0]
 8022f54:	f3bf 8f5b 	dmb	ish
 8022f58:	07db      	lsls	r3, r3, #31
 8022f5a:	d40b      	bmi.n	8022f74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022f5c:	4620      	mov	r0, r4
 8022f5e:	f006 fd12 	bl	8029986 <__cxa_guard_acquire>
 8022f62:	b138      	cbz	r0, 8022f74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022f64:	4620      	mov	r0, r4
 8022f66:	f006 fd1a 	bl	802999e <__cxa_guard_release>
 8022f6a:	4a06      	ldr	r2, [pc, #24]	; (8022f84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022f6c:	4909      	ldr	r1, [pc, #36]	; (8022f94 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022f6e:	480a      	ldr	r0, [pc, #40]	; (8022f98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022f70:	f006 fcff 	bl	8029972 <__aeabi_atexit>
 8022f74:	4b05      	ldr	r3, [pc, #20]	; (8022f8c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022f76:	60ab      	str	r3, [r5, #8]
 8022f78:	4b07      	ldr	r3, [pc, #28]	; (8022f98 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022f7a:	60eb      	str	r3, [r5, #12]
 8022f7c:	bd38      	pop	{r3, r4, r5, pc}
 8022f7e:	bf00      	nop
 8022f80:	2000c004 	.word	0x2000c004
 8022f84:	20000000 	.word	0x20000000
 8022f88:	08021aef 	.word	0x08021aef
 8022f8c:	200000a8 	.word	0x200000a8
 8022f90:	2000c008 	.word	0x2000c008
 8022f94:	08021aed 	.word	0x08021aed
 8022f98:	200000ac 	.word	0x200000ac

08022f9c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8022f9c:	b510      	push	{r4, lr}
 8022f9e:	4604      	mov	r4, r0
 8022fa0:	f7ff ff88 	bl	8022eb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022fa4:	4620      	mov	r0, r4
 8022fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022faa:	f7ff bfbd 	b.w	8022f28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022fb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022fb0:	b538      	push	{r3, r4, r5, lr}
 8022fb2:	4c15      	ldr	r4, [pc, #84]	; (8023008 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022fb4:	4605      	mov	r5, r0
 8022fb6:	7823      	ldrb	r3, [r4, #0]
 8022fb8:	f3bf 8f5b 	dmb	ish
 8022fbc:	07da      	lsls	r2, r3, #31
 8022fbe:	d40b      	bmi.n	8022fd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022fc0:	4620      	mov	r0, r4
 8022fc2:	f006 fce0 	bl	8029986 <__cxa_guard_acquire>
 8022fc6:	b138      	cbz	r0, 8022fd8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022fc8:	4620      	mov	r0, r4
 8022fca:	f006 fce8 	bl	802999e <__cxa_guard_release>
 8022fce:	4a0f      	ldr	r2, [pc, #60]	; (802300c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022fd0:	490f      	ldr	r1, [pc, #60]	; (8023010 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8022fd2:	4810      	ldr	r0, [pc, #64]	; (8023014 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022fd4:	f006 fccd 	bl	8029972 <__aeabi_atexit>
 8022fd8:	4c0f      	ldr	r4, [pc, #60]	; (8023018 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022fda:	7823      	ldrb	r3, [r4, #0]
 8022fdc:	f3bf 8f5b 	dmb	ish
 8022fe0:	07db      	lsls	r3, r3, #31
 8022fe2:	d40b      	bmi.n	8022ffc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022fe4:	4620      	mov	r0, r4
 8022fe6:	f006 fcce 	bl	8029986 <__cxa_guard_acquire>
 8022fea:	b138      	cbz	r0, 8022ffc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022fec:	4620      	mov	r0, r4
 8022fee:	f006 fcd6 	bl	802999e <__cxa_guard_release>
 8022ff2:	4a06      	ldr	r2, [pc, #24]	; (802300c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022ff4:	4909      	ldr	r1, [pc, #36]	; (802301c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022ff6:	480a      	ldr	r0, [pc, #40]	; (8023020 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022ff8:	f006 fcbb 	bl	8029972 <__aeabi_atexit>
 8022ffc:	4b05      	ldr	r3, [pc, #20]	; (8023014 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022ffe:	622b      	str	r3, [r5, #32]
 8023000:	4b07      	ldr	r3, [pc, #28]	; (8023020 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023002:	626b      	str	r3, [r5, #36]	; 0x24
 8023004:	bd38      	pop	{r3, r4, r5, pc}
 8023006:	bf00      	nop
 8023008:	2000c02c 	.word	0x2000c02c
 802300c:	20000000 	.word	0x20000000
 8023010:	08021ae3 	.word	0x08021ae3
 8023014:	200000d0 	.word	0x200000d0
 8023018:	2000c030 	.word	0x2000c030
 802301c:	08021ae1 	.word	0x08021ae1
 8023020:	200000d4 	.word	0x200000d4

08023024 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023024:	b538      	push	{r3, r4, r5, lr}
 8023026:	4c15      	ldr	r4, [pc, #84]	; (802307c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023028:	4605      	mov	r5, r0
 802302a:	7823      	ldrb	r3, [r4, #0]
 802302c:	f3bf 8f5b 	dmb	ish
 8023030:	07da      	lsls	r2, r3, #31
 8023032:	d40b      	bmi.n	802304c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023034:	4620      	mov	r0, r4
 8023036:	f006 fca6 	bl	8029986 <__cxa_guard_acquire>
 802303a:	b138      	cbz	r0, 802304c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802303c:	4620      	mov	r0, r4
 802303e:	f006 fcae 	bl	802999e <__cxa_guard_release>
 8023042:	4a0f      	ldr	r2, [pc, #60]	; (8023080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023044:	490f      	ldr	r1, [pc, #60]	; (8023084 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023046:	4810      	ldr	r0, [pc, #64]	; (8023088 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023048:	f006 fc93 	bl	8029972 <__aeabi_atexit>
 802304c:	4c0f      	ldr	r4, [pc, #60]	; (802308c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802304e:	7823      	ldrb	r3, [r4, #0]
 8023050:	f3bf 8f5b 	dmb	ish
 8023054:	07db      	lsls	r3, r3, #31
 8023056:	d40b      	bmi.n	8023070 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023058:	4620      	mov	r0, r4
 802305a:	f006 fc94 	bl	8029986 <__cxa_guard_acquire>
 802305e:	b138      	cbz	r0, 8023070 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023060:	4620      	mov	r0, r4
 8023062:	f006 fc9c 	bl	802999e <__cxa_guard_release>
 8023066:	4a06      	ldr	r2, [pc, #24]	; (8023080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023068:	4909      	ldr	r1, [pc, #36]	; (8023090 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802306a:	480a      	ldr	r0, [pc, #40]	; (8023094 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802306c:	f006 fc81 	bl	8029972 <__aeabi_atexit>
 8023070:	4b05      	ldr	r3, [pc, #20]	; (8023088 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023072:	61ab      	str	r3, [r5, #24]
 8023074:	4b07      	ldr	r3, [pc, #28]	; (8023094 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023076:	61eb      	str	r3, [r5, #28]
 8023078:	bd38      	pop	{r3, r4, r5, pc}
 802307a:	bf00      	nop
 802307c:	2000c00c 	.word	0x2000c00c
 8023080:	20000000 	.word	0x20000000
 8023084:	08021ae7 	.word	0x08021ae7
 8023088:	200000b0 	.word	0x200000b0
 802308c:	2000c010 	.word	0x2000c010
 8023090:	08021ae5 	.word	0x08021ae5
 8023094:	200000b4 	.word	0x200000b4

08023098 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023098:	b510      	push	{r4, lr}
 802309a:	4604      	mov	r4, r0
 802309c:	f7ff ff88 	bl	8022fb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80230a0:	4620      	mov	r0, r4
 80230a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230a6:	f7ff bfbd 	b.w	8023024 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080230ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80230ac:	b538      	push	{r3, r4, r5, lr}
 80230ae:	4c15      	ldr	r4, [pc, #84]	; (8023104 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80230b0:	4605      	mov	r5, r0
 80230b2:	7823      	ldrb	r3, [r4, #0]
 80230b4:	f3bf 8f5b 	dmb	ish
 80230b8:	07da      	lsls	r2, r3, #31
 80230ba:	d40b      	bmi.n	80230d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80230bc:	4620      	mov	r0, r4
 80230be:	f006 fc62 	bl	8029986 <__cxa_guard_acquire>
 80230c2:	b138      	cbz	r0, 80230d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80230c4:	4620      	mov	r0, r4
 80230c6:	f006 fc6a 	bl	802999e <__cxa_guard_release>
 80230ca:	4a0f      	ldr	r2, [pc, #60]	; (8023108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80230cc:	490f      	ldr	r1, [pc, #60]	; (802310c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80230ce:	4810      	ldr	r0, [pc, #64]	; (8023110 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80230d0:	f006 fc4f 	bl	8029972 <__aeabi_atexit>
 80230d4:	4c0f      	ldr	r4, [pc, #60]	; (8023114 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80230d6:	7823      	ldrb	r3, [r4, #0]
 80230d8:	f3bf 8f5b 	dmb	ish
 80230dc:	07db      	lsls	r3, r3, #31
 80230de:	d40b      	bmi.n	80230f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80230e0:	4620      	mov	r0, r4
 80230e2:	f006 fc50 	bl	8029986 <__cxa_guard_acquire>
 80230e6:	b138      	cbz	r0, 80230f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80230e8:	4620      	mov	r0, r4
 80230ea:	f006 fc58 	bl	802999e <__cxa_guard_release>
 80230ee:	4a06      	ldr	r2, [pc, #24]	; (8023108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80230f0:	4909      	ldr	r1, [pc, #36]	; (8023118 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80230f2:	480a      	ldr	r0, [pc, #40]	; (802311c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80230f4:	f006 fc3d 	bl	8029972 <__aeabi_atexit>
 80230f8:	4b05      	ldr	r3, [pc, #20]	; (8023110 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80230fa:	632b      	str	r3, [r5, #48]	; 0x30
 80230fc:	4b07      	ldr	r3, [pc, #28]	; (802311c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80230fe:	636b      	str	r3, [r5, #52]	; 0x34
 8023100:	bd38      	pop	{r3, r4, r5, pc}
 8023102:	bf00      	nop
 8023104:	2000c014 	.word	0x2000c014
 8023108:	20000000 	.word	0x20000000
 802310c:	08021adb 	.word	0x08021adb
 8023110:	200000b8 	.word	0x200000b8
 8023114:	2000c018 	.word	0x2000c018
 8023118:	08021ad9 	.word	0x08021ad9
 802311c:	200000bc 	.word	0x200000bc

08023120 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023120:	b538      	push	{r3, r4, r5, lr}
 8023122:	4c15      	ldr	r4, [pc, #84]	; (8023178 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023124:	4605      	mov	r5, r0
 8023126:	7823      	ldrb	r3, [r4, #0]
 8023128:	f3bf 8f5b 	dmb	ish
 802312c:	07da      	lsls	r2, r3, #31
 802312e:	d40b      	bmi.n	8023148 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023130:	4620      	mov	r0, r4
 8023132:	f006 fc28 	bl	8029986 <__cxa_guard_acquire>
 8023136:	b138      	cbz	r0, 8023148 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023138:	4620      	mov	r0, r4
 802313a:	f006 fc30 	bl	802999e <__cxa_guard_release>
 802313e:	4a0f      	ldr	r2, [pc, #60]	; (802317c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023140:	490f      	ldr	r1, [pc, #60]	; (8023180 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023142:	4810      	ldr	r0, [pc, #64]	; (8023184 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023144:	f006 fc15 	bl	8029972 <__aeabi_atexit>
 8023148:	4c0f      	ldr	r4, [pc, #60]	; (8023188 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802314a:	7823      	ldrb	r3, [r4, #0]
 802314c:	f3bf 8f5b 	dmb	ish
 8023150:	07db      	lsls	r3, r3, #31
 8023152:	d40b      	bmi.n	802316c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023154:	4620      	mov	r0, r4
 8023156:	f006 fc16 	bl	8029986 <__cxa_guard_acquire>
 802315a:	b138      	cbz	r0, 802316c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802315c:	4620      	mov	r0, r4
 802315e:	f006 fc1e 	bl	802999e <__cxa_guard_release>
 8023162:	4a06      	ldr	r2, [pc, #24]	; (802317c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023164:	4909      	ldr	r1, [pc, #36]	; (802318c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023166:	480a      	ldr	r0, [pc, #40]	; (8023190 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023168:	f006 fc03 	bl	8029972 <__aeabi_atexit>
 802316c:	4b05      	ldr	r3, [pc, #20]	; (8023184 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802316e:	62ab      	str	r3, [r5, #40]	; 0x28
 8023170:	4b07      	ldr	r3, [pc, #28]	; (8023190 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023172:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023174:	bd38      	pop	{r3, r4, r5, pc}
 8023176:	bf00      	nop
 8023178:	2000bfec 	.word	0x2000bfec
 802317c:	20000000 	.word	0x20000000
 8023180:	08021adf 	.word	0x08021adf
 8023184:	20000090 	.word	0x20000090
 8023188:	2000bff0 	.word	0x2000bff0
 802318c:	08021add 	.word	0x08021add
 8023190:	20000094 	.word	0x20000094

08023194 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023194:	b510      	push	{r4, lr}
 8023196:	4604      	mov	r4, r0
 8023198:	f7ff ff88 	bl	80230ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 802319c:	4620      	mov	r0, r4
 802319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231a2:	f7ff bfbd 	b.w	8023120 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080231a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80231a8:	b538      	push	{r3, r4, r5, lr}
 80231aa:	4c15      	ldr	r4, [pc, #84]	; (8023200 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80231ac:	4605      	mov	r5, r0
 80231ae:	7823      	ldrb	r3, [r4, #0]
 80231b0:	f3bf 8f5b 	dmb	ish
 80231b4:	07da      	lsls	r2, r3, #31
 80231b6:	d40b      	bmi.n	80231d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80231b8:	4620      	mov	r0, r4
 80231ba:	f006 fbe4 	bl	8029986 <__cxa_guard_acquire>
 80231be:	b138      	cbz	r0, 80231d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80231c0:	4620      	mov	r0, r4
 80231c2:	f006 fbec 	bl	802999e <__cxa_guard_release>
 80231c6:	4a0f      	ldr	r2, [pc, #60]	; (8023204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80231c8:	490f      	ldr	r1, [pc, #60]	; (8023208 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80231ca:	4810      	ldr	r0, [pc, #64]	; (802320c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80231cc:	f006 fbd1 	bl	8029972 <__aeabi_atexit>
 80231d0:	4c0f      	ldr	r4, [pc, #60]	; (8023210 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80231d2:	7823      	ldrb	r3, [r4, #0]
 80231d4:	f3bf 8f5b 	dmb	ish
 80231d8:	07db      	lsls	r3, r3, #31
 80231da:	d40b      	bmi.n	80231f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80231dc:	4620      	mov	r0, r4
 80231de:	f006 fbd2 	bl	8029986 <__cxa_guard_acquire>
 80231e2:	b138      	cbz	r0, 80231f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80231e4:	4620      	mov	r0, r4
 80231e6:	f006 fbda 	bl	802999e <__cxa_guard_release>
 80231ea:	4a06      	ldr	r2, [pc, #24]	; (8023204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80231ec:	4909      	ldr	r1, [pc, #36]	; (8023214 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80231ee:	480a      	ldr	r0, [pc, #40]	; (8023218 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80231f0:	f006 fbbf 	bl	8029972 <__aeabi_atexit>
 80231f4:	4b05      	ldr	r3, [pc, #20]	; (802320c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80231f6:	642b      	str	r3, [r5, #64]	; 0x40
 80231f8:	4b07      	ldr	r3, [pc, #28]	; (8023218 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80231fa:	646b      	str	r3, [r5, #68]	; 0x44
 80231fc:	bd38      	pop	{r3, r4, r5, pc}
 80231fe:	bf00      	nop
 8023200:	2000c01c 	.word	0x2000c01c
 8023204:	20000000 	.word	0x20000000
 8023208:	08021ad3 	.word	0x08021ad3
 802320c:	200000c0 	.word	0x200000c0
 8023210:	2000c020 	.word	0x2000c020
 8023214:	08021ad1 	.word	0x08021ad1
 8023218:	200000c4 	.word	0x200000c4

0802321c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802321c:	b538      	push	{r3, r4, r5, lr}
 802321e:	4c15      	ldr	r4, [pc, #84]	; (8023274 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023220:	4605      	mov	r5, r0
 8023222:	7823      	ldrb	r3, [r4, #0]
 8023224:	f3bf 8f5b 	dmb	ish
 8023228:	07da      	lsls	r2, r3, #31
 802322a:	d40b      	bmi.n	8023244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802322c:	4620      	mov	r0, r4
 802322e:	f006 fbaa 	bl	8029986 <__cxa_guard_acquire>
 8023232:	b138      	cbz	r0, 8023244 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023234:	4620      	mov	r0, r4
 8023236:	f006 fbb2 	bl	802999e <__cxa_guard_release>
 802323a:	4a0f      	ldr	r2, [pc, #60]	; (8023278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802323c:	490f      	ldr	r1, [pc, #60]	; (802327c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802323e:	4810      	ldr	r0, [pc, #64]	; (8023280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023240:	f006 fb97 	bl	8029972 <__aeabi_atexit>
 8023244:	4c0f      	ldr	r4, [pc, #60]	; (8023284 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023246:	7823      	ldrb	r3, [r4, #0]
 8023248:	f3bf 8f5b 	dmb	ish
 802324c:	07db      	lsls	r3, r3, #31
 802324e:	d40b      	bmi.n	8023268 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023250:	4620      	mov	r0, r4
 8023252:	f006 fb98 	bl	8029986 <__cxa_guard_acquire>
 8023256:	b138      	cbz	r0, 8023268 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023258:	4620      	mov	r0, r4
 802325a:	f006 fba0 	bl	802999e <__cxa_guard_release>
 802325e:	4a06      	ldr	r2, [pc, #24]	; (8023278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023260:	4909      	ldr	r1, [pc, #36]	; (8023288 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023262:	480a      	ldr	r0, [pc, #40]	; (802328c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023264:	f006 fb85 	bl	8029972 <__aeabi_atexit>
 8023268:	4b05      	ldr	r3, [pc, #20]	; (8023280 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802326a:	63ab      	str	r3, [r5, #56]	; 0x38
 802326c:	4b07      	ldr	r3, [pc, #28]	; (802328c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802326e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023270:	bd38      	pop	{r3, r4, r5, pc}
 8023272:	bf00      	nop
 8023274:	2000bffc 	.word	0x2000bffc
 8023278:	20000000 	.word	0x20000000
 802327c:	08021ad7 	.word	0x08021ad7
 8023280:	200000a0 	.word	0x200000a0
 8023284:	2000c000 	.word	0x2000c000
 8023288:	08021ad5 	.word	0x08021ad5
 802328c:	200000a4 	.word	0x200000a4

08023290 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8023290:	b510      	push	{r4, lr}
 8023292:	4604      	mov	r4, r0
 8023294:	f7ff ff88 	bl	80231a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023298:	4620      	mov	r0, r4
 802329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802329e:	f7ff bfbd 	b.w	802321c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080232a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80232a4:	b538      	push	{r3, r4, r5, lr}
 80232a6:	4c15      	ldr	r4, [pc, #84]	; (80232fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80232a8:	4605      	mov	r5, r0
 80232aa:	7823      	ldrb	r3, [r4, #0]
 80232ac:	f3bf 8f5b 	dmb	ish
 80232b0:	07da      	lsls	r2, r3, #31
 80232b2:	d40b      	bmi.n	80232cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80232b4:	4620      	mov	r0, r4
 80232b6:	f006 fb66 	bl	8029986 <__cxa_guard_acquire>
 80232ba:	b138      	cbz	r0, 80232cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80232bc:	4620      	mov	r0, r4
 80232be:	f006 fb6e 	bl	802999e <__cxa_guard_release>
 80232c2:	4a0f      	ldr	r2, [pc, #60]	; (8023300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80232c4:	490f      	ldr	r1, [pc, #60]	; (8023304 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80232c6:	4810      	ldr	r0, [pc, #64]	; (8023308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80232c8:	f006 fb53 	bl	8029972 <__aeabi_atexit>
 80232cc:	4c0f      	ldr	r4, [pc, #60]	; (802330c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80232ce:	7823      	ldrb	r3, [r4, #0]
 80232d0:	f3bf 8f5b 	dmb	ish
 80232d4:	07db      	lsls	r3, r3, #31
 80232d6:	d40b      	bmi.n	80232f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80232d8:	4620      	mov	r0, r4
 80232da:	f006 fb54 	bl	8029986 <__cxa_guard_acquire>
 80232de:	b138      	cbz	r0, 80232f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80232e0:	4620      	mov	r0, r4
 80232e2:	f006 fb5c 	bl	802999e <__cxa_guard_release>
 80232e6:	4a06      	ldr	r2, [pc, #24]	; (8023300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80232e8:	4909      	ldr	r1, [pc, #36]	; (8023310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80232ea:	480a      	ldr	r0, [pc, #40]	; (8023314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80232ec:	f006 fb41 	bl	8029972 <__aeabi_atexit>
 80232f0:	4b05      	ldr	r3, [pc, #20]	; (8023308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80232f2:	652b      	str	r3, [r5, #80]	; 0x50
 80232f4:	4b07      	ldr	r3, [pc, #28]	; (8023314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80232f6:	656b      	str	r3, [r5, #84]	; 0x54
 80232f8:	bd38      	pop	{r3, r4, r5, pc}
 80232fa:	bf00      	nop
 80232fc:	2000bff4 	.word	0x2000bff4
 8023300:	20000000 	.word	0x20000000
 8023304:	08021acb 	.word	0x08021acb
 8023308:	20000098 	.word	0x20000098
 802330c:	2000bff8 	.word	0x2000bff8
 8023310:	08021ac9 	.word	0x08021ac9
 8023314:	2000009c 	.word	0x2000009c

08023318 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023318:	b538      	push	{r3, r4, r5, lr}
 802331a:	4c15      	ldr	r4, [pc, #84]	; (8023370 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802331c:	4605      	mov	r5, r0
 802331e:	7823      	ldrb	r3, [r4, #0]
 8023320:	f3bf 8f5b 	dmb	ish
 8023324:	07da      	lsls	r2, r3, #31
 8023326:	d40b      	bmi.n	8023340 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023328:	4620      	mov	r0, r4
 802332a:	f006 fb2c 	bl	8029986 <__cxa_guard_acquire>
 802332e:	b138      	cbz	r0, 8023340 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023330:	4620      	mov	r0, r4
 8023332:	f006 fb34 	bl	802999e <__cxa_guard_release>
 8023336:	4a0f      	ldr	r2, [pc, #60]	; (8023374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023338:	490f      	ldr	r1, [pc, #60]	; (8023378 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802333a:	4810      	ldr	r0, [pc, #64]	; (802337c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802333c:	f006 fb19 	bl	8029972 <__aeabi_atexit>
 8023340:	4c0f      	ldr	r4, [pc, #60]	; (8023380 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023342:	7823      	ldrb	r3, [r4, #0]
 8023344:	f3bf 8f5b 	dmb	ish
 8023348:	07db      	lsls	r3, r3, #31
 802334a:	d40b      	bmi.n	8023364 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802334c:	4620      	mov	r0, r4
 802334e:	f006 fb1a 	bl	8029986 <__cxa_guard_acquire>
 8023352:	b138      	cbz	r0, 8023364 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023354:	4620      	mov	r0, r4
 8023356:	f006 fb22 	bl	802999e <__cxa_guard_release>
 802335a:	4a06      	ldr	r2, [pc, #24]	; (8023374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802335c:	4909      	ldr	r1, [pc, #36]	; (8023384 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802335e:	480a      	ldr	r0, [pc, #40]	; (8023388 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023360:	f006 fb07 	bl	8029972 <__aeabi_atexit>
 8023364:	4b05      	ldr	r3, [pc, #20]	; (802337c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023366:	64ab      	str	r3, [r5, #72]	; 0x48
 8023368:	4b07      	ldr	r3, [pc, #28]	; (8023388 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802336a:	64eb      	str	r3, [r5, #76]	; 0x4c
 802336c:	bd38      	pop	{r3, r4, r5, pc}
 802336e:	bf00      	nop
 8023370:	2000bfe4 	.word	0x2000bfe4
 8023374:	20000000 	.word	0x20000000
 8023378:	08021acf 	.word	0x08021acf
 802337c:	20000088 	.word	0x20000088
 8023380:	2000bfe8 	.word	0x2000bfe8
 8023384:	08021acd 	.word	0x08021acd
 8023388:	2000008c 	.word	0x2000008c

0802338c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 802338c:	b510      	push	{r4, lr}
 802338e:	4604      	mov	r4, r0
 8023390:	f7ff ff88 	bl	80232a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023394:	4620      	mov	r0, r4
 8023396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802339a:	f7ff bfbd 	b.w	8023318 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0802339e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 802339e:	b510      	push	{r4, lr}
 80233a0:	4604      	mov	r4, r0
 80233a2:	f7ff fff3 	bl	802338c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80233a6:	4620      	mov	r0, r4
 80233a8:	f7ff ff72 	bl	8023290 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80233ac:	4620      	mov	r0, r4
 80233ae:	f7ff fe73 	bl	8023098 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80233b2:	4620      	mov	r0, r4
 80233b4:	f7ff fdf2 	bl	8022f9c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80233b8:	4620      	mov	r0, r4
 80233ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233be:	f7ff bee9 	b.w	8023194 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080233c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80233c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233c8:	b087      	sub	sp, #28
 80233ca:	7888      	ldrb	r0, [r1, #2]
 80233cc:	4616      	mov	r6, r2
 80233ce:	9001      	str	r0, [sp, #4]
 80233d0:	7848      	ldrb	r0, [r1, #1]
 80233d2:	9100      	str	r1, [sp, #0]
 80233d4:	9002      	str	r0, [sp, #8]
 80233d6:	7808      	ldrb	r0, [r1, #0]
 80233d8:	9901      	ldr	r1, [sp, #4]
 80233da:	9003      	str	r0, [sp, #12]
 80233dc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80233e0:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 80233e4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80233e8:	9902      	ldr	r1, [sp, #8]
 80233ea:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80233ee:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80233f2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80233f6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80233fa:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80233fe:	9005      	str	r0, [sp, #20]
 8023400:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8023404:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023408:	2d00      	cmp	r5, #0
 802340a:	eb06 080a 	add.w	r8, r6, sl
 802340e:	db4a      	blt.n	80234a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8023410:	45a9      	cmp	r9, r5
 8023412:	dd48      	ble.n	80234a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8023414:	f1bc 0f00 	cmp.w	ip, #0
 8023418:	db43      	blt.n	80234a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802341a:	45e6      	cmp	lr, ip
 802341c:	dd41      	ble.n	80234a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802341e:	f816 600a 	ldrb.w	r6, [r6, sl]
 8023422:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023426:	441e      	add	r6, r3
 8023428:	f11c 0001 	adds.w	r0, ip, #1
 802342c:	d43e      	bmi.n	80234ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802342e:	4586      	cmp	lr, r0
 8023430:	dd3c      	ble.n	80234ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8023432:	2a00      	cmp	r2, #0
 8023434:	d03a      	beq.n	80234ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8023436:	f898 0001 	ldrb.w	r0, [r8, #1]
 802343a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802343e:	4418      	add	r0, r3
 8023440:	3501      	adds	r5, #1
 8023442:	d437      	bmi.n	80234b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8023444:	45a9      	cmp	r9, r5
 8023446:	dd35      	ble.n	80234b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8023448:	b3a4      	cbz	r4, 80234b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802344a:	f1bc 0f00 	cmp.w	ip, #0
 802344e:	db2f      	blt.n	80234b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8023450:	45e6      	cmp	lr, ip
 8023452:	dd2d      	ble.n	80234b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8023454:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802345c:	441d      	add	r5, r3
 802345e:	f11c 0c01 	adds.w	ip, ip, #1
 8023462:	d42a      	bmi.n	80234ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8023464:	45e6      	cmp	lr, ip
 8023466:	dd28      	ble.n	80234ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8023468:	b33a      	cbz	r2, 80234ba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802346a:	44c6      	add	lr, r8
 802346c:	f89e c001 	ldrb.w	ip, [lr, #1]
 8023470:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023474:	4463      	add	r3, ip
 8023476:	ea6f 0c07 	mvn.w	ip, r7
 802347a:	2a0f      	cmp	r2, #15
 802347c:	f896 a000 	ldrb.w	sl, [r6]
 8023480:	fa5f fc8c 	uxtb.w	ip, ip
 8023484:	f890 b000 	ldrb.w	fp, [r0]
 8023488:	f895 9000 	ldrb.w	r9, [r5]
 802348c:	7819      	ldrb	r1, [r3, #0]
 802348e:	d801      	bhi.n	8023494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8023490:	2c0f      	cmp	r4, #15
 8023492:	d914      	bls.n	80234be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 8023494:	4b40      	ldr	r3, [pc, #256]	; (8023598 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8023496:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802349a:	4a40      	ldr	r2, [pc, #256]	; (802359c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 802349c:	4840      	ldr	r0, [pc, #256]	; (80235a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 802349e:	f006 fa9b 	bl	80299d8 <__assert_func>
 80234a2:	ae05      	add	r6, sp, #20
 80234a4:	e7c0      	b.n	8023428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80234a6:	a805      	add	r0, sp, #20
 80234a8:	4606      	mov	r6, r0
 80234aa:	e7c9      	b.n	8023440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80234ac:	a805      	add	r0, sp, #20
 80234ae:	e7c7      	b.n	8023440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80234b0:	ad05      	add	r5, sp, #20
 80234b2:	e7d4      	b.n	802345e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80234b4:	ab05      	add	r3, sp, #20
 80234b6:	461d      	mov	r5, r3
 80234b8:	e7dd      	b.n	8023476 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80234ba:	ab05      	add	r3, sp, #20
 80234bc:	e7db      	b.n	8023476 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80234be:	b292      	uxth	r2, r2
 80234c0:	b2a4      	uxth	r4, r4
 80234c2:	fa1f fc8c 	uxth.w	ip, ip
 80234c6:	fb02 f804 	mul.w	r8, r2, r4
 80234ca:	0112      	lsls	r2, r2, #4
 80234cc:	b2bf      	uxth	r7, r7
 80234ce:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 80234d2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80234d6:	eba2 0208 	sub.w	r2, r2, r8
 80234da:	b2a4      	uxth	r4, r4
 80234dc:	b292      	uxth	r2, r2
 80234de:	ebae 0e04 	sub.w	lr, lr, r4
 80234e2:	fb02 fb0b 	mul.w	fp, r2, fp
 80234e6:	fa1f fe8e 	uxth.w	lr, lr
 80234ea:	fb0e ba0a 	mla	sl, lr, sl, fp
 80234ee:	fb04 aa09 	mla	sl, r4, r9, sl
 80234f2:	fb08 aa01 	mla	sl, r8, r1, sl
 80234f6:	9903      	ldr	r1, [sp, #12]
 80234f8:	fb11 f90c 	smulbb	r9, r1, ip
 80234fc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023500:	9900      	ldr	r1, [sp, #0]
 8023502:	fb0a 9a07 	mla	sl, sl, r7, r9
 8023506:	fa1f fa8a 	uxth.w	sl, sl
 802350a:	f10a 0901 	add.w	r9, sl, #1
 802350e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8023512:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023516:	f881 a000 	strb.w	sl, [r1]
 802351a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802351e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8023522:	fb02 fa0a 	mul.w	sl, r2, sl
 8023526:	9902      	ldr	r1, [sp, #8]
 8023528:	fb0e aa09 	mla	sl, lr, r9, sl
 802352c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8023530:	fb04 aa09 	mla	sl, r4, r9, sl
 8023534:	f893 9001 	ldrb.w	r9, [r3, #1]
 8023538:	fb08 a909 	mla	r9, r8, r9, sl
 802353c:	fb11 fa0c 	smulbb	sl, r1, ip
 8023540:	9900      	ldr	r1, [sp, #0]
 8023542:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023546:	fb09 a907 	mla	r9, r9, r7, sl
 802354a:	fa1f f989 	uxth.w	r9, r9
 802354e:	f109 0a01 	add.w	sl, r9, #1
 8023552:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8023556:	ea4f 2929 	mov.w	r9, r9, asr #8
 802355a:	f881 9001 	strb.w	r9, [r1, #1]
 802355e:	7880      	ldrb	r0, [r0, #2]
 8023560:	78b6      	ldrb	r6, [r6, #2]
 8023562:	4342      	muls	r2, r0
 8023564:	78a8      	ldrb	r0, [r5, #2]
 8023566:	789b      	ldrb	r3, [r3, #2]
 8023568:	fb0e 2206 	mla	r2, lr, r6, r2
 802356c:	fb04 2400 	mla	r4, r4, r0, r2
 8023570:	fb08 4803 	mla	r8, r8, r3, r4
 8023574:	9b01      	ldr	r3, [sp, #4]
 8023576:	fb13 fc0c 	smulbb	ip, r3, ip
 802357a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802357e:	fb08 c707 	mla	r7, r8, r7, ip
 8023582:	b2bf      	uxth	r7, r7
 8023584:	f107 0c01 	add.w	ip, r7, #1
 8023588:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 802358c:	123f      	asrs	r7, r7, #8
 802358e:	708f      	strb	r7, [r1, #2]
 8023590:	b007      	add	sp, #28
 8023592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023596:	bf00      	nop
 8023598:	0802efeb 	.word	0x0802efeb
 802359c:	0802f4e2 	.word	0x0802f4e2
 80235a0:	0802f0b4 	.word	0x0802f0b4

080235a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80235a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a8:	ed2d 8b08 	vpush	{d8-d11}
 80235ac:	b095      	sub	sp, #84	; 0x54
 80235ae:	eeb0 aa40 	vmov.f32	s20, s0
 80235b2:	eef0 9a60 	vmov.f32	s19, s1
 80235b6:	930a      	str	r3, [sp, #40]	; 0x28
 80235b8:	eeb0 9a41 	vmov.f32	s18, s2
 80235bc:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80235c0:	eeb0 8a62 	vmov.f32	s16, s5
 80235c4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80235c6:	eef0 8a43 	vmov.f32	s17, s6
 80235ca:	930c      	str	r3, [sp, #48]	; 0x30
 80235cc:	eef0 ba44 	vmov.f32	s23, s8
 80235d0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80235d4:	eeb0 ba64 	vmov.f32	s22, s9
 80235d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80235da:	eef0 aa45 	vmov.f32	s21, s10
 80235de:	9310      	str	r3, [sp, #64]	; 0x40
 80235e0:	6860      	ldr	r0, [r4, #4]
 80235e2:	910f      	str	r1, [sp, #60]	; 0x3c
 80235e4:	9212      	str	r2, [sp, #72]	; 0x48
 80235e6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80235e8:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 80235ec:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80235f0:	fb00 1303 	mla	r3, r0, r3, r1
 80235f4:	6821      	ldr	r1, [r4, #0]
 80235f6:	6854      	ldr	r4, [r2, #4]
 80235f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235fc:	18cb      	adds	r3, r1, r3
 80235fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8023600:	6813      	ldr	r3, [r2, #0]
 8023602:	930e      	str	r3, [sp, #56]	; 0x38
 8023604:	1d23      	adds	r3, r4, #4
 8023606:	9309      	str	r3, [sp, #36]	; 0x24
 8023608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802360a:	43db      	mvns	r3, r3
 802360c:	b2db      	uxtb	r3, r3
 802360e:	930d      	str	r3, [sp, #52]	; 0x34
 8023610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023612:	2b00      	cmp	r3, #0
 8023614:	dc03      	bgt.n	802361e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023618:	2b00      	cmp	r3, #0
 802361a:	f340 823c 	ble.w	8023a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802361e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023620:	2b00      	cmp	r3, #0
 8023622:	f340 8115 	ble.w	8023850 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8023626:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023628:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802362a:	1412      	asrs	r2, r2, #16
 802362c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023630:	d431      	bmi.n	8023696 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023632:	1c51      	adds	r1, r2, #1
 8023634:	428d      	cmp	r5, r1
 8023636:	dd31      	ble.n	802369c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023638:	2b00      	cmp	r3, #0
 802363a:	db2f      	blt.n	802369c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802363c:	1c59      	adds	r1, r3, #1
 802363e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023640:	4288      	cmp	r0, r1
 8023642:	dd2b      	ble.n	802369c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8023644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023646:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023648:	3b01      	subs	r3, #1
 802364a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802364c:	fb02 1203 	mla	r2, r2, r3, r1
 8023650:	1412      	asrs	r2, r2, #16
 8023652:	d42d      	bmi.n	80236b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8023654:	3201      	adds	r2, #1
 8023656:	4295      	cmp	r5, r2
 8023658:	dd2a      	ble.n	80236b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802365a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802365c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802365e:	fb02 1303 	mla	r3, r2, r3, r1
 8023662:	141b      	asrs	r3, r3, #16
 8023664:	d424      	bmi.n	80236b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8023666:	3301      	adds	r3, #1
 8023668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802366a:	429a      	cmp	r2, r3
 802366c:	dd20      	ble.n	80236b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802366e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023670:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8023674:	f103 0c03 	add.w	ip, r3, #3
 8023678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802367a:	9311      	str	r3, [sp, #68]	; 0x44
 802367c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802367e:	2b00      	cmp	r3, #0
 8023680:	f300 814f 	bgt.w	8023922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 8023684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802368c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023690:	441a      	add	r2, r3
 8023692:	920b      	str	r2, [sp, #44]	; 0x2c
 8023694:	e0de      	b.n	8023854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8023696:	1c51      	adds	r1, r2, #1
 8023698:	f040 80cb 	bne.w	8023832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802369c:	42aa      	cmp	r2, r5
 802369e:	f280 80c8 	bge.w	8023832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80236a2:	1c5f      	adds	r7, r3, #1
 80236a4:	f2c0 80c5 	blt.w	8023832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80236a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80236aa:	4293      	cmp	r3, r2
 80236ac:	f280 80c1 	bge.w	8023832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80236b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80236b4:	9311      	str	r3, [sp, #68]	; 0x44
 80236b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	dde3      	ble.n	8023684 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80236bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80236be:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80236c0:	141a      	asrs	r2, r3, #16
 80236c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80236c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80236c6:	1400      	asrs	r0, r0, #16
 80236c8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80236cc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80236d0:	f100 810e 	bmi.w	80238f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 80236d4:	1c46      	adds	r6, r0, #1
 80236d6:	42b5      	cmp	r5, r6
 80236d8:	f340 810c 	ble.w	80238f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80236dc:	2a00      	cmp	r2, #0
 80236de:	f2c0 8109 	blt.w	80238f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80236e2:	1c56      	adds	r6, r2, #1
 80236e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80236e6:	42b4      	cmp	r4, r6
 80236e8:	f340 8104 	ble.w	80238f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80236ec:	fb02 0005 	mla	r0, r2, r5, r0
 80236f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80236f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80236f4:	f814 e000 	ldrb.w	lr, [r4, r0]
 80236f8:	4402      	add	r2, r0
 80236fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80236fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023700:	eb00 080e 	add.w	r8, r0, lr
 8023704:	2b00      	cmp	r3, #0
 8023706:	f000 80e4 	beq.w	80238d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 802370a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802370e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023712:	4484      	add	ip, r0
 8023714:	2900      	cmp	r1, #0
 8023716:	f000 80e5 	beq.w	80238e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 802371a:	1950      	adds	r0, r2, r5
 802371c:	5d52      	ldrb	r2, [r2, r5]
 802371e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023720:	7840      	ldrb	r0, [r0, #1]
 8023722:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023726:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802372a:	4422      	add	r2, r4
 802372c:	4420      	add	r0, r4
 802372e:	b29b      	uxth	r3, r3
 8023730:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023732:	b289      	uxth	r1, r1
 8023734:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8023738:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802373c:	fb03 fa01 	mul.w	sl, r3, r1
 8023740:	011b      	lsls	r3, r3, #4
 8023742:	f89c e000 	ldrb.w	lr, [ip]
 8023746:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802374a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802374e:	eba3 030a 	sub.w	r3, r3, sl
 8023752:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023754:	b289      	uxth	r1, r1
 8023756:	b29b      	uxth	r3, r3
 8023758:	eba9 0901 	sub.w	r9, r9, r1
 802375c:	fb03 fe0e 	mul.w	lr, r3, lr
 8023760:	fa1f f989 	uxth.w	r9, r9
 8023764:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023768:	f892 b000 	ldrb.w	fp, [r2]
 802376c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023770:	f890 b000 	ldrb.w	fp, [r0]
 8023774:	fb0a ee0b 	mla	lr, sl, fp, lr
 8023778:	f897 b000 	ldrb.w	fp, [r7]
 802377c:	fb1b fb04 	smulbb	fp, fp, r4
 8023780:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023784:	fb0e be06 	mla	lr, lr, r6, fp
 8023788:	fa1f fe8e 	uxth.w	lr, lr
 802378c:	f10e 0b01 	add.w	fp, lr, #1
 8023790:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 8023794:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8023798:	f887 b000 	strb.w	fp, [r7]
 802379c:	f89c e001 	ldrb.w	lr, [ip, #1]
 80237a0:	f898 b001 	ldrb.w	fp, [r8, #1]
 80237a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80237a8:	fb09 ee0b 	mla	lr, r9, fp, lr
 80237ac:	f892 b001 	ldrb.w	fp, [r2, #1]
 80237b0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80237b4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80237b8:	fb0a ee0b 	mla	lr, sl, fp, lr
 80237bc:	f897 b001 	ldrb.w	fp, [r7, #1]
 80237c0:	fb1b fb04 	smulbb	fp, fp, r4
 80237c4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80237c8:	fb0e be06 	mla	lr, lr, r6, fp
 80237cc:	fa1f fe8e 	uxth.w	lr, lr
 80237d0:	f10e 0b01 	add.w	fp, lr, #1
 80237d4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80237d8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80237dc:	f887 e001 	strb.w	lr, [r7, #1]
 80237e0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80237e4:	f898 e002 	ldrb.w	lr, [r8, #2]
 80237e8:	fb03 f30c 	mul.w	r3, r3, ip
 80237ec:	fb09 330e 	mla	r3, r9, lr, r3
 80237f0:	f892 e002 	ldrb.w	lr, [r2, #2]
 80237f4:	7882      	ldrb	r2, [r0, #2]
 80237f6:	fb01 310e 	mla	r1, r1, lr, r3
 80237fa:	fb0a 1a02 	mla	sl, sl, r2, r1
 80237fe:	78b9      	ldrb	r1, [r7, #2]
 8023800:	fb11 f104 	smulbb	r1, r1, r4
 8023804:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023808:	fb0a 1606 	mla	r6, sl, r6, r1
 802380c:	b2b6      	uxth	r6, r6
 802380e:	1c73      	adds	r3, r6, #1
 8023810:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023814:	1236      	asrs	r6, r6, #8
 8023816:	70be      	strb	r6, [r7, #2]
 8023818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802381a:	3703      	adds	r7, #3
 802381c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802381e:	4413      	add	r3, r2
 8023820:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023822:	9327      	str	r3, [sp, #156]	; 0x9c
 8023824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023826:	4413      	add	r3, r2
 8023828:	9328      	str	r3, [sp, #160]	; 0xa0
 802382a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802382c:	3b01      	subs	r3, #1
 802382e:	9311      	str	r3, [sp, #68]	; 0x44
 8023830:	e741      	b.n	80236b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8023832:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023834:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023836:	4413      	add	r3, r2
 8023838:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802383a:	9327      	str	r3, [sp, #156]	; 0x9c
 802383c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802383e:	4413      	add	r3, r2
 8023840:	9328      	str	r3, [sp, #160]	; 0xa0
 8023842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023844:	3b01      	subs	r3, #1
 8023846:	930a      	str	r3, [sp, #40]	; 0x28
 8023848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802384a:	3303      	adds	r3, #3
 802384c:	930b      	str	r3, [sp, #44]	; 0x2c
 802384e:	e6e6      	b.n	802361e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8023850:	f47f aef8 	bne.w	8023644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8023854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023856:	2b00      	cmp	r3, #0
 8023858:	f340 811d 	ble.w	8023a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802385c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023860:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023862:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023866:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802386a:	eef0 6a48 	vmov.f32	s13, s16
 802386e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023872:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802387a:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 802387e:	eef0 6a68 	vmov.f32	s13, s17
 8023882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023886:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802388a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802388e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023892:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023896:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802389a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802389e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80238a2:	ee18 2a10 	vmov	r2, s16
 80238a6:	eeb0 8a47 	vmov.f32	s16, s14
 80238aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80238ae:	ee18 2a90 	vmov	r2, s17
 80238b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80238b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238b6:	eef0 8a67 	vmov.f32	s17, s15
 80238ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80238be:	932a      	str	r3, [sp, #168]	; 0xa8
 80238c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80238c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80238c4:	3b01      	subs	r3, #1
 80238c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80238c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80238ca:	bf08      	it	eq
 80238cc:	4613      	moveq	r3, r2
 80238ce:	930a      	str	r3, [sp, #40]	; 0x28
 80238d0:	e69e      	b.n	8023610 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80238d2:	b151      	cbz	r1, 80238ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80238d4:	5d52      	ldrb	r2, [r2, r5]
 80238d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80238d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238dc:	4402      	add	r2, r0
 80238de:	4640      	mov	r0, r8
 80238e0:	46c4      	mov	ip, r8
 80238e2:	e724      	b.n	802372e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80238e4:	4640      	mov	r0, r8
 80238e6:	4642      	mov	r2, r8
 80238e8:	e721      	b.n	802372e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 80238ea:	4640      	mov	r0, r8
 80238ec:	4642      	mov	r2, r8
 80238ee:	e7f7      	b.n	80238e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 80238f0:	1c46      	adds	r6, r0, #1
 80238f2:	d191      	bne.n	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80238f4:	4285      	cmp	r5, r0
 80238f6:	dd8f      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80238f8:	1c54      	adds	r4, r2, #1
 80238fa:	db8d      	blt.n	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80238fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80238fe:	4294      	cmp	r4, r2
 8023900:	dd8a      	ble.n	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023902:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023904:	9002      	str	r0, [sp, #8]
 8023906:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023908:	e9cd 2303 	strd	r2, r3, [sp, #12]
 802390c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802390e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023910:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023914:	e9cd 5300 	strd	r5, r3, [sp]
 8023918:	4639      	mov	r1, r7
 802391a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802391c:	f7ff fd52 	bl	80233c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8023920:	e77a      	b.n	8023818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8023922:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023924:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023926:	1410      	asrs	r0, r2, #16
 8023928:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802392c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802392e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023930:	1412      	asrs	r2, r2, #16
 8023932:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023936:	fb05 2000 	mla	r0, r5, r0, r2
 802393a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802393c:	f814 8000 	ldrb.w	r8, [r4, r0]
 8023940:	4402      	add	r2, r0
 8023942:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023944:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023948:	eb00 0708 	add.w	r7, r0, r8
 802394c:	2b00      	cmp	r3, #0
 802394e:	f000 8093 	beq.w	8023a78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8023952:	7856      	ldrb	r6, [r2, #1]
 8023954:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023958:	4406      	add	r6, r0
 802395a:	2900      	cmp	r1, #0
 802395c:	f000 8095 	beq.w	8023a8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8023960:	1950      	adds	r0, r2, r5
 8023962:	5d52      	ldrb	r2, [r2, r5]
 8023964:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023966:	7840      	ldrb	r0, [r0, #1]
 8023968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802396c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023970:	4422      	add	r2, r4
 8023972:	4420      	add	r0, r4
 8023974:	b29b      	uxth	r3, r3
 8023976:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023978:	b289      	uxth	r1, r1
 802397a:	f10c 0c03 	add.w	ip, ip, #3
 802397e:	f814 b008 	ldrb.w	fp, [r4, r8]
 8023982:	fb03 f901 	mul.w	r9, r3, r1
 8023986:	011b      	lsls	r3, r3, #4
 8023988:	f896 8000 	ldrb.w	r8, [r6]
 802398c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023990:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023994:	eba3 0309 	sub.w	r3, r3, r9
 8023998:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802399a:	b289      	uxth	r1, r1
 802399c:	b29b      	uxth	r3, r3
 802399e:	ebae 0e01 	sub.w	lr, lr, r1
 80239a2:	fb03 f808 	mul.w	r8, r3, r8
 80239a6:	fa1f fe8e 	uxth.w	lr, lr
 80239aa:	fb0e 880b 	mla	r8, lr, fp, r8
 80239ae:	f892 b000 	ldrb.w	fp, [r2]
 80239b2:	fb01 880b 	mla	r8, r1, fp, r8
 80239b6:	f890 b000 	ldrb.w	fp, [r0]
 80239ba:	fb09 880b 	mla	r8, r9, fp, r8
 80239be:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 80239c2:	fb1b fb04 	smulbb	fp, fp, r4
 80239c6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80239ca:	fb08 b80a 	mla	r8, r8, sl, fp
 80239ce:	fa1f f888 	uxth.w	r8, r8
 80239d2:	f108 0b01 	add.w	fp, r8, #1
 80239d6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80239da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80239de:	f80c 8c06 	strb.w	r8, [ip, #-6]
 80239e2:	f896 8001 	ldrb.w	r8, [r6, #1]
 80239e6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80239ea:	fb03 f808 	mul.w	r8, r3, r8
 80239ee:	fb0e 880b 	mla	r8, lr, fp, r8
 80239f2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80239f6:	fb01 880b 	mla	r8, r1, fp, r8
 80239fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 80239fe:	fb09 880b 	mla	r8, r9, fp, r8
 8023a02:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8023a06:	fb1b fb04 	smulbb	fp, fp, r4
 8023a0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8023a0e:	fb08 b80a 	mla	r8, r8, sl, fp
 8023a12:	fa1f f888 	uxth.w	r8, r8
 8023a16:	f108 0b01 	add.w	fp, r8, #1
 8023a1a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8023a1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023a22:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8023a26:	78b6      	ldrb	r6, [r6, #2]
 8023a28:	78bf      	ldrb	r7, [r7, #2]
 8023a2a:	4373      	muls	r3, r6
 8023a2c:	7896      	ldrb	r6, [r2, #2]
 8023a2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023a30:	fb0e 3307 	mla	r3, lr, r7, r3
 8023a34:	fb01 3306 	mla	r3, r1, r6, r3
 8023a38:	7886      	ldrb	r6, [r0, #2]
 8023a3a:	fb09 3906 	mla	r9, r9, r6, r3
 8023a3e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8023a42:	fb13 f304 	smulbb	r3, r3, r4
 8023a46:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8023a4a:	fb09 390a 	mla	r9, r9, sl, r3
 8023a4e:	fa1f f989 	uxth.w	r9, r9
 8023a52:	f109 0301 	add.w	r3, r9, #1
 8023a56:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8023a5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023a5c:	4413      	add	r3, r2
 8023a5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023a60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023a64:	9327      	str	r3, [sp, #156]	; 0x9c
 8023a66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023a68:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8023a6c:	4413      	add	r3, r2
 8023a6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a72:	3b01      	subs	r3, #1
 8023a74:	9311      	str	r3, [sp, #68]	; 0x44
 8023a76:	e601      	b.n	802367c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8023a78:	b151      	cbz	r1, 8023a90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8023a7a:	5d52      	ldrb	r2, [r2, r5]
 8023a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a82:	4402      	add	r2, r0
 8023a84:	4638      	mov	r0, r7
 8023a86:	463e      	mov	r6, r7
 8023a88:	e774      	b.n	8023974 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8023a8a:	4638      	mov	r0, r7
 8023a8c:	463a      	mov	r2, r7
 8023a8e:	e771      	b.n	8023974 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8023a90:	4638      	mov	r0, r7
 8023a92:	463a      	mov	r2, r7
 8023a94:	e7f7      	b.n	8023a86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8023a96:	b015      	add	sp, #84	; 0x54
 8023a98:	ecbd 8b08 	vpop	{d8-d11}
 8023a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8023aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aa4:	780d      	ldrb	r5, [r1, #0]
 8023aa6:	f891 9002 	ldrb.w	r9, [r1, #2]
 8023aaa:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8023aae:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8023ab2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8023ab6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8023aba:	f891 9001 	ldrb.w	r9, [r1, #1]
 8023abe:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8023ac2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8023ac6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8023aca:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8023ace:	9501      	str	r5, [sp, #4]
 8023ad0:	fb06 470c 	mla	r7, r6, ip, r4
 8023ad4:	2e00      	cmp	r6, #0
 8023ad6:	eb02 0e07 	add.w	lr, r2, r7
 8023ada:	db46      	blt.n	8023b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8023adc:	45b0      	cmp	r8, r6
 8023ade:	dd44      	ble.n	8023b6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8023ae0:	2c00      	cmp	r4, #0
 8023ae2:	db40      	blt.n	8023b66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8023ae4:	45a4      	cmp	ip, r4
 8023ae6:	dd3e      	ble.n	8023b66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8023ae8:	5dd7      	ldrb	r7, [r2, r7]
 8023aea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023aee:	441f      	add	r7, r3
 8023af0:	1c62      	adds	r2, r4, #1
 8023af2:	d43d      	bmi.n	8023b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8023af4:	4594      	cmp	ip, r2
 8023af6:	dd3b      	ble.n	8023b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8023af8:	f1ba 0f00 	cmp.w	sl, #0
 8023afc:	d038      	beq.n	8023b70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8023afe:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8023b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023b06:	441d      	add	r5, r3
 8023b08:	3601      	adds	r6, #1
 8023b0a:	d435      	bmi.n	8023b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8023b0c:	45b0      	cmp	r8, r6
 8023b0e:	dd33      	ble.n	8023b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8023b10:	b390      	cbz	r0, 8023b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8023b12:	2c00      	cmp	r4, #0
 8023b14:	db2e      	blt.n	8023b74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8023b16:	45a4      	cmp	ip, r4
 8023b18:	dd2c      	ble.n	8023b74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8023b1a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8023b1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023b22:	441e      	add	r6, r3
 8023b24:	1c62      	adds	r2, r4, #1
 8023b26:	d42a      	bmi.n	8023b7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8023b28:	4594      	cmp	ip, r2
 8023b2a:	dd28      	ble.n	8023b7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8023b2c:	f1ba 0f00 	cmp.w	sl, #0
 8023b30:	d025      	beq.n	8023b7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8023b32:	44f4      	add	ip, lr
 8023b34:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023b38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b3c:	4413      	add	r3, r2
 8023b3e:	f1ba 0f0f 	cmp.w	sl, #15
 8023b42:	f897 8000 	ldrb.w	r8, [r7]
 8023b46:	f895 9000 	ldrb.w	r9, [r5]
 8023b4a:	f896 e000 	ldrb.w	lr, [r6]
 8023b4e:	f893 c000 	ldrb.w	ip, [r3]
 8023b52:	d801      	bhi.n	8023b58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8023b54:	280f      	cmp	r0, #15
 8023b56:	d914      	bls.n	8023b82 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8023b58:	4b29      	ldr	r3, [pc, #164]	; (8023c00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8023b5a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023b5e:	4a29      	ldr	r2, [pc, #164]	; (8023c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8023b60:	4829      	ldr	r0, [pc, #164]	; (8023c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8023b62:	f005 ff39 	bl	80299d8 <__assert_func>
 8023b66:	af01      	add	r7, sp, #4
 8023b68:	e7c2      	b.n	8023af0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8023b6a:	ad01      	add	r5, sp, #4
 8023b6c:	462f      	mov	r7, r5
 8023b6e:	e7cb      	b.n	8023b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023b70:	ad01      	add	r5, sp, #4
 8023b72:	e7c9      	b.n	8023b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8023b74:	ae01      	add	r6, sp, #4
 8023b76:	e7d5      	b.n	8023b24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8023b78:	ab01      	add	r3, sp, #4
 8023b7a:	461e      	mov	r6, r3
 8023b7c:	e7df      	b.n	8023b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8023b7e:	ab01      	add	r3, sp, #4
 8023b80:	e7dd      	b.n	8023b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8023b82:	fa1f f48a 	uxth.w	r4, sl
 8023b86:	b280      	uxth	r0, r0
 8023b88:	fb04 fa00 	mul.w	sl, r4, r0
 8023b8c:	0124      	lsls	r4, r4, #4
 8023b8e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023b92:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8023b96:	b282      	uxth	r2, r0
 8023b98:	eba4 000a 	sub.w	r0, r4, sl
 8023b9c:	ebab 0b02 	sub.w	fp, fp, r2
 8023ba0:	b280      	uxth	r0, r0
 8023ba2:	fa1f fb8b 	uxth.w	fp, fp
 8023ba6:	fb00 f909 	mul.w	r9, r0, r9
 8023baa:	fb0b 9808 	mla	r8, fp, r8, r9
 8023bae:	fb02 8e0e 	mla	lr, r2, lr, r8
 8023bb2:	fb0a ec0c 	mla	ip, sl, ip, lr
 8023bb6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023bba:	f881 c000 	strb.w	ip, [r1]
 8023bbe:	786c      	ldrb	r4, [r5, #1]
 8023bc0:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023bc4:	4344      	muls	r4, r0
 8023bc6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8023bca:	7874      	ldrb	r4, [r6, #1]
 8023bcc:	fb02 cc04 	mla	ip, r2, r4, ip
 8023bd0:	785c      	ldrb	r4, [r3, #1]
 8023bd2:	fb0a c404 	mla	r4, sl, r4, ip
 8023bd6:	1224      	asrs	r4, r4, #8
 8023bd8:	704c      	strb	r4, [r1, #1]
 8023bda:	78ad      	ldrb	r5, [r5, #2]
 8023bdc:	78bc      	ldrb	r4, [r7, #2]
 8023bde:	4368      	muls	r0, r5
 8023be0:	fb0b 0b04 	mla	fp, fp, r4, r0
 8023be4:	78b0      	ldrb	r0, [r6, #2]
 8023be6:	fb02 b000 	mla	r0, r2, r0, fp
 8023bea:	789a      	ldrb	r2, [r3, #2]
 8023bec:	fb0a 0a02 	mla	sl, sl, r2, r0
 8023bf0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023bf4:	f881 a002 	strb.w	sl, [r1, #2]
 8023bf8:	b003      	add	sp, #12
 8023bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bfe:	bf00      	nop
 8023c00:	0802efeb 	.word	0x0802efeb
 8023c04:	0802f4e2 	.word	0x0802f4e2
 8023c08:	0802f0b4 	.word	0x0802f0b4

08023c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c10:	ed2d 8b0a 	vpush	{d8-d12}
 8023c14:	b08f      	sub	sp, #60	; 0x3c
 8023c16:	eeb0 aa40 	vmov.f32	s20, s0
 8023c1a:	eef0 9a60 	vmov.f32	s19, s1
 8023c1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8023c20:	eeb0 9a41 	vmov.f32	s18, s2
 8023c24:	9307      	str	r3, [sp, #28]
 8023c26:	eeb0 8a62 	vmov.f32	s16, s5
 8023c2a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8023c2e:	eef0 8a43 	vmov.f32	s17, s6
 8023c32:	900d      	str	r0, [sp, #52]	; 0x34
 8023c34:	eeb0 ca44 	vmov.f32	s24, s8
 8023c38:	6860      	ldr	r0, [r4, #4]
 8023c3a:	eef0 ba64 	vmov.f32	s23, s9
 8023c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8023c40:	eeb0 ba45 	vmov.f32	s22, s10
 8023c44:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023c48:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8023c4c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8023c50:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8023c54:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023c56:	fb00 1303 	mla	r3, r0, r3, r1
 8023c5a:	6821      	ldr	r1, [r4, #0]
 8023c5c:	6854      	ldr	r4, [r2, #4]
 8023c5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c62:	3404      	adds	r4, #4
 8023c64:	18cb      	adds	r3, r1, r3
 8023c66:	9308      	str	r3, [sp, #32]
 8023c68:	6813      	ldr	r3, [r2, #0]
 8023c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8023c6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	dc03      	bgt.n	8023c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8023c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c74:	2b00      	cmp	r3, #0
 8023c76:	f340 81d2 	ble.w	802401e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8023c7a:	9b07      	ldr	r3, [sp, #28]
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	f340 80e3 	ble.w	8023e48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8023c82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023c84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023c86:	1412      	asrs	r2, r2, #16
 8023c88:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023c8c:	d42f      	bmi.n	8023cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8023c8e:	1c51      	adds	r1, r2, #1
 8023c90:	428d      	cmp	r5, r1
 8023c92:	dd2f      	ble.n	8023cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	db2d      	blt.n	8023cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023c98:	1c59      	adds	r1, r3, #1
 8023c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023c9c:	4288      	cmp	r0, r1
 8023c9e:	dd29      	ble.n	8023cf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8023ca0:	9b07      	ldr	r3, [sp, #28]
 8023ca2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023ca4:	3b01      	subs	r3, #1
 8023ca6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8023ca8:	fb02 1203 	mla	r2, r2, r3, r1
 8023cac:	1412      	asrs	r2, r2, #16
 8023cae:	d42b      	bmi.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023cb0:	3201      	adds	r2, #1
 8023cb2:	4295      	cmp	r5, r2
 8023cb4:	dd28      	ble.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023cb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023cb8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023cba:	fb02 1303 	mla	r3, r2, r3, r1
 8023cbe:	141b      	asrs	r3, r3, #16
 8023cc0:	d422      	bmi.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023cc2:	3301      	adds	r3, #1
 8023cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023cc6:	429a      	cmp	r2, r3
 8023cc8:	dd1e      	ble.n	8023d08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023cca:	9b08      	ldr	r3, [sp, #32]
 8023ccc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8023cd0:	f103 0803 	add.w	r8, r3, #3
 8023cd4:	f1ba 0f00 	cmp.w	sl, #0
 8023cd8:	f300 8119 	bgt.w	8023f0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8023cdc:	9b07      	ldr	r3, [sp, #28]
 8023cde:	9a08      	ldr	r2, [sp, #32]
 8023ce0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ce4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ce8:	441a      	add	r2, r3
 8023cea:	9208      	str	r2, [sp, #32]
 8023cec:	e0ae      	b.n	8023e4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8023cee:	1c51      	adds	r1, r2, #1
 8023cf0:	f040 809b 	bne.w	8023e2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8023cf4:	42aa      	cmp	r2, r5
 8023cf6:	f280 8098 	bge.w	8023e2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8023cfa:	1c5a      	adds	r2, r3, #1
 8023cfc:	f2c0 8095 	blt.w	8023e2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8023d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023d02:	4293      	cmp	r3, r2
 8023d04:	f280 8091 	bge.w	8023e2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8023d08:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8023d0c:	f1bb 0f00 	cmp.w	fp, #0
 8023d10:	dde4      	ble.n	8023cdc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8023d12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023d14:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8023d16:	141a      	asrs	r2, r3, #16
 8023d18:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023d1c:	1400      	asrs	r0, r0, #16
 8023d1e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8023d22:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023d26:	f100 80dc 	bmi.w	8023ee2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8023d2a:	1c47      	adds	r7, r0, #1
 8023d2c:	42bd      	cmp	r5, r7
 8023d2e:	f340 80da 	ble.w	8023ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8023d32:	2a00      	cmp	r2, #0
 8023d34:	f2c0 80d7 	blt.w	8023ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8023d38:	f102 0c01 	add.w	ip, r2, #1
 8023d3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023d3e:	4567      	cmp	r7, ip
 8023d40:	f340 80d1 	ble.w	8023ee6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8023d44:	fb02 0005 	mla	r0, r2, r5, r0
 8023d48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d4c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8023d50:	4402      	add	r2, r0
 8023d52:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023d56:	eb04 0c08 	add.w	ip, r4, r8
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	f000 80b3 	beq.w	8023ec6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8023d60:	7857      	ldrb	r7, [r2, #1]
 8023d62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023d66:	4427      	add	r7, r4
 8023d68:	2900      	cmp	r1, #0
 8023d6a:	f000 80b4 	beq.w	8023ed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8023d6e:	1950      	adds	r0, r2, r5
 8023d70:	5d52      	ldrb	r2, [r2, r5]
 8023d72:	7840      	ldrb	r0, [r0, #1]
 8023d74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023d7c:	4422      	add	r2, r4
 8023d7e:	4420      	add	r0, r4
 8023d80:	b29b      	uxth	r3, r3
 8023d82:	f814 a008 	ldrb.w	sl, [r4, r8]
 8023d86:	b289      	uxth	r1, r1
 8023d88:	f897 8000 	ldrb.w	r8, [r7]
 8023d8c:	fb03 f901 	mul.w	r9, r3, r1
 8023d90:	011b      	lsls	r3, r3, #4
 8023d92:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023d96:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023d9a:	eba3 0309 	sub.w	r3, r3, r9
 8023d9e:	b289      	uxth	r1, r1
 8023da0:	b29b      	uxth	r3, r3
 8023da2:	ebae 0e01 	sub.w	lr, lr, r1
 8023da6:	fb03 f808 	mul.w	r8, r3, r8
 8023daa:	fa1f fe8e 	uxth.w	lr, lr
 8023dae:	fb0e 880a 	mla	r8, lr, sl, r8
 8023db2:	f892 a000 	ldrb.w	sl, [r2]
 8023db6:	fb01 880a 	mla	r8, r1, sl, r8
 8023dba:	f890 a000 	ldrb.w	sl, [r0]
 8023dbe:	fb09 880a 	mla	r8, r9, sl, r8
 8023dc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023dc6:	f886 8000 	strb.w	r8, [r6]
 8023dca:	f897 8001 	ldrb.w	r8, [r7, #1]
 8023dce:	f89c a001 	ldrb.w	sl, [ip, #1]
 8023dd2:	fb03 f808 	mul.w	r8, r3, r8
 8023dd6:	fb0e 880a 	mla	r8, lr, sl, r8
 8023dda:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023dde:	fb01 880a 	mla	r8, r1, sl, r8
 8023de2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023de6:	fb09 880a 	mla	r8, r9, sl, r8
 8023dea:	ea4f 2828 	mov.w	r8, r8, asr #8
 8023dee:	f886 8001 	strb.w	r8, [r6, #1]
 8023df2:	78bf      	ldrb	r7, [r7, #2]
 8023df4:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023df8:	437b      	muls	r3, r7
 8023dfa:	7892      	ldrb	r2, [r2, #2]
 8023dfc:	fb0e 330c 	mla	r3, lr, ip, r3
 8023e00:	fb01 3102 	mla	r1, r1, r2, r3
 8023e04:	7882      	ldrb	r2, [r0, #2]
 8023e06:	fb09 1902 	mla	r9, r9, r2, r1
 8023e0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023e0e:	f886 9002 	strb.w	r9, [r6, #2]
 8023e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023e14:	3603      	adds	r6, #3
 8023e16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023e18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023e1c:	4413      	add	r3, r2
 8023e1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023e20:	9323      	str	r3, [sp, #140]	; 0x8c
 8023e22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e24:	4413      	add	r3, r2
 8023e26:	9324      	str	r3, [sp, #144]	; 0x90
 8023e28:	e770      	b.n	8023d0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8023e2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023e2c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023e2e:	4413      	add	r3, r2
 8023e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023e32:	9323      	str	r3, [sp, #140]	; 0x8c
 8023e34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e36:	4413      	add	r3, r2
 8023e38:	9324      	str	r3, [sp, #144]	; 0x90
 8023e3a:	9b07      	ldr	r3, [sp, #28]
 8023e3c:	3b01      	subs	r3, #1
 8023e3e:	9307      	str	r3, [sp, #28]
 8023e40:	9b08      	ldr	r3, [sp, #32]
 8023e42:	3303      	adds	r3, #3
 8023e44:	9308      	str	r3, [sp, #32]
 8023e46:	e718      	b.n	8023c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8023e48:	f47f af2a 	bne.w	8023ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8023e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	f340 80e5 	ble.w	802401e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8023e54:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023e5a:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023e5e:	eef0 6a48 	vmov.f32	s13, s16
 8023e62:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023e66:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023e6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e6e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8023e72:	eef0 6a68 	vmov.f32	s13, s17
 8023e76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e7a:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8023e7e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023e82:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023e86:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023e8a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023e8e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023e92:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023e96:	ee18 2a10 	vmov	r2, s16
 8023e9a:	eeb0 8a47 	vmov.f32	s16, s14
 8023e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ea2:	ee18 2a90 	vmov	r2, s17
 8023ea6:	9325      	str	r3, [sp, #148]	; 0x94
 8023ea8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023eaa:	eef0 8a67 	vmov.f32	s17, s15
 8023eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8023eb2:	9326      	str	r3, [sp, #152]	; 0x98
 8023eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023eb8:	3b01      	subs	r3, #1
 8023eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ebc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023ebe:	bf08      	it	eq
 8023ec0:	4613      	moveq	r3, r2
 8023ec2:	9307      	str	r3, [sp, #28]
 8023ec4:	e6d2      	b.n	8023c6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8023ec6:	b149      	cbz	r1, 8023edc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8023ec8:	5d52      	ldrb	r2, [r2, r5]
 8023eca:	4660      	mov	r0, ip
 8023ecc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ed0:	4422      	add	r2, r4
 8023ed2:	4667      	mov	r7, ip
 8023ed4:	e754      	b.n	8023d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8023ed6:	4660      	mov	r0, ip
 8023ed8:	4662      	mov	r2, ip
 8023eda:	e751      	b.n	8023d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8023edc:	4660      	mov	r0, ip
 8023ede:	4662      	mov	r2, ip
 8023ee0:	e7f7      	b.n	8023ed2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8023ee2:	1c47      	adds	r7, r0, #1
 8023ee4:	d195      	bne.n	8023e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8023ee6:	4285      	cmp	r5, r0
 8023ee8:	dd93      	ble.n	8023e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8023eea:	1c57      	adds	r7, r2, #1
 8023eec:	db91      	blt.n	8023e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8023eee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8023ef0:	4297      	cmp	r7, r2
 8023ef2:	dd8e      	ble.n	8023e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8023ef4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023ef8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8023efc:	e9cd 5700 	strd	r5, r7, [sp]
 8023f00:	4623      	mov	r3, r4
 8023f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f04:	4631      	mov	r1, r6
 8023f06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023f08:	f7ff fdca 	bl	8023aa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8023f0c:	e781      	b.n	8023e12 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8023f0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023f10:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023f12:	1410      	asrs	r0, r2, #16
 8023f14:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023f18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8023f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023f1c:	1412      	asrs	r2, r2, #16
 8023f1e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023f22:	fb05 2000 	mla	r0, r5, r0, r2
 8023f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023f28:	f816 e000 	ldrb.w	lr, [r6, r0]
 8023f2c:	4402      	add	r2, r0
 8023f2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023f32:	eb04 070e 	add.w	r7, r4, lr
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	d063      	beq.n	8024002 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8023f3a:	7856      	ldrb	r6, [r2, #1]
 8023f3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023f40:	4426      	add	r6, r4
 8023f42:	2900      	cmp	r1, #0
 8023f44:	d065      	beq.n	8024012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8023f46:	1950      	adds	r0, r2, r5
 8023f48:	5d52      	ldrb	r2, [r2, r5]
 8023f4a:	7840      	ldrb	r0, [r0, #1]
 8023f4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023f54:	4422      	add	r2, r4
 8023f56:	4420      	add	r0, r4
 8023f58:	b29b      	uxth	r3, r3
 8023f5a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8023f5e:	b289      	uxth	r1, r1
 8023f60:	f896 e000 	ldrb.w	lr, [r6]
 8023f64:	f108 0803 	add.w	r8, r8, #3
 8023f68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023f6c:	fb03 f901 	mul.w	r9, r3, r1
 8023f70:	011b      	lsls	r3, r3, #4
 8023f72:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f76:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8023f7a:	eba3 0309 	sub.w	r3, r3, r9
 8023f7e:	b289      	uxth	r1, r1
 8023f80:	b29b      	uxth	r3, r3
 8023f82:	ebac 0c01 	sub.w	ip, ip, r1
 8023f86:	fb03 fe0e 	mul.w	lr, r3, lr
 8023f8a:	fa1f fc8c 	uxth.w	ip, ip
 8023f8e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023f92:	f892 b000 	ldrb.w	fp, [r2]
 8023f96:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023f9a:	f890 b000 	ldrb.w	fp, [r0]
 8023f9e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023fa2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023fa6:	f808 ec06 	strb.w	lr, [r8, #-6]
 8023faa:	f896 e001 	ldrb.w	lr, [r6, #1]
 8023fae:	f897 b001 	ldrb.w	fp, [r7, #1]
 8023fb2:	fb03 fe0e 	mul.w	lr, r3, lr
 8023fb6:	fb0c ee0b 	mla	lr, ip, fp, lr
 8023fba:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023fbe:	fb01 ee0b 	mla	lr, r1, fp, lr
 8023fc2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023fc6:	fb09 ee0b 	mla	lr, r9, fp, lr
 8023fca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023fce:	f808 ec05 	strb.w	lr, [r8, #-5]
 8023fd2:	78b6      	ldrb	r6, [r6, #2]
 8023fd4:	78bf      	ldrb	r7, [r7, #2]
 8023fd6:	4373      	muls	r3, r6
 8023fd8:	7896      	ldrb	r6, [r2, #2]
 8023fda:	7882      	ldrb	r2, [r0, #2]
 8023fdc:	fb0c 3307 	mla	r3, ip, r7, r3
 8023fe0:	fb01 3306 	mla	r3, r1, r6, r3
 8023fe4:	fb09 3902 	mla	r9, r9, r2, r3
 8023fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023fea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023fec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023ff0:	4413      	add	r3, r2
 8023ff2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023ff4:	f808 9c04 	strb.w	r9, [r8, #-4]
 8023ff8:	9323      	str	r3, [sp, #140]	; 0x8c
 8023ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ffc:	4413      	add	r3, r2
 8023ffe:	9324      	str	r3, [sp, #144]	; 0x90
 8024000:	e668      	b.n	8023cd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8024002:	b149      	cbz	r1, 8024018 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8024004:	5d52      	ldrb	r2, [r2, r5]
 8024006:	4638      	mov	r0, r7
 8024008:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802400c:	4422      	add	r2, r4
 802400e:	463e      	mov	r6, r7
 8024010:	e7a2      	b.n	8023f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8024012:	4638      	mov	r0, r7
 8024014:	463a      	mov	r2, r7
 8024016:	e79f      	b.n	8023f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8024018:	4638      	mov	r0, r7
 802401a:	463a      	mov	r2, r7
 802401c:	e7f7      	b.n	802400e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802401e:	b00f      	add	sp, #60	; 0x3c
 8024020:	ecbd 8b0a 	vpop	{d8-d12}
 8024024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8024028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802402c:	b087      	sub	sp, #28
 802402e:	7888      	ldrb	r0, [r1, #2]
 8024030:	9002      	str	r0, [sp, #8]
 8024032:	7848      	ldrb	r0, [r1, #1]
 8024034:	9e02      	ldr	r6, [sp, #8]
 8024036:	9003      	str	r0, [sp, #12]
 8024038:	7808      	ldrb	r0, [r1, #0]
 802403a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802403e:	9004      	str	r0, [sp, #16]
 8024040:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024044:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8024048:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802404c:	9e03      	ldr	r6, [sp, #12]
 802404e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8024052:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024056:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 802405a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 802405e:	fb04 7508 	mla	r5, r4, r8, r7
 8024062:	2c00      	cmp	r4, #0
 8024064:	eb02 0905 	add.w	r9, r2, r5
 8024068:	db45      	blt.n	80240f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802406a:	45a2      	cmp	sl, r4
 802406c:	dd43      	ble.n	80240f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802406e:	2f00      	cmp	r7, #0
 8024070:	db3f      	blt.n	80240f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8024072:	45b8      	cmp	r8, r7
 8024074:	dd3d      	ble.n	80240f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8024076:	5d52      	ldrb	r2, [r2, r5]
 8024078:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802407c:	1c7a      	adds	r2, r7, #1
 802407e:	d43d      	bmi.n	80240fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8024080:	4590      	cmp	r8, r2
 8024082:	dd3b      	ble.n	80240fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8024084:	f1bc 0f00 	cmp.w	ip, #0
 8024088:	d038      	beq.n	80240fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 802408a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802408e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024092:	3401      	adds	r4, #1
 8024094:	d436      	bmi.n	8024104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8024096:	45a2      	cmp	sl, r4
 8024098:	dd34      	ble.n	8024104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 802409a:	f1be 0f00 	cmp.w	lr, #0
 802409e:	d031      	beq.n	8024104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80240a0:	2f00      	cmp	r7, #0
 80240a2:	db2d      	blt.n	8024100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80240a4:	45b8      	cmp	r8, r7
 80240a6:	dd2b      	ble.n	8024100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80240a8:	f819 2008 	ldrb.w	r2, [r9, r8]
 80240ac:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80240b0:	3701      	adds	r7, #1
 80240b2:	d409      	bmi.n	80240c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80240b4:	45b8      	cmp	r8, r7
 80240b6:	dd07      	ble.n	80240c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80240b8:	f1bc 0f00 	cmp.w	ip, #0
 80240bc:	d004      	beq.n	80240c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80240be:	44c8      	add	r8, r9
 80240c0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80240c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80240c8:	f1bc 0f0f 	cmp.w	ip, #15
 80240cc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80240d0:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80240d4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80240d8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80240dc:	d802      	bhi.n	80240e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 80240de:	f1be 0f0f 	cmp.w	lr, #15
 80240e2:	d911      	bls.n	8024108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 80240e4:	4b77      	ldr	r3, [pc, #476]	; (80242c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 80240e6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80240ea:	4a77      	ldr	r2, [pc, #476]	; (80242c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 80240ec:	4877      	ldr	r0, [pc, #476]	; (80242cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 80240ee:	f005 fc73 	bl	80299d8 <__assert_func>
 80240f2:	4606      	mov	r6, r0
 80240f4:	e7c2      	b.n	802407c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 80240f6:	4605      	mov	r5, r0
 80240f8:	4606      	mov	r6, r0
 80240fa:	e7ca      	b.n	8024092 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 80240fc:	4605      	mov	r5, r0
 80240fe:	e7c8      	b.n	8024092 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8024100:	4604      	mov	r4, r0
 8024102:	e7d5      	b.n	80240b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8024104:	4604      	mov	r4, r0
 8024106:	e7df      	b.n	80240c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8024108:	fa1f fc8c 	uxth.w	ip, ip
 802410c:	fa1f f28e 	uxth.w	r2, lr
 8024110:	fb02 fe0c 	mul.w	lr, r2, ip
 8024114:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024118:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 802411c:	ebac 070e 	sub.w	r7, ip, lr
 8024120:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8024124:	b292      	uxth	r2, r2
 8024126:	b2bf      	uxth	r7, r7
 8024128:	1a9b      	subs	r3, r3, r2
 802412a:	fb07 fc0a 	mul.w	ip, r7, sl
 802412e:	b29b      	uxth	r3, r3
 8024130:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024134:	9301      	str	r3, [sp, #4]
 8024136:	fb02 cc09 	mla	ip, r2, r9, ip
 802413a:	fb0e cc08 	mla	ip, lr, r8, ip
 802413e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024142:	9305      	str	r3, [sp, #20]
 8024144:	2b00      	cmp	r3, #0
 8024146:	f000 80b9 	beq.w	80242bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 802414a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802414e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024152:	fb0b fc0c 	mul.w	ip, fp, ip
 8024156:	fb0b f606 	mul.w	r6, fp, r6
 802415a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802415e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024162:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024166:	44dc      	add	ip, fp
 8024168:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802416c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024170:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024174:	fb0a fb0b 	mul.w	fp, sl, fp
 8024178:	fb0a fa05 	mul.w	sl, sl, r5
 802417c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024180:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024184:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8024188:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802418c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024190:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024194:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8024198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802419c:	0a36      	lsrs	r6, r6, #8
 802419e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241a2:	44dc      	add	ip, fp
 80241a4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80241a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80241ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80241b0:	fb09 fb0b 	mul.w	fp, r9, fp
 80241b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80241b8:	fb09 f904 	mul.w	r9, r9, r4
 80241bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80241c0:	ea4f 251b 	mov.w	r5, fp, lsr #8
 80241c4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241c8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80241cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80241d0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80241d4:	fb0c fc07 	mul.w	ip, ip, r7
 80241d8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80241dc:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 80241e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80241e4:	445d      	add	r5, fp
 80241e6:	fb08 f404 	mul.w	r4, r8, r4
 80241ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80241ee:	fb08 f800 	mul.w	r8, r8, r0
 80241f2:	0a2d      	lsrs	r5, r5, #8
 80241f4:	0a20      	lsrs	r0, r4, #8
 80241f6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80241fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80241fe:	fb07 f70a 	mul.w	r7, r7, sl
 8024202:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024206:	4404      	add	r4, r0
 8024208:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802420c:	0a24      	lsrs	r4, r4, #8
 802420e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8024212:	9801      	ldr	r0, [sp, #4]
 8024214:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024218:	fb03 cc00 	mla	ip, r3, r0, ip
 802421c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024220:	fb00 7606 	mla	r6, r0, r6, r7
 8024224:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8024228:	fb04 cc0e 	mla	ip, r4, lr, ip
 802422c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024230:	b280      	uxth	r0, r0
 8024232:	9c04      	ldr	r4, [sp, #16]
 8024234:	fb05 cc02 	mla	ip, r5, r2, ip
 8024238:	fb0e 6e08 	mla	lr, lr, r8, r6
 802423c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024240:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024244:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8024248:	fb02 ec0c 	mla	ip, r2, ip, lr
 802424c:	9a05      	ldr	r2, [sp, #20]
 802424e:	4342      	muls	r2, r0
 8024250:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024254:	1c53      	adds	r3, r2, #1
 8024256:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802425a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802425e:	ea45 0c0c 	orr.w	ip, r5, ip
 8024262:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024266:	fa5f f28c 	uxtb.w	r2, ip
 802426a:	b2db      	uxtb	r3, r3
 802426c:	fb14 f403 	smulbb	r4, r4, r3
 8024270:	fb02 4200 	mla	r2, r2, r0, r4
 8024274:	b292      	uxth	r2, r2
 8024276:	1c54      	adds	r4, r2, #1
 8024278:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802427c:	9c03      	ldr	r4, [sp, #12]
 802427e:	fb14 f403 	smulbb	r4, r4, r3
 8024282:	1212      	asrs	r2, r2, #8
 8024284:	700a      	strb	r2, [r1, #0]
 8024286:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802428a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802428e:	fb02 4200 	mla	r2, r2, r0, r4
 8024292:	b292      	uxth	r2, r2
 8024294:	1c54      	adds	r4, r2, #1
 8024296:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802429a:	1212      	asrs	r2, r2, #8
 802429c:	704a      	strb	r2, [r1, #1]
 802429e:	9a02      	ldr	r2, [sp, #8]
 80242a0:	fb12 f303 	smulbb	r3, r2, r3
 80242a4:	fb0c 3c00 	mla	ip, ip, r0, r3
 80242a8:	fa1f fc8c 	uxth.w	ip, ip
 80242ac:	f10c 0301 	add.w	r3, ip, #1
 80242b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80242b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80242b8:	f881 c002 	strb.w	ip, [r1, #2]
 80242bc:	b007      	add	sp, #28
 80242be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242c2:	bf00      	nop
 80242c4:	0802efeb 	.word	0x0802efeb
 80242c8:	0802f4e2 	.word	0x0802f4e2
 80242cc:	0802f0b4 	.word	0x0802f0b4

080242d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80242d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242d4:	ed2d 8b08 	vpush	{d8-d11}
 80242d8:	b09b      	sub	sp, #108	; 0x6c
 80242da:	eeb0 aa40 	vmov.f32	s20, s0
 80242de:	eef0 9a60 	vmov.f32	s19, s1
 80242e2:	930a      	str	r3, [sp, #40]	; 0x28
 80242e4:	eeb0 9a41 	vmov.f32	s18, s2
 80242e8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80242ec:	eeb0 8a62 	vmov.f32	s16, s5
 80242f0:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 80242f2:	eef0 8a43 	vmov.f32	s17, s6
 80242f6:	9312      	str	r3, [sp, #72]	; 0x48
 80242f8:	eef0 ba44 	vmov.f32	s23, s8
 80242fc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8024300:	eeb0 ba64 	vmov.f32	s22, s9
 8024304:	9019      	str	r0, [sp, #100]	; 0x64
 8024306:	eef0 aa45 	vmov.f32	s21, s10
 802430a:	9114      	str	r1, [sp, #80]	; 0x50
 802430c:	9317      	str	r3, [sp, #92]	; 0x5c
 802430e:	6868      	ldr	r0, [r5, #4]
 8024310:	9218      	str	r2, [sp, #96]	; 0x60
 8024312:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8024314:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8024318:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802431c:	fb00 1303 	mla	r3, r0, r3, r1
 8024320:	6829      	ldr	r1, [r5, #0]
 8024322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024326:	18cb      	adds	r3, r1, r3
 8024328:	930d      	str	r3, [sp, #52]	; 0x34
 802432a:	6813      	ldr	r3, [r2, #0]
 802432c:	9313      	str	r3, [sp, #76]	; 0x4c
 802432e:	6853      	ldr	r3, [r2, #4]
 8024330:	3304      	adds	r3, #4
 8024332:	9309      	str	r3, [sp, #36]	; 0x24
 8024334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024336:	2b00      	cmp	r3, #0
 8024338:	dc03      	bgt.n	8024342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802433a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802433c:	2b00      	cmp	r3, #0
 802433e:	f340 8352 	ble.w	80249e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8024342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024344:	2b00      	cmp	r3, #0
 8024346:	f340 81a2 	ble.w	802468e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802434a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802434c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802434e:	1412      	asrs	r2, r2, #16
 8024350:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024354:	d431      	bmi.n	80243ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8024356:	1c51      	adds	r1, r2, #1
 8024358:	428c      	cmp	r4, r1
 802435a:	dd31      	ble.n	80243c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802435c:	2b00      	cmp	r3, #0
 802435e:	db2f      	blt.n	80243c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8024360:	1c59      	adds	r1, r3, #1
 8024362:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024364:	4288      	cmp	r0, r1
 8024366:	dd2b      	ble.n	80243c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8024368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802436a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802436c:	3b01      	subs	r3, #1
 802436e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8024370:	fb02 1203 	mla	r2, r2, r3, r1
 8024374:	1412      	asrs	r2, r2, #16
 8024376:	d42d      	bmi.n	80243d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8024378:	3201      	adds	r2, #1
 802437a:	4294      	cmp	r4, r2
 802437c:	dd2a      	ble.n	80243d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802437e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8024380:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024382:	fb02 1303 	mla	r3, r2, r3, r1
 8024386:	141b      	asrs	r3, r3, #16
 8024388:	d424      	bmi.n	80243d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802438a:	3301      	adds	r3, #1
 802438c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802438e:	429a      	cmp	r2, r3
 8024390:	dd20      	ble.n	80243d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8024392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024394:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8024398:	f103 0e03 	add.w	lr, r3, #3
 802439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802439e:	9315      	str	r3, [sp, #84]	; 0x54
 80243a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	f300 81de 	bgt.w	8024764 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80243a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80243ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80243b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243b4:	441a      	add	r2, r3
 80243b6:	920d      	str	r2, [sp, #52]	; 0x34
 80243b8:	e16b      	b.n	8024692 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80243ba:	1c51      	adds	r1, r2, #1
 80243bc:	f040 8158 	bne.w	8024670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80243c0:	42a2      	cmp	r2, r4
 80243c2:	f280 8155 	bge.w	8024670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80243c6:	1c5a      	adds	r2, r3, #1
 80243c8:	f2c0 8152 	blt.w	8024670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80243cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80243ce:	4293      	cmp	r3, r2
 80243d0:	f280 814e 	bge.w	8024670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80243d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80243d8:	9316      	str	r3, [sp, #88]	; 0x58
 80243da:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80243de:	9315      	str	r3, [sp, #84]	; 0x54
 80243e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	dde0      	ble.n	80243a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80243e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80243e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243ea:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80243ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80243f0:	141b      	asrs	r3, r3, #16
 80243f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80243f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80243f8:	1412      	asrs	r2, r2, #16
 80243fa:	f100 819a 	bmi.w	8024732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 80243fe:	1c55      	adds	r5, r2, #1
 8024400:	42ac      	cmp	r4, r5
 8024402:	f340 8198 	ble.w	8024736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8024406:	2b00      	cmp	r3, #0
 8024408:	f2c0 8195 	blt.w	8024736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802440c:	1c5d      	adds	r5, r3, #1
 802440e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8024410:	42af      	cmp	r7, r5
 8024412:	f340 8190 	ble.w	8024736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8024416:	fb03 2304 	mla	r3, r3, r4, r2
 802441a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802441c:	18d5      	adds	r5, r2, r3
 802441e:	5cd3      	ldrb	r3, [r2, r3]
 8024420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024426:	0e1f      	lsrs	r7, r3, #24
 8024428:	2800      	cmp	r0, #0
 802442a:	f000 8171 	beq.w	8024710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802442e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8024432:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8024436:	920e      	str	r2, [sp, #56]	; 0x38
 8024438:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802443c:	2900      	cmp	r1, #0
 802443e:	f000 8172 	beq.w	8024726 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8024442:	eb05 0c04 	add.w	ip, r5, r4
 8024446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024448:	5d2d      	ldrb	r5, [r5, r4]
 802444a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802444e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024452:	950b      	str	r5, [sp, #44]	; 0x2c
 8024454:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8024458:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802445a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802445e:	0e15      	lsrs	r5, r2, #24
 8024460:	920f      	str	r2, [sp, #60]	; 0x3c
 8024462:	b280      	uxth	r0, r0
 8024464:	b289      	uxth	r1, r1
 8024466:	fb00 fa01 	mul.w	sl, r0, r1
 802446a:	0100      	lsls	r0, r0, #4
 802446c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8024470:	eba0 080a 	sub.w	r8, r0, sl
 8024474:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8024478:	b289      	uxth	r1, r1
 802447a:	fa1f f888 	uxth.w	r8, r8
 802447e:	1a52      	subs	r2, r2, r1
 8024480:	fb08 f00e 	mul.w	r0, r8, lr
 8024484:	b292      	uxth	r2, r2
 8024486:	fb02 0007 	mla	r0, r2, r7, r0
 802448a:	fb01 0009 	mla	r0, r1, r9, r0
 802448e:	fb0a 0005 	mla	r0, sl, r5, r0
 8024492:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024496:	2800      	cmp	r0, #0
 8024498:	f000 80dd 	beq.w	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802449c:	2fff      	cmp	r7, #255	; 0xff
 802449e:	d01a      	beq.n	80244d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80244a0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80244a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80244a8:	fb07 fc0c 	mul.w	ip, r7, ip
 80244ac:	435f      	muls	r7, r3
 80244ae:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80244b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80244b6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80244ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244be:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80244c2:	4463      	add	r3, ip
 80244c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80244c8:	0a1b      	lsrs	r3, r3, #8
 80244ca:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80244ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80244d2:	ea43 030b 	orr.w	r3, r3, fp
 80244d6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80244da:	d01e      	beq.n	802451a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 80244dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80244de:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 80244e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80244e6:	fb0e fb0b 	mul.w	fp, lr, fp
 80244ea:	fb0e fe07 	mul.w	lr, lr, r7
 80244ee:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80244f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80244f6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80244fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80244fe:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8024502:	44dc      	add	ip, fp
 8024504:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802450c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024510:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024514:	ea4c 070e 	orr.w	r7, ip, lr
 8024518:	970e      	str	r7, [sp, #56]	; 0x38
 802451a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802451e:	d01e      	beq.n	802455e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024520:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8024522:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024526:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802452a:	fb09 fe0e 	mul.w	lr, r9, lr
 802452e:	fb09 f907 	mul.w	r9, r9, r7
 8024532:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024536:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802453a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802453e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024542:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024546:	44f4      	add	ip, lr
 8024548:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802454c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024550:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024554:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024558:	ea4c 0709 	orr.w	r7, ip, r9
 802455c:	970b      	str	r7, [sp, #44]	; 0x2c
 802455e:	2dff      	cmp	r5, #255	; 0xff
 8024560:	d01c      	beq.n	802459c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8024562:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024564:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024568:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802456c:	fb05 fe0e 	mul.w	lr, r5, lr
 8024570:	437d      	muls	r5, r7
 8024572:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024576:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802457a:	f505 7780 	add.w	r7, r5, #256	; 0x100
 802457e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024582:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8024586:	44f4      	add	ip, lr
 8024588:	0a2d      	lsrs	r5, r5, #8
 802458a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802458e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024592:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024596:	ea4c 0505 	orr.w	r5, ip, r5
 802459a:	950f      	str	r5, [sp, #60]	; 0x3c
 802459c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802459e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80245a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245a6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80245aa:	fb08 f505 	mul.w	r5, r8, r5
 80245ae:	fb02 5507 	mla	r5, r2, r7, r5
 80245b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80245b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245b8:	fb01 5507 	mla	r5, r1, r7, r5
 80245bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80245be:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80245c2:	fb0a 5507 	mla	r5, sl, r7, r5
 80245c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80245c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80245cc:	0a2d      	lsrs	r5, r5, #8
 80245ce:	fb08 f807 	mul.w	r8, r8, r7
 80245d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80245d6:	fb02 8303 	mla	r3, r2, r3, r8
 80245da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80245dc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80245e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80245e2:	fb01 330c 	mla	r3, r1, ip, r3
 80245e6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80245ea:	fb0a 3a01 	mla	sl, sl, r1, r3
 80245ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80245f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80245f2:	4343      	muls	r3, r0
 80245f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245f8:	1c58      	adds	r0, r3, #1
 80245fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245fe:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024602:	ea45 050a 	orr.w	r5, r5, sl
 8024606:	7833      	ldrb	r3, [r6, #0]
 8024608:	b2ea      	uxtb	r2, r5
 802460a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802460e:	fb12 f201 	smulbb	r2, r2, r1
 8024612:	b2c0      	uxtb	r0, r0
 8024614:	fb03 2300 	mla	r3, r3, r0, r2
 8024618:	b29b      	uxth	r3, r3
 802461a:	1c5a      	adds	r2, r3, #1
 802461c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024620:	7872      	ldrb	r2, [r6, #1]
 8024622:	fb12 f200 	smulbb	r2, r2, r0
 8024626:	121b      	asrs	r3, r3, #8
 8024628:	7033      	strb	r3, [r6, #0]
 802462a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802462e:	0c2d      	lsrs	r5, r5, #16
 8024630:	fb03 2301 	mla	r3, r3, r1, r2
 8024634:	b29b      	uxth	r3, r3
 8024636:	1c5a      	adds	r2, r3, #1
 8024638:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802463c:	121b      	asrs	r3, r3, #8
 802463e:	7073      	strb	r3, [r6, #1]
 8024640:	78b3      	ldrb	r3, [r6, #2]
 8024642:	fb13 f000 	smulbb	r0, r3, r0
 8024646:	fb05 0501 	mla	r5, r5, r1, r0
 802464a:	b2ad      	uxth	r5, r5
 802464c:	1c6b      	adds	r3, r5, #1
 802464e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024652:	122d      	asrs	r5, r5, #8
 8024654:	70b5      	strb	r5, [r6, #2]
 8024656:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024658:	3603      	adds	r6, #3
 802465a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802465c:	4413      	add	r3, r2
 802465e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8024660:	932d      	str	r3, [sp, #180]	; 0xb4
 8024662:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024664:	4413      	add	r3, r2
 8024666:	932e      	str	r3, [sp, #184]	; 0xb8
 8024668:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802466a:	3b01      	subs	r3, #1
 802466c:	9316      	str	r3, [sp, #88]	; 0x58
 802466e:	e6b7      	b.n	80243e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8024670:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024672:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024674:	4413      	add	r3, r2
 8024676:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8024678:	932d      	str	r3, [sp, #180]	; 0xb4
 802467a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802467c:	4413      	add	r3, r2
 802467e:	932e      	str	r3, [sp, #184]	; 0xb8
 8024680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024682:	3b01      	subs	r3, #1
 8024684:	930a      	str	r3, [sp, #40]	; 0x28
 8024686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024688:	3303      	adds	r3, #3
 802468a:	930d      	str	r3, [sp, #52]	; 0x34
 802468c:	e659      	b.n	8024342 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802468e:	f47f ae6b 	bne.w	8024368 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8024692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024694:	2b00      	cmp	r3, #0
 8024696:	f340 81a6 	ble.w	80249e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 802469a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802469e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246a0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80246a4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80246a8:	eef0 6a48 	vmov.f32	s13, s16
 80246ac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80246b0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80246b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246b8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80246bc:	eef0 6a68 	vmov.f32	s13, s17
 80246c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80246c4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80246c8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80246cc:	ee69 7a27 	vmul.f32	s15, s18, s15
 80246d0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80246d4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80246d8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80246dc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80246e0:	ee18 2a10 	vmov	r2, s16
 80246e4:	eeb0 8a47 	vmov.f32	s16, s14
 80246e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80246ec:	ee18 2a90 	vmov	r2, s17
 80246f0:	932f      	str	r3, [sp, #188]	; 0xbc
 80246f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246f4:	eef0 8a67 	vmov.f32	s17, s15
 80246f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80246fc:	9330      	str	r3, [sp, #192]	; 0xc0
 80246fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024700:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024702:	3b01      	subs	r3, #1
 8024704:	9314      	str	r3, [sp, #80]	; 0x50
 8024706:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024708:	bf08      	it	eq
 802470a:	4613      	moveq	r3, r2
 802470c:	930a      	str	r3, [sp, #40]	; 0x28
 802470e:	e611      	b.n	8024334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8024710:	b161      	cbz	r1, 802472c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8024712:	5d2a      	ldrb	r2, [r5, r4]
 8024714:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024716:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802471a:	25ff      	movs	r5, #255	; 0xff
 802471c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8024720:	920b      	str	r2, [sp, #44]	; 0x2c
 8024722:	46ae      	mov	lr, r5
 8024724:	e69d      	b.n	8024462 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8024726:	25ff      	movs	r5, #255	; 0xff
 8024728:	46a9      	mov	r9, r5
 802472a:	e69a      	b.n	8024462 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802472c:	25ff      	movs	r5, #255	; 0xff
 802472e:	46a9      	mov	r9, r5
 8024730:	e7f7      	b.n	8024722 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8024732:	1c57      	adds	r7, r2, #1
 8024734:	d18f      	bne.n	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8024736:	4294      	cmp	r4, r2
 8024738:	dd8d      	ble.n	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802473a:	1c5d      	adds	r5, r3, #1
 802473c:	db8b      	blt.n	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802473e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8024740:	429d      	cmp	r5, r3
 8024742:	dd88      	ble.n	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8024744:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8024746:	9202      	str	r2, [sp, #8]
 8024748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802474a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802474e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024750:	9819      	ldr	r0, [sp, #100]	; 0x64
 8024752:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024756:	e9cd 4300 	strd	r4, r3, [sp]
 802475a:	4631      	mov	r1, r6
 802475c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802475e:	f7ff fc63 	bl	8024028 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8024762:	e778      	b.n	8024656 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8024764:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024766:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024768:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802476c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802476e:	1412      	asrs	r2, r2, #16
 8024770:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8024774:	141b      	asrs	r3, r3, #16
 8024776:	fb04 2303 	mla	r3, r4, r3, r2
 802477a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802477c:	18d5      	adds	r5, r2, r3
 802477e:	5cd3      	ldrb	r3, [r2, r3]
 8024780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024786:	0e1e      	lsrs	r6, r3, #24
 8024788:	2900      	cmp	r1, #0
 802478a:	f000 811b 	beq.w	80249c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 802478e:	786a      	ldrb	r2, [r5, #1]
 8024790:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024792:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8024796:	9210      	str	r2, [sp, #64]	; 0x40
 8024798:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802479c:	2800      	cmp	r0, #0
 802479e:	f000 811c 	beq.w	80249da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80247a2:	192a      	adds	r2, r5, r4
 80247a4:	5d2d      	ldrb	r5, [r5, r4]
 80247a6:	7852      	ldrb	r2, [r2, #1]
 80247a8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80247ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80247b0:	950c      	str	r5, [sp, #48]	; 0x30
 80247b2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80247b6:	0e15      	lsrs	r5, r2, #24
 80247b8:	9211      	str	r2, [sp, #68]	; 0x44
 80247ba:	b289      	uxth	r1, r1
 80247bc:	b280      	uxth	r0, r0
 80247be:	fb01 fa00 	mul.w	sl, r1, r0
 80247c2:	0109      	lsls	r1, r1, #4
 80247c4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80247c8:	eba1 080a 	sub.w	r8, r1, sl
 80247cc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80247d0:	b280      	uxth	r0, r0
 80247d2:	fa1f f888 	uxth.w	r8, r8
 80247d6:	1a12      	subs	r2, r2, r0
 80247d8:	fb08 f10c 	mul.w	r1, r8, ip
 80247dc:	b292      	uxth	r2, r2
 80247de:	fb02 1106 	mla	r1, r2, r6, r1
 80247e2:	fb00 1109 	mla	r1, r0, r9, r1
 80247e6:	fb0a 1105 	mla	r1, sl, r5, r1
 80247ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80247ee:	2900      	cmp	r1, #0
 80247f0:	f000 80da 	beq.w	80249a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 80247f4:	2eff      	cmp	r6, #255	; 0xff
 80247f6:	d016      	beq.n	8024826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80247f8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80247fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024800:	4377      	muls	r7, r6
 8024802:	435e      	muls	r6, r3
 8024804:	0a3b      	lsrs	r3, r7, #8
 8024806:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802480a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802480e:	443b      	add	r3, r7
 8024810:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024814:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024818:	0a1b      	lsrs	r3, r3, #8
 802481a:	0a3f      	lsrs	r7, r7, #8
 802481c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024820:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024824:	433b      	orrs	r3, r7
 8024826:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802482a:	d01d      	beq.n	8024868 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 802482c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802482e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024830:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024834:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024838:	fb0c f606 	mul.w	r6, ip, r6
 802483c:	fb0c fc07 	mul.w	ip, ip, r7
 8024840:	0a37      	lsrs	r7, r6, #8
 8024842:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8024846:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802484a:	4437      	add	r7, r6
 802484c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8024850:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8024854:	0a3f      	lsrs	r7, r7, #8
 8024856:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802485a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802485e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024862:	ea47 060c 	orr.w	r6, r7, ip
 8024866:	9610      	str	r6, [sp, #64]	; 0x40
 8024868:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802486c:	d01d      	beq.n	80248aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802486e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024870:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024874:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024878:	fb09 fc0c 	mul.w	ip, r9, ip
 802487c:	fb09 f906 	mul.w	r9, r9, r6
 8024880:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8024884:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024888:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802488c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024890:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8024894:	4467      	add	r7, ip
 8024896:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802489a:	0a3f      	lsrs	r7, r7, #8
 802489c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80248a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80248a4:	ea47 0609 	orr.w	r6, r7, r9
 80248a8:	960c      	str	r6, [sp, #48]	; 0x30
 80248aa:	2dff      	cmp	r5, #255	; 0xff
 80248ac:	d01a      	beq.n	80248e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80248ae:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80248b0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80248b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80248b8:	fb05 fc0c 	mul.w	ip, r5, ip
 80248bc:	4375      	muls	r5, r6
 80248be:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80248c2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80248c6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80248ca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80248ce:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80248d2:	4467      	add	r7, ip
 80248d4:	0a2d      	lsrs	r5, r5, #8
 80248d6:	0a3f      	lsrs	r7, r7, #8
 80248d8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80248dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80248e0:	433d      	orrs	r5, r7
 80248e2:	9511      	str	r5, [sp, #68]	; 0x44
 80248e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80248e6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80248ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248ee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80248f2:	fb08 f505 	mul.w	r5, r8, r5
 80248f6:	fb02 5506 	mla	r5, r2, r6, r5
 80248fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80248fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024900:	fb00 5506 	mla	r5, r0, r6, r5
 8024904:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8024906:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802490a:	fb0a 5506 	mla	r5, sl, r6, r5
 802490e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8024910:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024914:	0a2d      	lsrs	r5, r5, #8
 8024916:	fb08 f806 	mul.w	r8, r8, r6
 802491a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802491e:	fb02 8303 	mla	r3, r2, r3, r8
 8024922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024924:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8024928:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802492a:	fb00 3307 	mla	r3, r0, r7, r3
 802492e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024932:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8024936:	fb01 f30b 	mul.w	r3, r1, fp
 802493a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802493e:	1c59      	adds	r1, r3, #1
 8024940:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024944:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024948:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802494c:	ea45 050c 	orr.w	r5, r5, ip
 8024950:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024954:	b2ea      	uxtb	r2, r5
 8024956:	b2c9      	uxtb	r1, r1
 8024958:	fb12 f20b 	smulbb	r2, r2, fp
 802495c:	fb03 2301 	mla	r3, r3, r1, r2
 8024960:	b29b      	uxth	r3, r3
 8024962:	1c5a      	adds	r2, r3, #1
 8024964:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024968:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802496c:	fb12 f201 	smulbb	r2, r2, r1
 8024970:	121b      	asrs	r3, r3, #8
 8024972:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8024976:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802497a:	0c2d      	lsrs	r5, r5, #16
 802497c:	fb03 230b 	mla	r3, r3, fp, r2
 8024980:	b29b      	uxth	r3, r3
 8024982:	1c5a      	adds	r2, r3, #1
 8024984:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024988:	121b      	asrs	r3, r3, #8
 802498a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802498e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8024992:	fb13 f101 	smulbb	r1, r3, r1
 8024996:	fb05 150b 	mla	r5, r5, fp, r1
 802499a:	b2ad      	uxth	r5, r5
 802499c:	1c69      	adds	r1, r5, #1
 802499e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80249a2:	122d      	asrs	r5, r5, #8
 80249a4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80249a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80249aa:	f10e 0e03 	add.w	lr, lr, #3
 80249ae:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80249b0:	4413      	add	r3, r2
 80249b2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80249b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80249b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80249b8:	4413      	add	r3, r2
 80249ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80249bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80249be:	3b01      	subs	r3, #1
 80249c0:	9315      	str	r3, [sp, #84]	; 0x54
 80249c2:	e4ed      	b.n	80243a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 80249c4:	b160      	cbz	r0, 80249e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 80249c6:	5d2a      	ldrb	r2, [r5, r4]
 80249c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80249ca:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80249ce:	25ff      	movs	r5, #255	; 0xff
 80249d0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80249d4:	920c      	str	r2, [sp, #48]	; 0x30
 80249d6:	46ac      	mov	ip, r5
 80249d8:	e6ef      	b.n	80247ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80249da:	25ff      	movs	r5, #255	; 0xff
 80249dc:	46a9      	mov	r9, r5
 80249de:	e6ec      	b.n	80247ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 80249e0:	25ff      	movs	r5, #255	; 0xff
 80249e2:	46a9      	mov	r9, r5
 80249e4:	e7f7      	b.n	80249d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 80249e6:	b01b      	add	sp, #108	; 0x6c
 80249e8:	ecbd 8b08 	vpop	{d8-d11}
 80249ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080249f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80249f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f4:	b085      	sub	sp, #20
 80249f6:	7888      	ldrb	r0, [r1, #2]
 80249f8:	4692      	mov	sl, r2
 80249fa:	4698      	mov	r8, r3
 80249fc:	9000      	str	r0, [sp, #0]
 80249fe:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024a02:	7848      	ldrb	r0, [r1, #1]
 8024a04:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8024a08:	9001      	str	r0, [sp, #4]
 8024a0a:	7808      	ldrb	r0, [r1, #0]
 8024a0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8024a10:	9002      	str	r0, [sp, #8]
 8024a12:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024a16:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8024a1a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8024a1e:	fb04 560c 	mla	r6, r4, ip, r5
 8024a22:	2c00      	cmp	r4, #0
 8024a24:	eb02 0e06 	add.w	lr, r2, r6
 8024a28:	9a00      	ldr	r2, [sp, #0]
 8024a2a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024a2e:	9a01      	ldr	r2, [sp, #4]
 8024a30:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024a34:	db3e      	blt.n	8024ab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8024a36:	45a1      	cmp	r9, r4
 8024a38:	dd3c      	ble.n	8024ab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8024a3a:	2d00      	cmp	r5, #0
 8024a3c:	db38      	blt.n	8024ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8024a3e:	45ac      	cmp	ip, r5
 8024a40:	dd36      	ble.n	8024ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8024a42:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8024a46:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8024a4a:	1c6e      	adds	r6, r5, #1
 8024a4c:	d435      	bmi.n	8024aba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8024a4e:	45b4      	cmp	ip, r6
 8024a50:	dd33      	ble.n	8024aba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8024a52:	b393      	cbz	r3, 8024aba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8024a54:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024a58:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8024a5c:	3401      	adds	r4, #1
 8024a5e:	d430      	bmi.n	8024ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8024a60:	45a1      	cmp	r9, r4
 8024a62:	dd2e      	ble.n	8024ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8024a64:	b36f      	cbz	r7, 8024ac2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8024a66:	2d00      	cmp	r5, #0
 8024a68:	db29      	blt.n	8024abe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8024a6a:	45ac      	cmp	ip, r5
 8024a6c:	dd27      	ble.n	8024abe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8024a6e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024a72:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8024a76:	3501      	adds	r5, #1
 8024a78:	d407      	bmi.n	8024a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8024a7a:	45ac      	cmp	ip, r5
 8024a7c:	dd05      	ble.n	8024a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8024a7e:	b123      	cbz	r3, 8024a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8024a80:	44f4      	add	ip, lr
 8024a82:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024a86:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8024a8a:	2b0f      	cmp	r3, #15
 8024a8c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024a90:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024a94:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024a98:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024a9c:	d801      	bhi.n	8024aa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8024a9e:	2f0f      	cmp	r7, #15
 8024aa0:	d911      	bls.n	8024ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8024aa2:	4b76      	ldr	r3, [pc, #472]	; (8024c7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8024aa4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024aa8:	4a75      	ldr	r2, [pc, #468]	; (8024c80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8024aaa:	4876      	ldr	r0, [pc, #472]	; (8024c84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8024aac:	f004 ff94 	bl	80299d8 <__assert_func>
 8024ab0:	4602      	mov	r2, r0
 8024ab2:	e7ca      	b.n	8024a4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8024ab4:	4606      	mov	r6, r0
 8024ab6:	4602      	mov	r2, r0
 8024ab8:	e7d0      	b.n	8024a5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8024aba:	4606      	mov	r6, r0
 8024abc:	e7ce      	b.n	8024a5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8024abe:	4604      	mov	r4, r0
 8024ac0:	e7d9      	b.n	8024a76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8024ac2:	4604      	mov	r4, r0
 8024ac4:	e7e1      	b.n	8024a8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8024ac6:	b29b      	uxth	r3, r3
 8024ac8:	b2bf      	uxth	r7, r7
 8024aca:	fb07 fe03 	mul.w	lr, r7, r3
 8024ace:	011b      	lsls	r3, r3, #4
 8024ad0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024ad4:	eba3 0c0e 	sub.w	ip, r3, lr
 8024ad8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8024adc:	b2bf      	uxth	r7, r7
 8024ade:	fa1f fc8c 	uxth.w	ip, ip
 8024ae2:	1bed      	subs	r5, r5, r7
 8024ae4:	fb0c f30a 	mul.w	r3, ip, sl
 8024ae8:	b2ad      	uxth	r5, r5
 8024aea:	fb05 330b 	mla	r3, r5, fp, r3
 8024aee:	fb07 3309 	mla	r3, r7, r9, r3
 8024af2:	fb0e 3308 	mla	r3, lr, r8, r3
 8024af6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024afa:	9303      	str	r3, [sp, #12]
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	f000 80b9 	beq.w	8024c74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8024b02:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024b06:	d018      	beq.n	8024b3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8024b08:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024b0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024b10:	fb0b f303 	mul.w	r3, fp, r3
 8024b14:	fb0b fb02 	mul.w	fp, fp, r2
 8024b18:	0a1a      	lsrs	r2, r3, #8
 8024b1a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024b1e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b22:	441a      	add	r2, r3
 8024b24:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8024b28:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8024b2c:	0a12      	lsrs	r2, r2, #8
 8024b2e:	0a1b      	lsrs	r3, r3, #8
 8024b30:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b38:	431a      	orrs	r2, r3
 8024b3a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024b3e:	d019      	beq.n	8024b74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8024b40:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024b44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024b48:	fb0a fb0b 	mul.w	fp, sl, fp
 8024b4c:	fb0a fa06 	mul.w	sl, sl, r6
 8024b50:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024b54:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b58:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8024b5c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b60:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024b64:	445e      	add	r6, fp
 8024b66:	0a1b      	lsrs	r3, r3, #8
 8024b68:	0a36      	lsrs	r6, r6, #8
 8024b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b6e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024b72:	431e      	orrs	r6, r3
 8024b74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024b78:	d019      	beq.n	8024bae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8024b7a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024b7e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024b82:	fb09 fa0a 	mul.w	sl, r9, sl
 8024b86:	fb09 f904 	mul.w	r9, r9, r4
 8024b8a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024b8e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024b92:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8024b96:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024b9a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8024b9e:	4454      	add	r4, sl
 8024ba0:	0a1b      	lsrs	r3, r3, #8
 8024ba2:	0a24      	lsrs	r4, r4, #8
 8024ba4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ba8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024bac:	431c      	orrs	r4, r3
 8024bae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024bb2:	d019      	beq.n	8024be8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8024bb4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8024bb8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024bbc:	fb08 f909 	mul.w	r9, r8, r9
 8024bc0:	fb08 f800 	mul.w	r8, r8, r0
 8024bc4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8024bc8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024bcc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8024bd0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024bd4:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8024bd8:	4448      	add	r0, r9
 8024bda:	0a1b      	lsrs	r3, r3, #8
 8024bdc:	0a00      	lsrs	r0, r0, #8
 8024bde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024be2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024be6:	4318      	orrs	r0, r3
 8024be8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024bec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8024bf0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024bf4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024bf8:	fb0c f808 	mul.w	r8, ip, r8
 8024bfc:	fb0c f606 	mul.w	r6, ip, r6
 8024c00:	fb05 8803 	mla	r8, r5, r3, r8
 8024c04:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8024c08:	fb05 6202 	mla	r2, r5, r2, r6
 8024c0c:	fb07 8803 	mla	r8, r7, r3, r8
 8024c10:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8024c14:	fb0e 8303 	mla	r3, lr, r3, r8
 8024c18:	0a1b      	lsrs	r3, r3, #8
 8024c1a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024c1e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8024c22:	9c02      	ldr	r4, [sp, #8]
 8024c24:	fb07 2703 	mla	r7, r7, r3, r2
 8024c28:	9a03      	ldr	r2, [sp, #12]
 8024c2a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8024c2e:	43d2      	mvns	r2, r2
 8024c30:	fb0e 7303 	mla	r3, lr, r3, r7
 8024c34:	b2d2      	uxtb	r2, r2
 8024c36:	0a1b      	lsrs	r3, r3, #8
 8024c38:	4354      	muls	r4, r2
 8024c3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c3e:	1c60      	adds	r0, r4, #1
 8024c40:	ea48 0303 	orr.w	r3, r8, r3
 8024c44:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8024c48:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024c4c:	7008      	strb	r0, [r1, #0]
 8024c4e:	9801      	ldr	r0, [sp, #4]
 8024c50:	4350      	muls	r0, r2
 8024c52:	1c44      	adds	r4, r0, #1
 8024c54:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8024c58:	0a18      	lsrs	r0, r3, #8
 8024c5a:	0c1b      	lsrs	r3, r3, #16
 8024c5c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8024c60:	7048      	strb	r0, [r1, #1]
 8024c62:	9800      	ldr	r0, [sp, #0]
 8024c64:	4350      	muls	r0, r2
 8024c66:	4602      	mov	r2, r0
 8024c68:	3001      	adds	r0, #1
 8024c6a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024c6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c72:	708b      	strb	r3, [r1, #2]
 8024c74:	b005      	add	sp, #20
 8024c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c7a:	bf00      	nop
 8024c7c:	0802efeb 	.word	0x0802efeb
 8024c80:	0802f4e2 	.word	0x0802f4e2
 8024c84:	0802f0b4 	.word	0x0802f0b4

08024c88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c8c:	ed2d 8b08 	vpush	{d8-d11}
 8024c90:	b097      	sub	sp, #92	; 0x5c
 8024c92:	eeb0 aa40 	vmov.f32	s20, s0
 8024c96:	eef0 9a60 	vmov.f32	s19, s1
 8024c9a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8024c9c:	eeb0 9a41 	vmov.f32	s18, s2
 8024ca0:	9308      	str	r3, [sp, #32]
 8024ca2:	eeb0 8a62 	vmov.f32	s16, s5
 8024ca6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8024caa:	eef0 8a43 	vmov.f32	s17, s6
 8024cae:	9015      	str	r0, [sp, #84]	; 0x54
 8024cb0:	eef0 ba44 	vmov.f32	s23, s8
 8024cb4:	6868      	ldr	r0, [r5, #4]
 8024cb6:	eeb0 ba64 	vmov.f32	s22, s9
 8024cba:	9112      	str	r1, [sp, #72]	; 0x48
 8024cbc:	eef0 aa45 	vmov.f32	s21, s10
 8024cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8024cc2:	9214      	str	r2, [sp, #80]	; 0x50
 8024cc4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024cc6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8024cca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024cce:	fb00 1303 	mla	r3, r0, r3, r1
 8024cd2:	6829      	ldr	r1, [r5, #0]
 8024cd4:	6855      	ldr	r5, [r2, #4]
 8024cd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024cda:	3504      	adds	r5, #4
 8024cdc:	18cb      	adds	r3, r1, r3
 8024cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8024ce0:	6813      	ldr	r3, [r2, #0]
 8024ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8024ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	dc03      	bgt.n	8024cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8024cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	f340 8333 	ble.w	8025358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8024cf2:	9b08      	ldr	r3, [sp, #32]
 8024cf4:	2b00      	cmp	r3, #0
 8024cf6:	f340 8190 	ble.w	802501a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8024cfa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024cfc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024cfe:	1412      	asrs	r2, r2, #16
 8024d00:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024d04:	d42f      	bmi.n	8024d66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024d06:	1c51      	adds	r1, r2, #1
 8024d08:	428c      	cmp	r4, r1
 8024d0a:	dd2f      	ble.n	8024d6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8024d0c:	2b00      	cmp	r3, #0
 8024d0e:	db2d      	blt.n	8024d6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8024d10:	1c59      	adds	r1, r3, #1
 8024d12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024d14:	4288      	cmp	r0, r1
 8024d16:	dd29      	ble.n	8024d6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8024d18:	9b08      	ldr	r3, [sp, #32]
 8024d1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024d1c:	3b01      	subs	r3, #1
 8024d1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8024d20:	fb02 1203 	mla	r2, r2, r3, r1
 8024d24:	1412      	asrs	r2, r2, #16
 8024d26:	d42b      	bmi.n	8024d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024d28:	3201      	adds	r2, #1
 8024d2a:	4294      	cmp	r4, r2
 8024d2c:	dd28      	ble.n	8024d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024d2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024d30:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024d32:	fb02 1303 	mla	r3, r2, r3, r1
 8024d36:	141b      	asrs	r3, r3, #16
 8024d38:	d422      	bmi.n	8024d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024d3a:	3301      	adds	r3, #1
 8024d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d3e:	429a      	cmp	r2, r3
 8024d40:	dd1e      	ble.n	8024d80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8024d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d44:	f103 0803 	add.w	r8, r3, #3
 8024d48:	9b08      	ldr	r3, [sp, #32]
 8024d4a:	9307      	str	r3, [sp, #28]
 8024d4c:	9b07      	ldr	r3, [sp, #28]
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	f300 81ca 	bgt.w	80250e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8024d54:	9b08      	ldr	r3, [sp, #32]
 8024d56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024d58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024d5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024d60:	441a      	add	r2, r3
 8024d62:	920b      	str	r2, [sp, #44]	; 0x2c
 8024d64:	e15b      	b.n	802501e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8024d66:	1c51      	adds	r1, r2, #1
 8024d68:	f040 8148 	bne.w	8024ffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8024d6c:	42a2      	cmp	r2, r4
 8024d6e:	f280 8145 	bge.w	8024ffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8024d72:	1c5a      	adds	r2, r3, #1
 8024d74:	f2c0 8142 	blt.w	8024ffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8024d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024d7a:	4293      	cmp	r3, r2
 8024d7c:	f280 813e 	bge.w	8024ffc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8024d80:	9b08      	ldr	r3, [sp, #32]
 8024d82:	9313      	str	r3, [sp, #76]	; 0x4c
 8024d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024d86:	9307      	str	r3, [sp, #28]
 8024d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	dde2      	ble.n	8024d54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8024d8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024d90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d92:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024d96:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024d98:	141b      	asrs	r3, r3, #16
 8024d9a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8024d9e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024da0:	1412      	asrs	r2, r2, #16
 8024da2:	f100 818b 	bmi.w	80250bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8024da6:	1c56      	adds	r6, r2, #1
 8024da8:	42b4      	cmp	r4, r6
 8024daa:	f340 8189 	ble.w	80250c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	f2c0 8186 	blt.w	80250c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8024db4:	1c5e      	adds	r6, r3, #1
 8024db6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024db8:	42b7      	cmp	r7, r6
 8024dba:	f340 8181 	ble.w	80250c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8024dbe:	fb03 2304 	mla	r3, r3, r4, r2
 8024dc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024dc4:	18d6      	adds	r6, r2, r3
 8024dc6:	5cd3      	ldrb	r3, [r2, r3]
 8024dc8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8024dcc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024dd0:	2900      	cmp	r1, #0
 8024dd2:	f000 8163 	beq.w	802509c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8024dd6:	7872      	ldrb	r2, [r6, #1]
 8024dd8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024ddc:	920c      	str	r2, [sp, #48]	; 0x30
 8024dde:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8024de2:	2800      	cmp	r0, #0
 8024de4:	f000 8164 	beq.w	80250b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8024de8:	1932      	adds	r2, r6, r4
 8024dea:	5d36      	ldrb	r6, [r6, r4]
 8024dec:	7852      	ldrb	r2, [r2, #1]
 8024dee:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8024df2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8024df6:	9609      	str	r6, [sp, #36]	; 0x24
 8024df8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024dfc:	0e16      	lsrs	r6, r2, #24
 8024dfe:	920d      	str	r2, [sp, #52]	; 0x34
 8024e00:	b289      	uxth	r1, r1
 8024e02:	b280      	uxth	r0, r0
 8024e04:	fb01 fb00 	mul.w	fp, r1, r0
 8024e08:	0109      	lsls	r1, r1, #4
 8024e0a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8024e0e:	eba1 090b 	sub.w	r9, r1, fp
 8024e12:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8024e16:	b280      	uxth	r0, r0
 8024e18:	fa1f f989 	uxth.w	r9, r9
 8024e1c:	1a12      	subs	r2, r2, r0
 8024e1e:	fb09 f108 	mul.w	r1, r9, r8
 8024e22:	b292      	uxth	r2, r2
 8024e24:	fb02 110c 	mla	r1, r2, ip, r1
 8024e28:	fb00 110a 	mla	r1, r0, sl, r1
 8024e2c:	fb0b 1106 	mla	r1, fp, r6, r1
 8024e30:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024e34:	2900      	cmp	r1, #0
 8024e36:	f000 80d2 	beq.w	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8024e3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024e3e:	d01b      	beq.n	8024e78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8024e40:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024e44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e48:	fb0c fe0e 	mul.w	lr, ip, lr
 8024e4c:	fb0c fc03 	mul.w	ip, ip, r3
 8024e50:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8024e54:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024e58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e5c:	4473      	add	r3, lr
 8024e5e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8024e62:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8024e66:	0a1b      	lsrs	r3, r3, #8
 8024e68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024e6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024e70:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024e74:	ea43 030e 	orr.w	r3, r3, lr
 8024e78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024e7c:	d01e      	beq.n	8024ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8024e7e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024e80:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024e84:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8024e88:	fb08 fc0c 	mul.w	ip, r8, ip
 8024e8c:	fb08 f80e 	mul.w	r8, r8, lr
 8024e90:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024e94:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024e98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024e9c:	44e6      	add	lr, ip
 8024e9e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8024ea2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8024ea6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024eaa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024eae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024eb2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024eb6:	ea4e 0708 	orr.w	r7, lr, r8
 8024eba:	970c      	str	r7, [sp, #48]	; 0x30
 8024ebc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024ec0:	d01e      	beq.n	8024f00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8024ec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024ec4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024ec8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024ecc:	fb0a f808 	mul.w	r8, sl, r8
 8024ed0:	fb0a fa0c 	mul.w	sl, sl, ip
 8024ed4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024ed8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024edc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024ee0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024ee4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024ee8:	44c6      	add	lr, r8
 8024eea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024eee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024ef2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024efa:	ea4e 070a 	orr.w	r7, lr, sl
 8024efe:	9709      	str	r7, [sp, #36]	; 0x24
 8024f00:	2eff      	cmp	r6, #255	; 0xff
 8024f02:	d01d      	beq.n	8024f40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8024f04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024f06:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8024f0a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024f0e:	fb06 f808 	mul.w	r8, r6, r8
 8024f12:	fb06 f60c 	mul.w	r6, r6, ip
 8024f16:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8024f1a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8024f1e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024f22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f26:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024f2a:	44c6      	add	lr, r8
 8024f2c:	0a36      	lsrs	r6, r6, #8
 8024f2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024f36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f3a:	ea4e 0606 	orr.w	r6, lr, r6
 8024f3e:	960d      	str	r6, [sp, #52]	; 0x34
 8024f40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024f42:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024f46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024f48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f50:	43c9      	mvns	r1, r1
 8024f52:	fb09 f606 	mul.w	r6, r9, r6
 8024f56:	b2c9      	uxtb	r1, r1
 8024f58:	fb02 660c 	mla	r6, r2, ip, r6
 8024f5c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024f60:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024f62:	fb00 660c 	mla	r6, r0, ip, r6
 8024f66:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024f6a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024f6c:	fb0b 660c 	mla	r6, fp, ip, r6
 8024f70:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8024f74:	fb09 f90c 	mul.w	r9, r9, ip
 8024f78:	0a36      	lsrs	r6, r6, #8
 8024f7a:	fb02 9303 	mla	r3, r2, r3, r9
 8024f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024f80:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f84:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8024f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f8a:	fb00 330e 	mla	r3, r0, lr, r3
 8024f8e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8024f92:	fb0b 3b00 	mla	fp, fp, r0, r3
 8024f96:	9b07      	ldr	r3, [sp, #28]
 8024f98:	781b      	ldrb	r3, [r3, #0]
 8024f9a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024f9e:	fb03 f201 	mul.w	r2, r3, r1
 8024fa2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024fa6:	1c53      	adds	r3, r2, #1
 8024fa8:	ea46 060b 	orr.w	r6, r6, fp
 8024fac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fb0:	9a07      	ldr	r2, [sp, #28]
 8024fb2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8024fb6:	7013      	strb	r3, [r2, #0]
 8024fb8:	7853      	ldrb	r3, [r2, #1]
 8024fba:	434b      	muls	r3, r1
 8024fbc:	1c5a      	adds	r2, r3, #1
 8024fbe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024fc2:	0a33      	lsrs	r3, r6, #8
 8024fc4:	0c36      	lsrs	r6, r6, #16
 8024fc6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024fca:	9a07      	ldr	r2, [sp, #28]
 8024fcc:	7053      	strb	r3, [r2, #1]
 8024fce:	7893      	ldrb	r3, [r2, #2]
 8024fd0:	4359      	muls	r1, r3
 8024fd2:	1c4b      	adds	r3, r1, #1
 8024fd4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024fd8:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8024fdc:	7096      	strb	r6, [r2, #2]
 8024fde:	9b07      	ldr	r3, [sp, #28]
 8024fe0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024fe2:	3303      	adds	r3, #3
 8024fe4:	9307      	str	r3, [sp, #28]
 8024fe6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024fe8:	4413      	add	r3, r2
 8024fea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024fec:	9329      	str	r3, [sp, #164]	; 0xa4
 8024fee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024ff0:	4413      	add	r3, r2
 8024ff2:	932a      	str	r3, [sp, #168]	; 0xa8
 8024ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024ff6:	3b01      	subs	r3, #1
 8024ff8:	9313      	str	r3, [sp, #76]	; 0x4c
 8024ffa:	e6c5      	b.n	8024d88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8024ffc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024ffe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025000:	4413      	add	r3, r2
 8025002:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025004:	9329      	str	r3, [sp, #164]	; 0xa4
 8025006:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025008:	4413      	add	r3, r2
 802500a:	932a      	str	r3, [sp, #168]	; 0xa8
 802500c:	9b08      	ldr	r3, [sp, #32]
 802500e:	3b01      	subs	r3, #1
 8025010:	9308      	str	r3, [sp, #32]
 8025012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025014:	3303      	adds	r3, #3
 8025016:	930b      	str	r3, [sp, #44]	; 0x2c
 8025018:	e66b      	b.n	8024cf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802501a:	f47f ae7d 	bne.w	8024d18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802501e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025020:	2b00      	cmp	r3, #0
 8025022:	f340 8199 	ble.w	8025358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8025026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802502a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802502c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025030:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025034:	eef0 6a48 	vmov.f32	s13, s16
 8025038:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802503c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025040:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025044:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025048:	eef0 6a68 	vmov.f32	s13, s17
 802504c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025050:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8025054:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025058:	ee69 7a27 	vmul.f32	s15, s18, s15
 802505c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025060:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025064:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025068:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802506c:	ee18 2a10 	vmov	r2, s16
 8025070:	eeb0 8a47 	vmov.f32	s16, s14
 8025074:	fb92 f3f3 	sdiv	r3, r2, r3
 8025078:	ee18 2a90 	vmov	r2, s17
 802507c:	932b      	str	r3, [sp, #172]	; 0xac
 802507e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025080:	eef0 8a67 	vmov.f32	s17, s15
 8025084:	fb92 f3f3 	sdiv	r3, r2, r3
 8025088:	932c      	str	r3, [sp, #176]	; 0xb0
 802508a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802508c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802508e:	3b01      	subs	r3, #1
 8025090:	9312      	str	r3, [sp, #72]	; 0x48
 8025092:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025094:	bf08      	it	eq
 8025096:	4613      	moveq	r3, r2
 8025098:	9308      	str	r3, [sp, #32]
 802509a:	e623      	b.n	8024ce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 802509c:	b158      	cbz	r0, 80250b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802509e:	5d32      	ldrb	r2, [r6, r4]
 80250a0:	26ff      	movs	r6, #255	; 0xff
 80250a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80250a6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80250aa:	9209      	str	r2, [sp, #36]	; 0x24
 80250ac:	46b0      	mov	r8, r6
 80250ae:	e6a7      	b.n	8024e00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80250b0:	26ff      	movs	r6, #255	; 0xff
 80250b2:	46b2      	mov	sl, r6
 80250b4:	e6a4      	b.n	8024e00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80250b6:	26ff      	movs	r6, #255	; 0xff
 80250b8:	46b2      	mov	sl, r6
 80250ba:	e7f7      	b.n	80250ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80250bc:	1c57      	adds	r7, r2, #1
 80250be:	d18e      	bne.n	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80250c0:	4294      	cmp	r4, r2
 80250c2:	dd8c      	ble.n	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80250c4:	1c5e      	adds	r6, r3, #1
 80250c6:	db8a      	blt.n	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80250c8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80250ca:	429e      	cmp	r6, r3
 80250cc:	dd87      	ble.n	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80250ce:	e9cd 1004 	strd	r1, r0, [sp, #16]
 80250d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80250d6:	e9cd 4600 	strd	r4, r6, [sp]
 80250da:	462b      	mov	r3, r5
 80250dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80250de:	9907      	ldr	r1, [sp, #28]
 80250e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80250e2:	f7ff fc85 	bl	80249f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80250e6:	e77a      	b.n	8024fde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80250e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80250ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80250ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80250f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80250f2:	1409      	asrs	r1, r1, #16
 80250f4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80250f8:	141b      	asrs	r3, r3, #16
 80250fa:	fb04 1303 	mla	r3, r4, r3, r1
 80250fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025100:	18ce      	adds	r6, r1, r3
 8025102:	5ccb      	ldrb	r3, [r1, r3]
 8025104:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025108:	0e1f      	lsrs	r7, r3, #24
 802510a:	2a00      	cmp	r2, #0
 802510c:	f000 8114 	beq.w	8025338 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8025110:	7871      	ldrb	r1, [r6, #1]
 8025112:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025116:	910e      	str	r1, [sp, #56]	; 0x38
 8025118:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802511c:	2800      	cmp	r0, #0
 802511e:	f000 8115 	beq.w	802534c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8025122:	1931      	adds	r1, r6, r4
 8025124:	5d36      	ldrb	r6, [r6, r4]
 8025126:	7849      	ldrb	r1, [r1, #1]
 8025128:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802512c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025130:	960a      	str	r6, [sp, #40]	; 0x28
 8025132:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025136:	0e0e      	lsrs	r6, r1, #24
 8025138:	910f      	str	r1, [sp, #60]	; 0x3c
 802513a:	b292      	uxth	r2, r2
 802513c:	b280      	uxth	r0, r0
 802513e:	fb02 fb00 	mul.w	fp, r2, r0
 8025142:	0112      	lsls	r2, r2, #4
 8025144:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8025148:	eba2 090b 	sub.w	r9, r2, fp
 802514c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025150:	b280      	uxth	r0, r0
 8025152:	fa1f f989 	uxth.w	r9, r9
 8025156:	1a09      	subs	r1, r1, r0
 8025158:	fb09 f20e 	mul.w	r2, r9, lr
 802515c:	b289      	uxth	r1, r1
 802515e:	fb01 2207 	mla	r2, r1, r7, r2
 8025162:	fb00 220a 	mla	r2, r0, sl, r2
 8025166:	fb0b 2206 	mla	r2, fp, r6, r2
 802516a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802516e:	9213      	str	r2, [sp, #76]	; 0x4c
 8025170:	2a00      	cmp	r2, #0
 8025172:	f000 80d4 	beq.w	802531e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8025176:	2fff      	cmp	r7, #255	; 0xff
 8025178:	d01a      	beq.n	80251b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 802517a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802517e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025182:	fb07 fc0c 	mul.w	ip, r7, ip
 8025186:	435f      	muls	r7, r3
 8025188:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802518c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025190:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025194:	4463      	add	r3, ip
 8025196:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802519a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802519e:	0a1b      	lsrs	r3, r3, #8
 80251a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80251a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80251ac:	ea43 030c 	orr.w	r3, r3, ip
 80251b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80251b4:	d01f      	beq.n	80251f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 80251b6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80251b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80251ba:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80251be:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80251c2:	fb0e f707 	mul.w	r7, lr, r7
 80251c6:	fb0e fe0c 	mul.w	lr, lr, ip
 80251ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80251ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80251d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80251d6:	44bc      	add	ip, r7
 80251d8:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80251dc:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80251e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80251e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80251ec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80251f0:	ea4c 020e 	orr.w	r2, ip, lr
 80251f4:	920e      	str	r2, [sp, #56]	; 0x38
 80251f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80251fa:	d01e      	beq.n	802523a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 80251fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80251fe:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025202:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8025206:	fb0a fe0e 	mul.w	lr, sl, lr
 802520a:	fb0a fa07 	mul.w	sl, sl, r7
 802520e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025212:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025216:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802521a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802521e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025222:	44f4      	add	ip, lr
 8025224:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025228:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802522c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025230:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025234:	ea4c 020a 	orr.w	r2, ip, sl
 8025238:	920a      	str	r2, [sp, #40]	; 0x28
 802523a:	2eff      	cmp	r6, #255	; 0xff
 802523c:	d01c      	beq.n	8025278 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802523e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025240:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025244:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8025248:	fb06 fe0e 	mul.w	lr, r6, lr
 802524c:	437e      	muls	r6, r7
 802524e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025252:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025256:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802525a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802525e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025262:	44f4      	add	ip, lr
 8025264:	0a36      	lsrs	r6, r6, #8
 8025266:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802526a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802526e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025272:	ea4c 0206 	orr.w	r2, ip, r6
 8025276:	920f      	str	r2, [sp, #60]	; 0x3c
 8025278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802527a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802527e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025282:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8025286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025288:	fb09 f606 	mul.w	r6, r9, r6
 802528c:	fb01 6607 	mla	r6, r1, r7, r6
 8025290:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8025294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025296:	fb00 6607 	mla	r6, r0, r7, r6
 802529a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802529e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80252a0:	fb0b 6607 	mla	r6, fp, r7, r6
 80252a4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80252a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80252aa:	fb09 f907 	mul.w	r9, r9, r7
 80252ae:	0a36      	lsrs	r6, r6, #8
 80252b0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80252b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80252b6:	fb01 9303 	mla	r3, r1, r3, r9
 80252ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80252be:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80252c2:	fb00 330c 	mla	r3, r0, ip, r3
 80252c6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80252ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80252cc:	43da      	mvns	r2, r3
 80252ce:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 80252d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252d6:	b2d2      	uxtb	r2, r2
 80252d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80252dc:	fb03 f102 	mul.w	r1, r3, r2
 80252e0:	ea46 060e 	orr.w	r6, r6, lr
 80252e4:	1c4b      	adds	r3, r1, #1
 80252e6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80252ea:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80252ee:	f808 3c03 	strb.w	r3, [r8, #-3]
 80252f2:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 80252f6:	4353      	muls	r3, r2
 80252f8:	1c59      	adds	r1, r3, #1
 80252fa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80252fe:	0a33      	lsrs	r3, r6, #8
 8025300:	0c36      	lsrs	r6, r6, #16
 8025302:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8025306:	f808 3c02 	strb.w	r3, [r8, #-2]
 802530a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802530e:	435a      	muls	r2, r3
 8025310:	1c53      	adds	r3, r2, #1
 8025312:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025316:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802531a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802531e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025320:	f108 0803 	add.w	r8, r8, #3
 8025324:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025326:	4413      	add	r3, r2
 8025328:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802532a:	9329      	str	r3, [sp, #164]	; 0xa4
 802532c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802532e:	4413      	add	r3, r2
 8025330:	932a      	str	r3, [sp, #168]	; 0xa8
 8025332:	9b07      	ldr	r3, [sp, #28]
 8025334:	3b01      	subs	r3, #1
 8025336:	e508      	b.n	8024d4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8025338:	b158      	cbz	r0, 8025352 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802533a:	5d31      	ldrb	r1, [r6, r4]
 802533c:	26ff      	movs	r6, #255	; 0xff
 802533e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025342:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8025346:	910a      	str	r1, [sp, #40]	; 0x28
 8025348:	46b6      	mov	lr, r6
 802534a:	e6f6      	b.n	802513a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802534c:	26ff      	movs	r6, #255	; 0xff
 802534e:	46b2      	mov	sl, r6
 8025350:	e6f3      	b.n	802513a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8025352:	26ff      	movs	r6, #255	; 0xff
 8025354:	46b2      	mov	sl, r6
 8025356:	e7f7      	b.n	8025348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8025358:	b017      	add	sp, #92	; 0x5c
 802535a:	ecbd 8b08 	vpop	{d8-d11}
 802535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8025364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025368:	b08d      	sub	sp, #52	; 0x34
 802536a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802536e:	9103      	str	r1, [sp, #12]
 8025370:	fb07 5803 	mla	r8, r7, r3, r5
 8025374:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8025378:	9803      	ldr	r0, [sp, #12]
 802537a:	2f00      	cmp	r7, #0
 802537c:	910b      	str	r1, [sp, #44]	; 0x2c
 802537e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025382:	9903      	ldr	r1, [sp, #12]
 8025384:	9c03      	ldr	r4, [sp, #12]
 8025386:	eb02 0608 	add.w	r6, r2, r8
 802538a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802538e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8025392:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8025396:	7809      	ldrb	r1, [r1, #0]
 8025398:	7840      	ldrb	r0, [r0, #1]
 802539a:	78a4      	ldrb	r4, [r4, #2]
 802539c:	db51      	blt.n	8025442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802539e:	45be      	cmp	lr, r7
 80253a0:	dd4f      	ble.n	8025442 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80253a2:	2d00      	cmp	r5, #0
 80253a4:	db49      	blt.n	802543a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80253a6:	42ab      	cmp	r3, r5
 80253a8:	dd47      	ble.n	802543a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80253aa:	f812 2008 	ldrb.w	r2, [r2, r8]
 80253ae:	9204      	str	r2, [sp, #16]
 80253b0:	7872      	ldrb	r2, [r6, #1]
 80253b2:	9205      	str	r2, [sp, #20]
 80253b4:	78b2      	ldrb	r2, [r6, #2]
 80253b6:	9206      	str	r2, [sp, #24]
 80253b8:	1c6a      	adds	r2, r5, #1
 80253ba:	d449      	bmi.n	8025450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80253bc:	4293      	cmp	r3, r2
 80253be:	dd47      	ble.n	8025450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80253c0:	f1bc 0f00 	cmp.w	ip, #0
 80253c4:	d044      	beq.n	8025450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80253c6:	7972      	ldrb	r2, [r6, #5]
 80253c8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80253cc:	f896 a004 	ldrb.w	sl, [r6, #4]
 80253d0:	9201      	str	r2, [sp, #4]
 80253d2:	3701      	adds	r7, #1
 80253d4:	d444      	bmi.n	8025460 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80253d6:	45be      	cmp	lr, r7
 80253d8:	dd42      	ble.n	8025460 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 80253da:	f1b9 0f00 	cmp.w	r9, #0
 80253de:	f000 80c1 	beq.w	8025564 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 80253e2:	2d00      	cmp	r5, #0
 80253e4:	db38      	blt.n	8025458 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80253e6:	42ab      	cmp	r3, r5
 80253e8:	dd36      	ble.n	8025458 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 80253ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80253ee:	f816 8002 	ldrb.w	r8, [r6, r2]
 80253f2:	2203      	movs	r2, #3
 80253f4:	fb03 6702 	mla	r7, r3, r2, r6
 80253f8:	fb03 6202 	mla	r2, r3, r2, r6
 80253fc:	787f      	ldrb	r7, [r7, #1]
 80253fe:	f892 e002 	ldrb.w	lr, [r2, #2]
 8025402:	9702      	str	r7, [sp, #8]
 8025404:	3501      	adds	r5, #1
 8025406:	d432      	bmi.n	802546e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8025408:	42ab      	cmp	r3, r5
 802540a:	dd30      	ble.n	802546e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802540c:	f1bc 0f00 	cmp.w	ip, #0
 8025410:	d031      	beq.n	8025476 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8025412:	2703      	movs	r7, #3
 8025414:	fb13 7207 	smlabb	r2, r3, r7, r7
 8025418:	5cb5      	ldrb	r5, [r6, r2]
 802541a:	fb03 6207 	mla	r2, r3, r7, r6
 802541e:	fb03 6307 	mla	r3, r3, r7, r6
 8025422:	7912      	ldrb	r2, [r2, #4]
 8025424:	795e      	ldrb	r6, [r3, #5]
 8025426:	f1bc 0f0f 	cmp.w	ip, #15
 802542a:	d927      	bls.n	802547c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802542c:	4b53      	ldr	r3, [pc, #332]	; (802557c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802542e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025432:	4a53      	ldr	r2, [pc, #332]	; (8025580 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8025434:	4853      	ldr	r0, [pc, #332]	; (8025584 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8025436:	f004 facf 	bl	80299d8 <__assert_func>
 802543a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802543e:	9104      	str	r1, [sp, #16]
 8025440:	e7ba      	b.n	80253b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8025442:	9401      	str	r4, [sp, #4]
 8025444:	4682      	mov	sl, r0
 8025446:	468b      	mov	fp, r1
 8025448:	9104      	str	r1, [sp, #16]
 802544a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802544e:	e7c0      	b.n	80253d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8025450:	9401      	str	r4, [sp, #4]
 8025452:	4682      	mov	sl, r0
 8025454:	468b      	mov	fp, r1
 8025456:	e7bc      	b.n	80253d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8025458:	46a6      	mov	lr, r4
 802545a:	9002      	str	r0, [sp, #8]
 802545c:	4688      	mov	r8, r1
 802545e:	e7d1      	b.n	8025404 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8025460:	4626      	mov	r6, r4
 8025462:	4602      	mov	r2, r0
 8025464:	460d      	mov	r5, r1
 8025466:	46a6      	mov	lr, r4
 8025468:	9002      	str	r0, [sp, #8]
 802546a:	4688      	mov	r8, r1
 802546c:	e7db      	b.n	8025426 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802546e:	4626      	mov	r6, r4
 8025470:	4602      	mov	r2, r0
 8025472:	460d      	mov	r5, r1
 8025474:	e7d7      	b.n	8025426 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8025476:	4626      	mov	r6, r4
 8025478:	4602      	mov	r2, r0
 802547a:	460d      	mov	r5, r1
 802547c:	f1b9 0f0f 	cmp.w	r9, #15
 8025480:	d8d4      	bhi.n	802542c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8025482:	fa1f f38c 	uxth.w	r3, ip
 8025486:	fa1f fc89 	uxth.w	ip, r9
 802548a:	fb03 f70c 	mul.w	r7, r3, ip
 802548e:	011b      	lsls	r3, r3, #4
 8025490:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8025494:	9707      	str	r7, [sp, #28]
 8025496:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802549a:	fa1f fc8c 	uxth.w	ip, ip
 802549e:	eba7 070c 	sub.w	r7, r7, ip
 80254a2:	b2bf      	uxth	r7, r7
 80254a4:	9709      	str	r7, [sp, #36]	; 0x24
 80254a6:	9f07      	ldr	r7, [sp, #28]
 80254a8:	1bdb      	subs	r3, r3, r7
 80254aa:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80254ae:	b29b      	uxth	r3, r3
 80254b0:	9708      	str	r7, [sp, #32]
 80254b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80254b4:	930a      	str	r3, [sp, #40]	; 0x28
 80254b6:	ea6f 0907 	mvn.w	r9, r7
 80254ba:	fb03 fb0b 	mul.w	fp, r3, fp
 80254be:	9f04      	ldr	r7, [sp, #16]
 80254c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254c2:	fa5f f989 	uxtb.w	r9, r9
 80254c6:	fb03 bb07 	mla	fp, r3, r7, fp
 80254ca:	9f07      	ldr	r7, [sp, #28]
 80254cc:	fb11 f109 	smulbb	r1, r1, r9
 80254d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80254d2:	fb0c b808 	mla	r8, ip, r8, fp
 80254d6:	fb10 f009 	smulbb	r0, r0, r9
 80254da:	fb14 f409 	smulbb	r4, r4, r9
 80254de:	fb07 8805 	mla	r8, r7, r5, r8
 80254e2:	9d08      	ldr	r5, [sp, #32]
 80254e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80254e6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80254ea:	fb08 1805 	mla	r8, r8, r5, r1
 80254ee:	9d05      	ldr	r5, [sp, #20]
 80254f0:	fa1f f888 	uxth.w	r8, r8
 80254f4:	f108 0101 	add.w	r1, r8, #1
 80254f8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80254fc:	9903      	ldr	r1, [sp, #12]
 80254fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025502:	f881 8000 	strb.w	r8, [r1]
 8025506:	fb03 f10a 	mul.w	r1, r3, sl
 802550a:	fb07 1105 	mla	r1, r7, r5, r1
 802550e:	9d02      	ldr	r5, [sp, #8]
 8025510:	fb0c 1105 	mla	r1, ip, r5, r1
 8025514:	9d07      	ldr	r5, [sp, #28]
 8025516:	fb05 1102 	mla	r1, r5, r2, r1
 802551a:	9a08      	ldr	r2, [sp, #32]
 802551c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025520:	fb01 0102 	mla	r1, r1, r2, r0
 8025524:	9a03      	ldr	r2, [sp, #12]
 8025526:	b289      	uxth	r1, r1
 8025528:	1c48      	adds	r0, r1, #1
 802552a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802552e:	1209      	asrs	r1, r1, #8
 8025530:	7051      	strb	r1, [r2, #1]
 8025532:	9a01      	ldr	r2, [sp, #4]
 8025534:	4353      	muls	r3, r2
 8025536:	9a06      	ldr	r2, [sp, #24]
 8025538:	fb07 3702 	mla	r7, r7, r2, r3
 802553c:	9b08      	ldr	r3, [sp, #32]
 802553e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8025542:	fb05 c606 	mla	r6, r5, r6, ip
 8025546:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802554a:	fb06 4603 	mla	r6, r6, r3, r4
 802554e:	9b03      	ldr	r3, [sp, #12]
 8025550:	b2b6      	uxth	r6, r6
 8025552:	f106 0e01 	add.w	lr, r6, #1
 8025556:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802555a:	1236      	asrs	r6, r6, #8
 802555c:	709e      	strb	r6, [r3, #2]
 802555e:	b00d      	add	sp, #52	; 0x34
 8025560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025564:	f1bc 0f0f 	cmp.w	ip, #15
 8025568:	f63f af60 	bhi.w	802542c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802556c:	4626      	mov	r6, r4
 802556e:	4602      	mov	r2, r0
 8025570:	460d      	mov	r5, r1
 8025572:	46a6      	mov	lr, r4
 8025574:	9002      	str	r0, [sp, #8]
 8025576:	4688      	mov	r8, r1
 8025578:	e783      	b.n	8025482 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 802557a:	bf00      	nop
 802557c:	0802efeb 	.word	0x0802efeb
 8025580:	0802f4e2 	.word	0x0802f4e2
 8025584:	0802f0b4 	.word	0x0802f0b4

08025588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802558c:	ed2d 8b08 	vpush	{d8-d11}
 8025590:	b0a1      	sub	sp, #132	; 0x84
 8025592:	eeb0 aa40 	vmov.f32	s20, s0
 8025596:	eef0 9a60 	vmov.f32	s19, s1
 802559a:	9307      	str	r3, [sp, #28]
 802559c:	eeb0 9a41 	vmov.f32	s18, s2
 80255a0:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80255a4:	eeb0 8a62 	vmov.f32	s16, s5
 80255a8:	9210      	str	r2, [sp, #64]	; 0x40
 80255aa:	eef0 8a43 	vmov.f32	s17, s6
 80255ae:	9308      	str	r3, [sp, #32]
 80255b0:	eef0 ba44 	vmov.f32	s23, s8
 80255b4:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80255b8:	eeb0 ba64 	vmov.f32	s22, s9
 80255bc:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80255be:	eef0 aa45 	vmov.f32	s21, s10
 80255c2:	930a      	str	r3, [sp, #40]	; 0x28
 80255c4:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80255c8:	901f      	str	r0, [sp, #124]	; 0x7c
 80255ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80255cc:	6850      	ldr	r0, [r2, #4]
 80255ce:	910e      	str	r1, [sp, #56]	; 0x38
 80255d0:	6812      	ldr	r2, [r2, #0]
 80255d2:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 80255d6:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 80255da:	fb00 1303 	mla	r3, r0, r3, r1
 80255de:	9908      	ldr	r1, [sp, #32]
 80255e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255e4:	18d3      	adds	r3, r2, r3
 80255e6:	2203      	movs	r2, #3
 80255e8:	9309      	str	r3, [sp, #36]	; 0x24
 80255ea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	930c      	str	r3, [sp, #48]	; 0x30
 80255f0:	f06f 0304 	mvn.w	r3, #4
 80255f4:	fb11 3302 	smlabb	r3, r1, r2, r3
 80255f8:	930d      	str	r3, [sp, #52]	; 0x34
 80255fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80255fc:	43db      	mvns	r3, r3
 80255fe:	b2db      	uxtb	r3, r3
 8025600:	930b      	str	r3, [sp, #44]	; 0x2c
 8025602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025604:	2b00      	cmp	r3, #0
 8025606:	dc03      	bgt.n	8025610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8025608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802560a:	2b00      	cmp	r3, #0
 802560c:	f340 81df 	ble.w	80259ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8025610:	9b07      	ldr	r3, [sp, #28]
 8025612:	2b00      	cmp	r3, #0
 8025614:	f340 80f2 	ble.w	80257fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8025618:	ea5f 4228 	movs.w	r2, r8, asr #16
 802561c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025620:	d430      	bmi.n	8025684 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8025622:	1c51      	adds	r1, r2, #1
 8025624:	9808      	ldr	r0, [sp, #32]
 8025626:	4281      	cmp	r1, r0
 8025628:	da2f      	bge.n	802568a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802562a:	2b00      	cmp	r3, #0
 802562c:	db2d      	blt.n	802568a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802562e:	1c59      	adds	r1, r3, #1
 8025630:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025632:	4288      	cmp	r0, r1
 8025634:	dd29      	ble.n	802568a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8025636:	9b07      	ldr	r3, [sp, #28]
 8025638:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802563a:	3b01      	subs	r3, #1
 802563c:	fb02 8203 	mla	r2, r2, r3, r8
 8025640:	1412      	asrs	r2, r2, #16
 8025642:	d42d      	bmi.n	80256a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8025644:	3201      	adds	r2, #1
 8025646:	9908      	ldr	r1, [sp, #32]
 8025648:	4291      	cmp	r1, r2
 802564a:	dd29      	ble.n	80256a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802564c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802564e:	fb02 b303 	mla	r3, r2, r3, fp
 8025652:	141b      	asrs	r3, r3, #16
 8025654:	d424      	bmi.n	80256a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8025656:	3301      	adds	r3, #1
 8025658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802565a:	429a      	cmp	r2, r3
 802565c:	dd20      	ble.n	80256a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025660:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8025664:	1cde      	adds	r6, r3, #3
 8025666:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802566a:	f1bc 0f00 	cmp.w	ip, #0
 802566e:	f300 811f 	bgt.w	80258b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 8025672:	9b07      	ldr	r3, [sp, #28]
 8025674:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802567a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802567e:	4423      	add	r3, r4
 8025680:	9309      	str	r3, [sp, #36]	; 0x24
 8025682:	e0bd      	b.n	8025800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8025684:	1c57      	adds	r7, r2, #1
 8025686:	f040 80ae 	bne.w	80257e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802568a:	9908      	ldr	r1, [sp, #32]
 802568c:	428a      	cmp	r2, r1
 802568e:	f280 80aa 	bge.w	80257e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8025692:	1c5e      	adds	r6, r3, #1
 8025694:	f2c0 80a7 	blt.w	80257e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8025698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802569a:	4293      	cmp	r3, r2
 802569c:	f280 80a3 	bge.w	80257e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80256a0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80256a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80256a6:	f1ba 0f00 	cmp.w	sl, #0
 80256aa:	dde2      	ble.n	8025672 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80256ac:	ea5f 4028 	movs.w	r0, r8, asr #16
 80256b0:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80256b4:	ea4f 412b 	mov.w	r1, fp, asr #16
 80256b8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80256bc:	f100 80df 	bmi.w	802587e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80256c0:	1c45      	adds	r5, r0, #1
 80256c2:	9f08      	ldr	r7, [sp, #32]
 80256c4:	42af      	cmp	r7, r5
 80256c6:	f340 80dc 	ble.w	8025882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80256ca:	2900      	cmp	r1, #0
 80256cc:	f2c0 80d9 	blt.w	8025882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80256d0:	1c4d      	adds	r5, r1, #1
 80256d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80256d4:	42af      	cmp	r7, r5
 80256d6:	f340 80d4 	ble.w	8025882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80256da:	9d08      	ldr	r5, [sp, #32]
 80256dc:	fb05 0101 	mla	r1, r5, r1, r0
 80256e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80256e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80256e6:	1845      	adds	r5, r0, r1
 80256e8:	5c40      	ldrb	r0, [r0, r1]
 80256ea:	792f      	ldrb	r7, [r5, #4]
 80256ec:	7869      	ldrb	r1, [r5, #1]
 80256ee:	9711      	str	r7, [sp, #68]	; 0x44
 80256f0:	796f      	ldrb	r7, [r5, #5]
 80256f2:	f895 e002 	ldrb.w	lr, [r5, #2]
 80256f6:	f895 9003 	ldrb.w	r9, [r5, #3]
 80256fa:	9712      	str	r7, [sp, #72]	; 0x48
 80256fc:	b17a      	cbz	r2, 802571e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80256fe:	3505      	adds	r5, #5
 8025700:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025702:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025704:	19ef      	adds	r7, r5, r7
 8025706:	5d2d      	ldrb	r5, [r5, r4]
 8025708:	787c      	ldrb	r4, [r7, #1]
 802570a:	9513      	str	r5, [sp, #76]	; 0x4c
 802570c:	9415      	str	r4, [sp, #84]	; 0x54
 802570e:	78bc      	ldrb	r4, [r7, #2]
 8025710:	9417      	str	r4, [sp, #92]	; 0x5c
 8025712:	78fc      	ldrb	r4, [r7, #3]
 8025714:	9414      	str	r4, [sp, #80]	; 0x50
 8025716:	793c      	ldrb	r4, [r7, #4]
 8025718:	9416      	str	r4, [sp, #88]	; 0x58
 802571a:	797c      	ldrb	r4, [r7, #5]
 802571c:	9418      	str	r4, [sp, #96]	; 0x60
 802571e:	b29b      	uxth	r3, r3
 8025720:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025722:	b292      	uxth	r2, r2
 8025724:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8025728:	fb03 f702 	mul.w	r7, r3, r2
 802572c:	011b      	lsls	r3, r3, #4
 802572e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8025732:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025736:	1bdb      	subs	r3, r3, r7
 8025738:	b292      	uxth	r2, r2
 802573a:	b29b      	uxth	r3, r3
 802573c:	ebac 0c02 	sub.w	ip, ip, r2
 8025740:	fb03 f909 	mul.w	r9, r3, r9
 8025744:	fa1f fc8c 	uxth.w	ip, ip
 8025748:	fb0c 9000 	mla	r0, ip, r0, r9
 802574c:	f896 9000 	ldrb.w	r9, [r6]
 8025750:	fb02 0004 	mla	r0, r2, r4, r0
 8025754:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025756:	fb07 0004 	mla	r0, r7, r4, r0
 802575a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802575c:	fb19 f904 	smulbb	r9, r9, r4
 8025760:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025764:	fb00 9005 	mla	r0, r0, r5, r9
 8025768:	b280      	uxth	r0, r0
 802576a:	f100 0901 	add.w	r9, r0, #1
 802576e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025772:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025774:	4358      	muls	r0, r3
 8025776:	ea4f 2929 	mov.w	r9, r9, asr #8
 802577a:	fb0c 0101 	mla	r1, ip, r1, r0
 802577e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025780:	f886 9000 	strb.w	r9, [r6]
 8025784:	fb02 1100 	mla	r1, r2, r0, r1
 8025788:	9816      	ldr	r0, [sp, #88]	; 0x58
 802578a:	fb07 1100 	mla	r1, r7, r0, r1
 802578e:	7870      	ldrb	r0, [r6, #1]
 8025790:	fb10 f004 	smulbb	r0, r0, r4
 8025794:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025798:	fb01 0105 	mla	r1, r1, r5, r0
 802579c:	b289      	uxth	r1, r1
 802579e:	1c48      	adds	r0, r1, #1
 80257a0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80257a4:	1209      	asrs	r1, r1, #8
 80257a6:	7071      	strb	r1, [r6, #1]
 80257a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80257aa:	434b      	muls	r3, r1
 80257ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80257ae:	fb0c 330e 	mla	r3, ip, lr, r3
 80257b2:	fb02 3201 	mla	r2, r2, r1, r3
 80257b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80257b8:	fb07 2703 	mla	r7, r7, r3, r2
 80257bc:	78b2      	ldrb	r2, [r6, #2]
 80257be:	fb12 f204 	smulbb	r2, r2, r4
 80257c2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80257c6:	fb07 2505 	mla	r5, r7, r5, r2
 80257ca:	b2ad      	uxth	r5, r5
 80257cc:	1c6f      	adds	r7, r5, #1
 80257ce:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80257d2:	122d      	asrs	r5, r5, #8
 80257d4:	70b5      	strb	r5, [r6, #2]
 80257d6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80257d8:	3603      	adds	r6, #3
 80257da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80257de:	4498      	add	r8, r3
 80257e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80257e2:	449b      	add	fp, r3
 80257e4:	e75f      	b.n	80256a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 80257e6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80257e8:	4498      	add	r8, r3
 80257ea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80257ec:	449b      	add	fp, r3
 80257ee:	9b07      	ldr	r3, [sp, #28]
 80257f0:	3b01      	subs	r3, #1
 80257f2:	9307      	str	r3, [sp, #28]
 80257f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257f6:	3303      	adds	r3, #3
 80257f8:	9309      	str	r3, [sp, #36]	; 0x24
 80257fa:	e709      	b.n	8025610 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80257fc:	f47f af1b 	bne.w	8025636 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8025800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025802:	2b00      	cmp	r3, #0
 8025804:	f340 80e3 	ble.w	80259ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8025808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802580c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802580e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025812:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025816:	eef0 6a48 	vmov.f32	s13, s16
 802581a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802581e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025822:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025826:	ee16 8a90 	vmov	r8, s13
 802582a:	eef0 6a68 	vmov.f32	s13, s17
 802582e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025832:	ee16 ba90 	vmov	fp, s13
 8025836:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802583a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802583e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025842:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025846:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802584a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802584e:	ee18 2a10 	vmov	r2, s16
 8025852:	eeb0 8a47 	vmov.f32	s16, s14
 8025856:	fb92 f3f3 	sdiv	r3, r2, r3
 802585a:	ee18 2a90 	vmov	r2, s17
 802585e:	9335      	str	r3, [sp, #212]	; 0xd4
 8025860:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025862:	eef0 8a67 	vmov.f32	s17, s15
 8025866:	fb92 f3f3 	sdiv	r3, r2, r3
 802586a:	9336      	str	r3, [sp, #216]	; 0xd8
 802586c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802586e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025870:	3b01      	subs	r3, #1
 8025872:	930e      	str	r3, [sp, #56]	; 0x38
 8025874:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8025876:	bf08      	it	eq
 8025878:	4613      	moveq	r3, r2
 802587a:	9307      	str	r3, [sp, #28]
 802587c:	e6c1      	b.n	8025602 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802587e:	1c45      	adds	r5, r0, #1
 8025880:	d1a9      	bne.n	80257d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8025882:	9c08      	ldr	r4, [sp, #32]
 8025884:	42a0      	cmp	r0, r4
 8025886:	daa6      	bge.n	80257d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8025888:	1c4c      	adds	r4, r1, #1
 802588a:	dba4      	blt.n	80257d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802588c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802588e:	428c      	cmp	r4, r1
 8025890:	dda1      	ble.n	80257d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8025892:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025894:	9001      	str	r0, [sp, #4]
 8025896:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025898:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802589c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802589e:	4631      	mov	r1, r6
 80258a0:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80258a4:	9300      	str	r3, [sp, #0]
 80258a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258a8:	9b08      	ldr	r3, [sp, #32]
 80258aa:	f7ff fd5b 	bl	8025364 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80258ae:	e792      	b.n	80257d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80258b0:	ea4f 4228 	mov.w	r2, r8, asr #16
 80258b4:	9c08      	ldr	r4, [sp, #32]
 80258b6:	ea4f 402b 	mov.w	r0, fp, asr #16
 80258ba:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80258be:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80258c2:	fb04 2000 	mla	r0, r4, r0, r2
 80258c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80258c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80258ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80258ce:	4402      	add	r2, r0
 80258d0:	5c25      	ldrb	r5, [r4, r0]
 80258d2:	7894      	ldrb	r4, [r2, #2]
 80258d4:	7850      	ldrb	r0, [r2, #1]
 80258d6:	9411      	str	r4, [sp, #68]	; 0x44
 80258d8:	7954      	ldrb	r4, [r2, #5]
 80258da:	f892 a003 	ldrb.w	sl, [r2, #3]
 80258de:	f892 9004 	ldrb.w	r9, [r2, #4]
 80258e2:	9412      	str	r4, [sp, #72]	; 0x48
 80258e4:	b171      	cbz	r1, 8025904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80258e6:	3205      	adds	r2, #5
 80258e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258ea:	1917      	adds	r7, r2, r4
 80258ec:	5d12      	ldrb	r2, [r2, r4]
 80258ee:	9219      	str	r2, [sp, #100]	; 0x64
 80258f0:	787a      	ldrb	r2, [r7, #1]
 80258f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80258f4:	78ba      	ldrb	r2, [r7, #2]
 80258f6:	921d      	str	r2, [sp, #116]	; 0x74
 80258f8:	78fa      	ldrb	r2, [r7, #3]
 80258fa:	921a      	str	r2, [sp, #104]	; 0x68
 80258fc:	793a      	ldrb	r2, [r7, #4]
 80258fe:	921c      	str	r2, [sp, #112]	; 0x70
 8025900:	797a      	ldrb	r2, [r7, #5]
 8025902:	921e      	str	r2, [sp, #120]	; 0x78
 8025904:	b29b      	uxth	r3, r3
 8025906:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8025908:	b289      	uxth	r1, r1
 802590a:	3603      	adds	r6, #3
 802590c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8025910:	fb03 f201 	mul.w	r2, r3, r1
 8025914:	011b      	lsls	r3, r3, #4
 8025916:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 802591a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802591e:	1a9b      	subs	r3, r3, r2
 8025920:	b289      	uxth	r1, r1
 8025922:	b29b      	uxth	r3, r3
 8025924:	1a7f      	subs	r7, r7, r1
 8025926:	fb03 fa0a 	mul.w	sl, r3, sl
 802592a:	b2bf      	uxth	r7, r7
 802592c:	fb03 f909 	mul.w	r9, r3, r9
 8025930:	fb07 a505 	mla	r5, r7, r5, sl
 8025934:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8025938:	fb07 9000 	mla	r0, r7, r0, r9
 802593c:	fb01 5504 	mla	r5, r1, r4, r5
 8025940:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8025942:	fb02 5504 	mla	r5, r2, r4, r5
 8025946:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025948:	fb1a fa04 	smulbb	sl, sl, r4
 802594c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025950:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8025952:	fb05 a50e 	mla	r5, r5, lr, sl
 8025956:	fb01 0004 	mla	r0, r1, r4, r0
 802595a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802595c:	b2ad      	uxth	r5, r5
 802595e:	fb02 0004 	mla	r0, r2, r4, r0
 8025962:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025964:	f105 0a01 	add.w	sl, r5, #1
 8025968:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802596c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025970:	122d      	asrs	r5, r5, #8
 8025972:	f806 5c06 	strb.w	r5, [r6, #-6]
 8025976:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 802597a:	fb15 f504 	smulbb	r5, r5, r4
 802597e:	fb00 500e 	mla	r0, r0, lr, r5
 8025982:	b280      	uxth	r0, r0
 8025984:	1c45      	adds	r5, r0, #1
 8025986:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802598a:	1200      	asrs	r0, r0, #8
 802598c:	f806 0c05 	strb.w	r0, [r6, #-5]
 8025990:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025992:	4343      	muls	r3, r0
 8025994:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025996:	fb07 3300 	mla	r3, r7, r0, r3
 802599a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802599c:	fb01 3100 	mla	r1, r1, r0, r3
 80259a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80259a2:	fb02 1203 	mla	r2, r2, r3, r1
 80259a6:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 80259aa:	fb11 f104 	smulbb	r1, r1, r4
 80259ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80259b2:	fb02 120e 	mla	r2, r2, lr, r1
 80259b6:	b292      	uxth	r2, r2
 80259b8:	1c53      	adds	r3, r2, #1
 80259ba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80259be:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80259c0:	1212      	asrs	r2, r2, #8
 80259c2:	4498      	add	r8, r3
 80259c4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80259c6:	f806 2c04 	strb.w	r2, [r6, #-4]
 80259ca:	449b      	add	fp, r3
 80259cc:	e64d      	b.n	802566a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 80259ce:	b021      	add	sp, #132	; 0x84
 80259d0:	ecbd 8b08 	vpop	{d8-d11}
 80259d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080259d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80259d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259dc:	b085      	sub	sp, #20
 80259de:	784d      	ldrb	r5, [r1, #1]
 80259e0:	788e      	ldrb	r6, [r1, #2]
 80259e2:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80259e6:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80259ea:	9403      	str	r4, [sp, #12]
 80259ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80259f0:	780c      	ldrb	r4, [r1, #0]
 80259f2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80259f6:	fb07 ce03 	mla	lr, r7, r3, ip
 80259fa:	2f00      	cmp	r7, #0
 80259fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025a00:	eb02 0b0e 	add.w	fp, r2, lr
 8025a04:	db56      	blt.n	8025ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8025a06:	45b9      	cmp	r9, r7
 8025a08:	dd54      	ble.n	8025ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8025a0a:	f1bc 0f00 	cmp.w	ip, #0
 8025a0e:	db4d      	blt.n	8025aac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8025a10:	4563      	cmp	r3, ip
 8025a12:	dd4b      	ble.n	8025aac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8025a14:	f812 200e 	ldrb.w	r2, [r2, lr]
 8025a18:	9200      	str	r2, [sp, #0]
 8025a1a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8025a1e:	9201      	str	r2, [sp, #4]
 8025a20:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8025a24:	9202      	str	r2, [sp, #8]
 8025a26:	f11c 0201 	adds.w	r2, ip, #1
 8025a2a:	d44a      	bmi.n	8025ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8025a2c:	4293      	cmp	r3, r2
 8025a2e:	dd48      	ble.n	8025ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8025a30:	2800      	cmp	r0, #0
 8025a32:	d046      	beq.n	8025ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8025a34:	f89b e003 	ldrb.w	lr, [fp, #3]
 8025a38:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8025a3c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8025a40:	3701      	adds	r7, #1
 8025a42:	d446      	bmi.n	8025ad2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8025a44:	45b9      	cmp	r9, r7
 8025a46:	dd44      	ble.n	8025ad2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8025a48:	9a03      	ldr	r2, [sp, #12]
 8025a4a:	2a00      	cmp	r2, #0
 8025a4c:	d045      	beq.n	8025ada <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8025a4e:	f1bc 0f00 	cmp.w	ip, #0
 8025a52:	db3a      	blt.n	8025aca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8025a54:	4563      	cmp	r3, ip
 8025a56:	dd38      	ble.n	8025aca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8025a58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8025a5c:	f04f 0903 	mov.w	r9, #3
 8025a60:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8025a64:	fb03 b209 	mla	r2, r3, r9, fp
 8025a68:	fb03 b909 	mla	r9, r3, r9, fp
 8025a6c:	7852      	ldrb	r2, [r2, #1]
 8025a6e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8025a72:	f11c 0c01 	adds.w	ip, ip, #1
 8025a76:	d40d      	bmi.n	8025a94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8025a78:	4563      	cmp	r3, ip
 8025a7a:	dd0b      	ble.n	8025a94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8025a7c:	b160      	cbz	r0, 8025a98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8025a7e:	2603      	movs	r6, #3
 8025a80:	fb13 6406 	smlabb	r4, r3, r6, r6
 8025a84:	fb03 b506 	mla	r5, r3, r6, fp
 8025a88:	fb03 b306 	mla	r3, r3, r6, fp
 8025a8c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8025a90:	792d      	ldrb	r5, [r5, #4]
 8025a92:	795e      	ldrb	r6, [r3, #5]
 8025a94:	280f      	cmp	r0, #15
 8025a96:	d802      	bhi.n	8025a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8025a98:	9b03      	ldr	r3, [sp, #12]
 8025a9a:	2b0f      	cmp	r3, #15
 8025a9c:	d922      	bls.n	8025ae4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8025a9e:	4b2f      	ldr	r3, [pc, #188]	; (8025b5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8025aa0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025aa4:	4a2e      	ldr	r2, [pc, #184]	; (8025b60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8025aa6:	482f      	ldr	r0, [pc, #188]	; (8025b64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8025aa8:	f003 ff96 	bl	80299d8 <__assert_func>
 8025aac:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8025ab0:	9400      	str	r4, [sp, #0]
 8025ab2:	e7b8      	b.n	8025a26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8025ab4:	46b2      	mov	sl, r6
 8025ab6:	46a8      	mov	r8, r5
 8025ab8:	46a6      	mov	lr, r4
 8025aba:	9400      	str	r4, [sp, #0]
 8025abc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8025ac0:	e7be      	b.n	8025a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8025ac2:	46b2      	mov	sl, r6
 8025ac4:	46a8      	mov	r8, r5
 8025ac6:	46a6      	mov	lr, r4
 8025ac8:	e7ba      	b.n	8025a40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8025aca:	46b1      	mov	r9, r6
 8025acc:	462a      	mov	r2, r5
 8025ace:	4627      	mov	r7, r4
 8025ad0:	e7cf      	b.n	8025a72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8025ad2:	46b1      	mov	r9, r6
 8025ad4:	462a      	mov	r2, r5
 8025ad6:	4627      	mov	r7, r4
 8025ad8:	e7dc      	b.n	8025a94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8025ada:	280f      	cmp	r0, #15
 8025adc:	d8df      	bhi.n	8025a9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8025ade:	46b1      	mov	r9, r6
 8025ae0:	462a      	mov	r2, r5
 8025ae2:	4627      	mov	r7, r4
 8025ae4:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8025ae8:	b280      	uxth	r0, r0
 8025aea:	fb00 f30b 	mul.w	r3, r0, fp
 8025aee:	0100      	lsls	r0, r0, #4
 8025af0:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8025af4:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8025af8:	1ac0      	subs	r0, r0, r3
 8025afa:	fa1f fb8b 	uxth.w	fp, fp
 8025afe:	b280      	uxth	r0, r0
 8025b00:	ebac 0c0b 	sub.w	ip, ip, fp
 8025b04:	9003      	str	r0, [sp, #12]
 8025b06:	fa1f fc8c 	uxth.w	ip, ip
 8025b0a:	fb00 fe0e 	mul.w	lr, r0, lr
 8025b0e:	9800      	ldr	r0, [sp, #0]
 8025b10:	fb0c ee00 	mla	lr, ip, r0, lr
 8025b14:	9803      	ldr	r0, [sp, #12]
 8025b16:	fb00 f808 	mul.w	r8, r0, r8
 8025b1a:	9801      	ldr	r0, [sp, #4]
 8025b1c:	fb0b ee07 	mla	lr, fp, r7, lr
 8025b20:	fb0c 8800 	mla	r8, ip, r0, r8
 8025b24:	fb03 ee04 	mla	lr, r3, r4, lr
 8025b28:	fb0b 8202 	mla	r2, fp, r2, r8
 8025b2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025b30:	fb03 2505 	mla	r5, r3, r5, r2
 8025b34:	9a03      	ldr	r2, [sp, #12]
 8025b36:	f881 e000 	strb.w	lr, [r1]
 8025b3a:	fb02 f00a 	mul.w	r0, r2, sl
 8025b3e:	9a02      	ldr	r2, [sp, #8]
 8025b40:	122d      	asrs	r5, r5, #8
 8025b42:	fb0c 0c02 	mla	ip, ip, r2, r0
 8025b46:	704d      	strb	r5, [r1, #1]
 8025b48:	fb0b c909 	mla	r9, fp, r9, ip
 8025b4c:	fb03 9606 	mla	r6, r3, r6, r9
 8025b50:	1236      	asrs	r6, r6, #8
 8025b52:	708e      	strb	r6, [r1, #2]
 8025b54:	b005      	add	sp, #20
 8025b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b5a:	bf00      	nop
 8025b5c:	0802efeb 	.word	0x0802efeb
 8025b60:	0802f4e2 	.word	0x0802f4e2
 8025b64:	0802f0b4 	.word	0x0802f0b4

08025b68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b6c:	ed2d 8b0a 	vpush	{d8-d12}
 8025b70:	b09d      	sub	sp, #116	; 0x74
 8025b72:	eeb0 aa40 	vmov.f32	s20, s0
 8025b76:	eef0 9a60 	vmov.f32	s19, s1
 8025b7a:	9306      	str	r3, [sp, #24]
 8025b7c:	eeb0 9a41 	vmov.f32	s18, s2
 8025b80:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8025b84:	eeb0 8a62 	vmov.f32	s16, s5
 8025b88:	901b      	str	r0, [sp, #108]	; 0x6c
 8025b8a:	eef0 8a43 	vmov.f32	s17, s6
 8025b8e:	9307      	str	r3, [sp, #28]
 8025b90:	eeb0 ca44 	vmov.f32	s24, s8
 8025b94:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8025b98:	eef0 ba64 	vmov.f32	s23, s9
 8025b9c:	eeb0 ba45 	vmov.f32	s22, s10
 8025ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ba2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8025ba6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8025baa:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025bac:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8025bb0:	6850      	ldr	r0, [r2, #4]
 8025bb2:	6812      	ldr	r2, [r2, #0]
 8025bb4:	fb00 1303 	mla	r3, r0, r3, r1
 8025bb8:	9907      	ldr	r1, [sp, #28]
 8025bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025bbe:	18d3      	adds	r3, r2, r3
 8025bc0:	2203      	movs	r2, #3
 8025bc2:	9308      	str	r3, [sp, #32]
 8025bc4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8025bc6:	681b      	ldr	r3, [r3, #0]
 8025bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8025bca:	f06f 0304 	mvn.w	r3, #4
 8025bce:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8025bd2:	fb11 3302 	smlabb	r3, r1, r2, r3
 8025bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	dc03      	bgt.n	8025be6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8025bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	f340 8193 	ble.w	8025f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8025be6:	9b06      	ldr	r3, [sp, #24]
 8025be8:	2b00      	cmp	r3, #0
 8025bea:	f340 80d0 	ble.w	8025d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8025bee:	1432      	asrs	r2, r6, #16
 8025bf0:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025bf4:	d42f      	bmi.n	8025c56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8025bf6:	1c51      	adds	r1, r2, #1
 8025bf8:	9807      	ldr	r0, [sp, #28]
 8025bfa:	4281      	cmp	r1, r0
 8025bfc:	da2e      	bge.n	8025c5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	db2c      	blt.n	8025c5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025c02:	1c59      	adds	r1, r3, #1
 8025c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025c06:	4288      	cmp	r0, r1
 8025c08:	dd28      	ble.n	8025c5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8025c0a:	9b06      	ldr	r3, [sp, #24]
 8025c0c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8025c0e:	3b01      	subs	r3, #1
 8025c10:	fb02 6203 	mla	r2, r2, r3, r6
 8025c14:	1412      	asrs	r2, r2, #16
 8025c16:	d42c      	bmi.n	8025c72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8025c18:	3201      	adds	r2, #1
 8025c1a:	9907      	ldr	r1, [sp, #28]
 8025c1c:	4291      	cmp	r1, r2
 8025c1e:	dd28      	ble.n	8025c72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8025c20:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8025c22:	fb02 5303 	mla	r3, r2, r3, r5
 8025c26:	141b      	asrs	r3, r3, #16
 8025c28:	d423      	bmi.n	8025c72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8025c2a:	3301      	adds	r3, #1
 8025c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c2e:	429a      	cmp	r2, r3
 8025c30:	dd1f      	ble.n	8025c72 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8025c32:	9b08      	ldr	r3, [sp, #32]
 8025c34:	f8dd e018 	ldr.w	lr, [sp, #24]
 8025c38:	f103 0c03 	add.w	ip, r3, #3
 8025c3c:	f1be 0f00 	cmp.w	lr, #0
 8025c40:	f300 80fa 	bgt.w	8025e38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8025c44:	9b06      	ldr	r3, [sp, #24]
 8025c46:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c4a:	9b08      	ldr	r3, [sp, #32]
 8025c4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025c50:	4423      	add	r3, r4
 8025c52:	9308      	str	r3, [sp, #32]
 8025c54:	e09d      	b.n	8025d92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8025c56:	1c51      	adds	r1, r2, #1
 8025c58:	f040 808e 	bne.w	8025d78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8025c5c:	9907      	ldr	r1, [sp, #28]
 8025c5e:	428a      	cmp	r2, r1
 8025c60:	f280 808a 	bge.w	8025d78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8025c64:	1c5f      	adds	r7, r3, #1
 8025c66:	f2c0 8087 	blt.w	8025d78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8025c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c6c:	4293      	cmp	r3, r2
 8025c6e:	f280 8083 	bge.w	8025d78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8025c72:	9f06      	ldr	r7, [sp, #24]
 8025c74:	f8dd a020 	ldr.w	sl, [sp, #32]
 8025c78:	2f00      	cmp	r7, #0
 8025c7a:	dde3      	ble.n	8025c44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8025c7c:	1432      	asrs	r2, r6, #16
 8025c7e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025c82:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025c86:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8025c8a:	f100 80bf 	bmi.w	8025e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8025c8e:	1c50      	adds	r0, r2, #1
 8025c90:	9c07      	ldr	r4, [sp, #28]
 8025c92:	4284      	cmp	r4, r0
 8025c94:	f340 80bc 	ble.w	8025e10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8025c98:	2b00      	cmp	r3, #0
 8025c9a:	f2c0 80b9 	blt.w	8025e10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8025c9e:	1c58      	adds	r0, r3, #1
 8025ca0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025ca2:	4284      	cmp	r4, r0
 8025ca4:	f340 80b4 	ble.w	8025e10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8025ca8:	9807      	ldr	r0, [sp, #28]
 8025caa:	fb00 2303 	mla	r3, r0, r3, r2
 8025cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025cb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025cb6:	441a      	add	r2, r3
 8025cb8:	f810 c003 	ldrb.w	ip, [r0, r3]
 8025cbc:	7953      	ldrb	r3, [r2, #5]
 8025cbe:	7850      	ldrb	r0, [r2, #1]
 8025cc0:	f892 e002 	ldrb.w	lr, [r2, #2]
 8025cc4:	f892 9003 	ldrb.w	r9, [r2, #3]
 8025cc8:	f892 8004 	ldrb.w	r8, [r2, #4]
 8025ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8025cce:	f1bb 0f00 	cmp.w	fp, #0
 8025cd2:	d00f      	beq.n	8025cf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8025cd4:	3205      	adds	r2, #5
 8025cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025cd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025cda:	18d3      	adds	r3, r2, r3
 8025cdc:	5d12      	ldrb	r2, [r2, r4]
 8025cde:	920f      	str	r2, [sp, #60]	; 0x3c
 8025ce0:	785a      	ldrb	r2, [r3, #1]
 8025ce2:	9211      	str	r2, [sp, #68]	; 0x44
 8025ce4:	789a      	ldrb	r2, [r3, #2]
 8025ce6:	9213      	str	r2, [sp, #76]	; 0x4c
 8025ce8:	78da      	ldrb	r2, [r3, #3]
 8025cea:	9210      	str	r2, [sp, #64]	; 0x40
 8025cec:	791a      	ldrb	r2, [r3, #4]
 8025cee:	795b      	ldrb	r3, [r3, #5]
 8025cf0:	9212      	str	r2, [sp, #72]	; 0x48
 8025cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8025cf4:	b28b      	uxth	r3, r1
 8025cf6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025cf8:	fa1f f28b 	uxth.w	r2, fp
 8025cfc:	fb03 fb02 	mul.w	fp, r3, r2
 8025d00:	011b      	lsls	r3, r3, #4
 8025d02:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8025d06:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8025d0a:	eba3 030b 	sub.w	r3, r3, fp
 8025d0e:	b292      	uxth	r2, r2
 8025d10:	b29b      	uxth	r3, r3
 8025d12:	1a89      	subs	r1, r1, r2
 8025d14:	fb03 f808 	mul.w	r8, r3, r8
 8025d18:	b289      	uxth	r1, r1
 8025d1a:	fb03 f909 	mul.w	r9, r3, r9
 8025d1e:	fb01 8800 	mla	r8, r1, r0, r8
 8025d22:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025d24:	fb01 990c 	mla	r9, r1, ip, r9
 8025d28:	fb02 8800 	mla	r8, r2, r0, r8
 8025d2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025d2e:	fb02 9904 	mla	r9, r2, r4, r9
 8025d32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025d34:	fb0b 8800 	mla	r8, fp, r0, r8
 8025d38:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025d3a:	fb0b 9904 	mla	r9, fp, r4, r9
 8025d3e:	4343      	muls	r3, r0
 8025d40:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025d44:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025d48:	fb01 330e 	mla	r3, r1, lr, r3
 8025d4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8025d4e:	f88a 9000 	strb.w	r9, [sl]
 8025d52:	fb02 3201 	mla	r2, r2, r1, r3
 8025d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025d58:	f88a 8001 	strb.w	r8, [sl, #1]
 8025d5c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8025d60:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8025d64:	f88a b002 	strb.w	fp, [sl, #2]
 8025d68:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025d6a:	f10a 0a03 	add.w	sl, sl, #3
 8025d6e:	3f01      	subs	r7, #1
 8025d70:	441e      	add	r6, r3
 8025d72:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025d74:	441d      	add	r5, r3
 8025d76:	e77f      	b.n	8025c78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8025d78:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025d7a:	441e      	add	r6, r3
 8025d7c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025d7e:	441d      	add	r5, r3
 8025d80:	9b06      	ldr	r3, [sp, #24]
 8025d82:	3b01      	subs	r3, #1
 8025d84:	9306      	str	r3, [sp, #24]
 8025d86:	9b08      	ldr	r3, [sp, #32]
 8025d88:	3303      	adds	r3, #3
 8025d8a:	9308      	str	r3, [sp, #32]
 8025d8c:	e72b      	b.n	8025be6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8025d8e:	f47f af3c 	bne.w	8025c0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8025d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025d94:	2b00      	cmp	r3, #0
 8025d96:	f340 80b9 	ble.w	8025f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8025d9a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025d9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025da0:	ee79 9aab 	vadd.f32	s19, s19, s23
 8025da4:	eef0 6a48 	vmov.f32	s13, s16
 8025da8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025dac:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025db0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025db4:	ee16 6a90 	vmov	r6, s13
 8025db8:	eef0 6a68 	vmov.f32	s13, s17
 8025dbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025dc0:	ee16 5a90 	vmov	r5, s13
 8025dc4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025dc8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025dcc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025dd0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025dd4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025dd8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025ddc:	ee18 2a10 	vmov	r2, s16
 8025de0:	eeb0 8a47 	vmov.f32	s16, s14
 8025de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025de8:	ee18 2a90 	vmov	r2, s17
 8025dec:	9333      	str	r3, [sp, #204]	; 0xcc
 8025dee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025df0:	eef0 8a67 	vmov.f32	s17, s15
 8025df4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025df8:	9334      	str	r3, [sp, #208]	; 0xd0
 8025dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025dfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025dfe:	3b01      	subs	r3, #1
 8025e00:	930c      	str	r3, [sp, #48]	; 0x30
 8025e02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025e04:	bf08      	it	eq
 8025e06:	4613      	moveq	r3, r2
 8025e08:	9306      	str	r3, [sp, #24]
 8025e0a:	e6e5      	b.n	8025bd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8025e0c:	1c54      	adds	r4, r2, #1
 8025e0e:	d1ab      	bne.n	8025d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8025e10:	9807      	ldr	r0, [sp, #28]
 8025e12:	4282      	cmp	r2, r0
 8025e14:	daa8      	bge.n	8025d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8025e16:	1c58      	adds	r0, r3, #1
 8025e18:	dba6      	blt.n	8025d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8025e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025e1c:	4298      	cmp	r0, r3
 8025e1e:	dda3      	ble.n	8025d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8025e20:	9000      	str	r0, [sp, #0]
 8025e22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025e24:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8025e28:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8025e2c:	9b07      	ldr	r3, [sp, #28]
 8025e2e:	4651      	mov	r1, sl
 8025e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025e32:	f7ff fdd1 	bl	80259d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8025e36:	e797      	b.n	8025d68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8025e38:	1431      	asrs	r1, r6, #16
 8025e3a:	9c07      	ldr	r4, [sp, #28]
 8025e3c:	1428      	asrs	r0, r5, #16
 8025e3e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8025e42:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8025e46:	fb04 1000 	mla	r0, r4, r0, r1
 8025e4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025e4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025e52:	4401      	add	r1, r0
 8025e54:	5c20      	ldrb	r0, [r4, r0]
 8025e56:	f891 8002 	ldrb.w	r8, [r1, #2]
 8025e5a:	900e      	str	r0, [sp, #56]	; 0x38
 8025e5c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8025e60:	7848      	ldrb	r0, [r1, #1]
 8025e62:	f891 9004 	ldrb.w	r9, [r1, #4]
 8025e66:	f891 b005 	ldrb.w	fp, [r1, #5]
 8025e6a:	b172      	cbz	r2, 8025e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8025e6c:	3105      	adds	r1, #5
 8025e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025e70:	190f      	adds	r7, r1, r4
 8025e72:	5d09      	ldrb	r1, [r1, r4]
 8025e74:	9115      	str	r1, [sp, #84]	; 0x54
 8025e76:	7879      	ldrb	r1, [r7, #1]
 8025e78:	9117      	str	r1, [sp, #92]	; 0x5c
 8025e7a:	78b9      	ldrb	r1, [r7, #2]
 8025e7c:	9119      	str	r1, [sp, #100]	; 0x64
 8025e7e:	78f9      	ldrb	r1, [r7, #3]
 8025e80:	9116      	str	r1, [sp, #88]	; 0x58
 8025e82:	7939      	ldrb	r1, [r7, #4]
 8025e84:	9118      	str	r1, [sp, #96]	; 0x60
 8025e86:	7979      	ldrb	r1, [r7, #5]
 8025e88:	911a      	str	r1, [sp, #104]	; 0x68
 8025e8a:	b29b      	uxth	r3, r3
 8025e8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e8e:	b292      	uxth	r2, r2
 8025e90:	f10c 0c03 	add.w	ip, ip, #3
 8025e94:	f10e 3eff 	add.w	lr, lr, #4294967295
 8025e98:	fb03 f102 	mul.w	r1, r3, r2
 8025e9c:	011b      	lsls	r3, r3, #4
 8025e9e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8025ea2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8025ea6:	1a5b      	subs	r3, r3, r1
 8025ea8:	b292      	uxth	r2, r2
 8025eaa:	b29b      	uxth	r3, r3
 8025eac:	1abf      	subs	r7, r7, r2
 8025eae:	fb03 f909 	mul.w	r9, r3, r9
 8025eb2:	b2bf      	uxth	r7, r7
 8025eb4:	fb03 fa0a 	mul.w	sl, r3, sl
 8025eb8:	fb03 f30b 	mul.w	r3, r3, fp
 8025ebc:	fb07 9900 	mla	r9, r7, r0, r9
 8025ec0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025ec2:	fb07 aa04 	mla	sl, r7, r4, sl
 8025ec6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025ec8:	fb02 9900 	mla	r9, r2, r0, r9
 8025ecc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8025ece:	fb07 3308 	mla	r3, r7, r8, r3
 8025ed2:	fb01 9900 	mla	r9, r1, r0, r9
 8025ed6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025ed8:	fb02 aa04 	mla	sl, r2, r4, sl
 8025edc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ede:	fb02 3200 	mla	r2, r2, r0, r3
 8025ee2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025ee4:	fb01 aa04 	mla	sl, r1, r4, sl
 8025ee8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8025eec:	fb01 2103 	mla	r1, r1, r3, r2
 8025ef0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025ef2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8025ef6:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8025efa:	1209      	asrs	r1, r1, #8
 8025efc:	441e      	add	r6, r3
 8025efe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025f00:	f80c ac06 	strb.w	sl, [ip, #-6]
 8025f04:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8025f08:	441d      	add	r5, r3
 8025f0a:	e697      	b.n	8025c3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8025f0c:	b01d      	add	sp, #116	; 0x74
 8025f0e:	ecbd 8b0a 	vpop	{d8-d12}
 8025f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025f18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8025f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f1c:	b085      	sub	sp, #20
 8025f1e:	7888      	ldrb	r0, [r1, #2]
 8025f20:	4691      	mov	r9, r2
 8025f22:	9000      	str	r0, [sp, #0]
 8025f24:	7848      	ldrb	r0, [r1, #1]
 8025f26:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8025f2a:	9001      	str	r0, [sp, #4]
 8025f2c:	7808      	ldrb	r0, [r1, #0]
 8025f2e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8025f32:	9002      	str	r0, [sp, #8]
 8025f34:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025f38:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8025f3c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8025f40:	fb04 c603 	mla	r6, r4, r3, ip
 8025f44:	2c00      	cmp	r4, #0
 8025f46:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8025f4a:	9a00      	ldr	r2, [sp, #0]
 8025f4c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8025f50:	9a01      	ldr	r2, [sp, #4]
 8025f52:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8025f56:	db3a      	blt.n	8025fce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8025f58:	45a0      	cmp	r8, r4
 8025f5a:	dd38      	ble.n	8025fce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8025f5c:	f1bc 0f00 	cmp.w	ip, #0
 8025f60:	db33      	blt.n	8025fca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8025f62:	4563      	cmp	r3, ip
 8025f64:	dd31      	ble.n	8025fca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8025f66:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8025f6a:	f11c 0601 	adds.w	r6, ip, #1
 8025f6e:	d431      	bmi.n	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8025f70:	42b3      	cmp	r3, r6
 8025f72:	dd2f      	ble.n	8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8025f74:	b375      	cbz	r5, 8025fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8025f76:	f8de 6004 	ldr.w	r6, [lr, #4]
 8025f7a:	3401      	adds	r4, #1
 8025f7c:	d42e      	bmi.n	8025fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8025f7e:	45a0      	cmp	r8, r4
 8025f80:	dd2c      	ble.n	8025fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8025f82:	b35f      	cbz	r7, 8025fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8025f84:	f1bc 0f00 	cmp.w	ip, #0
 8025f88:	db26      	blt.n	8025fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8025f8a:	4563      	cmp	r3, ip
 8025f8c:	dd24      	ble.n	8025fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8025f8e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8025f92:	f11c 0c01 	adds.w	ip, ip, #1
 8025f96:	d405      	bmi.n	8025fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025f98:	4563      	cmp	r3, ip
 8025f9a:	dd03      	ble.n	8025fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025f9c:	b115      	cbz	r5, 8025fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025f9e:	3301      	adds	r3, #1
 8025fa0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8025fa4:	2d0f      	cmp	r5, #15
 8025fa6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025faa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025fae:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025fb2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8025fb6:	d801      	bhi.n	8025fbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8025fb8:	2f0f      	cmp	r7, #15
 8025fba:	d911      	bls.n	8025fe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8025fbc:	4b80      	ldr	r3, [pc, #512]	; (80261c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8025fbe:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025fc2:	4a80      	ldr	r2, [pc, #512]	; (80261c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8025fc4:	4880      	ldr	r0, [pc, #512]	; (80261c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8025fc6:	f003 fd07 	bl	80299d8 <__assert_func>
 8025fca:	4602      	mov	r2, r0
 8025fcc:	e7cd      	b.n	8025f6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8025fce:	4606      	mov	r6, r0
 8025fd0:	4602      	mov	r2, r0
 8025fd2:	e7d2      	b.n	8025f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8025fd4:	4606      	mov	r6, r0
 8025fd6:	e7d0      	b.n	8025f7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8025fd8:	4604      	mov	r4, r0
 8025fda:	e7da      	b.n	8025f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8025fdc:	4604      	mov	r4, r0
 8025fde:	e7e1      	b.n	8025fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8025fe0:	b2ab      	uxth	r3, r5
 8025fe2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025fe6:	b2bf      	uxth	r7, r7
 8025fe8:	fb03 fe07 	mul.w	lr, r3, r7
 8025fec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8025ff0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025ff4:	eba3 0c0e 	sub.w	ip, r3, lr
 8025ff8:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025ffc:	b2bf      	uxth	r7, r7
 8025ffe:	fa1f fc8c 	uxth.w	ip, ip
 8026002:	eba5 0507 	sub.w	r5, r5, r7
 8026006:	fb0c f30a 	mul.w	r3, ip, sl
 802600a:	b2ad      	uxth	r5, r5
 802600c:	fb05 330b 	mla	r3, r5, fp, r3
 8026010:	fb07 3309 	mla	r3, r7, r9, r3
 8026014:	fb0e 3308 	mla	r3, lr, r8, r3
 8026018:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802601c:	9303      	str	r3, [sp, #12]
 802601e:	d018      	beq.n	8026052 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8026020:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026024:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026028:	fb0b f303 	mul.w	r3, fp, r3
 802602c:	fb0b fb02 	mul.w	fp, fp, r2
 8026030:	0a1a      	lsrs	r2, r3, #8
 8026032:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8026036:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802603a:	441a      	add	r2, r3
 802603c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8026040:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8026044:	0a12      	lsrs	r2, r2, #8
 8026046:	0a1b      	lsrs	r3, r3, #8
 8026048:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802604c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026050:	431a      	orrs	r2, r3
 8026052:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026056:	d019      	beq.n	802608c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8026058:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802605c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026060:	fb0a fb0b 	mul.w	fp, sl, fp
 8026064:	fb0a fa06 	mul.w	sl, sl, r6
 8026068:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802606c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026070:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8026074:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026078:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802607c:	445e      	add	r6, fp
 802607e:	0a1b      	lsrs	r3, r3, #8
 8026080:	0a36      	lsrs	r6, r6, #8
 8026082:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026086:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802608a:	431e      	orrs	r6, r3
 802608c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026090:	d019      	beq.n	80260c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8026092:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026096:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802609a:	fb09 fa0a 	mul.w	sl, r9, sl
 802609e:	fb09 f904 	mul.w	r9, r9, r4
 80260a2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80260a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80260aa:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80260ae:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80260b2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80260b6:	4454      	add	r4, sl
 80260b8:	0a1b      	lsrs	r3, r3, #8
 80260ba:	0a24      	lsrs	r4, r4, #8
 80260bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260c0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80260c4:	431c      	orrs	r4, r3
 80260c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80260ca:	d019      	beq.n	8026100 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80260cc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 80260d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80260d4:	fb08 f909 	mul.w	r9, r8, r9
 80260d8:	fb08 f800 	mul.w	r8, r8, r0
 80260dc:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80260e0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80260e4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 80260e8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80260ec:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80260f0:	4448      	add	r0, r9
 80260f2:	0a1b      	lsrs	r3, r3, #8
 80260f4:	0a00      	lsrs	r0, r0, #8
 80260f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80260fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80260fe:	4318      	orrs	r0, r3
 8026100:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026104:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026108:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802610c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026110:	fb0c f808 	mul.w	r8, ip, r8
 8026114:	fb0c f606 	mul.w	r6, ip, r6
 8026118:	fb05 8803 	mla	r8, r5, r3, r8
 802611c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8026120:	fb05 6202 	mla	r2, r5, r2, r6
 8026124:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026128:	fb07 8803 	mla	r8, r7, r3, r8
 802612c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026130:	fb07 2704 	mla	r7, r7, r4, r2
 8026134:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026138:	fb0e 8303 	mla	r3, lr, r3, r8
 802613c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8026140:	fb0e 7e00 	mla	lr, lr, r0, r7
 8026144:	9803      	ldr	r0, [sp, #12]
 8026146:	b292      	uxth	r2, r2
 8026148:	9c02      	ldr	r4, [sp, #8]
 802614a:	0a1b      	lsrs	r3, r3, #8
 802614c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026150:	4350      	muls	r0, r2
 8026152:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026156:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802615a:	ea43 0e0e 	orr.w	lr, r3, lr
 802615e:	1c43      	adds	r3, r0, #1
 8026160:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026164:	fa5f f08e 	uxtb.w	r0, lr
 8026168:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802616c:	b2db      	uxtb	r3, r3
 802616e:	fb14 f403 	smulbb	r4, r4, r3
 8026172:	fb00 4002 	mla	r0, r0, r2, r4
 8026176:	b280      	uxth	r0, r0
 8026178:	1c44      	adds	r4, r0, #1
 802617a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802617e:	9c01      	ldr	r4, [sp, #4]
 8026180:	fb14 f403 	smulbb	r4, r4, r3
 8026184:	1200      	asrs	r0, r0, #8
 8026186:	7008      	strb	r0, [r1, #0]
 8026188:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802618c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026190:	fb00 4002 	mla	r0, r0, r2, r4
 8026194:	b280      	uxth	r0, r0
 8026196:	1c44      	adds	r4, r0, #1
 8026198:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802619c:	1200      	asrs	r0, r0, #8
 802619e:	7048      	strb	r0, [r1, #1]
 80261a0:	9800      	ldr	r0, [sp, #0]
 80261a2:	fb10 f303 	smulbb	r3, r0, r3
 80261a6:	fb0e 3202 	mla	r2, lr, r2, r3
 80261aa:	b292      	uxth	r2, r2
 80261ac:	f102 0e01 	add.w	lr, r2, #1
 80261b0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80261b4:	1212      	asrs	r2, r2, #8
 80261b6:	708a      	strb	r2, [r1, #2]
 80261b8:	b005      	add	sp, #20
 80261ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261be:	bf00      	nop
 80261c0:	0802efeb 	.word	0x0802efeb
 80261c4:	0802f4e2 	.word	0x0802f4e2
 80261c8:	0802f0b4 	.word	0x0802f0b4

080261cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80261cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261d0:	ed2d 8b08 	vpush	{d8-d11}
 80261d4:	b099      	sub	sp, #100	; 0x64
 80261d6:	eeb0 aa40 	vmov.f32	s20, s0
 80261da:	eef0 9a60 	vmov.f32	s19, s1
 80261de:	9306      	str	r3, [sp, #24]
 80261e0:	eeb0 9a41 	vmov.f32	s18, s2
 80261e4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 80261e8:	eeb0 8a62 	vmov.f32	s16, s5
 80261ec:	9216      	str	r2, [sp, #88]	; 0x58
 80261ee:	eef0 8a43 	vmov.f32	s17, s6
 80261f2:	9307      	str	r3, [sp, #28]
 80261f4:	eef0 ba44 	vmov.f32	s23, s8
 80261f8:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 80261fc:	eeb0 ba64 	vmov.f32	s22, s9
 8026200:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8026202:	eef0 aa45 	vmov.f32	s21, s10
 8026206:	9310      	str	r3, [sp, #64]	; 0x40
 8026208:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802620c:	9017      	str	r0, [sp, #92]	; 0x5c
 802620e:	9112      	str	r1, [sp, #72]	; 0x48
 8026210:	6850      	ldr	r0, [r2, #4]
 8026212:	9315      	str	r3, [sp, #84]	; 0x54
 8026214:	6812      	ldr	r2, [r2, #0]
 8026216:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8026218:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802621c:	fb00 1303 	mla	r3, r0, r3, r1
 8026220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026224:	18d3      	adds	r3, r2, r3
 8026226:	930a      	str	r3, [sp, #40]	; 0x28
 8026228:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802622a:	681b      	ldr	r3, [r3, #0]
 802622c:	9311      	str	r3, [sp, #68]	; 0x44
 802622e:	9b07      	ldr	r3, [sp, #28]
 8026230:	009b      	lsls	r3, r3, #2
 8026232:	930e      	str	r3, [sp, #56]	; 0x38
 8026234:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026236:	2b00      	cmp	r3, #0
 8026238:	dc03      	bgt.n	8026242 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802623a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802623c:	2b00      	cmp	r3, #0
 802623e:	f340 833b 	ble.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8026242:	9b06      	ldr	r3, [sp, #24]
 8026244:	2b00      	cmp	r3, #0
 8026246:	f340 8197 	ble.w	8026578 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802624a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802624c:	1423      	asrs	r3, r4, #16
 802624e:	1412      	asrs	r2, r2, #16
 8026250:	d432      	bmi.n	80262b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026252:	1c51      	adds	r1, r2, #1
 8026254:	9807      	ldr	r0, [sp, #28]
 8026256:	4288      	cmp	r0, r1
 8026258:	dd31      	ble.n	80262be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802625a:	2b00      	cmp	r3, #0
 802625c:	db2f      	blt.n	80262be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802625e:	1c59      	adds	r1, r3, #1
 8026260:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026262:	4288      	cmp	r0, r1
 8026264:	dd2b      	ble.n	80262be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8026266:	9b06      	ldr	r3, [sp, #24]
 8026268:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802626a:	3b01      	subs	r3, #1
 802626c:	992b      	ldr	r1, [sp, #172]	; 0xac
 802626e:	fb02 1203 	mla	r2, r2, r3, r1
 8026272:	1412      	asrs	r2, r2, #16
 8026274:	d42e      	bmi.n	80262d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026276:	3201      	adds	r2, #1
 8026278:	9907      	ldr	r1, [sp, #28]
 802627a:	4291      	cmp	r1, r2
 802627c:	dd2a      	ble.n	80262d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802627e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8026280:	fb02 4303 	mla	r3, r2, r3, r4
 8026284:	141b      	asrs	r3, r3, #16
 8026286:	d425      	bmi.n	80262d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026288:	3301      	adds	r3, #1
 802628a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802628c:	429a      	cmp	r2, r3
 802628e:	dd21      	ble.n	80262d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8026290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026292:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8026296:	f103 0e03 	add.w	lr, r3, #3
 802629a:	9b06      	ldr	r3, [sp, #24]
 802629c:	9313      	str	r3, [sp, #76]	; 0x4c
 802629e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	f300 81d2 	bgt.w	802664a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80262a6:	9b06      	ldr	r3, [sp, #24]
 80262a8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80262ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80262b2:	4423      	add	r3, r4
 80262b4:	930a      	str	r3, [sp, #40]	; 0x28
 80262b6:	e161      	b.n	802657c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80262b8:	1c51      	adds	r1, r2, #1
 80262ba:	f040 8150 	bne.w	802655e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80262be:	9907      	ldr	r1, [sp, #28]
 80262c0:	428a      	cmp	r2, r1
 80262c2:	f280 814c 	bge.w	802655e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80262c6:	1c5a      	adds	r2, r3, #1
 80262c8:	f2c0 8149 	blt.w	802655e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80262cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80262ce:	4293      	cmp	r3, r2
 80262d0:	f280 8145 	bge.w	802655e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80262d4:	9b06      	ldr	r3, [sp, #24]
 80262d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80262d8:	9314      	str	r3, [sp, #80]	; 0x50
 80262da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80262de:	9313      	str	r3, [sp, #76]	; 0x4c
 80262e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	dddf      	ble.n	80262a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80262e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80262e8:	1423      	asrs	r3, r4, #16
 80262ea:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80262ee:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80262f2:	1412      	asrs	r2, r2, #16
 80262f4:	f100 8190 	bmi.w	8026618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80262f8:	1c55      	adds	r5, r2, #1
 80262fa:	9f07      	ldr	r7, [sp, #28]
 80262fc:	42af      	cmp	r7, r5
 80262fe:	f340 818d 	ble.w	802661c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8026302:	2b00      	cmp	r3, #0
 8026304:	f2c0 818a 	blt.w	802661c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8026308:	1c5d      	adds	r5, r3, #1
 802630a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802630c:	42af      	cmp	r7, r5
 802630e:	f340 8185 	ble.w	802661c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8026312:	9d07      	ldr	r5, [sp, #28]
 8026314:	fb03 2305 	mla	r3, r3, r5, r2
 8026318:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802631a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802631e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8026322:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026326:	2800      	cmp	r0, #0
 8026328:	f000 8167 	beq.w	80265fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802632c:	686a      	ldr	r2, [r5, #4]
 802632e:	920b      	str	r2, [sp, #44]	; 0x2c
 8026330:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026334:	2900      	cmp	r1, #0
 8026336:	f000 8169 	beq.w	802660c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802633c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802633e:	18aa      	adds	r2, r5, r2
 8026340:	59ed      	ldr	r5, [r5, r7]
 8026342:	6852      	ldr	r2, [r2, #4]
 8026344:	9508      	str	r5, [sp, #32]
 8026346:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802634a:	0e15      	lsrs	r5, r2, #24
 802634c:	920c      	str	r2, [sp, #48]	; 0x30
 802634e:	b280      	uxth	r0, r0
 8026350:	b289      	uxth	r1, r1
 8026352:	fb00 fb01 	mul.w	fp, r0, r1
 8026356:	0100      	lsls	r0, r0, #4
 8026358:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802635c:	eba0 090b 	sub.w	r9, r0, fp
 8026360:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8026364:	b289      	uxth	r1, r1
 8026366:	fa1f f989 	uxth.w	r9, r9
 802636a:	1a52      	subs	r2, r2, r1
 802636c:	fb09 f008 	mul.w	r0, r9, r8
 8026370:	b292      	uxth	r2, r2
 8026372:	fb02 000c 	mla	r0, r2, ip, r0
 8026376:	fb01 000a 	mla	r0, r1, sl, r0
 802637a:	fb0b 0005 	mla	r0, fp, r5, r0
 802637e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026382:	2800      	cmp	r0, #0
 8026384:	f000 80e0 	beq.w	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8026388:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802638c:	d01b      	beq.n	80263c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802638e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026392:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026396:	fb0c fe0e 	mul.w	lr, ip, lr
 802639a:	fb0c fc03 	mul.w	ip, ip, r3
 802639e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80263a2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80263a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263aa:	4473      	add	r3, lr
 80263ac:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80263b0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80263b4:	0a1b      	lsrs	r3, r3, #8
 80263b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263be:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80263c2:	ea43 030e 	orr.w	r3, r3, lr
 80263c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80263ca:	d01e      	beq.n	802640a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80263cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80263ce:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80263d2:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 80263d6:	fb08 fc0c 	mul.w	ip, r8, ip
 80263da:	fb08 f80e 	mul.w	r8, r8, lr
 80263de:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80263e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80263e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263ea:	44e6      	add	lr, ip
 80263ec:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 80263f0:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80263f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026400:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026404:	ea4e 0708 	orr.w	r7, lr, r8
 8026408:	970b      	str	r7, [sp, #44]	; 0x2c
 802640a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802640e:	d01e      	beq.n	802644e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8026410:	9f08      	ldr	r7, [sp, #32]
 8026412:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8026416:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802641a:	fb0a f808 	mul.w	r8, sl, r8
 802641e:	fb0a fa0c 	mul.w	sl, sl, ip
 8026422:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8026426:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802642a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802642e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026432:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026436:	44c6      	add	lr, r8
 8026438:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802643c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026440:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026444:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026448:	ea4e 070a 	orr.w	r7, lr, sl
 802644c:	9708      	str	r7, [sp, #32]
 802644e:	2dff      	cmp	r5, #255	; 0xff
 8026450:	d01d      	beq.n	802648e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8026452:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026454:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8026458:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802645c:	fb05 f808 	mul.w	r8, r5, r8
 8026460:	fb05 f50c 	mul.w	r5, r5, ip
 8026464:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8026468:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802646c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026470:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026474:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026478:	44c6      	add	lr, r8
 802647a:	0a2d      	lsrs	r5, r5, #8
 802647c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026480:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026484:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026488:	ea4e 0505 	orr.w	r5, lr, r5
 802648c:	950c      	str	r5, [sp, #48]	; 0x30
 802648e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026490:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026494:	9f08      	ldr	r7, [sp, #32]
 8026496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802649a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802649e:	fb09 f505 	mul.w	r5, r9, r5
 80264a2:	fb02 550c 	mla	r5, r2, ip, r5
 80264a6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80264aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80264ac:	fb01 550c 	mla	r5, r1, ip, r5
 80264b0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80264b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80264b6:	fb0b 550c 	mla	r5, fp, ip, r5
 80264ba:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80264be:	fb09 f90c 	mul.w	r9, r9, ip
 80264c2:	0a2d      	lsrs	r5, r5, #8
 80264c4:	fb02 9303 	mla	r3, r2, r3, r9
 80264c8:	9a08      	ldr	r2, [sp, #32]
 80264ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80264ce:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80264d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80264d4:	fb01 330e 	mla	r3, r1, lr, r3
 80264d8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80264dc:	fb0b 3b01 	mla	fp, fp, r1, r3
 80264e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80264e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80264e4:	4343      	muls	r3, r0
 80264e6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80264ea:	1c58      	adds	r0, r3, #1
 80264ec:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80264f0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80264f4:	ea45 050b 	orr.w	r5, r5, fp
 80264f8:	7833      	ldrb	r3, [r6, #0]
 80264fa:	b2ea      	uxtb	r2, r5
 80264fc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026500:	fb12 f201 	smulbb	r2, r2, r1
 8026504:	b2c0      	uxtb	r0, r0
 8026506:	fb03 2300 	mla	r3, r3, r0, r2
 802650a:	b29b      	uxth	r3, r3
 802650c:	1c5a      	adds	r2, r3, #1
 802650e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026512:	7872      	ldrb	r2, [r6, #1]
 8026514:	fb12 f200 	smulbb	r2, r2, r0
 8026518:	121b      	asrs	r3, r3, #8
 802651a:	7033      	strb	r3, [r6, #0]
 802651c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8026520:	0c2d      	lsrs	r5, r5, #16
 8026522:	fb03 2301 	mla	r3, r3, r1, r2
 8026526:	b29b      	uxth	r3, r3
 8026528:	1c5a      	adds	r2, r3, #1
 802652a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802652e:	121b      	asrs	r3, r3, #8
 8026530:	7073      	strb	r3, [r6, #1]
 8026532:	78b3      	ldrb	r3, [r6, #2]
 8026534:	fb13 f000 	smulbb	r0, r3, r0
 8026538:	fb05 0501 	mla	r5, r5, r1, r0
 802653c:	b2ad      	uxth	r5, r5
 802653e:	1c6b      	adds	r3, r5, #1
 8026540:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026544:	122d      	asrs	r5, r5, #8
 8026546:	70b5      	strb	r5, [r6, #2]
 8026548:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802654a:	3603      	adds	r6, #3
 802654c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802654e:	4413      	add	r3, r2
 8026550:	932b      	str	r3, [sp, #172]	; 0xac
 8026552:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026554:	441c      	add	r4, r3
 8026556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026558:	3b01      	subs	r3, #1
 802655a:	9314      	str	r3, [sp, #80]	; 0x50
 802655c:	e6c0      	b.n	80262e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802655e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026560:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026562:	4413      	add	r3, r2
 8026564:	932b      	str	r3, [sp, #172]	; 0xac
 8026566:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026568:	441c      	add	r4, r3
 802656a:	9b06      	ldr	r3, [sp, #24]
 802656c:	3b01      	subs	r3, #1
 802656e:	9306      	str	r3, [sp, #24]
 8026570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026572:	3303      	adds	r3, #3
 8026574:	930a      	str	r3, [sp, #40]	; 0x28
 8026576:	e664      	b.n	8026242 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8026578:	f47f ae75 	bne.w	8026266 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 802657c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802657e:	2b00      	cmp	r3, #0
 8026580:	f340 819a 	ble.w	80268b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8026584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026588:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802658a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802658e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026592:	eef0 6a48 	vmov.f32	s13, s16
 8026596:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802659a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802659e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265a2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80265a6:	eef0 6a68 	vmov.f32	s13, s17
 80265aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265ae:	ee16 4a90 	vmov	r4, s13
 80265b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80265b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80265ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80265be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80265c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80265c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80265ca:	ee18 2a10 	vmov	r2, s16
 80265ce:	eeb0 8a47 	vmov.f32	s16, s14
 80265d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80265d6:	ee18 2a90 	vmov	r2, s17
 80265da:	932d      	str	r3, [sp, #180]	; 0xb4
 80265dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80265de:	eef0 8a67 	vmov.f32	s17, s15
 80265e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80265e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80265e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80265ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80265ec:	3b01      	subs	r3, #1
 80265ee:	9312      	str	r3, [sp, #72]	; 0x48
 80265f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80265f2:	bf08      	it	eq
 80265f4:	4613      	moveq	r3, r2
 80265f6:	9306      	str	r3, [sp, #24]
 80265f8:	e61c      	b.n	8026234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80265fa:	b151      	cbz	r1, 8026612 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80265fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80265fe:	58aa      	ldr	r2, [r5, r2]
 8026600:	25ff      	movs	r5, #255	; 0xff
 8026602:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8026606:	9208      	str	r2, [sp, #32]
 8026608:	46a8      	mov	r8, r5
 802660a:	e6a0      	b.n	802634e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802660c:	25ff      	movs	r5, #255	; 0xff
 802660e:	46aa      	mov	sl, r5
 8026610:	e69d      	b.n	802634e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8026612:	25ff      	movs	r5, #255	; 0xff
 8026614:	46aa      	mov	sl, r5
 8026616:	e7f7      	b.n	8026608 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8026618:	1c57      	adds	r7, r2, #1
 802661a:	d195      	bne.n	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802661c:	9d07      	ldr	r5, [sp, #28]
 802661e:	4295      	cmp	r5, r2
 8026620:	dd92      	ble.n	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8026622:	1c5d      	adds	r5, r3, #1
 8026624:	db90      	blt.n	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8026626:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026628:	429d      	cmp	r5, r3
 802662a:	dd8d      	ble.n	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802662c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802662e:	9201      	str	r2, [sp, #4]
 8026630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026632:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8026636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026638:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802663a:	9300      	str	r3, [sp, #0]
 802663c:	9b07      	ldr	r3, [sp, #28]
 802663e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8026642:	4631      	mov	r1, r6
 8026644:	f7ff fc68 	bl	8025f18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8026648:	e77e      	b.n	8026548 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802664a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802664c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026650:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026652:	9d07      	ldr	r5, [sp, #28]
 8026654:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026658:	1412      	asrs	r2, r2, #16
 802665a:	1423      	asrs	r3, r4, #16
 802665c:	fb05 2303 	mla	r3, r5, r3, r2
 8026660:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026662:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8026666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802666a:	0e1e      	lsrs	r6, r3, #24
 802666c:	2900      	cmp	r1, #0
 802666e:	f000 8114 	beq.w	802689a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 8026672:	686a      	ldr	r2, [r5, #4]
 8026674:	920d      	str	r2, [sp, #52]	; 0x34
 8026676:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 802667a:	2800      	cmp	r0, #0
 802667c:	f000 8116 	beq.w	80268ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8026680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026682:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8026684:	18aa      	adds	r2, r5, r2
 8026686:	59ed      	ldr	r5, [r5, r7]
 8026688:	6852      	ldr	r2, [r2, #4]
 802668a:	9509      	str	r5, [sp, #36]	; 0x24
 802668c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8026690:	0e15      	lsrs	r5, r2, #24
 8026692:	920f      	str	r2, [sp, #60]	; 0x3c
 8026694:	b289      	uxth	r1, r1
 8026696:	b280      	uxth	r0, r0
 8026698:	fb01 fa00 	mul.w	sl, r1, r0
 802669c:	0109      	lsls	r1, r1, #4
 802669e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80266a2:	eba1 080a 	sub.w	r8, r1, sl
 80266a6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80266aa:	b280      	uxth	r0, r0
 80266ac:	fa1f f888 	uxth.w	r8, r8
 80266b0:	1a12      	subs	r2, r2, r0
 80266b2:	fb08 f10c 	mul.w	r1, r8, ip
 80266b6:	b292      	uxth	r2, r2
 80266b8:	fb02 1106 	mla	r1, r2, r6, r1
 80266bc:	fb00 1109 	mla	r1, r0, r9, r1
 80266c0:	fb0a 1105 	mla	r1, sl, r5, r1
 80266c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80266c8:	2900      	cmp	r1, #0
 80266ca:	f000 80da 	beq.w	8026882 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80266ce:	2eff      	cmp	r6, #255	; 0xff
 80266d0:	d016      	beq.n	8026700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 80266d2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80266d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80266da:	4377      	muls	r7, r6
 80266dc:	435e      	muls	r6, r3
 80266de:	0a3b      	lsrs	r3, r7, #8
 80266e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80266e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266e8:	443b      	add	r3, r7
 80266ea:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80266ee:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80266f2:	0a1b      	lsrs	r3, r3, #8
 80266f4:	0a3f      	lsrs	r7, r7, #8
 80266f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80266fe:	433b      	orrs	r3, r7
 8026700:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026704:	d01d      	beq.n	8026742 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8026706:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8026708:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802670a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802670e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026712:	fb0c f606 	mul.w	r6, ip, r6
 8026716:	fb0c fc07 	mul.w	ip, ip, r7
 802671a:	0a37      	lsrs	r7, r6, #8
 802671c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8026720:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026724:	4437      	add	r7, r6
 8026726:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802672a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802672e:	0a3f      	lsrs	r7, r7, #8
 8026730:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026734:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026738:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802673c:	ea47 060c 	orr.w	r6, r7, ip
 8026740:	960d      	str	r6, [sp, #52]	; 0x34
 8026742:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026746:	d01d      	beq.n	8026784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8026748:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802674a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802674e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026752:	fb09 fc0c 	mul.w	ip, r9, ip
 8026756:	fb09 f906 	mul.w	r9, r9, r6
 802675a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802675e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026762:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8026766:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802676a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802676e:	4467      	add	r7, ip
 8026770:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026774:	0a3f      	lsrs	r7, r7, #8
 8026776:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802677a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802677e:	ea47 0609 	orr.w	r6, r7, r9
 8026782:	9609      	str	r6, [sp, #36]	; 0x24
 8026784:	2dff      	cmp	r5, #255	; 0xff
 8026786:	d01a      	beq.n	80267be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8026788:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802678a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802678e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026792:	fb05 fc0c 	mul.w	ip, r5, ip
 8026796:	4375      	muls	r5, r6
 8026798:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802679c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80267a0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80267a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80267a8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80267ac:	4467      	add	r7, ip
 80267ae:	0a2d      	lsrs	r5, r5, #8
 80267b0:	0a3f      	lsrs	r7, r7, #8
 80267b2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80267b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80267ba:	433d      	orrs	r5, r7
 80267bc:	950f      	str	r5, [sp, #60]	; 0x3c
 80267be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80267c0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80267c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80267c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80267cc:	fb08 f505 	mul.w	r5, r8, r5
 80267d0:	fb02 5506 	mla	r5, r2, r6, r5
 80267d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80267d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80267da:	fb00 5506 	mla	r5, r0, r6, r5
 80267de:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80267e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80267e4:	fb0a 5506 	mla	r5, sl, r6, r5
 80267e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80267ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80267ee:	0a2d      	lsrs	r5, r5, #8
 80267f0:	fb08 f806 	mul.w	r8, r8, r6
 80267f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80267f8:	fb02 8303 	mla	r3, r2, r3, r8
 80267fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80267fe:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026804:	fb00 3307 	mla	r3, r0, r7, r3
 8026808:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802680c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8026810:	fb01 f30b 	mul.w	r3, r1, fp
 8026814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026818:	1c59      	adds	r1, r3, #1
 802681a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802681e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026822:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026826:	ea45 050c 	orr.w	r5, r5, ip
 802682a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802682e:	b2ea      	uxtb	r2, r5
 8026830:	b2c9      	uxtb	r1, r1
 8026832:	fb12 f20b 	smulbb	r2, r2, fp
 8026836:	fb03 2301 	mla	r3, r3, r1, r2
 802683a:	b29b      	uxth	r3, r3
 802683c:	1c5a      	adds	r2, r3, #1
 802683e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026842:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8026846:	fb12 f201 	smulbb	r2, r2, r1
 802684a:	121b      	asrs	r3, r3, #8
 802684c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026850:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8026854:	0c2d      	lsrs	r5, r5, #16
 8026856:	fb03 230b 	mla	r3, r3, fp, r2
 802685a:	b29b      	uxth	r3, r3
 802685c:	1c5a      	adds	r2, r3, #1
 802685e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026862:	121b      	asrs	r3, r3, #8
 8026864:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026868:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802686c:	fb13 f101 	smulbb	r1, r3, r1
 8026870:	fb05 150b 	mla	r5, r5, fp, r1
 8026874:	b2ad      	uxth	r5, r5
 8026876:	1c69      	adds	r1, r5, #1
 8026878:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802687c:	122d      	asrs	r5, r5, #8
 802687e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8026882:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026884:	f10e 0e03 	add.w	lr, lr, #3
 8026888:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802688a:	4413      	add	r3, r2
 802688c:	932b      	str	r3, [sp, #172]	; 0xac
 802688e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026890:	441c      	add	r4, r3
 8026892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026894:	3b01      	subs	r3, #1
 8026896:	9313      	str	r3, [sp, #76]	; 0x4c
 8026898:	e501      	b.n	802629e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 802689a:	b150      	cbz	r0, 80268b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 802689c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802689e:	58aa      	ldr	r2, [r5, r2]
 80268a0:	25ff      	movs	r5, #255	; 0xff
 80268a2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80268a6:	9209      	str	r2, [sp, #36]	; 0x24
 80268a8:	46ac      	mov	ip, r5
 80268aa:	e6f3      	b.n	8026694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80268ac:	25ff      	movs	r5, #255	; 0xff
 80268ae:	46a9      	mov	r9, r5
 80268b0:	e6f0      	b.n	8026694 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80268b2:	25ff      	movs	r5, #255	; 0xff
 80268b4:	46a9      	mov	r9, r5
 80268b6:	e7f7      	b.n	80268a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80268b8:	b019      	add	sp, #100	; 0x64
 80268ba:	ecbd 8b08 	vpop	{d8-d11}
 80268be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080268c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80268c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268c8:	b085      	sub	sp, #20
 80268ca:	7888      	ldrb	r0, [r1, #2]
 80268cc:	4691      	mov	r9, r2
 80268ce:	9000      	str	r0, [sp, #0]
 80268d0:	7848      	ldrb	r0, [r1, #1]
 80268d2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80268d6:	9001      	str	r0, [sp, #4]
 80268d8:	7808      	ldrb	r0, [r1, #0]
 80268da:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80268de:	9002      	str	r0, [sp, #8]
 80268e0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80268e4:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80268e8:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80268ec:	fb04 c603 	mla	r6, r4, r3, ip
 80268f0:	2c00      	cmp	r4, #0
 80268f2:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80268f6:	9a00      	ldr	r2, [sp, #0]
 80268f8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80268fc:	9a01      	ldr	r2, [sp, #4]
 80268fe:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8026902:	db3a      	blt.n	802697a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8026904:	45a0      	cmp	r8, r4
 8026906:	dd38      	ble.n	802697a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8026908:	f1bc 0f00 	cmp.w	ip, #0
 802690c:	db33      	blt.n	8026976 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 802690e:	4563      	cmp	r3, ip
 8026910:	dd31      	ble.n	8026976 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8026912:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8026916:	f11c 0601 	adds.w	r6, ip, #1
 802691a:	d431      	bmi.n	8026980 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 802691c:	42b3      	cmp	r3, r6
 802691e:	dd2f      	ble.n	8026980 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8026920:	b375      	cbz	r5, 8026980 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8026922:	f8de 6004 	ldr.w	r6, [lr, #4]
 8026926:	3401      	adds	r4, #1
 8026928:	d42e      	bmi.n	8026988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802692a:	45a0      	cmp	r8, r4
 802692c:	dd2c      	ble.n	8026988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 802692e:	b35f      	cbz	r7, 8026988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8026930:	f1bc 0f00 	cmp.w	ip, #0
 8026934:	db26      	blt.n	8026984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8026936:	4563      	cmp	r3, ip
 8026938:	dd24      	ble.n	8026984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 802693a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802693e:	f11c 0c01 	adds.w	ip, ip, #1
 8026942:	d405      	bmi.n	8026950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026944:	4563      	cmp	r3, ip
 8026946:	dd03      	ble.n	8026950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8026948:	b115      	cbz	r5, 8026950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802694a:	3301      	adds	r3, #1
 802694c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8026950:	2d0f      	cmp	r5, #15
 8026952:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026956:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802695a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802695e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026962:	d801      	bhi.n	8026968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8026964:	2f0f      	cmp	r7, #15
 8026966:	d911      	bls.n	802698c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8026968:	4b77      	ldr	r3, [pc, #476]	; (8026b48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 802696a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802696e:	4a77      	ldr	r2, [pc, #476]	; (8026b4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8026970:	4877      	ldr	r0, [pc, #476]	; (8026b50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8026972:	f003 f831 	bl	80299d8 <__assert_func>
 8026976:	4602      	mov	r2, r0
 8026978:	e7cd      	b.n	8026916 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 802697a:	4606      	mov	r6, r0
 802697c:	4602      	mov	r2, r0
 802697e:	e7d2      	b.n	8026926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8026980:	4606      	mov	r6, r0
 8026982:	e7d0      	b.n	8026926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8026984:	4604      	mov	r4, r0
 8026986:	e7da      	b.n	802693e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8026988:	4604      	mov	r4, r0
 802698a:	e7e1      	b.n	8026950 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802698c:	b2ab      	uxth	r3, r5
 802698e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026992:	b2bf      	uxth	r7, r7
 8026994:	fb03 fe07 	mul.w	lr, r3, r7
 8026998:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802699c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80269a0:	eba3 0c0e 	sub.w	ip, r3, lr
 80269a4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 80269a8:	b2bf      	uxth	r7, r7
 80269aa:	fa1f fc8c 	uxth.w	ip, ip
 80269ae:	eba5 0507 	sub.w	r5, r5, r7
 80269b2:	fb0c f30a 	mul.w	r3, ip, sl
 80269b6:	b2ad      	uxth	r5, r5
 80269b8:	fb05 330b 	mla	r3, r5, fp, r3
 80269bc:	fb07 3309 	mla	r3, r7, r9, r3
 80269c0:	fb0e 3308 	mla	r3, lr, r8, r3
 80269c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80269c8:	9303      	str	r3, [sp, #12]
 80269ca:	d018      	beq.n	80269fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 80269cc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80269d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80269d4:	fb0b f303 	mul.w	r3, fp, r3
 80269d8:	fb0b fb02 	mul.w	fp, fp, r2
 80269dc:	0a1a      	lsrs	r2, r3, #8
 80269de:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80269e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80269e6:	441a      	add	r2, r3
 80269e8:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80269ec:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80269f0:	0a12      	lsrs	r2, r2, #8
 80269f2:	0a1b      	lsrs	r3, r3, #8
 80269f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80269f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80269fc:	431a      	orrs	r2, r3
 80269fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026a02:	d019      	beq.n	8026a38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8026a04:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026a08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026a0c:	fb0a fb0b 	mul.w	fp, sl, fp
 8026a10:	fb0a fa06 	mul.w	sl, sl, r6
 8026a14:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026a18:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026a1c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8026a20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026a24:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026a28:	445e      	add	r6, fp
 8026a2a:	0a1b      	lsrs	r3, r3, #8
 8026a2c:	0a36      	lsrs	r6, r6, #8
 8026a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026a36:	431e      	orrs	r6, r3
 8026a38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026a3c:	d019      	beq.n	8026a72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8026a3e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026a42:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026a46:	fb09 fa0a 	mul.w	sl, r9, sl
 8026a4a:	fb09 f904 	mul.w	r9, r9, r4
 8026a4e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026a52:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026a56:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8026a5a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026a5e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8026a62:	4454      	add	r4, sl
 8026a64:	0a1b      	lsrs	r3, r3, #8
 8026a66:	0a24      	lsrs	r4, r4, #8
 8026a68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a6c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026a70:	431c      	orrs	r4, r3
 8026a72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026a76:	d019      	beq.n	8026aac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8026a78:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8026a7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026a80:	fb08 f909 	mul.w	r9, r8, r9
 8026a84:	fb08 f800 	mul.w	r8, r8, r0
 8026a88:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8026a8c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026a90:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8026a94:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026a98:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8026a9c:	4448      	add	r0, r9
 8026a9e:	0a1b      	lsrs	r3, r3, #8
 8026aa0:	0a00      	lsrs	r0, r0, #8
 8026aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026aa6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026aaa:	4318      	orrs	r0, r3
 8026aac:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026ab0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ab4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026ab8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026abc:	fb0c f808 	mul.w	r8, ip, r8
 8026ac0:	fb0c f606 	mul.w	r6, ip, r6
 8026ac4:	fb05 8803 	mla	r8, r5, r3, r8
 8026ac8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8026acc:	fb05 6202 	mla	r2, r5, r2, r6
 8026ad0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026ad4:	fb07 8803 	mla	r8, r7, r3, r8
 8026ad8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026adc:	fb07 2704 	mla	r7, r7, r4, r2
 8026ae0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ae4:	fb0e 8303 	mla	r3, lr, r3, r8
 8026ae8:	fb0e 7e00 	mla	lr, lr, r0, r7
 8026aec:	9802      	ldr	r0, [sp, #8]
 8026aee:	0a1b      	lsrs	r3, r3, #8
 8026af0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026af4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026af8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026afc:	ea43 0e0e 	orr.w	lr, r3, lr
 8026b00:	9b03      	ldr	r3, [sp, #12]
 8026b02:	43db      	mvns	r3, r3
 8026b04:	b2db      	uxtb	r3, r3
 8026b06:	4358      	muls	r0, r3
 8026b08:	1c42      	adds	r2, r0, #1
 8026b0a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026b0e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026b12:	700a      	strb	r2, [r1, #0]
 8026b14:	9a01      	ldr	r2, [sp, #4]
 8026b16:	435a      	muls	r2, r3
 8026b18:	1c50      	adds	r0, r2, #1
 8026b1a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026b1e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8026b22:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026b26:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026b2a:	704a      	strb	r2, [r1, #1]
 8026b2c:	9a00      	ldr	r2, [sp, #0]
 8026b2e:	435a      	muls	r2, r3
 8026b30:	4613      	mov	r3, r2
 8026b32:	3201      	adds	r2, #1
 8026b34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b38:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8026b3c:	f881 e002 	strb.w	lr, [r1, #2]
 8026b40:	b005      	add	sp, #20
 8026b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b46:	bf00      	nop
 8026b48:	0802efeb 	.word	0x0802efeb
 8026b4c:	0802f4e2 	.word	0x0802f4e2
 8026b50:	0802f0b4 	.word	0x0802f0b4

08026b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b58:	ed2d 8b08 	vpush	{d8-d11}
 8026b5c:	b097      	sub	sp, #92	; 0x5c
 8026b5e:	eeb0 aa40 	vmov.f32	s20, s0
 8026b62:	eef0 9a60 	vmov.f32	s19, s1
 8026b66:	9306      	str	r3, [sp, #24]
 8026b68:	eeb0 9a41 	vmov.f32	s18, s2
 8026b6c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8026b70:	eeb0 8a62 	vmov.f32	s16, s5
 8026b74:	9214      	str	r2, [sp, #80]	; 0x50
 8026b76:	eef0 8a43 	vmov.f32	s17, s6
 8026b7a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026b7c:	eef0 ba44 	vmov.f32	s23, s8
 8026b80:	9307      	str	r3, [sp, #28]
 8026b82:	eeb0 ba64 	vmov.f32	s22, s9
 8026b86:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8026b8a:	eef0 aa45 	vmov.f32	s21, s10
 8026b8e:	9015      	str	r0, [sp, #84]	; 0x54
 8026b90:	9112      	str	r1, [sp, #72]	; 0x48
 8026b92:	6850      	ldr	r0, [r2, #4]
 8026b94:	9310      	str	r3, [sp, #64]	; 0x40
 8026b96:	6812      	ldr	r2, [r2, #0]
 8026b98:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8026b9a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026b9e:	fb00 1303 	mla	r3, r0, r3, r1
 8026ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ba6:	18d3      	adds	r3, r2, r3
 8026ba8:	930a      	str	r3, [sp, #40]	; 0x28
 8026baa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026bac:	681b      	ldr	r3, [r3, #0]
 8026bae:	9311      	str	r3, [sp, #68]	; 0x44
 8026bb0:	9b07      	ldr	r3, [sp, #28]
 8026bb2:	009b      	lsls	r3, r3, #2
 8026bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8026bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026bb8:	2b00      	cmp	r3, #0
 8026bba:	dc03      	bgt.n	8026bc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8026bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026bbe:	2b00      	cmp	r3, #0
 8026bc0:	f340 832e 	ble.w	8027220 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8026bc4:	9b06      	ldr	r3, [sp, #24]
 8026bc6:	2b00      	cmp	r3, #0
 8026bc8:	f340 8186 	ble.w	8026ed8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8026bcc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026bce:	1423      	asrs	r3, r4, #16
 8026bd0:	1412      	asrs	r2, r2, #16
 8026bd2:	d42f      	bmi.n	8026c34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8026bd4:	1c51      	adds	r1, r2, #1
 8026bd6:	9807      	ldr	r0, [sp, #28]
 8026bd8:	4288      	cmp	r0, r1
 8026bda:	dd2e      	ble.n	8026c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026bdc:	2b00      	cmp	r3, #0
 8026bde:	db2c      	blt.n	8026c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026be0:	1c59      	adds	r1, r3, #1
 8026be2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026be4:	4288      	cmp	r0, r1
 8026be6:	dd28      	ble.n	8026c3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8026be8:	9b06      	ldr	r3, [sp, #24]
 8026bea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026bec:	3b01      	subs	r3, #1
 8026bee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026bf0:	fb02 1203 	mla	r2, r2, r3, r1
 8026bf4:	1412      	asrs	r2, r2, #16
 8026bf6:	d42b      	bmi.n	8026c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8026bf8:	3201      	adds	r2, #1
 8026bfa:	9907      	ldr	r1, [sp, #28]
 8026bfc:	4291      	cmp	r1, r2
 8026bfe:	dd27      	ble.n	8026c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8026c00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026c02:	fb02 4303 	mla	r3, r2, r3, r4
 8026c06:	141b      	asrs	r3, r3, #16
 8026c08:	d422      	bmi.n	8026c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8026c0a:	3301      	adds	r3, #1
 8026c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026c0e:	429a      	cmp	r2, r3
 8026c10:	dd1e      	ble.n	8026c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8026c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c14:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026c18:	1cdd      	adds	r5, r3, #3
 8026c1a:	f1bb 0f00 	cmp.w	fp, #0
 8026c1e:	f300 81c4 	bgt.w	8026faa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8026c22:	9b06      	ldr	r3, [sp, #24]
 8026c24:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026c2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026c2e:	4423      	add	r3, r4
 8026c30:	930a      	str	r3, [sp, #40]	; 0x28
 8026c32:	e153      	b.n	8026edc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8026c34:	1c51      	adds	r1, r2, #1
 8026c36:	f040 8142 	bne.w	8026ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8026c3a:	9907      	ldr	r1, [sp, #28]
 8026c3c:	428a      	cmp	r2, r1
 8026c3e:	f280 813e 	bge.w	8026ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8026c42:	1c5a      	adds	r2, r3, #1
 8026c44:	f2c0 813b 	blt.w	8026ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8026c48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026c4a:	4293      	cmp	r3, r2
 8026c4c:	f280 8137 	bge.w	8026ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8026c50:	9b06      	ldr	r3, [sp, #24]
 8026c52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8026c54:	9313      	str	r3, [sp, #76]	; 0x4c
 8026c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	dde2      	ble.n	8026c22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8026c5c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026c5e:	1423      	asrs	r3, r4, #16
 8026c60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026c62:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026c66:	1409      	asrs	r1, r1, #16
 8026c68:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8026c6c:	f100 8187 	bmi.w	8026f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8026c70:	1c4e      	adds	r6, r1, #1
 8026c72:	9f07      	ldr	r7, [sp, #28]
 8026c74:	42b7      	cmp	r7, r6
 8026c76:	f340 8184 	ble.w	8026f82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8026c7a:	2b00      	cmp	r3, #0
 8026c7c:	f2c0 8181 	blt.w	8026f82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8026c80:	1c5e      	adds	r6, r3, #1
 8026c82:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026c84:	42b7      	cmp	r7, r6
 8026c86:	f340 817c 	ble.w	8026f82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8026c8a:	9e07      	ldr	r6, [sp, #28]
 8026c8c:	fb03 1306 	mla	r3, r3, r6, r1
 8026c90:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026c92:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8026c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8026c9a:	0e1f      	lsrs	r7, r3, #24
 8026c9c:	2a00      	cmp	r2, #0
 8026c9e:	f000 815c 	beq.w	8026f5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8026ca2:	6871      	ldr	r1, [r6, #4]
 8026ca4:	910b      	str	r1, [sp, #44]	; 0x2c
 8026ca6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8026caa:	2800      	cmp	r0, #0
 8026cac:	f000 815e 	beq.w	8026f6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8026cb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026cb2:	eb06 0c01 	add.w	ip, r6, r1
 8026cb6:	5876      	ldr	r6, [r6, r1]
 8026cb8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026cbc:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8026cc0:	9608      	str	r6, [sp, #32]
 8026cc2:	0e0e      	lsrs	r6, r1, #24
 8026cc4:	910c      	str	r1, [sp, #48]	; 0x30
 8026cc6:	b292      	uxth	r2, r2
 8026cc8:	b280      	uxth	r0, r0
 8026cca:	fb02 fa00 	mul.w	sl, r2, r0
 8026cce:	0112      	lsls	r2, r2, #4
 8026cd0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026cd4:	eba2 080a 	sub.w	r8, r2, sl
 8026cd8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026cdc:	b280      	uxth	r0, r0
 8026cde:	fa1f f888 	uxth.w	r8, r8
 8026ce2:	1a09      	subs	r1, r1, r0
 8026ce4:	fb08 f20e 	mul.w	r2, r8, lr
 8026ce8:	b289      	uxth	r1, r1
 8026cea:	fb01 2207 	mla	r2, r1, r7, r2
 8026cee:	fb00 2209 	mla	r2, r0, r9, r2
 8026cf2:	fb0a 2206 	mla	r2, sl, r6, r2
 8026cf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026cfa:	2a00      	cmp	r2, #0
 8026cfc:	f000 80d4 	beq.w	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026d00:	2fff      	cmp	r7, #255	; 0xff
 8026d02:	d01a      	beq.n	8026d3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8026d04:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026d08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d0c:	fb07 fc0c 	mul.w	ip, r7, ip
 8026d10:	435f      	muls	r7, r3
 8026d12:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026d16:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026d1a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8026d1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d22:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8026d26:	4463      	add	r3, ip
 8026d28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026d2c:	0a1b      	lsrs	r3, r3, #8
 8026d2e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026d32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d36:	ea43 030b 	orr.w	r3, r3, fp
 8026d3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026d3e:	d01e      	beq.n	8026d7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8026d40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026d42:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8026d46:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026d4a:	fb0e fb0b 	mul.w	fp, lr, fp
 8026d4e:	fb0e fe07 	mul.w	lr, lr, r7
 8026d52:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8026d56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d5a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8026d5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d62:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8026d66:	44dc      	add	ip, fp
 8026d68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d70:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d78:	ea4c 070e 	orr.w	r7, ip, lr
 8026d7c:	970b      	str	r7, [sp, #44]	; 0x2c
 8026d7e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026d82:	d01e      	beq.n	8026dc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8026d84:	9f08      	ldr	r7, [sp, #32]
 8026d86:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8026d8a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026d8e:	fb09 fe0e 	mul.w	lr, r9, lr
 8026d92:	fb09 f907 	mul.w	r9, r9, r7
 8026d96:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026d9a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026d9e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8026da2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026da6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8026daa:	44f4      	add	ip, lr
 8026dac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026db0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026db4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026db8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026dbc:	ea4c 0709 	orr.w	r7, ip, r9
 8026dc0:	9708      	str	r7, [sp, #32]
 8026dc2:	2eff      	cmp	r6, #255	; 0xff
 8026dc4:	d01c      	beq.n	8026e00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8026dc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026dc8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8026dcc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026dd0:	fb06 fe0e 	mul.w	lr, r6, lr
 8026dd4:	437e      	muls	r6, r7
 8026dd6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8026dda:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8026dde:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8026de2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026de6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8026dea:	44f4      	add	ip, lr
 8026dec:	0a36      	lsrs	r6, r6, #8
 8026dee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026df2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026df6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026dfa:	ea4c 0606 	orr.w	r6, ip, r6
 8026dfe:	960c      	str	r6, [sp, #48]	; 0x30
 8026e00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8026e02:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8026e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e0a:	2aff      	cmp	r2, #255	; 0xff
 8026e0c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e10:	fb08 f606 	mul.w	r6, r8, r6
 8026e14:	fb01 6607 	mla	r6, r1, r7, r6
 8026e18:	9f08      	ldr	r7, [sp, #32]
 8026e1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026e1e:	fb00 6607 	mla	r6, r0, r7, r6
 8026e22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026e24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026e28:	fb0a 6607 	mla	r6, sl, r7, r6
 8026e2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026e2e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026e32:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8026e36:	fb08 f807 	mul.w	r8, r8, r7
 8026e3a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e3e:	fb01 8303 	mla	r3, r1, r3, r8
 8026e42:	9908      	ldr	r1, [sp, #32]
 8026e44:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026e48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026e4a:	fb00 330c 	mla	r3, r0, ip, r3
 8026e4e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8026e52:	fb0a 3a00 	mla	sl, sl, r0, r3
 8026e56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e5e:	ea46 060a 	orr.w	r6, r6, sl
 8026e62:	b2f0      	uxtb	r0, r6
 8026e64:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8026e68:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8026e6c:	f000 8084 	beq.w	8026f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8026e70:	43d2      	mvns	r2, r2
 8026e72:	782b      	ldrb	r3, [r5, #0]
 8026e74:	b2d2      	uxtb	r2, r2
 8026e76:	fb03 f702 	mul.w	r7, r3, r2
 8026e7a:	1c7b      	adds	r3, r7, #1
 8026e7c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026e80:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026e84:	702b      	strb	r3, [r5, #0]
 8026e86:	786b      	ldrb	r3, [r5, #1]
 8026e88:	fb03 f002 	mul.w	r0, r3, r2
 8026e8c:	1c43      	adds	r3, r0, #1
 8026e8e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026e92:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026e96:	706b      	strb	r3, [r5, #1]
 8026e98:	78ab      	ldrb	r3, [r5, #2]
 8026e9a:	4353      	muls	r3, r2
 8026e9c:	1c5a      	adds	r2, r3, #1
 8026e9e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026ea2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8026ea6:	70ae      	strb	r6, [r5, #2]
 8026ea8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026eaa:	3503      	adds	r5, #3
 8026eac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026eae:	4413      	add	r3, r2
 8026eb0:	9329      	str	r3, [sp, #164]	; 0xa4
 8026eb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026eb4:	441c      	add	r4, r3
 8026eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026eb8:	3b01      	subs	r3, #1
 8026eba:	9313      	str	r3, [sp, #76]	; 0x4c
 8026ebc:	e6cb      	b.n	8026c56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8026ebe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026ec0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026ec2:	4413      	add	r3, r2
 8026ec4:	9329      	str	r3, [sp, #164]	; 0xa4
 8026ec6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026ec8:	441c      	add	r4, r3
 8026eca:	9b06      	ldr	r3, [sp, #24]
 8026ecc:	3b01      	subs	r3, #1
 8026ece:	9306      	str	r3, [sp, #24]
 8026ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ed2:	3303      	adds	r3, #3
 8026ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8026ed6:	e675      	b.n	8026bc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8026ed8:	f47f ae86 	bne.w	8026be8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8026edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	f340 819e 	ble.w	8027220 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8026ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026ee8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026eea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026eee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026ef2:	eef0 6a48 	vmov.f32	s13, s16
 8026ef6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026efa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026efe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f02:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026f06:	eef0 6a68 	vmov.f32	s13, s17
 8026f0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f0e:	ee16 4a90 	vmov	r4, s13
 8026f12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026f16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026f1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026f1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026f22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026f26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026f2a:	ee18 2a10 	vmov	r2, s16
 8026f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8026f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f36:	ee18 2a90 	vmov	r2, s17
 8026f3a:	932b      	str	r3, [sp, #172]	; 0xac
 8026f3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f3e:	eef0 8a67 	vmov.f32	s17, s15
 8026f42:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f46:	932c      	str	r3, [sp, #176]	; 0xb0
 8026f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026f4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026f4c:	3b01      	subs	r3, #1
 8026f4e:	9312      	str	r3, [sp, #72]	; 0x48
 8026f50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f52:	bf08      	it	eq
 8026f54:	4613      	moveq	r3, r2
 8026f56:	9306      	str	r3, [sp, #24]
 8026f58:	e62d      	b.n	8026bb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8026f5a:	b150      	cbz	r0, 8026f72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8026f5c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026f5e:	5871      	ldr	r1, [r6, r1]
 8026f60:	26ff      	movs	r6, #255	; 0xff
 8026f62:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8026f66:	9108      	str	r1, [sp, #32]
 8026f68:	46b6      	mov	lr, r6
 8026f6a:	e6ac      	b.n	8026cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8026f6c:	26ff      	movs	r6, #255	; 0xff
 8026f6e:	46b1      	mov	r9, r6
 8026f70:	e6a9      	b.n	8026cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8026f72:	26ff      	movs	r6, #255	; 0xff
 8026f74:	46b1      	mov	r9, r6
 8026f76:	e7f7      	b.n	8026f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8026f78:	7028      	strb	r0, [r5, #0]
 8026f7a:	7069      	strb	r1, [r5, #1]
 8026f7c:	e793      	b.n	8026ea6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8026f7e:	1c4f      	adds	r7, r1, #1
 8026f80:	d192      	bne.n	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026f82:	9e07      	ldr	r6, [sp, #28]
 8026f84:	428e      	cmp	r6, r1
 8026f86:	dd8f      	ble.n	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026f88:	1c5e      	adds	r6, r3, #1
 8026f8a:	db8d      	blt.n	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026f8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8026f8e:	429e      	cmp	r6, r3
 8026f90:	dd8a      	ble.n	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026f92:	9600      	str	r6, [sp, #0]
 8026f94:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8026f98:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8026f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026f9e:	4629      	mov	r1, r5
 8026fa0:	9b07      	ldr	r3, [sp, #28]
 8026fa2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026fa4:	f7ff fc8e 	bl	80268c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8026fa8:	e77e      	b.n	8026ea8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8026faa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fac:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026fb0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8026fb2:	9e07      	ldr	r6, [sp, #28]
 8026fb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026fb8:	1409      	asrs	r1, r1, #16
 8026fba:	1423      	asrs	r3, r4, #16
 8026fbc:	fb06 1303 	mla	r3, r6, r3, r1
 8026fc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8026fc2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8026fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8026fca:	0e1f      	lsrs	r7, r3, #24
 8026fcc:	2a00      	cmp	r2, #0
 8026fce:	f000 8113 	beq.w	80271f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8026fd2:	6871      	ldr	r1, [r6, #4]
 8026fd4:	910d      	str	r1, [sp, #52]	; 0x34
 8026fd6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8026fda:	2800      	cmp	r0, #0
 8026fdc:	f000 8115 	beq.w	802720a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8026fe0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026fe2:	eb06 0c01 	add.w	ip, r6, r1
 8026fe6:	5876      	ldr	r6, [r6, r1]
 8026fe8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026fec:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8026ff0:	9609      	str	r6, [sp, #36]	; 0x24
 8026ff2:	0e0e      	lsrs	r6, r1, #24
 8026ff4:	910f      	str	r1, [sp, #60]	; 0x3c
 8026ff6:	b292      	uxth	r2, r2
 8026ff8:	b280      	uxth	r0, r0
 8026ffa:	fb02 fa00 	mul.w	sl, r2, r0
 8026ffe:	0112      	lsls	r2, r2, #4
 8027000:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027004:	eba2 080a 	sub.w	r8, r2, sl
 8027008:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802700c:	b280      	uxth	r0, r0
 802700e:	fa1f f888 	uxth.w	r8, r8
 8027012:	1a09      	subs	r1, r1, r0
 8027014:	fb08 f20e 	mul.w	r2, r8, lr
 8027018:	b289      	uxth	r1, r1
 802701a:	fb01 2207 	mla	r2, r1, r7, r2
 802701e:	fb00 2209 	mla	r2, r0, r9, r2
 8027022:	fb0a 2206 	mla	r2, sl, r6, r2
 8027026:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802702a:	2a00      	cmp	r2, #0
 802702c:	f000 80da 	beq.w	80271e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8027030:	2fff      	cmp	r7, #255	; 0xff
 8027032:	d01a      	beq.n	802706a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8027034:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802703c:	fb07 fc0c 	mul.w	ip, r7, ip
 8027040:	435f      	muls	r7, r3
 8027042:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027046:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802704a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802704e:	4463      	add	r3, ip
 8027050:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8027054:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8027058:	0a1b      	lsrs	r3, r3, #8
 802705a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802705e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027062:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027066:	ea43 030c 	orr.w	r3, r3, ip
 802706a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802706e:	d021      	beq.n	80270b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8027070:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027072:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027076:	fb0e f707 	mul.w	r7, lr, r7
 802707a:	9713      	str	r7, [sp, #76]	; 0x4c
 802707c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802707e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027082:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8027084:	fb0e fe0c 	mul.w	lr, lr, ip
 8027088:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802708c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027090:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027094:	44bc      	add	ip, r7
 8027096:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802709a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802709e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80270ae:	ea4c 070e 	orr.w	r7, ip, lr
 80270b2:	970d      	str	r7, [sp, #52]	; 0x34
 80270b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80270b8:	d01e      	beq.n	80270f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80270ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80270bc:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80270c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80270c4:	fb09 fe0e 	mul.w	lr, r9, lr
 80270c8:	fb09 f907 	mul.w	r9, r9, r7
 80270cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80270d0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80270d4:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80270d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270dc:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80270e0:	44f4      	add	ip, lr
 80270e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80270e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270ea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80270ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80270f2:	ea4c 0709 	orr.w	r7, ip, r9
 80270f6:	9709      	str	r7, [sp, #36]	; 0x24
 80270f8:	2eff      	cmp	r6, #255	; 0xff
 80270fa:	d01c      	beq.n	8027136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80270fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80270fe:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027102:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027106:	fb06 fe0e 	mul.w	lr, r6, lr
 802710a:	437e      	muls	r6, r7
 802710c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027110:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027114:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027118:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802711c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8027120:	44f4      	add	ip, lr
 8027122:	0a36      	lsrs	r6, r6, #8
 8027124:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027128:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802712c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027130:	ea4c 0606 	orr.w	r6, ip, r6
 8027134:	960f      	str	r6, [sp, #60]	; 0x3c
 8027136:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027138:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802713c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027140:	2aff      	cmp	r2, #255	; 0xff
 8027142:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027146:	fb08 f606 	mul.w	r6, r8, r6
 802714a:	fb01 6607 	mla	r6, r1, r7, r6
 802714e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027150:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027154:	fb00 6607 	mla	r6, r0, r7, r6
 8027158:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802715a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802715e:	fb0a 6607 	mla	r6, sl, r7, r6
 8027162:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027164:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027168:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802716c:	fb08 f807 	mul.w	r8, r8, r7
 8027170:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027174:	fb01 8303 	mla	r3, r1, r3, r8
 8027178:	9909      	ldr	r1, [sp, #36]	; 0x24
 802717a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802717e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027180:	fb00 330c 	mla	r3, r0, ip, r3
 8027184:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027188:	fb0a 3e0e 	mla	lr, sl, lr, r3
 802718c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027190:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027194:	ea46 060e 	orr.w	r6, r6, lr
 8027198:	b2f0      	uxtb	r0, r6
 802719a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802719e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80271a2:	d038      	beq.n	8027216 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80271a4:	43d2      	mvns	r2, r2
 80271a6:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80271aa:	b2d2      	uxtb	r2, r2
 80271ac:	4357      	muls	r7, r2
 80271ae:	1c7b      	adds	r3, r7, #1
 80271b0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80271b4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80271b8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80271bc:	4350      	muls	r0, r2
 80271be:	f805 3c03 	strb.w	r3, [r5, #-3]
 80271c2:	1c43      	adds	r3, r0, #1
 80271c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80271c8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80271cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80271d0:	4353      	muls	r3, r2
 80271d2:	f805 1c02 	strb.w	r1, [r5, #-2]
 80271d6:	1c5a      	adds	r2, r3, #1
 80271d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80271dc:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80271e0:	f805 6c01 	strb.w	r6, [r5, #-1]
 80271e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80271e6:	3503      	adds	r5, #3
 80271e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80271ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80271ee:	4413      	add	r3, r2
 80271f0:	9329      	str	r3, [sp, #164]	; 0xa4
 80271f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80271f4:	441c      	add	r4, r3
 80271f6:	e510      	b.n	8026c1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80271f8:	b150      	cbz	r0, 8027210 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80271fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80271fc:	5871      	ldr	r1, [r6, r1]
 80271fe:	26ff      	movs	r6, #255	; 0xff
 8027200:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8027204:	9109      	str	r1, [sp, #36]	; 0x24
 8027206:	46b6      	mov	lr, r6
 8027208:	e6f5      	b.n	8026ff6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802720a:	26ff      	movs	r6, #255	; 0xff
 802720c:	46b1      	mov	r9, r6
 802720e:	e6f2      	b.n	8026ff6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8027210:	26ff      	movs	r6, #255	; 0xff
 8027212:	46b1      	mov	r9, r6
 8027214:	e7f7      	b.n	8027206 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8027216:	f805 0c03 	strb.w	r0, [r5, #-3]
 802721a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802721e:	e7df      	b.n	80271e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8027220:	b017      	add	sp, #92	; 0x5c
 8027222:	ecbd 8b08 	vpop	{d8-d11}
 8027226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802722c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802722c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027230:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8027234:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027238:	2800      	cmp	r0, #0
 802723a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802723e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8027242:	fb0c 0e03 	mla	lr, ip, r3, r0
 8027246:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802724a:	db6b      	blt.n	8027324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802724c:	4580      	cmp	r8, r0
 802724e:	dd69      	ble.n	8027324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8027250:	f1bc 0f00 	cmp.w	ip, #0
 8027254:	db66      	blt.n	8027324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8027256:	45e1      	cmp	r9, ip
 8027258:	dd64      	ble.n	8027324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802725a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802725e:	f01e 0f01 	tst.w	lr, #1
 8027262:	5d16      	ldrb	r6, [r2, r4]
 8027264:	bf0c      	ite	eq
 8027266:	f006 060f 	andeq.w	r6, r6, #15
 802726a:	1136      	asrne	r6, r6, #4
 802726c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027270:	b2f6      	uxtb	r6, r6
 8027272:	f110 0a01 	adds.w	sl, r0, #1
 8027276:	d457      	bmi.n	8027328 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8027278:	45d0      	cmp	r8, sl
 802727a:	dd55      	ble.n	8027328 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802727c:	f1bc 0f00 	cmp.w	ip, #0
 8027280:	db52      	blt.n	8027328 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8027282:	45e1      	cmp	r9, ip
 8027284:	dd50      	ble.n	8027328 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8027286:	2f00      	cmp	r7, #0
 8027288:	f000 80ac 	beq.w	80273e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 802728c:	f10e 0b01 	add.w	fp, lr, #1
 8027290:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027294:	f01b 0f01 	tst.w	fp, #1
 8027298:	5d14      	ldrb	r4, [r2, r4]
 802729a:	bf0c      	ite	eq
 802729c:	f004 040f 	andeq.w	r4, r4, #15
 80272a0:	1124      	asrne	r4, r4, #4
 80272a2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80272a6:	b2e4      	uxtb	r4, r4
 80272a8:	2d00      	cmp	r5, #0
 80272aa:	f000 8096 	beq.w	80273da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80272ae:	2800      	cmp	r0, #0
 80272b0:	f10c 0c01 	add.w	ip, ip, #1
 80272b4:	db3c      	blt.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80272b6:	4580      	cmp	r8, r0
 80272b8:	dd3a      	ble.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80272ba:	f1bc 0f00 	cmp.w	ip, #0
 80272be:	db37      	blt.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80272c0:	45e1      	cmp	r9, ip
 80272c2:	dd35      	ble.n	8027330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80272c4:	eb03 0b0e 	add.w	fp, r3, lr
 80272c8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80272cc:	f01b 0f01 	tst.w	fp, #1
 80272d0:	5c10      	ldrb	r0, [r2, r0]
 80272d2:	bf0c      	ite	eq
 80272d4:	f000 000f 	andeq.w	r0, r0, #15
 80272d8:	1100      	asrne	r0, r0, #4
 80272da:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80272de:	b2c0      	uxtb	r0, r0
 80272e0:	f1ba 0f00 	cmp.w	sl, #0
 80272e4:	db26      	blt.n	8027334 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80272e6:	45d0      	cmp	r8, sl
 80272e8:	dd24      	ble.n	8027334 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80272ea:	f1bc 0f00 	cmp.w	ip, #0
 80272ee:	db21      	blt.n	8027334 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80272f0:	45e1      	cmp	r9, ip
 80272f2:	dd1f      	ble.n	8027334 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80272f4:	b307      	cbz	r7, 8027338 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80272f6:	3301      	adds	r3, #1
 80272f8:	449e      	add	lr, r3
 80272fa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80272fe:	f01e 0f01 	tst.w	lr, #1
 8027302:	5cd3      	ldrb	r3, [r2, r3]
 8027304:	bf0c      	ite	eq
 8027306:	f003 030f 	andeq.w	r3, r3, #15
 802730a:	111b      	asrne	r3, r3, #4
 802730c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027310:	b2db      	uxtb	r3, r3
 8027312:	2f0f      	cmp	r7, #15
 8027314:	d911      	bls.n	802733a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8027316:	4b35      	ldr	r3, [pc, #212]	; (80273ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8027318:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802731c:	4a34      	ldr	r2, [pc, #208]	; (80273f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802731e:	4835      	ldr	r0, [pc, #212]	; (80273f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8027320:	f002 fb5a 	bl	80299d8 <__assert_func>
 8027324:	2600      	movs	r6, #0
 8027326:	e7a4      	b.n	8027272 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8027328:	2400      	movs	r4, #0
 802732a:	e7bd      	b.n	80272a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802732c:	463c      	mov	r4, r7
 802732e:	e7be      	b.n	80272ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8027330:	2000      	movs	r0, #0
 8027332:	e7d5      	b.n	80272e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8027334:	2300      	movs	r3, #0
 8027336:	e7ec      	b.n	8027312 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8027338:	463b      	mov	r3, r7
 802733a:	2d0f      	cmp	r5, #15
 802733c:	d8eb      	bhi.n	8027316 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802733e:	b2bf      	uxth	r7, r7
 8027340:	b2ad      	uxth	r5, r5
 8027342:	fb07 f205 	mul.w	r2, r7, r5
 8027346:	013f      	lsls	r7, r7, #4
 8027348:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802734c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8027350:	1abf      	subs	r7, r7, r2
 8027352:	b2ad      	uxth	r5, r5
 8027354:	b2bf      	uxth	r7, r7
 8027356:	ebac 0c05 	sub.w	ip, ip, r5
 802735a:	437c      	muls	r4, r7
 802735c:	fa1f fc8c 	uxth.w	ip, ip
 8027360:	fb06 440c 	mla	r4, r6, ip, r4
 8027364:	fb05 4400 	mla	r4, r5, r0, r4
 8027368:	fb02 4203 	mla	r2, r2, r3, r4
 802736c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027370:	b38a      	cbz	r2, 80273d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8027372:	4b21      	ldr	r3, [pc, #132]	; (80273f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8027374:	681c      	ldr	r4, [r3, #0]
 8027376:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 802737a:	b2e5      	uxtb	r5, r4
 802737c:	4353      	muls	r3, r2
 802737e:	1c5a      	adds	r2, r3, #1
 8027380:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027384:	1212      	asrs	r2, r2, #8
 8027386:	b290      	uxth	r0, r2
 8027388:	43d2      	mvns	r2, r2
 802738a:	fb15 f500 	smulbb	r5, r5, r0
 802738e:	b2d3      	uxtb	r3, r2
 8027390:	780a      	ldrb	r2, [r1, #0]
 8027392:	fb02 5203 	mla	r2, r2, r3, r5
 8027396:	b292      	uxth	r2, r2
 8027398:	1c55      	adds	r5, r2, #1
 802739a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802739e:	784d      	ldrb	r5, [r1, #1]
 80273a0:	fb15 f503 	smulbb	r5, r5, r3
 80273a4:	1212      	asrs	r2, r2, #8
 80273a6:	700a      	strb	r2, [r1, #0]
 80273a8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80273ac:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80273b0:	fb02 5200 	mla	r2, r2, r0, r5
 80273b4:	b292      	uxth	r2, r2
 80273b6:	1c55      	adds	r5, r2, #1
 80273b8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80273bc:	1212      	asrs	r2, r2, #8
 80273be:	704a      	strb	r2, [r1, #1]
 80273c0:	788a      	ldrb	r2, [r1, #2]
 80273c2:	fb12 f303 	smulbb	r3, r2, r3
 80273c6:	fb04 3300 	mla	r3, r4, r0, r3
 80273ca:	b29b      	uxth	r3, r3
 80273cc:	1c5a      	adds	r2, r3, #1
 80273ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80273d2:	121b      	asrs	r3, r3, #8
 80273d4:	708b      	strb	r3, [r1, #2]
 80273d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273da:	2f0f      	cmp	r7, #15
 80273dc:	d89b      	bhi.n	8027316 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80273de:	462b      	mov	r3, r5
 80273e0:	4628      	mov	r0, r5
 80273e2:	e7ac      	b.n	802733e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 80273e4:	2d00      	cmp	r5, #0
 80273e6:	d1a1      	bne.n	802732c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 80273e8:	462c      	mov	r4, r5
 80273ea:	e7f8      	b.n	80273de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 80273ec:	0802efeb 	.word	0x0802efeb
 80273f0:	0802f4e2 	.word	0x0802f4e2
 80273f4:	0802f0b4 	.word	0x0802f0b4
 80273f8:	2000bf40 	.word	0x2000bf40

080273fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80273fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027400:	ed2d 8b08 	vpush	{d8-d11}
 8027404:	b097      	sub	sp, #92	; 0x5c
 8027406:	eeb0 aa40 	vmov.f32	s20, s0
 802740a:	eef0 9a60 	vmov.f32	s19, s1
 802740e:	9308      	str	r3, [sp, #32]
 8027410:	eeb0 9a41 	vmov.f32	s18, s2
 8027414:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8027418:	eeb0 8a62 	vmov.f32	s16, s5
 802741c:	9214      	str	r2, [sp, #80]	; 0x50
 802741e:	eef0 8a43 	vmov.f32	s17, s6
 8027422:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027424:	eef0 ba44 	vmov.f32	s23, s8
 8027428:	9309      	str	r3, [sp, #36]	; 0x24
 802742a:	eeb0 ba64 	vmov.f32	s22, s9
 802742e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8027432:	eef0 aa45 	vmov.f32	s21, s10
 8027436:	9015      	str	r0, [sp, #84]	; 0x54
 8027438:	910c      	str	r1, [sp, #48]	; 0x30
 802743a:	930e      	str	r3, [sp, #56]	; 0x38
 802743c:	6850      	ldr	r0, [r2, #4]
 802743e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8027442:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027446:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802744a:	fb00 1803 	mla	r8, r0, r3, r1
 802744e:	6813      	ldr	r3, [r2, #0]
 8027450:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027454:	4498      	add	r8, r3
 8027456:	f10b 0301 	add.w	r3, fp, #1
 802745a:	f023 0301 	bic.w	r3, r3, #1
 802745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027460:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027462:	681f      	ldr	r7, [r3, #0]
 8027464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027466:	2b00      	cmp	r3, #0
 8027468:	dc03      	bgt.n	8027472 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802746a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802746c:	2b00      	cmp	r3, #0
 802746e:	f340 8238 	ble.w	80278e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8027472:	9b08      	ldr	r3, [sp, #32]
 8027474:	2b00      	cmp	r3, #0
 8027476:	f340 810c 	ble.w	8027692 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 802747a:	142a      	asrs	r2, r5, #16
 802747c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027480:	d42c      	bmi.n	80274dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8027482:	1c51      	adds	r1, r2, #1
 8027484:	458b      	cmp	fp, r1
 8027486:	dd2c      	ble.n	80274e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027488:	2b00      	cmp	r3, #0
 802748a:	db2a      	blt.n	80274e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802748c:	1c59      	adds	r1, r3, #1
 802748e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027490:	4288      	cmp	r0, r1
 8027492:	dd26      	ble.n	80274e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027494:	9b08      	ldr	r3, [sp, #32]
 8027496:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027498:	3b01      	subs	r3, #1
 802749a:	fb02 5203 	mla	r2, r2, r3, r5
 802749e:	1412      	asrs	r2, r2, #16
 80274a0:	d429      	bmi.n	80274f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80274a2:	3201      	adds	r2, #1
 80274a4:	4593      	cmp	fp, r2
 80274a6:	dd26      	ble.n	80274f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80274a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80274aa:	fb02 6303 	mla	r3, r2, r3, r6
 80274ae:	141b      	asrs	r3, r3, #16
 80274b0:	d421      	bmi.n	80274f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80274b2:	3301      	adds	r3, #1
 80274b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274b6:	429a      	cmp	r2, r3
 80274b8:	dd1d      	ble.n	80274f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80274ba:	f108 0e03 	add.w	lr, r8, #3
 80274be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80274c2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80274c6:	f1b9 0f00 	cmp.w	r9, #0
 80274ca:	f300 814f 	bgt.w	802776c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80274ce:	9b08      	ldr	r3, [sp, #32]
 80274d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80274d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80274d8:	44a0      	add	r8, r4
 80274da:	e0dc      	b.n	8027696 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 80274dc:	1c51      	adds	r1, r2, #1
 80274de:	f040 80ce 	bne.w	802767e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80274e2:	4593      	cmp	fp, r2
 80274e4:	f340 80cb 	ble.w	802767e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80274e8:	1c5a      	adds	r2, r3, #1
 80274ea:	f2c0 80c8 	blt.w	802767e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80274ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274f0:	4293      	cmp	r3, r2
 80274f2:	f280 80c4 	bge.w	802767e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80274f6:	9b08      	ldr	r3, [sp, #32]
 80274f8:	46c1      	mov	r9, r8
 80274fa:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80274fe:	930d      	str	r3, [sp, #52]	; 0x34
 8027500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027502:	2b00      	cmp	r3, #0
 8027504:	dde3      	ble.n	80274ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8027506:	1428      	asrs	r0, r5, #16
 8027508:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802750c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027510:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027514:	f100 8111 	bmi.w	802773a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8027518:	f100 0c01 	add.w	ip, r0, #1
 802751c:	45e3      	cmp	fp, ip
 802751e:	f340 810e 	ble.w	802773e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8027522:	2b00      	cmp	r3, #0
 8027524:	f2c0 810b 	blt.w	802773e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8027528:	f103 0c01 	add.w	ip, r3, #1
 802752c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802752e:	4564      	cmp	r4, ip
 8027530:	f340 8105 	ble.w	802773e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8027534:	fb03 030a 	mla	r3, r3, sl, r0
 8027538:	0858      	lsrs	r0, r3, #1
 802753a:	07dc      	lsls	r4, r3, #31
 802753c:	5c38      	ldrb	r0, [r7, r0]
 802753e:	bf54      	ite	pl
 8027540:	f000 000f 	andpl.w	r0, r0, #15
 8027544:	1100      	asrmi	r0, r0, #4
 8027546:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802754a:	b2c0      	uxtb	r0, r0
 802754c:	2a00      	cmp	r2, #0
 802754e:	f000 80e1 	beq.w	8027714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8027552:	f103 0e01 	add.w	lr, r3, #1
 8027556:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802755a:	f01e 0f01 	tst.w	lr, #1
 802755e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027562:	bf0c      	ite	eq
 8027564:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027568:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802756c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027570:	fa5f f48c 	uxtb.w	r4, ip
 8027574:	9410      	str	r4, [sp, #64]	; 0x40
 8027576:	b1f9      	cbz	r1, 80275b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8027578:	4453      	add	r3, sl
 802757a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802757e:	07dc      	lsls	r4, r3, #31
 8027580:	f103 0301 	add.w	r3, r3, #1
 8027584:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027588:	bf54      	ite	pl
 802758a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802758e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027592:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027596:	fa5f f48c 	uxtb.w	r4, ip
 802759a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802759e:	940a      	str	r4, [sp, #40]	; 0x28
 80275a0:	07dc      	lsls	r4, r3, #31
 80275a2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80275a6:	bf54      	ite	pl
 80275a8:	f00c 030f 	andpl.w	r3, ip, #15
 80275ac:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80275b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80275b4:	b2db      	uxtb	r3, r3
 80275b6:	9311      	str	r3, [sp, #68]	; 0x44
 80275b8:	b292      	uxth	r2, r2
 80275ba:	b289      	uxth	r1, r1
 80275bc:	0113      	lsls	r3, r2, #4
 80275be:	fb02 fc01 	mul.w	ip, r2, r1
 80275c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80275c4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80275c8:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80275cc:	eba3 030c 	sub.w	r3, r3, ip
 80275d0:	b289      	uxth	r1, r1
 80275d2:	b29b      	uxth	r3, r3
 80275d4:	ebae 0e01 	sub.w	lr, lr, r1
 80275d8:	4353      	muls	r3, r2
 80275da:	fa1f fe8e 	uxth.w	lr, lr
 80275de:	fb00 320e 	mla	r2, r0, lr, r3
 80275e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80275e4:	fb01 2203 	mla	r2, r1, r3, r2
 80275e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80275ea:	fb0c 2203 	mla	r2, ip, r3, r2
 80275ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80275f2:	2a00      	cmp	r2, #0
 80275f4:	d039      	beq.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80275f6:	4bbd      	ldr	r3, [pc, #756]	; (80278ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80275f8:	6819      	ldr	r1, [r3, #0]
 80275fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80275fc:	fa5f fc81 	uxtb.w	ip, r1
 8027600:	435a      	muls	r2, r3
 8027602:	1c53      	adds	r3, r2, #1
 8027604:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027608:	1212      	asrs	r2, r2, #8
 802760a:	b290      	uxth	r0, r2
 802760c:	43d2      	mvns	r2, r2
 802760e:	fb1c fc00 	smulbb	ip, ip, r0
 8027612:	b2d3      	uxtb	r3, r2
 8027614:	f899 2000 	ldrb.w	r2, [r9]
 8027618:	fb02 c203 	mla	r2, r2, r3, ip
 802761c:	b292      	uxth	r2, r2
 802761e:	f102 0c01 	add.w	ip, r2, #1
 8027622:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8027626:	f899 c001 	ldrb.w	ip, [r9, #1]
 802762a:	fb1c fc03 	smulbb	ip, ip, r3
 802762e:	1212      	asrs	r2, r2, #8
 8027630:	f889 2000 	strb.w	r2, [r9]
 8027634:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8027638:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802763c:	fb02 c200 	mla	r2, r2, r0, ip
 8027640:	b292      	uxth	r2, r2
 8027642:	f102 0c01 	add.w	ip, r2, #1
 8027646:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802764a:	1212      	asrs	r2, r2, #8
 802764c:	f889 2001 	strb.w	r2, [r9, #1]
 8027650:	f899 2002 	ldrb.w	r2, [r9, #2]
 8027654:	fb12 f303 	smulbb	r3, r2, r3
 8027658:	fb01 3300 	mla	r3, r1, r0, r3
 802765c:	b29b      	uxth	r3, r3
 802765e:	1c5a      	adds	r2, r3, #1
 8027660:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027664:	121b      	asrs	r3, r3, #8
 8027666:	f889 3002 	strb.w	r3, [r9, #2]
 802766a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802766c:	f109 0903 	add.w	r9, r9, #3
 8027670:	441d      	add	r5, r3
 8027672:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027674:	441e      	add	r6, r3
 8027676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027678:	3b01      	subs	r3, #1
 802767a:	930d      	str	r3, [sp, #52]	; 0x34
 802767c:	e740      	b.n	8027500 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802767e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027680:	f108 0803 	add.w	r8, r8, #3
 8027684:	441d      	add	r5, r3
 8027686:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027688:	441e      	add	r6, r3
 802768a:	9b08      	ldr	r3, [sp, #32]
 802768c:	3b01      	subs	r3, #1
 802768e:	9308      	str	r3, [sp, #32]
 8027690:	e6ef      	b.n	8027472 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027692:	f47f aeff 	bne.w	8027494 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8027696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027698:	2b00      	cmp	r3, #0
 802769a:	f340 8122 	ble.w	80278e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802769e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80276a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80276a4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80276a8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80276ac:	eef0 6a48 	vmov.f32	s13, s16
 80276b0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80276b4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80276b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276bc:	ee16 5a90 	vmov	r5, s13
 80276c0:	eef0 6a68 	vmov.f32	s13, s17
 80276c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80276c8:	ee16 6a90 	vmov	r6, s13
 80276cc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80276d0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80276d4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80276d8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80276dc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80276e0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80276e4:	ee18 2a10 	vmov	r2, s16
 80276e8:	eeb0 8a47 	vmov.f32	s16, s14
 80276ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80276f0:	ee18 2a90 	vmov	r2, s17
 80276f4:	932b      	str	r3, [sp, #172]	; 0xac
 80276f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80276f8:	eef0 8a67 	vmov.f32	s17, s15
 80276fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8027700:	932c      	str	r3, [sp, #176]	; 0xb0
 8027702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027706:	3b01      	subs	r3, #1
 8027708:	930c      	str	r3, [sp, #48]	; 0x30
 802770a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802770c:	bf08      	it	eq
 802770e:	4613      	moveq	r3, r2
 8027710:	9308      	str	r3, [sp, #32]
 8027712:	e6a7      	b.n	8027464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8027714:	2900      	cmp	r1, #0
 8027716:	f43f af4f 	beq.w	80275b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802771a:	4453      	add	r3, sl
 802771c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027720:	07db      	lsls	r3, r3, #31
 8027722:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027726:	bf54      	ite	pl
 8027728:	f00c 030f 	andpl.w	r3, ip, #15
 802772c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8027730:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027734:	b2db      	uxtb	r3, r3
 8027736:	930a      	str	r3, [sp, #40]	; 0x28
 8027738:	e73e      	b.n	80275b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802773a:	1c44      	adds	r4, r0, #1
 802773c:	d195      	bne.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802773e:	4583      	cmp	fp, r0
 8027740:	dd93      	ble.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8027742:	1c5c      	adds	r4, r3, #1
 8027744:	db91      	blt.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8027746:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027748:	429c      	cmp	r4, r3
 802774a:	dd8e      	ble.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802774c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802774e:	9002      	str	r0, [sp, #8]
 8027750:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027752:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027758:	463a      	mov	r2, r7
 802775a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802775e:	e9cd b300 	strd	fp, r3, [sp]
 8027762:	4649      	mov	r1, r9
 8027764:	4653      	mov	r3, sl
 8027766:	f7ff fd61 	bl	802722c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802776a:	e77e      	b.n	802766a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802776c:	142a      	asrs	r2, r5, #16
 802776e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027772:	1433      	asrs	r3, r6, #16
 8027774:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027778:	fb0a 2303 	mla	r3, sl, r3, r2
 802777c:	085a      	lsrs	r2, r3, #1
 802777e:	07dc      	lsls	r4, r3, #31
 8027780:	5cba      	ldrb	r2, [r7, r2]
 8027782:	bf54      	ite	pl
 8027784:	f002 020f 	andpl.w	r2, r2, #15
 8027788:	1112      	asrmi	r2, r2, #4
 802778a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802778e:	b2d2      	uxtb	r2, r2
 8027790:	2900      	cmp	r1, #0
 8027792:	f000 8093 	beq.w	80278bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8027796:	1c5c      	adds	r4, r3, #1
 8027798:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 802779c:	07e4      	lsls	r4, r4, #31
 802779e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80277a2:	bf54      	ite	pl
 80277a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80277a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80277ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80277b0:	fa5f f48c 	uxtb.w	r4, ip
 80277b4:	9412      	str	r4, [sp, #72]	; 0x48
 80277b6:	b300      	cbz	r0, 80277fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80277b8:	4453      	add	r3, sl
 80277ba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80277be:	07dc      	lsls	r4, r3, #31
 80277c0:	f103 0301 	add.w	r3, r3, #1
 80277c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80277c8:	bf54      	ite	pl
 80277ca:	f00c 0c0f 	andpl.w	ip, ip, #15
 80277ce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80277d2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80277d6:	fa5f f48c 	uxtb.w	r4, ip
 80277da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80277de:	940b      	str	r4, [sp, #44]	; 0x2c
 80277e0:	07dc      	lsls	r4, r3, #31
 80277e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80277e6:	bf54      	ite	pl
 80277e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80277ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80277f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80277f4:	fa5f f38c 	uxtb.w	r3, ip
 80277f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80277fa:	b289      	uxth	r1, r1
 80277fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80277fe:	b280      	uxth	r0, r0
 8027800:	fb01 f300 	mul.w	r3, r1, r0
 8027804:	0109      	lsls	r1, r1, #4
 8027806:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802780a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802780e:	1ac9      	subs	r1, r1, r3
 8027810:	b280      	uxth	r0, r0
 8027812:	b289      	uxth	r1, r1
 8027814:	ebac 0c00 	sub.w	ip, ip, r0
 8027818:	4361      	muls	r1, r4
 802781a:	fa1f fc8c 	uxth.w	ip, ip
 802781e:	fb02 120c 	mla	r2, r2, ip, r1
 8027822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027824:	fb00 2001 	mla	r0, r0, r1, r2
 8027828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802782a:	fb03 0302 	mla	r3, r3, r2, r0
 802782e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027832:	2b00      	cmp	r3, #0
 8027834:	d039      	beq.n	80278aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8027836:	4a2d      	ldr	r2, [pc, #180]	; (80278ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8027838:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802783c:	6810      	ldr	r0, [r2, #0]
 802783e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027840:	fa5f fc80 	uxtb.w	ip, r0
 8027844:	4353      	muls	r3, r2
 8027846:	1c5a      	adds	r2, r3, #1
 8027848:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802784c:	121b      	asrs	r3, r3, #8
 802784e:	b29a      	uxth	r2, r3
 8027850:	43db      	mvns	r3, r3
 8027852:	fb1c fc02 	smulbb	ip, ip, r2
 8027856:	b2db      	uxtb	r3, r3
 8027858:	fb01 c103 	mla	r1, r1, r3, ip
 802785c:	b289      	uxth	r1, r1
 802785e:	f101 0c01 	add.w	ip, r1, #1
 8027862:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8027866:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802786a:	fb1c fc03 	smulbb	ip, ip, r3
 802786e:	1209      	asrs	r1, r1, #8
 8027870:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027874:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8027878:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802787c:	fb01 c102 	mla	r1, r1, r2, ip
 8027880:	b289      	uxth	r1, r1
 8027882:	f101 0c01 	add.w	ip, r1, #1
 8027886:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802788a:	1209      	asrs	r1, r1, #8
 802788c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8027890:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8027894:	fb11 f303 	smulbb	r3, r1, r3
 8027898:	fb00 3002 	mla	r0, r0, r2, r3
 802789c:	b280      	uxth	r0, r0
 802789e:	1c42      	adds	r2, r0, #1
 80278a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80278a4:	1200      	asrs	r0, r0, #8
 80278a6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80278aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80278ac:	f10e 0e03 	add.w	lr, lr, #3
 80278b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80278b4:	441d      	add	r5, r3
 80278b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80278b8:	441e      	add	r6, r3
 80278ba:	e604      	b.n	80274c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80278bc:	2800      	cmp	r0, #0
 80278be:	d09c      	beq.n	80277fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80278c0:	4453      	add	r3, sl
 80278c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80278c6:	07db      	lsls	r3, r3, #31
 80278c8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80278cc:	bf54      	ite	pl
 80278ce:	f00c 0c0f 	andpl.w	ip, ip, #15
 80278d2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80278d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80278da:	fa5f f38c 	uxtb.w	r3, ip
 80278de:	930b      	str	r3, [sp, #44]	; 0x2c
 80278e0:	e78b      	b.n	80277fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80278e2:	b017      	add	sp, #92	; 0x5c
 80278e4:	ecbd 8b08 	vpop	{d8-d11}
 80278e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80278ec:	2000bf40 	.word	0x2000bf40

080278f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80278f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278f4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80278f8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80278fc:	2800      	cmp	r0, #0
 80278fe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8027902:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8027906:	fb0c 0e03 	mla	lr, ip, r3, r0
 802790a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802790e:	db6b      	blt.n	80279e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8027910:	4580      	cmp	r8, r0
 8027912:	dd69      	ble.n	80279e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8027914:	f1bc 0f00 	cmp.w	ip, #0
 8027918:	db66      	blt.n	80279e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802791a:	45e1      	cmp	r9, ip
 802791c:	dd64      	ble.n	80279e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802791e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027922:	f01e 0f01 	tst.w	lr, #1
 8027926:	5d16      	ldrb	r6, [r2, r4]
 8027928:	bf0c      	ite	eq
 802792a:	f006 060f 	andeq.w	r6, r6, #15
 802792e:	1136      	asrne	r6, r6, #4
 8027930:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027934:	b2f6      	uxtb	r6, r6
 8027936:	f110 0a01 	adds.w	sl, r0, #1
 802793a:	d457      	bmi.n	80279ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802793c:	45d0      	cmp	r8, sl
 802793e:	dd55      	ble.n	80279ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8027940:	f1bc 0f00 	cmp.w	ip, #0
 8027944:	db52      	blt.n	80279ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8027946:	45e1      	cmp	r9, ip
 8027948:	dd50      	ble.n	80279ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802794a:	2f00      	cmp	r7, #0
 802794c:	f000 80a5 	beq.w	8027a9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8027950:	f10e 0b01 	add.w	fp, lr, #1
 8027954:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027958:	f01b 0f01 	tst.w	fp, #1
 802795c:	5d14      	ldrb	r4, [r2, r4]
 802795e:	bf0c      	ite	eq
 8027960:	f004 040f 	andeq.w	r4, r4, #15
 8027964:	1124      	asrne	r4, r4, #4
 8027966:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802796a:	b2e4      	uxtb	r4, r4
 802796c:	2d00      	cmp	r5, #0
 802796e:	f000 808f 	beq.w	8027a90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8027972:	2800      	cmp	r0, #0
 8027974:	f10c 0c01 	add.w	ip, ip, #1
 8027978:	db3c      	blt.n	80279f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802797a:	4580      	cmp	r8, r0
 802797c:	dd3a      	ble.n	80279f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802797e:	f1bc 0f00 	cmp.w	ip, #0
 8027982:	db37      	blt.n	80279f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8027984:	45e1      	cmp	r9, ip
 8027986:	dd35      	ble.n	80279f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8027988:	eb03 0b0e 	add.w	fp, r3, lr
 802798c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8027990:	f01b 0f01 	tst.w	fp, #1
 8027994:	5c10      	ldrb	r0, [r2, r0]
 8027996:	bf0c      	ite	eq
 8027998:	f000 000f 	andeq.w	r0, r0, #15
 802799c:	1100      	asrne	r0, r0, #4
 802799e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80279a2:	b2c0      	uxtb	r0, r0
 80279a4:	f1ba 0f00 	cmp.w	sl, #0
 80279a8:	db26      	blt.n	80279f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80279aa:	45d0      	cmp	r8, sl
 80279ac:	dd24      	ble.n	80279f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80279ae:	f1bc 0f00 	cmp.w	ip, #0
 80279b2:	db21      	blt.n	80279f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80279b4:	45e1      	cmp	r9, ip
 80279b6:	dd1f      	ble.n	80279f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80279b8:	b307      	cbz	r7, 80279fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80279ba:	3301      	adds	r3, #1
 80279bc:	449e      	add	lr, r3
 80279be:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80279c2:	f01e 0f01 	tst.w	lr, #1
 80279c6:	5cd3      	ldrb	r3, [r2, r3]
 80279c8:	bf0c      	ite	eq
 80279ca:	f003 030f 	andeq.w	r3, r3, #15
 80279ce:	111b      	asrne	r3, r3, #4
 80279d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80279d4:	b2db      	uxtb	r3, r3
 80279d6:	2f0f      	cmp	r7, #15
 80279d8:	d911      	bls.n	80279fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80279da:	4b32      	ldr	r3, [pc, #200]	; (8027aa4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80279dc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80279e0:	4a31      	ldr	r2, [pc, #196]	; (8027aa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80279e2:	4832      	ldr	r0, [pc, #200]	; (8027aac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80279e4:	f001 fff8 	bl	80299d8 <__assert_func>
 80279e8:	2600      	movs	r6, #0
 80279ea:	e7a4      	b.n	8027936 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80279ec:	2400      	movs	r4, #0
 80279ee:	e7bd      	b.n	802796c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80279f0:	463c      	mov	r4, r7
 80279f2:	e7be      	b.n	8027972 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80279f4:	2000      	movs	r0, #0
 80279f6:	e7d5      	b.n	80279a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80279f8:	2300      	movs	r3, #0
 80279fa:	e7ec      	b.n	80279d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80279fc:	463b      	mov	r3, r7
 80279fe:	2d0f      	cmp	r5, #15
 8027a00:	d8eb      	bhi.n	80279da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8027a02:	b2bf      	uxth	r7, r7
 8027a04:	b2ad      	uxth	r5, r5
 8027a06:	fb07 f205 	mul.w	r2, r7, r5
 8027a0a:	013f      	lsls	r7, r7, #4
 8027a0c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8027a10:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8027a14:	1abf      	subs	r7, r7, r2
 8027a16:	b2ad      	uxth	r5, r5
 8027a18:	b2bf      	uxth	r7, r7
 8027a1a:	ebac 0c05 	sub.w	ip, ip, r5
 8027a1e:	437c      	muls	r4, r7
 8027a20:	fa1f fc8c 	uxth.w	ip, ip
 8027a24:	fb06 440c 	mla	r4, r6, ip, r4
 8027a28:	fb05 4400 	mla	r4, r5, r0, r4
 8027a2c:	fb02 4303 	mla	r3, r2, r3, r4
 8027a30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a34:	b353      	cbz	r3, 8027a8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8027a36:	4a1e      	ldr	r2, [pc, #120]	; (8027ab0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8027a38:	7808      	ldrb	r0, [r1, #0]
 8027a3a:	6814      	ldr	r4, [r2, #0]
 8027a3c:	b29a      	uxth	r2, r3
 8027a3e:	43db      	mvns	r3, r3
 8027a40:	b2e5      	uxtb	r5, r4
 8027a42:	b2db      	uxtb	r3, r3
 8027a44:	fb15 f502 	smulbb	r5, r5, r2
 8027a48:	fb00 5003 	mla	r0, r0, r3, r5
 8027a4c:	b280      	uxth	r0, r0
 8027a4e:	1c45      	adds	r5, r0, #1
 8027a50:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027a54:	784d      	ldrb	r5, [r1, #1]
 8027a56:	fb15 f503 	smulbb	r5, r5, r3
 8027a5a:	1200      	asrs	r0, r0, #8
 8027a5c:	7008      	strb	r0, [r1, #0]
 8027a5e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8027a62:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8027a66:	fb00 5002 	mla	r0, r0, r2, r5
 8027a6a:	b280      	uxth	r0, r0
 8027a6c:	1c45      	adds	r5, r0, #1
 8027a6e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027a72:	1200      	asrs	r0, r0, #8
 8027a74:	7048      	strb	r0, [r1, #1]
 8027a76:	7888      	ldrb	r0, [r1, #2]
 8027a78:	fb10 f303 	smulbb	r3, r0, r3
 8027a7c:	fb04 3202 	mla	r2, r4, r2, r3
 8027a80:	b292      	uxth	r2, r2
 8027a82:	1c53      	adds	r3, r2, #1
 8027a84:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027a88:	1212      	asrs	r2, r2, #8
 8027a8a:	708a      	strb	r2, [r1, #2]
 8027a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a90:	2f0f      	cmp	r7, #15
 8027a92:	d8a2      	bhi.n	80279da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8027a94:	462b      	mov	r3, r5
 8027a96:	4628      	mov	r0, r5
 8027a98:	e7b3      	b.n	8027a02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8027a9a:	2d00      	cmp	r5, #0
 8027a9c:	d1a8      	bne.n	80279f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8027a9e:	462c      	mov	r4, r5
 8027aa0:	e7f8      	b.n	8027a94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8027aa2:	bf00      	nop
 8027aa4:	0802efeb 	.word	0x0802efeb
 8027aa8:	0802f4e2 	.word	0x0802f4e2
 8027aac:	0802f0b4 	.word	0x0802f0b4
 8027ab0:	2000bf40 	.word	0x2000bf40

08027ab4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8027ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ab8:	ed2d 8b08 	vpush	{d8-d11}
 8027abc:	b095      	sub	sp, #84	; 0x54
 8027abe:	461c      	mov	r4, r3
 8027ac0:	eeb0 aa40 	vmov.f32	s20, s0
 8027ac4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8027ac8:	eef0 9a60 	vmov.f32	s19, s1
 8027acc:	920e      	str	r2, [sp, #56]	; 0x38
 8027ace:	eeb0 9a41 	vmov.f32	s18, s2
 8027ad2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027ad4:	eeb0 8a62 	vmov.f32	s16, s5
 8027ad8:	9307      	str	r3, [sp, #28]
 8027ada:	eef0 8a43 	vmov.f32	s17, s6
 8027ade:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8027ae2:	eef0 ba44 	vmov.f32	s23, s8
 8027ae6:	9013      	str	r0, [sp, #76]	; 0x4c
 8027ae8:	eeb0 ba64 	vmov.f32	s22, s9
 8027aec:	9109      	str	r1, [sp, #36]	; 0x24
 8027aee:	eef0 aa45 	vmov.f32	s21, s10
 8027af2:	9308      	str	r3, [sp, #32]
 8027af4:	6850      	ldr	r0, [r2, #4]
 8027af6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8027afa:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8027afe:	fb00 1803 	mla	r8, r0, r3, r1
 8027b02:	6813      	ldr	r3, [r2, #0]
 8027b04:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027b08:	4498      	add	r8, r3
 8027b0a:	9b07      	ldr	r3, [sp, #28]
 8027b0c:	3301      	adds	r3, #1
 8027b0e:	f023 0301 	bic.w	r3, r3, #1
 8027b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b16:	681f      	ldr	r7, [r3, #0]
 8027b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b1a:	2b00      	cmp	r3, #0
 8027b1c:	dc03      	bgt.n	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8027b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	f340 8238 	ble.w	8027f96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8027b26:	2c00      	cmp	r4, #0
 8027b28:	f340 8109 	ble.w	8027d3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8027b2c:	142a      	asrs	r2, r5, #16
 8027b2e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b32:	d42b      	bmi.n	8027b8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8027b34:	1c51      	adds	r1, r2, #1
 8027b36:	9807      	ldr	r0, [sp, #28]
 8027b38:	4288      	cmp	r0, r1
 8027b3a:	dd2a      	ble.n	8027b92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8027b3c:	2b00      	cmp	r3, #0
 8027b3e:	db28      	blt.n	8027b92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8027b40:	1c59      	adds	r1, r3, #1
 8027b42:	9808      	ldr	r0, [sp, #32]
 8027b44:	4288      	cmp	r0, r1
 8027b46:	dd24      	ble.n	8027b92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8027b48:	1e63      	subs	r3, r4, #1
 8027b4a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027b4c:	fb02 5203 	mla	r2, r2, r3, r5
 8027b50:	1412      	asrs	r2, r2, #16
 8027b52:	d429      	bmi.n	8027ba8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8027b54:	3201      	adds	r2, #1
 8027b56:	9907      	ldr	r1, [sp, #28]
 8027b58:	4291      	cmp	r1, r2
 8027b5a:	dd25      	ble.n	8027ba8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8027b5c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027b5e:	fb02 6303 	mla	r3, r2, r3, r6
 8027b62:	141b      	asrs	r3, r3, #16
 8027b64:	d420      	bmi.n	8027ba8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8027b66:	3301      	adds	r3, #1
 8027b68:	9a08      	ldr	r2, [sp, #32]
 8027b6a:	429a      	cmp	r2, r3
 8027b6c:	dd1c      	ble.n	8027ba8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8027b6e:	f108 0e03 	add.w	lr, r8, #3
 8027b72:	46a1      	mov	r9, r4
 8027b74:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8027b78:	f1b9 0f00 	cmp.w	r9, #0
 8027b7c:	f300 8155 	bgt.w	8027e2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8027b80:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8027b84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027b88:	44a0      	add	r8, r4
 8027b8a:	e0da      	b.n	8027d42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8027b8c:	1c50      	adds	r0, r2, #1
 8027b8e:	f040 80ce 	bne.w	8027d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8027b92:	9907      	ldr	r1, [sp, #28]
 8027b94:	4291      	cmp	r1, r2
 8027b96:	f340 80ca 	ble.w	8027d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8027b9a:	1c59      	adds	r1, r3, #1
 8027b9c:	f2c0 80c7 	blt.w	8027d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8027ba0:	9a08      	ldr	r2, [sp, #32]
 8027ba2:	4293      	cmp	r3, r2
 8027ba4:	f280 80c3 	bge.w	8027d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8027ba8:	46a3      	mov	fp, r4
 8027baa:	46c1      	mov	r9, r8
 8027bac:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8027bb0:	f1bb 0f00 	cmp.w	fp, #0
 8027bb4:	dde4      	ble.n	8027b80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8027bb6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8027bba:	1428      	asrs	r0, r5, #16
 8027bbc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027bc0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8027bc6:	f100 8116 	bmi.w	8027df6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8027bca:	f100 0c01 	add.w	ip, r0, #1
 8027bce:	9a07      	ldr	r2, [sp, #28]
 8027bd0:	4562      	cmp	r2, ip
 8027bd2:	f340 8112 	ble.w	8027dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8027bd6:	2b00      	cmp	r3, #0
 8027bd8:	f2c0 810f 	blt.w	8027dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8027bdc:	f103 0c01 	add.w	ip, r3, #1
 8027be0:	9a08      	ldr	r2, [sp, #32]
 8027be2:	4562      	cmp	r2, ip
 8027be4:	f340 8109 	ble.w	8027dfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8027be8:	fb03 030a 	mla	r3, r3, sl, r0
 8027bec:	0858      	lsrs	r0, r3, #1
 8027bee:	07da      	lsls	r2, r3, #31
 8027bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027bf2:	5c38      	ldrb	r0, [r7, r0]
 8027bf4:	bf54      	ite	pl
 8027bf6:	f000 000f 	andpl.w	r0, r0, #15
 8027bfa:	1100      	asrmi	r0, r0, #4
 8027bfc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c00:	b2c0      	uxtb	r0, r0
 8027c02:	2a00      	cmp	r2, #0
 8027c04:	f000 80dd 	beq.w	8027dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8027c08:	f103 0e01 	add.w	lr, r3, #1
 8027c0c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027c10:	f01e 0f01 	tst.w	lr, #1
 8027c14:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027c18:	bf0c      	ite	eq
 8027c1a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027c1e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027c22:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027c26:	fa5f fc8c 	uxtb.w	ip, ip
 8027c2a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8027c2e:	b301      	cbz	r1, 8027c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8027c30:	4453      	add	r3, sl
 8027c32:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027c36:	07da      	lsls	r2, r3, #31
 8027c38:	f103 0301 	add.w	r3, r3, #1
 8027c3c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027c40:	bf54      	ite	pl
 8027c42:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027c46:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027c4a:	07da      	lsls	r2, r3, #31
 8027c4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027c50:	fa5f fc8c 	uxtb.w	ip, ip
 8027c54:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8027c58:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027c5c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027c60:	bf54      	ite	pl
 8027c62:	f00c 030f 	andpl.w	r3, ip, #15
 8027c66:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8027c6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	9310      	str	r3, [sp, #64]	; 0x40
 8027c72:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8027c76:	b289      	uxth	r1, r1
 8027c78:	fb02 f301 	mul.w	r3, r2, r1
 8027c7c:	0112      	lsls	r2, r2, #4
 8027c7e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027c82:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8027c86:	1ad2      	subs	r2, r2, r3
 8027c88:	fa1f fe81 	uxth.w	lr, r1
 8027c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027c8e:	b292      	uxth	r2, r2
 8027c90:	ebac 0c0e 	sub.w	ip, ip, lr
 8027c94:	434a      	muls	r2, r1
 8027c96:	fa1f fc8c 	uxth.w	ip, ip
 8027c9a:	fb00 200c 	mla	r0, r0, ip, r2
 8027c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027ca0:	fb0e 0002 	mla	r0, lr, r2, r0
 8027ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027ca6:	fb03 0002 	mla	r0, r3, r2, r0
 8027caa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027cae:	b3a8      	cbz	r0, 8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027cb0:	4bbb      	ldr	r3, [pc, #748]	; (8027fa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8027cb2:	28ff      	cmp	r0, #255	; 0xff
 8027cb4:	681b      	ldr	r3, [r3, #0]
 8027cb6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8027cba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8027cbe:	b2db      	uxtb	r3, r3
 8027cc0:	f000 8092 	beq.w	8027de8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8027cc4:	b282      	uxth	r2, r0
 8027cc6:	43c0      	mvns	r0, r0
 8027cc8:	f899 e000 	ldrb.w	lr, [r9]
 8027ccc:	fb13 f302 	smulbb	r3, r3, r2
 8027cd0:	b2c0      	uxtb	r0, r0
 8027cd2:	fb11 f102 	smulbb	r1, r1, r2
 8027cd6:	fb0e 3300 	mla	r3, lr, r0, r3
 8027cda:	fb1c f202 	smulbb	r2, ip, r2
 8027cde:	b29b      	uxth	r3, r3
 8027ce0:	f103 0e01 	add.w	lr, r3, #1
 8027ce4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8027ce8:	121b      	asrs	r3, r3, #8
 8027cea:	f889 3000 	strb.w	r3, [r9]
 8027cee:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027cf2:	fb03 1100 	mla	r1, r3, r0, r1
 8027cf6:	b289      	uxth	r1, r1
 8027cf8:	1c4b      	adds	r3, r1, #1
 8027cfa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027cfe:	f899 3002 	ldrb.w	r3, [r9, #2]
 8027d02:	fb03 2000 	mla	r0, r3, r0, r2
 8027d06:	1209      	asrs	r1, r1, #8
 8027d08:	b280      	uxth	r0, r0
 8027d0a:	f889 1001 	strb.w	r1, [r9, #1]
 8027d0e:	f100 0c01 	add.w	ip, r0, #1
 8027d12:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8027d16:	1200      	asrs	r0, r0, #8
 8027d18:	f889 0002 	strb.w	r0, [r9, #2]
 8027d1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d1e:	f109 0903 	add.w	r9, r9, #3
 8027d22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027d26:	441d      	add	r5, r3
 8027d28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027d2a:	441e      	add	r6, r3
 8027d2c:	e740      	b.n	8027bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8027d2e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d30:	3c01      	subs	r4, #1
 8027d32:	f108 0803 	add.w	r8, r8, #3
 8027d36:	441d      	add	r5, r3
 8027d38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027d3a:	441e      	add	r6, r3
 8027d3c:	e6f3      	b.n	8027b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8027d3e:	f47f af03 	bne.w	8027b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8027d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d44:	2b00      	cmp	r3, #0
 8027d46:	f340 8126 	ble.w	8027f96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8027d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027d50:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027d54:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027d58:	eef0 6a48 	vmov.f32	s13, s16
 8027d5c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027d60:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027d64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d68:	ee16 5a90 	vmov	r5, s13
 8027d6c:	eef0 6a68 	vmov.f32	s13, s17
 8027d70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d74:	ee16 6a90 	vmov	r6, s13
 8027d78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027d7c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027d80:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027d84:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027d88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027d8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027d90:	ee18 2a10 	vmov	r2, s16
 8027d94:	eeb0 8a47 	vmov.f32	s16, s14
 8027d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d9c:	ee18 2a90 	vmov	r2, s17
 8027da0:	9329      	str	r3, [sp, #164]	; 0xa4
 8027da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027da4:	eef0 8a67 	vmov.f32	s17, s15
 8027da8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027dac:	932a      	str	r3, [sp, #168]	; 0xa8
 8027dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027db2:	3b01      	subs	r3, #1
 8027db4:	9309      	str	r3, [sp, #36]	; 0x24
 8027db6:	bf08      	it	eq
 8027db8:	4614      	moveq	r4, r2
 8027dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027dbc:	bf18      	it	ne
 8027dbe:	461c      	movne	r4, r3
 8027dc0:	e6aa      	b.n	8027b18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8027dc2:	2900      	cmp	r1, #0
 8027dc4:	f43f af55 	beq.w	8027c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8027dc8:	4453      	add	r3, sl
 8027dca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027dce:	07db      	lsls	r3, r3, #31
 8027dd0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027dd4:	bf54      	ite	pl
 8027dd6:	f00c 030f 	andpl.w	r3, ip, #15
 8027dda:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8027dde:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027de2:	b2db      	uxtb	r3, r3
 8027de4:	930c      	str	r3, [sp, #48]	; 0x30
 8027de6:	e744      	b.n	8027c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8027de8:	f889 3000 	strb.w	r3, [r9]
 8027dec:	f889 1001 	strb.w	r1, [r9, #1]
 8027df0:	f889 c002 	strb.w	ip, [r9, #2]
 8027df4:	e792      	b.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027df6:	1c42      	adds	r2, r0, #1
 8027df8:	d190      	bne.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027dfa:	9a07      	ldr	r2, [sp, #28]
 8027dfc:	4282      	cmp	r2, r0
 8027dfe:	dd8d      	ble.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027e00:	1c5a      	adds	r2, r3, #1
 8027e02:	db8b      	blt.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027e04:	9a08      	ldr	r2, [sp, #32]
 8027e06:	429a      	cmp	r2, r3
 8027e08:	dd88      	ble.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e0c:	9105      	str	r1, [sp, #20]
 8027e0e:	4649      	mov	r1, r9
 8027e10:	9002      	str	r0, [sp, #8]
 8027e12:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027e14:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027e18:	9b08      	ldr	r3, [sp, #32]
 8027e1a:	463a      	mov	r2, r7
 8027e1c:	9301      	str	r3, [sp, #4]
 8027e1e:	9b07      	ldr	r3, [sp, #28]
 8027e20:	9300      	str	r3, [sp, #0]
 8027e22:	4653      	mov	r3, sl
 8027e24:	f7ff fd64 	bl	80278f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8027e28:	e778      	b.n	8027d1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8027e2a:	142a      	asrs	r2, r5, #16
 8027e2c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027e30:	1433      	asrs	r3, r6, #16
 8027e32:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027e36:	fb0a 2303 	mla	r3, sl, r3, r2
 8027e3a:	085a      	lsrs	r2, r3, #1
 8027e3c:	07d9      	lsls	r1, r3, #31
 8027e3e:	5cba      	ldrb	r2, [r7, r2]
 8027e40:	bf54      	ite	pl
 8027e42:	f002 020f 	andpl.w	r2, r2, #15
 8027e46:	1112      	asrmi	r2, r2, #4
 8027e48:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027e4c:	b2d2      	uxtb	r2, r2
 8027e4e:	2800      	cmp	r0, #0
 8027e50:	f000 808a 	beq.w	8027f68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8027e54:	f103 0b01 	add.w	fp, r3, #1
 8027e58:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8027e5c:	f01b 0f01 	tst.w	fp, #1
 8027e60:	5c79      	ldrb	r1, [r7, r1]
 8027e62:	bf0c      	ite	eq
 8027e64:	f001 010f 	andeq.w	r1, r1, #15
 8027e68:	1109      	asrne	r1, r1, #4
 8027e6a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027e6e:	b2c9      	uxtb	r1, r1
 8027e70:	9111      	str	r1, [sp, #68]	; 0x44
 8027e72:	f1bc 0f00 	cmp.w	ip, #0
 8027e76:	d019      	beq.n	8027eac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8027e78:	4453      	add	r3, sl
 8027e7a:	0859      	lsrs	r1, r3, #1
 8027e7c:	f013 0f01 	tst.w	r3, #1
 8027e80:	f103 0301 	add.w	r3, r3, #1
 8027e84:	5c79      	ldrb	r1, [r7, r1]
 8027e86:	bf0c      	ite	eq
 8027e88:	f001 010f 	andeq.w	r1, r1, #15
 8027e8c:	1109      	asrne	r1, r1, #4
 8027e8e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027e92:	b2c9      	uxtb	r1, r1
 8027e94:	910d      	str	r1, [sp, #52]	; 0x34
 8027e96:	0859      	lsrs	r1, r3, #1
 8027e98:	07db      	lsls	r3, r3, #31
 8027e9a:	5c79      	ldrb	r1, [r7, r1]
 8027e9c:	bf54      	ite	pl
 8027e9e:	f001 010f 	andpl.w	r1, r1, #15
 8027ea2:	1109      	asrmi	r1, r1, #4
 8027ea4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027ea8:	b2c9      	uxtb	r1, r1
 8027eaa:	9112      	str	r1, [sp, #72]	; 0x48
 8027eac:	b280      	uxth	r0, r0
 8027eae:	fa1f fc8c 	uxth.w	ip, ip
 8027eb2:	fb00 f30c 	mul.w	r3, r0, ip
 8027eb6:	0100      	lsls	r0, r0, #4
 8027eb8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8027ebc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8027ec0:	1ac0      	subs	r0, r0, r3
 8027ec2:	fa1f fc8c 	uxth.w	ip, ip
 8027ec6:	b280      	uxth	r0, r0
 8027ec8:	eba1 010c 	sub.w	r1, r1, ip
 8027ecc:	fa1f fb81 	uxth.w	fp, r1
 8027ed0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027ed2:	4348      	muls	r0, r1
 8027ed4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027ed6:	fb02 020b 	mla	r2, r2, fp, r0
 8027eda:	fb0c 2c01 	mla	ip, ip, r1, r2
 8027ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027ee0:	fb03 c302 	mla	r3, r3, r2, ip
 8027ee4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027ee8:	b3ab      	cbz	r3, 8027f56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8027eea:	4a2d      	ldr	r2, [pc, #180]	; (8027fa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8027eec:	2bff      	cmp	r3, #255	; 0xff
 8027eee:	6811      	ldr	r1, [r2, #0]
 8027ef0:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8027ef4:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8027ef8:	b2c9      	uxtb	r1, r1
 8027efa:	d045      	beq.n	8027f88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8027efc:	b298      	uxth	r0, r3
 8027efe:	43db      	mvns	r3, r3
 8027f00:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8027f04:	fb11 f100 	smulbb	r1, r1, r0
 8027f08:	b2db      	uxtb	r3, r3
 8027f0a:	fb1c fc00 	smulbb	ip, ip, r0
 8027f0e:	fb02 1103 	mla	r1, r2, r3, r1
 8027f12:	fb1b f000 	smulbb	r0, fp, r0
 8027f16:	b289      	uxth	r1, r1
 8027f18:	1c4a      	adds	r2, r1, #1
 8027f1a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027f1e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8027f22:	fb02 cc03 	mla	ip, r2, r3, ip
 8027f26:	1209      	asrs	r1, r1, #8
 8027f28:	fa1f fc8c 	uxth.w	ip, ip
 8027f2c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027f30:	f10c 0201 	add.w	r2, ip, #1
 8027f34:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8027f38:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8027f3c:	fb02 0303 	mla	r3, r2, r3, r0
 8027f40:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027f44:	b29b      	uxth	r3, r3
 8027f46:	f80e cc02 	strb.w	ip, [lr, #-2]
 8027f4a:	1c5a      	adds	r2, r3, #1
 8027f4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f50:	121b      	asrs	r3, r3, #8
 8027f52:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8027f56:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027f58:	f10e 0e03 	add.w	lr, lr, #3
 8027f5c:	f109 39ff 	add.w	r9, r9, #4294967295
 8027f60:	441d      	add	r5, r3
 8027f62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027f64:	441e      	add	r6, r3
 8027f66:	e607      	b.n	8027b78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8027f68:	f1bc 0f00 	cmp.w	ip, #0
 8027f6c:	d09e      	beq.n	8027eac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8027f6e:	4453      	add	r3, sl
 8027f70:	0859      	lsrs	r1, r3, #1
 8027f72:	07db      	lsls	r3, r3, #31
 8027f74:	5c79      	ldrb	r1, [r7, r1]
 8027f76:	bf54      	ite	pl
 8027f78:	f001 010f 	andpl.w	r1, r1, #15
 8027f7c:	1109      	asrmi	r1, r1, #4
 8027f7e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027f82:	b2c9      	uxtb	r1, r1
 8027f84:	910d      	str	r1, [sp, #52]	; 0x34
 8027f86:	e791      	b.n	8027eac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8027f88:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8027f8c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8027f90:	f80e bc01 	strb.w	fp, [lr, #-1]
 8027f94:	e7df      	b.n	8027f56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8027f96:	b015      	add	sp, #84	; 0x54
 8027f98:	ecbd 8b08 	vpop	{d8-d11}
 8027f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fa0:	2000bf40 	.word	0x2000bf40

08027fa4 <CRC_Lock>:
 8027fa4:	4a1d      	ldr	r2, [pc, #116]	; (802801c <CRC_Lock+0x78>)
 8027fa6:	b530      	push	{r4, r5, lr}
 8027fa8:	6813      	ldr	r3, [r2, #0]
 8027faa:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8027fae:	f24c 2540 	movw	r5, #49728	; 0xc240
 8027fb2:	f023 0301 	bic.w	r3, r3, #1
 8027fb6:	6013      	str	r3, [r2, #0]
 8027fb8:	4b19      	ldr	r3, [pc, #100]	; (8028020 <CRC_Lock+0x7c>)
 8027fba:	681a      	ldr	r2, [r3, #0]
 8027fbc:	4022      	ands	r2, r4
 8027fbe:	42aa      	cmp	r2, r5
 8027fc0:	d005      	beq.n	8027fce <CRC_Lock+0x2a>
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8027fc8:	4023      	ands	r3, r4
 8027fca:	4293      	cmp	r3, r2
 8027fcc:	d11d      	bne.n	802800a <CRC_Lock+0x66>
 8027fce:	4b15      	ldr	r3, [pc, #84]	; (8028024 <CRC_Lock+0x80>)
 8027fd0:	681b      	ldr	r3, [r3, #0]
 8027fd2:	b9d3      	cbnz	r3, 802800a <CRC_Lock+0x66>
 8027fd4:	4a14      	ldr	r2, [pc, #80]	; (8028028 <CRC_Lock+0x84>)
 8027fd6:	6813      	ldr	r3, [r2, #0]
 8027fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fdc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8027fe0:	d006      	beq.n	8027ff0 <CRC_Lock+0x4c>
 8027fe2:	6813      	ldr	r3, [r2, #0]
 8027fe4:	f240 4283 	movw	r2, #1155	; 0x483
 8027fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fec:	4293      	cmp	r3, r2
 8027fee:	d10c      	bne.n	802800a <CRC_Lock+0x66>
 8027ff0:	4b0e      	ldr	r3, [pc, #56]	; (802802c <CRC_Lock+0x88>)
 8027ff2:	2201      	movs	r2, #1
 8027ff4:	601a      	str	r2, [r3, #0]
 8027ff6:	681a      	ldr	r2, [r3, #0]
 8027ff8:	2a00      	cmp	r2, #0
 8027ffa:	d1fc      	bne.n	8027ff6 <CRC_Lock+0x52>
 8027ffc:	4b0c      	ldr	r3, [pc, #48]	; (8028030 <CRC_Lock+0x8c>)
 8027ffe:	6018      	str	r0, [r3, #0]
 8028000:	6818      	ldr	r0, [r3, #0]
 8028002:	1a43      	subs	r3, r0, r1
 8028004:	4258      	negs	r0, r3
 8028006:	4158      	adcs	r0, r3
 8028008:	bd30      	pop	{r4, r5, pc}
 802800a:	4b0a      	ldr	r3, [pc, #40]	; (8028034 <CRC_Lock+0x90>)
 802800c:	2201      	movs	r2, #1
 802800e:	601a      	str	r2, [r3, #0]
 8028010:	681a      	ldr	r2, [r3, #0]
 8028012:	2a00      	cmp	r2, #0
 8028014:	d1fc      	bne.n	8028010 <CRC_Lock+0x6c>
 8028016:	4b08      	ldr	r3, [pc, #32]	; (8028038 <CRC_Lock+0x94>)
 8028018:	e7f1      	b.n	8027ffe <CRC_Lock+0x5a>
 802801a:	bf00      	nop
 802801c:	e0002000 	.word	0xe0002000
 8028020:	e000ed00 	.word	0xe000ed00
 8028024:	e0042000 	.word	0xe0042000
 8028028:	5c001000 	.word	0x5c001000
 802802c:	58024c08 	.word	0x58024c08
 8028030:	58024c00 	.word	0x58024c00
 8028034:	40023008 	.word	0x40023008
 8028038:	40023000 	.word	0x40023000

0802803c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802803c:	6101      	str	r1, [r0, #16]
 802803e:	4770      	bx	lr

08028040 <_ZN8touchgfx8Gestures4tickEv>:
 8028040:	7b83      	ldrb	r3, [r0, #14]
 8028042:	b14b      	cbz	r3, 8028058 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028044:	8903      	ldrh	r3, [r0, #8]
 8028046:	3301      	adds	r3, #1
 8028048:	b29b      	uxth	r3, r3
 802804a:	2b07      	cmp	r3, #7
 802804c:	8103      	strh	r3, [r0, #8]
 802804e:	bf81      	itttt	hi
 8028050:	2300      	movhi	r3, #0
 8028052:	8143      	strhhi	r3, [r0, #10]
 8028054:	8183      	strhhi	r3, [r0, #12]
 8028056:	7383      	strbhi	r3, [r0, #14]
 8028058:	4770      	bx	lr
	...

0802805c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802805c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028060:	4604      	mov	r4, r0
 8028062:	4698      	mov	r8, r3
 8028064:	8880      	ldrh	r0, [r0, #4]
 8028066:	4617      	mov	r7, r2
 8028068:	4b1d      	ldr	r3, [pc, #116]	; (80280e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802806a:	460e      	mov	r6, r1
 802806c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028070:	eba8 0000 	sub.w	r0, r8, r0
 8028074:	9300      	str	r3, [sp, #0]
 8028076:	2300      	movs	r3, #0
 8028078:	b280      	uxth	r0, r0
 802807a:	8aa2      	ldrh	r2, [r4, #20]
 802807c:	f88d 3004 	strb.w	r3, [sp, #4]
 8028080:	b203      	sxth	r3, r0
 8028082:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028086:	88e1      	ldrh	r1, [r4, #6]
 8028088:	2b00      	cmp	r3, #0
 802808a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802808e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028092:	bfb8      	it	lt
 8028094:	4240      	neglt	r0, r0
 8028096:	f8ad 500c 	strh.w	r5, [sp, #12]
 802809a:	bfb8      	it	lt
 802809c:	b203      	sxthlt	r3, r0
 802809e:	4293      	cmp	r3, r2
 80280a0:	dc08      	bgt.n	80280b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80280a2:	1a69      	subs	r1, r5, r1
 80280a4:	b289      	uxth	r1, r1
 80280a6:	b20b      	sxth	r3, r1
 80280a8:	2b00      	cmp	r3, #0
 80280aa:	bfbc      	itt	lt
 80280ac:	4249      	neglt	r1, r1
 80280ae:	b20b      	sxthlt	r3, r1
 80280b0:	429a      	cmp	r2, r3
 80280b2:	da13      	bge.n	80280dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80280b4:	6920      	ldr	r0, [r4, #16]
 80280b6:	4669      	mov	r1, sp
 80280b8:	eba8 0606 	sub.w	r6, r8, r6
 80280bc:	1bef      	subs	r7, r5, r7
 80280be:	6803      	ldr	r3, [r0, #0]
 80280c0:	685b      	ldr	r3, [r3, #4]
 80280c2:	4798      	blx	r3
 80280c4:	2300      	movs	r3, #0
 80280c6:	2001      	movs	r0, #1
 80280c8:	8166      	strh	r6, [r4, #10]
 80280ca:	8123      	strh	r3, [r4, #8]
 80280cc:	81a7      	strh	r7, [r4, #12]
 80280ce:	f8a4 8004 	strh.w	r8, [r4, #4]
 80280d2:	80e5      	strh	r5, [r4, #6]
 80280d4:	73a0      	strb	r0, [r4, #14]
 80280d6:	b004      	add	sp, #16
 80280d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80280dc:	2000      	movs	r0, #0
 80280de:	e7fa      	b.n	80280d6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80280e0:	0802e188 	.word	0x0802e188

080280e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80280e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80280e6:	461e      	mov	r6, r3
 80280e8:	1e4b      	subs	r3, r1, #1
 80280ea:	b085      	sub	sp, #20
 80280ec:	4604      	mov	r4, r0
 80280ee:	2b01      	cmp	r3, #1
 80280f0:	460d      	mov	r5, r1
 80280f2:	4617      	mov	r7, r2
 80280f4:	d84b      	bhi.n	802818e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80280f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80280fa:	1cd3      	adds	r3, r2, #3
 80280fc:	b29b      	uxth	r3, r3
 80280fe:	2b06      	cmp	r3, #6
 8028100:	d916      	bls.n	8028130 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028102:	f8df c098 	ldr.w	ip, [pc, #152]	; 802819c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8028106:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802810a:	f8cd c004 	str.w	ip, [sp, #4]
 802810e:	f04f 0c00 	mov.w	ip, #0
 8028112:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028116:	6900      	ldr	r0, [r0, #16]
 8028118:	f8ad 100c 	strh.w	r1, [sp, #12]
 802811c:	a901      	add	r1, sp, #4
 802811e:	f88d c008 	strb.w	ip, [sp, #8]
 8028122:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028126:	f8ad 300e 	strh.w	r3, [sp, #14]
 802812a:	6803      	ldr	r3, [r0, #0]
 802812c:	689b      	ldr	r3, [r3, #8]
 802812e:	4798      	blx	r3
 8028130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028134:	1cd3      	adds	r3, r2, #3
 8028136:	b29b      	uxth	r3, r3
 8028138:	2b06      	cmp	r3, #6
 802813a:	d916      	bls.n	802816a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802813c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 802819c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8028140:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028144:	f8cd c004 	str.w	ip, [sp, #4]
 8028148:	f04f 0c01 	mov.w	ip, #1
 802814c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028150:	6920      	ldr	r0, [r4, #16]
 8028152:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028156:	a901      	add	r1, sp, #4
 8028158:	f88d c008 	strb.w	ip, [sp, #8]
 802815c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028160:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028164:	6803      	ldr	r3, [r0, #0]
 8028166:	689b      	ldr	r3, [r3, #8]
 8028168:	4798      	blx	r3
 802816a:	4b0b      	ldr	r3, [pc, #44]	; (8028198 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 802816c:	a901      	add	r1, sp, #4
 802816e:	6920      	ldr	r0, [r4, #16]
 8028170:	9301      	str	r3, [sp, #4]
 8028172:	2300      	movs	r3, #0
 8028174:	f88d 5008 	strb.w	r5, [sp, #8]
 8028178:	f8ad 700a 	strh.w	r7, [sp, #10]
 802817c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028180:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028184:	6803      	ldr	r3, [r0, #0]
 8028186:	681b      	ldr	r3, [r3, #0]
 8028188:	4798      	blx	r3
 802818a:	b005      	add	sp, #20
 802818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802818e:	2900      	cmp	r1, #0
 8028190:	d1eb      	bne.n	802816a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028192:	80a2      	strh	r2, [r4, #4]
 8028194:	80c6      	strh	r6, [r0, #6]
 8028196:	e7e8      	b.n	802816a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028198:	0802e174 	.word	0x0802e174
 802819c:	0802e19c 	.word	0x0802e19c

080281a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 80281a0:	10c9      	asrs	r1, r1, #3
 80281a2:	2900      	cmp	r1, #0
 80281a4:	bfb8      	it	lt
 80281a6:	4249      	neglt	r1, r1
 80281a8:	2801      	cmp	r0, #1
 80281aa:	d108      	bne.n	80281be <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80281ac:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80281b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80281b4:	4601      	mov	r1, r0
 80281b6:	dd02      	ble.n	80281be <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 80281b8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80281bc:	4770      	bx	lr
 80281be:	29ff      	cmp	r1, #255	; 0xff
 80281c0:	bfa8      	it	ge
 80281c2:	21ff      	movge	r1, #255	; 0xff
 80281c4:	4608      	mov	r0, r1
 80281c6:	4770      	bx	lr

080281c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 80281c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281cc:	688c      	ldr	r4, [r1, #8]
 80281ce:	b087      	sub	sp, #28
 80281d0:	4607      	mov	r7, r0
 80281d2:	2c00      	cmp	r4, #0
 80281d4:	db2b      	blt.n	802822e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80281d6:	6803      	ldr	r3, [r0, #0]
 80281d8:	68da      	ldr	r2, [r3, #12]
 80281da:	42a2      	cmp	r2, r4
 80281dc:	dd27      	ble.n	802822e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80281de:	681a      	ldr	r2, [r3, #0]
 80281e0:	691e      	ldr	r6, [r3, #16]
 80281e2:	68cd      	ldr	r5, [r1, #12]
 80281e4:	fb06 2604 	mla	r6, r6, r4, r2
 80281e8:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80281ec:	698a      	ldr	r2, [r1, #24]
 80281ee:	f893 a004 	ldrb.w	sl, [r3, #4]
 80281f2:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80281f6:	9205      	str	r2, [sp, #20]
 80281f8:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80281fc:	9b05      	ldr	r3, [sp, #20]
 80281fe:	6839      	ldr	r1, [r7, #0]
 8028200:	eb03 0c02 	add.w	ip, r3, r2
 8028204:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8028208:	6889      	ldr	r1, [r1, #8]
 802820a:	1898      	adds	r0, r3, r2
 802820c:	4288      	cmp	r0, r1
 802820e:	db02      	blt.n	8028216 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8028210:	1a8b      	subs	r3, r1, r2
 8028212:	2b00      	cmp	r3, #0
 8028214:	dd09      	ble.n	802822a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8028216:	6878      	ldr	r0, [r7, #4]
 8028218:	6801      	ldr	r1, [r0, #0]
 802821a:	9400      	str	r4, [sp, #0]
 802821c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8028220:	4653      	mov	r3, sl
 8028222:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8028226:	4631      	mov	r1, r6
 8028228:	47d8      	blx	fp
 802822a:	3d01      	subs	r5, #1
 802822c:	d1e4      	bne.n	80281f8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802822e:	b007      	add	sp, #28
 8028230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028234 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028234:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8028238:	b90b      	cbnz	r3, 802823e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802823a:	f001 b974 	b.w	8029526 <_ZN8touchgfx7Outline6lineToEii>
 802823e:	4770      	bx	lr

08028240 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8028240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028244:	4604      	mov	r4, r0
 8028246:	2600      	movs	r6, #0
 8028248:	4b8e      	ldr	r3, [pc, #568]	; (8028484 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 802824a:	f100 0518 	add.w	r5, r0, #24
 802824e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8028252:	b086      	sub	sp, #24
 8028254:	4690      	mov	r8, r2
 8028256:	e9c0 3100 	strd	r3, r1, [r0]
 802825a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802825e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8028262:	4628      	mov	r0, r5
 8028264:	f001 fb75 	bl	8029952 <_ZN8touchgfx15RenderingBufferC1Ev>
 8028268:	4638      	mov	r0, r7
 802826a:	f000 fb45 	bl	80288f8 <_ZN8touchgfx7OutlineC1Ev>
 802826e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8028272:	f001 fb23 	bl	80298bc <_ZN8touchgfx8ScanlineC1Ev>
 8028276:	2301      	movs	r3, #1
 8028278:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 802827c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8028280:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8028284:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8028288:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 802828c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8028290:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8028294:	f7f4 fbac 	bl	801c9f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8028298:	b928      	cbnz	r0, 80282a6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802829a:	4b7b      	ldr	r3, [pc, #492]	; (8028488 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802829c:	2118      	movs	r1, #24
 802829e:	4a7b      	ldr	r2, [pc, #492]	; (802848c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80282a0:	487b      	ldr	r0, [pc, #492]	; (8028490 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80282a2:	f001 fb99 	bl	80299d8 <__assert_func>
 80282a6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80282aa:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80282ae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80282b2:	4410      	add	r0, r2
 80282b4:	9602      	str	r6, [sp, #8]
 80282b6:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80282ba:	b280      	uxth	r0, r0
 80282bc:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80282c0:	fa0f fa80 	sxth.w	sl, r0
 80282c4:	f1ba 0f00 	cmp.w	sl, #0
 80282c8:	dd70      	ble.n	80283ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80282ca:	4591      	cmp	r9, r2
 80282cc:	dd6e      	ble.n	80283ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80282ce:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80282d2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80282d6:	440b      	add	r3, r1
 80282d8:	b29b      	uxth	r3, r3
 80282da:	b21e      	sxth	r6, r3
 80282dc:	2e00      	cmp	r6, #0
 80282de:	dd65      	ble.n	80283ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80282e0:	458e      	cmp	lr, r1
 80282e2:	dd63      	ble.n	80283ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80282e4:	45d1      	cmp	r9, sl
 80282e6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80282ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80282ee:	bfb8      	it	lt
 80282f0:	fa1f f089 	uxthlt.w	r0, r9
 80282f4:	45b6      	cmp	lr, r6
 80282f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80282fa:	bfb8      	it	lt
 80282fc:	fa1f f38e 	uxthlt.w	r3, lr
 8028300:	1a80      	subs	r0, r0, r2
 8028302:	f8ad 100a 	strh.w	r1, [sp, #10]
 8028306:	1a5b      	subs	r3, r3, r1
 8028308:	f8ad 000c 	strh.w	r0, [sp, #12]
 802830c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028310:	f10d 0808 	add.w	r8, sp, #8
 8028314:	ae04      	add	r6, sp, #16
 8028316:	e898 0003 	ldmia.w	r8, {r0, r1}
 802831a:	e886 0003 	stmia.w	r6, {r0, r1}
 802831e:	f8dc 3000 	ldr.w	r3, [ip]
 8028322:	4660      	mov	r0, ip
 8028324:	4631      	mov	r1, r6
 8028326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028328:	4798      	blx	r3
 802832a:	6861      	ldr	r1, [r4, #4]
 802832c:	4640      	mov	r0, r8
 802832e:	3104      	adds	r1, #4
 8028330:	f7f5 f9cc 	bl	801d6cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028334:	4630      	mov	r0, r6
 8028336:	f7f5 f9e1 	bl	801d6fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802833a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802833e:	f7f4 fae7 	bl	801c910 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8028342:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8028346:	4638      	mov	r0, r7
 8028348:	f000 fab2 	bl	80288b0 <_ZN8touchgfx7Outline5resetEv>
 802834c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8028350:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8028354:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8028358:	015b      	lsls	r3, r3, #5
 802835a:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 802835e:	0152      	lsls	r2, r2, #5
 8028360:	60e3      	str	r3, [r4, #12]
 8028362:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8028366:	60a2      	str	r2, [r4, #8]
 8028368:	015b      	lsls	r3, r3, #5
 802836a:	6123      	str	r3, [r4, #16]
 802836c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8028370:	015b      	lsls	r3, r3, #5
 8028372:	6163      	str	r3, [r4, #20]
 8028374:	4b47      	ldr	r3, [pc, #284]	; (8028494 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8028376:	6818      	ldr	r0, [r3, #0]
 8028378:	6803      	ldr	r3, [r0, #0]
 802837a:	6a1b      	ldr	r3, [r3, #32]
 802837c:	4798      	blx	r3
 802837e:	4606      	mov	r6, r0
 8028380:	f7e8 fc26 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 8028384:	6803      	ldr	r3, [r0, #0]
 8028386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028388:	4798      	blx	r3
 802838a:	4607      	mov	r7, r0
 802838c:	f7e8 fc20 	bl	8010bd0 <_ZN8touchgfx3HAL3lcdEv>
 8028390:	6803      	ldr	r3, [r0, #0]
 8028392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028394:	4798      	blx	r3
 8028396:	280c      	cmp	r0, #12
 8028398:	d854      	bhi.n	8028444 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802839a:	e8df f000 	tbb	[pc, r0]
 802839e:	554b      	.short	0x554b
 80283a0:	2b6e0a66 	.word	0x2b6e0a66
 80283a4:	5f5f5f3b 	.word	0x5f5f5f3b
 80283a8:	5f5f      	.short	0x5f5f
 80283aa:	6e          	.byte	0x6e
 80283ab:	00          	.byte	0x00
 80283ac:	2300      	movs	r3, #0
 80283ae:	9303      	str	r3, [sp, #12]
 80283b0:	e7ae      	b.n	8028310 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 80283b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80283b6:	2108      	movs	r1, #8
 80283b8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80283bc:	fb92 f1f1 	sdiv	r1, r2, r1
 80283c0:	fb07 1303 	mla	r3, r7, r3, r1
 80283c4:	441e      	add	r6, r3
 80283c6:	4253      	negs	r3, r2
 80283c8:	f002 0207 	and.w	r2, r2, #7
 80283cc:	f003 0307 	and.w	r3, r3, #7
 80283d0:	bf58      	it	pl
 80283d2:	425a      	negpl	r2, r3
 80283d4:	b2d2      	uxtb	r2, r2
 80283d6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80283da:	4628      	mov	r0, r5
 80283dc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80283e0:	66e1      	str	r1, [r4, #108]	; 0x6c
 80283e2:	e9cd 1700 	strd	r1, r7, [sp]
 80283e6:	4631      	mov	r1, r6
 80283e8:	f001 fabb 	bl	8029962 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80283ec:	4620      	mov	r0, r4
 80283ee:	b006      	add	sp, #24
 80283f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80283f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80283f8:	2104      	movs	r1, #4
 80283fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80283fe:	fb92 f1f1 	sdiv	r1, r2, r1
 8028402:	fb07 1303 	mla	r3, r7, r3, r1
 8028406:	441e      	add	r6, r3
 8028408:	4253      	negs	r3, r2
 802840a:	f002 0203 	and.w	r2, r2, #3
 802840e:	f003 0303 	and.w	r3, r3, #3
 8028412:	e7dd      	b.n	80283d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8028414:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8028418:	2102      	movs	r1, #2
 802841a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802841e:	2a00      	cmp	r2, #0
 8028420:	fb92 f1f1 	sdiv	r1, r2, r1
 8028424:	f002 0201 	and.w	r2, r2, #1
 8028428:	fb07 1303 	mla	r3, r7, r3, r1
 802842c:	bfb8      	it	lt
 802842e:	4252      	neglt	r2, r2
 8028430:	441e      	add	r6, r3
 8028432:	e7cf      	b.n	80283d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8028434:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8028438:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802843c:	437b      	muls	r3, r7
 802843e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028442:	441e      	add	r6, r3
 8028444:	2200      	movs	r2, #0
 8028446:	e7c6      	b.n	80283d6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8028448:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802844c:	2103      	movs	r1, #3
 802844e:	fb07 f203 	mul.w	r2, r7, r3
 8028452:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8028456:	fb13 2301 	smlabb	r3, r3, r1, r2
 802845a:	e7f2      	b.n	8028442 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802845c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8028460:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8028464:	fb07 2303 	mla	r3, r7, r3, r2
 8028468:	e7eb      	b.n	8028442 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802846a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802846e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8028472:	437b      	muls	r3, r7
 8028474:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8028478:	e7e3      	b.n	8028442 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 802847a:	4b07      	ldr	r3, [pc, #28]	; (8028498 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802847c:	2156      	movs	r1, #86	; 0x56
 802847e:	4a03      	ldr	r2, [pc, #12]	; (802848c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8028480:	e70e      	b.n	80282a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8028482:	bf00      	nop
 8028484:	0802f808 	.word	0x0802f808
 8028488:	0802f752 	.word	0x0802f752
 802848c:	0802f810 	.word	0x0802f810
 8028490:	0802f7ae 	.word	0x0802f7ae
 8028494:	2000bf18 	.word	0x2000bf18
 8028498:	0802f7e2 	.word	0x0802f7e2

0802849c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802849c:	6812      	ldr	r2, [r2, #0]
 802849e:	2a00      	cmp	r2, #0
 80284a0:	db0b      	blt.n	80284ba <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80284a2:	9800      	ldr	r0, [sp, #0]
 80284a4:	6800      	ldr	r0, [r0, #0]
 80284a6:	4290      	cmp	r0, r2
 80284a8:	bfd4      	ite	le
 80284aa:	2002      	movle	r0, #2
 80284ac:	2000      	movgt	r0, #0
 80284ae:	680a      	ldr	r2, [r1, #0]
 80284b0:	2a00      	cmp	r2, #0
 80284b2:	da04      	bge.n	80284be <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80284b4:	f040 0004 	orr.w	r0, r0, #4
 80284b8:	4770      	bx	lr
 80284ba:	2001      	movs	r0, #1
 80284bc:	e7f7      	b.n	80284ae <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 80284be:	681b      	ldr	r3, [r3, #0]
 80284c0:	4293      	cmp	r3, r2
 80284c2:	bfd8      	it	le
 80284c4:	f040 0008 	orrle.w	r0, r0, #8
 80284c8:	4770      	bx	lr
	...

080284cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80284cc:	4b07      	ldr	r3, [pc, #28]	; (80284ec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80284ce:	b510      	push	{r4, lr}
 80284d0:	781b      	ldrb	r3, [r3, #0]
 80284d2:	2b01      	cmp	r3, #1
 80284d4:	d108      	bne.n	80284e8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80284d6:	6843      	ldr	r3, [r0, #4]
 80284d8:	6814      	ldr	r4, [r2, #0]
 80284da:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80284de:	680b      	ldr	r3, [r1, #0]
 80284e0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80284e4:	6013      	str	r3, [r2, #0]
 80284e6:	600c      	str	r4, [r1, #0]
 80284e8:	bd10      	pop	{r4, pc}
 80284ea:	bf00      	nop
 80284ec:	2000bf0e 	.word	0x2000bf0e

080284f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80284f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80284f2:	b085      	sub	sp, #20
 80284f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80284f8:	4604      	mov	r4, r0
 80284fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80284fe:	b33b      	cbz	r3, 8028550 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8028500:	aa02      	add	r2, sp, #8
 8028502:	a903      	add	r1, sp, #12
 8028504:	f7ff ffe2 	bl	80284cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028508:	68a3      	ldr	r3, [r4, #8]
 802850a:	9e03      	ldr	r6, [sp, #12]
 802850c:	aa02      	add	r2, sp, #8
 802850e:	9f02      	ldr	r7, [sp, #8]
 8028510:	a903      	add	r1, sp, #12
 8028512:	1af6      	subs	r6, r6, r3
 8028514:	68e3      	ldr	r3, [r4, #12]
 8028516:	4620      	mov	r0, r4
 8028518:	1aff      	subs	r7, r7, r3
 802851a:	f104 0314 	add.w	r3, r4, #20
 802851e:	9603      	str	r6, [sp, #12]
 8028520:	9300      	str	r3, [sp, #0]
 8028522:	f104 0310 	add.w	r3, r4, #16
 8028526:	9702      	str	r7, [sp, #8]
 8028528:	f7ff ffb8 	bl	802849c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802852c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8028530:	4605      	mov	r5, r0
 8028532:	b97b      	cbnz	r3, 8028554 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8028534:	463a      	mov	r2, r7
 8028536:	4631      	mov	r1, r6
 8028538:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802853c:	f7ff fe7a 	bl	8028234 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028540:	9b03      	ldr	r3, [sp, #12]
 8028542:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8028546:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 802854a:	9b02      	ldr	r3, [sp, #8]
 802854c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8028550:	b005      	add	sp, #20
 8028552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028554:	b110      	cbz	r0, 802855c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8028556:	ea13 0200 	ands.w	r2, r3, r0
 802855a:	d11c      	bne.n	8028596 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802855c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8028560:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8028564:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8028568:	b188      	cbz	r0, 802858e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802856a:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802856e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8028572:	b913      	cbnz	r3, 802857a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8028574:	4630      	mov	r0, r6
 8028576:	f001 f806 	bl	8029586 <_ZN8touchgfx7Outline6moveToEii>
 802857a:	2300      	movs	r3, #0
 802857c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8028580:	2301      	movs	r3, #1
 8028582:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8028586:	4630      	mov	r0, r6
 8028588:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802858c:	e7d6      	b.n	802853c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802858e:	4630      	mov	r0, r6
 8028590:	f7ff fe50 	bl	8028234 <_ZN8touchgfx10Rasterizer6lineToEii>
 8028594:	e7f7      	b.n	8028586 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8028596:	4615      	mov	r5, r2
 8028598:	e7d2      	b.n	8028540 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802859a <_ZN8touchgfx6Canvas5closeEv>:
 802859a:	b538      	push	{r3, r4, r5, lr}
 802859c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80285a0:	4604      	mov	r4, r0
 80285a2:	b993      	cbnz	r3, 80285ca <_ZN8touchgfx6Canvas5closeEv+0x30>
 80285a4:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80285a8:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80285ac:	4213      	tst	r3, r2
 80285ae:	d10c      	bne.n	80285ca <_ZN8touchgfx6Canvas5closeEv+0x30>
 80285b0:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 80285b4:	b123      	cbz	r3, 80285c0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80285b6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 80285ba:	4628      	mov	r0, r5
 80285bc:	f7ff fe3a 	bl	8028234 <_ZN8touchgfx10Rasterizer6lineToEii>
 80285c0:	4628      	mov	r0, r5
 80285c2:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 80285c6:	f7ff fe35 	bl	8028234 <_ZN8touchgfx10Rasterizer6lineToEii>
 80285ca:	2300      	movs	r3, #0
 80285cc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80285d0:	bd38      	pop	{r3, r4, r5, pc}

080285d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80285d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285d4:	b085      	sub	sp, #20
 80285d6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80285da:	4604      	mov	r4, r0
 80285dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80285e0:	b353      	cbz	r3, 8028638 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80285e2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80285e6:	b90b      	cbnz	r3, 80285ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80285e8:	f7ff ffd7 	bl	802859a <_ZN8touchgfx6Canvas5closeEv>
 80285ec:	aa02      	add	r2, sp, #8
 80285ee:	a903      	add	r1, sp, #12
 80285f0:	4620      	mov	r0, r4
 80285f2:	f7ff ff6b 	bl	80284cc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80285f6:	68a3      	ldr	r3, [r4, #8]
 80285f8:	9d03      	ldr	r5, [sp, #12]
 80285fa:	aa02      	add	r2, sp, #8
 80285fc:	9e02      	ldr	r6, [sp, #8]
 80285fe:	a903      	add	r1, sp, #12
 8028600:	1aed      	subs	r5, r5, r3
 8028602:	68e3      	ldr	r3, [r4, #12]
 8028604:	4620      	mov	r0, r4
 8028606:	1af6      	subs	r6, r6, r3
 8028608:	f104 0314 	add.w	r3, r4, #20
 802860c:	9503      	str	r5, [sp, #12]
 802860e:	9300      	str	r3, [sp, #0]
 8028610:	f104 0310 	add.w	r3, r4, #16
 8028614:	9602      	str	r6, [sp, #8]
 8028616:	f7ff ff41 	bl	802849c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802861a:	4607      	mov	r7, r0
 802861c:	b170      	cbz	r0, 802863c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802861e:	2301      	movs	r3, #1
 8028620:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8028624:	9a03      	ldr	r2, [sp, #12]
 8028626:	9b02      	ldr	r3, [sp, #8]
 8028628:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 802862c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8028630:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8028634:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8028638:	b005      	add	sp, #20
 802863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802863c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8028640:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8028644:	b92b      	cbnz	r3, 8028652 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8028646:	4632      	mov	r2, r6
 8028648:	4629      	mov	r1, r5
 802864a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802864e:	f000 ff9a 	bl	8029586 <_ZN8touchgfx7Outline6moveToEii>
 8028652:	2300      	movs	r3, #0
 8028654:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8028658:	2301      	movs	r3, #1
 802865a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802865e:	e7e1      	b.n	8028624 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08028660 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8028660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028664:	4604      	mov	r4, r0
 8028666:	b087      	sub	sp, #28
 8028668:	9105      	str	r1, [sp, #20]
 802866a:	f001 f8d0 	bl	802980e <_ZN8touchgfx7Outline8getCellsEv>
 802866e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8028672:	4605      	mov	r5, r0
 8028674:	f1b9 0f00 	cmp.w	r9, #0
 8028678:	d103      	bne.n	8028682 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802867a:	2001      	movs	r0, #1
 802867c:	b007      	add	sp, #28
 802867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028682:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8028686:	2e00      	cmp	r6, #0
 8028688:	d139      	bne.n	80286fe <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802868a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802868e:	f105 0708 	add.w	r7, r5, #8
 8028692:	4640      	mov	r0, r8
 8028694:	f001 f8fd 	bl	8029892 <_ZN8touchgfx8Scanline5resetEv>
 8028698:	f109 33ff 	add.w	r3, r9, #4294967295
 802869c:	9303      	str	r3, [sp, #12]
 802869e:	f9b5 b000 	ldrsh.w	fp, [r5]
 80286a2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80286a6:	46da      	mov	sl, fp
 80286a8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80286ac:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80286b0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80286b4:	9b03      	ldr	r3, [sp, #12]
 80286b6:	4416      	add	r6, r2
 80286b8:	9504      	str	r5, [sp, #16]
 80286ba:	463d      	mov	r5, r7
 80286bc:	3b01      	subs	r3, #1
 80286be:	9303      	str	r3, [sp, #12]
 80286c0:	3301      	adds	r3, #1
 80286c2:	d01e      	beq.n	8028702 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 80286c4:	3708      	adds	r7, #8
 80286c6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 80286ca:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 80286ce:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 80286d2:	4290      	cmp	r0, r2
 80286d4:	d11e      	bne.n	8028714 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80286d6:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80286da:	4411      	add	r1, r2
 80286dc:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80286e0:	e7e8      	b.n	80286b4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80286e2:	1c91      	adds	r1, r2, #2
 80286e4:	f04f 0301 	mov.w	r3, #1
 80286e8:	65e1      	str	r1, [r4, #92]	; 0x5c
 80286ea:	8053      	strh	r3, [r2, #2]
 80286ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80286ee:	1c91      	adds	r1, r2, #2
 80286f0:	65a1      	str	r1, [r4, #88]	; 0x58
 80286f2:	f8a2 b002 	strh.w	fp, [r2, #2]
 80286f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80286f8:	3201      	adds	r2, #1
 80286fa:	6562      	str	r2, [r4, #84]	; 0x54
 80286fc:	e03a      	b.n	8028774 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80286fe:	2000      	movs	r0, #0
 8028700:	e7bc      	b.n	802867c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8028702:	b951      	cbnz	r1, 802871a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8028704:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8028706:	2b00      	cmp	r3, #0
 8028708:	d0b7      	beq.n	802867a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802870a:	4641      	mov	r1, r8
 802870c:	9805      	ldr	r0, [sp, #20]
 802870e:	f7ff fd5b 	bl	80281c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8028712:	e7b2      	b.n	802867a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8028714:	2900      	cmp	r1, #0
 8028716:	d035      	beq.n	8028784 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8028718:	9504      	str	r5, [sp, #16]
 802871a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802871e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8028722:	f7ff fd3d 	bl	80281a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8028726:	4605      	mov	r5, r0
 8028728:	b330      	cbz	r0, 8028778 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802872a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802872c:	b182      	cbz	r2, 8028750 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802872e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8028730:	454a      	cmp	r2, r9
 8028732:	d00d      	beq.n	8028750 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8028734:	4641      	mov	r1, r8
 8028736:	9805      	ldr	r0, [sp, #20]
 8028738:	f7ff fd46 	bl	80281c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802873c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8028740:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8028742:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8028746:	65e2      	str	r2, [r4, #92]	; 0x5c
 8028748:	2300      	movs	r3, #0
 802874a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802874c:	6563      	str	r3, [r4, #84]	; 0x54
 802874e:	65a2      	str	r2, [r4, #88]	; 0x58
 8028750:	f1bb 0f00 	cmp.w	fp, #0
 8028754:	db10      	blt.n	8028778 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8028756:	f7f4 f959 	bl	801ca0c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802875a:	4583      	cmp	fp, r0
 802875c:	d20c      	bcs.n	8028778 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802875e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8028760:	f802 500b 	strb.w	r5, [r2, fp]
 8028764:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8028766:	3201      	adds	r2, #1
 8028768:	455a      	cmp	r2, fp
 802876a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802876c:	d1b9      	bne.n	80286e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802876e:	8811      	ldrh	r1, [r2, #0]
 8028770:	3101      	adds	r1, #1
 8028772:	8011      	strh	r1, [r2, #0]
 8028774:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8028778:	9b03      	ldr	r3, [sp, #12]
 802877a:	3301      	adds	r3, #1
 802877c:	d0c2      	beq.n	8028704 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802877e:	f10b 0a01 	add.w	sl, fp, #1
 8028782:	9d04      	ldr	r5, [sp, #16]
 8028784:	f9b5 3000 	ldrsh.w	r3, [r5]
 8028788:	4553      	cmp	r3, sl
 802878a:	dd88      	ble.n	802869e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802878c:	01b1      	lsls	r1, r6, #6
 802878e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8028792:	f7ff fd05 	bl	80281a0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8028796:	4683      	mov	fp, r0
 8028798:	2800      	cmp	r0, #0
 802879a:	d080      	beq.n	802869e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802879c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802879e:	b183      	cbz	r3, 80287c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80287a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80287a2:	454b      	cmp	r3, r9
 80287a4:	d00d      	beq.n	80287c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80287a6:	4641      	mov	r1, r8
 80287a8:	9805      	ldr	r0, [sp, #20]
 80287aa:	f7ff fd0d 	bl	80281c8 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80287ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80287b2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80287b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80287b8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80287ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80287bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80287be:	2300      	movs	r3, #0
 80287c0:	6563      	str	r3, [r4, #84]	; 0x54
 80287c2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80287c6:	464a      	mov	r2, r9
 80287c8:	f8cd b000 	str.w	fp, [sp]
 80287cc:	4651      	mov	r1, sl
 80287ce:	eba3 030a 	sub.w	r3, r3, sl
 80287d2:	4640      	mov	r0, r8
 80287d4:	f001 f884 	bl	80298e0 <_ZN8touchgfx8Scanline7addSpanEiijj>
 80287d8:	e761      	b.n	802869e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080287da <_ZN8touchgfx6Canvas6renderEv>:
 80287da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80287dc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80287e0:	4604      	mov	r4, r0
 80287e2:	b913      	cbnz	r3, 80287ea <_ZN8touchgfx6Canvas6renderEv+0x10>
 80287e4:	2001      	movs	r0, #1
 80287e6:	b003      	add	sp, #12
 80287e8:	bd30      	pop	{r4, r5, pc}
 80287ea:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80287ee:	2b00      	cmp	r3, #0
 80287f0:	d131      	bne.n	8028856 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80287f2:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80287f6:	2b00      	cmp	r3, #0
 80287f8:	d0f4      	beq.n	80287e4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80287fa:	6840      	ldr	r0, [r0, #4]
 80287fc:	6803      	ldr	r3, [r0, #0]
 80287fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028800:	4798      	blx	r3
 8028802:	2800      	cmp	r0, #0
 8028804:	d0ee      	beq.n	80287e4 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8028806:	4620      	mov	r0, r4
 8028808:	f7ff fec7 	bl	802859a <_ZN8touchgfx6Canvas5closeEv>
 802880c:	6860      	ldr	r0, [r4, #4]
 802880e:	6803      	ldr	r3, [r0, #0]
 8028810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028812:	4798      	blx	r3
 8028814:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8028818:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 802881c:	f7f2 feab 	bl	801b576 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8028820:	6860      	ldr	r0, [r4, #4]
 8028822:	6803      	ldr	r3, [r0, #0]
 8028824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028826:	4798      	blx	r3
 8028828:	4605      	mov	r5, r0
 802882a:	6860      	ldr	r0, [r4, #4]
 802882c:	6803      	ldr	r3, [r0, #0]
 802882e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028830:	4798      	blx	r3
 8028832:	4601      	mov	r1, r0
 8028834:	4628      	mov	r0, r5
 8028836:	f7f2 fea1 	bl	801b57c <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 802883a:	6860      	ldr	r0, [r4, #4]
 802883c:	6803      	ldr	r3, [r0, #0]
 802883e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028840:	4798      	blx	r3
 8028842:	f104 0318 	add.w	r3, r4, #24
 8028846:	4669      	mov	r1, sp
 8028848:	e9cd 3000 	strd	r3, r0, [sp]
 802884c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8028850:	f7ff ff06 	bl	8028660 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8028854:	e7c7      	b.n	80287e6 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8028856:	2000      	movs	r0, #0
 8028858:	e7c5      	b.n	80287e6 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

0802885c <_ZN8touchgfx6CanvasD1Ev>:
 802885c:	b538      	push	{r3, r4, r5, lr}
 802885e:	4605      	mov	r5, r0
 8028860:	4b08      	ldr	r3, [pc, #32]	; (8028884 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8028862:	4604      	mov	r4, r0
 8028864:	f845 3b2c 	str.w	r3, [r5], #44
 8028868:	4b07      	ldr	r3, [pc, #28]	; (8028888 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802886a:	6818      	ldr	r0, [r3, #0]
 802886c:	6803      	ldr	r3, [r0, #0]
 802886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028870:	4798      	blx	r3
 8028872:	4628      	mov	r0, r5
 8028874:	f000 f814 	bl	80288a0 <_ZN8touchgfx7OutlineD1Ev>
 8028878:	f104 0018 	add.w	r0, r4, #24
 802887c:	f001 f870 	bl	8029960 <_ZN8touchgfx15RenderingBufferD1Ev>
 8028880:	4620      	mov	r0, r4
 8028882:	bd38      	pop	{r3, r4, r5, pc}
 8028884:	0802f808 	.word	0x0802f808
 8028888:	2000bf18 	.word	0x2000bf18

0802888c <_ZN8touchgfx6CanvasD0Ev>:
 802888c:	b510      	push	{r4, lr}
 802888e:	4604      	mov	r4, r0
 8028890:	f7ff ffe4 	bl	802885c <_ZN8touchgfx6CanvasD1Ev>
 8028894:	21b8      	movs	r1, #184	; 0xb8
 8028896:	4620      	mov	r0, r4
 8028898:	f001 f873 	bl	8029982 <_ZdlPvj>
 802889c:	4620      	mov	r0, r4
 802889e:	bd10      	pop	{r4, pc}

080288a0 <_ZN8touchgfx7OutlineD1Ev>:
 80288a0:	4770      	bx	lr

080288a2 <_ZN8touchgfx7OutlineD0Ev>:
 80288a2:	b510      	push	{r4, lr}
 80288a4:	4604      	mov	r4, r0
 80288a6:	2148      	movs	r1, #72	; 0x48
 80288a8:	f001 f86b 	bl	8029982 <_ZdlPvj>
 80288ac:	4620      	mov	r0, r4
 80288ae:	bd10      	pop	{r4, pc}

080288b0 <_ZN8touchgfx7Outline5resetEv>:
 80288b0:	b510      	push	{r4, lr}
 80288b2:	4604      	mov	r4, r0
 80288b4:	f7f4 f8c2 	bl	801ca3c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80288b8:	60e0      	str	r0, [r4, #12]
 80288ba:	f7f4 f8c5 	bl	801ca48 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80288be:	68e3      	ldr	r3, [r4, #12]
 80288c0:	2200      	movs	r2, #0
 80288c2:	08c0      	lsrs	r0, r0, #3
 80288c4:	6123      	str	r3, [r4, #16]
 80288c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80288ca:	6060      	str	r0, [r4, #4]
 80288cc:	82a3      	strh	r3, [r4, #20]
 80288ce:	82e3      	strh	r3, [r4, #22]
 80288d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80288d2:	60a2      	str	r2, [r4, #8]
 80288d4:	f023 0301 	bic.w	r3, r3, #1
 80288d8:	8322      	strh	r2, [r4, #24]
 80288da:	8362      	strh	r2, [r4, #26]
 80288dc:	f043 0302 	orr.w	r3, r3, #2
 80288e0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80288e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80288e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80288ea:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80288ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80288f2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80288f6:	bd10      	pop	{r4, pc}

080288f8 <_ZN8touchgfx7OutlineC1Ev>:
 80288f8:	4b0f      	ldr	r3, [pc, #60]	; (8028938 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80288fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80288fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8028902:	b510      	push	{r4, lr}
 8028904:	6003      	str	r3, [r0, #0]
 8028906:	2300      	movs	r3, #0
 8028908:	4604      	mov	r4, r0
 802890a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802890e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8028912:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028916:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802891a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802891e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8028922:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8028926:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802892a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802892e:	f7ff ffbf 	bl	80288b0 <_ZN8touchgfx7Outline5resetEv>
 8028932:	4620      	mov	r0, r4
 8028934:	bd10      	pop	{r4, pc}
 8028936:	bf00      	nop
 8028938:	0802f868 	.word	0x0802f868

0802893c <_ZN8touchgfx7Outline10renderLineEiiii>:
 802893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028940:	b093      	sub	sp, #76	; 0x4c
 8028942:	4604      	mov	r4, r0
 8028944:	1156      	asrs	r6, r2, #5
 8028946:	f002 0e1f 	and.w	lr, r2, #31
 802894a:	981c      	ldr	r0, [sp, #112]	; 0x70
 802894c:	9305      	str	r3, [sp, #20]
 802894e:	1143      	asrs	r3, r0, #5
 8028950:	1145      	asrs	r5, r0, #5
 8028952:	930c      	str	r3, [sp, #48]	; 0x30
 8028954:	f000 031f 	and.w	r3, r0, #31
 8028958:	9303      	str	r3, [sp, #12]
 802895a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802895c:	42b3      	cmp	r3, r6
 802895e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028960:	bfc8      	it	gt
 8028962:	6326      	strgt	r6, [r4, #48]	; 0x30
 8028964:	42b3      	cmp	r3, r6
 8028966:	bfdc      	itt	le
 8028968:	1c73      	addle	r3, r6, #1
 802896a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802896c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802896e:	42ab      	cmp	r3, r5
 8028970:	bfc8      	it	gt
 8028972:	462b      	movgt	r3, r5
 8028974:	ea4f 1560 	mov.w	r5, r0, asr #5
 8028978:	bfc8      	it	gt
 802897a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802897c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802897e:	42ab      	cmp	r3, r5
 8028980:	bfd8      	it	le
 8028982:	462b      	movle	r3, r5
 8028984:	ea4f 1561 	mov.w	r5, r1, asr #5
 8028988:	bfdc      	itt	le
 802898a:	3301      	addle	r3, #1
 802898c:	63a3      	strle	r3, [r4, #56]	; 0x38
 802898e:	9b05      	ldr	r3, [sp, #20]
 8028990:	eba3 0a01 	sub.w	sl, r3, r1
 8028994:	1143      	asrs	r3, r0, #5
 8028996:	429e      	cmp	r6, r3
 8028998:	f040 8119 	bne.w	8028bce <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 802899c:	9b05      	ldr	r3, [sp, #20]
 802899e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80289a2:	9b03      	ldr	r3, [sp, #12]
 80289a4:	459e      	cmp	lr, r3
 80289a6:	d12c      	bne.n	8028a02 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 80289a8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80289ac:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 80289b0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80289b4:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80289b8:	4291      	cmp	r1, r2
 80289ba:	d037      	beq.n	8028a2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80289bc:	8b61      	ldrh	r1, [r4, #26]
 80289be:	8b22      	ldrh	r2, [r4, #24]
 80289c0:	430a      	orrs	r2, r1
 80289c2:	d00b      	beq.n	80289dc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80289c4:	2b00      	cmp	r3, #0
 80289c6:	db09      	blt.n	80289dc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80289c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80289ca:	429a      	cmp	r2, r3
 80289cc:	dd06      	ble.n	80289dc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80289ce:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80289d2:	429a      	cmp	r2, r3
 80289d4:	d308      	bcc.n	80289e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80289d6:	2301      	movs	r3, #1
 80289d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80289dc:	f8a4 c014 	strh.w	ip, [r4, #20]
 80289e0:	82e6      	strh	r6, [r4, #22]
 80289e2:	2300      	movs	r3, #0
 80289e4:	8323      	strh	r3, [r4, #24]
 80289e6:	e0c6      	b.n	8028b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80289e8:	f104 0314 	add.w	r3, r4, #20
 80289ec:	6922      	ldr	r2, [r4, #16]
 80289ee:	cb03      	ldmia	r3!, {r0, r1}
 80289f0:	6010      	str	r0, [r2, #0]
 80289f2:	6051      	str	r1, [r2, #4]
 80289f4:	6923      	ldr	r3, [r4, #16]
 80289f6:	3308      	adds	r3, #8
 80289f8:	6123      	str	r3, [r4, #16]
 80289fa:	68a3      	ldr	r3, [r4, #8]
 80289fc:	3301      	adds	r3, #1
 80289fe:	60a3      	str	r3, [r4, #8]
 8028a00:	e7ec      	b.n	80289dc <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8028a02:	9b05      	ldr	r3, [sp, #20]
 8028a04:	45ac      	cmp	ip, r5
 8028a06:	f001 011f 	and.w	r1, r1, #31
 8028a0a:	8b20      	ldrh	r0, [r4, #24]
 8028a0c:	f003 031f 	and.w	r3, r3, #31
 8028a10:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8028a14:	9304      	str	r3, [sp, #16]
 8028a16:	9b03      	ldr	r3, [sp, #12]
 8028a18:	eba3 020e 	sub.w	r2, r3, lr
 8028a1c:	d109      	bne.n	8028a32 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8028a1e:	9b04      	ldr	r3, [sp, #16]
 8028a20:	4410      	add	r0, r2
 8028a22:	4419      	add	r1, r3
 8028a24:	8320      	strh	r0, [r4, #24]
 8028a26:	fb02 8201 	mla	r2, r2, r1, r8
 8028a2a:	8362      	strh	r2, [r4, #26]
 8028a2c:	b013      	add	sp, #76	; 0x4c
 8028a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a32:	f1ba 0f00 	cmp.w	sl, #0
 8028a36:	f2c0 80a0 	blt.w	8028b7a <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8028a3a:	f1c1 0320 	rsb	r3, r1, #32
 8028a3e:	f04f 0b20 	mov.w	fp, #32
 8028a42:	435a      	muls	r2, r3
 8028a44:	2301      	movs	r3, #1
 8028a46:	9302      	str	r3, [sp, #8]
 8028a48:	4459      	add	r1, fp
 8028a4a:	fb92 f7fa 	sdiv	r7, r2, sl
 8028a4e:	fb0a 2217 	mls	r2, sl, r7, r2
 8028a52:	2a00      	cmp	r2, #0
 8028a54:	bfbc      	itt	lt
 8028a56:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8028a5a:	4452      	addlt	r2, sl
 8028a5c:	fb07 8101 	mla	r1, r7, r1, r8
 8028a60:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8028a64:	4438      	add	r0, r7
 8028a66:	b20b      	sxth	r3, r1
 8028a68:	9902      	ldr	r1, [sp, #8]
 8028a6a:	b200      	sxth	r0, r0
 8028a6c:	9301      	str	r3, [sp, #4]
 8028a6e:	8363      	strh	r3, [r4, #26]
 8028a70:	186b      	adds	r3, r5, r1
 8028a72:	0435      	lsls	r5, r6, #16
 8028a74:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8028a78:	8320      	strh	r0, [r4, #24]
 8028a7a:	eb03 0905 	add.w	r9, r3, r5
 8028a7e:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8028a82:	9300      	str	r3, [sp, #0]
 8028a84:	45c1      	cmp	r9, r8
 8028a86:	9505      	str	r5, [sp, #20]
 8028a88:	d014      	beq.n	8028ab4 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8028a8a:	9b01      	ldr	r3, [sp, #4]
 8028a8c:	4303      	orrs	r3, r0
 8028a8e:	d00b      	beq.n	8028aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8028a90:	2900      	cmp	r1, #0
 8028a92:	db09      	blt.n	8028aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8028a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028a96:	428b      	cmp	r3, r1
 8028a98:	dd06      	ble.n	8028aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8028a9a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8028a9e:	4299      	cmp	r1, r3
 8028aa0:	d374      	bcc.n	8028b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8028aa2:	2301      	movs	r3, #1
 8028aa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028aa8:	9b00      	ldr	r3, [sp, #0]
 8028aaa:	82e6      	strh	r6, [r4, #22]
 8028aac:	82a3      	strh	r3, [r4, #20]
 8028aae:	2300      	movs	r3, #0
 8028ab0:	8323      	strh	r3, [r4, #24]
 8028ab2:	8363      	strh	r3, [r4, #26]
 8028ab4:	9900      	ldr	r1, [sp, #0]
 8028ab6:	eb0e 0307 	add.w	r3, lr, r7
 8028aba:	458c      	cmp	ip, r1
 8028abc:	d04e      	beq.n	8028b5c <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8028abe:	9903      	ldr	r1, [sp, #12]
 8028ac0:	eba2 020a 	sub.w	r2, r2, sl
 8028ac4:	1ac9      	subs	r1, r1, r3
 8028ac6:	9201      	str	r2, [sp, #4]
 8028ac8:	440f      	add	r7, r1
 8028aca:	017f      	lsls	r7, r7, #5
 8028acc:	fb97 fefa 	sdiv	lr, r7, sl
 8028ad0:	fb0a 771e 	mls	r7, sl, lr, r7
 8028ad4:	2f00      	cmp	r7, #0
 8028ad6:	bfbc      	itt	lt
 8028ad8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8028adc:	4457      	addlt	r7, sl
 8028ade:	f10e 0101 	add.w	r1, lr, #1
 8028ae2:	9106      	str	r1, [sp, #24]
 8028ae4:	9a01      	ldr	r2, [sp, #4]
 8028ae6:	8b20      	ldrh	r0, [r4, #24]
 8028ae8:	19d2      	adds	r2, r2, r7
 8028aea:	8b61      	ldrh	r1, [r4, #26]
 8028aec:	9d02      	ldr	r5, [sp, #8]
 8028aee:	9201      	str	r2, [sp, #4]
 8028af0:	bf5b      	ittet	pl
 8028af2:	eba2 020a 	subpl.w	r2, r2, sl
 8028af6:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8028afa:	46f0      	movmi	r8, lr
 8028afc:	9201      	strpl	r2, [sp, #4]
 8028afe:	9a00      	ldr	r2, [sp, #0]
 8028b00:	4440      	add	r0, r8
 8028b02:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8028b06:	4443      	add	r3, r8
 8028b08:	442a      	add	r2, r5
 8028b0a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8028b0e:	9d05      	ldr	r5, [sp, #20]
 8028b10:	b200      	sxth	r0, r0
 8028b12:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8028b16:	b209      	sxth	r1, r1
 8028b18:	4415      	add	r5, r2
 8028b1a:	8320      	strh	r0, [r4, #24]
 8028b1c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8028b20:	8361      	strh	r1, [r4, #26]
 8028b22:	9200      	str	r2, [sp, #0]
 8028b24:	454d      	cmp	r5, r9
 8028b26:	d016      	beq.n	8028b56 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8028b28:	4301      	orrs	r1, r0
 8028b2a:	d00d      	beq.n	8028b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8028b2c:	f1b8 0f00 	cmp.w	r8, #0
 8028b30:	db0a      	blt.n	8028b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8028b32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028b34:	4541      	cmp	r1, r8
 8028b36:	dd07      	ble.n	8028b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8028b38:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8028b3c:	4288      	cmp	r0, r1
 8028b3e:	d335      	bcc.n	8028bac <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8028b40:	f04f 0101 	mov.w	r1, #1
 8028b44:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8028b48:	9900      	ldr	r1, [sp, #0]
 8028b4a:	82e6      	strh	r6, [r4, #22]
 8028b4c:	82a1      	strh	r1, [r4, #20]
 8028b4e:	f04f 0100 	mov.w	r1, #0
 8028b52:	8321      	strh	r1, [r4, #24]
 8028b54:	8361      	strh	r1, [r4, #26]
 8028b56:	9a00      	ldr	r2, [sp, #0]
 8028b58:	4594      	cmp	ip, r2
 8028b5a:	d1c3      	bne.n	8028ae4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8028b5c:	9a03      	ldr	r2, [sp, #12]
 8028b5e:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8028b62:	1ad3      	subs	r3, r2, r3
 8028b64:	8b22      	ldrh	r2, [r4, #24]
 8028b66:	441a      	add	r2, r3
 8028b68:	8322      	strh	r2, [r4, #24]
 8028b6a:	9a04      	ldr	r2, [sp, #16]
 8028b6c:	3220      	adds	r2, #32
 8028b6e:	eba2 020b 	sub.w	r2, r2, fp
 8028b72:	fb03 c302 	mla	r3, r3, r2, ip
 8028b76:	8363      	strh	r3, [r4, #26]
 8028b78:	e758      	b.n	8028a2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8028b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8028b7e:	434a      	muls	r2, r1
 8028b80:	f1ca 0a00 	rsb	sl, sl, #0
 8028b84:	f04f 0b00 	mov.w	fp, #0
 8028b88:	9302      	str	r3, [sp, #8]
 8028b8a:	e75d      	b.n	8028a48 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8028b8c:	f104 0314 	add.w	r3, r4, #20
 8028b90:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8028b94:	cb03      	ldmia	r3!, {r0, r1}
 8028b96:	f8c8 0000 	str.w	r0, [r8]
 8028b9a:	f8c8 1004 	str.w	r1, [r8, #4]
 8028b9e:	6923      	ldr	r3, [r4, #16]
 8028ba0:	3308      	adds	r3, #8
 8028ba2:	6123      	str	r3, [r4, #16]
 8028ba4:	68a3      	ldr	r3, [r4, #8]
 8028ba6:	3301      	adds	r3, #1
 8028ba8:	60a3      	str	r3, [r4, #8]
 8028baa:	e77d      	b.n	8028aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8028bac:	f104 0814 	add.w	r8, r4, #20
 8028bb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028bb4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8028bb8:	f8c9 0000 	str.w	r0, [r9]
 8028bbc:	f8c9 1004 	str.w	r1, [r9, #4]
 8028bc0:	6921      	ldr	r1, [r4, #16]
 8028bc2:	3108      	adds	r1, #8
 8028bc4:	6121      	str	r1, [r4, #16]
 8028bc6:	68a1      	ldr	r1, [r4, #8]
 8028bc8:	3101      	adds	r1, #1
 8028bca:	60a1      	str	r1, [r4, #8]
 8028bcc:	e7bc      	b.n	8028b48 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8028bce:	1a83      	subs	r3, r0, r2
 8028bd0:	9301      	str	r3, [sp, #4]
 8028bd2:	f1ba 0f00 	cmp.w	sl, #0
 8028bd6:	f040 8094 	bne.w	8028d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8028bda:	9a01      	ldr	r2, [sp, #4]
 8028bdc:	0049      	lsls	r1, r1, #1
 8028bde:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8028be2:	2a00      	cmp	r2, #0
 8028be4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8028be8:	8b62      	ldrh	r2, [r4, #26]
 8028bea:	bfaa      	itet	ge
 8028bec:	f04f 0a20 	movge.w	sl, #32
 8028bf0:	f04f 38ff 	movlt.w	r8, #4294967295
 8028bf4:	f04f 0801 	movge.w	r8, #1
 8028bf8:	8b21      	ldrh	r1, [r4, #24]
 8028bfa:	ebaa 0e0e 	sub.w	lr, sl, lr
 8028bfe:	4471      	add	r1, lr
 8028c00:	fb0e 2e03 	mla	lr, lr, r3, r2
 8028c04:	eb08 0206 	add.w	r2, r8, r6
 8028c08:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8028c0c:	b209      	sxth	r1, r1
 8028c0e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8028c12:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8028c16:	8321      	strh	r1, [r4, #24]
 8028c18:	fa0f fe8e 	sxth.w	lr, lr
 8028c1c:	42b7      	cmp	r7, r6
 8028c1e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8028c22:	d013      	beq.n	8028c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8028c24:	ea51 010e 	orrs.w	r1, r1, lr
 8028c28:	d00b      	beq.n	8028c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8028c2a:	2800      	cmp	r0, #0
 8028c2c:	db09      	blt.n	8028c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8028c2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028c30:	4281      	cmp	r1, r0
 8028c32:	dd06      	ble.n	8028c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8028c34:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8028c38:	4288      	cmp	r0, r1
 8028c3a:	d339      	bcc.n	8028cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8028c3c:	2101      	movs	r1, #1
 8028c3e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8028c42:	2100      	movs	r1, #0
 8028c44:	82a5      	strh	r5, [r4, #20]
 8028c46:	82e2      	strh	r2, [r4, #22]
 8028c48:	8321      	strh	r1, [r4, #24]
 8028c4a:	8361      	strh	r1, [r4, #26]
 8028c4c:	f1aa 0610 	sub.w	r6, sl, #16
 8028c50:	f04f 0e00 	mov.w	lr, #0
 8028c54:	f04f 0b01 	mov.w	fp, #1
 8028c58:	0076      	lsls	r6, r6, #1
 8028c5a:	fb06 f703 	mul.w	r7, r6, r3
 8028c5e:	b236      	sxth	r6, r6
 8028c60:	b23f      	sxth	r7, r7
 8028c62:	ea46 0107 	orr.w	r1, r6, r7
 8028c66:	9100      	str	r1, [sp, #0]
 8028c68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c6a:	428a      	cmp	r2, r1
 8028c6c:	d03e      	beq.n	8028cec <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8028c6e:	4442      	add	r2, r8
 8028c70:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8028c74:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8028c78:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8028c7c:	8326      	strh	r6, [r4, #24]
 8028c7e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8028c82:	8367      	strh	r7, [r4, #26]
 8028c84:	4584      	cmp	ip, r0
 8028c86:	d0ef      	beq.n	8028c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8028c88:	9800      	ldr	r0, [sp, #0]
 8028c8a:	b150      	cbz	r0, 8028ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8028c8c:	2900      	cmp	r1, #0
 8028c8e:	db08      	blt.n	8028ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8028c90:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8028c92:	4288      	cmp	r0, r1
 8028c94:	dd05      	ble.n	8028ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8028c96:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8028c9a:	4288      	cmp	r0, r1
 8028c9c:	d315      	bcc.n	8028cca <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8028c9e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8028ca2:	82a5      	strh	r5, [r4, #20]
 8028ca4:	82e2      	strh	r2, [r4, #22]
 8028ca6:	f8a4 e018 	strh.w	lr, [r4, #24]
 8028caa:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8028cae:	e7db      	b.n	8028c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8028cb0:	f104 0614 	add.w	r6, r4, #20
 8028cb4:	6927      	ldr	r7, [r4, #16]
 8028cb6:	ce03      	ldmia	r6!, {r0, r1}
 8028cb8:	6038      	str	r0, [r7, #0]
 8028cba:	6079      	str	r1, [r7, #4]
 8028cbc:	6921      	ldr	r1, [r4, #16]
 8028cbe:	3108      	adds	r1, #8
 8028cc0:	6121      	str	r1, [r4, #16]
 8028cc2:	68a1      	ldr	r1, [r4, #8]
 8028cc4:	3101      	adds	r1, #1
 8028cc6:	60a1      	str	r1, [r4, #8]
 8028cc8:	e7bb      	b.n	8028c42 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8028cca:	f104 0c14 	add.w	ip, r4, #20
 8028cce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8028cd2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8028cd6:	f8c9 0000 	str.w	r0, [r9]
 8028cda:	f8c9 1004 	str.w	r1, [r9, #4]
 8028cde:	6921      	ldr	r1, [r4, #16]
 8028ce0:	3108      	adds	r1, #8
 8028ce2:	6121      	str	r1, [r4, #16]
 8028ce4:	68a1      	ldr	r1, [r4, #8]
 8028ce6:	3101      	adds	r1, #1
 8028ce8:	60a1      	str	r1, [r4, #8]
 8028cea:	e7da      	b.n	8028ca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8028cec:	9a03      	ldr	r2, [sp, #12]
 8028cee:	8b61      	ldrh	r1, [r4, #26]
 8028cf0:	f1a2 0c20 	sub.w	ip, r2, #32
 8028cf4:	8b22      	ldrh	r2, [r4, #24]
 8028cf6:	44d4      	add	ip, sl
 8028cf8:	4462      	add	r2, ip
 8028cfa:	fb0c 1303 	mla	r3, ip, r3, r1
 8028cfe:	8322      	strh	r2, [r4, #24]
 8028d00:	e739      	b.n	8028b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8028d02:	9b01      	ldr	r3, [sp, #4]
 8028d04:	2b00      	cmp	r3, #0
 8028d06:	db3f      	blt.n	8028d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8028d08:	2201      	movs	r2, #1
 8028d0a:	f1ce 0320 	rsb	r3, lr, #32
 8028d0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8028d10:	2220      	movs	r2, #32
 8028d12:	fb0a f303 	mul.w	r3, sl, r3
 8028d16:	9202      	str	r2, [sp, #8]
 8028d18:	9a01      	ldr	r2, [sp, #4]
 8028d1a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8028d1e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8028d22:	fb93 f7f2 	sdiv	r7, r3, r2
 8028d26:	fb02 3317 	mls	r3, r2, r7, r3
 8028d2a:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8028d2e:	2b00      	cmp	r3, #0
 8028d30:	9308      	str	r3, [sp, #32]
 8028d32:	bfbc      	itt	lt
 8028d34:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8028d38:	189b      	addlt	r3, r3, r2
 8028d3a:	eb07 0b01 	add.w	fp, r7, r1
 8028d3e:	bfb8      	it	lt
 8028d40:	9308      	strlt	r3, [sp, #32]
 8028d42:	ea4f 136b 	mov.w	r3, fp, asr #5
 8028d46:	9304      	str	r3, [sp, #16]
 8028d48:	9b02      	ldr	r3, [sp, #8]
 8028d4a:	4573      	cmp	r3, lr
 8028d4c:	d133      	bne.n	8028db6 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8028d4e:	9b04      	ldr	r3, [sp, #16]
 8028d50:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8028d54:	454b      	cmp	r3, r9
 8028d56:	d045      	beq.n	8028de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8028d58:	8b62      	ldrh	r2, [r4, #26]
 8028d5a:	8b23      	ldrh	r3, [r4, #24]
 8028d5c:	4313      	orrs	r3, r2
 8028d5e:	d00c      	beq.n	8028d7a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8028d60:	f1b8 0f00 	cmp.w	r8, #0
 8028d64:	db09      	blt.n	8028d7a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8028d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028d68:	4543      	cmp	r3, r8
 8028d6a:	dd06      	ble.n	8028d7a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8028d6c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8028d70:	429a      	cmp	r2, r3
 8028d72:	d313      	bcc.n	8028d9c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8028d74:	2301      	movs	r3, #1
 8028d76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028d7a:	9b04      	ldr	r3, [sp, #16]
 8028d7c:	82e6      	strh	r6, [r4, #22]
 8028d7e:	82a3      	strh	r3, [r4, #20]
 8028d80:	2300      	movs	r3, #0
 8028d82:	8323      	strh	r3, [r4, #24]
 8028d84:	8363      	strh	r3, [r4, #26]
 8028d86:	e02d      	b.n	8028de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8028d88:	9a01      	ldr	r2, [sp, #4]
 8028d8a:	fb0a f30e 	mul.w	r3, sl, lr
 8028d8e:	4252      	negs	r2, r2
 8028d90:	9201      	str	r2, [sp, #4]
 8028d92:	f04f 32ff 	mov.w	r2, #4294967295
 8028d96:	920b      	str	r2, [sp, #44]	; 0x2c
 8028d98:	2200      	movs	r2, #0
 8028d9a:	e7bc      	b.n	8028d16 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8028d9c:	f104 0314 	add.w	r3, r4, #20
 8028da0:	6922      	ldr	r2, [r4, #16]
 8028da2:	cb03      	ldmia	r3!, {r0, r1}
 8028da4:	6010      	str	r0, [r2, #0]
 8028da6:	6051      	str	r1, [r2, #4]
 8028da8:	6923      	ldr	r3, [r4, #16]
 8028daa:	3308      	adds	r3, #8
 8028dac:	6123      	str	r3, [r4, #16]
 8028dae:	68a3      	ldr	r3, [r4, #8]
 8028db0:	3301      	adds	r3, #1
 8028db2:	60a3      	str	r3, [r4, #8]
 8028db4:	e7e1      	b.n	8028d7a <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8028db6:	f00b 031f 	and.w	r3, fp, #31
 8028dba:	f001 011f 	and.w	r1, r1, #31
 8028dbe:	8b20      	ldrh	r0, [r4, #24]
 8028dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8028dc2:	9b02      	ldr	r3, [sp, #8]
 8028dc4:	eba3 020e 	sub.w	r2, r3, lr
 8028dc8:	8b63      	ldrh	r3, [r4, #26]
 8028dca:	9300      	str	r3, [sp, #0]
 8028dcc:	9b04      	ldr	r3, [sp, #16]
 8028dce:	42ab      	cmp	r3, r5
 8028dd0:	f040 80ef 	bne.w	8028fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8028dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028dd6:	4410      	add	r0, r2
 8028dd8:	4419      	add	r1, r3
 8028dda:	9b00      	ldr	r3, [sp, #0]
 8028ddc:	8320      	strh	r0, [r4, #24]
 8028dde:	fb02 3101 	mla	r1, r2, r1, r3
 8028de2:	8361      	strh	r1, [r4, #26]
 8028de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028de6:	9904      	ldr	r1, [sp, #16]
 8028de8:	4433      	add	r3, r6
 8028dea:	9300      	str	r3, [sp, #0]
 8028dec:	9a00      	ldr	r2, [sp, #0]
 8028dee:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028df2:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8028df6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8028dfa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028dfe:	4288      	cmp	r0, r1
 8028e00:	d018      	beq.n	8028e34 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8028e02:	8b60      	ldrh	r0, [r4, #26]
 8028e04:	8b21      	ldrh	r1, [r4, #24]
 8028e06:	ea50 0201 	orrs.w	r2, r0, r1
 8028e0a:	d00c      	beq.n	8028e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8028e0c:	2b00      	cmp	r3, #0
 8028e0e:	db0a      	blt.n	8028e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8028e10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028e12:	4299      	cmp	r1, r3
 8028e14:	dd07      	ble.n	8028e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8028e16:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8028e1a:	4299      	cmp	r1, r3
 8028e1c:	f0c0 818b 	bcc.w	8029136 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8028e20:	2301      	movs	r3, #1
 8028e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028e26:	9b04      	ldr	r3, [sp, #16]
 8028e28:	82a3      	strh	r3, [r4, #20]
 8028e2a:	9b00      	ldr	r3, [sp, #0]
 8028e2c:	82e3      	strh	r3, [r4, #22]
 8028e2e:	2300      	movs	r3, #0
 8028e30:	8323      	strh	r3, [r4, #24]
 8028e32:	8363      	strh	r3, [r4, #26]
 8028e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028e36:	9a00      	ldr	r2, [sp, #0]
 8028e38:	4293      	cmp	r3, r2
 8028e3a:	f000 808d 	beq.w	8028f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8028e3e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8028e42:	9901      	ldr	r1, [sp, #4]
 8028e44:	9801      	ldr	r0, [sp, #4]
 8028e46:	fb93 f1f1 	sdiv	r1, r3, r1
 8028e4a:	fb00 3311 	mls	r3, r0, r1, r3
 8028e4e:	9106      	str	r1, [sp, #24]
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	9307      	str	r3, [sp, #28]
 8028e54:	da04      	bge.n	8028e60 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8028e56:	1e4b      	subs	r3, r1, #1
 8028e58:	9306      	str	r3, [sp, #24]
 8028e5a:	9b07      	ldr	r3, [sp, #28]
 8028e5c:	4403      	add	r3, r0
 8028e5e:	9307      	str	r3, [sp, #28]
 8028e60:	9b08      	ldr	r3, [sp, #32]
 8028e62:	f04f 0c00 	mov.w	ip, #0
 8028e66:	9901      	ldr	r1, [sp, #4]
 8028e68:	1a5b      	subs	r3, r3, r1
 8028e6a:	4659      	mov	r1, fp
 8028e6c:	9308      	str	r3, [sp, #32]
 8028e6e:	9b02      	ldr	r3, [sp, #8]
 8028e70:	f1c3 0320 	rsb	r3, r3, #32
 8028e74:	930a      	str	r3, [sp, #40]	; 0x28
 8028e76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8028e78:	9b02      	ldr	r3, [sp, #8]
 8028e7a:	1a1b      	subs	r3, r3, r0
 8028e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8028e7e:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8028e82:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8028e86:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8028e8a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8028e8e:	181b      	adds	r3, r3, r0
 8028e90:	bf58      	it	pl
 8028e92:	9801      	ldrpl	r0, [sp, #4]
 8028e94:	9308      	str	r3, [sp, #32]
 8028e96:	bf54      	ite	pl
 8028e98:	1a1b      	subpl	r3, r3, r0
 8028e9a:	9d06      	ldrmi	r5, [sp, #24]
 8028e9c:	9802      	ldr	r0, [sp, #8]
 8028e9e:	bf5e      	ittt	pl
 8028ea0:	9308      	strpl	r3, [sp, #32]
 8028ea2:	9b06      	ldrpl	r3, [sp, #24]
 8028ea4:	1c5d      	addpl	r5, r3, #1
 8028ea6:	44ab      	add	fp, r5
 8028ea8:	ea4f 136b 	mov.w	r3, fp, asr #5
 8028eac:	9304      	str	r3, [sp, #16]
 8028eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028eb0:	4283      	cmp	r3, r0
 8028eb2:	f040 815a 	bne.w	802916a <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8028eb6:	9b04      	ldr	r3, [sp, #16]
 8028eb8:	9a00      	ldr	r2, [sp, #0]
 8028eba:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8028ebe:	4543      	cmp	r3, r8
 8028ec0:	d01a      	beq.n	8028ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8028ec2:	8b61      	ldrh	r1, [r4, #26]
 8028ec4:	8b23      	ldrh	r3, [r4, #24]
 8028ec6:	430b      	orrs	r3, r1
 8028ec8:	d00e      	beq.n	8028ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8028eca:	f1be 0f00 	cmp.w	lr, #0
 8028ece:	db0b      	blt.n	8028ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8028ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028ed2:	4573      	cmp	r3, lr
 8028ed4:	dd08      	ble.n	8028ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8028ed6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8028eda:	4299      	cmp	r1, r3
 8028edc:	f0c0 8138 	bcc.w	8029150 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8028ee0:	f04f 0301 	mov.w	r3, #1
 8028ee4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028ee8:	9b04      	ldr	r3, [sp, #16]
 8028eea:	f8a4 c018 	strh.w	ip, [r4, #24]
 8028eee:	82a3      	strh	r3, [r4, #20]
 8028ef0:	9b00      	ldr	r3, [sp, #0]
 8028ef2:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8028ef6:	82e3      	strh	r3, [r4, #22]
 8028ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028efa:	9a00      	ldr	r2, [sp, #0]
 8028efc:	441a      	add	r2, r3
 8028efe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028f02:	9200      	str	r2, [sp, #0]
 8028f04:	9900      	ldr	r1, [sp, #0]
 8028f06:	9a04      	ldr	r2, [sp, #16]
 8028f08:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8028f0c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8028f10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028f14:	4288      	cmp	r0, r1
 8028f16:	d01a      	beq.n	8028f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8028f18:	8b60      	ldrh	r0, [r4, #26]
 8028f1a:	8b21      	ldrh	r1, [r4, #24]
 8028f1c:	ea50 0201 	orrs.w	r2, r0, r1
 8028f20:	d00d      	beq.n	8028f3e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8028f22:	2b00      	cmp	r3, #0
 8028f24:	db0b      	blt.n	8028f3e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8028f26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028f28:	4299      	cmp	r1, r3
 8028f2a:	dd08      	ble.n	8028f3e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8028f2c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8028f30:	4299      	cmp	r1, r3
 8028f32:	f0c0 81f9 	bcc.w	8029328 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8028f36:	f04f 0301 	mov.w	r3, #1
 8028f3a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028f3e:	9b04      	ldr	r3, [sp, #16]
 8028f40:	f8a4 c018 	strh.w	ip, [r4, #24]
 8028f44:	82a3      	strh	r3, [r4, #20]
 8028f46:	9b00      	ldr	r3, [sp, #0]
 8028f48:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8028f4c:	82e3      	strh	r3, [r4, #22]
 8028f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f50:	4659      	mov	r1, fp
 8028f52:	9a00      	ldr	r2, [sp, #0]
 8028f54:	4293      	cmp	r3, r2
 8028f56:	d192      	bne.n	8028e7e <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8028f58:	9b02      	ldr	r3, [sp, #8]
 8028f5a:	f1c3 0c20 	rsb	ip, r3, #32
 8028f5e:	9b05      	ldr	r3, [sp, #20]
 8028f60:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8028f64:	9b03      	ldr	r3, [sp, #12]
 8028f66:	459c      	cmp	ip, r3
 8028f68:	f040 81f8 	bne.w	802935c <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8028f6c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8028f70:	9a00      	ldr	r2, [sp, #0]
 8028f72:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8028f76:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8028f7a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028f7e:	4288      	cmp	r0, r1
 8028f80:	f43f ad54 	beq.w	8028a2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8028f84:	8b60      	ldrh	r0, [r4, #26]
 8028f86:	8b21      	ldrh	r1, [r4, #24]
 8028f88:	ea50 0201 	orrs.w	r2, r0, r1
 8028f8c:	d00c      	beq.n	8028fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	db0a      	blt.n	8028fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8028f92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8028f94:	4299      	cmp	r1, r3
 8028f96:	dd07      	ble.n	8028fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8028f98:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8028f9c:	4299      	cmp	r1, r3
 8028f9e:	f0c0 81d0 	bcc.w	8029342 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8028fa2:	2301      	movs	r3, #1
 8028fa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8028fa8:	9b00      	ldr	r3, [sp, #0]
 8028faa:	f8a4 e014 	strh.w	lr, [r4, #20]
 8028fae:	82e3      	strh	r3, [r4, #22]
 8028fb0:	e517      	b.n	80289e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8028fb2:	2f00      	cmp	r7, #0
 8028fb4:	f2c0 8097 	blt.w	80290e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8028fb8:	2301      	movs	r3, #1
 8028fba:	f1c1 0c20 	rsb	ip, r1, #32
 8028fbe:	9307      	str	r3, [sp, #28]
 8028fc0:	2320      	movs	r3, #32
 8028fc2:	fb02 f20c 	mul.w	r2, r2, ip
 8028fc6:	9306      	str	r3, [sp, #24]
 8028fc8:	9b06      	ldr	r3, [sp, #24]
 8028fca:	fb92 fcf7 	sdiv	ip, r2, r7
 8028fce:	fb07 221c 	mls	r2, r7, ip, r2
 8028fd2:	4419      	add	r1, r3
 8028fd4:	9b00      	ldr	r3, [sp, #0]
 8028fd6:	2a00      	cmp	r2, #0
 8028fd8:	bfbc      	itt	lt
 8028fda:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8028fde:	19d2      	addlt	r2, r2, r7
 8028fe0:	fb0c 3101 	mla	r1, ip, r1, r3
 8028fe4:	9b07      	ldr	r3, [sp, #28]
 8028fe6:	4460      	add	r0, ip
 8028fe8:	441d      	add	r5, r3
 8028fea:	0433      	lsls	r3, r6, #16
 8028fec:	b200      	sxth	r0, r0
 8028fee:	930a      	str	r3, [sp, #40]	; 0x28
 8028ff0:	18eb      	adds	r3, r5, r3
 8028ff2:	b209      	sxth	r1, r1
 8028ff4:	8320      	strh	r0, [r4, #24]
 8028ff6:	454b      	cmp	r3, r9
 8028ff8:	8361      	strh	r1, [r4, #26]
 8028ffa:	d014      	beq.n	8029026 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8028ffc:	ea50 0301 	orrs.w	r3, r0, r1
 8029000:	d00c      	beq.n	802901c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029002:	f1b8 0f00 	cmp.w	r8, #0
 8029006:	db09      	blt.n	802901c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802900a:	4543      	cmp	r3, r8
 802900c:	dd06      	ble.n	802901c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802900e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029012:	4299      	cmp	r1, r3
 8029014:	d36e      	bcc.n	80290f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8029016:	2301      	movs	r3, #1
 8029018:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802901c:	2300      	movs	r3, #0
 802901e:	82a5      	strh	r5, [r4, #20]
 8029020:	82e6      	strh	r6, [r4, #22]
 8029022:	8323      	strh	r3, [r4, #24]
 8029024:	8363      	strh	r3, [r4, #26]
 8029026:	9904      	ldr	r1, [sp, #16]
 8029028:	eb0e 030c 	add.w	r3, lr, ip
 802902c:	42a9      	cmp	r1, r5
 802902e:	d04d      	beq.n	80290cc <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8029030:	9902      	ldr	r1, [sp, #8]
 8029032:	1bd2      	subs	r2, r2, r7
 8029034:	1ac9      	subs	r1, r1, r3
 8029036:	9200      	str	r2, [sp, #0]
 8029038:	448c      	add	ip, r1
 802903a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802903e:	fb9c fef7 	sdiv	lr, ip, r7
 8029042:	fb07 cc1e 	mls	ip, r7, lr, ip
 8029046:	f1bc 0f00 	cmp.w	ip, #0
 802904a:	bfbc      	itt	lt
 802904c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8029050:	44bc      	addlt	ip, r7
 8029052:	f10e 0101 	add.w	r1, lr, #1
 8029056:	910d      	str	r1, [sp, #52]	; 0x34
 8029058:	9a00      	ldr	r2, [sp, #0]
 802905a:	8b20      	ldrh	r0, [r4, #24]
 802905c:	eb12 020c 	adds.w	r2, r2, ip
 8029060:	8b61      	ldrh	r1, [r4, #26]
 8029062:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029066:	9200      	str	r2, [sp, #0]
 8029068:	bf5b      	ittet	pl
 802906a:	1bd2      	subpl	r2, r2, r7
 802906c:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8029070:	46f0      	movmi	r8, lr
 8029072:	9200      	strpl	r2, [sp, #0]
 8029074:	9a07      	ldr	r2, [sp, #28]
 8029076:	4440      	add	r0, r8
 8029078:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 802907c:	4443      	add	r3, r8
 802907e:	4415      	add	r5, r2
 8029080:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029086:	b200      	sxth	r0, r0
 8029088:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802908c:	442a      	add	r2, r5
 802908e:	b209      	sxth	r1, r1
 8029090:	8320      	strh	r0, [r4, #24]
 8029092:	454a      	cmp	r2, r9
 8029094:	8361      	strh	r1, [r4, #26]
 8029096:	d016      	beq.n	80290c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8029098:	ea50 0201 	orrs.w	r2, r0, r1
 802909c:	d00d      	beq.n	80290ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802909e:	f1b8 0f00 	cmp.w	r8, #0
 80290a2:	db0a      	blt.n	80290ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80290a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80290a6:	4541      	cmp	r1, r8
 80290a8:	dd07      	ble.n	80290ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80290aa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80290ae:	4288      	cmp	r0, r1
 80290b0:	d330      	bcc.n	8029114 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 80290b2:	f04f 0201 	mov.w	r2, #1
 80290b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80290ba:	f04f 0200 	mov.w	r2, #0
 80290be:	82a5      	strh	r5, [r4, #20]
 80290c0:	82e6      	strh	r6, [r4, #22]
 80290c2:	8322      	strh	r2, [r4, #24]
 80290c4:	8362      	strh	r2, [r4, #26]
 80290c6:	9904      	ldr	r1, [sp, #16]
 80290c8:	42a9      	cmp	r1, r5
 80290ca:	d1c5      	bne.n	8029058 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 80290cc:	9a02      	ldr	r2, [sp, #8]
 80290ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80290d0:	1ad3      	subs	r3, r2, r3
 80290d2:	8b22      	ldrh	r2, [r4, #24]
 80290d4:	3120      	adds	r1, #32
 80290d6:	441a      	add	r2, r3
 80290d8:	8322      	strh	r2, [r4, #24]
 80290da:	9a06      	ldr	r2, [sp, #24]
 80290dc:	1a89      	subs	r1, r1, r2
 80290de:	8b62      	ldrh	r2, [r4, #26]
 80290e0:	fb03 2301 	mla	r3, r3, r1, r2
 80290e4:	e64e      	b.n	8028d84 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80290e6:	f04f 33ff 	mov.w	r3, #4294967295
 80290ea:	434a      	muls	r2, r1
 80290ec:	427f      	negs	r7, r7
 80290ee:	9307      	str	r3, [sp, #28]
 80290f0:	2300      	movs	r3, #0
 80290f2:	e768      	b.n	8028fc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80290f4:	f104 0314 	add.w	r3, r4, #20
 80290f8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80290fc:	cb03      	ldmia	r3!, {r0, r1}
 80290fe:	f8c8 0000 	str.w	r0, [r8]
 8029102:	f8c8 1004 	str.w	r1, [r8, #4]
 8029106:	6923      	ldr	r3, [r4, #16]
 8029108:	3308      	adds	r3, #8
 802910a:	6123      	str	r3, [r4, #16]
 802910c:	68a3      	ldr	r3, [r4, #8]
 802910e:	3301      	adds	r3, #1
 8029110:	60a3      	str	r3, [r4, #8]
 8029112:	e783      	b.n	802901c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029114:	f104 0814 	add.w	r8, r4, #20
 8029118:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802911c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029120:	f8c9 0000 	str.w	r0, [r9]
 8029124:	f8c9 1004 	str.w	r1, [r9, #4]
 8029128:	6921      	ldr	r1, [r4, #16]
 802912a:	3108      	adds	r1, #8
 802912c:	6121      	str	r1, [r4, #16]
 802912e:	68a1      	ldr	r1, [r4, #8]
 8029130:	3101      	adds	r1, #1
 8029132:	60a1      	str	r1, [r4, #8]
 8029134:	e7c1      	b.n	80290ba <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029136:	f104 0314 	add.w	r3, r4, #20
 802913a:	6925      	ldr	r5, [r4, #16]
 802913c:	cb03      	ldmia	r3!, {r0, r1}
 802913e:	6028      	str	r0, [r5, #0]
 8029140:	6069      	str	r1, [r5, #4]
 8029142:	6923      	ldr	r3, [r4, #16]
 8029144:	3308      	adds	r3, #8
 8029146:	6123      	str	r3, [r4, #16]
 8029148:	68a3      	ldr	r3, [r4, #8]
 802914a:	3301      	adds	r3, #1
 802914c:	60a3      	str	r3, [r4, #8]
 802914e:	e66a      	b.n	8028e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029150:	f104 0314 	add.w	r3, r4, #20
 8029154:	6925      	ldr	r5, [r4, #16]
 8029156:	cb03      	ldmia	r3!, {r0, r1}
 8029158:	6028      	str	r0, [r5, #0]
 802915a:	6069      	str	r1, [r5, #4]
 802915c:	6923      	ldr	r3, [r4, #16]
 802915e:	3308      	adds	r3, #8
 8029160:	6123      	str	r3, [r4, #16]
 8029162:	68a3      	ldr	r3, [r4, #8]
 8029164:	3301      	adds	r3, #1
 8029166:	60a3      	str	r3, [r4, #8]
 8029168:	e6be      	b.n	8028ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802916a:	f00b 031f 	and.w	r3, fp, #31
 802916e:	114f      	asrs	r7, r1, #5
 8029170:	8b20      	ldrh	r0, [r4, #24]
 8029172:	f001 011f 	and.w	r1, r1, #31
 8029176:	930f      	str	r3, [sp, #60]	; 0x3c
 8029178:	9b04      	ldr	r3, [sp, #16]
 802917a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802917e:	429f      	cmp	r7, r3
 8029180:	d10a      	bne.n	8029198 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8029182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029184:	4418      	add	r0, r3
 8029186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029188:	4419      	add	r1, r3
 802918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802918c:	8320      	strh	r0, [r4, #24]
 802918e:	fb03 9901 	mla	r9, r3, r1, r9
 8029192:	f8a4 901a 	strh.w	r9, [r4, #26]
 8029196:	e6af      	b.n	8028ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8029198:	2d00      	cmp	r5, #0
 802919a:	f2c0 809b 	blt.w	80292d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802919e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80291a0:	f1c1 0320 	rsb	r3, r1, #32
 80291a4:	4373      	muls	r3, r6
 80291a6:	2601      	movs	r6, #1
 80291a8:	960e      	str	r6, [sp, #56]	; 0x38
 80291aa:	2620      	movs	r6, #32
 80291ac:	960d      	str	r6, [sp, #52]	; 0x34
 80291ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80291b0:	fb93 f6f5 	sdiv	r6, r3, r5
 80291b4:	4411      	add	r1, r2
 80291b6:	fb05 3316 	mls	r3, r5, r6, r3
 80291ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80291bc:	2b00      	cmp	r3, #0
 80291be:	4417      	add	r7, r2
 80291c0:	9a00      	ldr	r2, [sp, #0]
 80291c2:	bfbc      	itt	lt
 80291c4:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80291c8:	195b      	addlt	r3, r3, r5
 80291ca:	0412      	lsls	r2, r2, #16
 80291cc:	fb06 9101 	mla	r1, r6, r1, r9
 80291d0:	4430      	add	r0, r6
 80291d2:	eb07 0902 	add.w	r9, r7, r2
 80291d6:	9210      	str	r2, [sp, #64]	; 0x40
 80291d8:	b200      	sxth	r0, r0
 80291da:	b209      	sxth	r1, r1
 80291dc:	45c1      	cmp	r9, r8
 80291de:	8320      	strh	r0, [r4, #24]
 80291e0:	8361      	strh	r1, [r4, #26]
 80291e2:	d017      	beq.n	8029214 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80291e4:	ea50 0201 	orrs.w	r2, r0, r1
 80291e8:	d00d      	beq.n	8029206 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80291ea:	f1be 0f00 	cmp.w	lr, #0
 80291ee:	db0a      	blt.n	8029206 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80291f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80291f2:	4571      	cmp	r1, lr
 80291f4:	dd07      	ble.n	8029206 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80291f6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80291fa:	4288      	cmp	r0, r1
 80291fc:	d372      	bcc.n	80292e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80291fe:	f04f 0201 	mov.w	r2, #1
 8029202:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029206:	9a00      	ldr	r2, [sp, #0]
 8029208:	82a7      	strh	r7, [r4, #20]
 802920a:	82e2      	strh	r2, [r4, #22]
 802920c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029210:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029216:	eb02 0e06 	add.w	lr, r2, r6
 802921a:	9a04      	ldr	r2, [sp, #16]
 802921c:	42ba      	cmp	r2, r7
 802921e:	d049      	beq.n	80292b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8029220:	9a02      	ldr	r2, [sp, #8]
 8029222:	1b5b      	subs	r3, r3, r5
 8029224:	eba2 010e 	sub.w	r1, r2, lr
 8029228:	440e      	add	r6, r1
 802922a:	0176      	lsls	r6, r6, #5
 802922c:	fb96 f8f5 	sdiv	r8, r6, r5
 8029230:	fb05 6618 	mls	r6, r5, r8, r6
 8029234:	2e00      	cmp	r6, #0
 8029236:	bfbc      	itt	lt
 8029238:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802923c:	1976      	addlt	r6, r6, r5
 802923e:	f108 0201 	add.w	r2, r8, #1
 8029242:	9211      	str	r2, [sp, #68]	; 0x44
 8029244:	199b      	adds	r3, r3, r6
 8029246:	8b20      	ldrh	r0, [r4, #24]
 8029248:	8b61      	ldrh	r1, [r4, #26]
 802924a:	bf54      	ite	pl
 802924c:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8029250:	46c1      	movmi	r9, r8
 8029252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029254:	bf58      	it	pl
 8029256:	1b5b      	subpl	r3, r3, r5
 8029258:	4448      	add	r0, r9
 802925a:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802925e:	4417      	add	r7, r2
 8029260:	44ce      	add	lr, r9
 8029262:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029264:	b200      	sxth	r0, r0
 8029266:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802926a:	b209      	sxth	r1, r1
 802926c:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8029270:	443a      	add	r2, r7
 8029272:	8320      	strh	r0, [r4, #24]
 8029274:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8029278:	8361      	strh	r1, [r4, #26]
 802927a:	4552      	cmp	r2, sl
 802927c:	d017      	beq.n	80292ae <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802927e:	ea50 0201 	orrs.w	r2, r0, r1
 8029282:	d00d      	beq.n	80292a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8029284:	f1b9 0f00 	cmp.w	r9, #0
 8029288:	db0a      	blt.n	80292a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802928a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802928c:	4549      	cmp	r1, r9
 802928e:	dd07      	ble.n	80292a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8029290:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029294:	4288      	cmp	r0, r1
 8029296:	d336      	bcc.n	8029306 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8029298:	f04f 0201 	mov.w	r2, #1
 802929c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80292a0:	9a00      	ldr	r2, [sp, #0]
 80292a2:	82a7      	strh	r7, [r4, #20]
 80292a4:	82e2      	strh	r2, [r4, #22]
 80292a6:	f8a4 c018 	strh.w	ip, [r4, #24]
 80292aa:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80292ae:	9a04      	ldr	r2, [sp, #16]
 80292b0:	42ba      	cmp	r2, r7
 80292b2:	d1c7      	bne.n	8029244 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 80292b4:	9b02      	ldr	r3, [sp, #8]
 80292b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80292b8:	eba3 0e0e 	sub.w	lr, r3, lr
 80292bc:	8b23      	ldrh	r3, [r4, #24]
 80292be:	3120      	adds	r1, #32
 80292c0:	4473      	add	r3, lr
 80292c2:	8323      	strh	r3, [r4, #24]
 80292c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80292c6:	1ac9      	subs	r1, r1, r3
 80292c8:	8b63      	ldrh	r3, [r4, #26]
 80292ca:	fb0e 3e01 	mla	lr, lr, r1, r3
 80292ce:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80292d2:	e611      	b.n	8028ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80292d4:	f04f 36ff 	mov.w	r6, #4294967295
 80292d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292da:	426d      	negs	r5, r5
 80292dc:	960e      	str	r6, [sp, #56]	; 0x38
 80292de:	2600      	movs	r6, #0
 80292e0:	434b      	muls	r3, r1
 80292e2:	e763      	b.n	80291ac <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80292e4:	f104 0e14 	add.w	lr, r4, #20
 80292e8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80292ec:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80292f0:	f8c8 0000 	str.w	r0, [r8]
 80292f4:	f8c8 1004 	str.w	r1, [r8, #4]
 80292f8:	6921      	ldr	r1, [r4, #16]
 80292fa:	3108      	adds	r1, #8
 80292fc:	6121      	str	r1, [r4, #16]
 80292fe:	68a1      	ldr	r1, [r4, #8]
 8029300:	3101      	adds	r1, #1
 8029302:	60a1      	str	r1, [r4, #8]
 8029304:	e77f      	b.n	8029206 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029306:	f104 0914 	add.w	r9, r4, #20
 802930a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802930e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8029312:	f8ca 0000 	str.w	r0, [sl]
 8029316:	f8ca 1004 	str.w	r1, [sl, #4]
 802931a:	6921      	ldr	r1, [r4, #16]
 802931c:	3108      	adds	r1, #8
 802931e:	6121      	str	r1, [r4, #16]
 8029320:	68a1      	ldr	r1, [r4, #8]
 8029322:	3101      	adds	r1, #1
 8029324:	60a1      	str	r1, [r4, #8]
 8029326:	e7bb      	b.n	80292a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8029328:	f104 0314 	add.w	r3, r4, #20
 802932c:	6925      	ldr	r5, [r4, #16]
 802932e:	cb03      	ldmia	r3!, {r0, r1}
 8029330:	6028      	str	r0, [r5, #0]
 8029332:	6069      	str	r1, [r5, #4]
 8029334:	6923      	ldr	r3, [r4, #16]
 8029336:	3308      	adds	r3, #8
 8029338:	6123      	str	r3, [r4, #16]
 802933a:	68a3      	ldr	r3, [r4, #8]
 802933c:	3301      	adds	r3, #1
 802933e:	60a3      	str	r3, [r4, #8]
 8029340:	e5fd      	b.n	8028f3e <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029342:	f104 0314 	add.w	r3, r4, #20
 8029346:	6925      	ldr	r5, [r4, #16]
 8029348:	cb03      	ldmia	r3!, {r0, r1}
 802934a:	6028      	str	r0, [r5, #0]
 802934c:	6069      	str	r1, [r5, #4]
 802934e:	6923      	ldr	r3, [r4, #16]
 8029350:	3308      	adds	r3, #8
 8029352:	6123      	str	r3, [r4, #16]
 8029354:	68a3      	ldr	r3, [r4, #8]
 8029356:	3301      	adds	r3, #1
 8029358:	60a3      	str	r3, [r4, #8]
 802935a:	e625      	b.n	8028fa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802935c:	9b05      	ldr	r3, [sp, #20]
 802935e:	ea4f 176b 	mov.w	r7, fp, asr #5
 8029362:	f00b 081f 	and.w	r8, fp, #31
 8029366:	8b20      	ldrh	r0, [r4, #24]
 8029368:	f003 031f 	and.w	r3, r3, #31
 802936c:	4577      	cmp	r7, lr
 802936e:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8029372:	9302      	str	r3, [sp, #8]
 8029374:	9b03      	ldr	r3, [sp, #12]
 8029376:	eba3 050c 	sub.w	r5, r3, ip
 802937a:	d108      	bne.n	802938e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802937c:	9b02      	ldr	r3, [sp, #8]
 802937e:	4428      	add	r0, r5
 8029380:	4498      	add	r8, r3
 8029382:	8320      	strh	r0, [r4, #24]
 8029384:	fb05 9508 	mla	r5, r5, r8, r9
 8029388:	8365      	strh	r5, [r4, #26]
 802938a:	f7ff bb4f 	b.w	8028a2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802938e:	9b05      	ldr	r3, [sp, #20]
 8029390:	ebb3 030b 	subs.w	r3, r3, fp
 8029394:	f100 809c 	bmi.w	80294d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8029398:	f1c8 0120 	rsb	r1, r8, #32
 802939c:	2201      	movs	r2, #1
 802939e:	f04f 0b20 	mov.w	fp, #32
 80293a2:	434d      	muls	r5, r1
 80293a4:	9201      	str	r2, [sp, #4]
 80293a6:	9a01      	ldr	r2, [sp, #4]
 80293a8:	44d8      	add	r8, fp
 80293aa:	fb95 f6f3 	sdiv	r6, r5, r3
 80293ae:	fb03 5516 	mls	r5, r3, r6, r5
 80293b2:	4417      	add	r7, r2
 80293b4:	9a00      	ldr	r2, [sp, #0]
 80293b6:	2d00      	cmp	r5, #0
 80293b8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80293bc:	bfbc      	itt	lt
 80293be:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80293c2:	18ed      	addlt	r5, r5, r3
 80293c4:	eb07 0a02 	add.w	sl, r7, r2
 80293c8:	9204      	str	r2, [sp, #16]
 80293ca:	fb06 9808 	mla	r8, r6, r8, r9
 80293ce:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80293d2:	4430      	add	r0, r6
 80293d4:	fa0f f188 	sxth.w	r1, r8
 80293d8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80293dc:	b200      	sxth	r0, r0
 80293de:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80293e2:	8361      	strh	r1, [r4, #26]
 80293e4:	8320      	strh	r0, [r4, #24]
 80293e6:	45ca      	cmp	sl, r9
 80293e8:	d015      	beq.n	8029416 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80293ea:	ea50 0201 	orrs.w	r2, r0, r1
 80293ee:	d00c      	beq.n	802940a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80293f0:	f1b8 0f00 	cmp.w	r8, #0
 80293f4:	db09      	blt.n	802940a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80293f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80293f8:	4541      	cmp	r1, r8
 80293fa:	dd06      	ble.n	802940a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80293fc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029400:	4288      	cmp	r0, r1
 8029402:	d36e      	bcc.n	80294e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8029404:	2101      	movs	r1, #1
 8029406:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802940a:	2100      	movs	r1, #0
 802940c:	9a00      	ldr	r2, [sp, #0]
 802940e:	82a7      	strh	r7, [r4, #20]
 8029410:	82e2      	strh	r2, [r4, #22]
 8029412:	8321      	strh	r1, [r4, #24]
 8029414:	8361      	strh	r1, [r4, #26]
 8029416:	45be      	cmp	lr, r7
 8029418:	44b4      	add	ip, r6
 802941a:	d048      	beq.n	80294ae <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802941c:	9a03      	ldr	r2, [sp, #12]
 802941e:	1aed      	subs	r5, r5, r3
 8029420:	eba2 010c 	sub.w	r1, r2, ip
 8029424:	440e      	add	r6, r1
 8029426:	0176      	lsls	r6, r6, #5
 8029428:	fb96 f8f3 	sdiv	r8, r6, r3
 802942c:	fb03 6618 	mls	r6, r3, r8, r6
 8029430:	2e00      	cmp	r6, #0
 8029432:	bfbc      	itt	lt
 8029434:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8029438:	18f6      	addlt	r6, r6, r3
 802943a:	f108 0201 	add.w	r2, r8, #1
 802943e:	9205      	str	r2, [sp, #20]
 8029440:	19ad      	adds	r5, r5, r6
 8029442:	8b20      	ldrh	r0, [r4, #24]
 8029444:	8b61      	ldrh	r1, [r4, #26]
 8029446:	bf54      	ite	pl
 8029448:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802944c:	46c1      	movmi	r9, r8
 802944e:	9a01      	ldr	r2, [sp, #4]
 8029450:	bf58      	it	pl
 8029452:	1aed      	subpl	r5, r5, r3
 8029454:	4448      	add	r0, r9
 8029456:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802945a:	4417      	add	r7, r2
 802945c:	44cc      	add	ip, r9
 802945e:	9a04      	ldr	r2, [sp, #16]
 8029460:	b200      	sxth	r0, r0
 8029462:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8029466:	b209      	sxth	r1, r1
 8029468:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802946c:	443a      	add	r2, r7
 802946e:	8320      	strh	r0, [r4, #24]
 8029470:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8029474:	8361      	strh	r1, [r4, #26]
 8029476:	4552      	cmp	r2, sl
 8029478:	d017      	beq.n	80294aa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802947a:	ea50 0201 	orrs.w	r2, r0, r1
 802947e:	d00d      	beq.n	802949c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8029480:	f1b9 0f00 	cmp.w	r9, #0
 8029484:	db0a      	blt.n	802949c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8029486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029488:	4549      	cmp	r1, r9
 802948a:	dd07      	ble.n	802949c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802948c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029490:	4288      	cmp	r0, r1
 8029492:	d337      	bcc.n	8029504 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8029494:	f04f 0201 	mov.w	r2, #1
 8029498:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802949c:	9a00      	ldr	r2, [sp, #0]
 802949e:	82a7      	strh	r7, [r4, #20]
 80294a0:	82e2      	strh	r2, [r4, #22]
 80294a2:	f04f 0200 	mov.w	r2, #0
 80294a6:	8322      	strh	r2, [r4, #24]
 80294a8:	8362      	strh	r2, [r4, #26]
 80294aa:	45be      	cmp	lr, r7
 80294ac:	d1c8      	bne.n	8029440 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 80294ae:	9b03      	ldr	r3, [sp, #12]
 80294b0:	8b62      	ldrh	r2, [r4, #26]
 80294b2:	eba3 0c0c 	sub.w	ip, r3, ip
 80294b6:	8b23      	ldrh	r3, [r4, #24]
 80294b8:	4463      	add	r3, ip
 80294ba:	8323      	strh	r3, [r4, #24]
 80294bc:	9b02      	ldr	r3, [sp, #8]
 80294be:	3320      	adds	r3, #32
 80294c0:	eba3 030b 	sub.w	r3, r3, fp
 80294c4:	fb0c 2c03 	mla	ip, ip, r3, r2
 80294c8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80294cc:	f7ff baae 	b.w	8028a2c <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 80294d0:	f04f 32ff 	mov.w	r2, #4294967295
 80294d4:	fb05 f508 	mul.w	r5, r5, r8
 80294d8:	425b      	negs	r3, r3
 80294da:	f04f 0b00 	mov.w	fp, #0
 80294de:	9201      	str	r2, [sp, #4]
 80294e0:	e761      	b.n	80293a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80294e2:	f104 0814 	add.w	r8, r4, #20
 80294e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80294ea:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80294ee:	f8c9 0000 	str.w	r0, [r9]
 80294f2:	f8c9 1004 	str.w	r1, [r9, #4]
 80294f6:	6921      	ldr	r1, [r4, #16]
 80294f8:	3108      	adds	r1, #8
 80294fa:	6121      	str	r1, [r4, #16]
 80294fc:	68a1      	ldr	r1, [r4, #8]
 80294fe:	3101      	adds	r1, #1
 8029500:	60a1      	str	r1, [r4, #8]
 8029502:	e782      	b.n	802940a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8029504:	f104 0914 	add.w	r9, r4, #20
 8029508:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802950c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8029510:	f8ca 0000 	str.w	r0, [sl]
 8029514:	f8ca 1004 	str.w	r1, [sl, #4]
 8029518:	6921      	ldr	r1, [r4, #16]
 802951a:	3108      	adds	r1, #8
 802951c:	6121      	str	r1, [r4, #16]
 802951e:	68a1      	ldr	r1, [r4, #8]
 8029520:	3101      	adds	r1, #1
 8029522:	60a1      	str	r1, [r4, #8]
 8029524:	e7ba      	b.n	802949c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08029526 <_ZN8touchgfx7Outline6lineToEii>:
 8029526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029528:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802952a:	4604      	mov	r4, r0
 802952c:	460d      	mov	r5, r1
 802952e:	4616      	mov	r6, r2
 8029530:	079b      	lsls	r3, r3, #30
 8029532:	d526      	bpl.n	8029582 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8029534:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8029538:	ea85 0001 	eor.w	r0, r5, r1
 802953c:	ea86 0302 	eor.w	r3, r6, r2
 8029540:	4303      	orrs	r3, r0
 8029542:	d01e      	beq.n	8029582 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8029544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8029546:	114b      	asrs	r3, r1, #5
 8029548:	9600      	str	r6, [sp, #0]
 802954a:	4283      	cmp	r3, r0
 802954c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802954e:	bfb8      	it	lt
 8029550:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8029552:	3301      	adds	r3, #1
 8029554:	4283      	cmp	r3, r0
 8029556:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8029558:	bfc8      	it	gt
 802955a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802955c:	116b      	asrs	r3, r5, #5
 802955e:	4283      	cmp	r3, r0
 8029560:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8029562:	bfb8      	it	lt
 8029564:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8029566:	3301      	adds	r3, #1
 8029568:	4283      	cmp	r3, r0
 802956a:	4620      	mov	r0, r4
 802956c:	bfc8      	it	gt
 802956e:	6363      	strgt	r3, [r4, #52]	; 0x34
 8029570:	462b      	mov	r3, r5
 8029572:	f7ff f9e3 	bl	802893c <_ZN8touchgfx7Outline10renderLineEiiii>
 8029576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029578:	f043 0301 	orr.w	r3, r3, #1
 802957c:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8029580:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029582:	b002      	add	sp, #8
 8029584:	bd70      	pop	{r4, r5, r6, pc}

08029586 <_ZN8touchgfx7Outline6moveToEii>:
 8029586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029588:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802958a:	4615      	mov	r5, r2
 802958c:	4604      	mov	r4, r0
 802958e:	460e      	mov	r6, r1
 8029590:	079a      	lsls	r2, r3, #30
 8029592:	d401      	bmi.n	8029598 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8029594:	f7ff f98c 	bl	80288b0 <_ZN8touchgfx7Outline5resetEv>
 8029598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802959a:	07db      	lsls	r3, r3, #31
 802959c:	d504      	bpl.n	80295a8 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802959e:	4620      	mov	r0, r4
 80295a0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 80295a4:	f7ff ffbf 	bl	8029526 <_ZN8touchgfx7Outline6lineToEii>
 80295a8:	ea4f 1c66 	mov.w	ip, r6, asr #5
 80295ac:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80295b0:	116f      	asrs	r7, r5, #5
 80295b2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80295b6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 80295ba:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 80295be:	4291      	cmp	r1, r2
 80295c0:	d015      	beq.n	80295ee <_ZN8touchgfx7Outline6moveToEii+0x68>
 80295c2:	8b61      	ldrh	r1, [r4, #26]
 80295c4:	8b22      	ldrh	r2, [r4, #24]
 80295c6:	430a      	orrs	r2, r1
 80295c8:	d00b      	beq.n	80295e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80295ca:	2b00      	cmp	r3, #0
 80295cc:	db09      	blt.n	80295e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80295ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80295d0:	429a      	cmp	r2, r3
 80295d2:	dd06      	ble.n	80295e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80295d4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80295d8:	429a      	cmp	r2, r3
 80295da:	d30d      	bcc.n	80295f8 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80295dc:	2301      	movs	r3, #1
 80295de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80295e2:	2300      	movs	r3, #0
 80295e4:	f8a4 c014 	strh.w	ip, [r4, #20]
 80295e8:	82e7      	strh	r7, [r4, #22]
 80295ea:	8323      	strh	r3, [r4, #24]
 80295ec:	8363      	strh	r3, [r4, #26]
 80295ee:	61e6      	str	r6, [r4, #28]
 80295f0:	62a5      	str	r5, [r4, #40]	; 0x28
 80295f2:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80295f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80295f8:	f104 0314 	add.w	r3, r4, #20
 80295fc:	6922      	ldr	r2, [r4, #16]
 80295fe:	cb03      	ldmia	r3!, {r0, r1}
 8029600:	6010      	str	r0, [r2, #0]
 8029602:	6051      	str	r1, [r2, #4]
 8029604:	6923      	ldr	r3, [r4, #16]
 8029606:	3308      	adds	r3, #8
 8029608:	6123      	str	r3, [r4, #16]
 802960a:	68a3      	ldr	r3, [r4, #8]
 802960c:	3301      	adds	r3, #1
 802960e:	60a3      	str	r3, [r4, #8]
 8029610:	e7e7      	b.n	80295e2 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08029612 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8029612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029616:	b0d1      	sub	sp, #324	; 0x144
 8029618:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802961c:	466c      	mov	r4, sp
 802961e:	1a0d      	subs	r5, r1, r0
 8029620:	f100 0208 	add.w	r2, r0, #8
 8029624:	2d48      	cmp	r5, #72	; 0x48
 8029626:	f340 80ba 	ble.w	802979e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802962a:	112d      	asrs	r5, r5, #4
 802962c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8029630:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8029634:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8029638:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802963c:	f9b0 8000 	ldrsh.w	r8, [r0]
 8029640:	681e      	ldr	r6, [r3, #0]
 8029642:	6006      	str	r6, [r0, #0]
 8029644:	685e      	ldr	r6, [r3, #4]
 8029646:	6046      	str	r6, [r0, #4]
 8029648:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802964c:	f8a3 c004 	strh.w	ip, [r3, #4]
 8029650:	f8a3 e002 	strh.w	lr, [r3, #2]
 8029654:	80df      	strh	r7, [r3, #6]
 8029656:	f1a1 0308 	sub.w	r3, r1, #8
 802965a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802965e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8029662:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8029666:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802966a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802966e:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8029672:	45ac      	cmp	ip, r5
 8029674:	dd0f      	ble.n	8029696 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8029676:	681d      	ldr	r5, [r3, #0]
 8029678:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802967c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8029680:	6015      	str	r5, [r2, #0]
 8029682:	685d      	ldr	r5, [r3, #4]
 8029684:	6055      	str	r5, [r2, #4]
 8029686:	f821 7c08 	strh.w	r7, [r1, #-8]
 802968a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802968e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8029692:	f821 cc02 	strh.w	ip, [r1, #-2]
 8029696:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802969a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802969e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80296a2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80296a6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80296aa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80296ae:	4565      	cmp	r5, ip
 80296b0:	dd0d      	ble.n	80296ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 80296b2:	6815      	ldr	r5, [r2, #0]
 80296b4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80296b8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80296bc:	6005      	str	r5, [r0, #0]
 80296be:	6855      	ldr	r5, [r2, #4]
 80296c0:	8107      	strh	r7, [r0, #8]
 80296c2:	6045      	str	r5, [r0, #4]
 80296c4:	8146      	strh	r6, [r0, #10]
 80296c6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80296ca:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80296ce:	f9b0 7000 	ldrsh.w	r7, [r0]
 80296d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80296d6:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80296da:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80296de:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80296e2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80296e6:	45ac      	cmp	ip, r5
 80296e8:	dd0f      	ble.n	802970a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80296ea:	681d      	ldr	r5, [r3, #0]
 80296ec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80296f0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80296f4:	6005      	str	r5, [r0, #0]
 80296f6:	685d      	ldr	r5, [r3, #4]
 80296f8:	6045      	str	r5, [r0, #4]
 80296fa:	f821 7c08 	strh.w	r7, [r1, #-8]
 80296fe:	f821 6c06 	strh.w	r6, [r1, #-6]
 8029702:	f821 ec04 	strh.w	lr, [r1, #-4]
 8029706:	f821 cc02 	strh.w	ip, [r1, #-2]
 802970a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802970e:	f102 0508 	add.w	r5, r2, #8
 8029712:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8029716:	f9b0 e000 	ldrsh.w	lr, [r0]
 802971a:	462f      	mov	r7, r5
 802971c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8029720:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8029724:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8029728:	45b2      	cmp	sl, r6
 802972a:	dc18      	bgt.n	802975e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802972c:	3b08      	subs	r3, #8
 802972e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8029732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8029736:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802973a:	45b2      	cmp	sl, r6
 802973c:	dbf6      	blt.n	802972c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802973e:	42ab      	cmp	r3, r5
 8029740:	681e      	ldr	r6, [r3, #0]
 8029742:	d30e      	bcc.n	8029762 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8029744:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8029748:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802974c:	602e      	str	r6, [r5, #0]
 802974e:	685e      	ldr	r6, [r3, #4]
 8029750:	606e      	str	r6, [r5, #4]
 8029752:	f8a3 9000 	strh.w	r9, [r3]
 8029756:	f8a3 8002 	strh.w	r8, [r3, #2]
 802975a:	809f      	strh	r7, [r3, #4]
 802975c:	80da      	strh	r2, [r3, #6]
 802975e:	462a      	mov	r2, r5
 8029760:	e7d3      	b.n	802970a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8029762:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8029766:	6006      	str	r6, [r0, #0]
 8029768:	685e      	ldr	r6, [r3, #4]
 802976a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802976e:	6046      	str	r6, [r0, #4]
 8029770:	1a1e      	subs	r6, r3, r0
 8029772:	80da      	strh	r2, [r3, #6]
 8029774:	1b4a      	subs	r2, r1, r5
 8029776:	f8a3 e000 	strh.w	lr, [r3]
 802977a:	10d2      	asrs	r2, r2, #3
 802977c:	f8a3 c002 	strh.w	ip, [r3, #2]
 8029780:	f8a3 8004 	strh.w	r8, [r3, #4]
 8029784:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8029788:	bfb5      	itete	lt
 802978a:	e9c4 0300 	strdlt	r0, r3, [r4]
 802978e:	4607      	movge	r7, r0
 8029790:	460b      	movlt	r3, r1
 8029792:	e9c4 5100 	strdge	r5, r1, [r4]
 8029796:	4638      	mov	r0, r7
 8029798:	3408      	adds	r4, #8
 802979a:	4619      	mov	r1, r3
 802979c:	e73f      	b.n	802961e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802979e:	4291      	cmp	r1, r2
 80297a0:	d925      	bls.n	80297ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 80297a2:	f1a2 0310 	sub.w	r3, r2, #16
 80297a6:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 80297aa:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 80297ae:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 80297b2:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80297b6:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 80297ba:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 80297be:	42b5      	cmp	r5, r6
 80297c0:	dd13      	ble.n	80297ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 80297c2:	461d      	mov	r5, r3
 80297c4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 80297c8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 80297cc:	3b08      	subs	r3, #8
 80297ce:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80297d2:	619e      	str	r6, [r3, #24]
 80297d4:	42a8      	cmp	r0, r5
 80297d6:	686e      	ldr	r6, [r5, #4]
 80297d8:	f8a3 c010 	strh.w	ip, [r3, #16]
 80297dc:	61de      	str	r6, [r3, #28]
 80297de:	825f      	strh	r7, [r3, #18]
 80297e0:	f8a3 8014 	strh.w	r8, [r3, #20]
 80297e4:	f8a3 e016 	strh.w	lr, [r3, #22]
 80297e8:	d1dd      	bne.n	80297a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80297ea:	3208      	adds	r2, #8
 80297ec:	e7d7      	b.n	802979e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80297ee:	466b      	mov	r3, sp
 80297f0:	429c      	cmp	r4, r3
 80297f2:	d903      	bls.n	80297fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80297f4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80297f8:	3c08      	subs	r4, #8
 80297fa:	e710      	b.n	802961e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80297fc:	b051      	add	sp, #324	; 0x144
 80297fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029802 <_ZN8touchgfx7Outline9sortCellsEv>:
 8029802:	6881      	ldr	r1, [r0, #8]
 8029804:	b111      	cbz	r1, 802980c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8029806:	68c0      	ldr	r0, [r0, #12]
 8029808:	f7ff bf03 	b.w	8029612 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802980c:	4770      	bx	lr

0802980e <_ZN8touchgfx7Outline8getCellsEv>:
 802980e:	b510      	push	{r4, lr}
 8029810:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8029812:	4604      	mov	r4, r0
 8029814:	07da      	lsls	r2, r3, #31
 8029816:	d507      	bpl.n	8029828 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8029818:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802981c:	f7ff fe83 	bl	8029526 <_ZN8touchgfx7Outline6lineToEii>
 8029820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8029822:	f023 0301 	bic.w	r3, r3, #1
 8029826:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802982a:	079b      	lsls	r3, r3, #30
 802982c:	d51a      	bpl.n	8029864 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802982e:	8b62      	ldrh	r2, [r4, #26]
 8029830:	8b23      	ldrh	r3, [r4, #24]
 8029832:	4313      	orrs	r3, r2
 8029834:	d00d      	beq.n	8029852 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8029836:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802983a:	2b00      	cmp	r3, #0
 802983c:	db09      	blt.n	8029852 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802983e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8029840:	4293      	cmp	r3, r2
 8029842:	da06      	bge.n	8029852 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8029844:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8029848:	429a      	cmp	r2, r3
 802984a:	d80d      	bhi.n	8029868 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802984c:	2301      	movs	r3, #1
 802984e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029852:	68a0      	ldr	r0, [r4, #8]
 8029854:	b138      	cbz	r0, 8029866 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8029856:	4620      	mov	r0, r4
 8029858:	f7ff ffd3 	bl	8029802 <_ZN8touchgfx7Outline9sortCellsEv>
 802985c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802985e:	f023 0302 	bic.w	r3, r3, #2
 8029862:	63e3      	str	r3, [r4, #60]	; 0x3c
 8029864:	68e0      	ldr	r0, [r4, #12]
 8029866:	bd10      	pop	{r4, pc}
 8029868:	f104 0314 	add.w	r3, r4, #20
 802986c:	6922      	ldr	r2, [r4, #16]
 802986e:	cb03      	ldmia	r3!, {r0, r1}
 8029870:	6010      	str	r0, [r2, #0]
 8029872:	6051      	str	r1, [r2, #4]
 8029874:	6923      	ldr	r3, [r4, #16]
 8029876:	3308      	adds	r3, #8
 8029878:	6123      	str	r3, [r4, #16]
 802987a:	68a3      	ldr	r3, [r4, #8]
 802987c:	3301      	adds	r3, #1
 802987e:	60a3      	str	r3, [r4, #8]
 8029880:	e7e7      	b.n	8029852 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08029882 <_ZN8touchgfx8ScanlineD1Ev>:
 8029882:	4770      	bx	lr

08029884 <_ZN8touchgfx8ScanlineD0Ev>:
 8029884:	b510      	push	{r4, lr}
 8029886:	4604      	mov	r4, r0
 8029888:	2124      	movs	r1, #36	; 0x24
 802988a:	f000 f87a 	bl	8029982 <_ZdlPvj>
 802988e:	4620      	mov	r0, r4
 8029890:	bd10      	pop	{r4, pc}

08029892 <_ZN8touchgfx8Scanline5resetEv>:
 8029892:	b510      	push	{r4, lr}
 8029894:	4604      	mov	r4, r0
 8029896:	f7f3 f8bf 	bl	801ca18 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802989a:	61a0      	str	r0, [r4, #24]
 802989c:	f7f3 f8c2 	bl	801ca24 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 80298a0:	61e0      	str	r0, [r4, #28]
 80298a2:	f7f3 f8c5 	bl	801ca30 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 80298a6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80298aa:	6220      	str	r0, [r4, #32]
 80298ac:	6160      	str	r0, [r4, #20]
 80298ae:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80298b2:	69e3      	ldr	r3, [r4, #28]
 80298b4:	6123      	str	r3, [r4, #16]
 80298b6:	2300      	movs	r3, #0
 80298b8:	60e3      	str	r3, [r4, #12]
 80298ba:	bd10      	pop	{r4, pc}

080298bc <_ZN8touchgfx8ScanlineC1Ev>:
 80298bc:	4b07      	ldr	r3, [pc, #28]	; (80298dc <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 80298be:	b510      	push	{r4, lr}
 80298c0:	6003      	str	r3, [r0, #0]
 80298c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80298c6:	4604      	mov	r4, r0
 80298c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80298cc:	2300      	movs	r3, #0
 80298ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80298d2:	6143      	str	r3, [r0, #20]
 80298d4:	f7ff ffdd 	bl	8029892 <_ZN8touchgfx8Scanline5resetEv>
 80298d8:	4620      	mov	r0, r4
 80298da:	bd10      	pop	{r4, pc}
 80298dc:	0802f878 	.word	0x0802f878

080298e0 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80298e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80298e4:	1e0c      	subs	r4, r1, #0
 80298e6:	4605      	mov	r5, r0
 80298e8:	4617      	mov	r7, r2
 80298ea:	461e      	mov	r6, r3
 80298ec:	da03      	bge.n	80298f6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80298ee:	4426      	add	r6, r4
 80298f0:	2e01      	cmp	r6, #1
 80298f2:	d421      	bmi.n	8029938 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80298f4:	2400      	movs	r4, #0
 80298f6:	f7f3 f889 	bl	801ca0c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80298fa:	42a0      	cmp	r0, r4
 80298fc:	d91c      	bls.n	8029938 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80298fe:	eb04 0806 	add.w	r8, r4, r6
 8029902:	f7f3 f883 	bl	801ca0c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8029906:	4580      	cmp	r8, r0
 8029908:	d902      	bls.n	8029910 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802990a:	f7f3 f87f 	bl	801ca0c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802990e:	1b06      	subs	r6, r0, r4
 8029910:	69a8      	ldr	r0, [r5, #24]
 8029912:	4632      	mov	r2, r6
 8029914:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8029918:	4420      	add	r0, r4
 802991a:	f7f4 fd76 	bl	801e40a <_ZN8touchgfx6memsetEPvhm>
 802991e:	686b      	ldr	r3, [r5, #4]
 8029920:	b2b2      	uxth	r2, r6
 8029922:	3301      	adds	r3, #1
 8029924:	42a3      	cmp	r3, r4
 8029926:	696b      	ldr	r3, [r5, #20]
 8029928:	d108      	bne.n	802993c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802992a:	8819      	ldrh	r1, [r3, #0]
 802992c:	440a      	add	r2, r1
 802992e:	801a      	strh	r2, [r3, #0]
 8029930:	3c01      	subs	r4, #1
 8029932:	4434      	add	r4, r6
 8029934:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8029938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802993c:	1c99      	adds	r1, r3, #2
 802993e:	6169      	str	r1, [r5, #20]
 8029940:	805a      	strh	r2, [r3, #2]
 8029942:	692b      	ldr	r3, [r5, #16]
 8029944:	1c9a      	adds	r2, r3, #2
 8029946:	612a      	str	r2, [r5, #16]
 8029948:	805c      	strh	r4, [r3, #2]
 802994a:	68eb      	ldr	r3, [r5, #12]
 802994c:	3301      	adds	r3, #1
 802994e:	60eb      	str	r3, [r5, #12]
 8029950:	e7ee      	b.n	8029930 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08029952 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8029952:	2200      	movs	r2, #0
 8029954:	6002      	str	r2, [r0, #0]
 8029956:	7102      	strb	r2, [r0, #4]
 8029958:	6102      	str	r2, [r0, #16]
 802995a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802995e:	4770      	bx	lr

08029960 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8029960:	4770      	bx	lr

08029962 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8029962:	6083      	str	r3, [r0, #8]
 8029964:	9b00      	ldr	r3, [sp, #0]
 8029966:	6001      	str	r1, [r0, #0]
 8029968:	60c3      	str	r3, [r0, #12]
 802996a:	9b01      	ldr	r3, [sp, #4]
 802996c:	7102      	strb	r2, [r0, #4]
 802996e:	6103      	str	r3, [r0, #16]
 8029970:	4770      	bx	lr

08029972 <__aeabi_atexit>:
 8029972:	460b      	mov	r3, r1
 8029974:	4601      	mov	r1, r0
 8029976:	4618      	mov	r0, r3
 8029978:	f000 b852 	b.w	8029a20 <__cxa_atexit>

0802997c <__cxa_pure_virtual>:
 802997c:	b508      	push	{r3, lr}
 802997e:	f000 f81f 	bl	80299c0 <_ZSt9terminatev>

08029982 <_ZdlPvj>:
 8029982:	f000 b80f 	b.w	80299a4 <_ZdlPv>

08029986 <__cxa_guard_acquire>:
 8029986:	6803      	ldr	r3, [r0, #0]
 8029988:	07db      	lsls	r3, r3, #31
 802998a:	d406      	bmi.n	802999a <__cxa_guard_acquire+0x14>
 802998c:	7843      	ldrb	r3, [r0, #1]
 802998e:	b103      	cbz	r3, 8029992 <__cxa_guard_acquire+0xc>
 8029990:	deff      	udf	#255	; 0xff
 8029992:	2301      	movs	r3, #1
 8029994:	7043      	strb	r3, [r0, #1]
 8029996:	4618      	mov	r0, r3
 8029998:	4770      	bx	lr
 802999a:	2000      	movs	r0, #0
 802999c:	4770      	bx	lr

0802999e <__cxa_guard_release>:
 802999e:	2301      	movs	r3, #1
 80299a0:	6003      	str	r3, [r0, #0]
 80299a2:	4770      	bx	lr

080299a4 <_ZdlPv>:
 80299a4:	f000 b88e 	b.w	8029ac4 <free>

080299a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80299a8:	b508      	push	{r3, lr}
 80299aa:	4780      	blx	r0
 80299ac:	f000 f80d 	bl	80299ca <abort>

080299b0 <_ZSt13get_terminatev>:
 80299b0:	4b02      	ldr	r3, [pc, #8]	; (80299bc <_ZSt13get_terminatev+0xc>)
 80299b2:	6818      	ldr	r0, [r3, #0]
 80299b4:	f3bf 8f5b 	dmb	ish
 80299b8:	4770      	bx	lr
 80299ba:	bf00      	nop
 80299bc:	200000d8 	.word	0x200000d8

080299c0 <_ZSt9terminatev>:
 80299c0:	b508      	push	{r3, lr}
 80299c2:	f7ff fff5 	bl	80299b0 <_ZSt13get_terminatev>
 80299c6:	f7ff ffef 	bl	80299a8 <_ZN10__cxxabiv111__terminateEPFvvE>

080299ca <abort>:
 80299ca:	b508      	push	{r3, lr}
 80299cc:	2006      	movs	r0, #6
 80299ce:	f000 fc3d 	bl	802a24c <raise>
 80299d2:	2001      	movs	r0, #1
 80299d4:	f7d9 fec4 	bl	8003760 <_exit>

080299d8 <__assert_func>:
 80299d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80299da:	461c      	mov	r4, r3
 80299dc:	4b09      	ldr	r3, [pc, #36]	; (8029a04 <__assert_func+0x2c>)
 80299de:	681b      	ldr	r3, [r3, #0]
 80299e0:	4605      	mov	r5, r0
 80299e2:	68d8      	ldr	r0, [r3, #12]
 80299e4:	b152      	cbz	r2, 80299fc <__assert_func+0x24>
 80299e6:	4b08      	ldr	r3, [pc, #32]	; (8029a08 <__assert_func+0x30>)
 80299e8:	9100      	str	r1, [sp, #0]
 80299ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80299ee:	4907      	ldr	r1, [pc, #28]	; (8029a0c <__assert_func+0x34>)
 80299f0:	462b      	mov	r3, r5
 80299f2:	4622      	mov	r2, r4
 80299f4:	f000 f828 	bl	8029a48 <fiprintf>
 80299f8:	f7ff ffe7 	bl	80299ca <abort>
 80299fc:	4b04      	ldr	r3, [pc, #16]	; (8029a10 <__assert_func+0x38>)
 80299fe:	461a      	mov	r2, r3
 8029a00:	e7f2      	b.n	80299e8 <__assert_func+0x10>
 8029a02:	bf00      	nop
 8029a04:	200000dc 	.word	0x200000dc
 8029a08:	0802f880 	.word	0x0802f880
 8029a0c:	0802f88d 	.word	0x0802f88d
 8029a10:	0802f8bb 	.word	0x0802f8bb

08029a14 <atexit>:
 8029a14:	2300      	movs	r3, #0
 8029a16:	4601      	mov	r1, r0
 8029a18:	461a      	mov	r2, r3
 8029a1a:	4618      	mov	r0, r3
 8029a1c:	f000 bcf2 	b.w	802a404 <__register_exitproc>

08029a20 <__cxa_atexit>:
 8029a20:	b510      	push	{r4, lr}
 8029a22:	4c05      	ldr	r4, [pc, #20]	; (8029a38 <__cxa_atexit+0x18>)
 8029a24:	4613      	mov	r3, r2
 8029a26:	b12c      	cbz	r4, 8029a34 <__cxa_atexit+0x14>
 8029a28:	460a      	mov	r2, r1
 8029a2a:	4601      	mov	r1, r0
 8029a2c:	2002      	movs	r0, #2
 8029a2e:	f000 fce9 	bl	802a404 <__register_exitproc>
 8029a32:	bd10      	pop	{r4, pc}
 8029a34:	4620      	mov	r0, r4
 8029a36:	e7fc      	b.n	8029a32 <__cxa_atexit+0x12>
 8029a38:	0802a405 	.word	0x0802a405

08029a3c <__errno>:
 8029a3c:	4b01      	ldr	r3, [pc, #4]	; (8029a44 <__errno+0x8>)
 8029a3e:	6818      	ldr	r0, [r3, #0]
 8029a40:	4770      	bx	lr
 8029a42:	bf00      	nop
 8029a44:	200000dc 	.word	0x200000dc

08029a48 <fiprintf>:
 8029a48:	b40e      	push	{r1, r2, r3}
 8029a4a:	b503      	push	{r0, r1, lr}
 8029a4c:	4601      	mov	r1, r0
 8029a4e:	ab03      	add	r3, sp, #12
 8029a50:	4805      	ldr	r0, [pc, #20]	; (8029a68 <fiprintf+0x20>)
 8029a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8029a56:	6800      	ldr	r0, [r0, #0]
 8029a58:	9301      	str	r3, [sp, #4]
 8029a5a:	f000 f921 	bl	8029ca0 <_vfiprintf_r>
 8029a5e:	b002      	add	sp, #8
 8029a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8029a64:	b003      	add	sp, #12
 8029a66:	4770      	bx	lr
 8029a68:	200000dc 	.word	0x200000dc

08029a6c <__libc_init_array>:
 8029a6c:	b570      	push	{r4, r5, r6, lr}
 8029a6e:	4e0d      	ldr	r6, [pc, #52]	; (8029aa4 <__libc_init_array+0x38>)
 8029a70:	4c0d      	ldr	r4, [pc, #52]	; (8029aa8 <__libc_init_array+0x3c>)
 8029a72:	1ba4      	subs	r4, r4, r6
 8029a74:	10a4      	asrs	r4, r4, #2
 8029a76:	2500      	movs	r5, #0
 8029a78:	42a5      	cmp	r5, r4
 8029a7a:	d109      	bne.n	8029a90 <__libc_init_array+0x24>
 8029a7c:	4e0b      	ldr	r6, [pc, #44]	; (8029aac <__libc_init_array+0x40>)
 8029a7e:	4c0c      	ldr	r4, [pc, #48]	; (8029ab0 <__libc_init_array+0x44>)
 8029a80:	f000 ffb0 	bl	802a9e4 <_init>
 8029a84:	1ba4      	subs	r4, r4, r6
 8029a86:	10a4      	asrs	r4, r4, #2
 8029a88:	2500      	movs	r5, #0
 8029a8a:	42a5      	cmp	r5, r4
 8029a8c:	d105      	bne.n	8029a9a <__libc_init_array+0x2e>
 8029a8e:	bd70      	pop	{r4, r5, r6, pc}
 8029a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029a94:	4798      	blx	r3
 8029a96:	3501      	adds	r5, #1
 8029a98:	e7ee      	b.n	8029a78 <__libc_init_array+0xc>
 8029a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029a9e:	4798      	blx	r3
 8029aa0:	3501      	adds	r5, #1
 8029aa2:	e7f2      	b.n	8029a8a <__libc_init_array+0x1e>
 8029aa4:	08069908 	.word	0x08069908
 8029aa8:	08069908 	.word	0x08069908
 8029aac:	08069908 	.word	0x08069908
 8029ab0:	0806991c 	.word	0x0806991c

08029ab4 <malloc>:
 8029ab4:	4b02      	ldr	r3, [pc, #8]	; (8029ac0 <malloc+0xc>)
 8029ab6:	4601      	mov	r1, r0
 8029ab8:	6818      	ldr	r0, [r3, #0]
 8029aba:	f000 b86d 	b.w	8029b98 <_malloc_r>
 8029abe:	bf00      	nop
 8029ac0:	200000dc 	.word	0x200000dc

08029ac4 <free>:
 8029ac4:	4b02      	ldr	r3, [pc, #8]	; (8029ad0 <free+0xc>)
 8029ac6:	4601      	mov	r1, r0
 8029ac8:	6818      	ldr	r0, [r3, #0]
 8029aca:	f000 b817 	b.w	8029afc <_free_r>
 8029ace:	bf00      	nop
 8029ad0:	200000dc 	.word	0x200000dc

08029ad4 <memcpy>:
 8029ad4:	b510      	push	{r4, lr}
 8029ad6:	1e43      	subs	r3, r0, #1
 8029ad8:	440a      	add	r2, r1
 8029ada:	4291      	cmp	r1, r2
 8029adc:	d100      	bne.n	8029ae0 <memcpy+0xc>
 8029ade:	bd10      	pop	{r4, pc}
 8029ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029ae8:	e7f7      	b.n	8029ada <memcpy+0x6>

08029aea <memset>:
 8029aea:	4402      	add	r2, r0
 8029aec:	4603      	mov	r3, r0
 8029aee:	4293      	cmp	r3, r2
 8029af0:	d100      	bne.n	8029af4 <memset+0xa>
 8029af2:	4770      	bx	lr
 8029af4:	f803 1b01 	strb.w	r1, [r3], #1
 8029af8:	e7f9      	b.n	8029aee <memset+0x4>
	...

08029afc <_free_r>:
 8029afc:	b538      	push	{r3, r4, r5, lr}
 8029afe:	4605      	mov	r5, r0
 8029b00:	2900      	cmp	r1, #0
 8029b02:	d045      	beq.n	8029b90 <_free_r+0x94>
 8029b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029b08:	1f0c      	subs	r4, r1, #4
 8029b0a:	2b00      	cmp	r3, #0
 8029b0c:	bfb8      	it	lt
 8029b0e:	18e4      	addlt	r4, r4, r3
 8029b10:	f000 feba 	bl	802a888 <__malloc_lock>
 8029b14:	4a1f      	ldr	r2, [pc, #124]	; (8029b94 <_free_r+0x98>)
 8029b16:	6813      	ldr	r3, [r2, #0]
 8029b18:	4610      	mov	r0, r2
 8029b1a:	b933      	cbnz	r3, 8029b2a <_free_r+0x2e>
 8029b1c:	6063      	str	r3, [r4, #4]
 8029b1e:	6014      	str	r4, [r2, #0]
 8029b20:	4628      	mov	r0, r5
 8029b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029b26:	f000 beb0 	b.w	802a88a <__malloc_unlock>
 8029b2a:	42a3      	cmp	r3, r4
 8029b2c:	d90c      	bls.n	8029b48 <_free_r+0x4c>
 8029b2e:	6821      	ldr	r1, [r4, #0]
 8029b30:	1862      	adds	r2, r4, r1
 8029b32:	4293      	cmp	r3, r2
 8029b34:	bf04      	itt	eq
 8029b36:	681a      	ldreq	r2, [r3, #0]
 8029b38:	685b      	ldreq	r3, [r3, #4]
 8029b3a:	6063      	str	r3, [r4, #4]
 8029b3c:	bf04      	itt	eq
 8029b3e:	1852      	addeq	r2, r2, r1
 8029b40:	6022      	streq	r2, [r4, #0]
 8029b42:	6004      	str	r4, [r0, #0]
 8029b44:	e7ec      	b.n	8029b20 <_free_r+0x24>
 8029b46:	4613      	mov	r3, r2
 8029b48:	685a      	ldr	r2, [r3, #4]
 8029b4a:	b10a      	cbz	r2, 8029b50 <_free_r+0x54>
 8029b4c:	42a2      	cmp	r2, r4
 8029b4e:	d9fa      	bls.n	8029b46 <_free_r+0x4a>
 8029b50:	6819      	ldr	r1, [r3, #0]
 8029b52:	1858      	adds	r0, r3, r1
 8029b54:	42a0      	cmp	r0, r4
 8029b56:	d10b      	bne.n	8029b70 <_free_r+0x74>
 8029b58:	6820      	ldr	r0, [r4, #0]
 8029b5a:	4401      	add	r1, r0
 8029b5c:	1858      	adds	r0, r3, r1
 8029b5e:	4282      	cmp	r2, r0
 8029b60:	6019      	str	r1, [r3, #0]
 8029b62:	d1dd      	bne.n	8029b20 <_free_r+0x24>
 8029b64:	6810      	ldr	r0, [r2, #0]
 8029b66:	6852      	ldr	r2, [r2, #4]
 8029b68:	605a      	str	r2, [r3, #4]
 8029b6a:	4401      	add	r1, r0
 8029b6c:	6019      	str	r1, [r3, #0]
 8029b6e:	e7d7      	b.n	8029b20 <_free_r+0x24>
 8029b70:	d902      	bls.n	8029b78 <_free_r+0x7c>
 8029b72:	230c      	movs	r3, #12
 8029b74:	602b      	str	r3, [r5, #0]
 8029b76:	e7d3      	b.n	8029b20 <_free_r+0x24>
 8029b78:	6820      	ldr	r0, [r4, #0]
 8029b7a:	1821      	adds	r1, r4, r0
 8029b7c:	428a      	cmp	r2, r1
 8029b7e:	bf04      	itt	eq
 8029b80:	6811      	ldreq	r1, [r2, #0]
 8029b82:	6852      	ldreq	r2, [r2, #4]
 8029b84:	6062      	str	r2, [r4, #4]
 8029b86:	bf04      	itt	eq
 8029b88:	1809      	addeq	r1, r1, r0
 8029b8a:	6021      	streq	r1, [r4, #0]
 8029b8c:	605c      	str	r4, [r3, #4]
 8029b8e:	e7c7      	b.n	8029b20 <_free_r+0x24>
 8029b90:	bd38      	pop	{r3, r4, r5, pc}
 8029b92:	bf00      	nop
 8029b94:	2000c034 	.word	0x2000c034

08029b98 <_malloc_r>:
 8029b98:	b570      	push	{r4, r5, r6, lr}
 8029b9a:	1ccd      	adds	r5, r1, #3
 8029b9c:	f025 0503 	bic.w	r5, r5, #3
 8029ba0:	3508      	adds	r5, #8
 8029ba2:	2d0c      	cmp	r5, #12
 8029ba4:	bf38      	it	cc
 8029ba6:	250c      	movcc	r5, #12
 8029ba8:	2d00      	cmp	r5, #0
 8029baa:	4606      	mov	r6, r0
 8029bac:	db01      	blt.n	8029bb2 <_malloc_r+0x1a>
 8029bae:	42a9      	cmp	r1, r5
 8029bb0:	d903      	bls.n	8029bba <_malloc_r+0x22>
 8029bb2:	230c      	movs	r3, #12
 8029bb4:	6033      	str	r3, [r6, #0]
 8029bb6:	2000      	movs	r0, #0
 8029bb8:	bd70      	pop	{r4, r5, r6, pc}
 8029bba:	f000 fe65 	bl	802a888 <__malloc_lock>
 8029bbe:	4a21      	ldr	r2, [pc, #132]	; (8029c44 <_malloc_r+0xac>)
 8029bc0:	6814      	ldr	r4, [r2, #0]
 8029bc2:	4621      	mov	r1, r4
 8029bc4:	b991      	cbnz	r1, 8029bec <_malloc_r+0x54>
 8029bc6:	4c20      	ldr	r4, [pc, #128]	; (8029c48 <_malloc_r+0xb0>)
 8029bc8:	6823      	ldr	r3, [r4, #0]
 8029bca:	b91b      	cbnz	r3, 8029bd4 <_malloc_r+0x3c>
 8029bcc:	4630      	mov	r0, r6
 8029bce:	f000 fb05 	bl	802a1dc <_sbrk_r>
 8029bd2:	6020      	str	r0, [r4, #0]
 8029bd4:	4629      	mov	r1, r5
 8029bd6:	4630      	mov	r0, r6
 8029bd8:	f000 fb00 	bl	802a1dc <_sbrk_r>
 8029bdc:	1c43      	adds	r3, r0, #1
 8029bde:	d124      	bne.n	8029c2a <_malloc_r+0x92>
 8029be0:	230c      	movs	r3, #12
 8029be2:	6033      	str	r3, [r6, #0]
 8029be4:	4630      	mov	r0, r6
 8029be6:	f000 fe50 	bl	802a88a <__malloc_unlock>
 8029bea:	e7e4      	b.n	8029bb6 <_malloc_r+0x1e>
 8029bec:	680b      	ldr	r3, [r1, #0]
 8029bee:	1b5b      	subs	r3, r3, r5
 8029bf0:	d418      	bmi.n	8029c24 <_malloc_r+0x8c>
 8029bf2:	2b0b      	cmp	r3, #11
 8029bf4:	d90f      	bls.n	8029c16 <_malloc_r+0x7e>
 8029bf6:	600b      	str	r3, [r1, #0]
 8029bf8:	50cd      	str	r5, [r1, r3]
 8029bfa:	18cc      	adds	r4, r1, r3
 8029bfc:	4630      	mov	r0, r6
 8029bfe:	f000 fe44 	bl	802a88a <__malloc_unlock>
 8029c02:	f104 000b 	add.w	r0, r4, #11
 8029c06:	1d23      	adds	r3, r4, #4
 8029c08:	f020 0007 	bic.w	r0, r0, #7
 8029c0c:	1ac3      	subs	r3, r0, r3
 8029c0e:	d0d3      	beq.n	8029bb8 <_malloc_r+0x20>
 8029c10:	425a      	negs	r2, r3
 8029c12:	50e2      	str	r2, [r4, r3]
 8029c14:	e7d0      	b.n	8029bb8 <_malloc_r+0x20>
 8029c16:	428c      	cmp	r4, r1
 8029c18:	684b      	ldr	r3, [r1, #4]
 8029c1a:	bf16      	itet	ne
 8029c1c:	6063      	strne	r3, [r4, #4]
 8029c1e:	6013      	streq	r3, [r2, #0]
 8029c20:	460c      	movne	r4, r1
 8029c22:	e7eb      	b.n	8029bfc <_malloc_r+0x64>
 8029c24:	460c      	mov	r4, r1
 8029c26:	6849      	ldr	r1, [r1, #4]
 8029c28:	e7cc      	b.n	8029bc4 <_malloc_r+0x2c>
 8029c2a:	1cc4      	adds	r4, r0, #3
 8029c2c:	f024 0403 	bic.w	r4, r4, #3
 8029c30:	42a0      	cmp	r0, r4
 8029c32:	d005      	beq.n	8029c40 <_malloc_r+0xa8>
 8029c34:	1a21      	subs	r1, r4, r0
 8029c36:	4630      	mov	r0, r6
 8029c38:	f000 fad0 	bl	802a1dc <_sbrk_r>
 8029c3c:	3001      	adds	r0, #1
 8029c3e:	d0cf      	beq.n	8029be0 <_malloc_r+0x48>
 8029c40:	6025      	str	r5, [r4, #0]
 8029c42:	e7db      	b.n	8029bfc <_malloc_r+0x64>
 8029c44:	2000c034 	.word	0x2000c034
 8029c48:	2000c038 	.word	0x2000c038

08029c4c <__sfputc_r>:
 8029c4c:	6893      	ldr	r3, [r2, #8]
 8029c4e:	3b01      	subs	r3, #1
 8029c50:	2b00      	cmp	r3, #0
 8029c52:	b410      	push	{r4}
 8029c54:	6093      	str	r3, [r2, #8]
 8029c56:	da08      	bge.n	8029c6a <__sfputc_r+0x1e>
 8029c58:	6994      	ldr	r4, [r2, #24]
 8029c5a:	42a3      	cmp	r3, r4
 8029c5c:	db01      	blt.n	8029c62 <__sfputc_r+0x16>
 8029c5e:	290a      	cmp	r1, #10
 8029c60:	d103      	bne.n	8029c6a <__sfputc_r+0x1e>
 8029c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c66:	f000 bb0d 	b.w	802a284 <__swbuf_r>
 8029c6a:	6813      	ldr	r3, [r2, #0]
 8029c6c:	1c58      	adds	r0, r3, #1
 8029c6e:	6010      	str	r0, [r2, #0]
 8029c70:	7019      	strb	r1, [r3, #0]
 8029c72:	4608      	mov	r0, r1
 8029c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029c78:	4770      	bx	lr

08029c7a <__sfputs_r>:
 8029c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029c7c:	4606      	mov	r6, r0
 8029c7e:	460f      	mov	r7, r1
 8029c80:	4614      	mov	r4, r2
 8029c82:	18d5      	adds	r5, r2, r3
 8029c84:	42ac      	cmp	r4, r5
 8029c86:	d101      	bne.n	8029c8c <__sfputs_r+0x12>
 8029c88:	2000      	movs	r0, #0
 8029c8a:	e007      	b.n	8029c9c <__sfputs_r+0x22>
 8029c8c:	463a      	mov	r2, r7
 8029c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029c92:	4630      	mov	r0, r6
 8029c94:	f7ff ffda 	bl	8029c4c <__sfputc_r>
 8029c98:	1c43      	adds	r3, r0, #1
 8029c9a:	d1f3      	bne.n	8029c84 <__sfputs_r+0xa>
 8029c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029ca0 <_vfiprintf_r>:
 8029ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ca4:	460c      	mov	r4, r1
 8029ca6:	b09d      	sub	sp, #116	; 0x74
 8029ca8:	4617      	mov	r7, r2
 8029caa:	461d      	mov	r5, r3
 8029cac:	4606      	mov	r6, r0
 8029cae:	b118      	cbz	r0, 8029cb8 <_vfiprintf_r+0x18>
 8029cb0:	6983      	ldr	r3, [r0, #24]
 8029cb2:	b90b      	cbnz	r3, 8029cb8 <_vfiprintf_r+0x18>
 8029cb4:	f000 fcfa 	bl	802a6ac <__sinit>
 8029cb8:	4b7c      	ldr	r3, [pc, #496]	; (8029eac <_vfiprintf_r+0x20c>)
 8029cba:	429c      	cmp	r4, r3
 8029cbc:	d158      	bne.n	8029d70 <_vfiprintf_r+0xd0>
 8029cbe:	6874      	ldr	r4, [r6, #4]
 8029cc0:	89a3      	ldrh	r3, [r4, #12]
 8029cc2:	0718      	lsls	r0, r3, #28
 8029cc4:	d55e      	bpl.n	8029d84 <_vfiprintf_r+0xe4>
 8029cc6:	6923      	ldr	r3, [r4, #16]
 8029cc8:	2b00      	cmp	r3, #0
 8029cca:	d05b      	beq.n	8029d84 <_vfiprintf_r+0xe4>
 8029ccc:	2300      	movs	r3, #0
 8029cce:	9309      	str	r3, [sp, #36]	; 0x24
 8029cd0:	2320      	movs	r3, #32
 8029cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029cd6:	2330      	movs	r3, #48	; 0x30
 8029cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029cdc:	9503      	str	r5, [sp, #12]
 8029cde:	f04f 0b01 	mov.w	fp, #1
 8029ce2:	46b8      	mov	r8, r7
 8029ce4:	4645      	mov	r5, r8
 8029ce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029cea:	b10b      	cbz	r3, 8029cf0 <_vfiprintf_r+0x50>
 8029cec:	2b25      	cmp	r3, #37	; 0x25
 8029cee:	d154      	bne.n	8029d9a <_vfiprintf_r+0xfa>
 8029cf0:	ebb8 0a07 	subs.w	sl, r8, r7
 8029cf4:	d00b      	beq.n	8029d0e <_vfiprintf_r+0x6e>
 8029cf6:	4653      	mov	r3, sl
 8029cf8:	463a      	mov	r2, r7
 8029cfa:	4621      	mov	r1, r4
 8029cfc:	4630      	mov	r0, r6
 8029cfe:	f7ff ffbc 	bl	8029c7a <__sfputs_r>
 8029d02:	3001      	adds	r0, #1
 8029d04:	f000 80c2 	beq.w	8029e8c <_vfiprintf_r+0x1ec>
 8029d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029d0a:	4453      	add	r3, sl
 8029d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8029d0e:	f898 3000 	ldrb.w	r3, [r8]
 8029d12:	2b00      	cmp	r3, #0
 8029d14:	f000 80ba 	beq.w	8029e8c <_vfiprintf_r+0x1ec>
 8029d18:	2300      	movs	r3, #0
 8029d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8029d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029d22:	9304      	str	r3, [sp, #16]
 8029d24:	9307      	str	r3, [sp, #28]
 8029d26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029d2a:	931a      	str	r3, [sp, #104]	; 0x68
 8029d2c:	46a8      	mov	r8, r5
 8029d2e:	2205      	movs	r2, #5
 8029d30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8029d34:	485e      	ldr	r0, [pc, #376]	; (8029eb0 <_vfiprintf_r+0x210>)
 8029d36:	f7d6 fa6b 	bl	8000210 <memchr>
 8029d3a:	9b04      	ldr	r3, [sp, #16]
 8029d3c:	bb78      	cbnz	r0, 8029d9e <_vfiprintf_r+0xfe>
 8029d3e:	06d9      	lsls	r1, r3, #27
 8029d40:	bf44      	itt	mi
 8029d42:	2220      	movmi	r2, #32
 8029d44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8029d48:	071a      	lsls	r2, r3, #28
 8029d4a:	bf44      	itt	mi
 8029d4c:	222b      	movmi	r2, #43	; 0x2b
 8029d4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8029d52:	782a      	ldrb	r2, [r5, #0]
 8029d54:	2a2a      	cmp	r2, #42	; 0x2a
 8029d56:	d02a      	beq.n	8029dae <_vfiprintf_r+0x10e>
 8029d58:	9a07      	ldr	r2, [sp, #28]
 8029d5a:	46a8      	mov	r8, r5
 8029d5c:	2000      	movs	r0, #0
 8029d5e:	250a      	movs	r5, #10
 8029d60:	4641      	mov	r1, r8
 8029d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029d66:	3b30      	subs	r3, #48	; 0x30
 8029d68:	2b09      	cmp	r3, #9
 8029d6a:	d969      	bls.n	8029e40 <_vfiprintf_r+0x1a0>
 8029d6c:	b360      	cbz	r0, 8029dc8 <_vfiprintf_r+0x128>
 8029d6e:	e024      	b.n	8029dba <_vfiprintf_r+0x11a>
 8029d70:	4b50      	ldr	r3, [pc, #320]	; (8029eb4 <_vfiprintf_r+0x214>)
 8029d72:	429c      	cmp	r4, r3
 8029d74:	d101      	bne.n	8029d7a <_vfiprintf_r+0xda>
 8029d76:	68b4      	ldr	r4, [r6, #8]
 8029d78:	e7a2      	b.n	8029cc0 <_vfiprintf_r+0x20>
 8029d7a:	4b4f      	ldr	r3, [pc, #316]	; (8029eb8 <_vfiprintf_r+0x218>)
 8029d7c:	429c      	cmp	r4, r3
 8029d7e:	bf08      	it	eq
 8029d80:	68f4      	ldreq	r4, [r6, #12]
 8029d82:	e79d      	b.n	8029cc0 <_vfiprintf_r+0x20>
 8029d84:	4621      	mov	r1, r4
 8029d86:	4630      	mov	r0, r6
 8029d88:	f000 face 	bl	802a328 <__swsetup_r>
 8029d8c:	2800      	cmp	r0, #0
 8029d8e:	d09d      	beq.n	8029ccc <_vfiprintf_r+0x2c>
 8029d90:	f04f 30ff 	mov.w	r0, #4294967295
 8029d94:	b01d      	add	sp, #116	; 0x74
 8029d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d9a:	46a8      	mov	r8, r5
 8029d9c:	e7a2      	b.n	8029ce4 <_vfiprintf_r+0x44>
 8029d9e:	4a44      	ldr	r2, [pc, #272]	; (8029eb0 <_vfiprintf_r+0x210>)
 8029da0:	1a80      	subs	r0, r0, r2
 8029da2:	fa0b f000 	lsl.w	r0, fp, r0
 8029da6:	4318      	orrs	r0, r3
 8029da8:	9004      	str	r0, [sp, #16]
 8029daa:	4645      	mov	r5, r8
 8029dac:	e7be      	b.n	8029d2c <_vfiprintf_r+0x8c>
 8029dae:	9a03      	ldr	r2, [sp, #12]
 8029db0:	1d11      	adds	r1, r2, #4
 8029db2:	6812      	ldr	r2, [r2, #0]
 8029db4:	9103      	str	r1, [sp, #12]
 8029db6:	2a00      	cmp	r2, #0
 8029db8:	db01      	blt.n	8029dbe <_vfiprintf_r+0x11e>
 8029dba:	9207      	str	r2, [sp, #28]
 8029dbc:	e004      	b.n	8029dc8 <_vfiprintf_r+0x128>
 8029dbe:	4252      	negs	r2, r2
 8029dc0:	f043 0302 	orr.w	r3, r3, #2
 8029dc4:	9207      	str	r2, [sp, #28]
 8029dc6:	9304      	str	r3, [sp, #16]
 8029dc8:	f898 3000 	ldrb.w	r3, [r8]
 8029dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8029dce:	d10e      	bne.n	8029dee <_vfiprintf_r+0x14e>
 8029dd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8029dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8029dd6:	d138      	bne.n	8029e4a <_vfiprintf_r+0x1aa>
 8029dd8:	9b03      	ldr	r3, [sp, #12]
 8029dda:	1d1a      	adds	r2, r3, #4
 8029ddc:	681b      	ldr	r3, [r3, #0]
 8029dde:	9203      	str	r2, [sp, #12]
 8029de0:	2b00      	cmp	r3, #0
 8029de2:	bfb8      	it	lt
 8029de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8029de8:	f108 0802 	add.w	r8, r8, #2
 8029dec:	9305      	str	r3, [sp, #20]
 8029dee:	4d33      	ldr	r5, [pc, #204]	; (8029ebc <_vfiprintf_r+0x21c>)
 8029df0:	f898 1000 	ldrb.w	r1, [r8]
 8029df4:	2203      	movs	r2, #3
 8029df6:	4628      	mov	r0, r5
 8029df8:	f7d6 fa0a 	bl	8000210 <memchr>
 8029dfc:	b140      	cbz	r0, 8029e10 <_vfiprintf_r+0x170>
 8029dfe:	2340      	movs	r3, #64	; 0x40
 8029e00:	1b40      	subs	r0, r0, r5
 8029e02:	fa03 f000 	lsl.w	r0, r3, r0
 8029e06:	9b04      	ldr	r3, [sp, #16]
 8029e08:	4303      	orrs	r3, r0
 8029e0a:	f108 0801 	add.w	r8, r8, #1
 8029e0e:	9304      	str	r3, [sp, #16]
 8029e10:	f898 1000 	ldrb.w	r1, [r8]
 8029e14:	482a      	ldr	r0, [pc, #168]	; (8029ec0 <_vfiprintf_r+0x220>)
 8029e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029e1a:	2206      	movs	r2, #6
 8029e1c:	f108 0701 	add.w	r7, r8, #1
 8029e20:	f7d6 f9f6 	bl	8000210 <memchr>
 8029e24:	2800      	cmp	r0, #0
 8029e26:	d037      	beq.n	8029e98 <_vfiprintf_r+0x1f8>
 8029e28:	4b26      	ldr	r3, [pc, #152]	; (8029ec4 <_vfiprintf_r+0x224>)
 8029e2a:	bb1b      	cbnz	r3, 8029e74 <_vfiprintf_r+0x1d4>
 8029e2c:	9b03      	ldr	r3, [sp, #12]
 8029e2e:	3307      	adds	r3, #7
 8029e30:	f023 0307 	bic.w	r3, r3, #7
 8029e34:	3308      	adds	r3, #8
 8029e36:	9303      	str	r3, [sp, #12]
 8029e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029e3a:	444b      	add	r3, r9
 8029e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8029e3e:	e750      	b.n	8029ce2 <_vfiprintf_r+0x42>
 8029e40:	fb05 3202 	mla	r2, r5, r2, r3
 8029e44:	2001      	movs	r0, #1
 8029e46:	4688      	mov	r8, r1
 8029e48:	e78a      	b.n	8029d60 <_vfiprintf_r+0xc0>
 8029e4a:	2300      	movs	r3, #0
 8029e4c:	f108 0801 	add.w	r8, r8, #1
 8029e50:	9305      	str	r3, [sp, #20]
 8029e52:	4619      	mov	r1, r3
 8029e54:	250a      	movs	r5, #10
 8029e56:	4640      	mov	r0, r8
 8029e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029e5c:	3a30      	subs	r2, #48	; 0x30
 8029e5e:	2a09      	cmp	r2, #9
 8029e60:	d903      	bls.n	8029e6a <_vfiprintf_r+0x1ca>
 8029e62:	2b00      	cmp	r3, #0
 8029e64:	d0c3      	beq.n	8029dee <_vfiprintf_r+0x14e>
 8029e66:	9105      	str	r1, [sp, #20]
 8029e68:	e7c1      	b.n	8029dee <_vfiprintf_r+0x14e>
 8029e6a:	fb05 2101 	mla	r1, r5, r1, r2
 8029e6e:	2301      	movs	r3, #1
 8029e70:	4680      	mov	r8, r0
 8029e72:	e7f0      	b.n	8029e56 <_vfiprintf_r+0x1b6>
 8029e74:	ab03      	add	r3, sp, #12
 8029e76:	9300      	str	r3, [sp, #0]
 8029e78:	4622      	mov	r2, r4
 8029e7a:	4b13      	ldr	r3, [pc, #76]	; (8029ec8 <_vfiprintf_r+0x228>)
 8029e7c:	a904      	add	r1, sp, #16
 8029e7e:	4630      	mov	r0, r6
 8029e80:	f3af 8000 	nop.w
 8029e84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029e88:	4681      	mov	r9, r0
 8029e8a:	d1d5      	bne.n	8029e38 <_vfiprintf_r+0x198>
 8029e8c:	89a3      	ldrh	r3, [r4, #12]
 8029e8e:	065b      	lsls	r3, r3, #25
 8029e90:	f53f af7e 	bmi.w	8029d90 <_vfiprintf_r+0xf0>
 8029e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029e96:	e77d      	b.n	8029d94 <_vfiprintf_r+0xf4>
 8029e98:	ab03      	add	r3, sp, #12
 8029e9a:	9300      	str	r3, [sp, #0]
 8029e9c:	4622      	mov	r2, r4
 8029e9e:	4b0a      	ldr	r3, [pc, #40]	; (8029ec8 <_vfiprintf_r+0x228>)
 8029ea0:	a904      	add	r1, sp, #16
 8029ea2:	4630      	mov	r0, r6
 8029ea4:	f000 f888 	bl	8029fb8 <_printf_i>
 8029ea8:	e7ec      	b.n	8029e84 <_vfiprintf_r+0x1e4>
 8029eaa:	bf00      	nop
 8029eac:	0802f918 	.word	0x0802f918
 8029eb0:	0802f8c0 	.word	0x0802f8c0
 8029eb4:	0802f938 	.word	0x0802f938
 8029eb8:	0802f8f8 	.word	0x0802f8f8
 8029ebc:	0802f8c6 	.word	0x0802f8c6
 8029ec0:	0802f8ca 	.word	0x0802f8ca
 8029ec4:	00000000 	.word	0x00000000
 8029ec8:	08029c7b 	.word	0x08029c7b

08029ecc <_printf_common>:
 8029ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ed0:	4691      	mov	r9, r2
 8029ed2:	461f      	mov	r7, r3
 8029ed4:	688a      	ldr	r2, [r1, #8]
 8029ed6:	690b      	ldr	r3, [r1, #16]
 8029ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029edc:	4293      	cmp	r3, r2
 8029ede:	bfb8      	it	lt
 8029ee0:	4613      	movlt	r3, r2
 8029ee2:	f8c9 3000 	str.w	r3, [r9]
 8029ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029eea:	4606      	mov	r6, r0
 8029eec:	460c      	mov	r4, r1
 8029eee:	b112      	cbz	r2, 8029ef6 <_printf_common+0x2a>
 8029ef0:	3301      	adds	r3, #1
 8029ef2:	f8c9 3000 	str.w	r3, [r9]
 8029ef6:	6823      	ldr	r3, [r4, #0]
 8029ef8:	0699      	lsls	r1, r3, #26
 8029efa:	bf42      	ittt	mi
 8029efc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8029f00:	3302      	addmi	r3, #2
 8029f02:	f8c9 3000 	strmi.w	r3, [r9]
 8029f06:	6825      	ldr	r5, [r4, #0]
 8029f08:	f015 0506 	ands.w	r5, r5, #6
 8029f0c:	d107      	bne.n	8029f1e <_printf_common+0x52>
 8029f0e:	f104 0a19 	add.w	sl, r4, #25
 8029f12:	68e3      	ldr	r3, [r4, #12]
 8029f14:	f8d9 2000 	ldr.w	r2, [r9]
 8029f18:	1a9b      	subs	r3, r3, r2
 8029f1a:	42ab      	cmp	r3, r5
 8029f1c:	dc28      	bgt.n	8029f70 <_printf_common+0xa4>
 8029f1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8029f22:	6822      	ldr	r2, [r4, #0]
 8029f24:	3300      	adds	r3, #0
 8029f26:	bf18      	it	ne
 8029f28:	2301      	movne	r3, #1
 8029f2a:	0692      	lsls	r2, r2, #26
 8029f2c:	d42d      	bmi.n	8029f8a <_printf_common+0xbe>
 8029f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8029f32:	4639      	mov	r1, r7
 8029f34:	4630      	mov	r0, r6
 8029f36:	47c0      	blx	r8
 8029f38:	3001      	adds	r0, #1
 8029f3a:	d020      	beq.n	8029f7e <_printf_common+0xb2>
 8029f3c:	6823      	ldr	r3, [r4, #0]
 8029f3e:	68e5      	ldr	r5, [r4, #12]
 8029f40:	f8d9 2000 	ldr.w	r2, [r9]
 8029f44:	f003 0306 	and.w	r3, r3, #6
 8029f48:	2b04      	cmp	r3, #4
 8029f4a:	bf08      	it	eq
 8029f4c:	1aad      	subeq	r5, r5, r2
 8029f4e:	68a3      	ldr	r3, [r4, #8]
 8029f50:	6922      	ldr	r2, [r4, #16]
 8029f52:	bf0c      	ite	eq
 8029f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029f58:	2500      	movne	r5, #0
 8029f5a:	4293      	cmp	r3, r2
 8029f5c:	bfc4      	itt	gt
 8029f5e:	1a9b      	subgt	r3, r3, r2
 8029f60:	18ed      	addgt	r5, r5, r3
 8029f62:	f04f 0900 	mov.w	r9, #0
 8029f66:	341a      	adds	r4, #26
 8029f68:	454d      	cmp	r5, r9
 8029f6a:	d11a      	bne.n	8029fa2 <_printf_common+0xd6>
 8029f6c:	2000      	movs	r0, #0
 8029f6e:	e008      	b.n	8029f82 <_printf_common+0xb6>
 8029f70:	2301      	movs	r3, #1
 8029f72:	4652      	mov	r2, sl
 8029f74:	4639      	mov	r1, r7
 8029f76:	4630      	mov	r0, r6
 8029f78:	47c0      	blx	r8
 8029f7a:	3001      	adds	r0, #1
 8029f7c:	d103      	bne.n	8029f86 <_printf_common+0xba>
 8029f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8029f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f86:	3501      	adds	r5, #1
 8029f88:	e7c3      	b.n	8029f12 <_printf_common+0x46>
 8029f8a:	18e1      	adds	r1, r4, r3
 8029f8c:	1c5a      	adds	r2, r3, #1
 8029f8e:	2030      	movs	r0, #48	; 0x30
 8029f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029f94:	4422      	add	r2, r4
 8029f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029f9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029f9e:	3302      	adds	r3, #2
 8029fa0:	e7c5      	b.n	8029f2e <_printf_common+0x62>
 8029fa2:	2301      	movs	r3, #1
 8029fa4:	4622      	mov	r2, r4
 8029fa6:	4639      	mov	r1, r7
 8029fa8:	4630      	mov	r0, r6
 8029faa:	47c0      	blx	r8
 8029fac:	3001      	adds	r0, #1
 8029fae:	d0e6      	beq.n	8029f7e <_printf_common+0xb2>
 8029fb0:	f109 0901 	add.w	r9, r9, #1
 8029fb4:	e7d8      	b.n	8029f68 <_printf_common+0x9c>
	...

08029fb8 <_printf_i>:
 8029fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029fbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8029fc0:	460c      	mov	r4, r1
 8029fc2:	7e09      	ldrb	r1, [r1, #24]
 8029fc4:	b085      	sub	sp, #20
 8029fc6:	296e      	cmp	r1, #110	; 0x6e
 8029fc8:	4617      	mov	r7, r2
 8029fca:	4606      	mov	r6, r0
 8029fcc:	4698      	mov	r8, r3
 8029fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029fd0:	f000 80b3 	beq.w	802a13a <_printf_i+0x182>
 8029fd4:	d822      	bhi.n	802a01c <_printf_i+0x64>
 8029fd6:	2963      	cmp	r1, #99	; 0x63
 8029fd8:	d036      	beq.n	802a048 <_printf_i+0x90>
 8029fda:	d80a      	bhi.n	8029ff2 <_printf_i+0x3a>
 8029fdc:	2900      	cmp	r1, #0
 8029fde:	f000 80b9 	beq.w	802a154 <_printf_i+0x19c>
 8029fe2:	2958      	cmp	r1, #88	; 0x58
 8029fe4:	f000 8083 	beq.w	802a0ee <_printf_i+0x136>
 8029fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029fec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8029ff0:	e032      	b.n	802a058 <_printf_i+0xa0>
 8029ff2:	2964      	cmp	r1, #100	; 0x64
 8029ff4:	d001      	beq.n	8029ffa <_printf_i+0x42>
 8029ff6:	2969      	cmp	r1, #105	; 0x69
 8029ff8:	d1f6      	bne.n	8029fe8 <_printf_i+0x30>
 8029ffa:	6820      	ldr	r0, [r4, #0]
 8029ffc:	6813      	ldr	r3, [r2, #0]
 8029ffe:	0605      	lsls	r5, r0, #24
 802a000:	f103 0104 	add.w	r1, r3, #4
 802a004:	d52a      	bpl.n	802a05c <_printf_i+0xa4>
 802a006:	681b      	ldr	r3, [r3, #0]
 802a008:	6011      	str	r1, [r2, #0]
 802a00a:	2b00      	cmp	r3, #0
 802a00c:	da03      	bge.n	802a016 <_printf_i+0x5e>
 802a00e:	222d      	movs	r2, #45	; 0x2d
 802a010:	425b      	negs	r3, r3
 802a012:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802a016:	486f      	ldr	r0, [pc, #444]	; (802a1d4 <_printf_i+0x21c>)
 802a018:	220a      	movs	r2, #10
 802a01a:	e039      	b.n	802a090 <_printf_i+0xd8>
 802a01c:	2973      	cmp	r1, #115	; 0x73
 802a01e:	f000 809d 	beq.w	802a15c <_printf_i+0x1a4>
 802a022:	d808      	bhi.n	802a036 <_printf_i+0x7e>
 802a024:	296f      	cmp	r1, #111	; 0x6f
 802a026:	d020      	beq.n	802a06a <_printf_i+0xb2>
 802a028:	2970      	cmp	r1, #112	; 0x70
 802a02a:	d1dd      	bne.n	8029fe8 <_printf_i+0x30>
 802a02c:	6823      	ldr	r3, [r4, #0]
 802a02e:	f043 0320 	orr.w	r3, r3, #32
 802a032:	6023      	str	r3, [r4, #0]
 802a034:	e003      	b.n	802a03e <_printf_i+0x86>
 802a036:	2975      	cmp	r1, #117	; 0x75
 802a038:	d017      	beq.n	802a06a <_printf_i+0xb2>
 802a03a:	2978      	cmp	r1, #120	; 0x78
 802a03c:	d1d4      	bne.n	8029fe8 <_printf_i+0x30>
 802a03e:	2378      	movs	r3, #120	; 0x78
 802a040:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a044:	4864      	ldr	r0, [pc, #400]	; (802a1d8 <_printf_i+0x220>)
 802a046:	e055      	b.n	802a0f4 <_printf_i+0x13c>
 802a048:	6813      	ldr	r3, [r2, #0]
 802a04a:	1d19      	adds	r1, r3, #4
 802a04c:	681b      	ldr	r3, [r3, #0]
 802a04e:	6011      	str	r1, [r2, #0]
 802a050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a058:	2301      	movs	r3, #1
 802a05a:	e08c      	b.n	802a176 <_printf_i+0x1be>
 802a05c:	681b      	ldr	r3, [r3, #0]
 802a05e:	6011      	str	r1, [r2, #0]
 802a060:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a064:	bf18      	it	ne
 802a066:	b21b      	sxthne	r3, r3
 802a068:	e7cf      	b.n	802a00a <_printf_i+0x52>
 802a06a:	6813      	ldr	r3, [r2, #0]
 802a06c:	6825      	ldr	r5, [r4, #0]
 802a06e:	1d18      	adds	r0, r3, #4
 802a070:	6010      	str	r0, [r2, #0]
 802a072:	0628      	lsls	r0, r5, #24
 802a074:	d501      	bpl.n	802a07a <_printf_i+0xc2>
 802a076:	681b      	ldr	r3, [r3, #0]
 802a078:	e002      	b.n	802a080 <_printf_i+0xc8>
 802a07a:	0668      	lsls	r0, r5, #25
 802a07c:	d5fb      	bpl.n	802a076 <_printf_i+0xbe>
 802a07e:	881b      	ldrh	r3, [r3, #0]
 802a080:	4854      	ldr	r0, [pc, #336]	; (802a1d4 <_printf_i+0x21c>)
 802a082:	296f      	cmp	r1, #111	; 0x6f
 802a084:	bf14      	ite	ne
 802a086:	220a      	movne	r2, #10
 802a088:	2208      	moveq	r2, #8
 802a08a:	2100      	movs	r1, #0
 802a08c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a090:	6865      	ldr	r5, [r4, #4]
 802a092:	60a5      	str	r5, [r4, #8]
 802a094:	2d00      	cmp	r5, #0
 802a096:	f2c0 8095 	blt.w	802a1c4 <_printf_i+0x20c>
 802a09a:	6821      	ldr	r1, [r4, #0]
 802a09c:	f021 0104 	bic.w	r1, r1, #4
 802a0a0:	6021      	str	r1, [r4, #0]
 802a0a2:	2b00      	cmp	r3, #0
 802a0a4:	d13d      	bne.n	802a122 <_printf_i+0x16a>
 802a0a6:	2d00      	cmp	r5, #0
 802a0a8:	f040 808e 	bne.w	802a1c8 <_printf_i+0x210>
 802a0ac:	4665      	mov	r5, ip
 802a0ae:	2a08      	cmp	r2, #8
 802a0b0:	d10b      	bne.n	802a0ca <_printf_i+0x112>
 802a0b2:	6823      	ldr	r3, [r4, #0]
 802a0b4:	07db      	lsls	r3, r3, #31
 802a0b6:	d508      	bpl.n	802a0ca <_printf_i+0x112>
 802a0b8:	6923      	ldr	r3, [r4, #16]
 802a0ba:	6862      	ldr	r2, [r4, #4]
 802a0bc:	429a      	cmp	r2, r3
 802a0be:	bfde      	ittt	le
 802a0c0:	2330      	movle	r3, #48	; 0x30
 802a0c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a0c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a0ca:	ebac 0305 	sub.w	r3, ip, r5
 802a0ce:	6123      	str	r3, [r4, #16]
 802a0d0:	f8cd 8000 	str.w	r8, [sp]
 802a0d4:	463b      	mov	r3, r7
 802a0d6:	aa03      	add	r2, sp, #12
 802a0d8:	4621      	mov	r1, r4
 802a0da:	4630      	mov	r0, r6
 802a0dc:	f7ff fef6 	bl	8029ecc <_printf_common>
 802a0e0:	3001      	adds	r0, #1
 802a0e2:	d14d      	bne.n	802a180 <_printf_i+0x1c8>
 802a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 802a0e8:	b005      	add	sp, #20
 802a0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a0ee:	4839      	ldr	r0, [pc, #228]	; (802a1d4 <_printf_i+0x21c>)
 802a0f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802a0f4:	6813      	ldr	r3, [r2, #0]
 802a0f6:	6821      	ldr	r1, [r4, #0]
 802a0f8:	1d1d      	adds	r5, r3, #4
 802a0fa:	681b      	ldr	r3, [r3, #0]
 802a0fc:	6015      	str	r5, [r2, #0]
 802a0fe:	060a      	lsls	r2, r1, #24
 802a100:	d50b      	bpl.n	802a11a <_printf_i+0x162>
 802a102:	07ca      	lsls	r2, r1, #31
 802a104:	bf44      	itt	mi
 802a106:	f041 0120 	orrmi.w	r1, r1, #32
 802a10a:	6021      	strmi	r1, [r4, #0]
 802a10c:	b91b      	cbnz	r3, 802a116 <_printf_i+0x15e>
 802a10e:	6822      	ldr	r2, [r4, #0]
 802a110:	f022 0220 	bic.w	r2, r2, #32
 802a114:	6022      	str	r2, [r4, #0]
 802a116:	2210      	movs	r2, #16
 802a118:	e7b7      	b.n	802a08a <_printf_i+0xd2>
 802a11a:	064d      	lsls	r5, r1, #25
 802a11c:	bf48      	it	mi
 802a11e:	b29b      	uxthmi	r3, r3
 802a120:	e7ef      	b.n	802a102 <_printf_i+0x14a>
 802a122:	4665      	mov	r5, ip
 802a124:	fbb3 f1f2 	udiv	r1, r3, r2
 802a128:	fb02 3311 	mls	r3, r2, r1, r3
 802a12c:	5cc3      	ldrb	r3, [r0, r3]
 802a12e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802a132:	460b      	mov	r3, r1
 802a134:	2900      	cmp	r1, #0
 802a136:	d1f5      	bne.n	802a124 <_printf_i+0x16c>
 802a138:	e7b9      	b.n	802a0ae <_printf_i+0xf6>
 802a13a:	6813      	ldr	r3, [r2, #0]
 802a13c:	6825      	ldr	r5, [r4, #0]
 802a13e:	6961      	ldr	r1, [r4, #20]
 802a140:	1d18      	adds	r0, r3, #4
 802a142:	6010      	str	r0, [r2, #0]
 802a144:	0628      	lsls	r0, r5, #24
 802a146:	681b      	ldr	r3, [r3, #0]
 802a148:	d501      	bpl.n	802a14e <_printf_i+0x196>
 802a14a:	6019      	str	r1, [r3, #0]
 802a14c:	e002      	b.n	802a154 <_printf_i+0x19c>
 802a14e:	066a      	lsls	r2, r5, #25
 802a150:	d5fb      	bpl.n	802a14a <_printf_i+0x192>
 802a152:	8019      	strh	r1, [r3, #0]
 802a154:	2300      	movs	r3, #0
 802a156:	6123      	str	r3, [r4, #16]
 802a158:	4665      	mov	r5, ip
 802a15a:	e7b9      	b.n	802a0d0 <_printf_i+0x118>
 802a15c:	6813      	ldr	r3, [r2, #0]
 802a15e:	1d19      	adds	r1, r3, #4
 802a160:	6011      	str	r1, [r2, #0]
 802a162:	681d      	ldr	r5, [r3, #0]
 802a164:	6862      	ldr	r2, [r4, #4]
 802a166:	2100      	movs	r1, #0
 802a168:	4628      	mov	r0, r5
 802a16a:	f7d6 f851 	bl	8000210 <memchr>
 802a16e:	b108      	cbz	r0, 802a174 <_printf_i+0x1bc>
 802a170:	1b40      	subs	r0, r0, r5
 802a172:	6060      	str	r0, [r4, #4]
 802a174:	6863      	ldr	r3, [r4, #4]
 802a176:	6123      	str	r3, [r4, #16]
 802a178:	2300      	movs	r3, #0
 802a17a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a17e:	e7a7      	b.n	802a0d0 <_printf_i+0x118>
 802a180:	6923      	ldr	r3, [r4, #16]
 802a182:	462a      	mov	r2, r5
 802a184:	4639      	mov	r1, r7
 802a186:	4630      	mov	r0, r6
 802a188:	47c0      	blx	r8
 802a18a:	3001      	adds	r0, #1
 802a18c:	d0aa      	beq.n	802a0e4 <_printf_i+0x12c>
 802a18e:	6823      	ldr	r3, [r4, #0]
 802a190:	079b      	lsls	r3, r3, #30
 802a192:	d413      	bmi.n	802a1bc <_printf_i+0x204>
 802a194:	68e0      	ldr	r0, [r4, #12]
 802a196:	9b03      	ldr	r3, [sp, #12]
 802a198:	4298      	cmp	r0, r3
 802a19a:	bfb8      	it	lt
 802a19c:	4618      	movlt	r0, r3
 802a19e:	e7a3      	b.n	802a0e8 <_printf_i+0x130>
 802a1a0:	2301      	movs	r3, #1
 802a1a2:	464a      	mov	r2, r9
 802a1a4:	4639      	mov	r1, r7
 802a1a6:	4630      	mov	r0, r6
 802a1a8:	47c0      	blx	r8
 802a1aa:	3001      	adds	r0, #1
 802a1ac:	d09a      	beq.n	802a0e4 <_printf_i+0x12c>
 802a1ae:	3501      	adds	r5, #1
 802a1b0:	68e3      	ldr	r3, [r4, #12]
 802a1b2:	9a03      	ldr	r2, [sp, #12]
 802a1b4:	1a9b      	subs	r3, r3, r2
 802a1b6:	42ab      	cmp	r3, r5
 802a1b8:	dcf2      	bgt.n	802a1a0 <_printf_i+0x1e8>
 802a1ba:	e7eb      	b.n	802a194 <_printf_i+0x1dc>
 802a1bc:	2500      	movs	r5, #0
 802a1be:	f104 0919 	add.w	r9, r4, #25
 802a1c2:	e7f5      	b.n	802a1b0 <_printf_i+0x1f8>
 802a1c4:	2b00      	cmp	r3, #0
 802a1c6:	d1ac      	bne.n	802a122 <_printf_i+0x16a>
 802a1c8:	7803      	ldrb	r3, [r0, #0]
 802a1ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a1ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a1d2:	e76c      	b.n	802a0ae <_printf_i+0xf6>
 802a1d4:	0802f8d1 	.word	0x0802f8d1
 802a1d8:	0802f8e2 	.word	0x0802f8e2

0802a1dc <_sbrk_r>:
 802a1dc:	b538      	push	{r3, r4, r5, lr}
 802a1de:	4c06      	ldr	r4, [pc, #24]	; (802a1f8 <_sbrk_r+0x1c>)
 802a1e0:	2300      	movs	r3, #0
 802a1e2:	4605      	mov	r5, r0
 802a1e4:	4608      	mov	r0, r1
 802a1e6:	6023      	str	r3, [r4, #0]
 802a1e8:	f7d9 fb32 	bl	8003850 <_sbrk>
 802a1ec:	1c43      	adds	r3, r0, #1
 802a1ee:	d102      	bne.n	802a1f6 <_sbrk_r+0x1a>
 802a1f0:	6823      	ldr	r3, [r4, #0]
 802a1f2:	b103      	cbz	r3, 802a1f6 <_sbrk_r+0x1a>
 802a1f4:	602b      	str	r3, [r5, #0]
 802a1f6:	bd38      	pop	{r3, r4, r5, pc}
 802a1f8:	2000cdd8 	.word	0x2000cdd8

0802a1fc <_raise_r>:
 802a1fc:	291f      	cmp	r1, #31
 802a1fe:	b538      	push	{r3, r4, r5, lr}
 802a200:	4604      	mov	r4, r0
 802a202:	460d      	mov	r5, r1
 802a204:	d904      	bls.n	802a210 <_raise_r+0x14>
 802a206:	2316      	movs	r3, #22
 802a208:	6003      	str	r3, [r0, #0]
 802a20a:	f04f 30ff 	mov.w	r0, #4294967295
 802a20e:	bd38      	pop	{r3, r4, r5, pc}
 802a210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a212:	b112      	cbz	r2, 802a21a <_raise_r+0x1e>
 802a214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a218:	b94b      	cbnz	r3, 802a22e <_raise_r+0x32>
 802a21a:	4620      	mov	r0, r4
 802a21c:	f000 f830 	bl	802a280 <_getpid_r>
 802a220:	462a      	mov	r2, r5
 802a222:	4601      	mov	r1, r0
 802a224:	4620      	mov	r0, r4
 802a226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a22a:	f000 b817 	b.w	802a25c <_kill_r>
 802a22e:	2b01      	cmp	r3, #1
 802a230:	d00a      	beq.n	802a248 <_raise_r+0x4c>
 802a232:	1c59      	adds	r1, r3, #1
 802a234:	d103      	bne.n	802a23e <_raise_r+0x42>
 802a236:	2316      	movs	r3, #22
 802a238:	6003      	str	r3, [r0, #0]
 802a23a:	2001      	movs	r0, #1
 802a23c:	e7e7      	b.n	802a20e <_raise_r+0x12>
 802a23e:	2400      	movs	r4, #0
 802a240:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a244:	4628      	mov	r0, r5
 802a246:	4798      	blx	r3
 802a248:	2000      	movs	r0, #0
 802a24a:	e7e0      	b.n	802a20e <_raise_r+0x12>

0802a24c <raise>:
 802a24c:	4b02      	ldr	r3, [pc, #8]	; (802a258 <raise+0xc>)
 802a24e:	4601      	mov	r1, r0
 802a250:	6818      	ldr	r0, [r3, #0]
 802a252:	f7ff bfd3 	b.w	802a1fc <_raise_r>
 802a256:	bf00      	nop
 802a258:	200000dc 	.word	0x200000dc

0802a25c <_kill_r>:
 802a25c:	b538      	push	{r3, r4, r5, lr}
 802a25e:	4c07      	ldr	r4, [pc, #28]	; (802a27c <_kill_r+0x20>)
 802a260:	2300      	movs	r3, #0
 802a262:	4605      	mov	r5, r0
 802a264:	4608      	mov	r0, r1
 802a266:	4611      	mov	r1, r2
 802a268:	6023      	str	r3, [r4, #0]
 802a26a:	f7d9 fa69 	bl	8003740 <_kill>
 802a26e:	1c43      	adds	r3, r0, #1
 802a270:	d102      	bne.n	802a278 <_kill_r+0x1c>
 802a272:	6823      	ldr	r3, [r4, #0]
 802a274:	b103      	cbz	r3, 802a278 <_kill_r+0x1c>
 802a276:	602b      	str	r3, [r5, #0]
 802a278:	bd38      	pop	{r3, r4, r5, pc}
 802a27a:	bf00      	nop
 802a27c:	2000cdd8 	.word	0x2000cdd8

0802a280 <_getpid_r>:
 802a280:	f7d9 ba56 	b.w	8003730 <_getpid>

0802a284 <__swbuf_r>:
 802a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a286:	460e      	mov	r6, r1
 802a288:	4614      	mov	r4, r2
 802a28a:	4605      	mov	r5, r0
 802a28c:	b118      	cbz	r0, 802a296 <__swbuf_r+0x12>
 802a28e:	6983      	ldr	r3, [r0, #24]
 802a290:	b90b      	cbnz	r3, 802a296 <__swbuf_r+0x12>
 802a292:	f000 fa0b 	bl	802a6ac <__sinit>
 802a296:	4b21      	ldr	r3, [pc, #132]	; (802a31c <__swbuf_r+0x98>)
 802a298:	429c      	cmp	r4, r3
 802a29a:	d12a      	bne.n	802a2f2 <__swbuf_r+0x6e>
 802a29c:	686c      	ldr	r4, [r5, #4]
 802a29e:	69a3      	ldr	r3, [r4, #24]
 802a2a0:	60a3      	str	r3, [r4, #8]
 802a2a2:	89a3      	ldrh	r3, [r4, #12]
 802a2a4:	071a      	lsls	r2, r3, #28
 802a2a6:	d52e      	bpl.n	802a306 <__swbuf_r+0x82>
 802a2a8:	6923      	ldr	r3, [r4, #16]
 802a2aa:	b363      	cbz	r3, 802a306 <__swbuf_r+0x82>
 802a2ac:	6923      	ldr	r3, [r4, #16]
 802a2ae:	6820      	ldr	r0, [r4, #0]
 802a2b0:	1ac0      	subs	r0, r0, r3
 802a2b2:	6963      	ldr	r3, [r4, #20]
 802a2b4:	b2f6      	uxtb	r6, r6
 802a2b6:	4283      	cmp	r3, r0
 802a2b8:	4637      	mov	r7, r6
 802a2ba:	dc04      	bgt.n	802a2c6 <__swbuf_r+0x42>
 802a2bc:	4621      	mov	r1, r4
 802a2be:	4628      	mov	r0, r5
 802a2c0:	f000 f98a 	bl	802a5d8 <_fflush_r>
 802a2c4:	bb28      	cbnz	r0, 802a312 <__swbuf_r+0x8e>
 802a2c6:	68a3      	ldr	r3, [r4, #8]
 802a2c8:	3b01      	subs	r3, #1
 802a2ca:	60a3      	str	r3, [r4, #8]
 802a2cc:	6823      	ldr	r3, [r4, #0]
 802a2ce:	1c5a      	adds	r2, r3, #1
 802a2d0:	6022      	str	r2, [r4, #0]
 802a2d2:	701e      	strb	r6, [r3, #0]
 802a2d4:	6963      	ldr	r3, [r4, #20]
 802a2d6:	3001      	adds	r0, #1
 802a2d8:	4283      	cmp	r3, r0
 802a2da:	d004      	beq.n	802a2e6 <__swbuf_r+0x62>
 802a2dc:	89a3      	ldrh	r3, [r4, #12]
 802a2de:	07db      	lsls	r3, r3, #31
 802a2e0:	d519      	bpl.n	802a316 <__swbuf_r+0x92>
 802a2e2:	2e0a      	cmp	r6, #10
 802a2e4:	d117      	bne.n	802a316 <__swbuf_r+0x92>
 802a2e6:	4621      	mov	r1, r4
 802a2e8:	4628      	mov	r0, r5
 802a2ea:	f000 f975 	bl	802a5d8 <_fflush_r>
 802a2ee:	b190      	cbz	r0, 802a316 <__swbuf_r+0x92>
 802a2f0:	e00f      	b.n	802a312 <__swbuf_r+0x8e>
 802a2f2:	4b0b      	ldr	r3, [pc, #44]	; (802a320 <__swbuf_r+0x9c>)
 802a2f4:	429c      	cmp	r4, r3
 802a2f6:	d101      	bne.n	802a2fc <__swbuf_r+0x78>
 802a2f8:	68ac      	ldr	r4, [r5, #8]
 802a2fa:	e7d0      	b.n	802a29e <__swbuf_r+0x1a>
 802a2fc:	4b09      	ldr	r3, [pc, #36]	; (802a324 <__swbuf_r+0xa0>)
 802a2fe:	429c      	cmp	r4, r3
 802a300:	bf08      	it	eq
 802a302:	68ec      	ldreq	r4, [r5, #12]
 802a304:	e7cb      	b.n	802a29e <__swbuf_r+0x1a>
 802a306:	4621      	mov	r1, r4
 802a308:	4628      	mov	r0, r5
 802a30a:	f000 f80d 	bl	802a328 <__swsetup_r>
 802a30e:	2800      	cmp	r0, #0
 802a310:	d0cc      	beq.n	802a2ac <__swbuf_r+0x28>
 802a312:	f04f 37ff 	mov.w	r7, #4294967295
 802a316:	4638      	mov	r0, r7
 802a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a31a:	bf00      	nop
 802a31c:	0802f918 	.word	0x0802f918
 802a320:	0802f938 	.word	0x0802f938
 802a324:	0802f8f8 	.word	0x0802f8f8

0802a328 <__swsetup_r>:
 802a328:	4b32      	ldr	r3, [pc, #200]	; (802a3f4 <__swsetup_r+0xcc>)
 802a32a:	b570      	push	{r4, r5, r6, lr}
 802a32c:	681d      	ldr	r5, [r3, #0]
 802a32e:	4606      	mov	r6, r0
 802a330:	460c      	mov	r4, r1
 802a332:	b125      	cbz	r5, 802a33e <__swsetup_r+0x16>
 802a334:	69ab      	ldr	r3, [r5, #24]
 802a336:	b913      	cbnz	r3, 802a33e <__swsetup_r+0x16>
 802a338:	4628      	mov	r0, r5
 802a33a:	f000 f9b7 	bl	802a6ac <__sinit>
 802a33e:	4b2e      	ldr	r3, [pc, #184]	; (802a3f8 <__swsetup_r+0xd0>)
 802a340:	429c      	cmp	r4, r3
 802a342:	d10f      	bne.n	802a364 <__swsetup_r+0x3c>
 802a344:	686c      	ldr	r4, [r5, #4]
 802a346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a34a:	b29a      	uxth	r2, r3
 802a34c:	0715      	lsls	r5, r2, #28
 802a34e:	d42c      	bmi.n	802a3aa <__swsetup_r+0x82>
 802a350:	06d0      	lsls	r0, r2, #27
 802a352:	d411      	bmi.n	802a378 <__swsetup_r+0x50>
 802a354:	2209      	movs	r2, #9
 802a356:	6032      	str	r2, [r6, #0]
 802a358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a35c:	81a3      	strh	r3, [r4, #12]
 802a35e:	f04f 30ff 	mov.w	r0, #4294967295
 802a362:	e03e      	b.n	802a3e2 <__swsetup_r+0xba>
 802a364:	4b25      	ldr	r3, [pc, #148]	; (802a3fc <__swsetup_r+0xd4>)
 802a366:	429c      	cmp	r4, r3
 802a368:	d101      	bne.n	802a36e <__swsetup_r+0x46>
 802a36a:	68ac      	ldr	r4, [r5, #8]
 802a36c:	e7eb      	b.n	802a346 <__swsetup_r+0x1e>
 802a36e:	4b24      	ldr	r3, [pc, #144]	; (802a400 <__swsetup_r+0xd8>)
 802a370:	429c      	cmp	r4, r3
 802a372:	bf08      	it	eq
 802a374:	68ec      	ldreq	r4, [r5, #12]
 802a376:	e7e6      	b.n	802a346 <__swsetup_r+0x1e>
 802a378:	0751      	lsls	r1, r2, #29
 802a37a:	d512      	bpl.n	802a3a2 <__swsetup_r+0x7a>
 802a37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a37e:	b141      	cbz	r1, 802a392 <__swsetup_r+0x6a>
 802a380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a384:	4299      	cmp	r1, r3
 802a386:	d002      	beq.n	802a38e <__swsetup_r+0x66>
 802a388:	4630      	mov	r0, r6
 802a38a:	f7ff fbb7 	bl	8029afc <_free_r>
 802a38e:	2300      	movs	r3, #0
 802a390:	6363      	str	r3, [r4, #52]	; 0x34
 802a392:	89a3      	ldrh	r3, [r4, #12]
 802a394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a398:	81a3      	strh	r3, [r4, #12]
 802a39a:	2300      	movs	r3, #0
 802a39c:	6063      	str	r3, [r4, #4]
 802a39e:	6923      	ldr	r3, [r4, #16]
 802a3a0:	6023      	str	r3, [r4, #0]
 802a3a2:	89a3      	ldrh	r3, [r4, #12]
 802a3a4:	f043 0308 	orr.w	r3, r3, #8
 802a3a8:	81a3      	strh	r3, [r4, #12]
 802a3aa:	6923      	ldr	r3, [r4, #16]
 802a3ac:	b94b      	cbnz	r3, 802a3c2 <__swsetup_r+0x9a>
 802a3ae:	89a3      	ldrh	r3, [r4, #12]
 802a3b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a3b8:	d003      	beq.n	802a3c2 <__swsetup_r+0x9a>
 802a3ba:	4621      	mov	r1, r4
 802a3bc:	4630      	mov	r0, r6
 802a3be:	f000 fa23 	bl	802a808 <__smakebuf_r>
 802a3c2:	89a2      	ldrh	r2, [r4, #12]
 802a3c4:	f012 0301 	ands.w	r3, r2, #1
 802a3c8:	d00c      	beq.n	802a3e4 <__swsetup_r+0xbc>
 802a3ca:	2300      	movs	r3, #0
 802a3cc:	60a3      	str	r3, [r4, #8]
 802a3ce:	6963      	ldr	r3, [r4, #20]
 802a3d0:	425b      	negs	r3, r3
 802a3d2:	61a3      	str	r3, [r4, #24]
 802a3d4:	6923      	ldr	r3, [r4, #16]
 802a3d6:	b953      	cbnz	r3, 802a3ee <__swsetup_r+0xc6>
 802a3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a3dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802a3e0:	d1ba      	bne.n	802a358 <__swsetup_r+0x30>
 802a3e2:	bd70      	pop	{r4, r5, r6, pc}
 802a3e4:	0792      	lsls	r2, r2, #30
 802a3e6:	bf58      	it	pl
 802a3e8:	6963      	ldrpl	r3, [r4, #20]
 802a3ea:	60a3      	str	r3, [r4, #8]
 802a3ec:	e7f2      	b.n	802a3d4 <__swsetup_r+0xac>
 802a3ee:	2000      	movs	r0, #0
 802a3f0:	e7f7      	b.n	802a3e2 <__swsetup_r+0xba>
 802a3f2:	bf00      	nop
 802a3f4:	200000dc 	.word	0x200000dc
 802a3f8:	0802f918 	.word	0x0802f918
 802a3fc:	0802f938 	.word	0x0802f938
 802a400:	0802f8f8 	.word	0x0802f8f8

0802a404 <__register_exitproc>:
 802a404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a408:	4d2c      	ldr	r5, [pc, #176]	; (802a4bc <__register_exitproc+0xb8>)
 802a40a:	682c      	ldr	r4, [r5, #0]
 802a40c:	4607      	mov	r7, r0
 802a40e:	460e      	mov	r6, r1
 802a410:	4691      	mov	r9, r2
 802a412:	4698      	mov	r8, r3
 802a414:	b934      	cbnz	r4, 802a424 <__register_exitproc+0x20>
 802a416:	4b2a      	ldr	r3, [pc, #168]	; (802a4c0 <__register_exitproc+0xbc>)
 802a418:	4c2a      	ldr	r4, [pc, #168]	; (802a4c4 <__register_exitproc+0xc0>)
 802a41a:	602c      	str	r4, [r5, #0]
 802a41c:	b113      	cbz	r3, 802a424 <__register_exitproc+0x20>
 802a41e:	681b      	ldr	r3, [r3, #0]
 802a420:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a424:	6863      	ldr	r3, [r4, #4]
 802a426:	2b1f      	cmp	r3, #31
 802a428:	dd3d      	ble.n	802a4a6 <__register_exitproc+0xa2>
 802a42a:	4b27      	ldr	r3, [pc, #156]	; (802a4c8 <__register_exitproc+0xc4>)
 802a42c:	b91b      	cbnz	r3, 802a436 <__register_exitproc+0x32>
 802a42e:	f04f 30ff 	mov.w	r0, #4294967295
 802a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a436:	208c      	movs	r0, #140	; 0x8c
 802a438:	f7ff fb3c 	bl	8029ab4 <malloc>
 802a43c:	4604      	mov	r4, r0
 802a43e:	2800      	cmp	r0, #0
 802a440:	d0f5      	beq.n	802a42e <__register_exitproc+0x2a>
 802a442:	2300      	movs	r3, #0
 802a444:	682a      	ldr	r2, [r5, #0]
 802a446:	6002      	str	r2, [r0, #0]
 802a448:	6043      	str	r3, [r0, #4]
 802a44a:	6028      	str	r0, [r5, #0]
 802a44c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802a450:	b30f      	cbz	r7, 802a496 <__register_exitproc+0x92>
 802a452:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a456:	f7ff fb2d 	bl	8029ab4 <malloc>
 802a45a:	2800      	cmp	r0, #0
 802a45c:	d0e7      	beq.n	802a42e <__register_exitproc+0x2a>
 802a45e:	2300      	movs	r3, #0
 802a460:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a464:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802a468:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a46c:	6862      	ldr	r2, [r4, #4]
 802a46e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802a472:	2301      	movs	r3, #1
 802a474:	4093      	lsls	r3, r2
 802a476:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802a47a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802a47e:	431a      	orrs	r2, r3
 802a480:	2f02      	cmp	r7, #2
 802a482:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802a486:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802a48a:	bf02      	ittt	eq
 802a48c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802a490:	4313      	orreq	r3, r2
 802a492:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a496:	6863      	ldr	r3, [r4, #4]
 802a498:	1c5a      	adds	r2, r3, #1
 802a49a:	3302      	adds	r3, #2
 802a49c:	6062      	str	r2, [r4, #4]
 802a49e:	2000      	movs	r0, #0
 802a4a0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802a4a4:	e7c5      	b.n	802a432 <__register_exitproc+0x2e>
 802a4a6:	2f00      	cmp	r7, #0
 802a4a8:	d0f5      	beq.n	802a496 <__register_exitproc+0x92>
 802a4aa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a4ae:	2800      	cmp	r0, #0
 802a4b0:	d1dc      	bne.n	802a46c <__register_exitproc+0x68>
 802a4b2:	4b05      	ldr	r3, [pc, #20]	; (802a4c8 <__register_exitproc+0xc4>)
 802a4b4:	2b00      	cmp	r3, #0
 802a4b6:	d0ba      	beq.n	802a42e <__register_exitproc+0x2a>
 802a4b8:	e7cb      	b.n	802a452 <__register_exitproc+0x4e>
 802a4ba:	bf00      	nop
 802a4bc:	2000c1d0 	.word	0x2000c1d0
 802a4c0:	0802f8f4 	.word	0x0802f8f4
 802a4c4:	2000c144 	.word	0x2000c144
 802a4c8:	08029ab5 	.word	0x08029ab5

0802a4cc <__sflush_r>:
 802a4cc:	898a      	ldrh	r2, [r1, #12]
 802a4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a4d2:	4605      	mov	r5, r0
 802a4d4:	0710      	lsls	r0, r2, #28
 802a4d6:	460c      	mov	r4, r1
 802a4d8:	d458      	bmi.n	802a58c <__sflush_r+0xc0>
 802a4da:	684b      	ldr	r3, [r1, #4]
 802a4dc:	2b00      	cmp	r3, #0
 802a4de:	dc05      	bgt.n	802a4ec <__sflush_r+0x20>
 802a4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a4e2:	2b00      	cmp	r3, #0
 802a4e4:	dc02      	bgt.n	802a4ec <__sflush_r+0x20>
 802a4e6:	2000      	movs	r0, #0
 802a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a4ee:	2e00      	cmp	r6, #0
 802a4f0:	d0f9      	beq.n	802a4e6 <__sflush_r+0x1a>
 802a4f2:	2300      	movs	r3, #0
 802a4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a4f8:	682f      	ldr	r7, [r5, #0]
 802a4fa:	6a21      	ldr	r1, [r4, #32]
 802a4fc:	602b      	str	r3, [r5, #0]
 802a4fe:	d032      	beq.n	802a566 <__sflush_r+0x9a>
 802a500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a502:	89a3      	ldrh	r3, [r4, #12]
 802a504:	075a      	lsls	r2, r3, #29
 802a506:	d505      	bpl.n	802a514 <__sflush_r+0x48>
 802a508:	6863      	ldr	r3, [r4, #4]
 802a50a:	1ac0      	subs	r0, r0, r3
 802a50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a50e:	b10b      	cbz	r3, 802a514 <__sflush_r+0x48>
 802a510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a512:	1ac0      	subs	r0, r0, r3
 802a514:	2300      	movs	r3, #0
 802a516:	4602      	mov	r2, r0
 802a518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a51a:	6a21      	ldr	r1, [r4, #32]
 802a51c:	4628      	mov	r0, r5
 802a51e:	47b0      	blx	r6
 802a520:	1c43      	adds	r3, r0, #1
 802a522:	89a3      	ldrh	r3, [r4, #12]
 802a524:	d106      	bne.n	802a534 <__sflush_r+0x68>
 802a526:	6829      	ldr	r1, [r5, #0]
 802a528:	291d      	cmp	r1, #29
 802a52a:	d848      	bhi.n	802a5be <__sflush_r+0xf2>
 802a52c:	4a29      	ldr	r2, [pc, #164]	; (802a5d4 <__sflush_r+0x108>)
 802a52e:	40ca      	lsrs	r2, r1
 802a530:	07d6      	lsls	r6, r2, #31
 802a532:	d544      	bpl.n	802a5be <__sflush_r+0xf2>
 802a534:	2200      	movs	r2, #0
 802a536:	6062      	str	r2, [r4, #4]
 802a538:	04d9      	lsls	r1, r3, #19
 802a53a:	6922      	ldr	r2, [r4, #16]
 802a53c:	6022      	str	r2, [r4, #0]
 802a53e:	d504      	bpl.n	802a54a <__sflush_r+0x7e>
 802a540:	1c42      	adds	r2, r0, #1
 802a542:	d101      	bne.n	802a548 <__sflush_r+0x7c>
 802a544:	682b      	ldr	r3, [r5, #0]
 802a546:	b903      	cbnz	r3, 802a54a <__sflush_r+0x7e>
 802a548:	6560      	str	r0, [r4, #84]	; 0x54
 802a54a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a54c:	602f      	str	r7, [r5, #0]
 802a54e:	2900      	cmp	r1, #0
 802a550:	d0c9      	beq.n	802a4e6 <__sflush_r+0x1a>
 802a552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a556:	4299      	cmp	r1, r3
 802a558:	d002      	beq.n	802a560 <__sflush_r+0x94>
 802a55a:	4628      	mov	r0, r5
 802a55c:	f7ff face 	bl	8029afc <_free_r>
 802a560:	2000      	movs	r0, #0
 802a562:	6360      	str	r0, [r4, #52]	; 0x34
 802a564:	e7c0      	b.n	802a4e8 <__sflush_r+0x1c>
 802a566:	2301      	movs	r3, #1
 802a568:	4628      	mov	r0, r5
 802a56a:	47b0      	blx	r6
 802a56c:	1c41      	adds	r1, r0, #1
 802a56e:	d1c8      	bne.n	802a502 <__sflush_r+0x36>
 802a570:	682b      	ldr	r3, [r5, #0]
 802a572:	2b00      	cmp	r3, #0
 802a574:	d0c5      	beq.n	802a502 <__sflush_r+0x36>
 802a576:	2b1d      	cmp	r3, #29
 802a578:	d001      	beq.n	802a57e <__sflush_r+0xb2>
 802a57a:	2b16      	cmp	r3, #22
 802a57c:	d101      	bne.n	802a582 <__sflush_r+0xb6>
 802a57e:	602f      	str	r7, [r5, #0]
 802a580:	e7b1      	b.n	802a4e6 <__sflush_r+0x1a>
 802a582:	89a3      	ldrh	r3, [r4, #12]
 802a584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a588:	81a3      	strh	r3, [r4, #12]
 802a58a:	e7ad      	b.n	802a4e8 <__sflush_r+0x1c>
 802a58c:	690f      	ldr	r7, [r1, #16]
 802a58e:	2f00      	cmp	r7, #0
 802a590:	d0a9      	beq.n	802a4e6 <__sflush_r+0x1a>
 802a592:	0793      	lsls	r3, r2, #30
 802a594:	680e      	ldr	r6, [r1, #0]
 802a596:	bf08      	it	eq
 802a598:	694b      	ldreq	r3, [r1, #20]
 802a59a:	600f      	str	r7, [r1, #0]
 802a59c:	bf18      	it	ne
 802a59e:	2300      	movne	r3, #0
 802a5a0:	eba6 0807 	sub.w	r8, r6, r7
 802a5a4:	608b      	str	r3, [r1, #8]
 802a5a6:	f1b8 0f00 	cmp.w	r8, #0
 802a5aa:	dd9c      	ble.n	802a4e6 <__sflush_r+0x1a>
 802a5ac:	4643      	mov	r3, r8
 802a5ae:	463a      	mov	r2, r7
 802a5b0:	6a21      	ldr	r1, [r4, #32]
 802a5b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a5b4:	4628      	mov	r0, r5
 802a5b6:	47b0      	blx	r6
 802a5b8:	2800      	cmp	r0, #0
 802a5ba:	dc06      	bgt.n	802a5ca <__sflush_r+0xfe>
 802a5bc:	89a3      	ldrh	r3, [r4, #12]
 802a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a5c2:	81a3      	strh	r3, [r4, #12]
 802a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 802a5c8:	e78e      	b.n	802a4e8 <__sflush_r+0x1c>
 802a5ca:	4407      	add	r7, r0
 802a5cc:	eba8 0800 	sub.w	r8, r8, r0
 802a5d0:	e7e9      	b.n	802a5a6 <__sflush_r+0xda>
 802a5d2:	bf00      	nop
 802a5d4:	20400001 	.word	0x20400001

0802a5d8 <_fflush_r>:
 802a5d8:	b538      	push	{r3, r4, r5, lr}
 802a5da:	690b      	ldr	r3, [r1, #16]
 802a5dc:	4605      	mov	r5, r0
 802a5de:	460c      	mov	r4, r1
 802a5e0:	b1db      	cbz	r3, 802a61a <_fflush_r+0x42>
 802a5e2:	b118      	cbz	r0, 802a5ec <_fflush_r+0x14>
 802a5e4:	6983      	ldr	r3, [r0, #24]
 802a5e6:	b90b      	cbnz	r3, 802a5ec <_fflush_r+0x14>
 802a5e8:	f000 f860 	bl	802a6ac <__sinit>
 802a5ec:	4b0c      	ldr	r3, [pc, #48]	; (802a620 <_fflush_r+0x48>)
 802a5ee:	429c      	cmp	r4, r3
 802a5f0:	d109      	bne.n	802a606 <_fflush_r+0x2e>
 802a5f2:	686c      	ldr	r4, [r5, #4]
 802a5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a5f8:	b17b      	cbz	r3, 802a61a <_fflush_r+0x42>
 802a5fa:	4621      	mov	r1, r4
 802a5fc:	4628      	mov	r0, r5
 802a5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a602:	f7ff bf63 	b.w	802a4cc <__sflush_r>
 802a606:	4b07      	ldr	r3, [pc, #28]	; (802a624 <_fflush_r+0x4c>)
 802a608:	429c      	cmp	r4, r3
 802a60a:	d101      	bne.n	802a610 <_fflush_r+0x38>
 802a60c:	68ac      	ldr	r4, [r5, #8]
 802a60e:	e7f1      	b.n	802a5f4 <_fflush_r+0x1c>
 802a610:	4b05      	ldr	r3, [pc, #20]	; (802a628 <_fflush_r+0x50>)
 802a612:	429c      	cmp	r4, r3
 802a614:	bf08      	it	eq
 802a616:	68ec      	ldreq	r4, [r5, #12]
 802a618:	e7ec      	b.n	802a5f4 <_fflush_r+0x1c>
 802a61a:	2000      	movs	r0, #0
 802a61c:	bd38      	pop	{r3, r4, r5, pc}
 802a61e:	bf00      	nop
 802a620:	0802f918 	.word	0x0802f918
 802a624:	0802f938 	.word	0x0802f938
 802a628:	0802f8f8 	.word	0x0802f8f8

0802a62c <std>:
 802a62c:	2300      	movs	r3, #0
 802a62e:	b510      	push	{r4, lr}
 802a630:	4604      	mov	r4, r0
 802a632:	e9c0 3300 	strd	r3, r3, [r0]
 802a636:	6083      	str	r3, [r0, #8]
 802a638:	8181      	strh	r1, [r0, #12]
 802a63a:	6643      	str	r3, [r0, #100]	; 0x64
 802a63c:	81c2      	strh	r2, [r0, #14]
 802a63e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a642:	6183      	str	r3, [r0, #24]
 802a644:	4619      	mov	r1, r3
 802a646:	2208      	movs	r2, #8
 802a648:	305c      	adds	r0, #92	; 0x5c
 802a64a:	f7ff fa4e 	bl	8029aea <memset>
 802a64e:	4b05      	ldr	r3, [pc, #20]	; (802a664 <std+0x38>)
 802a650:	6263      	str	r3, [r4, #36]	; 0x24
 802a652:	4b05      	ldr	r3, [pc, #20]	; (802a668 <std+0x3c>)
 802a654:	62a3      	str	r3, [r4, #40]	; 0x28
 802a656:	4b05      	ldr	r3, [pc, #20]	; (802a66c <std+0x40>)
 802a658:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a65a:	4b05      	ldr	r3, [pc, #20]	; (802a670 <std+0x44>)
 802a65c:	6224      	str	r4, [r4, #32]
 802a65e:	6323      	str	r3, [r4, #48]	; 0x30
 802a660:	bd10      	pop	{r4, pc}
 802a662:	bf00      	nop
 802a664:	0802a88d 	.word	0x0802a88d
 802a668:	0802a8af 	.word	0x0802a8af
 802a66c:	0802a8e7 	.word	0x0802a8e7
 802a670:	0802a90b 	.word	0x0802a90b

0802a674 <_cleanup_r>:
 802a674:	4901      	ldr	r1, [pc, #4]	; (802a67c <_cleanup_r+0x8>)
 802a676:	f000 b885 	b.w	802a784 <_fwalk_reent>
 802a67a:	bf00      	nop
 802a67c:	0802a5d9 	.word	0x0802a5d9

0802a680 <__sfmoreglue>:
 802a680:	b570      	push	{r4, r5, r6, lr}
 802a682:	1e4a      	subs	r2, r1, #1
 802a684:	2568      	movs	r5, #104	; 0x68
 802a686:	4355      	muls	r5, r2
 802a688:	460e      	mov	r6, r1
 802a68a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a68e:	f7ff fa83 	bl	8029b98 <_malloc_r>
 802a692:	4604      	mov	r4, r0
 802a694:	b140      	cbz	r0, 802a6a8 <__sfmoreglue+0x28>
 802a696:	2100      	movs	r1, #0
 802a698:	e9c0 1600 	strd	r1, r6, [r0]
 802a69c:	300c      	adds	r0, #12
 802a69e:	60a0      	str	r0, [r4, #8]
 802a6a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a6a4:	f7ff fa21 	bl	8029aea <memset>
 802a6a8:	4620      	mov	r0, r4
 802a6aa:	bd70      	pop	{r4, r5, r6, pc}

0802a6ac <__sinit>:
 802a6ac:	6983      	ldr	r3, [r0, #24]
 802a6ae:	b510      	push	{r4, lr}
 802a6b0:	4604      	mov	r4, r0
 802a6b2:	bb33      	cbnz	r3, 802a702 <__sinit+0x56>
 802a6b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802a6b8:	6503      	str	r3, [r0, #80]	; 0x50
 802a6ba:	4b12      	ldr	r3, [pc, #72]	; (802a704 <__sinit+0x58>)
 802a6bc:	4a12      	ldr	r2, [pc, #72]	; (802a708 <__sinit+0x5c>)
 802a6be:	681b      	ldr	r3, [r3, #0]
 802a6c0:	6282      	str	r2, [r0, #40]	; 0x28
 802a6c2:	4298      	cmp	r0, r3
 802a6c4:	bf04      	itt	eq
 802a6c6:	2301      	moveq	r3, #1
 802a6c8:	6183      	streq	r3, [r0, #24]
 802a6ca:	f000 f81f 	bl	802a70c <__sfp>
 802a6ce:	6060      	str	r0, [r4, #4]
 802a6d0:	4620      	mov	r0, r4
 802a6d2:	f000 f81b 	bl	802a70c <__sfp>
 802a6d6:	60a0      	str	r0, [r4, #8]
 802a6d8:	4620      	mov	r0, r4
 802a6da:	f000 f817 	bl	802a70c <__sfp>
 802a6de:	2200      	movs	r2, #0
 802a6e0:	60e0      	str	r0, [r4, #12]
 802a6e2:	2104      	movs	r1, #4
 802a6e4:	6860      	ldr	r0, [r4, #4]
 802a6e6:	f7ff ffa1 	bl	802a62c <std>
 802a6ea:	2201      	movs	r2, #1
 802a6ec:	2109      	movs	r1, #9
 802a6ee:	68a0      	ldr	r0, [r4, #8]
 802a6f0:	f7ff ff9c 	bl	802a62c <std>
 802a6f4:	2202      	movs	r2, #2
 802a6f6:	2112      	movs	r1, #18
 802a6f8:	68e0      	ldr	r0, [r4, #12]
 802a6fa:	f7ff ff97 	bl	802a62c <std>
 802a6fe:	2301      	movs	r3, #1
 802a700:	61a3      	str	r3, [r4, #24]
 802a702:	bd10      	pop	{r4, pc}
 802a704:	0802f8bc 	.word	0x0802f8bc
 802a708:	0802a675 	.word	0x0802a675

0802a70c <__sfp>:
 802a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a70e:	4b1b      	ldr	r3, [pc, #108]	; (802a77c <__sfp+0x70>)
 802a710:	681e      	ldr	r6, [r3, #0]
 802a712:	69b3      	ldr	r3, [r6, #24]
 802a714:	4607      	mov	r7, r0
 802a716:	b913      	cbnz	r3, 802a71e <__sfp+0x12>
 802a718:	4630      	mov	r0, r6
 802a71a:	f7ff ffc7 	bl	802a6ac <__sinit>
 802a71e:	3648      	adds	r6, #72	; 0x48
 802a720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a724:	3b01      	subs	r3, #1
 802a726:	d503      	bpl.n	802a730 <__sfp+0x24>
 802a728:	6833      	ldr	r3, [r6, #0]
 802a72a:	b133      	cbz	r3, 802a73a <__sfp+0x2e>
 802a72c:	6836      	ldr	r6, [r6, #0]
 802a72e:	e7f7      	b.n	802a720 <__sfp+0x14>
 802a730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a734:	b16d      	cbz	r5, 802a752 <__sfp+0x46>
 802a736:	3468      	adds	r4, #104	; 0x68
 802a738:	e7f4      	b.n	802a724 <__sfp+0x18>
 802a73a:	2104      	movs	r1, #4
 802a73c:	4638      	mov	r0, r7
 802a73e:	f7ff ff9f 	bl	802a680 <__sfmoreglue>
 802a742:	6030      	str	r0, [r6, #0]
 802a744:	2800      	cmp	r0, #0
 802a746:	d1f1      	bne.n	802a72c <__sfp+0x20>
 802a748:	230c      	movs	r3, #12
 802a74a:	603b      	str	r3, [r7, #0]
 802a74c:	4604      	mov	r4, r0
 802a74e:	4620      	mov	r0, r4
 802a750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a752:	4b0b      	ldr	r3, [pc, #44]	; (802a780 <__sfp+0x74>)
 802a754:	6665      	str	r5, [r4, #100]	; 0x64
 802a756:	e9c4 5500 	strd	r5, r5, [r4]
 802a75a:	60a5      	str	r5, [r4, #8]
 802a75c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802a760:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802a764:	2208      	movs	r2, #8
 802a766:	4629      	mov	r1, r5
 802a768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a76c:	f7ff f9bd 	bl	8029aea <memset>
 802a770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a778:	e7e9      	b.n	802a74e <__sfp+0x42>
 802a77a:	bf00      	nop
 802a77c:	0802f8bc 	.word	0x0802f8bc
 802a780:	ffff0001 	.word	0xffff0001

0802a784 <_fwalk_reent>:
 802a784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a788:	4680      	mov	r8, r0
 802a78a:	4689      	mov	r9, r1
 802a78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a790:	2600      	movs	r6, #0
 802a792:	b914      	cbnz	r4, 802a79a <_fwalk_reent+0x16>
 802a794:	4630      	mov	r0, r6
 802a796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a79a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802a79e:	3f01      	subs	r7, #1
 802a7a0:	d501      	bpl.n	802a7a6 <_fwalk_reent+0x22>
 802a7a2:	6824      	ldr	r4, [r4, #0]
 802a7a4:	e7f5      	b.n	802a792 <_fwalk_reent+0xe>
 802a7a6:	89ab      	ldrh	r3, [r5, #12]
 802a7a8:	2b01      	cmp	r3, #1
 802a7aa:	d907      	bls.n	802a7bc <_fwalk_reent+0x38>
 802a7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a7b0:	3301      	adds	r3, #1
 802a7b2:	d003      	beq.n	802a7bc <_fwalk_reent+0x38>
 802a7b4:	4629      	mov	r1, r5
 802a7b6:	4640      	mov	r0, r8
 802a7b8:	47c8      	blx	r9
 802a7ba:	4306      	orrs	r6, r0
 802a7bc:	3568      	adds	r5, #104	; 0x68
 802a7be:	e7ee      	b.n	802a79e <_fwalk_reent+0x1a>

0802a7c0 <__swhatbuf_r>:
 802a7c0:	b570      	push	{r4, r5, r6, lr}
 802a7c2:	460e      	mov	r6, r1
 802a7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a7c8:	2900      	cmp	r1, #0
 802a7ca:	b096      	sub	sp, #88	; 0x58
 802a7cc:	4614      	mov	r4, r2
 802a7ce:	461d      	mov	r5, r3
 802a7d0:	da07      	bge.n	802a7e2 <__swhatbuf_r+0x22>
 802a7d2:	2300      	movs	r3, #0
 802a7d4:	602b      	str	r3, [r5, #0]
 802a7d6:	89b3      	ldrh	r3, [r6, #12]
 802a7d8:	061a      	lsls	r2, r3, #24
 802a7da:	d410      	bmi.n	802a7fe <__swhatbuf_r+0x3e>
 802a7dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a7e0:	e00e      	b.n	802a800 <__swhatbuf_r+0x40>
 802a7e2:	466a      	mov	r2, sp
 802a7e4:	f000 f8b8 	bl	802a958 <_fstat_r>
 802a7e8:	2800      	cmp	r0, #0
 802a7ea:	dbf2      	blt.n	802a7d2 <__swhatbuf_r+0x12>
 802a7ec:	9a01      	ldr	r2, [sp, #4]
 802a7ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a7f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a7f6:	425a      	negs	r2, r3
 802a7f8:	415a      	adcs	r2, r3
 802a7fa:	602a      	str	r2, [r5, #0]
 802a7fc:	e7ee      	b.n	802a7dc <__swhatbuf_r+0x1c>
 802a7fe:	2340      	movs	r3, #64	; 0x40
 802a800:	2000      	movs	r0, #0
 802a802:	6023      	str	r3, [r4, #0]
 802a804:	b016      	add	sp, #88	; 0x58
 802a806:	bd70      	pop	{r4, r5, r6, pc}

0802a808 <__smakebuf_r>:
 802a808:	898b      	ldrh	r3, [r1, #12]
 802a80a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a80c:	079d      	lsls	r5, r3, #30
 802a80e:	4606      	mov	r6, r0
 802a810:	460c      	mov	r4, r1
 802a812:	d507      	bpl.n	802a824 <__smakebuf_r+0x1c>
 802a814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a818:	6023      	str	r3, [r4, #0]
 802a81a:	6123      	str	r3, [r4, #16]
 802a81c:	2301      	movs	r3, #1
 802a81e:	6163      	str	r3, [r4, #20]
 802a820:	b002      	add	sp, #8
 802a822:	bd70      	pop	{r4, r5, r6, pc}
 802a824:	ab01      	add	r3, sp, #4
 802a826:	466a      	mov	r2, sp
 802a828:	f7ff ffca 	bl	802a7c0 <__swhatbuf_r>
 802a82c:	9900      	ldr	r1, [sp, #0]
 802a82e:	4605      	mov	r5, r0
 802a830:	4630      	mov	r0, r6
 802a832:	f7ff f9b1 	bl	8029b98 <_malloc_r>
 802a836:	b948      	cbnz	r0, 802a84c <__smakebuf_r+0x44>
 802a838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a83c:	059a      	lsls	r2, r3, #22
 802a83e:	d4ef      	bmi.n	802a820 <__smakebuf_r+0x18>
 802a840:	f023 0303 	bic.w	r3, r3, #3
 802a844:	f043 0302 	orr.w	r3, r3, #2
 802a848:	81a3      	strh	r3, [r4, #12]
 802a84a:	e7e3      	b.n	802a814 <__smakebuf_r+0xc>
 802a84c:	4b0d      	ldr	r3, [pc, #52]	; (802a884 <__smakebuf_r+0x7c>)
 802a84e:	62b3      	str	r3, [r6, #40]	; 0x28
 802a850:	89a3      	ldrh	r3, [r4, #12]
 802a852:	6020      	str	r0, [r4, #0]
 802a854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a858:	81a3      	strh	r3, [r4, #12]
 802a85a:	9b00      	ldr	r3, [sp, #0]
 802a85c:	6163      	str	r3, [r4, #20]
 802a85e:	9b01      	ldr	r3, [sp, #4]
 802a860:	6120      	str	r0, [r4, #16]
 802a862:	b15b      	cbz	r3, 802a87c <__smakebuf_r+0x74>
 802a864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a868:	4630      	mov	r0, r6
 802a86a:	f000 f887 	bl	802a97c <_isatty_r>
 802a86e:	b128      	cbz	r0, 802a87c <__smakebuf_r+0x74>
 802a870:	89a3      	ldrh	r3, [r4, #12]
 802a872:	f023 0303 	bic.w	r3, r3, #3
 802a876:	f043 0301 	orr.w	r3, r3, #1
 802a87a:	81a3      	strh	r3, [r4, #12]
 802a87c:	89a3      	ldrh	r3, [r4, #12]
 802a87e:	431d      	orrs	r5, r3
 802a880:	81a5      	strh	r5, [r4, #12]
 802a882:	e7cd      	b.n	802a820 <__smakebuf_r+0x18>
 802a884:	0802a675 	.word	0x0802a675

0802a888 <__malloc_lock>:
 802a888:	4770      	bx	lr

0802a88a <__malloc_unlock>:
 802a88a:	4770      	bx	lr

0802a88c <__sread>:
 802a88c:	b510      	push	{r4, lr}
 802a88e:	460c      	mov	r4, r1
 802a890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a894:	f000 f894 	bl	802a9c0 <_read_r>
 802a898:	2800      	cmp	r0, #0
 802a89a:	bfab      	itete	ge
 802a89c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a89e:	89a3      	ldrhlt	r3, [r4, #12]
 802a8a0:	181b      	addge	r3, r3, r0
 802a8a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a8a6:	bfac      	ite	ge
 802a8a8:	6563      	strge	r3, [r4, #84]	; 0x54
 802a8aa:	81a3      	strhlt	r3, [r4, #12]
 802a8ac:	bd10      	pop	{r4, pc}

0802a8ae <__swrite>:
 802a8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a8b2:	461f      	mov	r7, r3
 802a8b4:	898b      	ldrh	r3, [r1, #12]
 802a8b6:	05db      	lsls	r3, r3, #23
 802a8b8:	4605      	mov	r5, r0
 802a8ba:	460c      	mov	r4, r1
 802a8bc:	4616      	mov	r6, r2
 802a8be:	d505      	bpl.n	802a8cc <__swrite+0x1e>
 802a8c0:	2302      	movs	r3, #2
 802a8c2:	2200      	movs	r2, #0
 802a8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a8c8:	f000 f868 	bl	802a99c <_lseek_r>
 802a8cc:	89a3      	ldrh	r3, [r4, #12]
 802a8ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a8d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a8d6:	81a3      	strh	r3, [r4, #12]
 802a8d8:	4632      	mov	r2, r6
 802a8da:	463b      	mov	r3, r7
 802a8dc:	4628      	mov	r0, r5
 802a8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a8e2:	f000 b817 	b.w	802a914 <_write_r>

0802a8e6 <__sseek>:
 802a8e6:	b510      	push	{r4, lr}
 802a8e8:	460c      	mov	r4, r1
 802a8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a8ee:	f000 f855 	bl	802a99c <_lseek_r>
 802a8f2:	1c43      	adds	r3, r0, #1
 802a8f4:	89a3      	ldrh	r3, [r4, #12]
 802a8f6:	bf15      	itete	ne
 802a8f8:	6560      	strne	r0, [r4, #84]	; 0x54
 802a8fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a8fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a902:	81a3      	strheq	r3, [r4, #12]
 802a904:	bf18      	it	ne
 802a906:	81a3      	strhne	r3, [r4, #12]
 802a908:	bd10      	pop	{r4, pc}

0802a90a <__sclose>:
 802a90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a90e:	f000 b813 	b.w	802a938 <_close_r>
	...

0802a914 <_write_r>:
 802a914:	b538      	push	{r3, r4, r5, lr}
 802a916:	4c07      	ldr	r4, [pc, #28]	; (802a934 <_write_r+0x20>)
 802a918:	4605      	mov	r5, r0
 802a91a:	4608      	mov	r0, r1
 802a91c:	4611      	mov	r1, r2
 802a91e:	2200      	movs	r2, #0
 802a920:	6022      	str	r2, [r4, #0]
 802a922:	461a      	mov	r2, r3
 802a924:	f7d8 ff43 	bl	80037ae <_write>
 802a928:	1c43      	adds	r3, r0, #1
 802a92a:	d102      	bne.n	802a932 <_write_r+0x1e>
 802a92c:	6823      	ldr	r3, [r4, #0]
 802a92e:	b103      	cbz	r3, 802a932 <_write_r+0x1e>
 802a930:	602b      	str	r3, [r5, #0]
 802a932:	bd38      	pop	{r3, r4, r5, pc}
 802a934:	2000cdd8 	.word	0x2000cdd8

0802a938 <_close_r>:
 802a938:	b538      	push	{r3, r4, r5, lr}
 802a93a:	4c06      	ldr	r4, [pc, #24]	; (802a954 <_close_r+0x1c>)
 802a93c:	2300      	movs	r3, #0
 802a93e:	4605      	mov	r5, r0
 802a940:	4608      	mov	r0, r1
 802a942:	6023      	str	r3, [r4, #0]
 802a944:	f7d8 ff4f 	bl	80037e6 <_close>
 802a948:	1c43      	adds	r3, r0, #1
 802a94a:	d102      	bne.n	802a952 <_close_r+0x1a>
 802a94c:	6823      	ldr	r3, [r4, #0]
 802a94e:	b103      	cbz	r3, 802a952 <_close_r+0x1a>
 802a950:	602b      	str	r3, [r5, #0]
 802a952:	bd38      	pop	{r3, r4, r5, pc}
 802a954:	2000cdd8 	.word	0x2000cdd8

0802a958 <_fstat_r>:
 802a958:	b538      	push	{r3, r4, r5, lr}
 802a95a:	4c07      	ldr	r4, [pc, #28]	; (802a978 <_fstat_r+0x20>)
 802a95c:	2300      	movs	r3, #0
 802a95e:	4605      	mov	r5, r0
 802a960:	4608      	mov	r0, r1
 802a962:	4611      	mov	r1, r2
 802a964:	6023      	str	r3, [r4, #0]
 802a966:	f7d8 ff4a 	bl	80037fe <_fstat>
 802a96a:	1c43      	adds	r3, r0, #1
 802a96c:	d102      	bne.n	802a974 <_fstat_r+0x1c>
 802a96e:	6823      	ldr	r3, [r4, #0]
 802a970:	b103      	cbz	r3, 802a974 <_fstat_r+0x1c>
 802a972:	602b      	str	r3, [r5, #0]
 802a974:	bd38      	pop	{r3, r4, r5, pc}
 802a976:	bf00      	nop
 802a978:	2000cdd8 	.word	0x2000cdd8

0802a97c <_isatty_r>:
 802a97c:	b538      	push	{r3, r4, r5, lr}
 802a97e:	4c06      	ldr	r4, [pc, #24]	; (802a998 <_isatty_r+0x1c>)
 802a980:	2300      	movs	r3, #0
 802a982:	4605      	mov	r5, r0
 802a984:	4608      	mov	r0, r1
 802a986:	6023      	str	r3, [r4, #0]
 802a988:	f7d8 ff49 	bl	800381e <_isatty>
 802a98c:	1c43      	adds	r3, r0, #1
 802a98e:	d102      	bne.n	802a996 <_isatty_r+0x1a>
 802a990:	6823      	ldr	r3, [r4, #0]
 802a992:	b103      	cbz	r3, 802a996 <_isatty_r+0x1a>
 802a994:	602b      	str	r3, [r5, #0]
 802a996:	bd38      	pop	{r3, r4, r5, pc}
 802a998:	2000cdd8 	.word	0x2000cdd8

0802a99c <_lseek_r>:
 802a99c:	b538      	push	{r3, r4, r5, lr}
 802a99e:	4c07      	ldr	r4, [pc, #28]	; (802a9bc <_lseek_r+0x20>)
 802a9a0:	4605      	mov	r5, r0
 802a9a2:	4608      	mov	r0, r1
 802a9a4:	4611      	mov	r1, r2
 802a9a6:	2200      	movs	r2, #0
 802a9a8:	6022      	str	r2, [r4, #0]
 802a9aa:	461a      	mov	r2, r3
 802a9ac:	f7d8 ff42 	bl	8003834 <_lseek>
 802a9b0:	1c43      	adds	r3, r0, #1
 802a9b2:	d102      	bne.n	802a9ba <_lseek_r+0x1e>
 802a9b4:	6823      	ldr	r3, [r4, #0]
 802a9b6:	b103      	cbz	r3, 802a9ba <_lseek_r+0x1e>
 802a9b8:	602b      	str	r3, [r5, #0]
 802a9ba:	bd38      	pop	{r3, r4, r5, pc}
 802a9bc:	2000cdd8 	.word	0x2000cdd8

0802a9c0 <_read_r>:
 802a9c0:	b538      	push	{r3, r4, r5, lr}
 802a9c2:	4c07      	ldr	r4, [pc, #28]	; (802a9e0 <_read_r+0x20>)
 802a9c4:	4605      	mov	r5, r0
 802a9c6:	4608      	mov	r0, r1
 802a9c8:	4611      	mov	r1, r2
 802a9ca:	2200      	movs	r2, #0
 802a9cc:	6022      	str	r2, [r4, #0]
 802a9ce:	461a      	mov	r2, r3
 802a9d0:	f7d8 fed0 	bl	8003774 <_read>
 802a9d4:	1c43      	adds	r3, r0, #1
 802a9d6:	d102      	bne.n	802a9de <_read_r+0x1e>
 802a9d8:	6823      	ldr	r3, [r4, #0]
 802a9da:	b103      	cbz	r3, 802a9de <_read_r+0x1e>
 802a9dc:	602b      	str	r3, [r5, #0]
 802a9de:	bd38      	pop	{r3, r4, r5, pc}
 802a9e0:	2000cdd8 	.word	0x2000cdd8

0802a9e4 <_init>:
 802a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9e6:	bf00      	nop
 802a9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a9ea:	bc08      	pop	{r3}
 802a9ec:	469e      	mov	lr, r3
 802a9ee:	4770      	bx	lr

0802a9f0 <_fini>:
 802a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9f2:	bf00      	nop
 802a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a9f6:	bc08      	pop	{r3}
 802a9f8:	469e      	mov	lr, r3
 802a9fa:	4770      	bx	lr
